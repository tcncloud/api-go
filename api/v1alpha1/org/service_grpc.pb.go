// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1alpha1/org/service.proto

package org

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Org_CreateOrganization_FullMethodName                       = "/api.v1alpha1.org.Org/CreateOrganization"
	Org_GetOrganization_FullMethodName                          = "/api.v1alpha1.org.Org/GetOrganization"
	Org_GetOrganizationById_FullMethodName                      = "/api.v1alpha1.org.Org/GetOrganizationById"
	Org_UpdateOrganization_FullMethodName                       = "/api.v1alpha1.org.Org/UpdateOrganization"
	Org_ArchiveOrganization_FullMethodName                      = "/api.v1alpha1.org.Org/ArchiveOrganization"
	Org_UnArchiveOrganization_FullMethodName                    = "/api.v1alpha1.org.Org/UnArchiveOrganization"
	Org_ListAllOrganizationsGlobally_FullMethodName             = "/api.v1alpha1.org.Org/ListAllOrganizationsGlobally"
	Org_ListOrganizationsByRegion_FullMethodName                = "/api.v1alpha1.org.Org/ListOrganizationsByRegion"
	Org_ListArchivedOrganizations_FullMethodName                = "/api.v1alpha1.org.Org/ListArchivedOrganizations"
	Org_ConvertOrgToManual_FullMethodName                       = "/api.v1alpha1.org.Org/ConvertOrgToManual"
	Org_ListOwnedOrgs_FullMethodName                            = "/api.v1alpha1.org.Org/ListOwnedOrgs"
	Org_GetOrganizationPreferences_FullMethodName               = "/api.v1alpha1.org.Org/GetOrganizationPreferences"
	Org_UpdateOrganizationPreferences_FullMethodName            = "/api.v1alpha1.org.Org/UpdateOrganizationPreferences"
	Org_GetAgentPreferences_FullMethodName                      = "/api.v1alpha1.org.Org/GetAgentPreferences"
	Org_UpdateAgentPreferences_FullMethodName                   = "/api.v1alpha1.org.Org/UpdateAgentPreferences"
	Org_GetContactPreferences_FullMethodName                    = "/api.v1alpha1.org.Org/GetContactPreferences"
	Org_UpdateContactPreferences_FullMethodName                 = "/api.v1alpha1.org.Org/UpdateContactPreferences"
	Org_GetAuthenticationPreferences_FullMethodName             = "/api.v1alpha1.org.Org/GetAuthenticationPreferences"
	Org_UpdateAuthenticationPreferences_FullMethodName          = "/api.v1alpha1.org.Org/UpdateAuthenticationPreferences"
	Org_GetWebhookPreferences_FullMethodName                    = "/api.v1alpha1.org.Org/GetWebhookPreferences"
	Org_UpdateWebhookPreferences_FullMethodName                 = "/api.v1alpha1.org.Org/UpdateWebhookPreferences"
	Org_GetDashboardGeneralPreferences_FullMethodName           = "/api.v1alpha1.org.Org/GetDashboardGeneralPreferences"
	Org_UpdateDashboardGeneralPreferences_FullMethodName        = "/api.v1alpha1.org.Org/UpdateDashboardGeneralPreferences"
	Org_GetDashboardQueuePreferences_FullMethodName             = "/api.v1alpha1.org.Org/GetDashboardQueuePreferences"
	Org_UpdateDashboardQueuePreferences_FullMethodName          = "/api.v1alpha1.org.Org/UpdateDashboardQueuePreferences"
	Org_GetPhonePreferences_FullMethodName                      = "/api.v1alpha1.org.Org/GetPhonePreferences"
	Org_UpdatePhonePreferences_FullMethodName                   = "/api.v1alpha1.org.Org/UpdatePhonePreferences"
	Org_GetCompliancePreferences_FullMethodName                 = "/api.v1alpha1.org.Org/GetCompliancePreferences"
	Org_UpdateCompliancePreferences_FullMethodName              = "/api.v1alpha1.org.Org/UpdateCompliancePreferences"
	Org_GetBroadcastPreferences_FullMethodName                  = "/api.v1alpha1.org.Org/GetBroadcastPreferences"
	Org_UpdateBroadcastPreferences_FullMethodName               = "/api.v1alpha1.org.Org/UpdateBroadcastPreferences"
	Org_GetSchedulePreferences_FullMethodName                   = "/api.v1alpha1.org.Org/GetSchedulePreferences"
	Org_UpdateSchedulePreferences_FullMethodName                = "/api.v1alpha1.org.Org/UpdateSchedulePreferences"
	Org_GetEmailSmsPreferences_FullMethodName                   = "/api.v1alpha1.org.Org/GetEmailSmsPreferences"
	Org_UpdateEmailSmsPreferences_FullMethodName                = "/api.v1alpha1.org.Org/UpdateEmailSmsPreferences"
	Org_GetBusinessPreferences_FullMethodName                   = "/api.v1alpha1.org.Org/GetBusinessPreferences"
	Org_UpdateBusinessPreferences_FullMethodName                = "/api.v1alpha1.org.Org/UpdateBusinessPreferences"
	Org_UpdateAdminBusinessPreferences_FullMethodName           = "/api.v1alpha1.org.Org/UpdateAdminBusinessPreferences"
	Org_GetScorecardsPreferences_FullMethodName                 = "/api.v1alpha1.org.Org/GetScorecardsPreferences"
	Org_UpdateScorecardsPreferences_FullMethodName              = "/api.v1alpha1.org.Org/UpdateScorecardsPreferences"
	Org_GetVoiceAnalyticsPreferences_FullMethodName             = "/api.v1alpha1.org.Org/GetVoiceAnalyticsPreferences"
	Org_ListVoiceAnalyticsPreferences_FullMethodName            = "/api.v1alpha1.org.Org/ListVoiceAnalyticsPreferences"
	Org_UpdateVoiceAnalyticsPreferences_FullMethodName          = "/api.v1alpha1.org.Org/UpdateVoiceAnalyticsPreferences"
	Org_GetEndOfDayPreferences_FullMethodName                   = "/api.v1alpha1.org.Org/GetEndOfDayPreferences"
	Org_UpdateEndOfDayPreferences_FullMethodName                = "/api.v1alpha1.org.Org/UpdateEndOfDayPreferences"
	Org_GetReportFilterPreferences_FullMethodName               = "/api.v1alpha1.org.Org/GetReportFilterPreferences"
	Org_UpdateReportFilterPreferences_FullMethodName            = "/api.v1alpha1.org.Org/UpdateReportFilterPreferences"
	Org_GetRecordingPreferences_FullMethodName                  = "/api.v1alpha1.org.Org/GetRecordingPreferences"
	Org_UpdateRecordingPreferences_FullMethodName               = "/api.v1alpha1.org.Org/UpdateRecordingPreferences"
	Org_GetAdminClientPreferences_FullMethodName                = "/api.v1alpha1.org.Org/GetAdminClientPreferences"
	Org_UpdateAdminClientPreferences_FullMethodName             = "/api.v1alpha1.org.Org/UpdateAdminClientPreferences"
	Org_AcceptLinkbackRecordingTerms_FullMethodName             = "/api.v1alpha1.org.Org/AcceptLinkbackRecordingTerms"
	Org_LinkbackUpdateBroadcastTemplates_FullMethodName         = "/api.v1alpha1.org.Org/LinkbackUpdateBroadcastTemplates"
	Org_RecordEmailUnsubscribeAcknowledgement_FullMethodName    = "/api.v1alpha1.org.Org/RecordEmailUnsubscribeAcknowledgement"
	Org_ClearEmailUnsubscribeAcknowledgement_FullMethodName     = "/api.v1alpha1.org.Org/ClearEmailUnsubscribeAcknowledgement"
	Org_ListBusinessHours_FullMethodName                        = "/api.v1alpha1.org.Org/ListBusinessHours"
	Org_GetBusinessHours_FullMethodName                         = "/api.v1alpha1.org.Org/GetBusinessHours"
	Org_SetBusinessHours_FullMethodName                         = "/api.v1alpha1.org.Org/SetBusinessHours"
	Org_AddIntervalToBusinessHours_FullMethodName               = "/api.v1alpha1.org.Org/AddIntervalToBusinessHours"
	Org_RemoveIntervalFromBusinessHours_FullMethodName          = "/api.v1alpha1.org.Org/RemoveIntervalFromBusinessHours"
	Org_UpdateBusinessHoursInfo_FullMethodName                  = "/api.v1alpha1.org.Org/UpdateBusinessHoursInfo"
	Org_DeleteBusinessHours_FullMethodName                      = "/api.v1alpha1.org.Org/DeleteBusinessHours"
	Org_EvaluateBusinessHours_FullMethodName                    = "/api.v1alpha1.org.Org/EvaluateBusinessHours"
	Org_CreateUser_FullMethodName                               = "/api.v1alpha1.org.Org/CreateUser"
	Org_CreateDelegatedUser_FullMethodName                      = "/api.v1alpha1.org.Org/CreateDelegatedUser"
	Org_GetMyUser_FullMethodName                                = "/api.v1alpha1.org.Org/GetMyUser"
	Org_GetUser_FullMethodName                                  = "/api.v1alpha1.org.Org/GetUser"
	Org_GetUserByOrgId_FullMethodName                           = "/api.v1alpha1.org.Org/GetUserByOrgId"
	Org_ListAgents_FullMethodName                               = "/api.v1alpha1.org.Org/ListAgents"
	Org_ListPublicUsers_FullMethodName                          = "/api.v1alpha1.org.Org/ListPublicUsers"
	Org_ListUsers_FullMethodName                                = "/api.v1alpha1.org.Org/ListUsers"
	Org_ListUsersByOrgId_FullMethodName                         = "/api.v1alpha1.org.Org/ListUsersByOrgId"
	Org_ListUsersByRegion_FullMethodName                        = "/api.v1alpha1.org.Org/ListUsersByRegion"
	Org_UpdateMyUser_FullMethodName                             = "/api.v1alpha1.org.Org/UpdateMyUser"
	Org_UpdateUser_FullMethodName                               = "/api.v1alpha1.org.Org/UpdateUser"
	Org_UpdateUserLabels_FullMethodName                         = "/api.v1alpha1.org.Org/UpdateUserLabels"
	Org_UpdateUserCallerId_FullMethodName                       = "/api.v1alpha1.org.Org/UpdateUserCallerId"
	Org_UpdateUserDisabled_FullMethodName                       = "/api.v1alpha1.org.Org/UpdateUserDisabled"
	Org_UpdateUserDisabledByOrgId_FullMethodName                = "/api.v1alpha1.org.Org/UpdateUserDisabledByOrgId"
	Org_GetMyUserPasswordResetLink_FullMethodName               = "/api.v1alpha1.org.Org/GetMyUserPasswordResetLink"
	Org_GetUserPasswordResetLink_FullMethodName                 = "/api.v1alpha1.org.Org/GetUserPasswordResetLink"
	Org_GetUserPasswordResetLinkByOrgId_FullMethodName          = "/api.v1alpha1.org.Org/GetUserPasswordResetLinkByOrgId"
	Org_CreatePasswordResetLink_FullMethodName                  = "/api.v1alpha1.org.Org/CreatePasswordResetLink"
	Org_CreatePasswordResetLinkByOrgId_FullMethodName           = "/api.v1alpha1.org.Org/CreatePasswordResetLinkByOrgId"
	Org_GetUserLoginInfo_FullMethodName                         = "/api.v1alpha1.org.Org/GetUserLoginInfo"
	Org_GetUserEmailVerified_FullMethodName                     = "/api.v1alpha1.org.Org/GetUserEmailVerified"
	Org_GetUserEmailVerifiedByOrgId_FullMethodName              = "/api.v1alpha1.org.Org/GetUserEmailVerifiedByOrgId"
	Org_ResetMyPassword_FullMethodName                          = "/api.v1alpha1.org.Org/ResetMyPassword"
	Org_ResetUserPassword_FullMethodName                        = "/api.v1alpha1.org.Org/ResetUserPassword"
	Org_ResetUserPasswordByOrgId_FullMethodName                 = "/api.v1alpha1.org.Org/ResetUserPasswordByOrgId"
	Org_SendUserEmailVerification_FullMethodName                = "/api.v1alpha1.org.Org/SendUserEmailVerification"
	Org_SendUserEmailVerificationByOrgId_FullMethodName         = "/api.v1alpha1.org.Org/SendUserEmailVerificationByOrgId"
	Org_SendPasswordReset_FullMethodName                        = "/api.v1alpha1.org.Org/SendPasswordReset"
	Org_SendPasswordResetByOrgId_FullMethodName                 = "/api.v1alpha1.org.Org/SendPasswordResetByOrgId"
	Org_GetUserSessionData_FullMethodName                       = "/api.v1alpha1.org.Org/GetUserSessionData"
	Org_GetAgentProfileGroup_FullMethodName                     = "/api.v1alpha1.org.Org/GetAgentProfileGroup"
	Org_ListAgentProfileGroups_FullMethodName                   = "/api.v1alpha1.org.Org/ListAgentProfileGroups"
	Org_UpdateAgentProfileGroup_FullMethodName                  = "/api.v1alpha1.org.Org/UpdateAgentProfileGroup"
	Org_CreateAgentProfileGroup_FullMethodName                  = "/api.v1alpha1.org.Org/CreateAgentProfileGroup"
	Org_DeleteAgentProfileGroup_FullMethodName                  = "/api.v1alpha1.org.Org/DeleteAgentProfileGroup"
	Org_AssignAgentProfileGroups_FullMethodName                 = "/api.v1alpha1.org.Org/AssignAgentProfileGroups"
	Org_AddUserSubscription_FullMethodName                      = "/api.v1alpha1.org.Org/AddUserSubscription"
	Org_AddUserSubscriptionByUserId_FullMethodName              = "/api.v1alpha1.org.Org/AddUserSubscriptionByUserId"
	Org_GetUserSubscription_FullMethodName                      = "/api.v1alpha1.org.Org/GetUserSubscription"
	Org_GetUserSubscriptionByUserId_FullMethodName              = "/api.v1alpha1.org.Org/GetUserSubscriptionByUserId"
	Org_UpdateUserSubscription_FullMethodName                   = "/api.v1alpha1.org.Org/UpdateUserSubscription"
	Org_UpdateUserSubscriptionByUserId_FullMethodName           = "/api.v1alpha1.org.Org/UpdateUserSubscriptionByUserId"
	Org_RemoveUserSubscription_FullMethodName                   = "/api.v1alpha1.org.Org/RemoveUserSubscription"
	Org_RemoveUserSubscriptionByUserId_FullMethodName           = "/api.v1alpha1.org.Org/RemoveUserSubscriptionByUserId"
	Org_ListUserSubscriptions_FullMethodName                    = "/api.v1alpha1.org.Org/ListUserSubscriptions"
	Org_ListUserSubscriptionsByUserId_FullMethodName            = "/api.v1alpha1.org.Org/ListUserSubscriptionsByUserId"
	Org_ListOrgSubscriptions_FullMethodName                     = "/api.v1alpha1.org.Org/ListOrgSubscriptions"
	Org_CreateAuthToken_FullMethodName                          = "/api.v1alpha1.org.Org/CreateAuthToken"
	Org_CreateAuthTokenByUserId_FullMethodName                  = "/api.v1alpha1.org.Org/CreateAuthTokenByUserId"
	Org_ListAuthTokens_FullMethodName                           = "/api.v1alpha1.org.Org/ListAuthTokens"
	Org_ListAuthTokensByUserId_FullMethodName                   = "/api.v1alpha1.org.Org/ListAuthTokensByUserId"
	Org_SetAuthTokenExpiration_FullMethodName                   = "/api.v1alpha1.org.Org/SetAuthTokenExpiration"
	Org_SetAuthTokenExpirationByUserId_FullMethodName           = "/api.v1alpha1.org.Org/SetAuthTokenExpirationByUserId"
	Org_DeleteAuthToken_FullMethodName                          = "/api.v1alpha1.org.Org/DeleteAuthToken"
	Org_DeleteAuthTokenByUserId_FullMethodName                  = "/api.v1alpha1.org.Org/DeleteAuthTokenByUserId"
	Org_GetHuntGroupSettings_FullMethodName                     = "/api.v1alpha1.org.Org/GetHuntGroupSettings"
	Org_UpdateHuntGroupSettings_FullMethodName                  = "/api.v1alpha1.org.Org/UpdateHuntGroupSettings"
	Org_CreateHuntGroup_FullMethodName                          = "/api.v1alpha1.org.Org/CreateHuntGroup"
	Org_UpdateHuntGroupGeneralDetails_FullMethodName            = "/api.v1alpha1.org.Org/UpdateHuntGroupGeneralDetails"
	Org_DeleteHuntGroup_FullMethodName                          = "/api.v1alpha1.org.Org/DeleteHuntGroup"
	Org_GetHuntGroupDetails_FullMethodName                      = "/api.v1alpha1.org.Org/GetHuntGroupDetails"
	Org_ListCallerIdBuckets_FullMethodName                      = "/api.v1alpha1.org.Org/ListCallerIdBuckets"
	Org_GetDataDipTemplate_FullMethodName                       = "/api.v1alpha1.org.Org/GetDataDipTemplate"
	Org_ListDataDipTemplates_FullMethodName                     = "/api.v1alpha1.org.Org/ListDataDipTemplates"
	Org_CreateDataDipTemplate_FullMethodName                    = "/api.v1alpha1.org.Org/CreateDataDipTemplate"
	Org_UpdateDataDipTemplate_FullMethodName                    = "/api.v1alpha1.org.Org/UpdateDataDipTemplate"
	Org_DeleteDataDipTemplate_FullMethodName                    = "/api.v1alpha1.org.Org/DeleteDataDipTemplate"
	Org_CopyDataDipTemplate_FullMethodName                      = "/api.v1alpha1.org.Org/CopyDataDipTemplate"
	Org_CopyDataDipTemplateToOrganization_FullMethodName        = "/api.v1alpha1.org.Org/CopyDataDipTemplateToOrganization"
	Org_ListBroadcastTemplateGeneralDetails_FullMethodName      = "/api.v1alpha1.org.Org/ListBroadcastTemplateGeneralDetails"
	Org_ListAgentResponseAutoRules_FullMethodName               = "/api.v1alpha1.org.Org/ListAgentResponseAutoRules"
	Org_CreateAgentResponseAutoRules_FullMethodName             = "/api.v1alpha1.org.Org/CreateAgentResponseAutoRules"
	Org_UpdateAgentResponseAutoRules_FullMethodName             = "/api.v1alpha1.org.Org/UpdateAgentResponseAutoRules"
	Org_DeleteAgentResponseAutoRules_FullMethodName             = "/api.v1alpha1.org.Org/DeleteAgentResponseAutoRules"
	Org_ListHuntGroupWebLinks_FullMethodName                    = "/api.v1alpha1.org.Org/ListHuntGroupWebLinks"
	Org_CopyHuntGroupWebLink_FullMethodName                     = "/api.v1alpha1.org.Org/CopyHuntGroupWebLink"
	Org_UpdateHuntGroupWebLinks_FullMethodName                  = "/api.v1alpha1.org.Org/UpdateHuntGroupWebLinks"
	Org_ListHuntGroupIntegrationLinks_FullMethodName            = "/api.v1alpha1.org.Org/ListHuntGroupIntegrationLinks"
	Org_CopyHuntGroupIntegrationLink_FullMethodName             = "/api.v1alpha1.org.Org/CopyHuntGroupIntegrationLink"
	Org_UpdateHuntGroupIntegrationLinks_FullMethodName          = "/api.v1alpha1.org.Org/UpdateHuntGroupIntegrationLinks"
	Org_GetHuntGroupClientInfoDisplayTemplate_FullMethodName    = "/api.v1alpha1.org.Org/GetHuntGroupClientInfoDisplayTemplate"
	Org_CreateHuntGroupClientInfoDisplayTemplate_FullMethodName = "/api.v1alpha1.org.Org/CreateHuntGroupClientInfoDisplayTemplate"
	Org_UpdateHuntGroupClientInfoDisplayTemplate_FullMethodName = "/api.v1alpha1.org.Org/UpdateHuntGroupClientInfoDisplayTemplate"
	Org_DeleteHuntGroupClientInfoDisplayTemplate_FullMethodName = "/api.v1alpha1.org.Org/DeleteHuntGroupClientInfoDisplayTemplate"
	Org_CopyHuntGroupClientInfoDisplayTemplate_FullMethodName   = "/api.v1alpha1.org.Org/CopyHuntGroupClientInfoDisplayTemplate"
	Org_CreateCampaignClientInfoDisplayTemplate_FullMethodName  = "/api.v1alpha1.org.Org/CreateCampaignClientInfoDisplayTemplate"
	Org_ListHuntGroupsWithClientInfoTemplateData_FullMethodName = "/api.v1alpha1.org.Org/ListHuntGroupsWithClientInfoTemplateData"
	Org_ListAgentTriggers_FullMethodName                        = "/api.v1alpha1.org.Org/ListAgentTriggers"
	Org_CopyAgentTrigger_FullMethodName                         = "/api.v1alpha1.org.Org/CopyAgentTrigger"
	Org_UpdateAgentTriggers_FullMethodName                      = "/api.v1alpha1.org.Org/UpdateAgentTriggers"
	Org_ListHuntGroupScripts_FullMethodName                     = "/api.v1alpha1.org.Org/ListHuntGroupScripts"
	Org_ListOrgHuntGroupScripts_FullMethodName                  = "/api.v1alpha1.org.Org/ListOrgHuntGroupScripts"
	Org_GetHuntGroupScript_FullMethodName                       = "/api.v1alpha1.org.Org/GetHuntGroupScript"
	Org_CreateHuntGroupScript_FullMethodName                    = "/api.v1alpha1.org.Org/CreateHuntGroupScript"
	Org_UpdateHuntGroupScript_FullMethodName                    = "/api.v1alpha1.org.Org/UpdateHuntGroupScript"
	Org_DeleteHuntGroupScript_FullMethodName                    = "/api.v1alpha1.org.Org/DeleteHuntGroupScript"
	Org_AssignScriptToHuntGroups_FullMethodName                 = "/api.v1alpha1.org.Org/AssignScriptToHuntGroups"
	Org_UnassignScriptFromHuntGroups_FullMethodName             = "/api.v1alpha1.org.Org/UnassignScriptFromHuntGroups"
	Org_CreateTrust_FullMethodName                              = "/api.v1alpha1.org.Org/CreateTrust"
	Org_AcceptTrust_FullMethodName                              = "/api.v1alpha1.org.Org/AcceptTrust"
	Org_RejectTrust_FullMethodName                              = "/api.v1alpha1.org.Org/RejectTrust"
	Org_GetTrust_FullMethodName                                 = "/api.v1alpha1.org.Org/GetTrust"
	Org_ListIncomingTrusts_FullMethodName                       = "/api.v1alpha1.org.Org/ListIncomingTrusts"
	Org_ListGivenTrusts_FullMethodName                          = "/api.v1alpha1.org.Org/ListGivenTrusts"
	Org_ListAssignableTrusts_FullMethodName                     = "/api.v1alpha1.org.Org/ListAssignableTrusts"
	Org_DeleteTrust_FullMethodName                              = "/api.v1alpha1.org.Org/DeleteTrust"
	Org_AssignTrust_FullMethodName                              = "/api.v1alpha1.org.Org/AssignTrust"
	Org_UnassignTrust_FullMethodName                            = "/api.v1alpha1.org.Org/UnassignTrust"
	Org_CreateLabel_FullMethodName                              = "/api.v1alpha1.org.Org/CreateLabel"
	Org_DeleteLabel_FullMethodName                              = "/api.v1alpha1.org.Org/DeleteLabel"
	Org_ListLabels_FullMethodName                               = "/api.v1alpha1.org.Org/ListLabels"
	Org_GetLabel_FullMethodName                                 = "/api.v1alpha1.org.Org/GetLabel"
	Org_UpdateLabel_FullMethodName                              = "/api.v1alpha1.org.Org/UpdateLabel"
	Org_AssignLabel_FullMethodName                              = "/api.v1alpha1.org.Org/AssignLabel"
	Org_UnassignLabel_FullMethodName                            = "/api.v1alpha1.org.Org/UnassignLabel"
	Org_GetAssignmentCounts_FullMethodName                      = "/api.v1alpha1.org.Org/GetAssignmentCounts"
	Org_GetAssignableLabels_FullMethodName                      = "/api.v1alpha1.org.Org/GetAssignableLabels"
	Org_GetPermissions_FullMethodName                           = "/api.v1alpha1.org.Org/GetPermissions"
	Org_GetUserPermissions_FullMethodName                       = "/api.v1alpha1.org.Org/GetUserPermissions"
	Org_CreatePermissionGroup_FullMethodName                    = "/api.v1alpha1.org.Org/CreatePermissionGroup"
	Org_UpdatePermissionGroup_FullMethodName                    = "/api.v1alpha1.org.Org/UpdatePermissionGroup"
	Org_DeletePermissionGroup_FullMethodName                    = "/api.v1alpha1.org.Org/DeletePermissionGroup"
	Org_ListPermissionGroups_FullMethodName                     = "/api.v1alpha1.org.Org/ListPermissionGroups"
	Org_ListPermissionGroupsByOrgId_FullMethodName              = "/api.v1alpha1.org.Org/ListPermissionGroupsByOrgId"
	Org_AssignUsersPermissionGroup_FullMethodName               = "/api.v1alpha1.org.Org/AssignUsersPermissionGroup"
	Org_RevokeUsersPermissionGroup_FullMethodName               = "/api.v1alpha1.org.Org/RevokeUsersPermissionGroup"
	Org_AssignLabels_FullMethodName                             = "/api.v1alpha1.org.Org/AssignLabels"
	Org_RevokeLabels_FullMethodName                             = "/api.v1alpha1.org.Org/RevokeLabels"
	Org_AssignAccountOwnerPermissionToUser_FullMethodName       = "/api.v1alpha1.org.Org/AssignAccountOwnerPermissionToUser"
	Org_RevokeAccountOwnerPermissionFromUser_FullMethodName     = "/api.v1alpha1.org.Org/RevokeAccountOwnerPermissionFromUser"
	Org_InitDefaultPermissionGroups_FullMethodName              = "/api.v1alpha1.org.Org/InitDefaultPermissionGroups"
	Org_GetAccountOwnerGroup_FullMethodName                     = "/api.v1alpha1.org.Org/GetAccountOwnerGroup"
	Org_GetLicenses_FullMethodName                              = "/api.v1alpha1.org.Org/GetLicenses"
	Org_GetOrgLicenses_FullMethodName                           = "/api.v1alpha1.org.Org/GetOrgLicenses"
	Org_UpdateLicenses_FullMethodName                           = "/api.v1alpha1.org.Org/UpdateLicenses"
	Org_RemovePermissionFromAllPermissionGroups_FullMethodName  = "/api.v1alpha1.org.Org/RemovePermissionFromAllPermissionGroups"
	Org_ListP3PermissionGroups_FullMethodName                   = "/api.v1alpha1.org.Org/ListP3PermissionGroups"
	Org_ListP3PermissionGroupsByOrgId_FullMethodName            = "/api.v1alpha1.org.Org/ListP3PermissionGroupsByOrgId"
	Org_CreateP3PermissionGroup_FullMethodName                  = "/api.v1alpha1.org.Org/CreateP3PermissionGroup"
	Org_UpdateP3PermissionGroup_FullMethodName                  = "/api.v1alpha1.org.Org/UpdateP3PermissionGroup"
	Org_UpdateP3PermissionGroupByOrgId_FullMethodName           = "/api.v1alpha1.org.Org/UpdateP3PermissionGroupByOrgId"
	Org_DeleteP3PermissionGroup_FullMethodName                  = "/api.v1alpha1.org.Org/DeleteP3PermissionGroup"
	Org_AssignUsersP3PermissionGroup_FullMethodName             = "/api.v1alpha1.org.Org/AssignUsersP3PermissionGroup"
	Org_RevokeUsersP3PermissionGroup_FullMethodName             = "/api.v1alpha1.org.Org/RevokeUsersP3PermissionGroup"
	Org_RefreshMfaLockout_FullMethodName                        = "/api.v1alpha1.org.Org/RefreshMfaLockout"
	Org_RefreshMfaLockoutByOrgId_FullMethodName                 = "/api.v1alpha1.org.Org/RefreshMfaLockoutByOrgId"
	Org_SetMfaType_FullMethodName                               = "/api.v1alpha1.org.Org/SetMfaType"
	Org_SetMyMfaType_FullMethodName                             = "/api.v1alpha1.org.Org/SetMyMfaType"
	Org_EnableUserMfa_FullMethodName                            = "/api.v1alpha1.org.Org/EnableUserMfa"
	Org_EnableMyUserMfa_FullMethodName                          = "/api.v1alpha1.org.Org/EnableMyUserMfa"
	Org_GetUserMfaInfo_FullMethodName                           = "/api.v1alpha1.org.Org/GetUserMfaInfo"
	Org_GetMyUserMfaInfo_FullMethodName                         = "/api.v1alpha1.org.Org/GetMyUserMfaInfo"
	Org_GetMyAllowedMfaMethods_FullMethodName                   = "/api.v1alpha1.org.Org/GetMyAllowedMfaMethods"
	Org_CreateBusinessHours_FullMethodName                      = "/api.v1alpha1.org.Org/CreateBusinessHours"
	Org_UpdateBusinessHours_FullMethodName                      = "/api.v1alpha1.org.Org/UpdateBusinessHours"
	Org_AddGroupedUserIPRestrictions_FullMethodName             = "/api.v1alpha1.org.Org/AddGroupedUserIPRestrictions"
	Org_RemoveGroupedUserIPRestrictions_FullMethodName          = "/api.v1alpha1.org.Org/RemoveGroupedUserIPRestrictions"
	Org_ListUsersAllowedIps_FullMethodName                      = "/api.v1alpha1.org.Org/ListUsersAllowedIps"
	Org_ListResponseEvaluators_FullMethodName                   = "/api.v1alpha1.org.Org/ListResponseEvaluators"
	Org_GetResponseEvaluator_FullMethodName                     = "/api.v1alpha1.org.Org/GetResponseEvaluator"
	Org_CreateResponseEvaluator_FullMethodName                  = "/api.v1alpha1.org.Org/CreateResponseEvaluator"
	Org_UpdateResponseEvaluator_FullMethodName                  = "/api.v1alpha1.org.Org/UpdateResponseEvaluator"
	Org_DeleteResponseEvaluator_FullMethodName                  = "/api.v1alpha1.org.Org/DeleteResponseEvaluator"
)

// OrgClient is the client API for Org service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgClient interface {
	// CreateOrganization creates a new organization entity and enables it for the
	// region it is getting created in.
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// GetOrganization returns a single organization.
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	// GetOrganizationById returns a single organization by a given orgId.
	GetOrganizationById(ctx context.Context, in *GetOrganizationByIdRequest, opts ...grpc.CallOption) (*GetOrganizationByIdResponse, error)
	// UpdateOrganization updates the mutable fields on the Organization entity
	// using the provided field mask.
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// Archives an organization. An archived organization effectively disappears, but isn't deleted.
	ArchiveOrganization(ctx context.Context, in *ArchiveOrganizationRequest, opts ...grpc.CallOption) (*ArchiveOrganizationResponse, error)
	// Unarchives an organization. An archived organization effectively disappears, but isn't deleted.
	UnArchiveOrganization(ctx context.Context, in *UnArchiveOrganizationRequest, opts ...grpc.CallOption) (*UnArchiveOrganizationResponse, error)
	// ListAllOrganizationsGlobally lists all organizations globally (archived and unarchived).
	ListAllOrganizationsGlobally(ctx context.Context, in *ListAllOrganizationsGloballyRequest, opts ...grpc.CallOption) (Org_ListAllOrganizationsGloballyClient, error)
	// ListOrganizationsByRegion lists organizations in the given region (unarchived).
	ListOrganizationsByRegion(ctx context.Context, in *ListOrganizationsByRegionRequest, opts ...grpc.CallOption) (Org_ListOrganizationsByRegionClient, error)
	// ListArchivedOrganizations lists all archived organizations in the current region.
	ListArchivedOrganizations(ctx context.Context, in *ListArchivedOrganizationsRequest, opts ...grpc.CallOption) (Org_ListArchivedOrganizationsClient, error)
	// ConvertOrgToManual converts an organization to manual only by org id.
	ConvertOrgToManual(ctx context.Context, in *ConvertOrgToManualRequest, opts ...grpc.CallOption) (*ConvertOrgToManualResponse, error)
	// Lists all orgs under the p3 hierarchy
	ListOwnedOrgs(ctx context.Context, in *ListOwnedOrgsRequest, opts ...grpc.CallOption) (Org_ListOwnedOrgsClient, error)
	// GetOrganizationPreferences returns general preferences controlling basic
	// organization related properties.
	GetOrganizationPreferences(ctx context.Context, in *GetOrganizationPreferencesRequest, opts ...grpc.CallOption) (*GetOrganizationPreferencesResponse, error)
	// UpdateOrganizationPreferences updates general preferences controlling basic
	// organization related properties.
	UpdateOrganizationPreferences(ctx context.Context, in *UpdateOrganizationPreferencesRequest, opts ...grpc.CallOption) (*UpdateOrganizationPreferencesResponse, error)
	// GetAgentPreferences returns preferences controlling direct agent properties.
	GetAgentPreferences(ctx context.Context, in *GetAgentPreferencesRequest, opts ...grpc.CallOption) (*GetAgentPreferencesResponse, error)
	// UpdateAgentPreferences updates preferences controlling direct agent
	// properties.
	UpdateAgentPreferences(ctx context.Context, in *UpdateAgentPreferencesRequest, opts ...grpc.CallOption) (*UpdateAgentPreferencesResponse, error)
	// GetContactPreferences returns preferences for contact lists.
	GetContactPreferences(ctx context.Context, in *GetContactPreferencesRequest, opts ...grpc.CallOption) (*GetContactPreferencesResponse, error)
	// UpdateContactPreferences updates preferences for contact lists.
	UpdateContactPreferences(ctx context.Context, in *UpdateContactPreferencesRequest, opts ...grpc.CallOption) (*UpdateContactPreferencesResponse, error)
	// GetAuthenticationPreferences returns preferences for controlling the
	GetAuthenticationPreferences(ctx context.Context, in *GetAuthenticationPreferencesRequest, opts ...grpc.CallOption) (*GetAuthenticationPreferencesResponse, error)
	// UpdateAuthenticationPreferences updates preferences for controlling the
	UpdateAuthenticationPreferences(ctx context.Context, in *UpdateAuthenticationPreferencesRequest, opts ...grpc.CallOption) (*UpdateAuthenticationPreferencesResponse, error)
	// GetWebhookPreferences returns preferences for web-hook push URLs.
	GetWebhookPreferences(ctx context.Context, in *GetWebhookPreferencesRequest, opts ...grpc.CallOption) (*GetWebhookPreferencesResponse, error)
	// UpdateWebhookPreferences updates preferences for web-hook push URLs.
	UpdateWebhookPreferences(ctx context.Context, in *UpdateWebhookPreferencesRequest, opts ...grpc.CallOption) (*UpdateWebhookPreferencesResponse, error)
	// GetDashboardGeneralPreferences returns preferences for agent dashboard
	// controls.
	GetDashboardGeneralPreferences(ctx context.Context, in *GetDashboardGeneralPreferencesRequest, opts ...grpc.CallOption) (*GetDashboardGeneralPreferencesResponse, error)
	// UpdateDashboardGeneralPreferences updates preferences for agent dashboard
	// controls.
	UpdateDashboardGeneralPreferences(ctx context.Context, in *UpdateDashboardGeneralPreferencesRequest, opts ...grpc.CallOption) (*UpdateDashboardGeneralPreferencesResponse, error)
	// GetDashboardQueuePreferences returns preferences for controlling agent queue
	// and hold table settings.
	GetDashboardQueuePreferences(ctx context.Context, in *GetDashboardQueuePreferencesRequest, opts ...grpc.CallOption) (*GetDashboardQueuePreferencesResponse, error)
	// UpdateDashboardQueuePreferences updates preferences for controlling agent
	// queue and hold table settings.
	UpdateDashboardQueuePreferences(ctx context.Context, in *UpdateDashboardQueuePreferencesRequest, opts ...grpc.CallOption) (*UpdateDashboardQueuePreferencesResponse, error)
	// GetPhonePreferences returns preferences for phone dial options, call ID,
	// and other call properties.
	GetPhonePreferences(ctx context.Context, in *GetPhonePreferencesRequest, opts ...grpc.CallOption) (*GetPhonePreferencesResponse, error)
	// UpdatePhonePreferences updates preferences for phone dial options, call ID,
	// and other call properties.
	UpdatePhonePreferences(ctx context.Context, in *UpdatePhonePreferencesRequest, opts ...grpc.CallOption) (*UpdatePhonePreferencesResponse, error)
	// GetCompliancePreferences returns preferences for natural language compliance
	// campaign settings.
	GetCompliancePreferences(ctx context.Context, in *GetCompliancePreferencesRequest, opts ...grpc.CallOption) (*GetCompliancePreferencesResponse, error)
	// UpdateCompliancePreferences updates preferences for natural language
	// compliance campaign settings.
	UpdateCompliancePreferences(ctx context.Context, in *UpdateCompliancePreferencesRequest, opts ...grpc.CallOption) (*UpdateCompliancePreferencesResponse, error)
	// GetBroadcastPreferences returns preferences for editing templates and
	// broadcast scheduling properties.
	GetBroadcastPreferences(ctx context.Context, in *GetBroadcastPreferencesRequest, opts ...grpc.CallOption) (*GetBroadcastPreferencesResponse, error)
	// UpdateBroadcastPreferences updates preferences for editing templates and
	// broadcast scheduling properties.
	UpdateBroadcastPreferences(ctx context.Context, in *UpdateBroadcastPreferencesRequest, opts ...grpc.CallOption) (*UpdateBroadcastPreferencesResponse, error)
	// GetSchedulePreferences returns preferences for editing campaign scheduling
	// properties.
	GetSchedulePreferences(ctx context.Context, in *GetSchedulePreferencesRequest, opts ...grpc.CallOption) (*GetSchedulePreferencesResponse, error)
	// UpdateSchedulePreferences updates preferences for editing campaign
	// scheduling properties.
	UpdateSchedulePreferences(ctx context.Context, in *UpdateSchedulePreferencesRequest, opts ...grpc.CallOption) (*UpdateSchedulePreferencesResponse, error)
	// GetEmailSmsPreferences returns preferences for email and SMS management.
	GetEmailSmsPreferences(ctx context.Context, in *GetEmailSmsPreferencesRequest, opts ...grpc.CallOption) (*GetEmailSmsPreferencesResponse, error)
	// UpdateEmailSmsPreferences updates preferences for email and SMS management.
	UpdateEmailSmsPreferences(ctx context.Context, in *UpdateEmailSmsPreferencesRequest, opts ...grpc.CallOption) (*UpdateEmailSmsPreferencesResponse, error)
	// GetBusinessPreferences returns preferences for business intelligence.
	GetBusinessPreferences(ctx context.Context, in *GetBusinessPreferencesRequest, opts ...grpc.CallOption) (*GetBusinessPreferencesResponse, error)
	// UpdateBusinessPreferences updates preferences for business intelligence.
	UpdateBusinessPreferences(ctx context.Context, in *UpdateBusinessPreferencesRequest, opts ...grpc.CallOption) (*UpdateBusinessPreferencesResponse, error)
	// UpdateAdminBusinessPreferences updates preferences for business intelligence.
	UpdateAdminBusinessPreferences(ctx context.Context, in *UpdateAdminBusinessPreferencesRequest, opts ...grpc.CallOption) (*UpdateAdminBusinessPreferencesResponse, error)
	// GetScorecardsPreferences returns preferences for scorecards.
	GetScorecardsPreferences(ctx context.Context, in *GetScorecardsPreferencesRequest, opts ...grpc.CallOption) (*GetScorecardsPreferencesResponse, error)
	// UpdateScorecardsPreferences updates preferences for scorecards.
	UpdateScorecardsPreferences(ctx context.Context, in *UpdateScorecardsPreferencesRequest, opts ...grpc.CallOption) (*UpdateScorecardsPreferencesResponse, error)
	// GetVoiceAnalyticsPreferences returns preferences for voice analytics.
	GetVoiceAnalyticsPreferences(ctx context.Context, in *GetVoiceAnalyticsPreferencesRequest, opts ...grpc.CallOption) (*GetVoiceAnalyticsPreferencesResponse, error)
	// ListVoiceAnalyticsPreferences lists preferences for voice analytics.
	ListVoiceAnalyticsPreferences(ctx context.Context, in *ListVoiceAnalyticsPreferencesRequest, opts ...grpc.CallOption) (*ListVoiceAnalyticsPreferencesResponse, error)
	// UpdateVoiceAnalyticsPreferences updates preferences for voice analytics.
	UpdateVoiceAnalyticsPreferences(ctx context.Context, in *UpdateVoiceAnalyticsPreferencesRequest, opts ...grpc.CallOption) (*UpdateVoiceAnalyticsPreferencesResponse, error)
	// GetEndOfDayPreferences returns preferences for automated report jobs
	GetEndOfDayPreferences(ctx context.Context, in *GetEndOfDayPreferencesRequest, opts ...grpc.CallOption) (*GetEndOfDayPreferencesResponse, error)
	// UpdateEndOfDayPreferences updates preferences for automated report jobs
	UpdateEndOfDayPreferences(ctx context.Context, in *UpdateEndOfDayPreferencesRequest, opts ...grpc.CallOption) (*UpdateEndOfDayPreferencesResponse, error)
	// GetReportFilterPreferences returns preferences for filters in reports and
	GetReportFilterPreferences(ctx context.Context, in *GetFilterPreferencesRequest, opts ...grpc.CallOption) (*GetFilterPreferencesResponse, error)
	// UpdateReportFilterPreferences updates preferences for filters in reports and
	UpdateReportFilterPreferences(ctx context.Context, in *UpdateFilterPreferencesRequest, opts ...grpc.CallOption) (*UpdateFilterPreferencesResponse, error)
	// GetRecordingPreferences returns preferences for audio recording properties.
	GetRecordingPreferences(ctx context.Context, in *GetRecordingPreferencesRequest, opts ...grpc.CallOption) (*GetRecordingPreferencesResponse, error)
	// UpdateRecordingPreferences updates preferences for audio recording
	// properties.
	UpdateRecordingPreferences(ctx context.Context, in *UpdateRecordingPreferencesRequest, opts ...grpc.CallOption) (*UpdateRecordingPreferencesResponse, error)
	// GetAdminClientPreferences returns preferences for essential organization
	// properties only to be used by account managers and customer support.
	GetAdminClientPreferences(ctx context.Context, in *GetAdminClientPreferencesRequest, opts ...grpc.CallOption) (*GetAdminClientPreferencesResponse, error)
	// UpdateAdminClientPreferences updates preferences for essential organization
	UpdateAdminClientPreferences(ctx context.Context, in *UpdateAdminClientPreferencesRequest, opts ...grpc.CallOption) (*UpdateAdminClientPreferencesResponse, error)
	// AcceptLinkbackRecordingTerms insert a digital signature acceptance activity
	// log upon client acknowledgement of terms and conditions usage for linkback
	// recorded calls.
	AcceptLinkbackRecordingTerms(ctx context.Context, in *AcceptLinkbackRecordingTermsRequest, opts ...grpc.CallOption) (*AcceptLinkbackRecordingTermsResponse, error)
	// LinkbackUpdateBroadcastTemplates updates broadcast template options action
	// parameters to reflect the linkback recording usage value.
	LinkbackUpdateBroadcastTemplates(ctx context.Context, in *LinkbackUpdateBroadcastTemplatesRequest, opts ...grpc.CallOption) (*LinkbackUpdateBroadcastTemplatesResponse, error)
	// RecordEmailUnsubscribeAcknowledgement insert an activity log upon client
	// acknowledgement of responsibility for their own email unsubscribe links.
	RecordEmailUnsubscribeAcknowledgement(ctx context.Context, in *RecordEmailUnsubscribeAcknowledgementRequest, opts ...grpc.CallOption) (*RecordEmailUnsubscribeAcknowledgementResponse, error)
	// ClearEmailUnsubscribeAcknowledgement insert an activity log upon the client
	// revoking their responsibility for email unsubscribe links.
	ClearEmailUnsubscribeAcknowledgement(ctx context.Context, in *ClearEmailUnsubscribeAcknowledgementRequest, opts ...grpc.CallOption) (*ClearEmailUnsubscribeAcknowledgementResponse, error)
	// Deprecated: Do not use.
	// ListBusinessHours returns all business hours for an Org.
	ListBusinessHours(ctx context.Context, in *ListBusinessHoursRequest, opts ...grpc.CallOption) (*ListBusinessHoursResponse, error)
	// Deprecated: Do not use.
	// GetBusinessHours returns the business hours for the ID.
	GetBusinessHours(ctx context.Context, in *GetBusinessHoursRequest, opts ...grpc.CallOption) (*GetBusinessHoursResponse, error)
	// Deprecated: Do not use.
	// SetBusinessHours initializes a business hours object
	SetBusinessHours(ctx context.Context, in *SetBusinessHoursRequest, opts ...grpc.CallOption) (*SetBusinessHoursResponse, error)
	// Deprecated: Do not use.
	// AddIntervalToBusinessHours adds a day interval to a business hours object
	AddIntervalToBusinessHours(ctx context.Context, in *AddIntervalToBusinessHoursRequest, opts ...grpc.CallOption) (*AddIntervalToBusinessHoursResponse, error)
	// Deprecated: Do not use.
	// RemoveIntervalFromBusinessHours removes a day interval from a business hours object
	RemoveIntervalFromBusinessHours(ctx context.Context, in *RemoveIntervalFromBusinessHoursRequest, opts ...grpc.CallOption) (*RemoveIntervalFromBusinessHoursResponse, error)
	// Deprecated: Do not use.
	// UpdateBusinessHoursInfo updates the general info of a business hours object
	UpdateBusinessHoursInfo(ctx context.Context, in *UpdateBusinessHoursInfoRequest, opts ...grpc.CallOption) (*UpdateBusinessHoursInfoResponse, error)
	// Deprecated: Do not use.
	// DeleteBusinessHours removes business hours.
	DeleteBusinessHours(ctx context.Context, in *DeleteBusinessHoursRequest, opts ...grpc.CallOption) (*DeleteBusinessHoursResponse, error)
	// Deprecated: Do not use.
	// EvaluateBusinessHours determines whether or not the current time is within a business hours day interval
	EvaluateBusinessHours(ctx context.Context, in *EvaluateBusinessHoursRequest, opts ...grpc.CallOption) (*EvaluateBusinessHoursResponse, error)
	// CreateUser creates a new user and enables it for the region it is getting created in.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// CreateDelegatedUser creates a new delegated user and enables it for the region it is getting created in.
	CreateDelegatedUser(ctx context.Context, in *CreateDelegatedUserRequest, opts ...grpc.CallOption) (*CreateDelegatedUserResponse, error)
	// GetMyUser returns a single user by UserId or by AgentSid.
	GetMyUser(ctx context.Context, in *GetMyUserRequest, opts ...grpc.CallOption) (*GetMyUserResponse, error)
	// GetUser returns a single user by UserId or by AgentSid.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// GetUserByOrgId returns a single user by UserId and OrgId
	// Requires Customer Support permission and allows cross Org requests.
	GetUserByOrgId(ctx context.Context, in *GetUserByOrgIdRequest, opts ...grpc.CallOption) (*GetUserByOrgIdResponse, error)
	// ListAgents returns a list of Agents.
	ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (Org_ListAgentsClient, error)
	// ListPublicUsers returns a list of users with limited data for most applications.
	ListPublicUsers(ctx context.Context, in *ListPublicUsersRequest, opts ...grpc.CallOption) (Org_ListPublicUsersClient, error)
	// ListUsers returns a list of users.
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (Org_ListUsersClient, error)
	// ListUsersByOrgId returns a list of users.
	ListUsersByOrgId(ctx context.Context, in *ListUsersByOrgIdRequest, opts ...grpc.CallOption) (Org_ListUsersByOrgIdClient, error)
	// ListUsersByRegion returns a list of usersByRegion.
	ListUsersByRegion(ctx context.Context, in *ListUsersByRegionRequest, opts ...grpc.CallOption) (Org_ListUsersByRegionClient, error)
	// UpdateMyUser updates a user.
	UpdateMyUser(ctx context.Context, in *UpdateMyUserRequest, opts ...grpc.CallOption) (*UpdateMyUserResponse, error)
	// UpdateUser updates a user.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// UpdateUserLabels updates a user's labels to be the passed in set of labels.
	UpdateUserLabels(ctx context.Context, in *UpdateUserLabelsRequest, opts ...grpc.CallOption) (*UpdateUserLabelsResponse, error)
	// UpdateUserCallerId updates a user.
	UpdateUserCallerId(ctx context.Context, in *UpdateUserCallerIdRequest, opts ...grpc.CallOption) (*UpdateUserCallerIdResponse, error)
	// UpdateUserDisabled updates whether a user is disabled.
	UpdateUserDisabled(ctx context.Context, in *UpdateUserDisabledRequest, opts ...grpc.CallOption) (*UpdateUserDisabledResponse, error)
	// UpdateUserDisabledByOrgId updates a user is disabled.
	UpdateUserDisabledByOrgId(ctx context.Context, in *UpdateUserDisabledByOrgIdRequest, opts ...grpc.CallOption) (*UpdateUserDisabledByOrgIdResponse, error)
	// GetMyUserPasswordResetLink updates a user's password.
	GetMyUserPasswordResetLink(ctx context.Context, in *GetMyUserPasswordResetLinkRequest, opts ...grpc.CallOption) (*GetMyUserPasswordResetLinkResponse, error)
	// GetUserPasswordResetLink gets a link to update a user's password.
	GetUserPasswordResetLink(ctx context.Context, in *GetUserPasswordResetLinkRequest, opts ...grpc.CallOption) (*GetUserPasswordResetLinkResponse, error)
	// GetUserPasswordResetLinkByOrgId gets a link to update a user's password.
	GetUserPasswordResetLinkByOrgId(ctx context.Context, in *GetUserPasswordResetLinkByOrgIdRequest, opts ...grpc.CallOption) (*GetUserPasswordResetLinkByOrgIdResponse, error)
	// CreatePasswordResetLink creates a password reset link for the given user id.
	CreatePasswordResetLink(ctx context.Context, in *CreatePasswordResetLinkRequest, opts ...grpc.CallOption) (*CreatePasswordResetLinkResponse, error)
	// CreatePasswordResetLinkByOrgId creates a password reset link for the given user id.
	CreatePasswordResetLinkByOrgId(ctx context.Context, in *CreatePasswordResetLinkByOrgIdRequest, opts ...grpc.CallOption) (*CreatePasswordResetLinkByOrgIdResponse, error)
	// Used to be called GetUserBlocked
	// GetUserLoginInfo gets information about a user's login.
	GetUserLoginInfo(ctx context.Context, in *GetUserLoginInfoRequest, opts ...grpc.CallOption) (*GetUserLoginInfoResponse, error)
	// GetUserEmailVerified gets whether the user's email is verified.
	GetUserEmailVerified(ctx context.Context, in *GetUserEmailVerifiedRequest, opts ...grpc.CallOption) (*GetUserEmailVerifiedResponse, error)
	// GetUserEmailVerifiedByOrgId gets whether the user's email is verified.
	GetUserEmailVerifiedByOrgId(ctx context.Context, in *GetUserEmailVerifiedByOrgIdRequest, opts ...grpc.CallOption) (*GetUserEmailVerifiedByOrgIdResponse, error)
	// ResetMyPassword resets the user's password.
	ResetMyPassword(ctx context.Context, in *ResetMyPasswordRequest, opts ...grpc.CallOption) (*ResetMyPasswordResponse, error)
	// ResetUserPassword resets the user's password.
	ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...grpc.CallOption) (*ResetUserPasswordResponse, error)
	// ResetUserPasswordByOrgId resets the user's password.
	ResetUserPasswordByOrgId(ctx context.Context, in *ResetUserPasswordByOrgIdRequest, opts ...grpc.CallOption) (*ResetUserPasswordByOrgIdResponse, error)
	// SendUserEmailVerification sends a verification email to the user.
	SendUserEmailVerification(ctx context.Context, in *SendUserEmailVerificationRequest, opts ...grpc.CallOption) (*SendUserEmailVerificationResponse, error)
	// SendUserEmailVerificationByOrgId sends a verification email to the user.
	SendUserEmailVerificationByOrgId(ctx context.Context, in *SendUserEmailVerificationByOrgIdRequest, opts ...grpc.CallOption) (*SendUserEmailVerificationByOrgIdResponse, error)
	// SendPasswordReset sends a password reset email to the user.
	SendPasswordReset(ctx context.Context, in *SendPasswordResetRequest, opts ...grpc.CallOption) (*SendPasswordResetResponse, error)
	// SendPasswordResetByOrgId sends a password reset email to the user.
	SendPasswordResetByOrgId(ctx context.Context, in *SendPasswordResetByOrgIdRequest, opts ...grpc.CallOption) (*SendPasswordResetByOrgIdResponse, error)
	// GetUserSessionData returns data for the front end's session state
	GetUserSessionData(ctx context.Context, in *GetUserSessionDataRequest, opts ...grpc.CallOption) (*GetUserSessionDataResponse, error)
	// GetAgentProfileGroup returns an agent profile group by id
	GetAgentProfileGroup(ctx context.Context, in *GetAgentProfileGroupRequest, opts ...grpc.CallOption) (*GetAgentProfileGroupResponse, error)
	// ListAgentProfileGroups returns the agent profile groups associated with the current organization
	ListAgentProfileGroups(ctx context.Context, in *ListAgentProfileGroupsRequest, opts ...grpc.CallOption) (*ListAgentProfileGroupsResponse, error)
	// UpdateAgentProfileGroup updates an AgentProfileGroup. Can only update if user is in same org as AgentProfileGroup
	UpdateAgentProfileGroup(ctx context.Context, in *UpdateAgentProfileGroupRequest, opts ...grpc.CallOption) (*UpdateAgentProfileGroupResponse, error)
	// CreateAgentProfileGroup creates an AgentProfileGroup. Can only create if user is in same org as AgentProfileGroup
	CreateAgentProfileGroup(ctx context.Context, in *CreateAgentProfileGroupRequest, opts ...grpc.CallOption) (*CreateAgentProfileGroupResponse, error)
	// DeleteAgentProfileGroup deletes an AgentProfileGroup. Can only delete if user is in same org as AgentProfileGroup
	DeleteAgentProfileGroup(ctx context.Context, in *DeleteAgentProfileGroupRequest, opts ...grpc.CallOption) (*DeleteAgentProfileGroupResponse, error)
	// AssignAgentProfileGroups assigns a list of users to an AgentProfileGroup. Can only use if everything is in the same organization.
	AssignAgentProfileGroups(ctx context.Context, in *AssignAgentProfileGroupsRequest, opts ...grpc.CallOption) (*AssignAgentProfileGroupsResponse, error)
	// Creates a new user subscription.
	AddUserSubscription(ctx context.Context, in *AddUserSubscriptionRequest, opts ...grpc.CallOption) (*AddUserSubscriptionResponse, error)
	// Creates a new user subscription for a specified user with in requested users org.
	AddUserSubscriptionByUserId(ctx context.Context, in *AddUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*AddUserSubscriptionByUserIdResponse, error)
	// Gets a user subscription.
	GetUserSubscription(ctx context.Context, in *GetUserSubscriptionRequest, opts ...grpc.CallOption) (*GetUserSubscriptionResponse, error)
	// Gets a user subscription for a specified user with in requested users org.
	GetUserSubscriptionByUserId(ctx context.Context, in *GetUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*GetUserSubscriptionByUserIdResponse, error)
	// Updates a user subscription for the current user
	UpdateUserSubscription(ctx context.Context, in *UpdateUserSubscriptionRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionResponse, error)
	// Updates a user subscription for a given user id
	UpdateUserSubscriptionByUserId(ctx context.Context, in *UpdateUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionByUserIdResponse, error)
	// Remove a user subscription.
	RemoveUserSubscription(ctx context.Context, in *RemoveUserSubscriptionRequest, opts ...grpc.CallOption) (*RemoveUserSubscriptionResponse, error)
	// Remove a user subscription by a given user id
	RemoveUserSubscriptionByUserId(ctx context.Context, in *RemoveUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*RemoveUserSubscriptionByUserIdResponse, error)
	// Lists user subscriptions.
	ListUserSubscriptions(ctx context.Context, in *ListUserSubscriptionsRequest, opts ...grpc.CallOption) (*ListUserSubscriptionsResponse, error)
	// Lists user subscriptions.
	ListUserSubscriptionsByUserId(ctx context.Context, in *ListUserSubscriptionsByUserIdRequest, opts ...grpc.CallOption) (*ListUserSubscriptionsByUserIdResponse, error)
	// Lists subscriptions for multiple users in an org.
	ListOrgSubscriptions(ctx context.Context, in *ListOrgSubscriptionsRequest, opts ...grpc.CallOption) (*ListOrgSubscriptionsResponse, error)
	// AUTH TOKEN
	// CreateAuthToken creates an auth token for the current user.
	CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, opts ...grpc.CallOption) (*CreateAuthTokenResponse, error)
	// CreateAuthTokenByUserId creates an auth token for the given user.
	CreateAuthTokenByUserId(ctx context.Context, in *CreateAuthTokenByUserIdRequest, opts ...grpc.CallOption) (*CreateAuthTokenByUserIdResponse, error)
	// ListAuthTokens list tokens of current user.
	ListAuthTokens(ctx context.Context, in *ListAuthTokensRequest, opts ...grpc.CallOption) (*ListAuthTokensResponse, error)
	// ListAuthTokensByUserId list tokens of given user.
	ListAuthTokensByUserId(ctx context.Context, in *ListAuthTokensByUserIdRequest, opts ...grpc.CallOption) (*ListAuthTokensByUserIdResponse, error)
	// SetAuthTokenExpiration sets expiration back one year for current user.
	SetAuthTokenExpiration(ctx context.Context, in *SetAuthTokenExpirationRequest, opts ...grpc.CallOption) (*SetAuthTokenExpirationResponse, error)
	// SetAuthTokenExpirationByUserId sets expiration back one year for given user.
	SetAuthTokenExpirationByUserId(ctx context.Context, in *SetAuthTokenExpirationByUserIdRequest, opts ...grpc.CallOption) (*SetAuthTokenExpirationByUserIdResponse, error)
	// DeleteAuthToken deletes a given auth token for the current user.
	DeleteAuthToken(ctx context.Context, in *DeleteAuthTokenRequest, opts ...grpc.CallOption) (*DeleteAuthTokenResponse, error)
	// DeleteAuthTokenByUserId deletes a given auth token for the given user.
	DeleteAuthTokenByUserId(ctx context.Context, in *DeleteAuthTokenByUserIdRequest, opts ...grpc.CallOption) (*DeleteAuthTokenByUserIdResponse, error)
	// GetHuntGroupSettings returns the field masked hunt group settings for the
	// provided hunt group.
	GetHuntGroupSettings(ctx context.Context, in *GetHuntGroupSettingsRequest, opts ...grpc.CallOption) (*GetHuntGroupSettingsResponse, error)
	// UpdateHuntGroupSettings updates the selected/masked hunt group settings
	// for the given hunt group.
	UpdateHuntGroupSettings(ctx context.Context, in *UpdateHuntGroupSettingsRequest, opts ...grpc.CallOption) (*UpdateHuntGroupSettingsResponse, error)
	// CreateHuntGroup is the RPC method for creating a hunt group.
	// It will create a hunt group with the given general details.
	CreateHuntGroup(ctx context.Context, in *CreateHuntGroupRequest, opts ...grpc.CallOption) (*CreateHuntGroupResponse, error)
	// UpdateHuntGroupGeneralDetails is the RPC method for updating the general details of a hunt group.
	UpdateHuntGroupGeneralDetails(ctx context.Context, in *UpdateHuntGroupGeneralDetailsRequest, opts ...grpc.CallOption) (*UpdateHuntGroupGeneralDetailsResponse, error)
	// DeleteHuntGroup is the RPC method for deleting a hunt group.
	DeleteHuntGroup(ctx context.Context, in *DeleteHuntGroupRequest, opts ...grpc.CallOption) (*DeleteHuntGroupResponse, error)
	// GetHuntGroupDetails returns the hunt group details for the given hunt group.
	GetHuntGroupDetails(ctx context.Context, in *GetHuntGroupDetailsRequest, opts ...grpc.CallOption) (*GetHuntGroupDetailsResponse, error)
	// Lists caller id numbers with their associated region codes for the given
	// bucket.
	ListCallerIdBuckets(ctx context.Context, in *ListCallerIdBucketsRequest, opts ...grpc.CallOption) (*ListCallerIdBucketsResponse, error)
	// Gets a single data dip template.
	GetDataDipTemplate(ctx context.Context, in *GetDataDipTemplateRequest, opts ...grpc.CallOption) (*GetDataDipTemplateResponse, error)
	// Lists data dip templates, optionally filtered by config type.
	ListDataDipTemplates(ctx context.Context, in *ListDataDipTemplatesRequest, opts ...grpc.CallOption) (*ListDataDipTemplatesResponse, error)
	// Saves a new data dip template.
	CreateDataDipTemplate(ctx context.Context, in *CreateDataDipTemplateRequest, opts ...grpc.CallOption) (*CreateDataDipTemplateResponse, error)
	// Updates a data dip template.
	UpdateDataDipTemplate(ctx context.Context, in *UpdateDataDipTemplateRequest, opts ...grpc.CallOption) (*UpdateDataDipTemplateResponse, error)
	// Deletes a data dip template.
	DeleteDataDipTemplate(ctx context.Context, in *DeleteDataDipTemplateRequest, opts ...grpc.CallOption) (*DeleteDataDipTemplateResponse, error)
	// Copies a data dip template.
	CopyDataDipTemplate(ctx context.Context, in *CopyDataDipTemplateRequest, opts ...grpc.CallOption) (*CopyDataDipTemplateResponse, error)
	// Copies a data dip template to a different organization.
	CopyDataDipTemplateToOrganization(ctx context.Context, in *CopyDataDipTemplateToOrganizationRequest, opts ...grpc.CallOption) (*CopyDataDipTemplateToOrganizationResponse, error)
	// ListBroadcastTemplateGeneralDetails returns a list of broadcast templates for an organization
	ListBroadcastTemplateGeneralDetails(ctx context.Context, in *ListBroadcastTemplateGeneralDetailsRequest, opts ...grpc.CallOption) (*ListBroadcastTemplateGeneralDetailsResponse, error)
	// Lists Agent Call Response Automatically added compliance rules for an Org.
	ListAgentResponseAutoRules(ctx context.Context, in *ListAgentResponseAutoRulesRequest, opts ...grpc.CallOption) (*ListAgentResponseAutoRulesResponse, error)
	// Creates a new Agent Call Response Automatically added compliance rule set.
	CreateAgentResponseAutoRules(ctx context.Context, in *CreateAgentResponseAutoRulesRequest, opts ...grpc.CallOption) (*CreateAgentResponseAutoRulesResponse, error)
	// Updates an existing Agent Call Response Automatically added compliance rule set.
	UpdateAgentResponseAutoRules(ctx context.Context, in *UpdateAgentResponseAutoRulesRequest, opts ...grpc.CallOption) (*UpdateAgentResponseAutoRulesResponse, error)
	// Deletes an existing Agent Call Response Automatically added compliance rule set.
	DeleteAgentResponseAutoRules(ctx context.Context, in *DeleteAgentResponseAutoRulesRequest, opts ...grpc.CallOption) (*DeleteAgentResponseAutoRulesResponse, error)
	// Lists all web links for a given hunt group
	ListHuntGroupWebLinks(ctx context.Context, in *ListHuntGroupWebLinksRequest, opts ...grpc.CallOption) (*ListHuntGroupWebLinksResponse, error)
	// Copies a web link from one hunt group to another
	CopyHuntGroupWebLink(ctx context.Context, in *CopyHuntGroupWebLinkRequest, opts ...grpc.CallOption) (*CopyHuntGroupWebLinkResponse, error)
	// Updates the list of web links in a hunt group to be the given list
	UpdateHuntGroupWebLinks(ctx context.Context, in *UpdateHuntGroupWebLinksRequest, opts ...grpc.CallOption) (*UpdateHuntGroupWebLinksResponse, error)
	// ListHuntGroupIntegrationLinks returns all integration links for a hunt group.
	ListHuntGroupIntegrationLinks(ctx context.Context, in *ListHuntGroupIntegrationLinksRequest, opts ...grpc.CallOption) (*ListHuntGroupIntegrationLinksResponse, error)
	// CopyHuntGroupIntegrationLink copies the integration link from one hunt group to another.
	// It will create a new integration link in the destination hunt group with the same settings
	// as the source integration link.
	CopyHuntGroupIntegrationLink(ctx context.Context, in *CopyHuntGroupIntegrationLinkRequest, opts ...grpc.CallOption) (*CopyHuntGroupIntegrationLinkResponse, error)
	// UpdateHuntGroupIntegrationLinks updates the integration links for a hunt group.
	// It will create any new integration links that do not already exist in the hunt group,
	// update any existing integration links with the new settings, and delete any integration links
	// that are not in the request.
	UpdateHuntGroupIntegrationLinks(ctx context.Context, in *UpdateHuntGroupIntegrationLinksRequest, opts ...grpc.CallOption) (*UpdateHuntGroupIntegrationLinksResponse, error)
	// GetHuntGroupClientInfoDisplayTemplate returns the client info display template for a given hunt group.
	GetHuntGroupClientInfoDisplayTemplate(ctx context.Context, in *GetHuntGroupClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*GetHuntGroupClientInfoDisplayTemplateResponse, error)
	// CreateHuntGroupClientInfoDisplayTemplate creates a new client info display template for a givne hunt group.
	CreateHuntGroupClientInfoDisplayTemplate(ctx context.Context, in *CreateHuntGroupClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*CreateHuntGroupClientInfoDisplayTemplateResponse, error)
	// UpdateHuntGroupClientInfoDisplayTemplate updates a client info display template for a given hunt group.
	UpdateHuntGroupClientInfoDisplayTemplate(ctx context.Context, in *UpdateHuntGroupClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*UpdateHuntGroupClientInfoDisplayTemplateResponse, error)
	// DeleteHuntGroupClientInfoDisplayTemplate deletes a client info display template for a given hunt group.
	DeleteHuntGroupClientInfoDisplayTemplate(ctx context.Context, in *DeleteHuntGroupClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*DeleteHuntGroupClientInfoDisplayTemplateResponse, error)
	// CopyHuntGroupClientInfoDisplayTemplate copies the client info display template from one hunt group to another.
	// It will create a new template in the destination hunt group with the same settings as the source template if it doesn't already exist.
	// Otherwise, it will update the existing template with the source template settings.
	CopyHuntGroupClientInfoDisplayTemplate(ctx context.Context, in *CopyHuntGroupClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*CopyHuntGroupClientInfoDisplayTemplateResponse, error)
	// CreateCampaignClientInfoDisplayTemplate creates a new client info display template for a campaign
	// with the same settings as the source template from a hunt group.
	CreateCampaignClientInfoDisplayTemplate(ctx context.Context, in *CreateCampaignClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*CreateCampaignClientInfoDisplayTemplateResponse, error)
	// ListHuntGroupsWithClientInfoTemplateData lists the hunt groups in an organization
	// with their client info display template data based on the filter.
	ListHuntGroupsWithClientInfoTemplateData(ctx context.Context, in *ListHuntGroupsWithClientInfoTemplateDataRequest, opts ...grpc.CallOption) (*ListHuntGroupsWithClientInfoTemplateDataResponse, error)
	// ListAgentTriggers returns a list of agent triggers for the given hunt group.
	ListAgentTriggers(ctx context.Context, in *ListAgentTriggersRequest, opts ...grpc.CallOption) (*ListAgentTriggersResponse, error)
	// CopyAgentTrigger copys an agent trigger to the given hunt group in the same org.
	CopyAgentTrigger(ctx context.Context, in *CopyAgentTriggerRequest, opts ...grpc.CallOption) (*CopyAgentTriggerResponse, error)
	// UpdateAgentTriggers updates all agent triggers for the given hunt group.
	UpdateAgentTriggers(ctx context.Context, in *UpdateAgentTriggersRequest, opts ...grpc.CallOption) (*UpdateAgentTriggersResponse, error)
	// Deprecated: Do not use.
	// ListHuntGroupScripts lists all hunt group scripts for the current organization.
	// DEPRECATED. Use ListOrgHuntGroupScripts instead
	ListHuntGroupScripts(ctx context.Context, in *ListHuntGroupScriptsRequest, opts ...grpc.CallOption) (*ListHuntGroupScriptsResponse, error)
	// ListOrgHuntGroupScripts lists all hunt group scripts for the current organization with a streamed response.
	ListOrgHuntGroupScripts(ctx context.Context, in *ListHuntGroupScriptsRequest, opts ...grpc.CallOption) (Org_ListOrgHuntGroupScriptsClient, error)
	// GetHuntGroupScript gets the specified script from the given script sid
	GetHuntGroupScript(ctx context.Context, in *GetHuntGroupScriptRequest, opts ...grpc.CallOption) (*GetHuntGroupScriptResponse, error)
	// CreateHuntGroupScript adds a creates a new hunt group script
	CreateHuntGroupScript(ctx context.Context, in *CreateHuntGroupScriptRequest, opts ...grpc.CallOption) (*CreateHuntGroupScriptResponse, error)
	// UpdateHuntGroupScript updates a script specified by the given script sid
	UpdateHuntGroupScript(ctx context.Context, in *UpdateHuntGroupScriptRequest, opts ...grpc.CallOption) (*UpdateHuntGroupScriptResponse, error)
	// DeleteHuntGroupScript deletes a hunt group script
	DeleteHuntGroupScript(ctx context.Context, in *DeleteHuntGroupScriptRequest, opts ...grpc.CallOption) (*DeleteHuntGroupScriptResponse, error)
	// AssignScriptToHuntGroups assigns a script to the specified hunt groups
	AssignScriptToHuntGroups(ctx context.Context, in *AssignScriptToHuntGroupsRequest, opts ...grpc.CallOption) (*AssignScriptToHuntGroupsResponse, error)
	// UnassignScriptFromHuntGroups unassigns a script from the specified hunt groups
	UnassignScriptFromHuntGroups(ctx context.Context, in *UnassignScriptFromHuntGroupsRequest, opts ...grpc.CallOption) (*UnassignScriptFromHuntGroupsResponse, error)
	// CreateTrust creates a new trust.
	CreateTrust(ctx context.Context, in *CreateTrustRequest, opts ...grpc.CallOption) (*CreateTrustResponse, error)
	// AcceptTrust accepts an incoming trust.
	AcceptTrust(ctx context.Context, in *AcceptTrustRequest, opts ...grpc.CallOption) (*AcceptTrustResponse, error)
	// RejectTrust rejects an incoming trust.
	RejectTrust(ctx context.Context, in *RejectTrustRequest, opts ...grpc.CallOption) (*RejectTrustResponse, error)
	// GetTrust returns a single trust by trust id.
	GetTrust(ctx context.Context, in *GetTrustRequest, opts ...grpc.CallOption) (*GetTrustResponse, error)
	// ListIncomingTrusts returns all pending trusts that are being granted
	// to the org of the currently logged in user.
	ListIncomingTrusts(ctx context.Context, in *ListIncomingTrustsRequest, opts ...grpc.CallOption) (*ListIncomingTrustsResponse, error)
	// ListGivenTrusts returns all trusts that have been given out for
	// the currently logged in user's org. The returned list will contain
	// accepted, pending, and rejected trusts.
	ListGivenTrusts(ctx context.Context, in *ListGivenTrustsRequest, opts ...grpc.CallOption) (*ListGivenTrustsResponse, error)
	// ListAssignableTrusts returns all accepted trusts that are being granted
	// to the org of the currently logged in user.
	ListAssignableTrusts(ctx context.Context, in *ListAssignableTrustsRequest, opts ...grpc.CallOption) (*ListAssignableTrustsResponse, error)
	// DeleteTrust deletes a trust by trust id. Only trusts where the current
	// org is the grantor can be deleted by this endpoint.
	DeleteTrust(ctx context.Context, in *DeleteTrustRequest, opts ...grpc.CallOption) (*DeleteTrustResponse, error)
	// AssignTrust assigns a trust to the given user ids.
	AssignTrust(ctx context.Context, in *AssignTrustRequest, opts ...grpc.CallOption) (*AssignTrustResponse, error)
	// UnassignTrust unassigns a trust from the given user id.
	UnassignTrust(ctx context.Context, in *UnassignTrustRequest, opts ...grpc.CallOption) (*UnassignTrustResponse, error)
	// CreateLabel creates a label with the given properties.
	CreateLabel(ctx context.Context, in *CreateLabelRequest, opts ...grpc.CallOption) (*CreateLabelResponse, error)
	// DeleteLabel deletes a label with the id given on the request.
	DeleteLabel(ctx context.Context, in *DeleteLabelRequest, opts ...grpc.CallOption) (*DeleteLabelResponse, error)
	// ListLabels returns all unique label names belonging to the given org id.
	ListLabels(ctx context.Context, in *ListLabelsRequest, opts ...grpc.CallOption) (*ListLabelsResponse, error)
	// GetLabel returns a single label with the given ID.
	GetLabel(ctx context.Context, in *GetLabelRequest, opts ...grpc.CallOption) (*GetLabelResponse, error)
	// UpdateLabel updates the given label.
	UpdateLabel(ctx context.Context, in *UpdateLabelRequest, opts ...grpc.CallOption) (*UpdateLabelResponse, error)
	// Assignlabel creates label assignments defined by the request.
	AssignLabel(ctx context.Context, in *AssignLabelRequest, opts ...grpc.CallOption) (*AssignLabelResponse, error)
	// Unassignlabel removes label assignments defined by the request.
	UnassignLabel(ctx context.Context, in *UnassignLabelRequest, opts ...grpc.CallOption) (*UnassignLabelResponse, error)
	// GetAssignmentCounts returns the total amount of label assignments
	// per entity type.
	GetAssignmentCounts(ctx context.Context, in *GetAssignmentCountsRequest, opts ...grpc.CallOption) (*GetAssignmentCountsResponse, error)
	// GetAssignableLabels returns a list of labels available to the current user.
	GetAssignableLabels(ctx context.Context, in *GetAssignableLabelsRequest, opts ...grpc.CallOption) (*GetAssignableLabelsResponse, error)
	// GetPermissions returns the permissions for a given user along with other user information.
	GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error)
	// GetUserPermissions returns the permissions for a given user.
	GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error)
	// Creates a new permission group.
	CreatePermissionGroup(ctx context.Context, in *CreatePermissionGroupRequest, opts ...grpc.CallOption) (*CreatePermissionGroupResponse, error)
	// UpdatePermissionGroup updates the permission group with the given id.
	UpdatePermissionGroup(ctx context.Context, in *UpdatePermissionGroupRequest, opts ...grpc.CallOption) (*UpdatePermissionGroupResponse, error)
	// DeletePermissionGroup deletes the permission group with the given id.
	DeletePermissionGroup(ctx context.Context, in *DeletePermissionGroupRequest, opts ...grpc.CallOption) (*DeletePermissionGroupResponse, error)
	// ListPermissionGroups returns a list of permissions for an organization.
	ListPermissionGroups(ctx context.Context, in *ListPermissionGroupsRequest, opts ...grpc.CallOption) (*ListPermissionGroupsResponse, error)
	// ListPermissionGroupsByOrgId returns a list of permissions for an
	// organization.
	ListPermissionGroupsByOrgId(ctx context.Context, in *ListPermissionGroupsByOrgIdRequest, opts ...grpc.CallOption) (*ListPermissionGroupsByOrgIdResponse, error)
	// AssignUsersPermissionGroup returns a user a permission group.
	AssignUsersPermissionGroup(ctx context.Context, in *AssignUsersPermissionGroupRequest, opts ...grpc.CallOption) (*AssignUsersPermissionGroupResponse, error)
	// RevokeUsersPermissionGroup returns a user a permission group.
	RevokeUsersPermissionGroup(ctx context.Context, in *RevokeUsersPermissionGroupRequest, opts ...grpc.CallOption) (*RevokeUsersPermissionGroupResponse, error)
	// AssignLabels assigns labels to a given permission group
	AssignLabels(ctx context.Context, in *AssignLabelsRequest, opts ...grpc.CallOption) (*AssignLabelsResponse, error)
	// RevokeLabels revokes labels from a given permission group
	RevokeLabels(ctx context.Context, in *RevokeLabelsRequest, opts ...grpc.CallOption) (*RevokeLabelsResponse, error)
	// AssignAccountOwnerPermissionToUser returns a user a permission group.
	AssignAccountOwnerPermissionToUser(ctx context.Context, in *AssignAccountOwnerPermissionToUserRequest, opts ...grpc.CallOption) (*AssignAccountOwnerPermissionToUserResponse, error)
	// RevokeAccountOwnerPermissionFromUser returns a user a permission group.
	RevokeAccountOwnerPermissionFromUser(ctx context.Context, in *RevokeAccountOwnerPermissionFromUserRequest, opts ...grpc.CallOption) (*RevokeAccountOwnerPermissionFromUserResponse, error)
	// Initializes the default read only permissions group for the
	// given organization.
	InitDefaultPermissionGroups(ctx context.Context, in *InitDefaultPermissionGroupsRequest, opts ...grpc.CallOption) (*InitDefaultPermissionGroupsResponse, error)
	// GetAccountOwnerGroup returns the account owner permission group
	// for an organization.
	GetAccountOwnerGroup(ctx context.Context, in *GetAccountOwnerGroupRequest, opts ...grpc.CallOption) (*GetAccountOwnerGroupResponse, error)
	// GetLicenses returns the licenses an organitzation is assigned.
	GetLicenses(ctx context.Context, in *GetLicensesRequest, opts ...grpc.CallOption) (*GetLicensesResponse, error)
	// GetOrgLicenses returns the licenses assigned to the organization
	// of the user who makes the request.
	GetOrgLicenses(ctx context.Context, in *GetOrgLicensesRequest, opts ...grpc.CallOption) (*GetOrgLicensesResponse, error)
	// UpdateLicenses updates an organization's licenses.
	UpdateLicenses(ctx context.Context, in *UpdateLicensesRequest, opts ...grpc.CallOption) (*UpdateLicensesResponse, error)
	// RemovePermissionFromAllPermissionGroups removes a permission from
	// all permission groups in an organization.
	RemovePermissionFromAllPermissionGroups(ctx context.Context, in *RemovePermissionFromAllPermissionGroupsRequest, opts ...grpc.CallOption) (*RemovePermissionFromAllPermissionGroupsResponse, error)
	// ListP3PermissionGroups returns the list of p3 permission groups
	// for the user's org.
	ListP3PermissionGroups(ctx context.Context, in *ListP3PermissionGroupsRequest, opts ...grpc.CallOption) (*ListP3PermissionGroupsResponse, error)
	// ListP3PermissionGroupsByOrgId returns the list of p3 permission groups
	// for an org by id.
	ListP3PermissionGroupsByOrgId(ctx context.Context, in *ListP3PermissionGroupsRequest, opts ...grpc.CallOption) (*ListP3PermissionGroupsResponse, error)
	// CreateP3PermissionGroup creates a new p3 permission group.
	CreateP3PermissionGroup(ctx context.Context, in *CreateP3PermissionGroupRequest, opts ...grpc.CallOption) (*CreateP3PermissionGroupResponse, error)
	// UpdateP3PermissionGroup updates an existing p3 permission group.
	// Requires PERMISSION_GROUP_EDIT.
	UpdateP3PermissionGroup(ctx context.Context, in *UpdateP3PermissionGroupRequest, opts ...grpc.CallOption) (*UpdateP3PermissionGroupResponse, error)
	// UpdateP3PermissionGroup updates an existing p3 permission group.
	// CUSTOMER_SUPPORT required for passing in an org id.
	UpdateP3PermissionGroupByOrgId(ctx context.Context, in *UpdateP3PermissionGroupByOrgIdRequest, opts ...grpc.CallOption) (*UpdateP3PermissionGroupByOrgIdResponse, error)
	// DeleteP3PermissionGroup deletes a p3 permission group.
	DeleteP3PermissionGroup(ctx context.Context, in *DeleteP3PermissionGroupRequest, opts ...grpc.CallOption) (*DeleteP3PermissionGroupResponse, error)
	// AssignUsersP3PermissionGroup assigns a p3 permission group
	// to a list of users.
	AssignUsersP3PermissionGroup(ctx context.Context, in *AssignUsersP3PermissionGroupRequest, opts ...grpc.CallOption) (*AssignUsersP3PermissionGroupResponse, error)
	// RevokeUsersP3PermissionGroup revokes a p3 permission group
	// from a list of users.
	RevokeUsersP3PermissionGroup(ctx context.Context, in *RevokeUsersP3PermissionGroupRequest, opts ...grpc.CallOption) (*RevokeUsersP3PermissionGroupResponse, error)
	// RefreshMfaLockout resets the lockout timer for the given user.
	RefreshMfaLockout(ctx context.Context, in *RefreshMfaLockoutRequest, opts ...grpc.CallOption) (*RefreshMfaLockoutResponse, error)
	// RefreshMfaLockoutByOrgId resets the lockout timer for the given user and org id.
	RefreshMfaLockoutByOrgId(ctx context.Context, in *RefreshMfaLockoutByOrgIdRequest, opts ...grpc.CallOption) (*RefreshMfaLockoutByOrgIdResponse, error)
	// SetMfaType sets the given user's mfa type.
	SetMfaType(ctx context.Context, in *SetMfaTypeRequest, opts ...grpc.CallOption) (*SetMfaTypeResponse, error)
	// SetMyMfaType sets the current user's mfa type.
	SetMyMfaType(ctx context.Context, in *SetMyMfaTypeRequest, opts ...grpc.CallOption) (*SetMyMfaTypeResponse, error)
	// EnableUserMfa enables or disables mfa for the given user
	EnableUserMfa(ctx context.Context, in *EnableUserMfaRequest, opts ...grpc.CallOption) (*EnableUserMfaResponse, error)
	// EnableMyUserMfa enables mfa for the current user
	EnableMyUserMfa(ctx context.Context, in *EnableMyUserMfaRequest, opts ...grpc.CallOption) (*EnableMyUserMfaResponse, error)
	// GetUserMfaInfo returns the mfa info for the given user.
	GetUserMfaInfo(ctx context.Context, in *GetUserMfaInfoRequest, opts ...grpc.CallOption) (*GetUserMfaInfoResponse, error)
	// GetMyUserMfaInfo returns the mfa info for the current user.
	GetMyUserMfaInfo(ctx context.Context, in *GetMyUserMfaInfoRequest, opts ...grpc.CallOption) (*GetMyUserMfaInfoResponse, error)
	// GetMyAllowedMfaMethods returns the mfa methods allowed to the current user.
	GetMyAllowedMfaMethods(ctx context.Context, in *GetMyAllowedMfaMethodsRequest, opts ...grpc.CallOption) (*GetMyAllowedMfaMethodsResponse, error)
	// Deprecated: Do not use.
	// CreateBusinessHours persists times businesses are available.
	CreateBusinessHours(ctx context.Context, in *CreateBusinessHoursRequest, opts ...grpc.CallOption) (*CreateBusinessHoursResponse, error)
	// Deprecated: Do not use.
	// UpdateBusinessHours persists changes to times businesses are available.
	UpdateBusinessHours(ctx context.Context, in *UpdateBusinessHoursRequest, opts ...grpc.CallOption) (*UpdateBusinessHoursResponse, error)
	// AddGroupedUserIPRestrictions adds a user or list of user's IPs they
	// are required to authenticate with
	AddGroupedUserIPRestrictions(ctx context.Context, in *AddGroupedUserIPRestrictionsRequest, opts ...grpc.CallOption) (*AddGroupedUserIPRestrictionsResponse, error)
	// RemoveGroupedUserIPRestrictions removes a user or list of user's IPs they
	// are required to authenticate with
	RemoveGroupedUserIPRestrictions(ctx context.Context, in *RemoveGroupedUserIPRestrictionsRequest, opts ...grpc.CallOption) (*RemoveGroupedUserIPRestrictionsResponse, error)
	// ListUsersAllowedIps -
	ListUsersAllowedIps(ctx context.Context, in *ListUsersAllowedIpsRequest, opts ...grpc.CallOption) (*ListUsersAllowedIpsResponse, error)
	ListResponseEvaluators(ctx context.Context, in *ListResponseEvaluatorsRequest, opts ...grpc.CallOption) (*ListResponseEvaluatorsResponse, error)
	GetResponseEvaluator(ctx context.Context, in *GetResponseEvaluatorRequest, opts ...grpc.CallOption) (*GetResponseEvaluatorResponse, error)
	CreateResponseEvaluator(ctx context.Context, in *CreateResponseEvaluatorRequest, opts ...grpc.CallOption) (*CreateResponseEvaluatorResponse, error)
	UpdateResponseEvaluator(ctx context.Context, in *UpdateResponseEvaluatorRequest, opts ...grpc.CallOption) (*UpdateResponseEvaluatorResponse, error)
	DeleteResponseEvaluator(ctx context.Context, in *DeleteResponseEvaluatorRequest, opts ...grpc.CallOption) (*DeleteResponseEvaluatorResponse, error)
}

type orgClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgClient(cc grpc.ClientConnInterface) OrgClient {
	return &orgClient{cc}
}

func (c *orgClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, Org_CreateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, Org_GetOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrganizationById(ctx context.Context, in *GetOrganizationByIdRequest, opts ...grpc.CallOption) (*GetOrganizationByIdResponse, error) {
	out := new(GetOrganizationByIdResponse)
	err := c.cc.Invoke(ctx, Org_GetOrganizationById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, Org_UpdateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ArchiveOrganization(ctx context.Context, in *ArchiveOrganizationRequest, opts ...grpc.CallOption) (*ArchiveOrganizationResponse, error) {
	out := new(ArchiveOrganizationResponse)
	err := c.cc.Invoke(ctx, Org_ArchiveOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UnArchiveOrganization(ctx context.Context, in *UnArchiveOrganizationRequest, opts ...grpc.CallOption) (*UnArchiveOrganizationResponse, error) {
	out := new(UnArchiveOrganizationResponse)
	err := c.cc.Invoke(ctx, Org_UnArchiveOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListAllOrganizationsGlobally(ctx context.Context, in *ListAllOrganizationsGloballyRequest, opts ...grpc.CallOption) (Org_ListAllOrganizationsGloballyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Org_ServiceDesc.Streams[0], Org_ListAllOrganizationsGlobally_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orgListAllOrganizationsGloballyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Org_ListAllOrganizationsGloballyClient interface {
	Recv() (*ListAllOrganizationsGloballyResponse, error)
	grpc.ClientStream
}

type orgListAllOrganizationsGloballyClient struct {
	grpc.ClientStream
}

func (x *orgListAllOrganizationsGloballyClient) Recv() (*ListAllOrganizationsGloballyResponse, error) {
	m := new(ListAllOrganizationsGloballyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orgClient) ListOrganizationsByRegion(ctx context.Context, in *ListOrganizationsByRegionRequest, opts ...grpc.CallOption) (Org_ListOrganizationsByRegionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Org_ServiceDesc.Streams[1], Org_ListOrganizationsByRegion_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orgListOrganizationsByRegionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Org_ListOrganizationsByRegionClient interface {
	Recv() (*ListOrganizationsByRegionResponse, error)
	grpc.ClientStream
}

type orgListOrganizationsByRegionClient struct {
	grpc.ClientStream
}

func (x *orgListOrganizationsByRegionClient) Recv() (*ListOrganizationsByRegionResponse, error) {
	m := new(ListOrganizationsByRegionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orgClient) ListArchivedOrganizations(ctx context.Context, in *ListArchivedOrganizationsRequest, opts ...grpc.CallOption) (Org_ListArchivedOrganizationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Org_ServiceDesc.Streams[2], Org_ListArchivedOrganizations_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orgListArchivedOrganizationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Org_ListArchivedOrganizationsClient interface {
	Recv() (*ListArchivedOrganizationsResponse, error)
	grpc.ClientStream
}

type orgListArchivedOrganizationsClient struct {
	grpc.ClientStream
}

func (x *orgListArchivedOrganizationsClient) Recv() (*ListArchivedOrganizationsResponse, error) {
	m := new(ListArchivedOrganizationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orgClient) ConvertOrgToManual(ctx context.Context, in *ConvertOrgToManualRequest, opts ...grpc.CallOption) (*ConvertOrgToManualResponse, error) {
	out := new(ConvertOrgToManualResponse)
	err := c.cc.Invoke(ctx, Org_ConvertOrgToManual_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListOwnedOrgs(ctx context.Context, in *ListOwnedOrgsRequest, opts ...grpc.CallOption) (Org_ListOwnedOrgsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Org_ServiceDesc.Streams[3], Org_ListOwnedOrgs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orgListOwnedOrgsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Org_ListOwnedOrgsClient interface {
	Recv() (*ListOwnedOrgsResponse, error)
	grpc.ClientStream
}

type orgListOwnedOrgsClient struct {
	grpc.ClientStream
}

func (x *orgListOwnedOrgsClient) Recv() (*ListOwnedOrgsResponse, error) {
	m := new(ListOwnedOrgsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orgClient) GetOrganizationPreferences(ctx context.Context, in *GetOrganizationPreferencesRequest, opts ...grpc.CallOption) (*GetOrganizationPreferencesResponse, error) {
	out := new(GetOrganizationPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetOrganizationPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateOrganizationPreferences(ctx context.Context, in *UpdateOrganizationPreferencesRequest, opts ...grpc.CallOption) (*UpdateOrganizationPreferencesResponse, error) {
	out := new(UpdateOrganizationPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateOrganizationPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAgentPreferences(ctx context.Context, in *GetAgentPreferencesRequest, opts ...grpc.CallOption) (*GetAgentPreferencesResponse, error) {
	out := new(GetAgentPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetAgentPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAgentPreferences(ctx context.Context, in *UpdateAgentPreferencesRequest, opts ...grpc.CallOption) (*UpdateAgentPreferencesResponse, error) {
	out := new(UpdateAgentPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAgentPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetContactPreferences(ctx context.Context, in *GetContactPreferencesRequest, opts ...grpc.CallOption) (*GetContactPreferencesResponse, error) {
	out := new(GetContactPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetContactPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateContactPreferences(ctx context.Context, in *UpdateContactPreferencesRequest, opts ...grpc.CallOption) (*UpdateContactPreferencesResponse, error) {
	out := new(UpdateContactPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateContactPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAuthenticationPreferences(ctx context.Context, in *GetAuthenticationPreferencesRequest, opts ...grpc.CallOption) (*GetAuthenticationPreferencesResponse, error) {
	out := new(GetAuthenticationPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetAuthenticationPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAuthenticationPreferences(ctx context.Context, in *UpdateAuthenticationPreferencesRequest, opts ...grpc.CallOption) (*UpdateAuthenticationPreferencesResponse, error) {
	out := new(UpdateAuthenticationPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAuthenticationPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetWebhookPreferences(ctx context.Context, in *GetWebhookPreferencesRequest, opts ...grpc.CallOption) (*GetWebhookPreferencesResponse, error) {
	out := new(GetWebhookPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetWebhookPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateWebhookPreferences(ctx context.Context, in *UpdateWebhookPreferencesRequest, opts ...grpc.CallOption) (*UpdateWebhookPreferencesResponse, error) {
	out := new(UpdateWebhookPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateWebhookPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetDashboardGeneralPreferences(ctx context.Context, in *GetDashboardGeneralPreferencesRequest, opts ...grpc.CallOption) (*GetDashboardGeneralPreferencesResponse, error) {
	out := new(GetDashboardGeneralPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetDashboardGeneralPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateDashboardGeneralPreferences(ctx context.Context, in *UpdateDashboardGeneralPreferencesRequest, opts ...grpc.CallOption) (*UpdateDashboardGeneralPreferencesResponse, error) {
	out := new(UpdateDashboardGeneralPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateDashboardGeneralPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetDashboardQueuePreferences(ctx context.Context, in *GetDashboardQueuePreferencesRequest, opts ...grpc.CallOption) (*GetDashboardQueuePreferencesResponse, error) {
	out := new(GetDashboardQueuePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetDashboardQueuePreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateDashboardQueuePreferences(ctx context.Context, in *UpdateDashboardQueuePreferencesRequest, opts ...grpc.CallOption) (*UpdateDashboardQueuePreferencesResponse, error) {
	out := new(UpdateDashboardQueuePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateDashboardQueuePreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetPhonePreferences(ctx context.Context, in *GetPhonePreferencesRequest, opts ...grpc.CallOption) (*GetPhonePreferencesResponse, error) {
	out := new(GetPhonePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetPhonePreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdatePhonePreferences(ctx context.Context, in *UpdatePhonePreferencesRequest, opts ...grpc.CallOption) (*UpdatePhonePreferencesResponse, error) {
	out := new(UpdatePhonePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdatePhonePreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetCompliancePreferences(ctx context.Context, in *GetCompliancePreferencesRequest, opts ...grpc.CallOption) (*GetCompliancePreferencesResponse, error) {
	out := new(GetCompliancePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetCompliancePreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateCompliancePreferences(ctx context.Context, in *UpdateCompliancePreferencesRequest, opts ...grpc.CallOption) (*UpdateCompliancePreferencesResponse, error) {
	out := new(UpdateCompliancePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateCompliancePreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetBroadcastPreferences(ctx context.Context, in *GetBroadcastPreferencesRequest, opts ...grpc.CallOption) (*GetBroadcastPreferencesResponse, error) {
	out := new(GetBroadcastPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetBroadcastPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateBroadcastPreferences(ctx context.Context, in *UpdateBroadcastPreferencesRequest, opts ...grpc.CallOption) (*UpdateBroadcastPreferencesResponse, error) {
	out := new(UpdateBroadcastPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateBroadcastPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetSchedulePreferences(ctx context.Context, in *GetSchedulePreferencesRequest, opts ...grpc.CallOption) (*GetSchedulePreferencesResponse, error) {
	out := new(GetSchedulePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetSchedulePreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateSchedulePreferences(ctx context.Context, in *UpdateSchedulePreferencesRequest, opts ...grpc.CallOption) (*UpdateSchedulePreferencesResponse, error) {
	out := new(UpdateSchedulePreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateSchedulePreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetEmailSmsPreferences(ctx context.Context, in *GetEmailSmsPreferencesRequest, opts ...grpc.CallOption) (*GetEmailSmsPreferencesResponse, error) {
	out := new(GetEmailSmsPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetEmailSmsPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateEmailSmsPreferences(ctx context.Context, in *UpdateEmailSmsPreferencesRequest, opts ...grpc.CallOption) (*UpdateEmailSmsPreferencesResponse, error) {
	out := new(UpdateEmailSmsPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateEmailSmsPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetBusinessPreferences(ctx context.Context, in *GetBusinessPreferencesRequest, opts ...grpc.CallOption) (*GetBusinessPreferencesResponse, error) {
	out := new(GetBusinessPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetBusinessPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateBusinessPreferences(ctx context.Context, in *UpdateBusinessPreferencesRequest, opts ...grpc.CallOption) (*UpdateBusinessPreferencesResponse, error) {
	out := new(UpdateBusinessPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateBusinessPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAdminBusinessPreferences(ctx context.Context, in *UpdateAdminBusinessPreferencesRequest, opts ...grpc.CallOption) (*UpdateAdminBusinessPreferencesResponse, error) {
	out := new(UpdateAdminBusinessPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAdminBusinessPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetScorecardsPreferences(ctx context.Context, in *GetScorecardsPreferencesRequest, opts ...grpc.CallOption) (*GetScorecardsPreferencesResponse, error) {
	out := new(GetScorecardsPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetScorecardsPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateScorecardsPreferences(ctx context.Context, in *UpdateScorecardsPreferencesRequest, opts ...grpc.CallOption) (*UpdateScorecardsPreferencesResponse, error) {
	out := new(UpdateScorecardsPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateScorecardsPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetVoiceAnalyticsPreferences(ctx context.Context, in *GetVoiceAnalyticsPreferencesRequest, opts ...grpc.CallOption) (*GetVoiceAnalyticsPreferencesResponse, error) {
	out := new(GetVoiceAnalyticsPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetVoiceAnalyticsPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListVoiceAnalyticsPreferences(ctx context.Context, in *ListVoiceAnalyticsPreferencesRequest, opts ...grpc.CallOption) (*ListVoiceAnalyticsPreferencesResponse, error) {
	out := new(ListVoiceAnalyticsPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_ListVoiceAnalyticsPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateVoiceAnalyticsPreferences(ctx context.Context, in *UpdateVoiceAnalyticsPreferencesRequest, opts ...grpc.CallOption) (*UpdateVoiceAnalyticsPreferencesResponse, error) {
	out := new(UpdateVoiceAnalyticsPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateVoiceAnalyticsPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetEndOfDayPreferences(ctx context.Context, in *GetEndOfDayPreferencesRequest, opts ...grpc.CallOption) (*GetEndOfDayPreferencesResponse, error) {
	out := new(GetEndOfDayPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetEndOfDayPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateEndOfDayPreferences(ctx context.Context, in *UpdateEndOfDayPreferencesRequest, opts ...grpc.CallOption) (*UpdateEndOfDayPreferencesResponse, error) {
	out := new(UpdateEndOfDayPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateEndOfDayPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetReportFilterPreferences(ctx context.Context, in *GetFilterPreferencesRequest, opts ...grpc.CallOption) (*GetFilterPreferencesResponse, error) {
	out := new(GetFilterPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetReportFilterPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateReportFilterPreferences(ctx context.Context, in *UpdateFilterPreferencesRequest, opts ...grpc.CallOption) (*UpdateFilterPreferencesResponse, error) {
	out := new(UpdateFilterPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateReportFilterPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetRecordingPreferences(ctx context.Context, in *GetRecordingPreferencesRequest, opts ...grpc.CallOption) (*GetRecordingPreferencesResponse, error) {
	out := new(GetRecordingPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetRecordingPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateRecordingPreferences(ctx context.Context, in *UpdateRecordingPreferencesRequest, opts ...grpc.CallOption) (*UpdateRecordingPreferencesResponse, error) {
	out := new(UpdateRecordingPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateRecordingPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAdminClientPreferences(ctx context.Context, in *GetAdminClientPreferencesRequest, opts ...grpc.CallOption) (*GetAdminClientPreferencesResponse, error) {
	out := new(GetAdminClientPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_GetAdminClientPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAdminClientPreferences(ctx context.Context, in *UpdateAdminClientPreferencesRequest, opts ...grpc.CallOption) (*UpdateAdminClientPreferencesResponse, error) {
	out := new(UpdateAdminClientPreferencesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAdminClientPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AcceptLinkbackRecordingTerms(ctx context.Context, in *AcceptLinkbackRecordingTermsRequest, opts ...grpc.CallOption) (*AcceptLinkbackRecordingTermsResponse, error) {
	out := new(AcceptLinkbackRecordingTermsResponse)
	err := c.cc.Invoke(ctx, Org_AcceptLinkbackRecordingTerms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) LinkbackUpdateBroadcastTemplates(ctx context.Context, in *LinkbackUpdateBroadcastTemplatesRequest, opts ...grpc.CallOption) (*LinkbackUpdateBroadcastTemplatesResponse, error) {
	out := new(LinkbackUpdateBroadcastTemplatesResponse)
	err := c.cc.Invoke(ctx, Org_LinkbackUpdateBroadcastTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RecordEmailUnsubscribeAcknowledgement(ctx context.Context, in *RecordEmailUnsubscribeAcknowledgementRequest, opts ...grpc.CallOption) (*RecordEmailUnsubscribeAcknowledgementResponse, error) {
	out := new(RecordEmailUnsubscribeAcknowledgementResponse)
	err := c.cc.Invoke(ctx, Org_RecordEmailUnsubscribeAcknowledgement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ClearEmailUnsubscribeAcknowledgement(ctx context.Context, in *ClearEmailUnsubscribeAcknowledgementRequest, opts ...grpc.CallOption) (*ClearEmailUnsubscribeAcknowledgementResponse, error) {
	out := new(ClearEmailUnsubscribeAcknowledgementResponse)
	err := c.cc.Invoke(ctx, Org_ClearEmailUnsubscribeAcknowledgement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *orgClient) ListBusinessHours(ctx context.Context, in *ListBusinessHoursRequest, opts ...grpc.CallOption) (*ListBusinessHoursResponse, error) {
	out := new(ListBusinessHoursResponse)
	err := c.cc.Invoke(ctx, Org_ListBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *orgClient) GetBusinessHours(ctx context.Context, in *GetBusinessHoursRequest, opts ...grpc.CallOption) (*GetBusinessHoursResponse, error) {
	out := new(GetBusinessHoursResponse)
	err := c.cc.Invoke(ctx, Org_GetBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *orgClient) SetBusinessHours(ctx context.Context, in *SetBusinessHoursRequest, opts ...grpc.CallOption) (*SetBusinessHoursResponse, error) {
	out := new(SetBusinessHoursResponse)
	err := c.cc.Invoke(ctx, Org_SetBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *orgClient) AddIntervalToBusinessHours(ctx context.Context, in *AddIntervalToBusinessHoursRequest, opts ...grpc.CallOption) (*AddIntervalToBusinessHoursResponse, error) {
	out := new(AddIntervalToBusinessHoursResponse)
	err := c.cc.Invoke(ctx, Org_AddIntervalToBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *orgClient) RemoveIntervalFromBusinessHours(ctx context.Context, in *RemoveIntervalFromBusinessHoursRequest, opts ...grpc.CallOption) (*RemoveIntervalFromBusinessHoursResponse, error) {
	out := new(RemoveIntervalFromBusinessHoursResponse)
	err := c.cc.Invoke(ctx, Org_RemoveIntervalFromBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *orgClient) UpdateBusinessHoursInfo(ctx context.Context, in *UpdateBusinessHoursInfoRequest, opts ...grpc.CallOption) (*UpdateBusinessHoursInfoResponse, error) {
	out := new(UpdateBusinessHoursInfoResponse)
	err := c.cc.Invoke(ctx, Org_UpdateBusinessHoursInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *orgClient) DeleteBusinessHours(ctx context.Context, in *DeleteBusinessHoursRequest, opts ...grpc.CallOption) (*DeleteBusinessHoursResponse, error) {
	out := new(DeleteBusinessHoursResponse)
	err := c.cc.Invoke(ctx, Org_DeleteBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *orgClient) EvaluateBusinessHours(ctx context.Context, in *EvaluateBusinessHoursRequest, opts ...grpc.CallOption) (*EvaluateBusinessHoursResponse, error) {
	out := new(EvaluateBusinessHoursResponse)
	err := c.cc.Invoke(ctx, Org_EvaluateBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, Org_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateDelegatedUser(ctx context.Context, in *CreateDelegatedUserRequest, opts ...grpc.CallOption) (*CreateDelegatedUserResponse, error) {
	out := new(CreateDelegatedUserResponse)
	err := c.cc.Invoke(ctx, Org_CreateDelegatedUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetMyUser(ctx context.Context, in *GetMyUserRequest, opts ...grpc.CallOption) (*GetMyUserResponse, error) {
	out := new(GetMyUserResponse)
	err := c.cc.Invoke(ctx, Org_GetMyUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, Org_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserByOrgId(ctx context.Context, in *GetUserByOrgIdRequest, opts ...grpc.CallOption) (*GetUserByOrgIdResponse, error) {
	out := new(GetUserByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_GetUserByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (Org_ListAgentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Org_ServiceDesc.Streams[4], Org_ListAgents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orgListAgentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Org_ListAgentsClient interface {
	Recv() (*ListAgentsResponse, error)
	grpc.ClientStream
}

type orgListAgentsClient struct {
	grpc.ClientStream
}

func (x *orgListAgentsClient) Recv() (*ListAgentsResponse, error) {
	m := new(ListAgentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orgClient) ListPublicUsers(ctx context.Context, in *ListPublicUsersRequest, opts ...grpc.CallOption) (Org_ListPublicUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Org_ServiceDesc.Streams[5], Org_ListPublicUsers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orgListPublicUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Org_ListPublicUsersClient interface {
	Recv() (*ListPublicUsersResponse, error)
	grpc.ClientStream
}

type orgListPublicUsersClient struct {
	grpc.ClientStream
}

func (x *orgListPublicUsersClient) Recv() (*ListPublicUsersResponse, error) {
	m := new(ListPublicUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orgClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (Org_ListUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Org_ServiceDesc.Streams[6], Org_ListUsers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orgListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Org_ListUsersClient interface {
	Recv() (*ListUsersResponse, error)
	grpc.ClientStream
}

type orgListUsersClient struct {
	grpc.ClientStream
}

func (x *orgListUsersClient) Recv() (*ListUsersResponse, error) {
	m := new(ListUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orgClient) ListUsersByOrgId(ctx context.Context, in *ListUsersByOrgIdRequest, opts ...grpc.CallOption) (Org_ListUsersByOrgIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &Org_ServiceDesc.Streams[7], Org_ListUsersByOrgId_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orgListUsersByOrgIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Org_ListUsersByOrgIdClient interface {
	Recv() (*ListUsersByOrgIdResponse, error)
	grpc.ClientStream
}

type orgListUsersByOrgIdClient struct {
	grpc.ClientStream
}

func (x *orgListUsersByOrgIdClient) Recv() (*ListUsersByOrgIdResponse, error) {
	m := new(ListUsersByOrgIdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orgClient) ListUsersByRegion(ctx context.Context, in *ListUsersByRegionRequest, opts ...grpc.CallOption) (Org_ListUsersByRegionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Org_ServiceDesc.Streams[8], Org_ListUsersByRegion_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orgListUsersByRegionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Org_ListUsersByRegionClient interface {
	Recv() (*ListUsersByRegionResponse, error)
	grpc.ClientStream
}

type orgListUsersByRegionClient struct {
	grpc.ClientStream
}

func (x *orgListUsersByRegionClient) Recv() (*ListUsersByRegionResponse, error) {
	m := new(ListUsersByRegionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orgClient) UpdateMyUser(ctx context.Context, in *UpdateMyUserRequest, opts ...grpc.CallOption) (*UpdateMyUserResponse, error) {
	out := new(UpdateMyUserResponse)
	err := c.cc.Invoke(ctx, Org_UpdateMyUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUserLabels(ctx context.Context, in *UpdateUserLabelsRequest, opts ...grpc.CallOption) (*UpdateUserLabelsResponse, error) {
	out := new(UpdateUserLabelsResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUserLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUserCallerId(ctx context.Context, in *UpdateUserCallerIdRequest, opts ...grpc.CallOption) (*UpdateUserCallerIdResponse, error) {
	out := new(UpdateUserCallerIdResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUserCallerId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUserDisabled(ctx context.Context, in *UpdateUserDisabledRequest, opts ...grpc.CallOption) (*UpdateUserDisabledResponse, error) {
	out := new(UpdateUserDisabledResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUserDisabled_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUserDisabledByOrgId(ctx context.Context, in *UpdateUserDisabledByOrgIdRequest, opts ...grpc.CallOption) (*UpdateUserDisabledByOrgIdResponse, error) {
	out := new(UpdateUserDisabledByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUserDisabledByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetMyUserPasswordResetLink(ctx context.Context, in *GetMyUserPasswordResetLinkRequest, opts ...grpc.CallOption) (*GetMyUserPasswordResetLinkResponse, error) {
	out := new(GetMyUserPasswordResetLinkResponse)
	err := c.cc.Invoke(ctx, Org_GetMyUserPasswordResetLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserPasswordResetLink(ctx context.Context, in *GetUserPasswordResetLinkRequest, opts ...grpc.CallOption) (*GetUserPasswordResetLinkResponse, error) {
	out := new(GetUserPasswordResetLinkResponse)
	err := c.cc.Invoke(ctx, Org_GetUserPasswordResetLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserPasswordResetLinkByOrgId(ctx context.Context, in *GetUserPasswordResetLinkByOrgIdRequest, opts ...grpc.CallOption) (*GetUserPasswordResetLinkByOrgIdResponse, error) {
	out := new(GetUserPasswordResetLinkByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_GetUserPasswordResetLinkByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreatePasswordResetLink(ctx context.Context, in *CreatePasswordResetLinkRequest, opts ...grpc.CallOption) (*CreatePasswordResetLinkResponse, error) {
	out := new(CreatePasswordResetLinkResponse)
	err := c.cc.Invoke(ctx, Org_CreatePasswordResetLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreatePasswordResetLinkByOrgId(ctx context.Context, in *CreatePasswordResetLinkByOrgIdRequest, opts ...grpc.CallOption) (*CreatePasswordResetLinkByOrgIdResponse, error) {
	out := new(CreatePasswordResetLinkByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_CreatePasswordResetLinkByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserLoginInfo(ctx context.Context, in *GetUserLoginInfoRequest, opts ...grpc.CallOption) (*GetUserLoginInfoResponse, error) {
	out := new(GetUserLoginInfoResponse)
	err := c.cc.Invoke(ctx, Org_GetUserLoginInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserEmailVerified(ctx context.Context, in *GetUserEmailVerifiedRequest, opts ...grpc.CallOption) (*GetUserEmailVerifiedResponse, error) {
	out := new(GetUserEmailVerifiedResponse)
	err := c.cc.Invoke(ctx, Org_GetUserEmailVerified_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserEmailVerifiedByOrgId(ctx context.Context, in *GetUserEmailVerifiedByOrgIdRequest, opts ...grpc.CallOption) (*GetUserEmailVerifiedByOrgIdResponse, error) {
	out := new(GetUserEmailVerifiedByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_GetUserEmailVerifiedByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ResetMyPassword(ctx context.Context, in *ResetMyPasswordRequest, opts ...grpc.CallOption) (*ResetMyPasswordResponse, error) {
	out := new(ResetMyPasswordResponse)
	err := c.cc.Invoke(ctx, Org_ResetMyPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...grpc.CallOption) (*ResetUserPasswordResponse, error) {
	out := new(ResetUserPasswordResponse)
	err := c.cc.Invoke(ctx, Org_ResetUserPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ResetUserPasswordByOrgId(ctx context.Context, in *ResetUserPasswordByOrgIdRequest, opts ...grpc.CallOption) (*ResetUserPasswordByOrgIdResponse, error) {
	out := new(ResetUserPasswordByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_ResetUserPasswordByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SendUserEmailVerification(ctx context.Context, in *SendUserEmailVerificationRequest, opts ...grpc.CallOption) (*SendUserEmailVerificationResponse, error) {
	out := new(SendUserEmailVerificationResponse)
	err := c.cc.Invoke(ctx, Org_SendUserEmailVerification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SendUserEmailVerificationByOrgId(ctx context.Context, in *SendUserEmailVerificationByOrgIdRequest, opts ...grpc.CallOption) (*SendUserEmailVerificationByOrgIdResponse, error) {
	out := new(SendUserEmailVerificationByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_SendUserEmailVerificationByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SendPasswordReset(ctx context.Context, in *SendPasswordResetRequest, opts ...grpc.CallOption) (*SendPasswordResetResponse, error) {
	out := new(SendPasswordResetResponse)
	err := c.cc.Invoke(ctx, Org_SendPasswordReset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SendPasswordResetByOrgId(ctx context.Context, in *SendPasswordResetByOrgIdRequest, opts ...grpc.CallOption) (*SendPasswordResetByOrgIdResponse, error) {
	out := new(SendPasswordResetByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_SendPasswordResetByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserSessionData(ctx context.Context, in *GetUserSessionDataRequest, opts ...grpc.CallOption) (*GetUserSessionDataResponse, error) {
	out := new(GetUserSessionDataResponse)
	err := c.cc.Invoke(ctx, Org_GetUserSessionData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAgentProfileGroup(ctx context.Context, in *GetAgentProfileGroupRequest, opts ...grpc.CallOption) (*GetAgentProfileGroupResponse, error) {
	out := new(GetAgentProfileGroupResponse)
	err := c.cc.Invoke(ctx, Org_GetAgentProfileGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListAgentProfileGroups(ctx context.Context, in *ListAgentProfileGroupsRequest, opts ...grpc.CallOption) (*ListAgentProfileGroupsResponse, error) {
	out := new(ListAgentProfileGroupsResponse)
	err := c.cc.Invoke(ctx, Org_ListAgentProfileGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAgentProfileGroup(ctx context.Context, in *UpdateAgentProfileGroupRequest, opts ...grpc.CallOption) (*UpdateAgentProfileGroupResponse, error) {
	out := new(UpdateAgentProfileGroupResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAgentProfileGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateAgentProfileGroup(ctx context.Context, in *CreateAgentProfileGroupRequest, opts ...grpc.CallOption) (*CreateAgentProfileGroupResponse, error) {
	out := new(CreateAgentProfileGroupResponse)
	err := c.cc.Invoke(ctx, Org_CreateAgentProfileGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteAgentProfileGroup(ctx context.Context, in *DeleteAgentProfileGroupRequest, opts ...grpc.CallOption) (*DeleteAgentProfileGroupResponse, error) {
	out := new(DeleteAgentProfileGroupResponse)
	err := c.cc.Invoke(ctx, Org_DeleteAgentProfileGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AssignAgentProfileGroups(ctx context.Context, in *AssignAgentProfileGroupsRequest, opts ...grpc.CallOption) (*AssignAgentProfileGroupsResponse, error) {
	out := new(AssignAgentProfileGroupsResponse)
	err := c.cc.Invoke(ctx, Org_AssignAgentProfileGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AddUserSubscription(ctx context.Context, in *AddUserSubscriptionRequest, opts ...grpc.CallOption) (*AddUserSubscriptionResponse, error) {
	out := new(AddUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, Org_AddUserSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AddUserSubscriptionByUserId(ctx context.Context, in *AddUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*AddUserSubscriptionByUserIdResponse, error) {
	out := new(AddUserSubscriptionByUserIdResponse)
	err := c.cc.Invoke(ctx, Org_AddUserSubscriptionByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserSubscription(ctx context.Context, in *GetUserSubscriptionRequest, opts ...grpc.CallOption) (*GetUserSubscriptionResponse, error) {
	out := new(GetUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, Org_GetUserSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserSubscriptionByUserId(ctx context.Context, in *GetUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*GetUserSubscriptionByUserIdResponse, error) {
	out := new(GetUserSubscriptionByUserIdResponse)
	err := c.cc.Invoke(ctx, Org_GetUserSubscriptionByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUserSubscription(ctx context.Context, in *UpdateUserSubscriptionRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionResponse, error) {
	out := new(UpdateUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUserSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateUserSubscriptionByUserId(ctx context.Context, in *UpdateUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*UpdateUserSubscriptionByUserIdResponse, error) {
	out := new(UpdateUserSubscriptionByUserIdResponse)
	err := c.cc.Invoke(ctx, Org_UpdateUserSubscriptionByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RemoveUserSubscription(ctx context.Context, in *RemoveUserSubscriptionRequest, opts ...grpc.CallOption) (*RemoveUserSubscriptionResponse, error) {
	out := new(RemoveUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, Org_RemoveUserSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RemoveUserSubscriptionByUserId(ctx context.Context, in *RemoveUserSubscriptionByUserIdRequest, opts ...grpc.CallOption) (*RemoveUserSubscriptionByUserIdResponse, error) {
	out := new(RemoveUserSubscriptionByUserIdResponse)
	err := c.cc.Invoke(ctx, Org_RemoveUserSubscriptionByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListUserSubscriptions(ctx context.Context, in *ListUserSubscriptionsRequest, opts ...grpc.CallOption) (*ListUserSubscriptionsResponse, error) {
	out := new(ListUserSubscriptionsResponse)
	err := c.cc.Invoke(ctx, Org_ListUserSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListUserSubscriptionsByUserId(ctx context.Context, in *ListUserSubscriptionsByUserIdRequest, opts ...grpc.CallOption) (*ListUserSubscriptionsByUserIdResponse, error) {
	out := new(ListUserSubscriptionsByUserIdResponse)
	err := c.cc.Invoke(ctx, Org_ListUserSubscriptionsByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListOrgSubscriptions(ctx context.Context, in *ListOrgSubscriptionsRequest, opts ...grpc.CallOption) (*ListOrgSubscriptionsResponse, error) {
	out := new(ListOrgSubscriptionsResponse)
	err := c.cc.Invoke(ctx, Org_ListOrgSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, opts ...grpc.CallOption) (*CreateAuthTokenResponse, error) {
	out := new(CreateAuthTokenResponse)
	err := c.cc.Invoke(ctx, Org_CreateAuthToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateAuthTokenByUserId(ctx context.Context, in *CreateAuthTokenByUserIdRequest, opts ...grpc.CallOption) (*CreateAuthTokenByUserIdResponse, error) {
	out := new(CreateAuthTokenByUserIdResponse)
	err := c.cc.Invoke(ctx, Org_CreateAuthTokenByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListAuthTokens(ctx context.Context, in *ListAuthTokensRequest, opts ...grpc.CallOption) (*ListAuthTokensResponse, error) {
	out := new(ListAuthTokensResponse)
	err := c.cc.Invoke(ctx, Org_ListAuthTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListAuthTokensByUserId(ctx context.Context, in *ListAuthTokensByUserIdRequest, opts ...grpc.CallOption) (*ListAuthTokensByUserIdResponse, error) {
	out := new(ListAuthTokensByUserIdResponse)
	err := c.cc.Invoke(ctx, Org_ListAuthTokensByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SetAuthTokenExpiration(ctx context.Context, in *SetAuthTokenExpirationRequest, opts ...grpc.CallOption) (*SetAuthTokenExpirationResponse, error) {
	out := new(SetAuthTokenExpirationResponse)
	err := c.cc.Invoke(ctx, Org_SetAuthTokenExpiration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SetAuthTokenExpirationByUserId(ctx context.Context, in *SetAuthTokenExpirationByUserIdRequest, opts ...grpc.CallOption) (*SetAuthTokenExpirationByUserIdResponse, error) {
	out := new(SetAuthTokenExpirationByUserIdResponse)
	err := c.cc.Invoke(ctx, Org_SetAuthTokenExpirationByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteAuthToken(ctx context.Context, in *DeleteAuthTokenRequest, opts ...grpc.CallOption) (*DeleteAuthTokenResponse, error) {
	out := new(DeleteAuthTokenResponse)
	err := c.cc.Invoke(ctx, Org_DeleteAuthToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteAuthTokenByUserId(ctx context.Context, in *DeleteAuthTokenByUserIdRequest, opts ...grpc.CallOption) (*DeleteAuthTokenByUserIdResponse, error) {
	out := new(DeleteAuthTokenByUserIdResponse)
	err := c.cc.Invoke(ctx, Org_DeleteAuthTokenByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetHuntGroupSettings(ctx context.Context, in *GetHuntGroupSettingsRequest, opts ...grpc.CallOption) (*GetHuntGroupSettingsResponse, error) {
	out := new(GetHuntGroupSettingsResponse)
	err := c.cc.Invoke(ctx, Org_GetHuntGroupSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateHuntGroupSettings(ctx context.Context, in *UpdateHuntGroupSettingsRequest, opts ...grpc.CallOption) (*UpdateHuntGroupSettingsResponse, error) {
	out := new(UpdateHuntGroupSettingsResponse)
	err := c.cc.Invoke(ctx, Org_UpdateHuntGroupSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateHuntGroup(ctx context.Context, in *CreateHuntGroupRequest, opts ...grpc.CallOption) (*CreateHuntGroupResponse, error) {
	out := new(CreateHuntGroupResponse)
	err := c.cc.Invoke(ctx, Org_CreateHuntGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateHuntGroupGeneralDetails(ctx context.Context, in *UpdateHuntGroupGeneralDetailsRequest, opts ...grpc.CallOption) (*UpdateHuntGroupGeneralDetailsResponse, error) {
	out := new(UpdateHuntGroupGeneralDetailsResponse)
	err := c.cc.Invoke(ctx, Org_UpdateHuntGroupGeneralDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteHuntGroup(ctx context.Context, in *DeleteHuntGroupRequest, opts ...grpc.CallOption) (*DeleteHuntGroupResponse, error) {
	out := new(DeleteHuntGroupResponse)
	err := c.cc.Invoke(ctx, Org_DeleteHuntGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetHuntGroupDetails(ctx context.Context, in *GetHuntGroupDetailsRequest, opts ...grpc.CallOption) (*GetHuntGroupDetailsResponse, error) {
	out := new(GetHuntGroupDetailsResponse)
	err := c.cc.Invoke(ctx, Org_GetHuntGroupDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListCallerIdBuckets(ctx context.Context, in *ListCallerIdBucketsRequest, opts ...grpc.CallOption) (*ListCallerIdBucketsResponse, error) {
	out := new(ListCallerIdBucketsResponse)
	err := c.cc.Invoke(ctx, Org_ListCallerIdBuckets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetDataDipTemplate(ctx context.Context, in *GetDataDipTemplateRequest, opts ...grpc.CallOption) (*GetDataDipTemplateResponse, error) {
	out := new(GetDataDipTemplateResponse)
	err := c.cc.Invoke(ctx, Org_GetDataDipTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListDataDipTemplates(ctx context.Context, in *ListDataDipTemplatesRequest, opts ...grpc.CallOption) (*ListDataDipTemplatesResponse, error) {
	out := new(ListDataDipTemplatesResponse)
	err := c.cc.Invoke(ctx, Org_ListDataDipTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateDataDipTemplate(ctx context.Context, in *CreateDataDipTemplateRequest, opts ...grpc.CallOption) (*CreateDataDipTemplateResponse, error) {
	out := new(CreateDataDipTemplateResponse)
	err := c.cc.Invoke(ctx, Org_CreateDataDipTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateDataDipTemplate(ctx context.Context, in *UpdateDataDipTemplateRequest, opts ...grpc.CallOption) (*UpdateDataDipTemplateResponse, error) {
	out := new(UpdateDataDipTemplateResponse)
	err := c.cc.Invoke(ctx, Org_UpdateDataDipTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteDataDipTemplate(ctx context.Context, in *DeleteDataDipTemplateRequest, opts ...grpc.CallOption) (*DeleteDataDipTemplateResponse, error) {
	out := new(DeleteDataDipTemplateResponse)
	err := c.cc.Invoke(ctx, Org_DeleteDataDipTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CopyDataDipTemplate(ctx context.Context, in *CopyDataDipTemplateRequest, opts ...grpc.CallOption) (*CopyDataDipTemplateResponse, error) {
	out := new(CopyDataDipTemplateResponse)
	err := c.cc.Invoke(ctx, Org_CopyDataDipTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CopyDataDipTemplateToOrganization(ctx context.Context, in *CopyDataDipTemplateToOrganizationRequest, opts ...grpc.CallOption) (*CopyDataDipTemplateToOrganizationResponse, error) {
	out := new(CopyDataDipTemplateToOrganizationResponse)
	err := c.cc.Invoke(ctx, Org_CopyDataDipTemplateToOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListBroadcastTemplateGeneralDetails(ctx context.Context, in *ListBroadcastTemplateGeneralDetailsRequest, opts ...grpc.CallOption) (*ListBroadcastTemplateGeneralDetailsResponse, error) {
	out := new(ListBroadcastTemplateGeneralDetailsResponse)
	err := c.cc.Invoke(ctx, Org_ListBroadcastTemplateGeneralDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListAgentResponseAutoRules(ctx context.Context, in *ListAgentResponseAutoRulesRequest, opts ...grpc.CallOption) (*ListAgentResponseAutoRulesResponse, error) {
	out := new(ListAgentResponseAutoRulesResponse)
	err := c.cc.Invoke(ctx, Org_ListAgentResponseAutoRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateAgentResponseAutoRules(ctx context.Context, in *CreateAgentResponseAutoRulesRequest, opts ...grpc.CallOption) (*CreateAgentResponseAutoRulesResponse, error) {
	out := new(CreateAgentResponseAutoRulesResponse)
	err := c.cc.Invoke(ctx, Org_CreateAgentResponseAutoRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAgentResponseAutoRules(ctx context.Context, in *UpdateAgentResponseAutoRulesRequest, opts ...grpc.CallOption) (*UpdateAgentResponseAutoRulesResponse, error) {
	out := new(UpdateAgentResponseAutoRulesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAgentResponseAutoRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteAgentResponseAutoRules(ctx context.Context, in *DeleteAgentResponseAutoRulesRequest, opts ...grpc.CallOption) (*DeleteAgentResponseAutoRulesResponse, error) {
	out := new(DeleteAgentResponseAutoRulesResponse)
	err := c.cc.Invoke(ctx, Org_DeleteAgentResponseAutoRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListHuntGroupWebLinks(ctx context.Context, in *ListHuntGroupWebLinksRequest, opts ...grpc.CallOption) (*ListHuntGroupWebLinksResponse, error) {
	out := new(ListHuntGroupWebLinksResponse)
	err := c.cc.Invoke(ctx, Org_ListHuntGroupWebLinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CopyHuntGroupWebLink(ctx context.Context, in *CopyHuntGroupWebLinkRequest, opts ...grpc.CallOption) (*CopyHuntGroupWebLinkResponse, error) {
	out := new(CopyHuntGroupWebLinkResponse)
	err := c.cc.Invoke(ctx, Org_CopyHuntGroupWebLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateHuntGroupWebLinks(ctx context.Context, in *UpdateHuntGroupWebLinksRequest, opts ...grpc.CallOption) (*UpdateHuntGroupWebLinksResponse, error) {
	out := new(UpdateHuntGroupWebLinksResponse)
	err := c.cc.Invoke(ctx, Org_UpdateHuntGroupWebLinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListHuntGroupIntegrationLinks(ctx context.Context, in *ListHuntGroupIntegrationLinksRequest, opts ...grpc.CallOption) (*ListHuntGroupIntegrationLinksResponse, error) {
	out := new(ListHuntGroupIntegrationLinksResponse)
	err := c.cc.Invoke(ctx, Org_ListHuntGroupIntegrationLinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CopyHuntGroupIntegrationLink(ctx context.Context, in *CopyHuntGroupIntegrationLinkRequest, opts ...grpc.CallOption) (*CopyHuntGroupIntegrationLinkResponse, error) {
	out := new(CopyHuntGroupIntegrationLinkResponse)
	err := c.cc.Invoke(ctx, Org_CopyHuntGroupIntegrationLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateHuntGroupIntegrationLinks(ctx context.Context, in *UpdateHuntGroupIntegrationLinksRequest, opts ...grpc.CallOption) (*UpdateHuntGroupIntegrationLinksResponse, error) {
	out := new(UpdateHuntGroupIntegrationLinksResponse)
	err := c.cc.Invoke(ctx, Org_UpdateHuntGroupIntegrationLinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetHuntGroupClientInfoDisplayTemplate(ctx context.Context, in *GetHuntGroupClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*GetHuntGroupClientInfoDisplayTemplateResponse, error) {
	out := new(GetHuntGroupClientInfoDisplayTemplateResponse)
	err := c.cc.Invoke(ctx, Org_GetHuntGroupClientInfoDisplayTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateHuntGroupClientInfoDisplayTemplate(ctx context.Context, in *CreateHuntGroupClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*CreateHuntGroupClientInfoDisplayTemplateResponse, error) {
	out := new(CreateHuntGroupClientInfoDisplayTemplateResponse)
	err := c.cc.Invoke(ctx, Org_CreateHuntGroupClientInfoDisplayTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateHuntGroupClientInfoDisplayTemplate(ctx context.Context, in *UpdateHuntGroupClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*UpdateHuntGroupClientInfoDisplayTemplateResponse, error) {
	out := new(UpdateHuntGroupClientInfoDisplayTemplateResponse)
	err := c.cc.Invoke(ctx, Org_UpdateHuntGroupClientInfoDisplayTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteHuntGroupClientInfoDisplayTemplate(ctx context.Context, in *DeleteHuntGroupClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*DeleteHuntGroupClientInfoDisplayTemplateResponse, error) {
	out := new(DeleteHuntGroupClientInfoDisplayTemplateResponse)
	err := c.cc.Invoke(ctx, Org_DeleteHuntGroupClientInfoDisplayTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CopyHuntGroupClientInfoDisplayTemplate(ctx context.Context, in *CopyHuntGroupClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*CopyHuntGroupClientInfoDisplayTemplateResponse, error) {
	out := new(CopyHuntGroupClientInfoDisplayTemplateResponse)
	err := c.cc.Invoke(ctx, Org_CopyHuntGroupClientInfoDisplayTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateCampaignClientInfoDisplayTemplate(ctx context.Context, in *CreateCampaignClientInfoDisplayTemplateRequest, opts ...grpc.CallOption) (*CreateCampaignClientInfoDisplayTemplateResponse, error) {
	out := new(CreateCampaignClientInfoDisplayTemplateResponse)
	err := c.cc.Invoke(ctx, Org_CreateCampaignClientInfoDisplayTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListHuntGroupsWithClientInfoTemplateData(ctx context.Context, in *ListHuntGroupsWithClientInfoTemplateDataRequest, opts ...grpc.CallOption) (*ListHuntGroupsWithClientInfoTemplateDataResponse, error) {
	out := new(ListHuntGroupsWithClientInfoTemplateDataResponse)
	err := c.cc.Invoke(ctx, Org_ListHuntGroupsWithClientInfoTemplateData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListAgentTriggers(ctx context.Context, in *ListAgentTriggersRequest, opts ...grpc.CallOption) (*ListAgentTriggersResponse, error) {
	out := new(ListAgentTriggersResponse)
	err := c.cc.Invoke(ctx, Org_ListAgentTriggers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CopyAgentTrigger(ctx context.Context, in *CopyAgentTriggerRequest, opts ...grpc.CallOption) (*CopyAgentTriggerResponse, error) {
	out := new(CopyAgentTriggerResponse)
	err := c.cc.Invoke(ctx, Org_CopyAgentTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateAgentTriggers(ctx context.Context, in *UpdateAgentTriggersRequest, opts ...grpc.CallOption) (*UpdateAgentTriggersResponse, error) {
	out := new(UpdateAgentTriggersResponse)
	err := c.cc.Invoke(ctx, Org_UpdateAgentTriggers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *orgClient) ListHuntGroupScripts(ctx context.Context, in *ListHuntGroupScriptsRequest, opts ...grpc.CallOption) (*ListHuntGroupScriptsResponse, error) {
	out := new(ListHuntGroupScriptsResponse)
	err := c.cc.Invoke(ctx, Org_ListHuntGroupScripts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListOrgHuntGroupScripts(ctx context.Context, in *ListHuntGroupScriptsRequest, opts ...grpc.CallOption) (Org_ListOrgHuntGroupScriptsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Org_ServiceDesc.Streams[9], Org_ListOrgHuntGroupScripts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orgListOrgHuntGroupScriptsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Org_ListOrgHuntGroupScriptsClient interface {
	Recv() (*ListHuntGroupScriptsResponse, error)
	grpc.ClientStream
}

type orgListOrgHuntGroupScriptsClient struct {
	grpc.ClientStream
}

func (x *orgListOrgHuntGroupScriptsClient) Recv() (*ListHuntGroupScriptsResponse, error) {
	m := new(ListHuntGroupScriptsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orgClient) GetHuntGroupScript(ctx context.Context, in *GetHuntGroupScriptRequest, opts ...grpc.CallOption) (*GetHuntGroupScriptResponse, error) {
	out := new(GetHuntGroupScriptResponse)
	err := c.cc.Invoke(ctx, Org_GetHuntGroupScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateHuntGroupScript(ctx context.Context, in *CreateHuntGroupScriptRequest, opts ...grpc.CallOption) (*CreateHuntGroupScriptResponse, error) {
	out := new(CreateHuntGroupScriptResponse)
	err := c.cc.Invoke(ctx, Org_CreateHuntGroupScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateHuntGroupScript(ctx context.Context, in *UpdateHuntGroupScriptRequest, opts ...grpc.CallOption) (*UpdateHuntGroupScriptResponse, error) {
	out := new(UpdateHuntGroupScriptResponse)
	err := c.cc.Invoke(ctx, Org_UpdateHuntGroupScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteHuntGroupScript(ctx context.Context, in *DeleteHuntGroupScriptRequest, opts ...grpc.CallOption) (*DeleteHuntGroupScriptResponse, error) {
	out := new(DeleteHuntGroupScriptResponse)
	err := c.cc.Invoke(ctx, Org_DeleteHuntGroupScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AssignScriptToHuntGroups(ctx context.Context, in *AssignScriptToHuntGroupsRequest, opts ...grpc.CallOption) (*AssignScriptToHuntGroupsResponse, error) {
	out := new(AssignScriptToHuntGroupsResponse)
	err := c.cc.Invoke(ctx, Org_AssignScriptToHuntGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UnassignScriptFromHuntGroups(ctx context.Context, in *UnassignScriptFromHuntGroupsRequest, opts ...grpc.CallOption) (*UnassignScriptFromHuntGroupsResponse, error) {
	out := new(UnassignScriptFromHuntGroupsResponse)
	err := c.cc.Invoke(ctx, Org_UnassignScriptFromHuntGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateTrust(ctx context.Context, in *CreateTrustRequest, opts ...grpc.CallOption) (*CreateTrustResponse, error) {
	out := new(CreateTrustResponse)
	err := c.cc.Invoke(ctx, Org_CreateTrust_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AcceptTrust(ctx context.Context, in *AcceptTrustRequest, opts ...grpc.CallOption) (*AcceptTrustResponse, error) {
	out := new(AcceptTrustResponse)
	err := c.cc.Invoke(ctx, Org_AcceptTrust_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RejectTrust(ctx context.Context, in *RejectTrustRequest, opts ...grpc.CallOption) (*RejectTrustResponse, error) {
	out := new(RejectTrustResponse)
	err := c.cc.Invoke(ctx, Org_RejectTrust_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetTrust(ctx context.Context, in *GetTrustRequest, opts ...grpc.CallOption) (*GetTrustResponse, error) {
	out := new(GetTrustResponse)
	err := c.cc.Invoke(ctx, Org_GetTrust_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListIncomingTrusts(ctx context.Context, in *ListIncomingTrustsRequest, opts ...grpc.CallOption) (*ListIncomingTrustsResponse, error) {
	out := new(ListIncomingTrustsResponse)
	err := c.cc.Invoke(ctx, Org_ListIncomingTrusts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListGivenTrusts(ctx context.Context, in *ListGivenTrustsRequest, opts ...grpc.CallOption) (*ListGivenTrustsResponse, error) {
	out := new(ListGivenTrustsResponse)
	err := c.cc.Invoke(ctx, Org_ListGivenTrusts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListAssignableTrusts(ctx context.Context, in *ListAssignableTrustsRequest, opts ...grpc.CallOption) (*ListAssignableTrustsResponse, error) {
	out := new(ListAssignableTrustsResponse)
	err := c.cc.Invoke(ctx, Org_ListAssignableTrusts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteTrust(ctx context.Context, in *DeleteTrustRequest, opts ...grpc.CallOption) (*DeleteTrustResponse, error) {
	out := new(DeleteTrustResponse)
	err := c.cc.Invoke(ctx, Org_DeleteTrust_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AssignTrust(ctx context.Context, in *AssignTrustRequest, opts ...grpc.CallOption) (*AssignTrustResponse, error) {
	out := new(AssignTrustResponse)
	err := c.cc.Invoke(ctx, Org_AssignTrust_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UnassignTrust(ctx context.Context, in *UnassignTrustRequest, opts ...grpc.CallOption) (*UnassignTrustResponse, error) {
	out := new(UnassignTrustResponse)
	err := c.cc.Invoke(ctx, Org_UnassignTrust_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateLabel(ctx context.Context, in *CreateLabelRequest, opts ...grpc.CallOption) (*CreateLabelResponse, error) {
	out := new(CreateLabelResponse)
	err := c.cc.Invoke(ctx, Org_CreateLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteLabel(ctx context.Context, in *DeleteLabelRequest, opts ...grpc.CallOption) (*DeleteLabelResponse, error) {
	out := new(DeleteLabelResponse)
	err := c.cc.Invoke(ctx, Org_DeleteLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListLabels(ctx context.Context, in *ListLabelsRequest, opts ...grpc.CallOption) (*ListLabelsResponse, error) {
	out := new(ListLabelsResponse)
	err := c.cc.Invoke(ctx, Org_ListLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetLabel(ctx context.Context, in *GetLabelRequest, opts ...grpc.CallOption) (*GetLabelResponse, error) {
	out := new(GetLabelResponse)
	err := c.cc.Invoke(ctx, Org_GetLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateLabel(ctx context.Context, in *UpdateLabelRequest, opts ...grpc.CallOption) (*UpdateLabelResponse, error) {
	out := new(UpdateLabelResponse)
	err := c.cc.Invoke(ctx, Org_UpdateLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AssignLabel(ctx context.Context, in *AssignLabelRequest, opts ...grpc.CallOption) (*AssignLabelResponse, error) {
	out := new(AssignLabelResponse)
	err := c.cc.Invoke(ctx, Org_AssignLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UnassignLabel(ctx context.Context, in *UnassignLabelRequest, opts ...grpc.CallOption) (*UnassignLabelResponse, error) {
	out := new(UnassignLabelResponse)
	err := c.cc.Invoke(ctx, Org_UnassignLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAssignmentCounts(ctx context.Context, in *GetAssignmentCountsRequest, opts ...grpc.CallOption) (*GetAssignmentCountsResponse, error) {
	out := new(GetAssignmentCountsResponse)
	err := c.cc.Invoke(ctx, Org_GetAssignmentCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAssignableLabels(ctx context.Context, in *GetAssignableLabelsRequest, opts ...grpc.CallOption) (*GetAssignableLabelsResponse, error) {
	out := new(GetAssignableLabelsResponse)
	err := c.cc.Invoke(ctx, Org_GetAssignableLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error) {
	out := new(GetPermissionsResponse)
	err := c.cc.Invoke(ctx, Org_GetPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error) {
	out := new(GetUserPermissionsResponse)
	err := c.cc.Invoke(ctx, Org_GetUserPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreatePermissionGroup(ctx context.Context, in *CreatePermissionGroupRequest, opts ...grpc.CallOption) (*CreatePermissionGroupResponse, error) {
	out := new(CreatePermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_CreatePermissionGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdatePermissionGroup(ctx context.Context, in *UpdatePermissionGroupRequest, opts ...grpc.CallOption) (*UpdatePermissionGroupResponse, error) {
	out := new(UpdatePermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_UpdatePermissionGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeletePermissionGroup(ctx context.Context, in *DeletePermissionGroupRequest, opts ...grpc.CallOption) (*DeletePermissionGroupResponse, error) {
	out := new(DeletePermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_DeletePermissionGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListPermissionGroups(ctx context.Context, in *ListPermissionGroupsRequest, opts ...grpc.CallOption) (*ListPermissionGroupsResponse, error) {
	out := new(ListPermissionGroupsResponse)
	err := c.cc.Invoke(ctx, Org_ListPermissionGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListPermissionGroupsByOrgId(ctx context.Context, in *ListPermissionGroupsByOrgIdRequest, opts ...grpc.CallOption) (*ListPermissionGroupsByOrgIdResponse, error) {
	out := new(ListPermissionGroupsByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_ListPermissionGroupsByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AssignUsersPermissionGroup(ctx context.Context, in *AssignUsersPermissionGroupRequest, opts ...grpc.CallOption) (*AssignUsersPermissionGroupResponse, error) {
	out := new(AssignUsersPermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_AssignUsersPermissionGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RevokeUsersPermissionGroup(ctx context.Context, in *RevokeUsersPermissionGroupRequest, opts ...grpc.CallOption) (*RevokeUsersPermissionGroupResponse, error) {
	out := new(RevokeUsersPermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_RevokeUsersPermissionGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AssignLabels(ctx context.Context, in *AssignLabelsRequest, opts ...grpc.CallOption) (*AssignLabelsResponse, error) {
	out := new(AssignLabelsResponse)
	err := c.cc.Invoke(ctx, Org_AssignLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RevokeLabels(ctx context.Context, in *RevokeLabelsRequest, opts ...grpc.CallOption) (*RevokeLabelsResponse, error) {
	out := new(RevokeLabelsResponse)
	err := c.cc.Invoke(ctx, Org_RevokeLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AssignAccountOwnerPermissionToUser(ctx context.Context, in *AssignAccountOwnerPermissionToUserRequest, opts ...grpc.CallOption) (*AssignAccountOwnerPermissionToUserResponse, error) {
	out := new(AssignAccountOwnerPermissionToUserResponse)
	err := c.cc.Invoke(ctx, Org_AssignAccountOwnerPermissionToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RevokeAccountOwnerPermissionFromUser(ctx context.Context, in *RevokeAccountOwnerPermissionFromUserRequest, opts ...grpc.CallOption) (*RevokeAccountOwnerPermissionFromUserResponse, error) {
	out := new(RevokeAccountOwnerPermissionFromUserResponse)
	err := c.cc.Invoke(ctx, Org_RevokeAccountOwnerPermissionFromUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) InitDefaultPermissionGroups(ctx context.Context, in *InitDefaultPermissionGroupsRequest, opts ...grpc.CallOption) (*InitDefaultPermissionGroupsResponse, error) {
	out := new(InitDefaultPermissionGroupsResponse)
	err := c.cc.Invoke(ctx, Org_InitDefaultPermissionGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetAccountOwnerGroup(ctx context.Context, in *GetAccountOwnerGroupRequest, opts ...grpc.CallOption) (*GetAccountOwnerGroupResponse, error) {
	out := new(GetAccountOwnerGroupResponse)
	err := c.cc.Invoke(ctx, Org_GetAccountOwnerGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetLicenses(ctx context.Context, in *GetLicensesRequest, opts ...grpc.CallOption) (*GetLicensesResponse, error) {
	out := new(GetLicensesResponse)
	err := c.cc.Invoke(ctx, Org_GetLicenses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetOrgLicenses(ctx context.Context, in *GetOrgLicensesRequest, opts ...grpc.CallOption) (*GetOrgLicensesResponse, error) {
	out := new(GetOrgLicensesResponse)
	err := c.cc.Invoke(ctx, Org_GetOrgLicenses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateLicenses(ctx context.Context, in *UpdateLicensesRequest, opts ...grpc.CallOption) (*UpdateLicensesResponse, error) {
	out := new(UpdateLicensesResponse)
	err := c.cc.Invoke(ctx, Org_UpdateLicenses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RemovePermissionFromAllPermissionGroups(ctx context.Context, in *RemovePermissionFromAllPermissionGroupsRequest, opts ...grpc.CallOption) (*RemovePermissionFromAllPermissionGroupsResponse, error) {
	out := new(RemovePermissionFromAllPermissionGroupsResponse)
	err := c.cc.Invoke(ctx, Org_RemovePermissionFromAllPermissionGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListP3PermissionGroups(ctx context.Context, in *ListP3PermissionGroupsRequest, opts ...grpc.CallOption) (*ListP3PermissionGroupsResponse, error) {
	out := new(ListP3PermissionGroupsResponse)
	err := c.cc.Invoke(ctx, Org_ListP3PermissionGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListP3PermissionGroupsByOrgId(ctx context.Context, in *ListP3PermissionGroupsRequest, opts ...grpc.CallOption) (*ListP3PermissionGroupsResponse, error) {
	out := new(ListP3PermissionGroupsResponse)
	err := c.cc.Invoke(ctx, Org_ListP3PermissionGroupsByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateP3PermissionGroup(ctx context.Context, in *CreateP3PermissionGroupRequest, opts ...grpc.CallOption) (*CreateP3PermissionGroupResponse, error) {
	out := new(CreateP3PermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_CreateP3PermissionGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateP3PermissionGroup(ctx context.Context, in *UpdateP3PermissionGroupRequest, opts ...grpc.CallOption) (*UpdateP3PermissionGroupResponse, error) {
	out := new(UpdateP3PermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_UpdateP3PermissionGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateP3PermissionGroupByOrgId(ctx context.Context, in *UpdateP3PermissionGroupByOrgIdRequest, opts ...grpc.CallOption) (*UpdateP3PermissionGroupByOrgIdResponse, error) {
	out := new(UpdateP3PermissionGroupByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_UpdateP3PermissionGroupByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteP3PermissionGroup(ctx context.Context, in *DeleteP3PermissionGroupRequest, opts ...grpc.CallOption) (*DeleteP3PermissionGroupResponse, error) {
	out := new(DeleteP3PermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_DeleteP3PermissionGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AssignUsersP3PermissionGroup(ctx context.Context, in *AssignUsersP3PermissionGroupRequest, opts ...grpc.CallOption) (*AssignUsersP3PermissionGroupResponse, error) {
	out := new(AssignUsersP3PermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_AssignUsersP3PermissionGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RevokeUsersP3PermissionGroup(ctx context.Context, in *RevokeUsersP3PermissionGroupRequest, opts ...grpc.CallOption) (*RevokeUsersP3PermissionGroupResponse, error) {
	out := new(RevokeUsersP3PermissionGroupResponse)
	err := c.cc.Invoke(ctx, Org_RevokeUsersP3PermissionGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RefreshMfaLockout(ctx context.Context, in *RefreshMfaLockoutRequest, opts ...grpc.CallOption) (*RefreshMfaLockoutResponse, error) {
	out := new(RefreshMfaLockoutResponse)
	err := c.cc.Invoke(ctx, Org_RefreshMfaLockout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RefreshMfaLockoutByOrgId(ctx context.Context, in *RefreshMfaLockoutByOrgIdRequest, opts ...grpc.CallOption) (*RefreshMfaLockoutByOrgIdResponse, error) {
	out := new(RefreshMfaLockoutByOrgIdResponse)
	err := c.cc.Invoke(ctx, Org_RefreshMfaLockoutByOrgId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SetMfaType(ctx context.Context, in *SetMfaTypeRequest, opts ...grpc.CallOption) (*SetMfaTypeResponse, error) {
	out := new(SetMfaTypeResponse)
	err := c.cc.Invoke(ctx, Org_SetMfaType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) SetMyMfaType(ctx context.Context, in *SetMyMfaTypeRequest, opts ...grpc.CallOption) (*SetMyMfaTypeResponse, error) {
	out := new(SetMyMfaTypeResponse)
	err := c.cc.Invoke(ctx, Org_SetMyMfaType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) EnableUserMfa(ctx context.Context, in *EnableUserMfaRequest, opts ...grpc.CallOption) (*EnableUserMfaResponse, error) {
	out := new(EnableUserMfaResponse)
	err := c.cc.Invoke(ctx, Org_EnableUserMfa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) EnableMyUserMfa(ctx context.Context, in *EnableMyUserMfaRequest, opts ...grpc.CallOption) (*EnableMyUserMfaResponse, error) {
	out := new(EnableMyUserMfaResponse)
	err := c.cc.Invoke(ctx, Org_EnableMyUserMfa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetUserMfaInfo(ctx context.Context, in *GetUserMfaInfoRequest, opts ...grpc.CallOption) (*GetUserMfaInfoResponse, error) {
	out := new(GetUserMfaInfoResponse)
	err := c.cc.Invoke(ctx, Org_GetUserMfaInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetMyUserMfaInfo(ctx context.Context, in *GetMyUserMfaInfoRequest, opts ...grpc.CallOption) (*GetMyUserMfaInfoResponse, error) {
	out := new(GetMyUserMfaInfoResponse)
	err := c.cc.Invoke(ctx, Org_GetMyUserMfaInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetMyAllowedMfaMethods(ctx context.Context, in *GetMyAllowedMfaMethodsRequest, opts ...grpc.CallOption) (*GetMyAllowedMfaMethodsResponse, error) {
	out := new(GetMyAllowedMfaMethodsResponse)
	err := c.cc.Invoke(ctx, Org_GetMyAllowedMfaMethods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *orgClient) CreateBusinessHours(ctx context.Context, in *CreateBusinessHoursRequest, opts ...grpc.CallOption) (*CreateBusinessHoursResponse, error) {
	out := new(CreateBusinessHoursResponse)
	err := c.cc.Invoke(ctx, Org_CreateBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *orgClient) UpdateBusinessHours(ctx context.Context, in *UpdateBusinessHoursRequest, opts ...grpc.CallOption) (*UpdateBusinessHoursResponse, error) {
	out := new(UpdateBusinessHoursResponse)
	err := c.cc.Invoke(ctx, Org_UpdateBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) AddGroupedUserIPRestrictions(ctx context.Context, in *AddGroupedUserIPRestrictionsRequest, opts ...grpc.CallOption) (*AddGroupedUserIPRestrictionsResponse, error) {
	out := new(AddGroupedUserIPRestrictionsResponse)
	err := c.cc.Invoke(ctx, Org_AddGroupedUserIPRestrictions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) RemoveGroupedUserIPRestrictions(ctx context.Context, in *RemoveGroupedUserIPRestrictionsRequest, opts ...grpc.CallOption) (*RemoveGroupedUserIPRestrictionsResponse, error) {
	out := new(RemoveGroupedUserIPRestrictionsResponse)
	err := c.cc.Invoke(ctx, Org_RemoveGroupedUserIPRestrictions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListUsersAllowedIps(ctx context.Context, in *ListUsersAllowedIpsRequest, opts ...grpc.CallOption) (*ListUsersAllowedIpsResponse, error) {
	out := new(ListUsersAllowedIpsResponse)
	err := c.cc.Invoke(ctx, Org_ListUsersAllowedIps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) ListResponseEvaluators(ctx context.Context, in *ListResponseEvaluatorsRequest, opts ...grpc.CallOption) (*ListResponseEvaluatorsResponse, error) {
	out := new(ListResponseEvaluatorsResponse)
	err := c.cc.Invoke(ctx, Org_ListResponseEvaluators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) GetResponseEvaluator(ctx context.Context, in *GetResponseEvaluatorRequest, opts ...grpc.CallOption) (*GetResponseEvaluatorResponse, error) {
	out := new(GetResponseEvaluatorResponse)
	err := c.cc.Invoke(ctx, Org_GetResponseEvaluator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) CreateResponseEvaluator(ctx context.Context, in *CreateResponseEvaluatorRequest, opts ...grpc.CallOption) (*CreateResponseEvaluatorResponse, error) {
	out := new(CreateResponseEvaluatorResponse)
	err := c.cc.Invoke(ctx, Org_CreateResponseEvaluator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) UpdateResponseEvaluator(ctx context.Context, in *UpdateResponseEvaluatorRequest, opts ...grpc.CallOption) (*UpdateResponseEvaluatorResponse, error) {
	out := new(UpdateResponseEvaluatorResponse)
	err := c.cc.Invoke(ctx, Org_UpdateResponseEvaluator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) DeleteResponseEvaluator(ctx context.Context, in *DeleteResponseEvaluatorRequest, opts ...grpc.CallOption) (*DeleteResponseEvaluatorResponse, error) {
	out := new(DeleteResponseEvaluatorResponse)
	err := c.cc.Invoke(ctx, Org_DeleteResponseEvaluator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgServer is the server API for Org service.
// All implementations must embed UnimplementedOrgServer
// for forward compatibility
type OrgServer interface {
	// CreateOrganization creates a new organization entity and enables it for the
	// region it is getting created in.
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// GetOrganization returns a single organization.
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	// GetOrganizationById returns a single organization by a given orgId.
	GetOrganizationById(context.Context, *GetOrganizationByIdRequest) (*GetOrganizationByIdResponse, error)
	// UpdateOrganization updates the mutable fields on the Organization entity
	// using the provided field mask.
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// Archives an organization. An archived organization effectively disappears, but isn't deleted.
	ArchiveOrganization(context.Context, *ArchiveOrganizationRequest) (*ArchiveOrganizationResponse, error)
	// Unarchives an organization. An archived organization effectively disappears, but isn't deleted.
	UnArchiveOrganization(context.Context, *UnArchiveOrganizationRequest) (*UnArchiveOrganizationResponse, error)
	// ListAllOrganizationsGlobally lists all organizations globally (archived and unarchived).
	ListAllOrganizationsGlobally(*ListAllOrganizationsGloballyRequest, Org_ListAllOrganizationsGloballyServer) error
	// ListOrganizationsByRegion lists organizations in the given region (unarchived).
	ListOrganizationsByRegion(*ListOrganizationsByRegionRequest, Org_ListOrganizationsByRegionServer) error
	// ListArchivedOrganizations lists all archived organizations in the current region.
	ListArchivedOrganizations(*ListArchivedOrganizationsRequest, Org_ListArchivedOrganizationsServer) error
	// ConvertOrgToManual converts an organization to manual only by org id.
	ConvertOrgToManual(context.Context, *ConvertOrgToManualRequest) (*ConvertOrgToManualResponse, error)
	// Lists all orgs under the p3 hierarchy
	ListOwnedOrgs(*ListOwnedOrgsRequest, Org_ListOwnedOrgsServer) error
	// GetOrganizationPreferences returns general preferences controlling basic
	// organization related properties.
	GetOrganizationPreferences(context.Context, *GetOrganizationPreferencesRequest) (*GetOrganizationPreferencesResponse, error)
	// UpdateOrganizationPreferences updates general preferences controlling basic
	// organization related properties.
	UpdateOrganizationPreferences(context.Context, *UpdateOrganizationPreferencesRequest) (*UpdateOrganizationPreferencesResponse, error)
	// GetAgentPreferences returns preferences controlling direct agent properties.
	GetAgentPreferences(context.Context, *GetAgentPreferencesRequest) (*GetAgentPreferencesResponse, error)
	// UpdateAgentPreferences updates preferences controlling direct agent
	// properties.
	UpdateAgentPreferences(context.Context, *UpdateAgentPreferencesRequest) (*UpdateAgentPreferencesResponse, error)
	// GetContactPreferences returns preferences for contact lists.
	GetContactPreferences(context.Context, *GetContactPreferencesRequest) (*GetContactPreferencesResponse, error)
	// UpdateContactPreferences updates preferences for contact lists.
	UpdateContactPreferences(context.Context, *UpdateContactPreferencesRequest) (*UpdateContactPreferencesResponse, error)
	// GetAuthenticationPreferences returns preferences for controlling the
	GetAuthenticationPreferences(context.Context, *GetAuthenticationPreferencesRequest) (*GetAuthenticationPreferencesResponse, error)
	// UpdateAuthenticationPreferences updates preferences for controlling the
	UpdateAuthenticationPreferences(context.Context, *UpdateAuthenticationPreferencesRequest) (*UpdateAuthenticationPreferencesResponse, error)
	// GetWebhookPreferences returns preferences for web-hook push URLs.
	GetWebhookPreferences(context.Context, *GetWebhookPreferencesRequest) (*GetWebhookPreferencesResponse, error)
	// UpdateWebhookPreferences updates preferences for web-hook push URLs.
	UpdateWebhookPreferences(context.Context, *UpdateWebhookPreferencesRequest) (*UpdateWebhookPreferencesResponse, error)
	// GetDashboardGeneralPreferences returns preferences for agent dashboard
	// controls.
	GetDashboardGeneralPreferences(context.Context, *GetDashboardGeneralPreferencesRequest) (*GetDashboardGeneralPreferencesResponse, error)
	// UpdateDashboardGeneralPreferences updates preferences for agent dashboard
	// controls.
	UpdateDashboardGeneralPreferences(context.Context, *UpdateDashboardGeneralPreferencesRequest) (*UpdateDashboardGeneralPreferencesResponse, error)
	// GetDashboardQueuePreferences returns preferences for controlling agent queue
	// and hold table settings.
	GetDashboardQueuePreferences(context.Context, *GetDashboardQueuePreferencesRequest) (*GetDashboardQueuePreferencesResponse, error)
	// UpdateDashboardQueuePreferences updates preferences for controlling agent
	// queue and hold table settings.
	UpdateDashboardQueuePreferences(context.Context, *UpdateDashboardQueuePreferencesRequest) (*UpdateDashboardQueuePreferencesResponse, error)
	// GetPhonePreferences returns preferences for phone dial options, call ID,
	// and other call properties.
	GetPhonePreferences(context.Context, *GetPhonePreferencesRequest) (*GetPhonePreferencesResponse, error)
	// UpdatePhonePreferences updates preferences for phone dial options, call ID,
	// and other call properties.
	UpdatePhonePreferences(context.Context, *UpdatePhonePreferencesRequest) (*UpdatePhonePreferencesResponse, error)
	// GetCompliancePreferences returns preferences for natural language compliance
	// campaign settings.
	GetCompliancePreferences(context.Context, *GetCompliancePreferencesRequest) (*GetCompliancePreferencesResponse, error)
	// UpdateCompliancePreferences updates preferences for natural language
	// compliance campaign settings.
	UpdateCompliancePreferences(context.Context, *UpdateCompliancePreferencesRequest) (*UpdateCompliancePreferencesResponse, error)
	// GetBroadcastPreferences returns preferences for editing templates and
	// broadcast scheduling properties.
	GetBroadcastPreferences(context.Context, *GetBroadcastPreferencesRequest) (*GetBroadcastPreferencesResponse, error)
	// UpdateBroadcastPreferences updates preferences for editing templates and
	// broadcast scheduling properties.
	UpdateBroadcastPreferences(context.Context, *UpdateBroadcastPreferencesRequest) (*UpdateBroadcastPreferencesResponse, error)
	// GetSchedulePreferences returns preferences for editing campaign scheduling
	// properties.
	GetSchedulePreferences(context.Context, *GetSchedulePreferencesRequest) (*GetSchedulePreferencesResponse, error)
	// UpdateSchedulePreferences updates preferences for editing campaign
	// scheduling properties.
	UpdateSchedulePreferences(context.Context, *UpdateSchedulePreferencesRequest) (*UpdateSchedulePreferencesResponse, error)
	// GetEmailSmsPreferences returns preferences for email and SMS management.
	GetEmailSmsPreferences(context.Context, *GetEmailSmsPreferencesRequest) (*GetEmailSmsPreferencesResponse, error)
	// UpdateEmailSmsPreferences updates preferences for email and SMS management.
	UpdateEmailSmsPreferences(context.Context, *UpdateEmailSmsPreferencesRequest) (*UpdateEmailSmsPreferencesResponse, error)
	// GetBusinessPreferences returns preferences for business intelligence.
	GetBusinessPreferences(context.Context, *GetBusinessPreferencesRequest) (*GetBusinessPreferencesResponse, error)
	// UpdateBusinessPreferences updates preferences for business intelligence.
	UpdateBusinessPreferences(context.Context, *UpdateBusinessPreferencesRequest) (*UpdateBusinessPreferencesResponse, error)
	// UpdateAdminBusinessPreferences updates preferences for business intelligence.
	UpdateAdminBusinessPreferences(context.Context, *UpdateAdminBusinessPreferencesRequest) (*UpdateAdminBusinessPreferencesResponse, error)
	// GetScorecardsPreferences returns preferences for scorecards.
	GetScorecardsPreferences(context.Context, *GetScorecardsPreferencesRequest) (*GetScorecardsPreferencesResponse, error)
	// UpdateScorecardsPreferences updates preferences for scorecards.
	UpdateScorecardsPreferences(context.Context, *UpdateScorecardsPreferencesRequest) (*UpdateScorecardsPreferencesResponse, error)
	// GetVoiceAnalyticsPreferences returns preferences for voice analytics.
	GetVoiceAnalyticsPreferences(context.Context, *GetVoiceAnalyticsPreferencesRequest) (*GetVoiceAnalyticsPreferencesResponse, error)
	// ListVoiceAnalyticsPreferences lists preferences for voice analytics.
	ListVoiceAnalyticsPreferences(context.Context, *ListVoiceAnalyticsPreferencesRequest) (*ListVoiceAnalyticsPreferencesResponse, error)
	// UpdateVoiceAnalyticsPreferences updates preferences for voice analytics.
	UpdateVoiceAnalyticsPreferences(context.Context, *UpdateVoiceAnalyticsPreferencesRequest) (*UpdateVoiceAnalyticsPreferencesResponse, error)
	// GetEndOfDayPreferences returns preferences for automated report jobs
	GetEndOfDayPreferences(context.Context, *GetEndOfDayPreferencesRequest) (*GetEndOfDayPreferencesResponse, error)
	// UpdateEndOfDayPreferences updates preferences for automated report jobs
	UpdateEndOfDayPreferences(context.Context, *UpdateEndOfDayPreferencesRequest) (*UpdateEndOfDayPreferencesResponse, error)
	// GetReportFilterPreferences returns preferences for filters in reports and
	GetReportFilterPreferences(context.Context, *GetFilterPreferencesRequest) (*GetFilterPreferencesResponse, error)
	// UpdateReportFilterPreferences updates preferences for filters in reports and
	UpdateReportFilterPreferences(context.Context, *UpdateFilterPreferencesRequest) (*UpdateFilterPreferencesResponse, error)
	// GetRecordingPreferences returns preferences for audio recording properties.
	GetRecordingPreferences(context.Context, *GetRecordingPreferencesRequest) (*GetRecordingPreferencesResponse, error)
	// UpdateRecordingPreferences updates preferences for audio recording
	// properties.
	UpdateRecordingPreferences(context.Context, *UpdateRecordingPreferencesRequest) (*UpdateRecordingPreferencesResponse, error)
	// GetAdminClientPreferences returns preferences for essential organization
	// properties only to be used by account managers and customer support.
	GetAdminClientPreferences(context.Context, *GetAdminClientPreferencesRequest) (*GetAdminClientPreferencesResponse, error)
	// UpdateAdminClientPreferences updates preferences for essential organization
	UpdateAdminClientPreferences(context.Context, *UpdateAdminClientPreferencesRequest) (*UpdateAdminClientPreferencesResponse, error)
	// AcceptLinkbackRecordingTerms insert a digital signature acceptance activity
	// log upon client acknowledgement of terms and conditions usage for linkback
	// recorded calls.
	AcceptLinkbackRecordingTerms(context.Context, *AcceptLinkbackRecordingTermsRequest) (*AcceptLinkbackRecordingTermsResponse, error)
	// LinkbackUpdateBroadcastTemplates updates broadcast template options action
	// parameters to reflect the linkback recording usage value.
	LinkbackUpdateBroadcastTemplates(context.Context, *LinkbackUpdateBroadcastTemplatesRequest) (*LinkbackUpdateBroadcastTemplatesResponse, error)
	// RecordEmailUnsubscribeAcknowledgement insert an activity log upon client
	// acknowledgement of responsibility for their own email unsubscribe links.
	RecordEmailUnsubscribeAcknowledgement(context.Context, *RecordEmailUnsubscribeAcknowledgementRequest) (*RecordEmailUnsubscribeAcknowledgementResponse, error)
	// ClearEmailUnsubscribeAcknowledgement insert an activity log upon the client
	// revoking their responsibility for email unsubscribe links.
	ClearEmailUnsubscribeAcknowledgement(context.Context, *ClearEmailUnsubscribeAcknowledgementRequest) (*ClearEmailUnsubscribeAcknowledgementResponse, error)
	// Deprecated: Do not use.
	// ListBusinessHours returns all business hours for an Org.
	ListBusinessHours(context.Context, *ListBusinessHoursRequest) (*ListBusinessHoursResponse, error)
	// Deprecated: Do not use.
	// GetBusinessHours returns the business hours for the ID.
	GetBusinessHours(context.Context, *GetBusinessHoursRequest) (*GetBusinessHoursResponse, error)
	// Deprecated: Do not use.
	// SetBusinessHours initializes a business hours object
	SetBusinessHours(context.Context, *SetBusinessHoursRequest) (*SetBusinessHoursResponse, error)
	// Deprecated: Do not use.
	// AddIntervalToBusinessHours adds a day interval to a business hours object
	AddIntervalToBusinessHours(context.Context, *AddIntervalToBusinessHoursRequest) (*AddIntervalToBusinessHoursResponse, error)
	// Deprecated: Do not use.
	// RemoveIntervalFromBusinessHours removes a day interval from a business hours object
	RemoveIntervalFromBusinessHours(context.Context, *RemoveIntervalFromBusinessHoursRequest) (*RemoveIntervalFromBusinessHoursResponse, error)
	// Deprecated: Do not use.
	// UpdateBusinessHoursInfo updates the general info of a business hours object
	UpdateBusinessHoursInfo(context.Context, *UpdateBusinessHoursInfoRequest) (*UpdateBusinessHoursInfoResponse, error)
	// Deprecated: Do not use.
	// DeleteBusinessHours removes business hours.
	DeleteBusinessHours(context.Context, *DeleteBusinessHoursRequest) (*DeleteBusinessHoursResponse, error)
	// Deprecated: Do not use.
	// EvaluateBusinessHours determines whether or not the current time is within a business hours day interval
	EvaluateBusinessHours(context.Context, *EvaluateBusinessHoursRequest) (*EvaluateBusinessHoursResponse, error)
	// CreateUser creates a new user and enables it for the region it is getting created in.
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// CreateDelegatedUser creates a new delegated user and enables it for the region it is getting created in.
	CreateDelegatedUser(context.Context, *CreateDelegatedUserRequest) (*CreateDelegatedUserResponse, error)
	// GetMyUser returns a single user by UserId or by AgentSid.
	GetMyUser(context.Context, *GetMyUserRequest) (*GetMyUserResponse, error)
	// GetUser returns a single user by UserId or by AgentSid.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// GetUserByOrgId returns a single user by UserId and OrgId
	// Requires Customer Support permission and allows cross Org requests.
	GetUserByOrgId(context.Context, *GetUserByOrgIdRequest) (*GetUserByOrgIdResponse, error)
	// ListAgents returns a list of Agents.
	ListAgents(*ListAgentsRequest, Org_ListAgentsServer) error
	// ListPublicUsers returns a list of users with limited data for most applications.
	ListPublicUsers(*ListPublicUsersRequest, Org_ListPublicUsersServer) error
	// ListUsers returns a list of users.
	ListUsers(*ListUsersRequest, Org_ListUsersServer) error
	// ListUsersByOrgId returns a list of users.
	ListUsersByOrgId(*ListUsersByOrgIdRequest, Org_ListUsersByOrgIdServer) error
	// ListUsersByRegion returns a list of usersByRegion.
	ListUsersByRegion(*ListUsersByRegionRequest, Org_ListUsersByRegionServer) error
	// UpdateMyUser updates a user.
	UpdateMyUser(context.Context, *UpdateMyUserRequest) (*UpdateMyUserResponse, error)
	// UpdateUser updates a user.
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// UpdateUserLabels updates a user's labels to be the passed in set of labels.
	UpdateUserLabels(context.Context, *UpdateUserLabelsRequest) (*UpdateUserLabelsResponse, error)
	// UpdateUserCallerId updates a user.
	UpdateUserCallerId(context.Context, *UpdateUserCallerIdRequest) (*UpdateUserCallerIdResponse, error)
	// UpdateUserDisabled updates whether a user is disabled.
	UpdateUserDisabled(context.Context, *UpdateUserDisabledRequest) (*UpdateUserDisabledResponse, error)
	// UpdateUserDisabledByOrgId updates a user is disabled.
	UpdateUserDisabledByOrgId(context.Context, *UpdateUserDisabledByOrgIdRequest) (*UpdateUserDisabledByOrgIdResponse, error)
	// GetMyUserPasswordResetLink updates a user's password.
	GetMyUserPasswordResetLink(context.Context, *GetMyUserPasswordResetLinkRequest) (*GetMyUserPasswordResetLinkResponse, error)
	// GetUserPasswordResetLink gets a link to update a user's password.
	GetUserPasswordResetLink(context.Context, *GetUserPasswordResetLinkRequest) (*GetUserPasswordResetLinkResponse, error)
	// GetUserPasswordResetLinkByOrgId gets a link to update a user's password.
	GetUserPasswordResetLinkByOrgId(context.Context, *GetUserPasswordResetLinkByOrgIdRequest) (*GetUserPasswordResetLinkByOrgIdResponse, error)
	// CreatePasswordResetLink creates a password reset link for the given user id.
	CreatePasswordResetLink(context.Context, *CreatePasswordResetLinkRequest) (*CreatePasswordResetLinkResponse, error)
	// CreatePasswordResetLinkByOrgId creates a password reset link for the given user id.
	CreatePasswordResetLinkByOrgId(context.Context, *CreatePasswordResetLinkByOrgIdRequest) (*CreatePasswordResetLinkByOrgIdResponse, error)
	// Used to be called GetUserBlocked
	// GetUserLoginInfo gets information about a user's login.
	GetUserLoginInfo(context.Context, *GetUserLoginInfoRequest) (*GetUserLoginInfoResponse, error)
	// GetUserEmailVerified gets whether the user's email is verified.
	GetUserEmailVerified(context.Context, *GetUserEmailVerifiedRequest) (*GetUserEmailVerifiedResponse, error)
	// GetUserEmailVerifiedByOrgId gets whether the user's email is verified.
	GetUserEmailVerifiedByOrgId(context.Context, *GetUserEmailVerifiedByOrgIdRequest) (*GetUserEmailVerifiedByOrgIdResponse, error)
	// ResetMyPassword resets the user's password.
	ResetMyPassword(context.Context, *ResetMyPasswordRequest) (*ResetMyPasswordResponse, error)
	// ResetUserPassword resets the user's password.
	ResetUserPassword(context.Context, *ResetUserPasswordRequest) (*ResetUserPasswordResponse, error)
	// ResetUserPasswordByOrgId resets the user's password.
	ResetUserPasswordByOrgId(context.Context, *ResetUserPasswordByOrgIdRequest) (*ResetUserPasswordByOrgIdResponse, error)
	// SendUserEmailVerification sends a verification email to the user.
	SendUserEmailVerification(context.Context, *SendUserEmailVerificationRequest) (*SendUserEmailVerificationResponse, error)
	// SendUserEmailVerificationByOrgId sends a verification email to the user.
	SendUserEmailVerificationByOrgId(context.Context, *SendUserEmailVerificationByOrgIdRequest) (*SendUserEmailVerificationByOrgIdResponse, error)
	// SendPasswordReset sends a password reset email to the user.
	SendPasswordReset(context.Context, *SendPasswordResetRequest) (*SendPasswordResetResponse, error)
	// SendPasswordResetByOrgId sends a password reset email to the user.
	SendPasswordResetByOrgId(context.Context, *SendPasswordResetByOrgIdRequest) (*SendPasswordResetByOrgIdResponse, error)
	// GetUserSessionData returns data for the front end's session state
	GetUserSessionData(context.Context, *GetUserSessionDataRequest) (*GetUserSessionDataResponse, error)
	// GetAgentProfileGroup returns an agent profile group by id
	GetAgentProfileGroup(context.Context, *GetAgentProfileGroupRequest) (*GetAgentProfileGroupResponse, error)
	// ListAgentProfileGroups returns the agent profile groups associated with the current organization
	ListAgentProfileGroups(context.Context, *ListAgentProfileGroupsRequest) (*ListAgentProfileGroupsResponse, error)
	// UpdateAgentProfileGroup updates an AgentProfileGroup. Can only update if user is in same org as AgentProfileGroup
	UpdateAgentProfileGroup(context.Context, *UpdateAgentProfileGroupRequest) (*UpdateAgentProfileGroupResponse, error)
	// CreateAgentProfileGroup creates an AgentProfileGroup. Can only create if user is in same org as AgentProfileGroup
	CreateAgentProfileGroup(context.Context, *CreateAgentProfileGroupRequest) (*CreateAgentProfileGroupResponse, error)
	// DeleteAgentProfileGroup deletes an AgentProfileGroup. Can only delete if user is in same org as AgentProfileGroup
	DeleteAgentProfileGroup(context.Context, *DeleteAgentProfileGroupRequest) (*DeleteAgentProfileGroupResponse, error)
	// AssignAgentProfileGroups assigns a list of users to an AgentProfileGroup. Can only use if everything is in the same organization.
	AssignAgentProfileGroups(context.Context, *AssignAgentProfileGroupsRequest) (*AssignAgentProfileGroupsResponse, error)
	// Creates a new user subscription.
	AddUserSubscription(context.Context, *AddUserSubscriptionRequest) (*AddUserSubscriptionResponse, error)
	// Creates a new user subscription for a specified user with in requested users org.
	AddUserSubscriptionByUserId(context.Context, *AddUserSubscriptionByUserIdRequest) (*AddUserSubscriptionByUserIdResponse, error)
	// Gets a user subscription.
	GetUserSubscription(context.Context, *GetUserSubscriptionRequest) (*GetUserSubscriptionResponse, error)
	// Gets a user subscription for a specified user with in requested users org.
	GetUserSubscriptionByUserId(context.Context, *GetUserSubscriptionByUserIdRequest) (*GetUserSubscriptionByUserIdResponse, error)
	// Updates a user subscription for the current user
	UpdateUserSubscription(context.Context, *UpdateUserSubscriptionRequest) (*UpdateUserSubscriptionResponse, error)
	// Updates a user subscription for a given user id
	UpdateUserSubscriptionByUserId(context.Context, *UpdateUserSubscriptionByUserIdRequest) (*UpdateUserSubscriptionByUserIdResponse, error)
	// Remove a user subscription.
	RemoveUserSubscription(context.Context, *RemoveUserSubscriptionRequest) (*RemoveUserSubscriptionResponse, error)
	// Remove a user subscription by a given user id
	RemoveUserSubscriptionByUserId(context.Context, *RemoveUserSubscriptionByUserIdRequest) (*RemoveUserSubscriptionByUserIdResponse, error)
	// Lists user subscriptions.
	ListUserSubscriptions(context.Context, *ListUserSubscriptionsRequest) (*ListUserSubscriptionsResponse, error)
	// Lists user subscriptions.
	ListUserSubscriptionsByUserId(context.Context, *ListUserSubscriptionsByUserIdRequest) (*ListUserSubscriptionsByUserIdResponse, error)
	// Lists subscriptions for multiple users in an org.
	ListOrgSubscriptions(context.Context, *ListOrgSubscriptionsRequest) (*ListOrgSubscriptionsResponse, error)
	// AUTH TOKEN
	// CreateAuthToken creates an auth token for the current user.
	CreateAuthToken(context.Context, *CreateAuthTokenRequest) (*CreateAuthTokenResponse, error)
	// CreateAuthTokenByUserId creates an auth token for the given user.
	CreateAuthTokenByUserId(context.Context, *CreateAuthTokenByUserIdRequest) (*CreateAuthTokenByUserIdResponse, error)
	// ListAuthTokens list tokens of current user.
	ListAuthTokens(context.Context, *ListAuthTokensRequest) (*ListAuthTokensResponse, error)
	// ListAuthTokensByUserId list tokens of given user.
	ListAuthTokensByUserId(context.Context, *ListAuthTokensByUserIdRequest) (*ListAuthTokensByUserIdResponse, error)
	// SetAuthTokenExpiration sets expiration back one year for current user.
	SetAuthTokenExpiration(context.Context, *SetAuthTokenExpirationRequest) (*SetAuthTokenExpirationResponse, error)
	// SetAuthTokenExpirationByUserId sets expiration back one year for given user.
	SetAuthTokenExpirationByUserId(context.Context, *SetAuthTokenExpirationByUserIdRequest) (*SetAuthTokenExpirationByUserIdResponse, error)
	// DeleteAuthToken deletes a given auth token for the current user.
	DeleteAuthToken(context.Context, *DeleteAuthTokenRequest) (*DeleteAuthTokenResponse, error)
	// DeleteAuthTokenByUserId deletes a given auth token for the given user.
	DeleteAuthTokenByUserId(context.Context, *DeleteAuthTokenByUserIdRequest) (*DeleteAuthTokenByUserIdResponse, error)
	// GetHuntGroupSettings returns the field masked hunt group settings for the
	// provided hunt group.
	GetHuntGroupSettings(context.Context, *GetHuntGroupSettingsRequest) (*GetHuntGroupSettingsResponse, error)
	// UpdateHuntGroupSettings updates the selected/masked hunt group settings
	// for the given hunt group.
	UpdateHuntGroupSettings(context.Context, *UpdateHuntGroupSettingsRequest) (*UpdateHuntGroupSettingsResponse, error)
	// CreateHuntGroup is the RPC method for creating a hunt group.
	// It will create a hunt group with the given general details.
	CreateHuntGroup(context.Context, *CreateHuntGroupRequest) (*CreateHuntGroupResponse, error)
	// UpdateHuntGroupGeneralDetails is the RPC method for updating the general details of a hunt group.
	UpdateHuntGroupGeneralDetails(context.Context, *UpdateHuntGroupGeneralDetailsRequest) (*UpdateHuntGroupGeneralDetailsResponse, error)
	// DeleteHuntGroup is the RPC method for deleting a hunt group.
	DeleteHuntGroup(context.Context, *DeleteHuntGroupRequest) (*DeleteHuntGroupResponse, error)
	// GetHuntGroupDetails returns the hunt group details for the given hunt group.
	GetHuntGroupDetails(context.Context, *GetHuntGroupDetailsRequest) (*GetHuntGroupDetailsResponse, error)
	// Lists caller id numbers with their associated region codes for the given
	// bucket.
	ListCallerIdBuckets(context.Context, *ListCallerIdBucketsRequest) (*ListCallerIdBucketsResponse, error)
	// Gets a single data dip template.
	GetDataDipTemplate(context.Context, *GetDataDipTemplateRequest) (*GetDataDipTemplateResponse, error)
	// Lists data dip templates, optionally filtered by config type.
	ListDataDipTemplates(context.Context, *ListDataDipTemplatesRequest) (*ListDataDipTemplatesResponse, error)
	// Saves a new data dip template.
	CreateDataDipTemplate(context.Context, *CreateDataDipTemplateRequest) (*CreateDataDipTemplateResponse, error)
	// Updates a data dip template.
	UpdateDataDipTemplate(context.Context, *UpdateDataDipTemplateRequest) (*UpdateDataDipTemplateResponse, error)
	// Deletes a data dip template.
	DeleteDataDipTemplate(context.Context, *DeleteDataDipTemplateRequest) (*DeleteDataDipTemplateResponse, error)
	// Copies a data dip template.
	CopyDataDipTemplate(context.Context, *CopyDataDipTemplateRequest) (*CopyDataDipTemplateResponse, error)
	// Copies a data dip template to a different organization.
	CopyDataDipTemplateToOrganization(context.Context, *CopyDataDipTemplateToOrganizationRequest) (*CopyDataDipTemplateToOrganizationResponse, error)
	// ListBroadcastTemplateGeneralDetails returns a list of broadcast templates for an organization
	ListBroadcastTemplateGeneralDetails(context.Context, *ListBroadcastTemplateGeneralDetailsRequest) (*ListBroadcastTemplateGeneralDetailsResponse, error)
	// Lists Agent Call Response Automatically added compliance rules for an Org.
	ListAgentResponseAutoRules(context.Context, *ListAgentResponseAutoRulesRequest) (*ListAgentResponseAutoRulesResponse, error)
	// Creates a new Agent Call Response Automatically added compliance rule set.
	CreateAgentResponseAutoRules(context.Context, *CreateAgentResponseAutoRulesRequest) (*CreateAgentResponseAutoRulesResponse, error)
	// Updates an existing Agent Call Response Automatically added compliance rule set.
	UpdateAgentResponseAutoRules(context.Context, *UpdateAgentResponseAutoRulesRequest) (*UpdateAgentResponseAutoRulesResponse, error)
	// Deletes an existing Agent Call Response Automatically added compliance rule set.
	DeleteAgentResponseAutoRules(context.Context, *DeleteAgentResponseAutoRulesRequest) (*DeleteAgentResponseAutoRulesResponse, error)
	// Lists all web links for a given hunt group
	ListHuntGroupWebLinks(context.Context, *ListHuntGroupWebLinksRequest) (*ListHuntGroupWebLinksResponse, error)
	// Copies a web link from one hunt group to another
	CopyHuntGroupWebLink(context.Context, *CopyHuntGroupWebLinkRequest) (*CopyHuntGroupWebLinkResponse, error)
	// Updates the list of web links in a hunt group to be the given list
	UpdateHuntGroupWebLinks(context.Context, *UpdateHuntGroupWebLinksRequest) (*UpdateHuntGroupWebLinksResponse, error)
	// ListHuntGroupIntegrationLinks returns all integration links for a hunt group.
	ListHuntGroupIntegrationLinks(context.Context, *ListHuntGroupIntegrationLinksRequest) (*ListHuntGroupIntegrationLinksResponse, error)
	// CopyHuntGroupIntegrationLink copies the integration link from one hunt group to another.
	// It will create a new integration link in the destination hunt group with the same settings
	// as the source integration link.
	CopyHuntGroupIntegrationLink(context.Context, *CopyHuntGroupIntegrationLinkRequest) (*CopyHuntGroupIntegrationLinkResponse, error)
	// UpdateHuntGroupIntegrationLinks updates the integration links for a hunt group.
	// It will create any new integration links that do not already exist in the hunt group,
	// update any existing integration links with the new settings, and delete any integration links
	// that are not in the request.
	UpdateHuntGroupIntegrationLinks(context.Context, *UpdateHuntGroupIntegrationLinksRequest) (*UpdateHuntGroupIntegrationLinksResponse, error)
	// GetHuntGroupClientInfoDisplayTemplate returns the client info display template for a given hunt group.
	GetHuntGroupClientInfoDisplayTemplate(context.Context, *GetHuntGroupClientInfoDisplayTemplateRequest) (*GetHuntGroupClientInfoDisplayTemplateResponse, error)
	// CreateHuntGroupClientInfoDisplayTemplate creates a new client info display template for a givne hunt group.
	CreateHuntGroupClientInfoDisplayTemplate(context.Context, *CreateHuntGroupClientInfoDisplayTemplateRequest) (*CreateHuntGroupClientInfoDisplayTemplateResponse, error)
	// UpdateHuntGroupClientInfoDisplayTemplate updates a client info display template for a given hunt group.
	UpdateHuntGroupClientInfoDisplayTemplate(context.Context, *UpdateHuntGroupClientInfoDisplayTemplateRequest) (*UpdateHuntGroupClientInfoDisplayTemplateResponse, error)
	// DeleteHuntGroupClientInfoDisplayTemplate deletes a client info display template for a given hunt group.
	DeleteHuntGroupClientInfoDisplayTemplate(context.Context, *DeleteHuntGroupClientInfoDisplayTemplateRequest) (*DeleteHuntGroupClientInfoDisplayTemplateResponse, error)
	// CopyHuntGroupClientInfoDisplayTemplate copies the client info display template from one hunt group to another.
	// It will create a new template in the destination hunt group with the same settings as the source template if it doesn't already exist.
	// Otherwise, it will update the existing template with the source template settings.
	CopyHuntGroupClientInfoDisplayTemplate(context.Context, *CopyHuntGroupClientInfoDisplayTemplateRequest) (*CopyHuntGroupClientInfoDisplayTemplateResponse, error)
	// CreateCampaignClientInfoDisplayTemplate creates a new client info display template for a campaign
	// with the same settings as the source template from a hunt group.
	CreateCampaignClientInfoDisplayTemplate(context.Context, *CreateCampaignClientInfoDisplayTemplateRequest) (*CreateCampaignClientInfoDisplayTemplateResponse, error)
	// ListHuntGroupsWithClientInfoTemplateData lists the hunt groups in an organization
	// with their client info display template data based on the filter.
	ListHuntGroupsWithClientInfoTemplateData(context.Context, *ListHuntGroupsWithClientInfoTemplateDataRequest) (*ListHuntGroupsWithClientInfoTemplateDataResponse, error)
	// ListAgentTriggers returns a list of agent triggers for the given hunt group.
	ListAgentTriggers(context.Context, *ListAgentTriggersRequest) (*ListAgentTriggersResponse, error)
	// CopyAgentTrigger copys an agent trigger to the given hunt group in the same org.
	CopyAgentTrigger(context.Context, *CopyAgentTriggerRequest) (*CopyAgentTriggerResponse, error)
	// UpdateAgentTriggers updates all agent triggers for the given hunt group.
	UpdateAgentTriggers(context.Context, *UpdateAgentTriggersRequest) (*UpdateAgentTriggersResponse, error)
	// Deprecated: Do not use.
	// ListHuntGroupScripts lists all hunt group scripts for the current organization.
	// DEPRECATED. Use ListOrgHuntGroupScripts instead
	ListHuntGroupScripts(context.Context, *ListHuntGroupScriptsRequest) (*ListHuntGroupScriptsResponse, error)
	// ListOrgHuntGroupScripts lists all hunt group scripts for the current organization with a streamed response.
	ListOrgHuntGroupScripts(*ListHuntGroupScriptsRequest, Org_ListOrgHuntGroupScriptsServer) error
	// GetHuntGroupScript gets the specified script from the given script sid
	GetHuntGroupScript(context.Context, *GetHuntGroupScriptRequest) (*GetHuntGroupScriptResponse, error)
	// CreateHuntGroupScript adds a creates a new hunt group script
	CreateHuntGroupScript(context.Context, *CreateHuntGroupScriptRequest) (*CreateHuntGroupScriptResponse, error)
	// UpdateHuntGroupScript updates a script specified by the given script sid
	UpdateHuntGroupScript(context.Context, *UpdateHuntGroupScriptRequest) (*UpdateHuntGroupScriptResponse, error)
	// DeleteHuntGroupScript deletes a hunt group script
	DeleteHuntGroupScript(context.Context, *DeleteHuntGroupScriptRequest) (*DeleteHuntGroupScriptResponse, error)
	// AssignScriptToHuntGroups assigns a script to the specified hunt groups
	AssignScriptToHuntGroups(context.Context, *AssignScriptToHuntGroupsRequest) (*AssignScriptToHuntGroupsResponse, error)
	// UnassignScriptFromHuntGroups unassigns a script from the specified hunt groups
	UnassignScriptFromHuntGroups(context.Context, *UnassignScriptFromHuntGroupsRequest) (*UnassignScriptFromHuntGroupsResponse, error)
	// CreateTrust creates a new trust.
	CreateTrust(context.Context, *CreateTrustRequest) (*CreateTrustResponse, error)
	// AcceptTrust accepts an incoming trust.
	AcceptTrust(context.Context, *AcceptTrustRequest) (*AcceptTrustResponse, error)
	// RejectTrust rejects an incoming trust.
	RejectTrust(context.Context, *RejectTrustRequest) (*RejectTrustResponse, error)
	// GetTrust returns a single trust by trust id.
	GetTrust(context.Context, *GetTrustRequest) (*GetTrustResponse, error)
	// ListIncomingTrusts returns all pending trusts that are being granted
	// to the org of the currently logged in user.
	ListIncomingTrusts(context.Context, *ListIncomingTrustsRequest) (*ListIncomingTrustsResponse, error)
	// ListGivenTrusts returns all trusts that have been given out for
	// the currently logged in user's org. The returned list will contain
	// accepted, pending, and rejected trusts.
	ListGivenTrusts(context.Context, *ListGivenTrustsRequest) (*ListGivenTrustsResponse, error)
	// ListAssignableTrusts returns all accepted trusts that are being granted
	// to the org of the currently logged in user.
	ListAssignableTrusts(context.Context, *ListAssignableTrustsRequest) (*ListAssignableTrustsResponse, error)
	// DeleteTrust deletes a trust by trust id. Only trusts where the current
	// org is the grantor can be deleted by this endpoint.
	DeleteTrust(context.Context, *DeleteTrustRequest) (*DeleteTrustResponse, error)
	// AssignTrust assigns a trust to the given user ids.
	AssignTrust(context.Context, *AssignTrustRequest) (*AssignTrustResponse, error)
	// UnassignTrust unassigns a trust from the given user id.
	UnassignTrust(context.Context, *UnassignTrustRequest) (*UnassignTrustResponse, error)
	// CreateLabel creates a label with the given properties.
	CreateLabel(context.Context, *CreateLabelRequest) (*CreateLabelResponse, error)
	// DeleteLabel deletes a label with the id given on the request.
	DeleteLabel(context.Context, *DeleteLabelRequest) (*DeleteLabelResponse, error)
	// ListLabels returns all unique label names belonging to the given org id.
	ListLabels(context.Context, *ListLabelsRequest) (*ListLabelsResponse, error)
	// GetLabel returns a single label with the given ID.
	GetLabel(context.Context, *GetLabelRequest) (*GetLabelResponse, error)
	// UpdateLabel updates the given label.
	UpdateLabel(context.Context, *UpdateLabelRequest) (*UpdateLabelResponse, error)
	// Assignlabel creates label assignments defined by the request.
	AssignLabel(context.Context, *AssignLabelRequest) (*AssignLabelResponse, error)
	// Unassignlabel removes label assignments defined by the request.
	UnassignLabel(context.Context, *UnassignLabelRequest) (*UnassignLabelResponse, error)
	// GetAssignmentCounts returns the total amount of label assignments
	// per entity type.
	GetAssignmentCounts(context.Context, *GetAssignmentCountsRequest) (*GetAssignmentCountsResponse, error)
	// GetAssignableLabels returns a list of labels available to the current user.
	GetAssignableLabels(context.Context, *GetAssignableLabelsRequest) (*GetAssignableLabelsResponse, error)
	// GetPermissions returns the permissions for a given user along with other user information.
	GetPermissions(context.Context, *GetPermissionsRequest) (*GetPermissionsResponse, error)
	// GetUserPermissions returns the permissions for a given user.
	GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error)
	// Creates a new permission group.
	CreatePermissionGroup(context.Context, *CreatePermissionGroupRequest) (*CreatePermissionGroupResponse, error)
	// UpdatePermissionGroup updates the permission group with the given id.
	UpdatePermissionGroup(context.Context, *UpdatePermissionGroupRequest) (*UpdatePermissionGroupResponse, error)
	// DeletePermissionGroup deletes the permission group with the given id.
	DeletePermissionGroup(context.Context, *DeletePermissionGroupRequest) (*DeletePermissionGroupResponse, error)
	// ListPermissionGroups returns a list of permissions for an organization.
	ListPermissionGroups(context.Context, *ListPermissionGroupsRequest) (*ListPermissionGroupsResponse, error)
	// ListPermissionGroupsByOrgId returns a list of permissions for an
	// organization.
	ListPermissionGroupsByOrgId(context.Context, *ListPermissionGroupsByOrgIdRequest) (*ListPermissionGroupsByOrgIdResponse, error)
	// AssignUsersPermissionGroup returns a user a permission group.
	AssignUsersPermissionGroup(context.Context, *AssignUsersPermissionGroupRequest) (*AssignUsersPermissionGroupResponse, error)
	// RevokeUsersPermissionGroup returns a user a permission group.
	RevokeUsersPermissionGroup(context.Context, *RevokeUsersPermissionGroupRequest) (*RevokeUsersPermissionGroupResponse, error)
	// AssignLabels assigns labels to a given permission group
	AssignLabels(context.Context, *AssignLabelsRequest) (*AssignLabelsResponse, error)
	// RevokeLabels revokes labels from a given permission group
	RevokeLabels(context.Context, *RevokeLabelsRequest) (*RevokeLabelsResponse, error)
	// AssignAccountOwnerPermissionToUser returns a user a permission group.
	AssignAccountOwnerPermissionToUser(context.Context, *AssignAccountOwnerPermissionToUserRequest) (*AssignAccountOwnerPermissionToUserResponse, error)
	// RevokeAccountOwnerPermissionFromUser returns a user a permission group.
	RevokeAccountOwnerPermissionFromUser(context.Context, *RevokeAccountOwnerPermissionFromUserRequest) (*RevokeAccountOwnerPermissionFromUserResponse, error)
	// Initializes the default read only permissions group for the
	// given organization.
	InitDefaultPermissionGroups(context.Context, *InitDefaultPermissionGroupsRequest) (*InitDefaultPermissionGroupsResponse, error)
	// GetAccountOwnerGroup returns the account owner permission group
	// for an organization.
	GetAccountOwnerGroup(context.Context, *GetAccountOwnerGroupRequest) (*GetAccountOwnerGroupResponse, error)
	// GetLicenses returns the licenses an organitzation is assigned.
	GetLicenses(context.Context, *GetLicensesRequest) (*GetLicensesResponse, error)
	// GetOrgLicenses returns the licenses assigned to the organization
	// of the user who makes the request.
	GetOrgLicenses(context.Context, *GetOrgLicensesRequest) (*GetOrgLicensesResponse, error)
	// UpdateLicenses updates an organization's licenses.
	UpdateLicenses(context.Context, *UpdateLicensesRequest) (*UpdateLicensesResponse, error)
	// RemovePermissionFromAllPermissionGroups removes a permission from
	// all permission groups in an organization.
	RemovePermissionFromAllPermissionGroups(context.Context, *RemovePermissionFromAllPermissionGroupsRequest) (*RemovePermissionFromAllPermissionGroupsResponse, error)
	// ListP3PermissionGroups returns the list of p3 permission groups
	// for the user's org.
	ListP3PermissionGroups(context.Context, *ListP3PermissionGroupsRequest) (*ListP3PermissionGroupsResponse, error)
	// ListP3PermissionGroupsByOrgId returns the list of p3 permission groups
	// for an org by id.
	ListP3PermissionGroupsByOrgId(context.Context, *ListP3PermissionGroupsRequest) (*ListP3PermissionGroupsResponse, error)
	// CreateP3PermissionGroup creates a new p3 permission group.
	CreateP3PermissionGroup(context.Context, *CreateP3PermissionGroupRequest) (*CreateP3PermissionGroupResponse, error)
	// UpdateP3PermissionGroup updates an existing p3 permission group.
	// Requires PERMISSION_GROUP_EDIT.
	UpdateP3PermissionGroup(context.Context, *UpdateP3PermissionGroupRequest) (*UpdateP3PermissionGroupResponse, error)
	// UpdateP3PermissionGroup updates an existing p3 permission group.
	// CUSTOMER_SUPPORT required for passing in an org id.
	UpdateP3PermissionGroupByOrgId(context.Context, *UpdateP3PermissionGroupByOrgIdRequest) (*UpdateP3PermissionGroupByOrgIdResponse, error)
	// DeleteP3PermissionGroup deletes a p3 permission group.
	DeleteP3PermissionGroup(context.Context, *DeleteP3PermissionGroupRequest) (*DeleteP3PermissionGroupResponse, error)
	// AssignUsersP3PermissionGroup assigns a p3 permission group
	// to a list of users.
	AssignUsersP3PermissionGroup(context.Context, *AssignUsersP3PermissionGroupRequest) (*AssignUsersP3PermissionGroupResponse, error)
	// RevokeUsersP3PermissionGroup revokes a p3 permission group
	// from a list of users.
	RevokeUsersP3PermissionGroup(context.Context, *RevokeUsersP3PermissionGroupRequest) (*RevokeUsersP3PermissionGroupResponse, error)
	// RefreshMfaLockout resets the lockout timer for the given user.
	RefreshMfaLockout(context.Context, *RefreshMfaLockoutRequest) (*RefreshMfaLockoutResponse, error)
	// RefreshMfaLockoutByOrgId resets the lockout timer for the given user and org id.
	RefreshMfaLockoutByOrgId(context.Context, *RefreshMfaLockoutByOrgIdRequest) (*RefreshMfaLockoutByOrgIdResponse, error)
	// SetMfaType sets the given user's mfa type.
	SetMfaType(context.Context, *SetMfaTypeRequest) (*SetMfaTypeResponse, error)
	// SetMyMfaType sets the current user's mfa type.
	SetMyMfaType(context.Context, *SetMyMfaTypeRequest) (*SetMyMfaTypeResponse, error)
	// EnableUserMfa enables or disables mfa for the given user
	EnableUserMfa(context.Context, *EnableUserMfaRequest) (*EnableUserMfaResponse, error)
	// EnableMyUserMfa enables mfa for the current user
	EnableMyUserMfa(context.Context, *EnableMyUserMfaRequest) (*EnableMyUserMfaResponse, error)
	// GetUserMfaInfo returns the mfa info for the given user.
	GetUserMfaInfo(context.Context, *GetUserMfaInfoRequest) (*GetUserMfaInfoResponse, error)
	// GetMyUserMfaInfo returns the mfa info for the current user.
	GetMyUserMfaInfo(context.Context, *GetMyUserMfaInfoRequest) (*GetMyUserMfaInfoResponse, error)
	// GetMyAllowedMfaMethods returns the mfa methods allowed to the current user.
	GetMyAllowedMfaMethods(context.Context, *GetMyAllowedMfaMethodsRequest) (*GetMyAllowedMfaMethodsResponse, error)
	// Deprecated: Do not use.
	// CreateBusinessHours persists times businesses are available.
	CreateBusinessHours(context.Context, *CreateBusinessHoursRequest) (*CreateBusinessHoursResponse, error)
	// Deprecated: Do not use.
	// UpdateBusinessHours persists changes to times businesses are available.
	UpdateBusinessHours(context.Context, *UpdateBusinessHoursRequest) (*UpdateBusinessHoursResponse, error)
	// AddGroupedUserIPRestrictions adds a user or list of user's IPs they
	// are required to authenticate with
	AddGroupedUserIPRestrictions(context.Context, *AddGroupedUserIPRestrictionsRequest) (*AddGroupedUserIPRestrictionsResponse, error)
	// RemoveGroupedUserIPRestrictions removes a user or list of user's IPs they
	// are required to authenticate with
	RemoveGroupedUserIPRestrictions(context.Context, *RemoveGroupedUserIPRestrictionsRequest) (*RemoveGroupedUserIPRestrictionsResponse, error)
	// ListUsersAllowedIps -
	ListUsersAllowedIps(context.Context, *ListUsersAllowedIpsRequest) (*ListUsersAllowedIpsResponse, error)
	ListResponseEvaluators(context.Context, *ListResponseEvaluatorsRequest) (*ListResponseEvaluatorsResponse, error)
	GetResponseEvaluator(context.Context, *GetResponseEvaluatorRequest) (*GetResponseEvaluatorResponse, error)
	CreateResponseEvaluator(context.Context, *CreateResponseEvaluatorRequest) (*CreateResponseEvaluatorResponse, error)
	UpdateResponseEvaluator(context.Context, *UpdateResponseEvaluatorRequest) (*UpdateResponseEvaluatorResponse, error)
	DeleteResponseEvaluator(context.Context, *DeleteResponseEvaluatorRequest) (*DeleteResponseEvaluatorResponse, error)
	mustEmbedUnimplementedOrgServer()
}

// UnimplementedOrgServer must be embedded to have forward compatible implementations.
type UnimplementedOrgServer struct {
}

func (UnimplementedOrgServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedOrgServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedOrgServer) GetOrganizationById(context.Context, *GetOrganizationByIdRequest) (*GetOrganizationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationById not implemented")
}
func (UnimplementedOrgServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedOrgServer) ArchiveOrganization(context.Context, *ArchiveOrganizationRequest) (*ArchiveOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveOrganization not implemented")
}
func (UnimplementedOrgServer) UnArchiveOrganization(context.Context, *UnArchiveOrganizationRequest) (*UnArchiveOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnArchiveOrganization not implemented")
}
func (UnimplementedOrgServer) ListAllOrganizationsGlobally(*ListAllOrganizationsGloballyRequest, Org_ListAllOrganizationsGloballyServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAllOrganizationsGlobally not implemented")
}
func (UnimplementedOrgServer) ListOrganizationsByRegion(*ListOrganizationsByRegionRequest, Org_ListOrganizationsByRegionServer) error {
	return status.Errorf(codes.Unimplemented, "method ListOrganizationsByRegion not implemented")
}
func (UnimplementedOrgServer) ListArchivedOrganizations(*ListArchivedOrganizationsRequest, Org_ListArchivedOrganizationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListArchivedOrganizations not implemented")
}
func (UnimplementedOrgServer) ConvertOrgToManual(context.Context, *ConvertOrgToManualRequest) (*ConvertOrgToManualResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertOrgToManual not implemented")
}
func (UnimplementedOrgServer) ListOwnedOrgs(*ListOwnedOrgsRequest, Org_ListOwnedOrgsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListOwnedOrgs not implemented")
}
func (UnimplementedOrgServer) GetOrganizationPreferences(context.Context, *GetOrganizationPreferencesRequest) (*GetOrganizationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateOrganizationPreferences(context.Context, *UpdateOrganizationPreferencesRequest) (*UpdateOrganizationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationPreferences not implemented")
}
func (UnimplementedOrgServer) GetAgentPreferences(context.Context, *GetAgentPreferencesRequest) (*GetAgentPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateAgentPreferences(context.Context, *UpdateAgentPreferencesRequest) (*UpdateAgentPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentPreferences not implemented")
}
func (UnimplementedOrgServer) GetContactPreferences(context.Context, *GetContactPreferencesRequest) (*GetContactPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateContactPreferences(context.Context, *UpdateContactPreferencesRequest) (*UpdateContactPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContactPreferences not implemented")
}
func (UnimplementedOrgServer) GetAuthenticationPreferences(context.Context, *GetAuthenticationPreferencesRequest) (*GetAuthenticationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthenticationPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateAuthenticationPreferences(context.Context, *UpdateAuthenticationPreferencesRequest) (*UpdateAuthenticationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthenticationPreferences not implemented")
}
func (UnimplementedOrgServer) GetWebhookPreferences(context.Context, *GetWebhookPreferencesRequest) (*GetWebhookPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhookPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateWebhookPreferences(context.Context, *UpdateWebhookPreferencesRequest) (*UpdateWebhookPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebhookPreferences not implemented")
}
func (UnimplementedOrgServer) GetDashboardGeneralPreferences(context.Context, *GetDashboardGeneralPreferencesRequest) (*GetDashboardGeneralPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardGeneralPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateDashboardGeneralPreferences(context.Context, *UpdateDashboardGeneralPreferencesRequest) (*UpdateDashboardGeneralPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboardGeneralPreferences not implemented")
}
func (UnimplementedOrgServer) GetDashboardQueuePreferences(context.Context, *GetDashboardQueuePreferencesRequest) (*GetDashboardQueuePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardQueuePreferences not implemented")
}
func (UnimplementedOrgServer) UpdateDashboardQueuePreferences(context.Context, *UpdateDashboardQueuePreferencesRequest) (*UpdateDashboardQueuePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboardQueuePreferences not implemented")
}
func (UnimplementedOrgServer) GetPhonePreferences(context.Context, *GetPhonePreferencesRequest) (*GetPhonePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhonePreferences not implemented")
}
func (UnimplementedOrgServer) UpdatePhonePreferences(context.Context, *UpdatePhonePreferencesRequest) (*UpdatePhonePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhonePreferences not implemented")
}
func (UnimplementedOrgServer) GetCompliancePreferences(context.Context, *GetCompliancePreferencesRequest) (*GetCompliancePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompliancePreferences not implemented")
}
func (UnimplementedOrgServer) UpdateCompliancePreferences(context.Context, *UpdateCompliancePreferencesRequest) (*UpdateCompliancePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompliancePreferences not implemented")
}
func (UnimplementedOrgServer) GetBroadcastPreferences(context.Context, *GetBroadcastPreferencesRequest) (*GetBroadcastPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcastPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateBroadcastPreferences(context.Context, *UpdateBroadcastPreferencesRequest) (*UpdateBroadcastPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBroadcastPreferences not implemented")
}
func (UnimplementedOrgServer) GetSchedulePreferences(context.Context, *GetSchedulePreferencesRequest) (*GetSchedulePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulePreferences not implemented")
}
func (UnimplementedOrgServer) UpdateSchedulePreferences(context.Context, *UpdateSchedulePreferencesRequest) (*UpdateSchedulePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchedulePreferences not implemented")
}
func (UnimplementedOrgServer) GetEmailSmsPreferences(context.Context, *GetEmailSmsPreferencesRequest) (*GetEmailSmsPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailSmsPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateEmailSmsPreferences(context.Context, *UpdateEmailSmsPreferencesRequest) (*UpdateEmailSmsPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailSmsPreferences not implemented")
}
func (UnimplementedOrgServer) GetBusinessPreferences(context.Context, *GetBusinessPreferencesRequest) (*GetBusinessPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateBusinessPreferences(context.Context, *UpdateBusinessPreferencesRequest) (*UpdateBusinessPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateAdminBusinessPreferences(context.Context, *UpdateAdminBusinessPreferencesRequest) (*UpdateAdminBusinessPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminBusinessPreferences not implemented")
}
func (UnimplementedOrgServer) GetScorecardsPreferences(context.Context, *GetScorecardsPreferencesRequest) (*GetScorecardsPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScorecardsPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateScorecardsPreferences(context.Context, *UpdateScorecardsPreferencesRequest) (*UpdateScorecardsPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScorecardsPreferences not implemented")
}
func (UnimplementedOrgServer) GetVoiceAnalyticsPreferences(context.Context, *GetVoiceAnalyticsPreferencesRequest) (*GetVoiceAnalyticsPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoiceAnalyticsPreferences not implemented")
}
func (UnimplementedOrgServer) ListVoiceAnalyticsPreferences(context.Context, *ListVoiceAnalyticsPreferencesRequest) (*ListVoiceAnalyticsPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVoiceAnalyticsPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateVoiceAnalyticsPreferences(context.Context, *UpdateVoiceAnalyticsPreferencesRequest) (*UpdateVoiceAnalyticsPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoiceAnalyticsPreferences not implemented")
}
func (UnimplementedOrgServer) GetEndOfDayPreferences(context.Context, *GetEndOfDayPreferencesRequest) (*GetEndOfDayPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndOfDayPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateEndOfDayPreferences(context.Context, *UpdateEndOfDayPreferencesRequest) (*UpdateEndOfDayPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndOfDayPreferences not implemented")
}
func (UnimplementedOrgServer) GetReportFilterPreferences(context.Context, *GetFilterPreferencesRequest) (*GetFilterPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportFilterPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateReportFilterPreferences(context.Context, *UpdateFilterPreferencesRequest) (*UpdateFilterPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportFilterPreferences not implemented")
}
func (UnimplementedOrgServer) GetRecordingPreferences(context.Context, *GetRecordingPreferencesRequest) (*GetRecordingPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordingPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateRecordingPreferences(context.Context, *UpdateRecordingPreferencesRequest) (*UpdateRecordingPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecordingPreferences not implemented")
}
func (UnimplementedOrgServer) GetAdminClientPreferences(context.Context, *GetAdminClientPreferencesRequest) (*GetAdminClientPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminClientPreferences not implemented")
}
func (UnimplementedOrgServer) UpdateAdminClientPreferences(context.Context, *UpdateAdminClientPreferencesRequest) (*UpdateAdminClientPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminClientPreferences not implemented")
}
func (UnimplementedOrgServer) AcceptLinkbackRecordingTerms(context.Context, *AcceptLinkbackRecordingTermsRequest) (*AcceptLinkbackRecordingTermsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptLinkbackRecordingTerms not implemented")
}
func (UnimplementedOrgServer) LinkbackUpdateBroadcastTemplates(context.Context, *LinkbackUpdateBroadcastTemplatesRequest) (*LinkbackUpdateBroadcastTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkbackUpdateBroadcastTemplates not implemented")
}
func (UnimplementedOrgServer) RecordEmailUnsubscribeAcknowledgement(context.Context, *RecordEmailUnsubscribeAcknowledgementRequest) (*RecordEmailUnsubscribeAcknowledgementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordEmailUnsubscribeAcknowledgement not implemented")
}
func (UnimplementedOrgServer) ClearEmailUnsubscribeAcknowledgement(context.Context, *ClearEmailUnsubscribeAcknowledgementRequest) (*ClearEmailUnsubscribeAcknowledgementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearEmailUnsubscribeAcknowledgement not implemented")
}
func (UnimplementedOrgServer) ListBusinessHours(context.Context, *ListBusinessHoursRequest) (*ListBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessHours not implemented")
}
func (UnimplementedOrgServer) GetBusinessHours(context.Context, *GetBusinessHoursRequest) (*GetBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessHours not implemented")
}
func (UnimplementedOrgServer) SetBusinessHours(context.Context, *SetBusinessHoursRequest) (*SetBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBusinessHours not implemented")
}
func (UnimplementedOrgServer) AddIntervalToBusinessHours(context.Context, *AddIntervalToBusinessHoursRequest) (*AddIntervalToBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIntervalToBusinessHours not implemented")
}
func (UnimplementedOrgServer) RemoveIntervalFromBusinessHours(context.Context, *RemoveIntervalFromBusinessHoursRequest) (*RemoveIntervalFromBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIntervalFromBusinessHours not implemented")
}
func (UnimplementedOrgServer) UpdateBusinessHoursInfo(context.Context, *UpdateBusinessHoursInfoRequest) (*UpdateBusinessHoursInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessHoursInfo not implemented")
}
func (UnimplementedOrgServer) DeleteBusinessHours(context.Context, *DeleteBusinessHoursRequest) (*DeleteBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessHours not implemented")
}
func (UnimplementedOrgServer) EvaluateBusinessHours(context.Context, *EvaluateBusinessHoursRequest) (*EvaluateBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateBusinessHours not implemented")
}
func (UnimplementedOrgServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedOrgServer) CreateDelegatedUser(context.Context, *CreateDelegatedUserRequest) (*CreateDelegatedUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDelegatedUser not implemented")
}
func (UnimplementedOrgServer) GetMyUser(context.Context, *GetMyUserRequest) (*GetMyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyUser not implemented")
}
func (UnimplementedOrgServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedOrgServer) GetUserByOrgId(context.Context, *GetUserByOrgIdRequest) (*GetUserByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByOrgId not implemented")
}
func (UnimplementedOrgServer) ListAgents(*ListAgentsRequest, Org_ListAgentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedOrgServer) ListPublicUsers(*ListPublicUsersRequest, Org_ListPublicUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPublicUsers not implemented")
}
func (UnimplementedOrgServer) ListUsers(*ListUsersRequest, Org_ListUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedOrgServer) ListUsersByOrgId(*ListUsersByOrgIdRequest, Org_ListUsersByOrgIdServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsersByOrgId not implemented")
}
func (UnimplementedOrgServer) ListUsersByRegion(*ListUsersByRegionRequest, Org_ListUsersByRegionServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsersByRegion not implemented")
}
func (UnimplementedOrgServer) UpdateMyUser(context.Context, *UpdateMyUserRequest) (*UpdateMyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMyUser not implemented")
}
func (UnimplementedOrgServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedOrgServer) UpdateUserLabels(context.Context, *UpdateUserLabelsRequest) (*UpdateUserLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLabels not implemented")
}
func (UnimplementedOrgServer) UpdateUserCallerId(context.Context, *UpdateUserCallerIdRequest) (*UpdateUserCallerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserCallerId not implemented")
}
func (UnimplementedOrgServer) UpdateUserDisabled(context.Context, *UpdateUserDisabledRequest) (*UpdateUserDisabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDisabled not implemented")
}
func (UnimplementedOrgServer) UpdateUserDisabledByOrgId(context.Context, *UpdateUserDisabledByOrgIdRequest) (*UpdateUserDisabledByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDisabledByOrgId not implemented")
}
func (UnimplementedOrgServer) GetMyUserPasswordResetLink(context.Context, *GetMyUserPasswordResetLinkRequest) (*GetMyUserPasswordResetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyUserPasswordResetLink not implemented")
}
func (UnimplementedOrgServer) GetUserPasswordResetLink(context.Context, *GetUserPasswordResetLinkRequest) (*GetUserPasswordResetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPasswordResetLink not implemented")
}
func (UnimplementedOrgServer) GetUserPasswordResetLinkByOrgId(context.Context, *GetUserPasswordResetLinkByOrgIdRequest) (*GetUserPasswordResetLinkByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPasswordResetLinkByOrgId not implemented")
}
func (UnimplementedOrgServer) CreatePasswordResetLink(context.Context, *CreatePasswordResetLinkRequest) (*CreatePasswordResetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePasswordResetLink not implemented")
}
func (UnimplementedOrgServer) CreatePasswordResetLinkByOrgId(context.Context, *CreatePasswordResetLinkByOrgIdRequest) (*CreatePasswordResetLinkByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePasswordResetLinkByOrgId not implemented")
}
func (UnimplementedOrgServer) GetUserLoginInfo(context.Context, *GetUserLoginInfoRequest) (*GetUserLoginInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLoginInfo not implemented")
}
func (UnimplementedOrgServer) GetUserEmailVerified(context.Context, *GetUserEmailVerifiedRequest) (*GetUserEmailVerifiedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEmailVerified not implemented")
}
func (UnimplementedOrgServer) GetUserEmailVerifiedByOrgId(context.Context, *GetUserEmailVerifiedByOrgIdRequest) (*GetUserEmailVerifiedByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEmailVerifiedByOrgId not implemented")
}
func (UnimplementedOrgServer) ResetMyPassword(context.Context, *ResetMyPasswordRequest) (*ResetMyPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMyPassword not implemented")
}
func (UnimplementedOrgServer) ResetUserPassword(context.Context, *ResetUserPasswordRequest) (*ResetUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserPassword not implemented")
}
func (UnimplementedOrgServer) ResetUserPasswordByOrgId(context.Context, *ResetUserPasswordByOrgIdRequest) (*ResetUserPasswordByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserPasswordByOrgId not implemented")
}
func (UnimplementedOrgServer) SendUserEmailVerification(context.Context, *SendUserEmailVerificationRequest) (*SendUserEmailVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserEmailVerification not implemented")
}
func (UnimplementedOrgServer) SendUserEmailVerificationByOrgId(context.Context, *SendUserEmailVerificationByOrgIdRequest) (*SendUserEmailVerificationByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserEmailVerificationByOrgId not implemented")
}
func (UnimplementedOrgServer) SendPasswordReset(context.Context, *SendPasswordResetRequest) (*SendPasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordReset not implemented")
}
func (UnimplementedOrgServer) SendPasswordResetByOrgId(context.Context, *SendPasswordResetByOrgIdRequest) (*SendPasswordResetByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordResetByOrgId not implemented")
}
func (UnimplementedOrgServer) GetUserSessionData(context.Context, *GetUserSessionDataRequest) (*GetUserSessionDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSessionData not implemented")
}
func (UnimplementedOrgServer) GetAgentProfileGroup(context.Context, *GetAgentProfileGroupRequest) (*GetAgentProfileGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentProfileGroup not implemented")
}
func (UnimplementedOrgServer) ListAgentProfileGroups(context.Context, *ListAgentProfileGroupsRequest) (*ListAgentProfileGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentProfileGroups not implemented")
}
func (UnimplementedOrgServer) UpdateAgentProfileGroup(context.Context, *UpdateAgentProfileGroupRequest) (*UpdateAgentProfileGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentProfileGroup not implemented")
}
func (UnimplementedOrgServer) CreateAgentProfileGroup(context.Context, *CreateAgentProfileGroupRequest) (*CreateAgentProfileGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentProfileGroup not implemented")
}
func (UnimplementedOrgServer) DeleteAgentProfileGroup(context.Context, *DeleteAgentProfileGroupRequest) (*DeleteAgentProfileGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgentProfileGroup not implemented")
}
func (UnimplementedOrgServer) AssignAgentProfileGroups(context.Context, *AssignAgentProfileGroupsRequest) (*AssignAgentProfileGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAgentProfileGroups not implemented")
}
func (UnimplementedOrgServer) AddUserSubscription(context.Context, *AddUserSubscriptionRequest) (*AddUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserSubscription not implemented")
}
func (UnimplementedOrgServer) AddUserSubscriptionByUserId(context.Context, *AddUserSubscriptionByUserIdRequest) (*AddUserSubscriptionByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserSubscriptionByUserId not implemented")
}
func (UnimplementedOrgServer) GetUserSubscription(context.Context, *GetUserSubscriptionRequest) (*GetUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubscription not implemented")
}
func (UnimplementedOrgServer) GetUserSubscriptionByUserId(context.Context, *GetUserSubscriptionByUserIdRequest) (*GetUserSubscriptionByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubscriptionByUserId not implemented")
}
func (UnimplementedOrgServer) UpdateUserSubscription(context.Context, *UpdateUserSubscriptionRequest) (*UpdateUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSubscription not implemented")
}
func (UnimplementedOrgServer) UpdateUserSubscriptionByUserId(context.Context, *UpdateUserSubscriptionByUserIdRequest) (*UpdateUserSubscriptionByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSubscriptionByUserId not implemented")
}
func (UnimplementedOrgServer) RemoveUserSubscription(context.Context, *RemoveUserSubscriptionRequest) (*RemoveUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserSubscription not implemented")
}
func (UnimplementedOrgServer) RemoveUserSubscriptionByUserId(context.Context, *RemoveUserSubscriptionByUserIdRequest) (*RemoveUserSubscriptionByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserSubscriptionByUserId not implemented")
}
func (UnimplementedOrgServer) ListUserSubscriptions(context.Context, *ListUserSubscriptionsRequest) (*ListUserSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserSubscriptions not implemented")
}
func (UnimplementedOrgServer) ListUserSubscriptionsByUserId(context.Context, *ListUserSubscriptionsByUserIdRequest) (*ListUserSubscriptionsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserSubscriptionsByUserId not implemented")
}
func (UnimplementedOrgServer) ListOrgSubscriptions(context.Context, *ListOrgSubscriptionsRequest) (*ListOrgSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgSubscriptions not implemented")
}
func (UnimplementedOrgServer) CreateAuthToken(context.Context, *CreateAuthTokenRequest) (*CreateAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthToken not implemented")
}
func (UnimplementedOrgServer) CreateAuthTokenByUserId(context.Context, *CreateAuthTokenByUserIdRequest) (*CreateAuthTokenByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthTokenByUserId not implemented")
}
func (UnimplementedOrgServer) ListAuthTokens(context.Context, *ListAuthTokensRequest) (*ListAuthTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthTokens not implemented")
}
func (UnimplementedOrgServer) ListAuthTokensByUserId(context.Context, *ListAuthTokensByUserIdRequest) (*ListAuthTokensByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthTokensByUserId not implemented")
}
func (UnimplementedOrgServer) SetAuthTokenExpiration(context.Context, *SetAuthTokenExpirationRequest) (*SetAuthTokenExpirationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAuthTokenExpiration not implemented")
}
func (UnimplementedOrgServer) SetAuthTokenExpirationByUserId(context.Context, *SetAuthTokenExpirationByUserIdRequest) (*SetAuthTokenExpirationByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAuthTokenExpirationByUserId not implemented")
}
func (UnimplementedOrgServer) DeleteAuthToken(context.Context, *DeleteAuthTokenRequest) (*DeleteAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthToken not implemented")
}
func (UnimplementedOrgServer) DeleteAuthTokenByUserId(context.Context, *DeleteAuthTokenByUserIdRequest) (*DeleteAuthTokenByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthTokenByUserId not implemented")
}
func (UnimplementedOrgServer) GetHuntGroupSettings(context.Context, *GetHuntGroupSettingsRequest) (*GetHuntGroupSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuntGroupSettings not implemented")
}
func (UnimplementedOrgServer) UpdateHuntGroupSettings(context.Context, *UpdateHuntGroupSettingsRequest) (*UpdateHuntGroupSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHuntGroupSettings not implemented")
}
func (UnimplementedOrgServer) CreateHuntGroup(context.Context, *CreateHuntGroupRequest) (*CreateHuntGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHuntGroup not implemented")
}
func (UnimplementedOrgServer) UpdateHuntGroupGeneralDetails(context.Context, *UpdateHuntGroupGeneralDetailsRequest) (*UpdateHuntGroupGeneralDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHuntGroupGeneralDetails not implemented")
}
func (UnimplementedOrgServer) DeleteHuntGroup(context.Context, *DeleteHuntGroupRequest) (*DeleteHuntGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHuntGroup not implemented")
}
func (UnimplementedOrgServer) GetHuntGroupDetails(context.Context, *GetHuntGroupDetailsRequest) (*GetHuntGroupDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuntGroupDetails not implemented")
}
func (UnimplementedOrgServer) ListCallerIdBuckets(context.Context, *ListCallerIdBucketsRequest) (*ListCallerIdBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCallerIdBuckets not implemented")
}
func (UnimplementedOrgServer) GetDataDipTemplate(context.Context, *GetDataDipTemplateRequest) (*GetDataDipTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataDipTemplate not implemented")
}
func (UnimplementedOrgServer) ListDataDipTemplates(context.Context, *ListDataDipTemplatesRequest) (*ListDataDipTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataDipTemplates not implemented")
}
func (UnimplementedOrgServer) CreateDataDipTemplate(context.Context, *CreateDataDipTemplateRequest) (*CreateDataDipTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataDipTemplate not implemented")
}
func (UnimplementedOrgServer) UpdateDataDipTemplate(context.Context, *UpdateDataDipTemplateRequest) (*UpdateDataDipTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataDipTemplate not implemented")
}
func (UnimplementedOrgServer) DeleteDataDipTemplate(context.Context, *DeleteDataDipTemplateRequest) (*DeleteDataDipTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataDipTemplate not implemented")
}
func (UnimplementedOrgServer) CopyDataDipTemplate(context.Context, *CopyDataDipTemplateRequest) (*CopyDataDipTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyDataDipTemplate not implemented")
}
func (UnimplementedOrgServer) CopyDataDipTemplateToOrganization(context.Context, *CopyDataDipTemplateToOrganizationRequest) (*CopyDataDipTemplateToOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyDataDipTemplateToOrganization not implemented")
}
func (UnimplementedOrgServer) ListBroadcastTemplateGeneralDetails(context.Context, *ListBroadcastTemplateGeneralDetailsRequest) (*ListBroadcastTemplateGeneralDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBroadcastTemplateGeneralDetails not implemented")
}
func (UnimplementedOrgServer) ListAgentResponseAutoRules(context.Context, *ListAgentResponseAutoRulesRequest) (*ListAgentResponseAutoRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentResponseAutoRules not implemented")
}
func (UnimplementedOrgServer) CreateAgentResponseAutoRules(context.Context, *CreateAgentResponseAutoRulesRequest) (*CreateAgentResponseAutoRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentResponseAutoRules not implemented")
}
func (UnimplementedOrgServer) UpdateAgentResponseAutoRules(context.Context, *UpdateAgentResponseAutoRulesRequest) (*UpdateAgentResponseAutoRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentResponseAutoRules not implemented")
}
func (UnimplementedOrgServer) DeleteAgentResponseAutoRules(context.Context, *DeleteAgentResponseAutoRulesRequest) (*DeleteAgentResponseAutoRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgentResponseAutoRules not implemented")
}
func (UnimplementedOrgServer) ListHuntGroupWebLinks(context.Context, *ListHuntGroupWebLinksRequest) (*ListHuntGroupWebLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHuntGroupWebLinks not implemented")
}
func (UnimplementedOrgServer) CopyHuntGroupWebLink(context.Context, *CopyHuntGroupWebLinkRequest) (*CopyHuntGroupWebLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyHuntGroupWebLink not implemented")
}
func (UnimplementedOrgServer) UpdateHuntGroupWebLinks(context.Context, *UpdateHuntGroupWebLinksRequest) (*UpdateHuntGroupWebLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHuntGroupWebLinks not implemented")
}
func (UnimplementedOrgServer) ListHuntGroupIntegrationLinks(context.Context, *ListHuntGroupIntegrationLinksRequest) (*ListHuntGroupIntegrationLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHuntGroupIntegrationLinks not implemented")
}
func (UnimplementedOrgServer) CopyHuntGroupIntegrationLink(context.Context, *CopyHuntGroupIntegrationLinkRequest) (*CopyHuntGroupIntegrationLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyHuntGroupIntegrationLink not implemented")
}
func (UnimplementedOrgServer) UpdateHuntGroupIntegrationLinks(context.Context, *UpdateHuntGroupIntegrationLinksRequest) (*UpdateHuntGroupIntegrationLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHuntGroupIntegrationLinks not implemented")
}
func (UnimplementedOrgServer) GetHuntGroupClientInfoDisplayTemplate(context.Context, *GetHuntGroupClientInfoDisplayTemplateRequest) (*GetHuntGroupClientInfoDisplayTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuntGroupClientInfoDisplayTemplate not implemented")
}
func (UnimplementedOrgServer) CreateHuntGroupClientInfoDisplayTemplate(context.Context, *CreateHuntGroupClientInfoDisplayTemplateRequest) (*CreateHuntGroupClientInfoDisplayTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHuntGroupClientInfoDisplayTemplate not implemented")
}
func (UnimplementedOrgServer) UpdateHuntGroupClientInfoDisplayTemplate(context.Context, *UpdateHuntGroupClientInfoDisplayTemplateRequest) (*UpdateHuntGroupClientInfoDisplayTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHuntGroupClientInfoDisplayTemplate not implemented")
}
func (UnimplementedOrgServer) DeleteHuntGroupClientInfoDisplayTemplate(context.Context, *DeleteHuntGroupClientInfoDisplayTemplateRequest) (*DeleteHuntGroupClientInfoDisplayTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHuntGroupClientInfoDisplayTemplate not implemented")
}
func (UnimplementedOrgServer) CopyHuntGroupClientInfoDisplayTemplate(context.Context, *CopyHuntGroupClientInfoDisplayTemplateRequest) (*CopyHuntGroupClientInfoDisplayTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyHuntGroupClientInfoDisplayTemplate not implemented")
}
func (UnimplementedOrgServer) CreateCampaignClientInfoDisplayTemplate(context.Context, *CreateCampaignClientInfoDisplayTemplateRequest) (*CreateCampaignClientInfoDisplayTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaignClientInfoDisplayTemplate not implemented")
}
func (UnimplementedOrgServer) ListHuntGroupsWithClientInfoTemplateData(context.Context, *ListHuntGroupsWithClientInfoTemplateDataRequest) (*ListHuntGroupsWithClientInfoTemplateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHuntGroupsWithClientInfoTemplateData not implemented")
}
func (UnimplementedOrgServer) ListAgentTriggers(context.Context, *ListAgentTriggersRequest) (*ListAgentTriggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentTriggers not implemented")
}
func (UnimplementedOrgServer) CopyAgentTrigger(context.Context, *CopyAgentTriggerRequest) (*CopyAgentTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyAgentTrigger not implemented")
}
func (UnimplementedOrgServer) UpdateAgentTriggers(context.Context, *UpdateAgentTriggersRequest) (*UpdateAgentTriggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentTriggers not implemented")
}
func (UnimplementedOrgServer) ListHuntGroupScripts(context.Context, *ListHuntGroupScriptsRequest) (*ListHuntGroupScriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHuntGroupScripts not implemented")
}
func (UnimplementedOrgServer) ListOrgHuntGroupScripts(*ListHuntGroupScriptsRequest, Org_ListOrgHuntGroupScriptsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListOrgHuntGroupScripts not implemented")
}
func (UnimplementedOrgServer) GetHuntGroupScript(context.Context, *GetHuntGroupScriptRequest) (*GetHuntGroupScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuntGroupScript not implemented")
}
func (UnimplementedOrgServer) CreateHuntGroupScript(context.Context, *CreateHuntGroupScriptRequest) (*CreateHuntGroupScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHuntGroupScript not implemented")
}
func (UnimplementedOrgServer) UpdateHuntGroupScript(context.Context, *UpdateHuntGroupScriptRequest) (*UpdateHuntGroupScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHuntGroupScript not implemented")
}
func (UnimplementedOrgServer) DeleteHuntGroupScript(context.Context, *DeleteHuntGroupScriptRequest) (*DeleteHuntGroupScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHuntGroupScript not implemented")
}
func (UnimplementedOrgServer) AssignScriptToHuntGroups(context.Context, *AssignScriptToHuntGroupsRequest) (*AssignScriptToHuntGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignScriptToHuntGroups not implemented")
}
func (UnimplementedOrgServer) UnassignScriptFromHuntGroups(context.Context, *UnassignScriptFromHuntGroupsRequest) (*UnassignScriptFromHuntGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignScriptFromHuntGroups not implemented")
}
func (UnimplementedOrgServer) CreateTrust(context.Context, *CreateTrustRequest) (*CreateTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrust not implemented")
}
func (UnimplementedOrgServer) AcceptTrust(context.Context, *AcceptTrustRequest) (*AcceptTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptTrust not implemented")
}
func (UnimplementedOrgServer) RejectTrust(context.Context, *RejectTrustRequest) (*RejectTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectTrust not implemented")
}
func (UnimplementedOrgServer) GetTrust(context.Context, *GetTrustRequest) (*GetTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrust not implemented")
}
func (UnimplementedOrgServer) ListIncomingTrusts(context.Context, *ListIncomingTrustsRequest) (*ListIncomingTrustsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIncomingTrusts not implemented")
}
func (UnimplementedOrgServer) ListGivenTrusts(context.Context, *ListGivenTrustsRequest) (*ListGivenTrustsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGivenTrusts not implemented")
}
func (UnimplementedOrgServer) ListAssignableTrusts(context.Context, *ListAssignableTrustsRequest) (*ListAssignableTrustsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssignableTrusts not implemented")
}
func (UnimplementedOrgServer) DeleteTrust(context.Context, *DeleteTrustRequest) (*DeleteTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrust not implemented")
}
func (UnimplementedOrgServer) AssignTrust(context.Context, *AssignTrustRequest) (*AssignTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTrust not implemented")
}
func (UnimplementedOrgServer) UnassignTrust(context.Context, *UnassignTrustRequest) (*UnassignTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignTrust not implemented")
}
func (UnimplementedOrgServer) CreateLabel(context.Context, *CreateLabelRequest) (*CreateLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabel not implemented")
}
func (UnimplementedOrgServer) DeleteLabel(context.Context, *DeleteLabelRequest) (*DeleteLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabel not implemented")
}
func (UnimplementedOrgServer) ListLabels(context.Context, *ListLabelsRequest) (*ListLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabels not implemented")
}
func (UnimplementedOrgServer) GetLabel(context.Context, *GetLabelRequest) (*GetLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabel not implemented")
}
func (UnimplementedOrgServer) UpdateLabel(context.Context, *UpdateLabelRequest) (*UpdateLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabel not implemented")
}
func (UnimplementedOrgServer) AssignLabel(context.Context, *AssignLabelRequest) (*AssignLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignLabel not implemented")
}
func (UnimplementedOrgServer) UnassignLabel(context.Context, *UnassignLabelRequest) (*UnassignLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignLabel not implemented")
}
func (UnimplementedOrgServer) GetAssignmentCounts(context.Context, *GetAssignmentCountsRequest) (*GetAssignmentCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignmentCounts not implemented")
}
func (UnimplementedOrgServer) GetAssignableLabels(context.Context, *GetAssignableLabelsRequest) (*GetAssignableLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignableLabels not implemented")
}
func (UnimplementedOrgServer) GetPermissions(context.Context, *GetPermissionsRequest) (*GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedOrgServer) GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (UnimplementedOrgServer) CreatePermissionGroup(context.Context, *CreatePermissionGroupRequest) (*CreatePermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermissionGroup not implemented")
}
func (UnimplementedOrgServer) UpdatePermissionGroup(context.Context, *UpdatePermissionGroupRequest) (*UpdatePermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermissionGroup not implemented")
}
func (UnimplementedOrgServer) DeletePermissionGroup(context.Context, *DeletePermissionGroupRequest) (*DeletePermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionGroup not implemented")
}
func (UnimplementedOrgServer) ListPermissionGroups(context.Context, *ListPermissionGroupsRequest) (*ListPermissionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionGroups not implemented")
}
func (UnimplementedOrgServer) ListPermissionGroupsByOrgId(context.Context, *ListPermissionGroupsByOrgIdRequest) (*ListPermissionGroupsByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionGroupsByOrgId not implemented")
}
func (UnimplementedOrgServer) AssignUsersPermissionGroup(context.Context, *AssignUsersPermissionGroupRequest) (*AssignUsersPermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUsersPermissionGroup not implemented")
}
func (UnimplementedOrgServer) RevokeUsersPermissionGroup(context.Context, *RevokeUsersPermissionGroupRequest) (*RevokeUsersPermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeUsersPermissionGroup not implemented")
}
func (UnimplementedOrgServer) AssignLabels(context.Context, *AssignLabelsRequest) (*AssignLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignLabels not implemented")
}
func (UnimplementedOrgServer) RevokeLabels(context.Context, *RevokeLabelsRequest) (*RevokeLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeLabels not implemented")
}
func (UnimplementedOrgServer) AssignAccountOwnerPermissionToUser(context.Context, *AssignAccountOwnerPermissionToUserRequest) (*AssignAccountOwnerPermissionToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAccountOwnerPermissionToUser not implemented")
}
func (UnimplementedOrgServer) RevokeAccountOwnerPermissionFromUser(context.Context, *RevokeAccountOwnerPermissionFromUserRequest) (*RevokeAccountOwnerPermissionFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAccountOwnerPermissionFromUser not implemented")
}
func (UnimplementedOrgServer) InitDefaultPermissionGroups(context.Context, *InitDefaultPermissionGroupsRequest) (*InitDefaultPermissionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDefaultPermissionGroups not implemented")
}
func (UnimplementedOrgServer) GetAccountOwnerGroup(context.Context, *GetAccountOwnerGroupRequest) (*GetAccountOwnerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountOwnerGroup not implemented")
}
func (UnimplementedOrgServer) GetLicenses(context.Context, *GetLicensesRequest) (*GetLicensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicenses not implemented")
}
func (UnimplementedOrgServer) GetOrgLicenses(context.Context, *GetOrgLicensesRequest) (*GetOrgLicensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgLicenses not implemented")
}
func (UnimplementedOrgServer) UpdateLicenses(context.Context, *UpdateLicensesRequest) (*UpdateLicensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLicenses not implemented")
}
func (UnimplementedOrgServer) RemovePermissionFromAllPermissionGroups(context.Context, *RemovePermissionFromAllPermissionGroupsRequest) (*RemovePermissionFromAllPermissionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermissionFromAllPermissionGroups not implemented")
}
func (UnimplementedOrgServer) ListP3PermissionGroups(context.Context, *ListP3PermissionGroupsRequest) (*ListP3PermissionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListP3PermissionGroups not implemented")
}
func (UnimplementedOrgServer) ListP3PermissionGroupsByOrgId(context.Context, *ListP3PermissionGroupsRequest) (*ListP3PermissionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListP3PermissionGroupsByOrgId not implemented")
}
func (UnimplementedOrgServer) CreateP3PermissionGroup(context.Context, *CreateP3PermissionGroupRequest) (*CreateP3PermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateP3PermissionGroup not implemented")
}
func (UnimplementedOrgServer) UpdateP3PermissionGroup(context.Context, *UpdateP3PermissionGroupRequest) (*UpdateP3PermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateP3PermissionGroup not implemented")
}
func (UnimplementedOrgServer) UpdateP3PermissionGroupByOrgId(context.Context, *UpdateP3PermissionGroupByOrgIdRequest) (*UpdateP3PermissionGroupByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateP3PermissionGroupByOrgId not implemented")
}
func (UnimplementedOrgServer) DeleteP3PermissionGroup(context.Context, *DeleteP3PermissionGroupRequest) (*DeleteP3PermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteP3PermissionGroup not implemented")
}
func (UnimplementedOrgServer) AssignUsersP3PermissionGroup(context.Context, *AssignUsersP3PermissionGroupRequest) (*AssignUsersP3PermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUsersP3PermissionGroup not implemented")
}
func (UnimplementedOrgServer) RevokeUsersP3PermissionGroup(context.Context, *RevokeUsersP3PermissionGroupRequest) (*RevokeUsersP3PermissionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeUsersP3PermissionGroup not implemented")
}
func (UnimplementedOrgServer) RefreshMfaLockout(context.Context, *RefreshMfaLockoutRequest) (*RefreshMfaLockoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshMfaLockout not implemented")
}
func (UnimplementedOrgServer) RefreshMfaLockoutByOrgId(context.Context, *RefreshMfaLockoutByOrgIdRequest) (*RefreshMfaLockoutByOrgIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshMfaLockoutByOrgId not implemented")
}
func (UnimplementedOrgServer) SetMfaType(context.Context, *SetMfaTypeRequest) (*SetMfaTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMfaType not implemented")
}
func (UnimplementedOrgServer) SetMyMfaType(context.Context, *SetMyMfaTypeRequest) (*SetMyMfaTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyMfaType not implemented")
}
func (UnimplementedOrgServer) EnableUserMfa(context.Context, *EnableUserMfaRequest) (*EnableUserMfaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUserMfa not implemented")
}
func (UnimplementedOrgServer) EnableMyUserMfa(context.Context, *EnableMyUserMfaRequest) (*EnableMyUserMfaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMyUserMfa not implemented")
}
func (UnimplementedOrgServer) GetUserMfaInfo(context.Context, *GetUserMfaInfoRequest) (*GetUserMfaInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMfaInfo not implemented")
}
func (UnimplementedOrgServer) GetMyUserMfaInfo(context.Context, *GetMyUserMfaInfoRequest) (*GetMyUserMfaInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyUserMfaInfo not implemented")
}
func (UnimplementedOrgServer) GetMyAllowedMfaMethods(context.Context, *GetMyAllowedMfaMethodsRequest) (*GetMyAllowedMfaMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyAllowedMfaMethods not implemented")
}
func (UnimplementedOrgServer) CreateBusinessHours(context.Context, *CreateBusinessHoursRequest) (*CreateBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessHours not implemented")
}
func (UnimplementedOrgServer) UpdateBusinessHours(context.Context, *UpdateBusinessHoursRequest) (*UpdateBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessHours not implemented")
}
func (UnimplementedOrgServer) AddGroupedUserIPRestrictions(context.Context, *AddGroupedUserIPRestrictionsRequest) (*AddGroupedUserIPRestrictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupedUserIPRestrictions not implemented")
}
func (UnimplementedOrgServer) RemoveGroupedUserIPRestrictions(context.Context, *RemoveGroupedUserIPRestrictionsRequest) (*RemoveGroupedUserIPRestrictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupedUserIPRestrictions not implemented")
}
func (UnimplementedOrgServer) ListUsersAllowedIps(context.Context, *ListUsersAllowedIpsRequest) (*ListUsersAllowedIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersAllowedIps not implemented")
}
func (UnimplementedOrgServer) ListResponseEvaluators(context.Context, *ListResponseEvaluatorsRequest) (*ListResponseEvaluatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResponseEvaluators not implemented")
}
func (UnimplementedOrgServer) GetResponseEvaluator(context.Context, *GetResponseEvaluatorRequest) (*GetResponseEvaluatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResponseEvaluator not implemented")
}
func (UnimplementedOrgServer) CreateResponseEvaluator(context.Context, *CreateResponseEvaluatorRequest) (*CreateResponseEvaluatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResponseEvaluator not implemented")
}
func (UnimplementedOrgServer) UpdateResponseEvaluator(context.Context, *UpdateResponseEvaluatorRequest) (*UpdateResponseEvaluatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResponseEvaluator not implemented")
}
func (UnimplementedOrgServer) DeleteResponseEvaluator(context.Context, *DeleteResponseEvaluatorRequest) (*DeleteResponseEvaluatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResponseEvaluator not implemented")
}
func (UnimplementedOrgServer) mustEmbedUnimplementedOrgServer() {}

// UnsafeOrgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgServer will
// result in compilation errors.
type UnsafeOrgServer interface {
	mustEmbedUnimplementedOrgServer()
}

func RegisterOrgServer(s grpc.ServiceRegistrar, srv OrgServer) {
	s.RegisterService(&Org_ServiceDesc, srv)
}

func _Org_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrganizationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrganizationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrganizationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrganizationById(ctx, req.(*GetOrganizationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ArchiveOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ArchiveOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ArchiveOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ArchiveOrganization(ctx, req.(*ArchiveOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UnArchiveOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnArchiveOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UnArchiveOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UnArchiveOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UnArchiveOrganization(ctx, req.(*UnArchiveOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListAllOrganizationsGlobally_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAllOrganizationsGloballyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrgServer).ListAllOrganizationsGlobally(m, &orgListAllOrganizationsGloballyServer{stream})
}

type Org_ListAllOrganizationsGloballyServer interface {
	Send(*ListAllOrganizationsGloballyResponse) error
	grpc.ServerStream
}

type orgListAllOrganizationsGloballyServer struct {
	grpc.ServerStream
}

func (x *orgListAllOrganizationsGloballyServer) Send(m *ListAllOrganizationsGloballyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Org_ListOrganizationsByRegion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListOrganizationsByRegionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrgServer).ListOrganizationsByRegion(m, &orgListOrganizationsByRegionServer{stream})
}

type Org_ListOrganizationsByRegionServer interface {
	Send(*ListOrganizationsByRegionResponse) error
	grpc.ServerStream
}

type orgListOrganizationsByRegionServer struct {
	grpc.ServerStream
}

func (x *orgListOrganizationsByRegionServer) Send(m *ListOrganizationsByRegionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Org_ListArchivedOrganizations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListArchivedOrganizationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrgServer).ListArchivedOrganizations(m, &orgListArchivedOrganizationsServer{stream})
}

type Org_ListArchivedOrganizationsServer interface {
	Send(*ListArchivedOrganizationsResponse) error
	grpc.ServerStream
}

type orgListArchivedOrganizationsServer struct {
	grpc.ServerStream
}

func (x *orgListArchivedOrganizationsServer) Send(m *ListArchivedOrganizationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Org_ConvertOrgToManual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertOrgToManualRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ConvertOrgToManual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ConvertOrgToManual_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ConvertOrgToManual(ctx, req.(*ConvertOrgToManualRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListOwnedOrgs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListOwnedOrgsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrgServer).ListOwnedOrgs(m, &orgListOwnedOrgsServer{stream})
}

type Org_ListOwnedOrgsServer interface {
	Send(*ListOwnedOrgsResponse) error
	grpc.ServerStream
}

type orgListOwnedOrgsServer struct {
	grpc.ServerStream
}

func (x *orgListOwnedOrgsServer) Send(m *ListOwnedOrgsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Org_GetOrganizationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrganizationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrganizationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrganizationPreferences(ctx, req.(*GetOrganizationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateOrganizationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateOrganizationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateOrganizationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateOrganizationPreferences(ctx, req.(*UpdateOrganizationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAgentPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAgentPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAgentPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAgentPreferences(ctx, req.(*GetAgentPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAgentPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAgentPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAgentPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAgentPreferences(ctx, req.(*UpdateAgentPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetContactPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetContactPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetContactPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetContactPreferences(ctx, req.(*GetContactPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateContactPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateContactPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateContactPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateContactPreferences(ctx, req.(*UpdateContactPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAuthenticationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthenticationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAuthenticationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAuthenticationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAuthenticationPreferences(ctx, req.(*GetAuthenticationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAuthenticationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthenticationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAuthenticationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAuthenticationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAuthenticationPreferences(ctx, req.(*UpdateAuthenticationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetWebhookPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebhookPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetWebhookPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetWebhookPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetWebhookPreferences(ctx, req.(*GetWebhookPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateWebhookPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateWebhookPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateWebhookPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateWebhookPreferences(ctx, req.(*UpdateWebhookPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetDashboardGeneralPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardGeneralPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetDashboardGeneralPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetDashboardGeneralPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetDashboardGeneralPreferences(ctx, req.(*GetDashboardGeneralPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateDashboardGeneralPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardGeneralPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateDashboardGeneralPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateDashboardGeneralPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateDashboardGeneralPreferences(ctx, req.(*UpdateDashboardGeneralPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetDashboardQueuePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardQueuePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetDashboardQueuePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetDashboardQueuePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetDashboardQueuePreferences(ctx, req.(*GetDashboardQueuePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateDashboardQueuePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardQueuePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateDashboardQueuePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateDashboardQueuePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateDashboardQueuePreferences(ctx, req.(*UpdateDashboardQueuePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetPhonePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhonePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetPhonePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetPhonePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetPhonePreferences(ctx, req.(*GetPhonePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdatePhonePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhonePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdatePhonePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdatePhonePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdatePhonePreferences(ctx, req.(*UpdatePhonePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetCompliancePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompliancePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetCompliancePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetCompliancePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetCompliancePreferences(ctx, req.(*GetCompliancePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateCompliancePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompliancePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateCompliancePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateCompliancePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateCompliancePreferences(ctx, req.(*UpdateCompliancePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetBroadcastPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBroadcastPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetBroadcastPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetBroadcastPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetBroadcastPreferences(ctx, req.(*GetBroadcastPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateBroadcastPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBroadcastPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateBroadcastPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateBroadcastPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateBroadcastPreferences(ctx, req.(*UpdateBroadcastPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetSchedulePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetSchedulePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetSchedulePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetSchedulePreferences(ctx, req.(*GetSchedulePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateSchedulePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchedulePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateSchedulePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateSchedulePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateSchedulePreferences(ctx, req.(*UpdateSchedulePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetEmailSmsPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailSmsPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetEmailSmsPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetEmailSmsPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetEmailSmsPreferences(ctx, req.(*GetEmailSmsPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateEmailSmsPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailSmsPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateEmailSmsPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateEmailSmsPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateEmailSmsPreferences(ctx, req.(*UpdateEmailSmsPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetBusinessPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetBusinessPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetBusinessPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetBusinessPreferences(ctx, req.(*GetBusinessPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateBusinessPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateBusinessPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateBusinessPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateBusinessPreferences(ctx, req.(*UpdateBusinessPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAdminBusinessPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminBusinessPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAdminBusinessPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAdminBusinessPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAdminBusinessPreferences(ctx, req.(*UpdateAdminBusinessPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetScorecardsPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScorecardsPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetScorecardsPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetScorecardsPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetScorecardsPreferences(ctx, req.(*GetScorecardsPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateScorecardsPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScorecardsPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateScorecardsPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateScorecardsPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateScorecardsPreferences(ctx, req.(*UpdateScorecardsPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetVoiceAnalyticsPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoiceAnalyticsPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetVoiceAnalyticsPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetVoiceAnalyticsPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetVoiceAnalyticsPreferences(ctx, req.(*GetVoiceAnalyticsPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListVoiceAnalyticsPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVoiceAnalyticsPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListVoiceAnalyticsPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListVoiceAnalyticsPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListVoiceAnalyticsPreferences(ctx, req.(*ListVoiceAnalyticsPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateVoiceAnalyticsPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoiceAnalyticsPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateVoiceAnalyticsPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateVoiceAnalyticsPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateVoiceAnalyticsPreferences(ctx, req.(*UpdateVoiceAnalyticsPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetEndOfDayPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndOfDayPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetEndOfDayPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetEndOfDayPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetEndOfDayPreferences(ctx, req.(*GetEndOfDayPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateEndOfDayPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEndOfDayPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateEndOfDayPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateEndOfDayPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateEndOfDayPreferences(ctx, req.(*UpdateEndOfDayPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetReportFilterPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilterPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetReportFilterPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetReportFilterPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetReportFilterPreferences(ctx, req.(*GetFilterPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateReportFilterPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilterPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateReportFilterPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateReportFilterPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateReportFilterPreferences(ctx, req.(*UpdateFilterPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetRecordingPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordingPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetRecordingPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetRecordingPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetRecordingPreferences(ctx, req.(*GetRecordingPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateRecordingPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordingPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateRecordingPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateRecordingPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateRecordingPreferences(ctx, req.(*UpdateRecordingPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAdminClientPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminClientPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAdminClientPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAdminClientPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAdminClientPreferences(ctx, req.(*GetAdminClientPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAdminClientPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminClientPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAdminClientPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAdminClientPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAdminClientPreferences(ctx, req.(*UpdateAdminClientPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AcceptLinkbackRecordingTerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptLinkbackRecordingTermsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AcceptLinkbackRecordingTerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AcceptLinkbackRecordingTerms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AcceptLinkbackRecordingTerms(ctx, req.(*AcceptLinkbackRecordingTermsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_LinkbackUpdateBroadcastTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkbackUpdateBroadcastTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).LinkbackUpdateBroadcastTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_LinkbackUpdateBroadcastTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).LinkbackUpdateBroadcastTemplates(ctx, req.(*LinkbackUpdateBroadcastTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RecordEmailUnsubscribeAcknowledgement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordEmailUnsubscribeAcknowledgementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RecordEmailUnsubscribeAcknowledgement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RecordEmailUnsubscribeAcknowledgement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RecordEmailUnsubscribeAcknowledgement(ctx, req.(*RecordEmailUnsubscribeAcknowledgementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ClearEmailUnsubscribeAcknowledgement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearEmailUnsubscribeAcknowledgementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ClearEmailUnsubscribeAcknowledgement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ClearEmailUnsubscribeAcknowledgement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ClearEmailUnsubscribeAcknowledgement(ctx, req.(*ClearEmailUnsubscribeAcknowledgementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListBusinessHours(ctx, req.(*ListBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetBusinessHours(ctx, req.(*GetBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SetBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SetBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SetBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SetBusinessHours(ctx, req.(*SetBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AddIntervalToBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIntervalToBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AddIntervalToBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AddIntervalToBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AddIntervalToBusinessHours(ctx, req.(*AddIntervalToBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RemoveIntervalFromBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIntervalFromBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RemoveIntervalFromBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RemoveIntervalFromBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RemoveIntervalFromBusinessHours(ctx, req.(*RemoveIntervalFromBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateBusinessHoursInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessHoursInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateBusinessHoursInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateBusinessHoursInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateBusinessHoursInfo(ctx, req.(*UpdateBusinessHoursInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteBusinessHours(ctx, req.(*DeleteBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_EvaluateBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).EvaluateBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_EvaluateBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).EvaluateBusinessHours(ctx, req.(*EvaluateBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateDelegatedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDelegatedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateDelegatedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateDelegatedUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateDelegatedUser(ctx, req.(*CreateDelegatedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetMyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetMyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetMyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetMyUser(ctx, req.(*GetMyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserByOrgId(ctx, req.(*GetUserByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListAgents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAgentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrgServer).ListAgents(m, &orgListAgentsServer{stream})
}

type Org_ListAgentsServer interface {
	Send(*ListAgentsResponse) error
	grpc.ServerStream
}

type orgListAgentsServer struct {
	grpc.ServerStream
}

func (x *orgListAgentsServer) Send(m *ListAgentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Org_ListPublicUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPublicUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrgServer).ListPublicUsers(m, &orgListPublicUsersServer{stream})
}

type Org_ListPublicUsersServer interface {
	Send(*ListPublicUsersResponse) error
	grpc.ServerStream
}

type orgListPublicUsersServer struct {
	grpc.ServerStream
}

func (x *orgListPublicUsersServer) Send(m *ListPublicUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Org_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrgServer).ListUsers(m, &orgListUsersServer{stream})
}

type Org_ListUsersServer interface {
	Send(*ListUsersResponse) error
	grpc.ServerStream
}

type orgListUsersServer struct {
	grpc.ServerStream
}

func (x *orgListUsersServer) Send(m *ListUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Org_ListUsersByOrgId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUsersByOrgIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrgServer).ListUsersByOrgId(m, &orgListUsersByOrgIdServer{stream})
}

type Org_ListUsersByOrgIdServer interface {
	Send(*ListUsersByOrgIdResponse) error
	grpc.ServerStream
}

type orgListUsersByOrgIdServer struct {
	grpc.ServerStream
}

func (x *orgListUsersByOrgIdServer) Send(m *ListUsersByOrgIdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Org_ListUsersByRegion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUsersByRegionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrgServer).ListUsersByRegion(m, &orgListUsersByRegionServer{stream})
}

type Org_ListUsersByRegionServer interface {
	Send(*ListUsersByRegionResponse) error
	grpc.ServerStream
}

type orgListUsersByRegionServer struct {
	grpc.ServerStream
}

func (x *orgListUsersByRegionServer) Send(m *ListUsersByRegionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Org_UpdateMyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateMyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateMyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateMyUser(ctx, req.(*UpdateMyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUserLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUserLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUserLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUserLabels(ctx, req.(*UpdateUserLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUserCallerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserCallerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUserCallerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUserCallerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUserCallerId(ctx, req.(*UpdateUserCallerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUserDisabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDisabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUserDisabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUserDisabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUserDisabled(ctx, req.(*UpdateUserDisabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUserDisabledByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDisabledByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUserDisabledByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUserDisabledByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUserDisabledByOrgId(ctx, req.(*UpdateUserDisabledByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetMyUserPasswordResetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyUserPasswordResetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetMyUserPasswordResetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetMyUserPasswordResetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetMyUserPasswordResetLink(ctx, req.(*GetMyUserPasswordResetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserPasswordResetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPasswordResetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserPasswordResetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserPasswordResetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserPasswordResetLink(ctx, req.(*GetUserPasswordResetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserPasswordResetLinkByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPasswordResetLinkByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserPasswordResetLinkByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserPasswordResetLinkByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserPasswordResetLinkByOrgId(ctx, req.(*GetUserPasswordResetLinkByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreatePasswordResetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasswordResetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreatePasswordResetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreatePasswordResetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreatePasswordResetLink(ctx, req.(*CreatePasswordResetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreatePasswordResetLinkByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasswordResetLinkByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreatePasswordResetLinkByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreatePasswordResetLinkByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreatePasswordResetLinkByOrgId(ctx, req.(*CreatePasswordResetLinkByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserLoginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLoginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserLoginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserLoginInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserLoginInfo(ctx, req.(*GetUserLoginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserEmailVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserEmailVerifiedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserEmailVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserEmailVerified_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserEmailVerified(ctx, req.(*GetUserEmailVerifiedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserEmailVerifiedByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserEmailVerifiedByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserEmailVerifiedByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserEmailVerifiedByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserEmailVerifiedByOrgId(ctx, req.(*GetUserEmailVerifiedByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ResetMyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetMyPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ResetMyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ResetMyPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ResetMyPassword(ctx, req.(*ResetMyPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ResetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ResetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ResetUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ResetUserPassword(ctx, req.(*ResetUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ResetUserPasswordByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserPasswordByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ResetUserPasswordByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ResetUserPasswordByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ResetUserPasswordByOrgId(ctx, req.(*ResetUserPasswordByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SendUserEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUserEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SendUserEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SendUserEmailVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SendUserEmailVerification(ctx, req.(*SendUserEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SendUserEmailVerificationByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUserEmailVerificationByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SendUserEmailVerificationByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SendUserEmailVerificationByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SendUserEmailVerificationByOrgId(ctx, req.(*SendUserEmailVerificationByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SendPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SendPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SendPasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SendPasswordReset(ctx, req.(*SendPasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SendPasswordResetByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPasswordResetByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SendPasswordResetByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SendPasswordResetByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SendPasswordResetByOrgId(ctx, req.(*SendPasswordResetByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserSessionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSessionDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserSessionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserSessionData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserSessionData(ctx, req.(*GetUserSessionDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAgentProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAgentProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAgentProfileGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAgentProfileGroup(ctx, req.(*GetAgentProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListAgentProfileGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentProfileGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListAgentProfileGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListAgentProfileGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListAgentProfileGroups(ctx, req.(*ListAgentProfileGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAgentProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAgentProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAgentProfileGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAgentProfileGroup(ctx, req.(*UpdateAgentProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateAgentProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateAgentProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateAgentProfileGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateAgentProfileGroup(ctx, req.(*CreateAgentProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteAgentProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteAgentProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteAgentProfileGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteAgentProfileGroup(ctx, req.(*DeleteAgentProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AssignAgentProfileGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAgentProfileGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AssignAgentProfileGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AssignAgentProfileGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AssignAgentProfileGroups(ctx, req.(*AssignAgentProfileGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AddUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AddUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AddUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AddUserSubscription(ctx, req.(*AddUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AddUserSubscriptionByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserSubscriptionByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AddUserSubscriptionByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AddUserSubscriptionByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AddUserSubscriptionByUserId(ctx, req.(*AddUserSubscriptionByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserSubscription(ctx, req.(*GetUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserSubscriptionByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubscriptionByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserSubscriptionByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserSubscriptionByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserSubscriptionByUserId(ctx, req.(*GetUserSubscriptionByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUserSubscription(ctx, req.(*UpdateUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateUserSubscriptionByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSubscriptionByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateUserSubscriptionByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateUserSubscriptionByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateUserSubscriptionByUserId(ctx, req.(*UpdateUserSubscriptionByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RemoveUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RemoveUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RemoveUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RemoveUserSubscription(ctx, req.(*RemoveUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RemoveUserSubscriptionByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserSubscriptionByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RemoveUserSubscriptionByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RemoveUserSubscriptionByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RemoveUserSubscriptionByUserId(ctx, req.(*RemoveUserSubscriptionByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListUserSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListUserSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListUserSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListUserSubscriptions(ctx, req.(*ListUserSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListUserSubscriptionsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserSubscriptionsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListUserSubscriptionsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListUserSubscriptionsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListUserSubscriptionsByUserId(ctx, req.(*ListUserSubscriptionsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListOrgSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListOrgSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListOrgSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListOrgSubscriptions(ctx, req.(*ListOrgSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateAuthToken(ctx, req.(*CreateAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateAuthTokenByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthTokenByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateAuthTokenByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateAuthTokenByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateAuthTokenByUserId(ctx, req.(*CreateAuthTokenByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListAuthTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListAuthTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListAuthTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListAuthTokens(ctx, req.(*ListAuthTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListAuthTokensByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthTokensByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListAuthTokensByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListAuthTokensByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListAuthTokensByUserId(ctx, req.(*ListAuthTokensByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SetAuthTokenExpiration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAuthTokenExpirationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SetAuthTokenExpiration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SetAuthTokenExpiration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SetAuthTokenExpiration(ctx, req.(*SetAuthTokenExpirationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SetAuthTokenExpirationByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAuthTokenExpirationByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SetAuthTokenExpirationByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SetAuthTokenExpirationByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SetAuthTokenExpirationByUserId(ctx, req.(*SetAuthTokenExpirationByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteAuthToken(ctx, req.(*DeleteAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteAuthTokenByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthTokenByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteAuthTokenByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteAuthTokenByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteAuthTokenByUserId(ctx, req.(*DeleteAuthTokenByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetHuntGroupSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuntGroupSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetHuntGroupSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetHuntGroupSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetHuntGroupSettings(ctx, req.(*GetHuntGroupSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateHuntGroupSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHuntGroupSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateHuntGroupSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateHuntGroupSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateHuntGroupSettings(ctx, req.(*UpdateHuntGroupSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateHuntGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHuntGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateHuntGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateHuntGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateHuntGroup(ctx, req.(*CreateHuntGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateHuntGroupGeneralDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHuntGroupGeneralDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateHuntGroupGeneralDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateHuntGroupGeneralDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateHuntGroupGeneralDetails(ctx, req.(*UpdateHuntGroupGeneralDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteHuntGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHuntGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteHuntGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteHuntGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteHuntGroup(ctx, req.(*DeleteHuntGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetHuntGroupDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuntGroupDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetHuntGroupDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetHuntGroupDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetHuntGroupDetails(ctx, req.(*GetHuntGroupDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListCallerIdBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCallerIdBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListCallerIdBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListCallerIdBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListCallerIdBuckets(ctx, req.(*ListCallerIdBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetDataDipTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataDipTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetDataDipTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetDataDipTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetDataDipTemplate(ctx, req.(*GetDataDipTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListDataDipTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataDipTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListDataDipTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListDataDipTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListDataDipTemplates(ctx, req.(*ListDataDipTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateDataDipTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataDipTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateDataDipTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateDataDipTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateDataDipTemplate(ctx, req.(*CreateDataDipTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateDataDipTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataDipTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateDataDipTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateDataDipTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateDataDipTemplate(ctx, req.(*UpdateDataDipTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteDataDipTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataDipTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteDataDipTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteDataDipTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteDataDipTemplate(ctx, req.(*DeleteDataDipTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CopyDataDipTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyDataDipTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CopyDataDipTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CopyDataDipTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CopyDataDipTemplate(ctx, req.(*CopyDataDipTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CopyDataDipTemplateToOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyDataDipTemplateToOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CopyDataDipTemplateToOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CopyDataDipTemplateToOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CopyDataDipTemplateToOrganization(ctx, req.(*CopyDataDipTemplateToOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListBroadcastTemplateGeneralDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBroadcastTemplateGeneralDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListBroadcastTemplateGeneralDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListBroadcastTemplateGeneralDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListBroadcastTemplateGeneralDetails(ctx, req.(*ListBroadcastTemplateGeneralDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListAgentResponseAutoRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentResponseAutoRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListAgentResponseAutoRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListAgentResponseAutoRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListAgentResponseAutoRules(ctx, req.(*ListAgentResponseAutoRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateAgentResponseAutoRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentResponseAutoRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateAgentResponseAutoRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateAgentResponseAutoRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateAgentResponseAutoRules(ctx, req.(*CreateAgentResponseAutoRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAgentResponseAutoRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentResponseAutoRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAgentResponseAutoRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAgentResponseAutoRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAgentResponseAutoRules(ctx, req.(*UpdateAgentResponseAutoRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteAgentResponseAutoRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentResponseAutoRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteAgentResponseAutoRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteAgentResponseAutoRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteAgentResponseAutoRules(ctx, req.(*DeleteAgentResponseAutoRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListHuntGroupWebLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHuntGroupWebLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListHuntGroupWebLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListHuntGroupWebLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListHuntGroupWebLinks(ctx, req.(*ListHuntGroupWebLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CopyHuntGroupWebLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyHuntGroupWebLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CopyHuntGroupWebLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CopyHuntGroupWebLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CopyHuntGroupWebLink(ctx, req.(*CopyHuntGroupWebLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateHuntGroupWebLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHuntGroupWebLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateHuntGroupWebLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateHuntGroupWebLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateHuntGroupWebLinks(ctx, req.(*UpdateHuntGroupWebLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListHuntGroupIntegrationLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHuntGroupIntegrationLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListHuntGroupIntegrationLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListHuntGroupIntegrationLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListHuntGroupIntegrationLinks(ctx, req.(*ListHuntGroupIntegrationLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CopyHuntGroupIntegrationLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyHuntGroupIntegrationLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CopyHuntGroupIntegrationLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CopyHuntGroupIntegrationLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CopyHuntGroupIntegrationLink(ctx, req.(*CopyHuntGroupIntegrationLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateHuntGroupIntegrationLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHuntGroupIntegrationLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateHuntGroupIntegrationLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateHuntGroupIntegrationLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateHuntGroupIntegrationLinks(ctx, req.(*UpdateHuntGroupIntegrationLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetHuntGroupClientInfoDisplayTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuntGroupClientInfoDisplayTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetHuntGroupClientInfoDisplayTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetHuntGroupClientInfoDisplayTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetHuntGroupClientInfoDisplayTemplate(ctx, req.(*GetHuntGroupClientInfoDisplayTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateHuntGroupClientInfoDisplayTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHuntGroupClientInfoDisplayTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateHuntGroupClientInfoDisplayTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateHuntGroupClientInfoDisplayTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateHuntGroupClientInfoDisplayTemplate(ctx, req.(*CreateHuntGroupClientInfoDisplayTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateHuntGroupClientInfoDisplayTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHuntGroupClientInfoDisplayTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateHuntGroupClientInfoDisplayTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateHuntGroupClientInfoDisplayTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateHuntGroupClientInfoDisplayTemplate(ctx, req.(*UpdateHuntGroupClientInfoDisplayTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteHuntGroupClientInfoDisplayTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHuntGroupClientInfoDisplayTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteHuntGroupClientInfoDisplayTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteHuntGroupClientInfoDisplayTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteHuntGroupClientInfoDisplayTemplate(ctx, req.(*DeleteHuntGroupClientInfoDisplayTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CopyHuntGroupClientInfoDisplayTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyHuntGroupClientInfoDisplayTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CopyHuntGroupClientInfoDisplayTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CopyHuntGroupClientInfoDisplayTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CopyHuntGroupClientInfoDisplayTemplate(ctx, req.(*CopyHuntGroupClientInfoDisplayTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateCampaignClientInfoDisplayTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampaignClientInfoDisplayTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateCampaignClientInfoDisplayTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateCampaignClientInfoDisplayTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateCampaignClientInfoDisplayTemplate(ctx, req.(*CreateCampaignClientInfoDisplayTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListHuntGroupsWithClientInfoTemplateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHuntGroupsWithClientInfoTemplateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListHuntGroupsWithClientInfoTemplateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListHuntGroupsWithClientInfoTemplateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListHuntGroupsWithClientInfoTemplateData(ctx, req.(*ListHuntGroupsWithClientInfoTemplateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListAgentTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentTriggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListAgentTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListAgentTriggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListAgentTriggers(ctx, req.(*ListAgentTriggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CopyAgentTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyAgentTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CopyAgentTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CopyAgentTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CopyAgentTrigger(ctx, req.(*CopyAgentTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateAgentTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentTriggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateAgentTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateAgentTriggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateAgentTriggers(ctx, req.(*UpdateAgentTriggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListHuntGroupScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHuntGroupScriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListHuntGroupScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListHuntGroupScripts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListHuntGroupScripts(ctx, req.(*ListHuntGroupScriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListOrgHuntGroupScripts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListHuntGroupScriptsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrgServer).ListOrgHuntGroupScripts(m, &orgListOrgHuntGroupScriptsServer{stream})
}

type Org_ListOrgHuntGroupScriptsServer interface {
	Send(*ListHuntGroupScriptsResponse) error
	grpc.ServerStream
}

type orgListOrgHuntGroupScriptsServer struct {
	grpc.ServerStream
}

func (x *orgListOrgHuntGroupScriptsServer) Send(m *ListHuntGroupScriptsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Org_GetHuntGroupScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuntGroupScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetHuntGroupScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetHuntGroupScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetHuntGroupScript(ctx, req.(*GetHuntGroupScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateHuntGroupScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHuntGroupScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateHuntGroupScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateHuntGroupScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateHuntGroupScript(ctx, req.(*CreateHuntGroupScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateHuntGroupScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHuntGroupScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateHuntGroupScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateHuntGroupScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateHuntGroupScript(ctx, req.(*UpdateHuntGroupScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteHuntGroupScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHuntGroupScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteHuntGroupScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteHuntGroupScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteHuntGroupScript(ctx, req.(*DeleteHuntGroupScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AssignScriptToHuntGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignScriptToHuntGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AssignScriptToHuntGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AssignScriptToHuntGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AssignScriptToHuntGroups(ctx, req.(*AssignScriptToHuntGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UnassignScriptFromHuntGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignScriptFromHuntGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UnassignScriptFromHuntGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UnassignScriptFromHuntGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UnassignScriptFromHuntGroups(ctx, req.(*UnassignScriptFromHuntGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateTrust(ctx, req.(*CreateTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AcceptTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AcceptTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AcceptTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AcceptTrust(ctx, req.(*AcceptTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RejectTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RejectTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RejectTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RejectTrust(ctx, req.(*RejectTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetTrust(ctx, req.(*GetTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListIncomingTrusts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIncomingTrustsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListIncomingTrusts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListIncomingTrusts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListIncomingTrusts(ctx, req.(*ListIncomingTrustsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListGivenTrusts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGivenTrustsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListGivenTrusts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListGivenTrusts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListGivenTrusts(ctx, req.(*ListGivenTrustsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListAssignableTrusts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssignableTrustsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListAssignableTrusts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListAssignableTrusts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListAssignableTrusts(ctx, req.(*ListAssignableTrustsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteTrust(ctx, req.(*DeleteTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AssignTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AssignTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AssignTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AssignTrust(ctx, req.(*AssignTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UnassignTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UnassignTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UnassignTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UnassignTrust(ctx, req.(*UnassignTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateLabel(ctx, req.(*CreateLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteLabel(ctx, req.(*DeleteLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListLabels(ctx, req.(*ListLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetLabel(ctx, req.(*GetLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateLabel(ctx, req.(*UpdateLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AssignLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AssignLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AssignLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AssignLabel(ctx, req.(*AssignLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UnassignLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UnassignLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UnassignLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UnassignLabel(ctx, req.(*UnassignLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAssignmentCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignmentCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAssignmentCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAssignmentCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAssignmentCounts(ctx, req.(*GetAssignmentCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAssignableLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignableLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAssignableLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAssignableLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAssignableLabels(ctx, req.(*GetAssignableLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetPermissions(ctx, req.(*GetPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserPermissions(ctx, req.(*GetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreatePermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreatePermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreatePermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreatePermissionGroup(ctx, req.(*CreatePermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdatePermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdatePermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdatePermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdatePermissionGroup(ctx, req.(*UpdatePermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeletePermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeletePermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeletePermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeletePermissionGroup(ctx, req.(*DeletePermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListPermissionGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListPermissionGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListPermissionGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListPermissionGroups(ctx, req.(*ListPermissionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListPermissionGroupsByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionGroupsByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListPermissionGroupsByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListPermissionGroupsByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListPermissionGroupsByOrgId(ctx, req.(*ListPermissionGroupsByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AssignUsersPermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUsersPermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AssignUsersPermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AssignUsersPermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AssignUsersPermissionGroup(ctx, req.(*AssignUsersPermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RevokeUsersPermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeUsersPermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RevokeUsersPermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RevokeUsersPermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RevokeUsersPermissionGroup(ctx, req.(*RevokeUsersPermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AssignLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AssignLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AssignLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AssignLabels(ctx, req.(*AssignLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RevokeLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RevokeLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RevokeLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RevokeLabels(ctx, req.(*RevokeLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AssignAccountOwnerPermissionToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAccountOwnerPermissionToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AssignAccountOwnerPermissionToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AssignAccountOwnerPermissionToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AssignAccountOwnerPermissionToUser(ctx, req.(*AssignAccountOwnerPermissionToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RevokeAccountOwnerPermissionFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAccountOwnerPermissionFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RevokeAccountOwnerPermissionFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RevokeAccountOwnerPermissionFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RevokeAccountOwnerPermissionFromUser(ctx, req.(*RevokeAccountOwnerPermissionFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_InitDefaultPermissionGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitDefaultPermissionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).InitDefaultPermissionGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_InitDefaultPermissionGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).InitDefaultPermissionGroups(ctx, req.(*InitDefaultPermissionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetAccountOwnerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountOwnerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetAccountOwnerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetAccountOwnerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetAccountOwnerGroup(ctx, req.(*GetAccountOwnerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetLicenses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetLicenses(ctx, req.(*GetLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetOrgLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetOrgLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetOrgLicenses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetOrgLicenses(ctx, req.(*GetOrgLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateLicenses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateLicenses(ctx, req.(*UpdateLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RemovePermissionFromAllPermissionGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePermissionFromAllPermissionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RemovePermissionFromAllPermissionGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RemovePermissionFromAllPermissionGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RemovePermissionFromAllPermissionGroups(ctx, req.(*RemovePermissionFromAllPermissionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListP3PermissionGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListP3PermissionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListP3PermissionGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListP3PermissionGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListP3PermissionGroups(ctx, req.(*ListP3PermissionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListP3PermissionGroupsByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListP3PermissionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListP3PermissionGroupsByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListP3PermissionGroupsByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListP3PermissionGroupsByOrgId(ctx, req.(*ListP3PermissionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateP3PermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateP3PermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateP3PermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateP3PermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateP3PermissionGroup(ctx, req.(*CreateP3PermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateP3PermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateP3PermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateP3PermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateP3PermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateP3PermissionGroup(ctx, req.(*UpdateP3PermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateP3PermissionGroupByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateP3PermissionGroupByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateP3PermissionGroupByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateP3PermissionGroupByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateP3PermissionGroupByOrgId(ctx, req.(*UpdateP3PermissionGroupByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteP3PermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteP3PermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteP3PermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteP3PermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteP3PermissionGroup(ctx, req.(*DeleteP3PermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AssignUsersP3PermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUsersP3PermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AssignUsersP3PermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AssignUsersP3PermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AssignUsersP3PermissionGroup(ctx, req.(*AssignUsersP3PermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RevokeUsersP3PermissionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeUsersP3PermissionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RevokeUsersP3PermissionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RevokeUsersP3PermissionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RevokeUsersP3PermissionGroup(ctx, req.(*RevokeUsersP3PermissionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RefreshMfaLockout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshMfaLockoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RefreshMfaLockout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RefreshMfaLockout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RefreshMfaLockout(ctx, req.(*RefreshMfaLockoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RefreshMfaLockoutByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshMfaLockoutByOrgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RefreshMfaLockoutByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RefreshMfaLockoutByOrgId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RefreshMfaLockoutByOrgId(ctx, req.(*RefreshMfaLockoutByOrgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SetMfaType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMfaTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SetMfaType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SetMfaType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SetMfaType(ctx, req.(*SetMfaTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_SetMyMfaType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMyMfaTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).SetMyMfaType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_SetMyMfaType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).SetMyMfaType(ctx, req.(*SetMyMfaTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_EnableUserMfa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableUserMfaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).EnableUserMfa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_EnableUserMfa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).EnableUserMfa(ctx, req.(*EnableUserMfaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_EnableMyUserMfa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableMyUserMfaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).EnableMyUserMfa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_EnableMyUserMfa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).EnableMyUserMfa(ctx, req.(*EnableMyUserMfaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetUserMfaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMfaInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetUserMfaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetUserMfaInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetUserMfaInfo(ctx, req.(*GetUserMfaInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetMyUserMfaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyUserMfaInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetMyUserMfaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetMyUserMfaInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetMyUserMfaInfo(ctx, req.(*GetMyUserMfaInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetMyAllowedMfaMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyAllowedMfaMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetMyAllowedMfaMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetMyAllowedMfaMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetMyAllowedMfaMethods(ctx, req.(*GetMyAllowedMfaMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateBusinessHours(ctx, req.(*CreateBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateBusinessHours(ctx, req.(*UpdateBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_AddGroupedUserIPRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupedUserIPRestrictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).AddGroupedUserIPRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_AddGroupedUserIPRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).AddGroupedUserIPRestrictions(ctx, req.(*AddGroupedUserIPRestrictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_RemoveGroupedUserIPRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupedUserIPRestrictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).RemoveGroupedUserIPRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_RemoveGroupedUserIPRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).RemoveGroupedUserIPRestrictions(ctx, req.(*RemoveGroupedUserIPRestrictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListUsersAllowedIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersAllowedIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListUsersAllowedIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListUsersAllowedIps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListUsersAllowedIps(ctx, req.(*ListUsersAllowedIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_ListResponseEvaluators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResponseEvaluatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).ListResponseEvaluators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_ListResponseEvaluators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).ListResponseEvaluators(ctx, req.(*ListResponseEvaluatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_GetResponseEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResponseEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).GetResponseEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_GetResponseEvaluator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).GetResponseEvaluator(ctx, req.(*GetResponseEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_CreateResponseEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResponseEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).CreateResponseEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_CreateResponseEvaluator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).CreateResponseEvaluator(ctx, req.(*CreateResponseEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_UpdateResponseEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResponseEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).UpdateResponseEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_UpdateResponseEvaluator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).UpdateResponseEvaluator(ctx, req.(*UpdateResponseEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_DeleteResponseEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResponseEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).DeleteResponseEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Org_DeleteResponseEvaluator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).DeleteResponseEvaluator(ctx, req.(*DeleteResponseEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Org_ServiceDesc is the grpc.ServiceDesc for Org service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Org_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.org.Org",
	HandlerType: (*OrgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganization",
			Handler:    _Org_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _Org_GetOrganization_Handler,
		},
		{
			MethodName: "GetOrganizationById",
			Handler:    _Org_GetOrganizationById_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _Org_UpdateOrganization_Handler,
		},
		{
			MethodName: "ArchiveOrganization",
			Handler:    _Org_ArchiveOrganization_Handler,
		},
		{
			MethodName: "UnArchiveOrganization",
			Handler:    _Org_UnArchiveOrganization_Handler,
		},
		{
			MethodName: "ConvertOrgToManual",
			Handler:    _Org_ConvertOrgToManual_Handler,
		},
		{
			MethodName: "GetOrganizationPreferences",
			Handler:    _Org_GetOrganizationPreferences_Handler,
		},
		{
			MethodName: "UpdateOrganizationPreferences",
			Handler:    _Org_UpdateOrganizationPreferences_Handler,
		},
		{
			MethodName: "GetAgentPreferences",
			Handler:    _Org_GetAgentPreferences_Handler,
		},
		{
			MethodName: "UpdateAgentPreferences",
			Handler:    _Org_UpdateAgentPreferences_Handler,
		},
		{
			MethodName: "GetContactPreferences",
			Handler:    _Org_GetContactPreferences_Handler,
		},
		{
			MethodName: "UpdateContactPreferences",
			Handler:    _Org_UpdateContactPreferences_Handler,
		},
		{
			MethodName: "GetAuthenticationPreferences",
			Handler:    _Org_GetAuthenticationPreferences_Handler,
		},
		{
			MethodName: "UpdateAuthenticationPreferences",
			Handler:    _Org_UpdateAuthenticationPreferences_Handler,
		},
		{
			MethodName: "GetWebhookPreferences",
			Handler:    _Org_GetWebhookPreferences_Handler,
		},
		{
			MethodName: "UpdateWebhookPreferences",
			Handler:    _Org_UpdateWebhookPreferences_Handler,
		},
		{
			MethodName: "GetDashboardGeneralPreferences",
			Handler:    _Org_GetDashboardGeneralPreferences_Handler,
		},
		{
			MethodName: "UpdateDashboardGeneralPreferences",
			Handler:    _Org_UpdateDashboardGeneralPreferences_Handler,
		},
		{
			MethodName: "GetDashboardQueuePreferences",
			Handler:    _Org_GetDashboardQueuePreferences_Handler,
		},
		{
			MethodName: "UpdateDashboardQueuePreferences",
			Handler:    _Org_UpdateDashboardQueuePreferences_Handler,
		},
		{
			MethodName: "GetPhonePreferences",
			Handler:    _Org_GetPhonePreferences_Handler,
		},
		{
			MethodName: "UpdatePhonePreferences",
			Handler:    _Org_UpdatePhonePreferences_Handler,
		},
		{
			MethodName: "GetCompliancePreferences",
			Handler:    _Org_GetCompliancePreferences_Handler,
		},
		{
			MethodName: "UpdateCompliancePreferences",
			Handler:    _Org_UpdateCompliancePreferences_Handler,
		},
		{
			MethodName: "GetBroadcastPreferences",
			Handler:    _Org_GetBroadcastPreferences_Handler,
		},
		{
			MethodName: "UpdateBroadcastPreferences",
			Handler:    _Org_UpdateBroadcastPreferences_Handler,
		},
		{
			MethodName: "GetSchedulePreferences",
			Handler:    _Org_GetSchedulePreferences_Handler,
		},
		{
			MethodName: "UpdateSchedulePreferences",
			Handler:    _Org_UpdateSchedulePreferences_Handler,
		},
		{
			MethodName: "GetEmailSmsPreferences",
			Handler:    _Org_GetEmailSmsPreferences_Handler,
		},
		{
			MethodName: "UpdateEmailSmsPreferences",
			Handler:    _Org_UpdateEmailSmsPreferences_Handler,
		},
		{
			MethodName: "GetBusinessPreferences",
			Handler:    _Org_GetBusinessPreferences_Handler,
		},
		{
			MethodName: "UpdateBusinessPreferences",
			Handler:    _Org_UpdateBusinessPreferences_Handler,
		},
		{
			MethodName: "UpdateAdminBusinessPreferences",
			Handler:    _Org_UpdateAdminBusinessPreferences_Handler,
		},
		{
			MethodName: "GetScorecardsPreferences",
			Handler:    _Org_GetScorecardsPreferences_Handler,
		},
		{
			MethodName: "UpdateScorecardsPreferences",
			Handler:    _Org_UpdateScorecardsPreferences_Handler,
		},
		{
			MethodName: "GetVoiceAnalyticsPreferences",
			Handler:    _Org_GetVoiceAnalyticsPreferences_Handler,
		},
		{
			MethodName: "ListVoiceAnalyticsPreferences",
			Handler:    _Org_ListVoiceAnalyticsPreferences_Handler,
		},
		{
			MethodName: "UpdateVoiceAnalyticsPreferences",
			Handler:    _Org_UpdateVoiceAnalyticsPreferences_Handler,
		},
		{
			MethodName: "GetEndOfDayPreferences",
			Handler:    _Org_GetEndOfDayPreferences_Handler,
		},
		{
			MethodName: "UpdateEndOfDayPreferences",
			Handler:    _Org_UpdateEndOfDayPreferences_Handler,
		},
		{
			MethodName: "GetReportFilterPreferences",
			Handler:    _Org_GetReportFilterPreferences_Handler,
		},
		{
			MethodName: "UpdateReportFilterPreferences",
			Handler:    _Org_UpdateReportFilterPreferences_Handler,
		},
		{
			MethodName: "GetRecordingPreferences",
			Handler:    _Org_GetRecordingPreferences_Handler,
		},
		{
			MethodName: "UpdateRecordingPreferences",
			Handler:    _Org_UpdateRecordingPreferences_Handler,
		},
		{
			MethodName: "GetAdminClientPreferences",
			Handler:    _Org_GetAdminClientPreferences_Handler,
		},
		{
			MethodName: "UpdateAdminClientPreferences",
			Handler:    _Org_UpdateAdminClientPreferences_Handler,
		},
		{
			MethodName: "AcceptLinkbackRecordingTerms",
			Handler:    _Org_AcceptLinkbackRecordingTerms_Handler,
		},
		{
			MethodName: "LinkbackUpdateBroadcastTemplates",
			Handler:    _Org_LinkbackUpdateBroadcastTemplates_Handler,
		},
		{
			MethodName: "RecordEmailUnsubscribeAcknowledgement",
			Handler:    _Org_RecordEmailUnsubscribeAcknowledgement_Handler,
		},
		{
			MethodName: "ClearEmailUnsubscribeAcknowledgement",
			Handler:    _Org_ClearEmailUnsubscribeAcknowledgement_Handler,
		},
		{
			MethodName: "ListBusinessHours",
			Handler:    _Org_ListBusinessHours_Handler,
		},
		{
			MethodName: "GetBusinessHours",
			Handler:    _Org_GetBusinessHours_Handler,
		},
		{
			MethodName: "SetBusinessHours",
			Handler:    _Org_SetBusinessHours_Handler,
		},
		{
			MethodName: "AddIntervalToBusinessHours",
			Handler:    _Org_AddIntervalToBusinessHours_Handler,
		},
		{
			MethodName: "RemoveIntervalFromBusinessHours",
			Handler:    _Org_RemoveIntervalFromBusinessHours_Handler,
		},
		{
			MethodName: "UpdateBusinessHoursInfo",
			Handler:    _Org_UpdateBusinessHoursInfo_Handler,
		},
		{
			MethodName: "DeleteBusinessHours",
			Handler:    _Org_DeleteBusinessHours_Handler,
		},
		{
			MethodName: "EvaluateBusinessHours",
			Handler:    _Org_EvaluateBusinessHours_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Org_CreateUser_Handler,
		},
		{
			MethodName: "CreateDelegatedUser",
			Handler:    _Org_CreateDelegatedUser_Handler,
		},
		{
			MethodName: "GetMyUser",
			Handler:    _Org_GetMyUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Org_GetUser_Handler,
		},
		{
			MethodName: "GetUserByOrgId",
			Handler:    _Org_GetUserByOrgId_Handler,
		},
		{
			MethodName: "UpdateMyUser",
			Handler:    _Org_UpdateMyUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Org_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserLabels",
			Handler:    _Org_UpdateUserLabels_Handler,
		},
		{
			MethodName: "UpdateUserCallerId",
			Handler:    _Org_UpdateUserCallerId_Handler,
		},
		{
			MethodName: "UpdateUserDisabled",
			Handler:    _Org_UpdateUserDisabled_Handler,
		},
		{
			MethodName: "UpdateUserDisabledByOrgId",
			Handler:    _Org_UpdateUserDisabledByOrgId_Handler,
		},
		{
			MethodName: "GetMyUserPasswordResetLink",
			Handler:    _Org_GetMyUserPasswordResetLink_Handler,
		},
		{
			MethodName: "GetUserPasswordResetLink",
			Handler:    _Org_GetUserPasswordResetLink_Handler,
		},
		{
			MethodName: "GetUserPasswordResetLinkByOrgId",
			Handler:    _Org_GetUserPasswordResetLinkByOrgId_Handler,
		},
		{
			MethodName: "CreatePasswordResetLink",
			Handler:    _Org_CreatePasswordResetLink_Handler,
		},
		{
			MethodName: "CreatePasswordResetLinkByOrgId",
			Handler:    _Org_CreatePasswordResetLinkByOrgId_Handler,
		},
		{
			MethodName: "GetUserLoginInfo",
			Handler:    _Org_GetUserLoginInfo_Handler,
		},
		{
			MethodName: "GetUserEmailVerified",
			Handler:    _Org_GetUserEmailVerified_Handler,
		},
		{
			MethodName: "GetUserEmailVerifiedByOrgId",
			Handler:    _Org_GetUserEmailVerifiedByOrgId_Handler,
		},
		{
			MethodName: "ResetMyPassword",
			Handler:    _Org_ResetMyPassword_Handler,
		},
		{
			MethodName: "ResetUserPassword",
			Handler:    _Org_ResetUserPassword_Handler,
		},
		{
			MethodName: "ResetUserPasswordByOrgId",
			Handler:    _Org_ResetUserPasswordByOrgId_Handler,
		},
		{
			MethodName: "SendUserEmailVerification",
			Handler:    _Org_SendUserEmailVerification_Handler,
		},
		{
			MethodName: "SendUserEmailVerificationByOrgId",
			Handler:    _Org_SendUserEmailVerificationByOrgId_Handler,
		},
		{
			MethodName: "SendPasswordReset",
			Handler:    _Org_SendPasswordReset_Handler,
		},
		{
			MethodName: "SendPasswordResetByOrgId",
			Handler:    _Org_SendPasswordResetByOrgId_Handler,
		},
		{
			MethodName: "GetUserSessionData",
			Handler:    _Org_GetUserSessionData_Handler,
		},
		{
			MethodName: "GetAgentProfileGroup",
			Handler:    _Org_GetAgentProfileGroup_Handler,
		},
		{
			MethodName: "ListAgentProfileGroups",
			Handler:    _Org_ListAgentProfileGroups_Handler,
		},
		{
			MethodName: "UpdateAgentProfileGroup",
			Handler:    _Org_UpdateAgentProfileGroup_Handler,
		},
		{
			MethodName: "CreateAgentProfileGroup",
			Handler:    _Org_CreateAgentProfileGroup_Handler,
		},
		{
			MethodName: "DeleteAgentProfileGroup",
			Handler:    _Org_DeleteAgentProfileGroup_Handler,
		},
		{
			MethodName: "AssignAgentProfileGroups",
			Handler:    _Org_AssignAgentProfileGroups_Handler,
		},
		{
			MethodName: "AddUserSubscription",
			Handler:    _Org_AddUserSubscription_Handler,
		},
		{
			MethodName: "AddUserSubscriptionByUserId",
			Handler:    _Org_AddUserSubscriptionByUserId_Handler,
		},
		{
			MethodName: "GetUserSubscription",
			Handler:    _Org_GetUserSubscription_Handler,
		},
		{
			MethodName: "GetUserSubscriptionByUserId",
			Handler:    _Org_GetUserSubscriptionByUserId_Handler,
		},
		{
			MethodName: "UpdateUserSubscription",
			Handler:    _Org_UpdateUserSubscription_Handler,
		},
		{
			MethodName: "UpdateUserSubscriptionByUserId",
			Handler:    _Org_UpdateUserSubscriptionByUserId_Handler,
		},
		{
			MethodName: "RemoveUserSubscription",
			Handler:    _Org_RemoveUserSubscription_Handler,
		},
		{
			MethodName: "RemoveUserSubscriptionByUserId",
			Handler:    _Org_RemoveUserSubscriptionByUserId_Handler,
		},
		{
			MethodName: "ListUserSubscriptions",
			Handler:    _Org_ListUserSubscriptions_Handler,
		},
		{
			MethodName: "ListUserSubscriptionsByUserId",
			Handler:    _Org_ListUserSubscriptionsByUserId_Handler,
		},
		{
			MethodName: "ListOrgSubscriptions",
			Handler:    _Org_ListOrgSubscriptions_Handler,
		},
		{
			MethodName: "CreateAuthToken",
			Handler:    _Org_CreateAuthToken_Handler,
		},
		{
			MethodName: "CreateAuthTokenByUserId",
			Handler:    _Org_CreateAuthTokenByUserId_Handler,
		},
		{
			MethodName: "ListAuthTokens",
			Handler:    _Org_ListAuthTokens_Handler,
		},
		{
			MethodName: "ListAuthTokensByUserId",
			Handler:    _Org_ListAuthTokensByUserId_Handler,
		},
		{
			MethodName: "SetAuthTokenExpiration",
			Handler:    _Org_SetAuthTokenExpiration_Handler,
		},
		{
			MethodName: "SetAuthTokenExpirationByUserId",
			Handler:    _Org_SetAuthTokenExpirationByUserId_Handler,
		},
		{
			MethodName: "DeleteAuthToken",
			Handler:    _Org_DeleteAuthToken_Handler,
		},
		{
			MethodName: "DeleteAuthTokenByUserId",
			Handler:    _Org_DeleteAuthTokenByUserId_Handler,
		},
		{
			MethodName: "GetHuntGroupSettings",
			Handler:    _Org_GetHuntGroupSettings_Handler,
		},
		{
			MethodName: "UpdateHuntGroupSettings",
			Handler:    _Org_UpdateHuntGroupSettings_Handler,
		},
		{
			MethodName: "CreateHuntGroup",
			Handler:    _Org_CreateHuntGroup_Handler,
		},
		{
			MethodName: "UpdateHuntGroupGeneralDetails",
			Handler:    _Org_UpdateHuntGroupGeneralDetails_Handler,
		},
		{
			MethodName: "DeleteHuntGroup",
			Handler:    _Org_DeleteHuntGroup_Handler,
		},
		{
			MethodName: "GetHuntGroupDetails",
			Handler:    _Org_GetHuntGroupDetails_Handler,
		},
		{
			MethodName: "ListCallerIdBuckets",
			Handler:    _Org_ListCallerIdBuckets_Handler,
		},
		{
			MethodName: "GetDataDipTemplate",
			Handler:    _Org_GetDataDipTemplate_Handler,
		},
		{
			MethodName: "ListDataDipTemplates",
			Handler:    _Org_ListDataDipTemplates_Handler,
		},
		{
			MethodName: "CreateDataDipTemplate",
			Handler:    _Org_CreateDataDipTemplate_Handler,
		},
		{
			MethodName: "UpdateDataDipTemplate",
			Handler:    _Org_UpdateDataDipTemplate_Handler,
		},
		{
			MethodName: "DeleteDataDipTemplate",
			Handler:    _Org_DeleteDataDipTemplate_Handler,
		},
		{
			MethodName: "CopyDataDipTemplate",
			Handler:    _Org_CopyDataDipTemplate_Handler,
		},
		{
			MethodName: "CopyDataDipTemplateToOrganization",
			Handler:    _Org_CopyDataDipTemplateToOrganization_Handler,
		},
		{
			MethodName: "ListBroadcastTemplateGeneralDetails",
			Handler:    _Org_ListBroadcastTemplateGeneralDetails_Handler,
		},
		{
			MethodName: "ListAgentResponseAutoRules",
			Handler:    _Org_ListAgentResponseAutoRules_Handler,
		},
		{
			MethodName: "CreateAgentResponseAutoRules",
			Handler:    _Org_CreateAgentResponseAutoRules_Handler,
		},
		{
			MethodName: "UpdateAgentResponseAutoRules",
			Handler:    _Org_UpdateAgentResponseAutoRules_Handler,
		},
		{
			MethodName: "DeleteAgentResponseAutoRules",
			Handler:    _Org_DeleteAgentResponseAutoRules_Handler,
		},
		{
			MethodName: "ListHuntGroupWebLinks",
			Handler:    _Org_ListHuntGroupWebLinks_Handler,
		},
		{
			MethodName: "CopyHuntGroupWebLink",
			Handler:    _Org_CopyHuntGroupWebLink_Handler,
		},
		{
			MethodName: "UpdateHuntGroupWebLinks",
			Handler:    _Org_UpdateHuntGroupWebLinks_Handler,
		},
		{
			MethodName: "ListHuntGroupIntegrationLinks",
			Handler:    _Org_ListHuntGroupIntegrationLinks_Handler,
		},
		{
			MethodName: "CopyHuntGroupIntegrationLink",
			Handler:    _Org_CopyHuntGroupIntegrationLink_Handler,
		},
		{
			MethodName: "UpdateHuntGroupIntegrationLinks",
			Handler:    _Org_UpdateHuntGroupIntegrationLinks_Handler,
		},
		{
			MethodName: "GetHuntGroupClientInfoDisplayTemplate",
			Handler:    _Org_GetHuntGroupClientInfoDisplayTemplate_Handler,
		},
		{
			MethodName: "CreateHuntGroupClientInfoDisplayTemplate",
			Handler:    _Org_CreateHuntGroupClientInfoDisplayTemplate_Handler,
		},
		{
			MethodName: "UpdateHuntGroupClientInfoDisplayTemplate",
			Handler:    _Org_UpdateHuntGroupClientInfoDisplayTemplate_Handler,
		},
		{
			MethodName: "DeleteHuntGroupClientInfoDisplayTemplate",
			Handler:    _Org_DeleteHuntGroupClientInfoDisplayTemplate_Handler,
		},
		{
			MethodName: "CopyHuntGroupClientInfoDisplayTemplate",
			Handler:    _Org_CopyHuntGroupClientInfoDisplayTemplate_Handler,
		},
		{
			MethodName: "CreateCampaignClientInfoDisplayTemplate",
			Handler:    _Org_CreateCampaignClientInfoDisplayTemplate_Handler,
		},
		{
			MethodName: "ListHuntGroupsWithClientInfoTemplateData",
			Handler:    _Org_ListHuntGroupsWithClientInfoTemplateData_Handler,
		},
		{
			MethodName: "ListAgentTriggers",
			Handler:    _Org_ListAgentTriggers_Handler,
		},
		{
			MethodName: "CopyAgentTrigger",
			Handler:    _Org_CopyAgentTrigger_Handler,
		},
		{
			MethodName: "UpdateAgentTriggers",
			Handler:    _Org_UpdateAgentTriggers_Handler,
		},
		{
			MethodName: "ListHuntGroupScripts",
			Handler:    _Org_ListHuntGroupScripts_Handler,
		},
		{
			MethodName: "GetHuntGroupScript",
			Handler:    _Org_GetHuntGroupScript_Handler,
		},
		{
			MethodName: "CreateHuntGroupScript",
			Handler:    _Org_CreateHuntGroupScript_Handler,
		},
		{
			MethodName: "UpdateHuntGroupScript",
			Handler:    _Org_UpdateHuntGroupScript_Handler,
		},
		{
			MethodName: "DeleteHuntGroupScript",
			Handler:    _Org_DeleteHuntGroupScript_Handler,
		},
		{
			MethodName: "AssignScriptToHuntGroups",
			Handler:    _Org_AssignScriptToHuntGroups_Handler,
		},
		{
			MethodName: "UnassignScriptFromHuntGroups",
			Handler:    _Org_UnassignScriptFromHuntGroups_Handler,
		},
		{
			MethodName: "CreateTrust",
			Handler:    _Org_CreateTrust_Handler,
		},
		{
			MethodName: "AcceptTrust",
			Handler:    _Org_AcceptTrust_Handler,
		},
		{
			MethodName: "RejectTrust",
			Handler:    _Org_RejectTrust_Handler,
		},
		{
			MethodName: "GetTrust",
			Handler:    _Org_GetTrust_Handler,
		},
		{
			MethodName: "ListIncomingTrusts",
			Handler:    _Org_ListIncomingTrusts_Handler,
		},
		{
			MethodName: "ListGivenTrusts",
			Handler:    _Org_ListGivenTrusts_Handler,
		},
		{
			MethodName: "ListAssignableTrusts",
			Handler:    _Org_ListAssignableTrusts_Handler,
		},
		{
			MethodName: "DeleteTrust",
			Handler:    _Org_DeleteTrust_Handler,
		},
		{
			MethodName: "AssignTrust",
			Handler:    _Org_AssignTrust_Handler,
		},
		{
			MethodName: "UnassignTrust",
			Handler:    _Org_UnassignTrust_Handler,
		},
		{
			MethodName: "CreateLabel",
			Handler:    _Org_CreateLabel_Handler,
		},
		{
			MethodName: "DeleteLabel",
			Handler:    _Org_DeleteLabel_Handler,
		},
		{
			MethodName: "ListLabels",
			Handler:    _Org_ListLabels_Handler,
		},
		{
			MethodName: "GetLabel",
			Handler:    _Org_GetLabel_Handler,
		},
		{
			MethodName: "UpdateLabel",
			Handler:    _Org_UpdateLabel_Handler,
		},
		{
			MethodName: "AssignLabel",
			Handler:    _Org_AssignLabel_Handler,
		},
		{
			MethodName: "UnassignLabel",
			Handler:    _Org_UnassignLabel_Handler,
		},
		{
			MethodName: "GetAssignmentCounts",
			Handler:    _Org_GetAssignmentCounts_Handler,
		},
		{
			MethodName: "GetAssignableLabels",
			Handler:    _Org_GetAssignableLabels_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _Org_GetPermissions_Handler,
		},
		{
			MethodName: "GetUserPermissions",
			Handler:    _Org_GetUserPermissions_Handler,
		},
		{
			MethodName: "CreatePermissionGroup",
			Handler:    _Org_CreatePermissionGroup_Handler,
		},
		{
			MethodName: "UpdatePermissionGroup",
			Handler:    _Org_UpdatePermissionGroup_Handler,
		},
		{
			MethodName: "DeletePermissionGroup",
			Handler:    _Org_DeletePermissionGroup_Handler,
		},
		{
			MethodName: "ListPermissionGroups",
			Handler:    _Org_ListPermissionGroups_Handler,
		},
		{
			MethodName: "ListPermissionGroupsByOrgId",
			Handler:    _Org_ListPermissionGroupsByOrgId_Handler,
		},
		{
			MethodName: "AssignUsersPermissionGroup",
			Handler:    _Org_AssignUsersPermissionGroup_Handler,
		},
		{
			MethodName: "RevokeUsersPermissionGroup",
			Handler:    _Org_RevokeUsersPermissionGroup_Handler,
		},
		{
			MethodName: "AssignLabels",
			Handler:    _Org_AssignLabels_Handler,
		},
		{
			MethodName: "RevokeLabels",
			Handler:    _Org_RevokeLabels_Handler,
		},
		{
			MethodName: "AssignAccountOwnerPermissionToUser",
			Handler:    _Org_AssignAccountOwnerPermissionToUser_Handler,
		},
		{
			MethodName: "RevokeAccountOwnerPermissionFromUser",
			Handler:    _Org_RevokeAccountOwnerPermissionFromUser_Handler,
		},
		{
			MethodName: "InitDefaultPermissionGroups",
			Handler:    _Org_InitDefaultPermissionGroups_Handler,
		},
		{
			MethodName: "GetAccountOwnerGroup",
			Handler:    _Org_GetAccountOwnerGroup_Handler,
		},
		{
			MethodName: "GetLicenses",
			Handler:    _Org_GetLicenses_Handler,
		},
		{
			MethodName: "GetOrgLicenses",
			Handler:    _Org_GetOrgLicenses_Handler,
		},
		{
			MethodName: "UpdateLicenses",
			Handler:    _Org_UpdateLicenses_Handler,
		},
		{
			MethodName: "RemovePermissionFromAllPermissionGroups",
			Handler:    _Org_RemovePermissionFromAllPermissionGroups_Handler,
		},
		{
			MethodName: "ListP3PermissionGroups",
			Handler:    _Org_ListP3PermissionGroups_Handler,
		},
		{
			MethodName: "ListP3PermissionGroupsByOrgId",
			Handler:    _Org_ListP3PermissionGroupsByOrgId_Handler,
		},
		{
			MethodName: "CreateP3PermissionGroup",
			Handler:    _Org_CreateP3PermissionGroup_Handler,
		},
		{
			MethodName: "UpdateP3PermissionGroup",
			Handler:    _Org_UpdateP3PermissionGroup_Handler,
		},
		{
			MethodName: "UpdateP3PermissionGroupByOrgId",
			Handler:    _Org_UpdateP3PermissionGroupByOrgId_Handler,
		},
		{
			MethodName: "DeleteP3PermissionGroup",
			Handler:    _Org_DeleteP3PermissionGroup_Handler,
		},
		{
			MethodName: "AssignUsersP3PermissionGroup",
			Handler:    _Org_AssignUsersP3PermissionGroup_Handler,
		},
		{
			MethodName: "RevokeUsersP3PermissionGroup",
			Handler:    _Org_RevokeUsersP3PermissionGroup_Handler,
		},
		{
			MethodName: "RefreshMfaLockout",
			Handler:    _Org_RefreshMfaLockout_Handler,
		},
		{
			MethodName: "RefreshMfaLockoutByOrgId",
			Handler:    _Org_RefreshMfaLockoutByOrgId_Handler,
		},
		{
			MethodName: "SetMfaType",
			Handler:    _Org_SetMfaType_Handler,
		},
		{
			MethodName: "SetMyMfaType",
			Handler:    _Org_SetMyMfaType_Handler,
		},
		{
			MethodName: "EnableUserMfa",
			Handler:    _Org_EnableUserMfa_Handler,
		},
		{
			MethodName: "EnableMyUserMfa",
			Handler:    _Org_EnableMyUserMfa_Handler,
		},
		{
			MethodName: "GetUserMfaInfo",
			Handler:    _Org_GetUserMfaInfo_Handler,
		},
		{
			MethodName: "GetMyUserMfaInfo",
			Handler:    _Org_GetMyUserMfaInfo_Handler,
		},
		{
			MethodName: "GetMyAllowedMfaMethods",
			Handler:    _Org_GetMyAllowedMfaMethods_Handler,
		},
		{
			MethodName: "CreateBusinessHours",
			Handler:    _Org_CreateBusinessHours_Handler,
		},
		{
			MethodName: "UpdateBusinessHours",
			Handler:    _Org_UpdateBusinessHours_Handler,
		},
		{
			MethodName: "AddGroupedUserIPRestrictions",
			Handler:    _Org_AddGroupedUserIPRestrictions_Handler,
		},
		{
			MethodName: "RemoveGroupedUserIPRestrictions",
			Handler:    _Org_RemoveGroupedUserIPRestrictions_Handler,
		},
		{
			MethodName: "ListUsersAllowedIps",
			Handler:    _Org_ListUsersAllowedIps_Handler,
		},
		{
			MethodName: "ListResponseEvaluators",
			Handler:    _Org_ListResponseEvaluators_Handler,
		},
		{
			MethodName: "GetResponseEvaluator",
			Handler:    _Org_GetResponseEvaluator_Handler,
		},
		{
			MethodName: "CreateResponseEvaluator",
			Handler:    _Org_CreateResponseEvaluator_Handler,
		},
		{
			MethodName: "UpdateResponseEvaluator",
			Handler:    _Org_UpdateResponseEvaluator_Handler,
		},
		{
			MethodName: "DeleteResponseEvaluator",
			Handler:    _Org_DeleteResponseEvaluator_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAllOrganizationsGlobally",
			Handler:       _Org_ListAllOrganizationsGlobally_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListOrganizationsByRegion",
			Handler:       _Org_ListOrganizationsByRegion_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListArchivedOrganizations",
			Handler:       _Org_ListArchivedOrganizations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListOwnedOrgs",
			Handler:       _Org_ListOwnedOrgs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAgents",
			Handler:       _Org_ListAgents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPublicUsers",
			Handler:       _Org_ListPublicUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUsers",
			Handler:       _Org_ListUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUsersByOrgId",
			Handler:       _Org_ListUsersByOrgId_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUsersByRegion",
			Handler:       _Org_ListUsersByRegion_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListOrgHuntGroupScripts",
			Handler:       _Org_ListOrgHuntGroupScripts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1alpha1/org/service.proto",
}
