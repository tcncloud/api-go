// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/org/trusts/service.proto

package trustsconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	org "github.com/tcncloud/api-go/api/v1alpha1/org"
	_ "github.com/tcncloud/api-go/api/v1alpha1/org/trusts"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TrustsServiceName is the fully-qualified name of the TrustsService service.
	TrustsServiceName = "api.v1alpha1.org.trusts.TrustsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TrustsServiceCreateTrustProcedure is the fully-qualified name of the TrustsService's CreateTrust
	// RPC.
	TrustsServiceCreateTrustProcedure = "/api.v1alpha1.org.trusts.TrustsService/CreateTrust"
	// TrustsServiceAcceptTrustProcedure is the fully-qualified name of the TrustsService's AcceptTrust
	// RPC.
	TrustsServiceAcceptTrustProcedure = "/api.v1alpha1.org.trusts.TrustsService/AcceptTrust"
	// TrustsServiceRejectTrustProcedure is the fully-qualified name of the TrustsService's RejectTrust
	// RPC.
	TrustsServiceRejectTrustProcedure = "/api.v1alpha1.org.trusts.TrustsService/RejectTrust"
	// TrustsServiceGetTrustProcedure is the fully-qualified name of the TrustsService's GetTrust RPC.
	TrustsServiceGetTrustProcedure = "/api.v1alpha1.org.trusts.TrustsService/GetTrust"
	// TrustsServiceListIncomingTrustsProcedure is the fully-qualified name of the TrustsService's
	// ListIncomingTrusts RPC.
	TrustsServiceListIncomingTrustsProcedure = "/api.v1alpha1.org.trusts.TrustsService/ListIncomingTrusts"
	// TrustsServiceListGivenTrustsProcedure is the fully-qualified name of the TrustsService's
	// ListGivenTrusts RPC.
	TrustsServiceListGivenTrustsProcedure = "/api.v1alpha1.org.trusts.TrustsService/ListGivenTrusts"
	// TrustsServiceListAssignableTrustsProcedure is the fully-qualified name of the TrustsService's
	// ListAssignableTrusts RPC.
	TrustsServiceListAssignableTrustsProcedure = "/api.v1alpha1.org.trusts.TrustsService/ListAssignableTrusts"
	// TrustsServiceDeleteTrustProcedure is the fully-qualified name of the TrustsService's DeleteTrust
	// RPC.
	TrustsServiceDeleteTrustProcedure = "/api.v1alpha1.org.trusts.TrustsService/DeleteTrust"
	// TrustsServiceAssignTrustProcedure is the fully-qualified name of the TrustsService's AssignTrust
	// RPC.
	TrustsServiceAssignTrustProcedure = "/api.v1alpha1.org.trusts.TrustsService/AssignTrust"
	// TrustsServiceUnassignTrustProcedure is the fully-qualified name of the TrustsService's
	// UnassignTrust RPC.
	TrustsServiceUnassignTrustProcedure = "/api.v1alpha1.org.trusts.TrustsService/UnassignTrust"
)

// TrustsServiceClient is a client for the api.v1alpha1.org.trusts.TrustsService service.
type TrustsServiceClient interface {
	// CreateTrust creates a new trust.
	CreateTrust(context.Context, *connect_go.Request[org.CreateTrustRequest]) (*connect_go.Response[org.CreateTrustResponse], error)
	// AcceptTrust accepts an incoming trust.
	AcceptTrust(context.Context, *connect_go.Request[org.AcceptTrustRequest]) (*connect_go.Response[org.AcceptTrustResponse], error)
	// RejectTrust rejects an incoming trust.
	RejectTrust(context.Context, *connect_go.Request[org.RejectTrustRequest]) (*connect_go.Response[org.RejectTrustResponse], error)
	// GetTrust returns a single trust by trust id.
	GetTrust(context.Context, *connect_go.Request[org.GetTrustRequest]) (*connect_go.Response[org.GetTrustResponse], error)
	// ListIncomingTrusts returns all pending trusts that are being granted
	// to the org of the currently logged in user.
	ListIncomingTrusts(context.Context, *connect_go.Request[org.ListIncomingTrustsRequest]) (*connect_go.Response[org.ListIncomingTrustsResponse], error)
	// ListGivenTrusts returns all trusts that have been given out for
	// the currently logged in user's org. The returned list will contain
	// accepted, pending, and rejected trusts.
	ListGivenTrusts(context.Context, *connect_go.Request[org.ListGivenTrustsRequest]) (*connect_go.Response[org.ListGivenTrustsResponse], error)
	// ListAssignableTrusts returns all accepted trusts that are being granted
	// to the org of the currently logged in user.
	ListAssignableTrusts(context.Context, *connect_go.Request[org.ListAssignableTrustsRequest]) (*connect_go.Response[org.ListAssignableTrustsResponse], error)
	// DeleteTrust deletes a trust by trust id. Only trusts where the current
	// org is the grantor can be deleted by this endpoint.
	DeleteTrust(context.Context, *connect_go.Request[org.DeleteTrustRequest]) (*connect_go.Response[org.DeleteTrustResponse], error)
	// AssignTrust assigns a trust to the given user ids.
	AssignTrust(context.Context, *connect_go.Request[org.AssignTrustRequest]) (*connect_go.Response[org.AssignTrustResponse], error)
	// UnassignTrust unassigns a trust from the given user id.
	UnassignTrust(context.Context, *connect_go.Request[org.UnassignTrustRequest]) (*connect_go.Response[org.UnassignTrustResponse], error)
}

// NewTrustsServiceClient constructs a client for the api.v1alpha1.org.trusts.TrustsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTrustsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TrustsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &trustsServiceClient{
		createTrust: connect_go.NewClient[org.CreateTrustRequest, org.CreateTrustResponse](
			httpClient,
			baseURL+TrustsServiceCreateTrustProcedure,
			opts...,
		),
		acceptTrust: connect_go.NewClient[org.AcceptTrustRequest, org.AcceptTrustResponse](
			httpClient,
			baseURL+TrustsServiceAcceptTrustProcedure,
			opts...,
		),
		rejectTrust: connect_go.NewClient[org.RejectTrustRequest, org.RejectTrustResponse](
			httpClient,
			baseURL+TrustsServiceRejectTrustProcedure,
			opts...,
		),
		getTrust: connect_go.NewClient[org.GetTrustRequest, org.GetTrustResponse](
			httpClient,
			baseURL+TrustsServiceGetTrustProcedure,
			opts...,
		),
		listIncomingTrusts: connect_go.NewClient[org.ListIncomingTrustsRequest, org.ListIncomingTrustsResponse](
			httpClient,
			baseURL+TrustsServiceListIncomingTrustsProcedure,
			opts...,
		),
		listGivenTrusts: connect_go.NewClient[org.ListGivenTrustsRequest, org.ListGivenTrustsResponse](
			httpClient,
			baseURL+TrustsServiceListGivenTrustsProcedure,
			opts...,
		),
		listAssignableTrusts: connect_go.NewClient[org.ListAssignableTrustsRequest, org.ListAssignableTrustsResponse](
			httpClient,
			baseURL+TrustsServiceListAssignableTrustsProcedure,
			opts...,
		),
		deleteTrust: connect_go.NewClient[org.DeleteTrustRequest, org.DeleteTrustResponse](
			httpClient,
			baseURL+TrustsServiceDeleteTrustProcedure,
			opts...,
		),
		assignTrust: connect_go.NewClient[org.AssignTrustRequest, org.AssignTrustResponse](
			httpClient,
			baseURL+TrustsServiceAssignTrustProcedure,
			opts...,
		),
		unassignTrust: connect_go.NewClient[org.UnassignTrustRequest, org.UnassignTrustResponse](
			httpClient,
			baseURL+TrustsServiceUnassignTrustProcedure,
			opts...,
		),
	}
}

// trustsServiceClient implements TrustsServiceClient.
type trustsServiceClient struct {
	createTrust          *connect_go.Client[org.CreateTrustRequest, org.CreateTrustResponse]
	acceptTrust          *connect_go.Client[org.AcceptTrustRequest, org.AcceptTrustResponse]
	rejectTrust          *connect_go.Client[org.RejectTrustRequest, org.RejectTrustResponse]
	getTrust             *connect_go.Client[org.GetTrustRequest, org.GetTrustResponse]
	listIncomingTrusts   *connect_go.Client[org.ListIncomingTrustsRequest, org.ListIncomingTrustsResponse]
	listGivenTrusts      *connect_go.Client[org.ListGivenTrustsRequest, org.ListGivenTrustsResponse]
	listAssignableTrusts *connect_go.Client[org.ListAssignableTrustsRequest, org.ListAssignableTrustsResponse]
	deleteTrust          *connect_go.Client[org.DeleteTrustRequest, org.DeleteTrustResponse]
	assignTrust          *connect_go.Client[org.AssignTrustRequest, org.AssignTrustResponse]
	unassignTrust        *connect_go.Client[org.UnassignTrustRequest, org.UnassignTrustResponse]
}

// CreateTrust calls api.v1alpha1.org.trusts.TrustsService.CreateTrust.
func (c *trustsServiceClient) CreateTrust(ctx context.Context, req *connect_go.Request[org.CreateTrustRequest]) (*connect_go.Response[org.CreateTrustResponse], error) {
	return c.createTrust.CallUnary(ctx, req)
}

// AcceptTrust calls api.v1alpha1.org.trusts.TrustsService.AcceptTrust.
func (c *trustsServiceClient) AcceptTrust(ctx context.Context, req *connect_go.Request[org.AcceptTrustRequest]) (*connect_go.Response[org.AcceptTrustResponse], error) {
	return c.acceptTrust.CallUnary(ctx, req)
}

// RejectTrust calls api.v1alpha1.org.trusts.TrustsService.RejectTrust.
func (c *trustsServiceClient) RejectTrust(ctx context.Context, req *connect_go.Request[org.RejectTrustRequest]) (*connect_go.Response[org.RejectTrustResponse], error) {
	return c.rejectTrust.CallUnary(ctx, req)
}

// GetTrust calls api.v1alpha1.org.trusts.TrustsService.GetTrust.
func (c *trustsServiceClient) GetTrust(ctx context.Context, req *connect_go.Request[org.GetTrustRequest]) (*connect_go.Response[org.GetTrustResponse], error) {
	return c.getTrust.CallUnary(ctx, req)
}

// ListIncomingTrusts calls api.v1alpha1.org.trusts.TrustsService.ListIncomingTrusts.
func (c *trustsServiceClient) ListIncomingTrusts(ctx context.Context, req *connect_go.Request[org.ListIncomingTrustsRequest]) (*connect_go.Response[org.ListIncomingTrustsResponse], error) {
	return c.listIncomingTrusts.CallUnary(ctx, req)
}

// ListGivenTrusts calls api.v1alpha1.org.trusts.TrustsService.ListGivenTrusts.
func (c *trustsServiceClient) ListGivenTrusts(ctx context.Context, req *connect_go.Request[org.ListGivenTrustsRequest]) (*connect_go.Response[org.ListGivenTrustsResponse], error) {
	return c.listGivenTrusts.CallUnary(ctx, req)
}

// ListAssignableTrusts calls api.v1alpha1.org.trusts.TrustsService.ListAssignableTrusts.
func (c *trustsServiceClient) ListAssignableTrusts(ctx context.Context, req *connect_go.Request[org.ListAssignableTrustsRequest]) (*connect_go.Response[org.ListAssignableTrustsResponse], error) {
	return c.listAssignableTrusts.CallUnary(ctx, req)
}

// DeleteTrust calls api.v1alpha1.org.trusts.TrustsService.DeleteTrust.
func (c *trustsServiceClient) DeleteTrust(ctx context.Context, req *connect_go.Request[org.DeleteTrustRequest]) (*connect_go.Response[org.DeleteTrustResponse], error) {
	return c.deleteTrust.CallUnary(ctx, req)
}

// AssignTrust calls api.v1alpha1.org.trusts.TrustsService.AssignTrust.
func (c *trustsServiceClient) AssignTrust(ctx context.Context, req *connect_go.Request[org.AssignTrustRequest]) (*connect_go.Response[org.AssignTrustResponse], error) {
	return c.assignTrust.CallUnary(ctx, req)
}

// UnassignTrust calls api.v1alpha1.org.trusts.TrustsService.UnassignTrust.
func (c *trustsServiceClient) UnassignTrust(ctx context.Context, req *connect_go.Request[org.UnassignTrustRequest]) (*connect_go.Response[org.UnassignTrustResponse], error) {
	return c.unassignTrust.CallUnary(ctx, req)
}

// TrustsServiceHandler is an implementation of the api.v1alpha1.org.trusts.TrustsService service.
type TrustsServiceHandler interface {
	// CreateTrust creates a new trust.
	CreateTrust(context.Context, *connect_go.Request[org.CreateTrustRequest]) (*connect_go.Response[org.CreateTrustResponse], error)
	// AcceptTrust accepts an incoming trust.
	AcceptTrust(context.Context, *connect_go.Request[org.AcceptTrustRequest]) (*connect_go.Response[org.AcceptTrustResponse], error)
	// RejectTrust rejects an incoming trust.
	RejectTrust(context.Context, *connect_go.Request[org.RejectTrustRequest]) (*connect_go.Response[org.RejectTrustResponse], error)
	// GetTrust returns a single trust by trust id.
	GetTrust(context.Context, *connect_go.Request[org.GetTrustRequest]) (*connect_go.Response[org.GetTrustResponse], error)
	// ListIncomingTrusts returns all pending trusts that are being granted
	// to the org of the currently logged in user.
	ListIncomingTrusts(context.Context, *connect_go.Request[org.ListIncomingTrustsRequest]) (*connect_go.Response[org.ListIncomingTrustsResponse], error)
	// ListGivenTrusts returns all trusts that have been given out for
	// the currently logged in user's org. The returned list will contain
	// accepted, pending, and rejected trusts.
	ListGivenTrusts(context.Context, *connect_go.Request[org.ListGivenTrustsRequest]) (*connect_go.Response[org.ListGivenTrustsResponse], error)
	// ListAssignableTrusts returns all accepted trusts that are being granted
	// to the org of the currently logged in user.
	ListAssignableTrusts(context.Context, *connect_go.Request[org.ListAssignableTrustsRequest]) (*connect_go.Response[org.ListAssignableTrustsResponse], error)
	// DeleteTrust deletes a trust by trust id. Only trusts where the current
	// org is the grantor can be deleted by this endpoint.
	DeleteTrust(context.Context, *connect_go.Request[org.DeleteTrustRequest]) (*connect_go.Response[org.DeleteTrustResponse], error)
	// AssignTrust assigns a trust to the given user ids.
	AssignTrust(context.Context, *connect_go.Request[org.AssignTrustRequest]) (*connect_go.Response[org.AssignTrustResponse], error)
	// UnassignTrust unassigns a trust from the given user id.
	UnassignTrust(context.Context, *connect_go.Request[org.UnassignTrustRequest]) (*connect_go.Response[org.UnassignTrustResponse], error)
}

// NewTrustsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTrustsServiceHandler(svc TrustsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	trustsServiceCreateTrustHandler := connect_go.NewUnaryHandler(
		TrustsServiceCreateTrustProcedure,
		svc.CreateTrust,
		opts...,
	)
	trustsServiceAcceptTrustHandler := connect_go.NewUnaryHandler(
		TrustsServiceAcceptTrustProcedure,
		svc.AcceptTrust,
		opts...,
	)
	trustsServiceRejectTrustHandler := connect_go.NewUnaryHandler(
		TrustsServiceRejectTrustProcedure,
		svc.RejectTrust,
		opts...,
	)
	trustsServiceGetTrustHandler := connect_go.NewUnaryHandler(
		TrustsServiceGetTrustProcedure,
		svc.GetTrust,
		opts...,
	)
	trustsServiceListIncomingTrustsHandler := connect_go.NewUnaryHandler(
		TrustsServiceListIncomingTrustsProcedure,
		svc.ListIncomingTrusts,
		opts...,
	)
	trustsServiceListGivenTrustsHandler := connect_go.NewUnaryHandler(
		TrustsServiceListGivenTrustsProcedure,
		svc.ListGivenTrusts,
		opts...,
	)
	trustsServiceListAssignableTrustsHandler := connect_go.NewUnaryHandler(
		TrustsServiceListAssignableTrustsProcedure,
		svc.ListAssignableTrusts,
		opts...,
	)
	trustsServiceDeleteTrustHandler := connect_go.NewUnaryHandler(
		TrustsServiceDeleteTrustProcedure,
		svc.DeleteTrust,
		opts...,
	)
	trustsServiceAssignTrustHandler := connect_go.NewUnaryHandler(
		TrustsServiceAssignTrustProcedure,
		svc.AssignTrust,
		opts...,
	)
	trustsServiceUnassignTrustHandler := connect_go.NewUnaryHandler(
		TrustsServiceUnassignTrustProcedure,
		svc.UnassignTrust,
		opts...,
	)
	return "/api.v1alpha1.org.trusts.TrustsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TrustsServiceCreateTrustProcedure:
			trustsServiceCreateTrustHandler.ServeHTTP(w, r)
		case TrustsServiceAcceptTrustProcedure:
			trustsServiceAcceptTrustHandler.ServeHTTP(w, r)
		case TrustsServiceRejectTrustProcedure:
			trustsServiceRejectTrustHandler.ServeHTTP(w, r)
		case TrustsServiceGetTrustProcedure:
			trustsServiceGetTrustHandler.ServeHTTP(w, r)
		case TrustsServiceListIncomingTrustsProcedure:
			trustsServiceListIncomingTrustsHandler.ServeHTTP(w, r)
		case TrustsServiceListGivenTrustsProcedure:
			trustsServiceListGivenTrustsHandler.ServeHTTP(w, r)
		case TrustsServiceListAssignableTrustsProcedure:
			trustsServiceListAssignableTrustsHandler.ServeHTTP(w, r)
		case TrustsServiceDeleteTrustProcedure:
			trustsServiceDeleteTrustHandler.ServeHTTP(w, r)
		case TrustsServiceAssignTrustProcedure:
			trustsServiceAssignTrustHandler.ServeHTTP(w, r)
		case TrustsServiceUnassignTrustProcedure:
			trustsServiceUnassignTrustHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTrustsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTrustsServiceHandler struct{}

func (UnimplementedTrustsServiceHandler) CreateTrust(context.Context, *connect_go.Request[org.CreateTrustRequest]) (*connect_go.Response[org.CreateTrustResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.trusts.TrustsService.CreateTrust is not implemented"))
}

func (UnimplementedTrustsServiceHandler) AcceptTrust(context.Context, *connect_go.Request[org.AcceptTrustRequest]) (*connect_go.Response[org.AcceptTrustResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.trusts.TrustsService.AcceptTrust is not implemented"))
}

func (UnimplementedTrustsServiceHandler) RejectTrust(context.Context, *connect_go.Request[org.RejectTrustRequest]) (*connect_go.Response[org.RejectTrustResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.trusts.TrustsService.RejectTrust is not implemented"))
}

func (UnimplementedTrustsServiceHandler) GetTrust(context.Context, *connect_go.Request[org.GetTrustRequest]) (*connect_go.Response[org.GetTrustResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.trusts.TrustsService.GetTrust is not implemented"))
}

func (UnimplementedTrustsServiceHandler) ListIncomingTrusts(context.Context, *connect_go.Request[org.ListIncomingTrustsRequest]) (*connect_go.Response[org.ListIncomingTrustsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.trusts.TrustsService.ListIncomingTrusts is not implemented"))
}

func (UnimplementedTrustsServiceHandler) ListGivenTrusts(context.Context, *connect_go.Request[org.ListGivenTrustsRequest]) (*connect_go.Response[org.ListGivenTrustsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.trusts.TrustsService.ListGivenTrusts is not implemented"))
}

func (UnimplementedTrustsServiceHandler) ListAssignableTrusts(context.Context, *connect_go.Request[org.ListAssignableTrustsRequest]) (*connect_go.Response[org.ListAssignableTrustsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.trusts.TrustsService.ListAssignableTrusts is not implemented"))
}

func (UnimplementedTrustsServiceHandler) DeleteTrust(context.Context, *connect_go.Request[org.DeleteTrustRequest]) (*connect_go.Response[org.DeleteTrustResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.trusts.TrustsService.DeleteTrust is not implemented"))
}

func (UnimplementedTrustsServiceHandler) AssignTrust(context.Context, *connect_go.Request[org.AssignTrustRequest]) (*connect_go.Response[org.AssignTrustResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.trusts.TrustsService.AssignTrust is not implemented"))
}

func (UnimplementedTrustsServiceHandler) UnassignTrust(context.Context, *connect_go.Request[org.UnassignTrustRequest]) (*connect_go.Response[org.UnassignTrustResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.trusts.TrustsService.UnassignTrust is not implemented"))
}
