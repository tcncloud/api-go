// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/org/trusts/service.proto

package trusts

import (
	context "context"
	org "github.com/tcncloud/api-go/api/v1alpha1/org"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrustsService_CreateTrust_FullMethodName          = "/api.v1alpha1.org.trusts.TrustsService/CreateTrust"
	TrustsService_AcceptTrust_FullMethodName          = "/api.v1alpha1.org.trusts.TrustsService/AcceptTrust"
	TrustsService_RejectTrust_FullMethodName          = "/api.v1alpha1.org.trusts.TrustsService/RejectTrust"
	TrustsService_GetTrust_FullMethodName             = "/api.v1alpha1.org.trusts.TrustsService/GetTrust"
	TrustsService_ListIncomingTrusts_FullMethodName   = "/api.v1alpha1.org.trusts.TrustsService/ListIncomingTrusts"
	TrustsService_ListGivenTrusts_FullMethodName      = "/api.v1alpha1.org.trusts.TrustsService/ListGivenTrusts"
	TrustsService_ListAssignableTrusts_FullMethodName = "/api.v1alpha1.org.trusts.TrustsService/ListAssignableTrusts"
	TrustsService_DeleteTrust_FullMethodName          = "/api.v1alpha1.org.trusts.TrustsService/DeleteTrust"
	TrustsService_AssignTrust_FullMethodName          = "/api.v1alpha1.org.trusts.TrustsService/AssignTrust"
	TrustsService_UnassignTrust_FullMethodName        = "/api.v1alpha1.org.trusts.TrustsService/UnassignTrust"
)

// TrustsServiceClient is the client API for TrustsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrustsServiceClient interface {
	// CreateTrust creates a new trust.
	CreateTrust(ctx context.Context, in *org.CreateTrustRequest, opts ...grpc.CallOption) (*org.CreateTrustResponse, error)
	// AcceptTrust accepts an incoming trust.
	AcceptTrust(ctx context.Context, in *org.AcceptTrustRequest, opts ...grpc.CallOption) (*org.AcceptTrustResponse, error)
	// RejectTrust rejects an incoming trust.
	RejectTrust(ctx context.Context, in *org.RejectTrustRequest, opts ...grpc.CallOption) (*org.RejectTrustResponse, error)
	// GetTrust returns a single trust by trust id.
	GetTrust(ctx context.Context, in *org.GetTrustRequest, opts ...grpc.CallOption) (*org.GetTrustResponse, error)
	// ListIncomingTrusts returns all pending trusts that are being granted
	// to the org of the currently logged in user.
	ListIncomingTrusts(ctx context.Context, in *org.ListIncomingTrustsRequest, opts ...grpc.CallOption) (*org.ListIncomingTrustsResponse, error)
	// ListGivenTrusts returns all trusts that have been given out for
	// the currently logged in user's org. The returned list will contain
	// accepted, pending, and rejected trusts.
	ListGivenTrusts(ctx context.Context, in *org.ListGivenTrustsRequest, opts ...grpc.CallOption) (*org.ListGivenTrustsResponse, error)
	// ListAssignableTrusts returns all accepted trusts that are being granted
	// to the org of the currently logged in user.
	ListAssignableTrusts(ctx context.Context, in *org.ListAssignableTrustsRequest, opts ...grpc.CallOption) (*org.ListAssignableTrustsResponse, error)
	// DeleteTrust deletes a trust by trust id. Only trusts where the current
	// org is the grantor can be deleted by this endpoint.
	DeleteTrust(ctx context.Context, in *org.DeleteTrustRequest, opts ...grpc.CallOption) (*org.DeleteTrustResponse, error)
	// AssignTrust assigns a trust to the given user ids.
	AssignTrust(ctx context.Context, in *org.AssignTrustRequest, opts ...grpc.CallOption) (*org.AssignTrustResponse, error)
	// UnassignTrust unassigns a trust from the given user id.
	UnassignTrust(ctx context.Context, in *org.UnassignTrustRequest, opts ...grpc.CallOption) (*org.UnassignTrustResponse, error)
}

type trustsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustsServiceClient(cc grpc.ClientConnInterface) TrustsServiceClient {
	return &trustsServiceClient{cc}
}

func (c *trustsServiceClient) CreateTrust(ctx context.Context, in *org.CreateTrustRequest, opts ...grpc.CallOption) (*org.CreateTrustResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(org.CreateTrustResponse)
	err := c.cc.Invoke(ctx, TrustsService_CreateTrust_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustsServiceClient) AcceptTrust(ctx context.Context, in *org.AcceptTrustRequest, opts ...grpc.CallOption) (*org.AcceptTrustResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(org.AcceptTrustResponse)
	err := c.cc.Invoke(ctx, TrustsService_AcceptTrust_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustsServiceClient) RejectTrust(ctx context.Context, in *org.RejectTrustRequest, opts ...grpc.CallOption) (*org.RejectTrustResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(org.RejectTrustResponse)
	err := c.cc.Invoke(ctx, TrustsService_RejectTrust_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustsServiceClient) GetTrust(ctx context.Context, in *org.GetTrustRequest, opts ...grpc.CallOption) (*org.GetTrustResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(org.GetTrustResponse)
	err := c.cc.Invoke(ctx, TrustsService_GetTrust_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustsServiceClient) ListIncomingTrusts(ctx context.Context, in *org.ListIncomingTrustsRequest, opts ...grpc.CallOption) (*org.ListIncomingTrustsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(org.ListIncomingTrustsResponse)
	err := c.cc.Invoke(ctx, TrustsService_ListIncomingTrusts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustsServiceClient) ListGivenTrusts(ctx context.Context, in *org.ListGivenTrustsRequest, opts ...grpc.CallOption) (*org.ListGivenTrustsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(org.ListGivenTrustsResponse)
	err := c.cc.Invoke(ctx, TrustsService_ListGivenTrusts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustsServiceClient) ListAssignableTrusts(ctx context.Context, in *org.ListAssignableTrustsRequest, opts ...grpc.CallOption) (*org.ListAssignableTrustsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(org.ListAssignableTrustsResponse)
	err := c.cc.Invoke(ctx, TrustsService_ListAssignableTrusts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustsServiceClient) DeleteTrust(ctx context.Context, in *org.DeleteTrustRequest, opts ...grpc.CallOption) (*org.DeleteTrustResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(org.DeleteTrustResponse)
	err := c.cc.Invoke(ctx, TrustsService_DeleteTrust_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustsServiceClient) AssignTrust(ctx context.Context, in *org.AssignTrustRequest, opts ...grpc.CallOption) (*org.AssignTrustResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(org.AssignTrustResponse)
	err := c.cc.Invoke(ctx, TrustsService_AssignTrust_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustsServiceClient) UnassignTrust(ctx context.Context, in *org.UnassignTrustRequest, opts ...grpc.CallOption) (*org.UnassignTrustResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(org.UnassignTrustResponse)
	err := c.cc.Invoke(ctx, TrustsService_UnassignTrust_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustsServiceServer is the server API for TrustsService service.
// All implementations must embed UnimplementedTrustsServiceServer
// for forward compatibility.
type TrustsServiceServer interface {
	// CreateTrust creates a new trust.
	CreateTrust(context.Context, *org.CreateTrustRequest) (*org.CreateTrustResponse, error)
	// AcceptTrust accepts an incoming trust.
	AcceptTrust(context.Context, *org.AcceptTrustRequest) (*org.AcceptTrustResponse, error)
	// RejectTrust rejects an incoming trust.
	RejectTrust(context.Context, *org.RejectTrustRequest) (*org.RejectTrustResponse, error)
	// GetTrust returns a single trust by trust id.
	GetTrust(context.Context, *org.GetTrustRequest) (*org.GetTrustResponse, error)
	// ListIncomingTrusts returns all pending trusts that are being granted
	// to the org of the currently logged in user.
	ListIncomingTrusts(context.Context, *org.ListIncomingTrustsRequest) (*org.ListIncomingTrustsResponse, error)
	// ListGivenTrusts returns all trusts that have been given out for
	// the currently logged in user's org. The returned list will contain
	// accepted, pending, and rejected trusts.
	ListGivenTrusts(context.Context, *org.ListGivenTrustsRequest) (*org.ListGivenTrustsResponse, error)
	// ListAssignableTrusts returns all accepted trusts that are being granted
	// to the org of the currently logged in user.
	ListAssignableTrusts(context.Context, *org.ListAssignableTrustsRequest) (*org.ListAssignableTrustsResponse, error)
	// DeleteTrust deletes a trust by trust id. Only trusts where the current
	// org is the grantor can be deleted by this endpoint.
	DeleteTrust(context.Context, *org.DeleteTrustRequest) (*org.DeleteTrustResponse, error)
	// AssignTrust assigns a trust to the given user ids.
	AssignTrust(context.Context, *org.AssignTrustRequest) (*org.AssignTrustResponse, error)
	// UnassignTrust unassigns a trust from the given user id.
	UnassignTrust(context.Context, *org.UnassignTrustRequest) (*org.UnassignTrustResponse, error)
	mustEmbedUnimplementedTrustsServiceServer()
}

// UnimplementedTrustsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrustsServiceServer struct{}

func (UnimplementedTrustsServiceServer) CreateTrust(context.Context, *org.CreateTrustRequest) (*org.CreateTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrust not implemented")
}
func (UnimplementedTrustsServiceServer) AcceptTrust(context.Context, *org.AcceptTrustRequest) (*org.AcceptTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptTrust not implemented")
}
func (UnimplementedTrustsServiceServer) RejectTrust(context.Context, *org.RejectTrustRequest) (*org.RejectTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectTrust not implemented")
}
func (UnimplementedTrustsServiceServer) GetTrust(context.Context, *org.GetTrustRequest) (*org.GetTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrust not implemented")
}
func (UnimplementedTrustsServiceServer) ListIncomingTrusts(context.Context, *org.ListIncomingTrustsRequest) (*org.ListIncomingTrustsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIncomingTrusts not implemented")
}
func (UnimplementedTrustsServiceServer) ListGivenTrusts(context.Context, *org.ListGivenTrustsRequest) (*org.ListGivenTrustsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGivenTrusts not implemented")
}
func (UnimplementedTrustsServiceServer) ListAssignableTrusts(context.Context, *org.ListAssignableTrustsRequest) (*org.ListAssignableTrustsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssignableTrusts not implemented")
}
func (UnimplementedTrustsServiceServer) DeleteTrust(context.Context, *org.DeleteTrustRequest) (*org.DeleteTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrust not implemented")
}
func (UnimplementedTrustsServiceServer) AssignTrust(context.Context, *org.AssignTrustRequest) (*org.AssignTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTrust not implemented")
}
func (UnimplementedTrustsServiceServer) UnassignTrust(context.Context, *org.UnassignTrustRequest) (*org.UnassignTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignTrust not implemented")
}
func (UnimplementedTrustsServiceServer) mustEmbedUnimplementedTrustsServiceServer() {}
func (UnimplementedTrustsServiceServer) testEmbeddedByValue()                       {}

// UnsafeTrustsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustsServiceServer will
// result in compilation errors.
type UnsafeTrustsServiceServer interface {
	mustEmbedUnimplementedTrustsServiceServer()
}

func RegisterTrustsServiceServer(s grpc.ServiceRegistrar, srv TrustsServiceServer) {
	// If the following call pancis, it indicates UnimplementedTrustsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrustsService_ServiceDesc, srv)
}

func _TrustsService_CreateTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(org.CreateTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustsServiceServer).CreateTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustsService_CreateTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustsServiceServer).CreateTrust(ctx, req.(*org.CreateTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustsService_AcceptTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(org.AcceptTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustsServiceServer).AcceptTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustsService_AcceptTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustsServiceServer).AcceptTrust(ctx, req.(*org.AcceptTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustsService_RejectTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(org.RejectTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustsServiceServer).RejectTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustsService_RejectTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustsServiceServer).RejectTrust(ctx, req.(*org.RejectTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustsService_GetTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(org.GetTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustsServiceServer).GetTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustsService_GetTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustsServiceServer).GetTrust(ctx, req.(*org.GetTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustsService_ListIncomingTrusts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(org.ListIncomingTrustsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustsServiceServer).ListIncomingTrusts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustsService_ListIncomingTrusts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustsServiceServer).ListIncomingTrusts(ctx, req.(*org.ListIncomingTrustsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustsService_ListGivenTrusts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(org.ListGivenTrustsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustsServiceServer).ListGivenTrusts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustsService_ListGivenTrusts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustsServiceServer).ListGivenTrusts(ctx, req.(*org.ListGivenTrustsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustsService_ListAssignableTrusts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(org.ListAssignableTrustsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustsServiceServer).ListAssignableTrusts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustsService_ListAssignableTrusts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustsServiceServer).ListAssignableTrusts(ctx, req.(*org.ListAssignableTrustsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustsService_DeleteTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(org.DeleteTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustsServiceServer).DeleteTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustsService_DeleteTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustsServiceServer).DeleteTrust(ctx, req.(*org.DeleteTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustsService_AssignTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(org.AssignTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustsServiceServer).AssignTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustsService_AssignTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustsServiceServer).AssignTrust(ctx, req.(*org.AssignTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustsService_UnassignTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(org.UnassignTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustsServiceServer).UnassignTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustsService_UnassignTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustsServiceServer).UnassignTrust(ctx, req.(*org.UnassignTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrustsService_ServiceDesc is the grpc.ServiceDesc for TrustsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrustsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.org.trusts.TrustsService",
	HandlerType: (*TrustsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrust",
			Handler:    _TrustsService_CreateTrust_Handler,
		},
		{
			MethodName: "AcceptTrust",
			Handler:    _TrustsService_AcceptTrust_Handler,
		},
		{
			MethodName: "RejectTrust",
			Handler:    _TrustsService_RejectTrust_Handler,
		},
		{
			MethodName: "GetTrust",
			Handler:    _TrustsService_GetTrust_Handler,
		},
		{
			MethodName: "ListIncomingTrusts",
			Handler:    _TrustsService_ListIncomingTrusts_Handler,
		},
		{
			MethodName: "ListGivenTrusts",
			Handler:    _TrustsService_ListGivenTrusts_Handler,
		},
		{
			MethodName: "ListAssignableTrusts",
			Handler:    _TrustsService_ListAssignableTrusts_Handler,
		},
		{
			MethodName: "DeleteTrust",
			Handler:    _TrustsService_DeleteTrust_Handler,
		},
		{
			MethodName: "AssignTrust",
			Handler:    _TrustsService_AssignTrust_Handler,
		},
		{
			MethodName: "UnassignTrust",
			Handler:    _TrustsService_UnassignTrust_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/org/trusts/service.proto",
}
