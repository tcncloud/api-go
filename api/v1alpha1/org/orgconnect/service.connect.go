// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/org/service.proto

package orgconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	org "github.com/tcncloud/api-go/api/v1alpha1/org"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OrgName is the fully-qualified name of the Org service.
	OrgName = "api.v1alpha1.org.Org"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrgCreateOrganizationProcedure is the fully-qualified name of the Org's CreateOrganization RPC.
	OrgCreateOrganizationProcedure = "/api.v1alpha1.org.Org/CreateOrganization"
	// OrgGetOrganizationProcedure is the fully-qualified name of the Org's GetOrganization RPC.
	OrgGetOrganizationProcedure = "/api.v1alpha1.org.Org/GetOrganization"
	// OrgGetOrganizationByIdProcedure is the fully-qualified name of the Org's GetOrganizationById RPC.
	OrgGetOrganizationByIdProcedure = "/api.v1alpha1.org.Org/GetOrganizationById"
	// OrgUpdateOrganizationProcedure is the fully-qualified name of the Org's UpdateOrganization RPC.
	OrgUpdateOrganizationProcedure = "/api.v1alpha1.org.Org/UpdateOrganization"
	// OrgArchiveOrganizationProcedure is the fully-qualified name of the Org's ArchiveOrganization RPC.
	OrgArchiveOrganizationProcedure = "/api.v1alpha1.org.Org/ArchiveOrganization"
	// OrgUnArchiveOrganizationProcedure is the fully-qualified name of the Org's UnArchiveOrganization
	// RPC.
	OrgUnArchiveOrganizationProcedure = "/api.v1alpha1.org.Org/UnArchiveOrganization"
	// OrgListAllOrganizationsGloballyProcedure is the fully-qualified name of the Org's
	// ListAllOrganizationsGlobally RPC.
	OrgListAllOrganizationsGloballyProcedure = "/api.v1alpha1.org.Org/ListAllOrganizationsGlobally"
	// OrgListOrganizationsByRegionProcedure is the fully-qualified name of the Org's
	// ListOrganizationsByRegion RPC.
	OrgListOrganizationsByRegionProcedure = "/api.v1alpha1.org.Org/ListOrganizationsByRegion"
	// OrgListArchivedOrganizationsProcedure is the fully-qualified name of the Org's
	// ListArchivedOrganizations RPC.
	OrgListArchivedOrganizationsProcedure = "/api.v1alpha1.org.Org/ListArchivedOrganizations"
	// OrgConvertOrgToManualProcedure is the fully-qualified name of the Org's ConvertOrgToManual RPC.
	OrgConvertOrgToManualProcedure = "/api.v1alpha1.org.Org/ConvertOrgToManual"
	// OrgListOwnedOrgsProcedure is the fully-qualified name of the Org's ListOwnedOrgs RPC.
	OrgListOwnedOrgsProcedure = "/api.v1alpha1.org.Org/ListOwnedOrgs"
	// OrgGetOrganizationPreferencesProcedure is the fully-qualified name of the Org's
	// GetOrganizationPreferences RPC.
	OrgGetOrganizationPreferencesProcedure = "/api.v1alpha1.org.Org/GetOrganizationPreferences"
	// OrgUpdateOrganizationPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateOrganizationPreferences RPC.
	OrgUpdateOrganizationPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateOrganizationPreferences"
	// OrgGetAgentPreferencesProcedure is the fully-qualified name of the Org's GetAgentPreferences RPC.
	OrgGetAgentPreferencesProcedure = "/api.v1alpha1.org.Org/GetAgentPreferences"
	// OrgUpdateAgentPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateAgentPreferences RPC.
	OrgUpdateAgentPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateAgentPreferences"
	// OrgGetContactPreferencesProcedure is the fully-qualified name of the Org's GetContactPreferences
	// RPC.
	OrgGetContactPreferencesProcedure = "/api.v1alpha1.org.Org/GetContactPreferences"
	// OrgUpdateContactPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateContactPreferences RPC.
	OrgUpdateContactPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateContactPreferences"
	// OrgGetAuthenticationPreferencesProcedure is the fully-qualified name of the Org's
	// GetAuthenticationPreferences RPC.
	OrgGetAuthenticationPreferencesProcedure = "/api.v1alpha1.org.Org/GetAuthenticationPreferences"
	// OrgUpdateAuthenticationPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateAuthenticationPreferences RPC.
	OrgUpdateAuthenticationPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateAuthenticationPreferences"
	// OrgGetWebhookPreferencesProcedure is the fully-qualified name of the Org's GetWebhookPreferences
	// RPC.
	OrgGetWebhookPreferencesProcedure = "/api.v1alpha1.org.Org/GetWebhookPreferences"
	// OrgUpdateWebhookPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateWebhookPreferences RPC.
	OrgUpdateWebhookPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateWebhookPreferences"
	// OrgGetDashboardGeneralPreferencesProcedure is the fully-qualified name of the Org's
	// GetDashboardGeneralPreferences RPC.
	OrgGetDashboardGeneralPreferencesProcedure = "/api.v1alpha1.org.Org/GetDashboardGeneralPreferences"
	// OrgUpdateDashboardGeneralPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateDashboardGeneralPreferences RPC.
	OrgUpdateDashboardGeneralPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateDashboardGeneralPreferences"
	// OrgGetDashboardQueuePreferencesProcedure is the fully-qualified name of the Org's
	// GetDashboardQueuePreferences RPC.
	OrgGetDashboardQueuePreferencesProcedure = "/api.v1alpha1.org.Org/GetDashboardQueuePreferences"
	// OrgUpdateDashboardQueuePreferencesProcedure is the fully-qualified name of the Org's
	// UpdateDashboardQueuePreferences RPC.
	OrgUpdateDashboardQueuePreferencesProcedure = "/api.v1alpha1.org.Org/UpdateDashboardQueuePreferences"
	// OrgGetPhonePreferencesProcedure is the fully-qualified name of the Org's GetPhonePreferences RPC.
	OrgGetPhonePreferencesProcedure = "/api.v1alpha1.org.Org/GetPhonePreferences"
	// OrgUpdatePhonePreferencesProcedure is the fully-qualified name of the Org's
	// UpdatePhonePreferences RPC.
	OrgUpdatePhonePreferencesProcedure = "/api.v1alpha1.org.Org/UpdatePhonePreferences"
	// OrgGetCompliancePreferencesProcedure is the fully-qualified name of the Org's
	// GetCompliancePreferences RPC.
	OrgGetCompliancePreferencesProcedure = "/api.v1alpha1.org.Org/GetCompliancePreferences"
	// OrgUpdateCompliancePreferencesProcedure is the fully-qualified name of the Org's
	// UpdateCompliancePreferences RPC.
	OrgUpdateCompliancePreferencesProcedure = "/api.v1alpha1.org.Org/UpdateCompliancePreferences"
	// OrgGetBroadcastPreferencesProcedure is the fully-qualified name of the Org's
	// GetBroadcastPreferences RPC.
	OrgGetBroadcastPreferencesProcedure = "/api.v1alpha1.org.Org/GetBroadcastPreferences"
	// OrgUpdateBroadcastPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateBroadcastPreferences RPC.
	OrgUpdateBroadcastPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateBroadcastPreferences"
	// OrgGetSchedulePreferencesProcedure is the fully-qualified name of the Org's
	// GetSchedulePreferences RPC.
	OrgGetSchedulePreferencesProcedure = "/api.v1alpha1.org.Org/GetSchedulePreferences"
	// OrgUpdateSchedulePreferencesProcedure is the fully-qualified name of the Org's
	// UpdateSchedulePreferences RPC.
	OrgUpdateSchedulePreferencesProcedure = "/api.v1alpha1.org.Org/UpdateSchedulePreferences"
	// OrgGetEmailSmsPreferencesProcedure is the fully-qualified name of the Org's
	// GetEmailSmsPreferences RPC.
	OrgGetEmailSmsPreferencesProcedure = "/api.v1alpha1.org.Org/GetEmailSmsPreferences"
	// OrgUpdateEmailSmsPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateEmailSmsPreferences RPC.
	OrgUpdateEmailSmsPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateEmailSmsPreferences"
	// OrgGetBusinessPreferencesProcedure is the fully-qualified name of the Org's
	// GetBusinessPreferences RPC.
	OrgGetBusinessPreferencesProcedure = "/api.v1alpha1.org.Org/GetBusinessPreferences"
	// OrgUpdateBusinessPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateBusinessPreferences RPC.
	OrgUpdateBusinessPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateBusinessPreferences"
	// OrgUpdateAdminBusinessPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateAdminBusinessPreferences RPC.
	OrgUpdateAdminBusinessPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateAdminBusinessPreferences"
	// OrgGetScorecardsPreferencesProcedure is the fully-qualified name of the Org's
	// GetScorecardsPreferences RPC.
	OrgGetScorecardsPreferencesProcedure = "/api.v1alpha1.org.Org/GetScorecardsPreferences"
	// OrgUpdateScorecardsPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateScorecardsPreferences RPC.
	OrgUpdateScorecardsPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateScorecardsPreferences"
	// OrgGetVoiceAnalyticsPreferencesProcedure is the fully-qualified name of the Org's
	// GetVoiceAnalyticsPreferences RPC.
	OrgGetVoiceAnalyticsPreferencesProcedure = "/api.v1alpha1.org.Org/GetVoiceAnalyticsPreferences"
	// OrgListVoiceAnalyticsPreferencesProcedure is the fully-qualified name of the Org's
	// ListVoiceAnalyticsPreferences RPC.
	OrgListVoiceAnalyticsPreferencesProcedure = "/api.v1alpha1.org.Org/ListVoiceAnalyticsPreferences"
	// OrgUpdateVoiceAnalyticsPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateVoiceAnalyticsPreferences RPC.
	OrgUpdateVoiceAnalyticsPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateVoiceAnalyticsPreferences"
	// OrgGetEndOfDayPreferencesProcedure is the fully-qualified name of the Org's
	// GetEndOfDayPreferences RPC.
	OrgGetEndOfDayPreferencesProcedure = "/api.v1alpha1.org.Org/GetEndOfDayPreferences"
	// OrgUpdateEndOfDayPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateEndOfDayPreferences RPC.
	OrgUpdateEndOfDayPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateEndOfDayPreferences"
	// OrgGetReportFilterPreferencesProcedure is the fully-qualified name of the Org's
	// GetReportFilterPreferences RPC.
	OrgGetReportFilterPreferencesProcedure = "/api.v1alpha1.org.Org/GetReportFilterPreferences"
	// OrgUpdateReportFilterPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateReportFilterPreferences RPC.
	OrgUpdateReportFilterPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateReportFilterPreferences"
	// OrgGetRecordingPreferencesProcedure is the fully-qualified name of the Org's
	// GetRecordingPreferences RPC.
	OrgGetRecordingPreferencesProcedure = "/api.v1alpha1.org.Org/GetRecordingPreferences"
	// OrgUpdateRecordingPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateRecordingPreferences RPC.
	OrgUpdateRecordingPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateRecordingPreferences"
	// OrgGetAdminClientPreferencesProcedure is the fully-qualified name of the Org's
	// GetAdminClientPreferences RPC.
	OrgGetAdminClientPreferencesProcedure = "/api.v1alpha1.org.Org/GetAdminClientPreferences"
	// OrgUpdateAdminClientPreferencesProcedure is the fully-qualified name of the Org's
	// UpdateAdminClientPreferences RPC.
	OrgUpdateAdminClientPreferencesProcedure = "/api.v1alpha1.org.Org/UpdateAdminClientPreferences"
	// OrgAcceptLinkbackRecordingTermsProcedure is the fully-qualified name of the Org's
	// AcceptLinkbackRecordingTerms RPC.
	OrgAcceptLinkbackRecordingTermsProcedure = "/api.v1alpha1.org.Org/AcceptLinkbackRecordingTerms"
	// OrgLinkbackUpdateBroadcastTemplatesProcedure is the fully-qualified name of the Org's
	// LinkbackUpdateBroadcastTemplates RPC.
	OrgLinkbackUpdateBroadcastTemplatesProcedure = "/api.v1alpha1.org.Org/LinkbackUpdateBroadcastTemplates"
	// OrgRecordEmailUnsubscribeAcknowledgementProcedure is the fully-qualified name of the Org's
	// RecordEmailUnsubscribeAcknowledgement RPC.
	OrgRecordEmailUnsubscribeAcknowledgementProcedure = "/api.v1alpha1.org.Org/RecordEmailUnsubscribeAcknowledgement"
	// OrgClearEmailUnsubscribeAcknowledgementProcedure is the fully-qualified name of the Org's
	// ClearEmailUnsubscribeAcknowledgement RPC.
	OrgClearEmailUnsubscribeAcknowledgementProcedure = "/api.v1alpha1.org.Org/ClearEmailUnsubscribeAcknowledgement"
	// OrgListBusinessHoursProcedure is the fully-qualified name of the Org's ListBusinessHours RPC.
	OrgListBusinessHoursProcedure = "/api.v1alpha1.org.Org/ListBusinessHours"
	// OrgGetBusinessHoursProcedure is the fully-qualified name of the Org's GetBusinessHours RPC.
	OrgGetBusinessHoursProcedure = "/api.v1alpha1.org.Org/GetBusinessHours"
	// OrgSetBusinessHoursProcedure is the fully-qualified name of the Org's SetBusinessHours RPC.
	OrgSetBusinessHoursProcedure = "/api.v1alpha1.org.Org/SetBusinessHours"
	// OrgAddIntervalToBusinessHoursProcedure is the fully-qualified name of the Org's
	// AddIntervalToBusinessHours RPC.
	OrgAddIntervalToBusinessHoursProcedure = "/api.v1alpha1.org.Org/AddIntervalToBusinessHours"
	// OrgRemoveIntervalFromBusinessHoursProcedure is the fully-qualified name of the Org's
	// RemoveIntervalFromBusinessHours RPC.
	OrgRemoveIntervalFromBusinessHoursProcedure = "/api.v1alpha1.org.Org/RemoveIntervalFromBusinessHours"
	// OrgUpdateBusinessHoursInfoProcedure is the fully-qualified name of the Org's
	// UpdateBusinessHoursInfo RPC.
	OrgUpdateBusinessHoursInfoProcedure = "/api.v1alpha1.org.Org/UpdateBusinessHoursInfo"
	// OrgDeleteBusinessHoursProcedure is the fully-qualified name of the Org's DeleteBusinessHours RPC.
	OrgDeleteBusinessHoursProcedure = "/api.v1alpha1.org.Org/DeleteBusinessHours"
	// OrgEvaluateBusinessHoursProcedure is the fully-qualified name of the Org's EvaluateBusinessHours
	// RPC.
	OrgEvaluateBusinessHoursProcedure = "/api.v1alpha1.org.Org/EvaluateBusinessHours"
	// OrgCreateUserProcedure is the fully-qualified name of the Org's CreateUser RPC.
	OrgCreateUserProcedure = "/api.v1alpha1.org.Org/CreateUser"
	// OrgCreateDelegatedUserProcedure is the fully-qualified name of the Org's CreateDelegatedUser RPC.
	OrgCreateDelegatedUserProcedure = "/api.v1alpha1.org.Org/CreateDelegatedUser"
	// OrgGetMyUserProcedure is the fully-qualified name of the Org's GetMyUser RPC.
	OrgGetMyUserProcedure = "/api.v1alpha1.org.Org/GetMyUser"
	// OrgGetUserProcedure is the fully-qualified name of the Org's GetUser RPC.
	OrgGetUserProcedure = "/api.v1alpha1.org.Org/GetUser"
	// OrgGetUserByOrgIdProcedure is the fully-qualified name of the Org's GetUserByOrgId RPC.
	OrgGetUserByOrgIdProcedure = "/api.v1alpha1.org.Org/GetUserByOrgId"
	// OrgListAgentsProcedure is the fully-qualified name of the Org's ListAgents RPC.
	OrgListAgentsProcedure = "/api.v1alpha1.org.Org/ListAgents"
	// OrgListPublicUsersProcedure is the fully-qualified name of the Org's ListPublicUsers RPC.
	OrgListPublicUsersProcedure = "/api.v1alpha1.org.Org/ListPublicUsers"
	// OrgListUsersProcedure is the fully-qualified name of the Org's ListUsers RPC.
	OrgListUsersProcedure = "/api.v1alpha1.org.Org/ListUsers"
	// OrgListUsersByOrgIdProcedure is the fully-qualified name of the Org's ListUsersByOrgId RPC.
	OrgListUsersByOrgIdProcedure = "/api.v1alpha1.org.Org/ListUsersByOrgId"
	// OrgListUsersByRegionProcedure is the fully-qualified name of the Org's ListUsersByRegion RPC.
	OrgListUsersByRegionProcedure = "/api.v1alpha1.org.Org/ListUsersByRegion"
	// OrgUpdateMyUserProcedure is the fully-qualified name of the Org's UpdateMyUser RPC.
	OrgUpdateMyUserProcedure = "/api.v1alpha1.org.Org/UpdateMyUser"
	// OrgUpdateUserProcedure is the fully-qualified name of the Org's UpdateUser RPC.
	OrgUpdateUserProcedure = "/api.v1alpha1.org.Org/UpdateUser"
	// OrgUpdateUserLabelsProcedure is the fully-qualified name of the Org's UpdateUserLabels RPC.
	OrgUpdateUserLabelsProcedure = "/api.v1alpha1.org.Org/UpdateUserLabels"
	// OrgUpdateUserCallerIdProcedure is the fully-qualified name of the Org's UpdateUserCallerId RPC.
	OrgUpdateUserCallerIdProcedure = "/api.v1alpha1.org.Org/UpdateUserCallerId"
	// OrgUpdateUserDisabledProcedure is the fully-qualified name of the Org's UpdateUserDisabled RPC.
	OrgUpdateUserDisabledProcedure = "/api.v1alpha1.org.Org/UpdateUserDisabled"
	// OrgUpdateUserDisabledByOrgIdProcedure is the fully-qualified name of the Org's
	// UpdateUserDisabledByOrgId RPC.
	OrgUpdateUserDisabledByOrgIdProcedure = "/api.v1alpha1.org.Org/UpdateUserDisabledByOrgId"
	// OrgGetMyUserPasswordResetLinkProcedure is the fully-qualified name of the Org's
	// GetMyUserPasswordResetLink RPC.
	OrgGetMyUserPasswordResetLinkProcedure = "/api.v1alpha1.org.Org/GetMyUserPasswordResetLink"
	// OrgGetUserPasswordResetLinkProcedure is the fully-qualified name of the Org's
	// GetUserPasswordResetLink RPC.
	OrgGetUserPasswordResetLinkProcedure = "/api.v1alpha1.org.Org/GetUserPasswordResetLink"
	// OrgGetUserPasswordResetLinkByOrgIdProcedure is the fully-qualified name of the Org's
	// GetUserPasswordResetLinkByOrgId RPC.
	OrgGetUserPasswordResetLinkByOrgIdProcedure = "/api.v1alpha1.org.Org/GetUserPasswordResetLinkByOrgId"
	// OrgCreatePasswordResetLinkProcedure is the fully-qualified name of the Org's
	// CreatePasswordResetLink RPC.
	OrgCreatePasswordResetLinkProcedure = "/api.v1alpha1.org.Org/CreatePasswordResetLink"
	// OrgCreatePasswordResetLinkByOrgIdProcedure is the fully-qualified name of the Org's
	// CreatePasswordResetLinkByOrgId RPC.
	OrgCreatePasswordResetLinkByOrgIdProcedure = "/api.v1alpha1.org.Org/CreatePasswordResetLinkByOrgId"
	// OrgGetUserLoginInfoProcedure is the fully-qualified name of the Org's GetUserLoginInfo RPC.
	OrgGetUserLoginInfoProcedure = "/api.v1alpha1.org.Org/GetUserLoginInfo"
	// OrgGetUserEmailVerifiedProcedure is the fully-qualified name of the Org's GetUserEmailVerified
	// RPC.
	OrgGetUserEmailVerifiedProcedure = "/api.v1alpha1.org.Org/GetUserEmailVerified"
	// OrgGetUserEmailVerifiedByOrgIdProcedure is the fully-qualified name of the Org's
	// GetUserEmailVerifiedByOrgId RPC.
	OrgGetUserEmailVerifiedByOrgIdProcedure = "/api.v1alpha1.org.Org/GetUserEmailVerifiedByOrgId"
	// OrgResetMyPasswordProcedure is the fully-qualified name of the Org's ResetMyPassword RPC.
	OrgResetMyPasswordProcedure = "/api.v1alpha1.org.Org/ResetMyPassword"
	// OrgResetUserPasswordProcedure is the fully-qualified name of the Org's ResetUserPassword RPC.
	OrgResetUserPasswordProcedure = "/api.v1alpha1.org.Org/ResetUserPassword"
	// OrgResetUserPasswordByOrgIdProcedure is the fully-qualified name of the Org's
	// ResetUserPasswordByOrgId RPC.
	OrgResetUserPasswordByOrgIdProcedure = "/api.v1alpha1.org.Org/ResetUserPasswordByOrgId"
	// OrgSendUserEmailVerificationProcedure is the fully-qualified name of the Org's
	// SendUserEmailVerification RPC.
	OrgSendUserEmailVerificationProcedure = "/api.v1alpha1.org.Org/SendUserEmailVerification"
	// OrgSendUserEmailVerificationByOrgIdProcedure is the fully-qualified name of the Org's
	// SendUserEmailVerificationByOrgId RPC.
	OrgSendUserEmailVerificationByOrgIdProcedure = "/api.v1alpha1.org.Org/SendUserEmailVerificationByOrgId"
	// OrgSendPasswordResetProcedure is the fully-qualified name of the Org's SendPasswordReset RPC.
	OrgSendPasswordResetProcedure = "/api.v1alpha1.org.Org/SendPasswordReset"
	// OrgSendPasswordResetByOrgIdProcedure is the fully-qualified name of the Org's
	// SendPasswordResetByOrgId RPC.
	OrgSendPasswordResetByOrgIdProcedure = "/api.v1alpha1.org.Org/SendPasswordResetByOrgId"
	// OrgGetUserSessionDataProcedure is the fully-qualified name of the Org's GetUserSessionData RPC.
	OrgGetUserSessionDataProcedure = "/api.v1alpha1.org.Org/GetUserSessionData"
	// OrgGetAgentProfileGroupProcedure is the fully-qualified name of the Org's GetAgentProfileGroup
	// RPC.
	OrgGetAgentProfileGroupProcedure = "/api.v1alpha1.org.Org/GetAgentProfileGroup"
	// OrgListAgentProfileGroupsProcedure is the fully-qualified name of the Org's
	// ListAgentProfileGroups RPC.
	OrgListAgentProfileGroupsProcedure = "/api.v1alpha1.org.Org/ListAgentProfileGroups"
	// OrgUpdateAgentProfileGroupProcedure is the fully-qualified name of the Org's
	// UpdateAgentProfileGroup RPC.
	OrgUpdateAgentProfileGroupProcedure = "/api.v1alpha1.org.Org/UpdateAgentProfileGroup"
	// OrgCreateAgentProfileGroupProcedure is the fully-qualified name of the Org's
	// CreateAgentProfileGroup RPC.
	OrgCreateAgentProfileGroupProcedure = "/api.v1alpha1.org.Org/CreateAgentProfileGroup"
	// OrgDeleteAgentProfileGroupProcedure is the fully-qualified name of the Org's
	// DeleteAgentProfileGroup RPC.
	OrgDeleteAgentProfileGroupProcedure = "/api.v1alpha1.org.Org/DeleteAgentProfileGroup"
	// OrgAssignAgentProfileGroupsProcedure is the fully-qualified name of the Org's
	// AssignAgentProfileGroups RPC.
	OrgAssignAgentProfileGroupsProcedure = "/api.v1alpha1.org.Org/AssignAgentProfileGroups"
	// OrgAddUserSubscriptionProcedure is the fully-qualified name of the Org's AddUserSubscription RPC.
	OrgAddUserSubscriptionProcedure = "/api.v1alpha1.org.Org/AddUserSubscription"
	// OrgAddUserSubscriptionByUserIdProcedure is the fully-qualified name of the Org's
	// AddUserSubscriptionByUserId RPC.
	OrgAddUserSubscriptionByUserIdProcedure = "/api.v1alpha1.org.Org/AddUserSubscriptionByUserId"
	// OrgGetUserSubscriptionProcedure is the fully-qualified name of the Org's GetUserSubscription RPC.
	OrgGetUserSubscriptionProcedure = "/api.v1alpha1.org.Org/GetUserSubscription"
	// OrgGetUserSubscriptionByUserIdProcedure is the fully-qualified name of the Org's
	// GetUserSubscriptionByUserId RPC.
	OrgGetUserSubscriptionByUserIdProcedure = "/api.v1alpha1.org.Org/GetUserSubscriptionByUserId"
	// OrgUpdateUserSubscriptionProcedure is the fully-qualified name of the Org's
	// UpdateUserSubscription RPC.
	OrgUpdateUserSubscriptionProcedure = "/api.v1alpha1.org.Org/UpdateUserSubscription"
	// OrgUpdateUserSubscriptionByUserIdProcedure is the fully-qualified name of the Org's
	// UpdateUserSubscriptionByUserId RPC.
	OrgUpdateUserSubscriptionByUserIdProcedure = "/api.v1alpha1.org.Org/UpdateUserSubscriptionByUserId"
	// OrgRemoveUserSubscriptionProcedure is the fully-qualified name of the Org's
	// RemoveUserSubscription RPC.
	OrgRemoveUserSubscriptionProcedure = "/api.v1alpha1.org.Org/RemoveUserSubscription"
	// OrgRemoveUserSubscriptionByUserIdProcedure is the fully-qualified name of the Org's
	// RemoveUserSubscriptionByUserId RPC.
	OrgRemoveUserSubscriptionByUserIdProcedure = "/api.v1alpha1.org.Org/RemoveUserSubscriptionByUserId"
	// OrgListUserSubscriptionsProcedure is the fully-qualified name of the Org's ListUserSubscriptions
	// RPC.
	OrgListUserSubscriptionsProcedure = "/api.v1alpha1.org.Org/ListUserSubscriptions"
	// OrgListUserSubscriptionsByUserIdProcedure is the fully-qualified name of the Org's
	// ListUserSubscriptionsByUserId RPC.
	OrgListUserSubscriptionsByUserIdProcedure = "/api.v1alpha1.org.Org/ListUserSubscriptionsByUserId"
	// OrgListOrgSubscriptionsProcedure is the fully-qualified name of the Org's ListOrgSubscriptions
	// RPC.
	OrgListOrgSubscriptionsProcedure = "/api.v1alpha1.org.Org/ListOrgSubscriptions"
	// OrgCreateAuthTokenProcedure is the fully-qualified name of the Org's CreateAuthToken RPC.
	OrgCreateAuthTokenProcedure = "/api.v1alpha1.org.Org/CreateAuthToken"
	// OrgCreateAuthTokenByUserIdProcedure is the fully-qualified name of the Org's
	// CreateAuthTokenByUserId RPC.
	OrgCreateAuthTokenByUserIdProcedure = "/api.v1alpha1.org.Org/CreateAuthTokenByUserId"
	// OrgListAuthTokensProcedure is the fully-qualified name of the Org's ListAuthTokens RPC.
	OrgListAuthTokensProcedure = "/api.v1alpha1.org.Org/ListAuthTokens"
	// OrgListAuthTokensByUserIdProcedure is the fully-qualified name of the Org's
	// ListAuthTokensByUserId RPC.
	OrgListAuthTokensByUserIdProcedure = "/api.v1alpha1.org.Org/ListAuthTokensByUserId"
	// OrgSetAuthTokenExpirationProcedure is the fully-qualified name of the Org's
	// SetAuthTokenExpiration RPC.
	OrgSetAuthTokenExpirationProcedure = "/api.v1alpha1.org.Org/SetAuthTokenExpiration"
	// OrgSetAuthTokenExpirationByUserIdProcedure is the fully-qualified name of the Org's
	// SetAuthTokenExpirationByUserId RPC.
	OrgSetAuthTokenExpirationByUserIdProcedure = "/api.v1alpha1.org.Org/SetAuthTokenExpirationByUserId"
	// OrgDeleteAuthTokenProcedure is the fully-qualified name of the Org's DeleteAuthToken RPC.
	OrgDeleteAuthTokenProcedure = "/api.v1alpha1.org.Org/DeleteAuthToken"
	// OrgDeleteAuthTokenByUserIdProcedure is the fully-qualified name of the Org's
	// DeleteAuthTokenByUserId RPC.
	OrgDeleteAuthTokenByUserIdProcedure = "/api.v1alpha1.org.Org/DeleteAuthTokenByUserId"
	// OrgGetHuntGroupSettingsProcedure is the fully-qualified name of the Org's GetHuntGroupSettings
	// RPC.
	OrgGetHuntGroupSettingsProcedure = "/api.v1alpha1.org.Org/GetHuntGroupSettings"
	// OrgUpdateHuntGroupSettingsProcedure is the fully-qualified name of the Org's
	// UpdateHuntGroupSettings RPC.
	OrgUpdateHuntGroupSettingsProcedure = "/api.v1alpha1.org.Org/UpdateHuntGroupSettings"
	// OrgCreateHuntGroupProcedure is the fully-qualified name of the Org's CreateHuntGroup RPC.
	OrgCreateHuntGroupProcedure = "/api.v1alpha1.org.Org/CreateHuntGroup"
	// OrgUpdateHuntGroupGeneralDetailsProcedure is the fully-qualified name of the Org's
	// UpdateHuntGroupGeneralDetails RPC.
	OrgUpdateHuntGroupGeneralDetailsProcedure = "/api.v1alpha1.org.Org/UpdateHuntGroupGeneralDetails"
	// OrgDeleteHuntGroupProcedure is the fully-qualified name of the Org's DeleteHuntGroup RPC.
	OrgDeleteHuntGroupProcedure = "/api.v1alpha1.org.Org/DeleteHuntGroup"
	// OrgGetHuntGroupDetailsProcedure is the fully-qualified name of the Org's GetHuntGroupDetails RPC.
	OrgGetHuntGroupDetailsProcedure = "/api.v1alpha1.org.Org/GetHuntGroupDetails"
	// OrgListCallerIdBucketsProcedure is the fully-qualified name of the Org's ListCallerIdBuckets RPC.
	OrgListCallerIdBucketsProcedure = "/api.v1alpha1.org.Org/ListCallerIdBuckets"
	// OrgGetDataDipTemplateProcedure is the fully-qualified name of the Org's GetDataDipTemplate RPC.
	OrgGetDataDipTemplateProcedure = "/api.v1alpha1.org.Org/GetDataDipTemplate"
	// OrgListDataDipTemplatesProcedure is the fully-qualified name of the Org's ListDataDipTemplates
	// RPC.
	OrgListDataDipTemplatesProcedure = "/api.v1alpha1.org.Org/ListDataDipTemplates"
	// OrgCreateDataDipTemplateProcedure is the fully-qualified name of the Org's CreateDataDipTemplate
	// RPC.
	OrgCreateDataDipTemplateProcedure = "/api.v1alpha1.org.Org/CreateDataDipTemplate"
	// OrgUpdateDataDipTemplateProcedure is the fully-qualified name of the Org's UpdateDataDipTemplate
	// RPC.
	OrgUpdateDataDipTemplateProcedure = "/api.v1alpha1.org.Org/UpdateDataDipTemplate"
	// OrgDeleteDataDipTemplateProcedure is the fully-qualified name of the Org's DeleteDataDipTemplate
	// RPC.
	OrgDeleteDataDipTemplateProcedure = "/api.v1alpha1.org.Org/DeleteDataDipTemplate"
	// OrgCopyDataDipTemplateProcedure is the fully-qualified name of the Org's CopyDataDipTemplate RPC.
	OrgCopyDataDipTemplateProcedure = "/api.v1alpha1.org.Org/CopyDataDipTemplate"
	// OrgCopyDataDipTemplateToOrganizationProcedure is the fully-qualified name of the Org's
	// CopyDataDipTemplateToOrganization RPC.
	OrgCopyDataDipTemplateToOrganizationProcedure = "/api.v1alpha1.org.Org/CopyDataDipTemplateToOrganization"
	// OrgListBroadcastTemplateGeneralDetailsProcedure is the fully-qualified name of the Org's
	// ListBroadcastTemplateGeneralDetails RPC.
	OrgListBroadcastTemplateGeneralDetailsProcedure = "/api.v1alpha1.org.Org/ListBroadcastTemplateGeneralDetails"
	// OrgListAgentResponseAutoRulesProcedure is the fully-qualified name of the Org's
	// ListAgentResponseAutoRules RPC.
	OrgListAgentResponseAutoRulesProcedure = "/api.v1alpha1.org.Org/ListAgentResponseAutoRules"
	// OrgCreateAgentResponseAutoRulesProcedure is the fully-qualified name of the Org's
	// CreateAgentResponseAutoRules RPC.
	OrgCreateAgentResponseAutoRulesProcedure = "/api.v1alpha1.org.Org/CreateAgentResponseAutoRules"
	// OrgUpdateAgentResponseAutoRulesProcedure is the fully-qualified name of the Org's
	// UpdateAgentResponseAutoRules RPC.
	OrgUpdateAgentResponseAutoRulesProcedure = "/api.v1alpha1.org.Org/UpdateAgentResponseAutoRules"
	// OrgDeleteAgentResponseAutoRulesProcedure is the fully-qualified name of the Org's
	// DeleteAgentResponseAutoRules RPC.
	OrgDeleteAgentResponseAutoRulesProcedure = "/api.v1alpha1.org.Org/DeleteAgentResponseAutoRules"
	// OrgListHuntGroupWebLinksProcedure is the fully-qualified name of the Org's ListHuntGroupWebLinks
	// RPC.
	OrgListHuntGroupWebLinksProcedure = "/api.v1alpha1.org.Org/ListHuntGroupWebLinks"
	// OrgCopyHuntGroupWebLinkProcedure is the fully-qualified name of the Org's CopyHuntGroupWebLink
	// RPC.
	OrgCopyHuntGroupWebLinkProcedure = "/api.v1alpha1.org.Org/CopyHuntGroupWebLink"
	// OrgUpdateHuntGroupWebLinksProcedure is the fully-qualified name of the Org's
	// UpdateHuntGroupWebLinks RPC.
	OrgUpdateHuntGroupWebLinksProcedure = "/api.v1alpha1.org.Org/UpdateHuntGroupWebLinks"
	// OrgListHuntGroupIntegrationLinksProcedure is the fully-qualified name of the Org's
	// ListHuntGroupIntegrationLinks RPC.
	OrgListHuntGroupIntegrationLinksProcedure = "/api.v1alpha1.org.Org/ListHuntGroupIntegrationLinks"
	// OrgCopyHuntGroupIntegrationLinkProcedure is the fully-qualified name of the Org's
	// CopyHuntGroupIntegrationLink RPC.
	OrgCopyHuntGroupIntegrationLinkProcedure = "/api.v1alpha1.org.Org/CopyHuntGroupIntegrationLink"
	// OrgUpdateHuntGroupIntegrationLinksProcedure is the fully-qualified name of the Org's
	// UpdateHuntGroupIntegrationLinks RPC.
	OrgUpdateHuntGroupIntegrationLinksProcedure = "/api.v1alpha1.org.Org/UpdateHuntGroupIntegrationLinks"
	// OrgGetHuntGroupClientInfoDisplayTemplateProcedure is the fully-qualified name of the Org's
	// GetHuntGroupClientInfoDisplayTemplate RPC.
	OrgGetHuntGroupClientInfoDisplayTemplateProcedure = "/api.v1alpha1.org.Org/GetHuntGroupClientInfoDisplayTemplate"
	// OrgCreateHuntGroupClientInfoDisplayTemplateProcedure is the fully-qualified name of the Org's
	// CreateHuntGroupClientInfoDisplayTemplate RPC.
	OrgCreateHuntGroupClientInfoDisplayTemplateProcedure = "/api.v1alpha1.org.Org/CreateHuntGroupClientInfoDisplayTemplate"
	// OrgUpdateHuntGroupClientInfoDisplayTemplateProcedure is the fully-qualified name of the Org's
	// UpdateHuntGroupClientInfoDisplayTemplate RPC.
	OrgUpdateHuntGroupClientInfoDisplayTemplateProcedure = "/api.v1alpha1.org.Org/UpdateHuntGroupClientInfoDisplayTemplate"
	// OrgDeleteHuntGroupClientInfoDisplayTemplateProcedure is the fully-qualified name of the Org's
	// DeleteHuntGroupClientInfoDisplayTemplate RPC.
	OrgDeleteHuntGroupClientInfoDisplayTemplateProcedure = "/api.v1alpha1.org.Org/DeleteHuntGroupClientInfoDisplayTemplate"
	// OrgCopyHuntGroupClientInfoDisplayTemplateProcedure is the fully-qualified name of the Org's
	// CopyHuntGroupClientInfoDisplayTemplate RPC.
	OrgCopyHuntGroupClientInfoDisplayTemplateProcedure = "/api.v1alpha1.org.Org/CopyHuntGroupClientInfoDisplayTemplate"
	// OrgCreateCampaignClientInfoDisplayTemplateProcedure is the fully-qualified name of the Org's
	// CreateCampaignClientInfoDisplayTemplate RPC.
	OrgCreateCampaignClientInfoDisplayTemplateProcedure = "/api.v1alpha1.org.Org/CreateCampaignClientInfoDisplayTemplate"
	// OrgListHuntGroupsWithClientInfoTemplateDataProcedure is the fully-qualified name of the Org's
	// ListHuntGroupsWithClientInfoTemplateData RPC.
	OrgListHuntGroupsWithClientInfoTemplateDataProcedure = "/api.v1alpha1.org.Org/ListHuntGroupsWithClientInfoTemplateData"
	// OrgListAgentTriggersProcedure is the fully-qualified name of the Org's ListAgentTriggers RPC.
	OrgListAgentTriggersProcedure = "/api.v1alpha1.org.Org/ListAgentTriggers"
	// OrgCopyAgentTriggerProcedure is the fully-qualified name of the Org's CopyAgentTrigger RPC.
	OrgCopyAgentTriggerProcedure = "/api.v1alpha1.org.Org/CopyAgentTrigger"
	// OrgUpdateAgentTriggersProcedure is the fully-qualified name of the Org's UpdateAgentTriggers RPC.
	OrgUpdateAgentTriggersProcedure = "/api.v1alpha1.org.Org/UpdateAgentTriggers"
	// OrgListHuntGroupScriptsProcedure is the fully-qualified name of the Org's ListHuntGroupScripts
	// RPC.
	OrgListHuntGroupScriptsProcedure = "/api.v1alpha1.org.Org/ListHuntGroupScripts"
	// OrgGetHuntGroupScriptProcedure is the fully-qualified name of the Org's GetHuntGroupScript RPC.
	OrgGetHuntGroupScriptProcedure = "/api.v1alpha1.org.Org/GetHuntGroupScript"
	// OrgCreateHuntGroupScriptProcedure is the fully-qualified name of the Org's CreateHuntGroupScript
	// RPC.
	OrgCreateHuntGroupScriptProcedure = "/api.v1alpha1.org.Org/CreateHuntGroupScript"
	// OrgUpdateHuntGroupScriptProcedure is the fully-qualified name of the Org's UpdateHuntGroupScript
	// RPC.
	OrgUpdateHuntGroupScriptProcedure = "/api.v1alpha1.org.Org/UpdateHuntGroupScript"
	// OrgDeleteHuntGroupScriptProcedure is the fully-qualified name of the Org's DeleteHuntGroupScript
	// RPC.
	OrgDeleteHuntGroupScriptProcedure = "/api.v1alpha1.org.Org/DeleteHuntGroupScript"
	// OrgAssignScriptToHuntGroupsProcedure is the fully-qualified name of the Org's
	// AssignScriptToHuntGroups RPC.
	OrgAssignScriptToHuntGroupsProcedure = "/api.v1alpha1.org.Org/AssignScriptToHuntGroups"
	// OrgUnassignScriptFromHuntGroupsProcedure is the fully-qualified name of the Org's
	// UnassignScriptFromHuntGroups RPC.
	OrgUnassignScriptFromHuntGroupsProcedure = "/api.v1alpha1.org.Org/UnassignScriptFromHuntGroups"
	// OrgCreateTrustProcedure is the fully-qualified name of the Org's CreateTrust RPC.
	OrgCreateTrustProcedure = "/api.v1alpha1.org.Org/CreateTrust"
	// OrgAcceptTrustProcedure is the fully-qualified name of the Org's AcceptTrust RPC.
	OrgAcceptTrustProcedure = "/api.v1alpha1.org.Org/AcceptTrust"
	// OrgRejectTrustProcedure is the fully-qualified name of the Org's RejectTrust RPC.
	OrgRejectTrustProcedure = "/api.v1alpha1.org.Org/RejectTrust"
	// OrgGetTrustProcedure is the fully-qualified name of the Org's GetTrust RPC.
	OrgGetTrustProcedure = "/api.v1alpha1.org.Org/GetTrust"
	// OrgListIncomingTrustsProcedure is the fully-qualified name of the Org's ListIncomingTrusts RPC.
	OrgListIncomingTrustsProcedure = "/api.v1alpha1.org.Org/ListIncomingTrusts"
	// OrgListGivenTrustsProcedure is the fully-qualified name of the Org's ListGivenTrusts RPC.
	OrgListGivenTrustsProcedure = "/api.v1alpha1.org.Org/ListGivenTrusts"
	// OrgListAssignableTrustsProcedure is the fully-qualified name of the Org's ListAssignableTrusts
	// RPC.
	OrgListAssignableTrustsProcedure = "/api.v1alpha1.org.Org/ListAssignableTrusts"
	// OrgDeleteTrustProcedure is the fully-qualified name of the Org's DeleteTrust RPC.
	OrgDeleteTrustProcedure = "/api.v1alpha1.org.Org/DeleteTrust"
	// OrgAssignTrustProcedure is the fully-qualified name of the Org's AssignTrust RPC.
	OrgAssignTrustProcedure = "/api.v1alpha1.org.Org/AssignTrust"
	// OrgUnassignTrustProcedure is the fully-qualified name of the Org's UnassignTrust RPC.
	OrgUnassignTrustProcedure = "/api.v1alpha1.org.Org/UnassignTrust"
	// OrgCreateLabelProcedure is the fully-qualified name of the Org's CreateLabel RPC.
	OrgCreateLabelProcedure = "/api.v1alpha1.org.Org/CreateLabel"
	// OrgDeleteLabelProcedure is the fully-qualified name of the Org's DeleteLabel RPC.
	OrgDeleteLabelProcedure = "/api.v1alpha1.org.Org/DeleteLabel"
	// OrgListLabelsProcedure is the fully-qualified name of the Org's ListLabels RPC.
	OrgListLabelsProcedure = "/api.v1alpha1.org.Org/ListLabels"
	// OrgGetLabelProcedure is the fully-qualified name of the Org's GetLabel RPC.
	OrgGetLabelProcedure = "/api.v1alpha1.org.Org/GetLabel"
	// OrgUpdateLabelProcedure is the fully-qualified name of the Org's UpdateLabel RPC.
	OrgUpdateLabelProcedure = "/api.v1alpha1.org.Org/UpdateLabel"
	// OrgAssignLabelProcedure is the fully-qualified name of the Org's AssignLabel RPC.
	OrgAssignLabelProcedure = "/api.v1alpha1.org.Org/AssignLabel"
	// OrgUnassignLabelProcedure is the fully-qualified name of the Org's UnassignLabel RPC.
	OrgUnassignLabelProcedure = "/api.v1alpha1.org.Org/UnassignLabel"
	// OrgGetAssignmentCountsProcedure is the fully-qualified name of the Org's GetAssignmentCounts RPC.
	OrgGetAssignmentCountsProcedure = "/api.v1alpha1.org.Org/GetAssignmentCounts"
	// OrgGetAssignableLabelsProcedure is the fully-qualified name of the Org's GetAssignableLabels RPC.
	OrgGetAssignableLabelsProcedure = "/api.v1alpha1.org.Org/GetAssignableLabels"
	// OrgGetPermissionsProcedure is the fully-qualified name of the Org's GetPermissions RPC.
	OrgGetPermissionsProcedure = "/api.v1alpha1.org.Org/GetPermissions"
	// OrgGetUserPermissionsProcedure is the fully-qualified name of the Org's GetUserPermissions RPC.
	OrgGetUserPermissionsProcedure = "/api.v1alpha1.org.Org/GetUserPermissions"
	// OrgCreatePermissionGroupProcedure is the fully-qualified name of the Org's CreatePermissionGroup
	// RPC.
	OrgCreatePermissionGroupProcedure = "/api.v1alpha1.org.Org/CreatePermissionGroup"
	// OrgUpdatePermissionGroupProcedure is the fully-qualified name of the Org's UpdatePermissionGroup
	// RPC.
	OrgUpdatePermissionGroupProcedure = "/api.v1alpha1.org.Org/UpdatePermissionGroup"
	// OrgDeletePermissionGroupProcedure is the fully-qualified name of the Org's DeletePermissionGroup
	// RPC.
	OrgDeletePermissionGroupProcedure = "/api.v1alpha1.org.Org/DeletePermissionGroup"
	// OrgListPermissionGroupsProcedure is the fully-qualified name of the Org's ListPermissionGroups
	// RPC.
	OrgListPermissionGroupsProcedure = "/api.v1alpha1.org.Org/ListPermissionGroups"
	// OrgListPermissionGroupsByOrgIdProcedure is the fully-qualified name of the Org's
	// ListPermissionGroupsByOrgId RPC.
	OrgListPermissionGroupsByOrgIdProcedure = "/api.v1alpha1.org.Org/ListPermissionGroupsByOrgId"
	// OrgAssignUsersPermissionGroupProcedure is the fully-qualified name of the Org's
	// AssignUsersPermissionGroup RPC.
	OrgAssignUsersPermissionGroupProcedure = "/api.v1alpha1.org.Org/AssignUsersPermissionGroup"
	// OrgRevokeUsersPermissionGroupProcedure is the fully-qualified name of the Org's
	// RevokeUsersPermissionGroup RPC.
	OrgRevokeUsersPermissionGroupProcedure = "/api.v1alpha1.org.Org/RevokeUsersPermissionGroup"
	// OrgAssignLabelsProcedure is the fully-qualified name of the Org's AssignLabels RPC.
	OrgAssignLabelsProcedure = "/api.v1alpha1.org.Org/AssignLabels"
	// OrgRevokeLabelsProcedure is the fully-qualified name of the Org's RevokeLabels RPC.
	OrgRevokeLabelsProcedure = "/api.v1alpha1.org.Org/RevokeLabels"
	// OrgAssignAccountOwnerPermissionToUserProcedure is the fully-qualified name of the Org's
	// AssignAccountOwnerPermissionToUser RPC.
	OrgAssignAccountOwnerPermissionToUserProcedure = "/api.v1alpha1.org.Org/AssignAccountOwnerPermissionToUser"
	// OrgRevokeAccountOwnerPermissionFromUserProcedure is the fully-qualified name of the Org's
	// RevokeAccountOwnerPermissionFromUser RPC.
	OrgRevokeAccountOwnerPermissionFromUserProcedure = "/api.v1alpha1.org.Org/RevokeAccountOwnerPermissionFromUser"
	// OrgInitDefaultPermissionGroupsProcedure is the fully-qualified name of the Org's
	// InitDefaultPermissionGroups RPC.
	OrgInitDefaultPermissionGroupsProcedure = "/api.v1alpha1.org.Org/InitDefaultPermissionGroups"
	// OrgGetAccountOwnerGroupProcedure is the fully-qualified name of the Org's GetAccountOwnerGroup
	// RPC.
	OrgGetAccountOwnerGroupProcedure = "/api.v1alpha1.org.Org/GetAccountOwnerGroup"
	// OrgGetLicensesProcedure is the fully-qualified name of the Org's GetLicenses RPC.
	OrgGetLicensesProcedure = "/api.v1alpha1.org.Org/GetLicenses"
	// OrgGetOrgLicensesProcedure is the fully-qualified name of the Org's GetOrgLicenses RPC.
	OrgGetOrgLicensesProcedure = "/api.v1alpha1.org.Org/GetOrgLicenses"
	// OrgUpdateLicensesProcedure is the fully-qualified name of the Org's UpdateLicenses RPC.
	OrgUpdateLicensesProcedure = "/api.v1alpha1.org.Org/UpdateLicenses"
	// OrgRemovePermissionFromAllPermissionGroupsProcedure is the fully-qualified name of the Org's
	// RemovePermissionFromAllPermissionGroups RPC.
	OrgRemovePermissionFromAllPermissionGroupsProcedure = "/api.v1alpha1.org.Org/RemovePermissionFromAllPermissionGroups"
	// OrgListP3PermissionGroupsProcedure is the fully-qualified name of the Org's
	// ListP3PermissionGroups RPC.
	OrgListP3PermissionGroupsProcedure = "/api.v1alpha1.org.Org/ListP3PermissionGroups"
	// OrgListP3PermissionGroupsByOrgIdProcedure is the fully-qualified name of the Org's
	// ListP3PermissionGroupsByOrgId RPC.
	OrgListP3PermissionGroupsByOrgIdProcedure = "/api.v1alpha1.org.Org/ListP3PermissionGroupsByOrgId"
	// OrgCreateP3PermissionGroupProcedure is the fully-qualified name of the Org's
	// CreateP3PermissionGroup RPC.
	OrgCreateP3PermissionGroupProcedure = "/api.v1alpha1.org.Org/CreateP3PermissionGroup"
	// OrgUpdateP3PermissionGroupProcedure is the fully-qualified name of the Org's
	// UpdateP3PermissionGroup RPC.
	OrgUpdateP3PermissionGroupProcedure = "/api.v1alpha1.org.Org/UpdateP3PermissionGroup"
	// OrgUpdateP3PermissionGroupByOrgIdProcedure is the fully-qualified name of the Org's
	// UpdateP3PermissionGroupByOrgId RPC.
	OrgUpdateP3PermissionGroupByOrgIdProcedure = "/api.v1alpha1.org.Org/UpdateP3PermissionGroupByOrgId"
	// OrgDeleteP3PermissionGroupProcedure is the fully-qualified name of the Org's
	// DeleteP3PermissionGroup RPC.
	OrgDeleteP3PermissionGroupProcedure = "/api.v1alpha1.org.Org/DeleteP3PermissionGroup"
	// OrgAssignUsersP3PermissionGroupProcedure is the fully-qualified name of the Org's
	// AssignUsersP3PermissionGroup RPC.
	OrgAssignUsersP3PermissionGroupProcedure = "/api.v1alpha1.org.Org/AssignUsersP3PermissionGroup"
	// OrgRevokeUsersP3PermissionGroupProcedure is the fully-qualified name of the Org's
	// RevokeUsersP3PermissionGroup RPC.
	OrgRevokeUsersP3PermissionGroupProcedure = "/api.v1alpha1.org.Org/RevokeUsersP3PermissionGroup"
	// OrgRefreshMfaLockoutProcedure is the fully-qualified name of the Org's RefreshMfaLockout RPC.
	OrgRefreshMfaLockoutProcedure = "/api.v1alpha1.org.Org/RefreshMfaLockout"
	// OrgRefreshMfaLockoutByOrgIdProcedure is the fully-qualified name of the Org's
	// RefreshMfaLockoutByOrgId RPC.
	OrgRefreshMfaLockoutByOrgIdProcedure = "/api.v1alpha1.org.Org/RefreshMfaLockoutByOrgId"
	// OrgSetMfaTypeProcedure is the fully-qualified name of the Org's SetMfaType RPC.
	OrgSetMfaTypeProcedure = "/api.v1alpha1.org.Org/SetMfaType"
	// OrgSetMyMfaTypeProcedure is the fully-qualified name of the Org's SetMyMfaType RPC.
	OrgSetMyMfaTypeProcedure = "/api.v1alpha1.org.Org/SetMyMfaType"
	// OrgEnableUserMfaProcedure is the fully-qualified name of the Org's EnableUserMfa RPC.
	OrgEnableUserMfaProcedure = "/api.v1alpha1.org.Org/EnableUserMfa"
	// OrgEnableMyUserMfaProcedure is the fully-qualified name of the Org's EnableMyUserMfa RPC.
	OrgEnableMyUserMfaProcedure = "/api.v1alpha1.org.Org/EnableMyUserMfa"
	// OrgGetUserMfaInfoProcedure is the fully-qualified name of the Org's GetUserMfaInfo RPC.
	OrgGetUserMfaInfoProcedure = "/api.v1alpha1.org.Org/GetUserMfaInfo"
	// OrgGetMyUserMfaInfoProcedure is the fully-qualified name of the Org's GetMyUserMfaInfo RPC.
	OrgGetMyUserMfaInfoProcedure = "/api.v1alpha1.org.Org/GetMyUserMfaInfo"
	// OrgGetMyAllowedMfaMethodsProcedure is the fully-qualified name of the Org's
	// GetMyAllowedMfaMethods RPC.
	OrgGetMyAllowedMfaMethodsProcedure = "/api.v1alpha1.org.Org/GetMyAllowedMfaMethods"
	// OrgCreateBusinessHoursProcedure is the fully-qualified name of the Org's CreateBusinessHours RPC.
	OrgCreateBusinessHoursProcedure = "/api.v1alpha1.org.Org/CreateBusinessHours"
	// OrgUpdateBusinessHoursProcedure is the fully-qualified name of the Org's UpdateBusinessHours RPC.
	OrgUpdateBusinessHoursProcedure = "/api.v1alpha1.org.Org/UpdateBusinessHours"
	// OrgAddGroupedUserIPRestrictionsProcedure is the fully-qualified name of the Org's
	// AddGroupedUserIPRestrictions RPC.
	OrgAddGroupedUserIPRestrictionsProcedure = "/api.v1alpha1.org.Org/AddGroupedUserIPRestrictions"
	// OrgRemoveGroupedUserIPRestrictionsProcedure is the fully-qualified name of the Org's
	// RemoveGroupedUserIPRestrictions RPC.
	OrgRemoveGroupedUserIPRestrictionsProcedure = "/api.v1alpha1.org.Org/RemoveGroupedUserIPRestrictions"
	// OrgListUsersAllowedIpsProcedure is the fully-qualified name of the Org's ListUsersAllowedIps RPC.
	OrgListUsersAllowedIpsProcedure = "/api.v1alpha1.org.Org/ListUsersAllowedIps"
)

// OrgClient is a client for the api.v1alpha1.org.Org service.
type OrgClient interface {
	// CreateOrganization creates a new organization entity and enables it for the
	// region it is getting created in.
	CreateOrganization(context.Context, *connect_go.Request[org.CreateOrganizationRequest]) (*connect_go.Response[org.CreateOrganizationResponse], error)
	// GetOrganization returns a single organization.
	GetOrganization(context.Context, *connect_go.Request[org.GetOrganizationRequest]) (*connect_go.Response[org.GetOrganizationResponse], error)
	// GetOrganizationById returns a single organization by a given orgId.
	GetOrganizationById(context.Context, *connect_go.Request[org.GetOrganizationByIdRequest]) (*connect_go.Response[org.GetOrganizationByIdResponse], error)
	// UpdateOrganization updates the mutable fields on the Organization entity
	// using the provided field mask.
	UpdateOrganization(context.Context, *connect_go.Request[org.UpdateOrganizationRequest]) (*connect_go.Response[org.UpdateOrganizationResponse], error)
	// Archives an organization. An archived organization effectively disappears, but isn't deleted.
	ArchiveOrganization(context.Context, *connect_go.Request[org.ArchiveOrganizationRequest]) (*connect_go.Response[org.ArchiveOrganizationResponse], error)
	// Unarchives an organization. An archived organization effectively disappears, but isn't deleted.
	UnArchiveOrganization(context.Context, *connect_go.Request[org.UnArchiveOrganizationRequest]) (*connect_go.Response[org.UnArchiveOrganizationResponse], error)
	// ListAllOrganizationsGlobally lists all organizations globally (archived and unarchived).
	ListAllOrganizationsGlobally(context.Context, *connect_go.Request[org.ListAllOrganizationsGloballyRequest]) (*connect_go.ServerStreamForClient[org.ListAllOrganizationsGloballyResponse], error)
	// ListOrganizationsByRegion lists organizations in the given region (unarchived).
	ListOrganizationsByRegion(context.Context, *connect_go.Request[org.ListOrganizationsByRegionRequest]) (*connect_go.ServerStreamForClient[org.ListOrganizationsByRegionResponse], error)
	// ListArchivedOrganizations lists all archived organizations in the current region.
	ListArchivedOrganizations(context.Context, *connect_go.Request[org.ListArchivedOrganizationsRequest]) (*connect_go.ServerStreamForClient[org.ListArchivedOrganizationsResponse], error)
	// ConvertOrgToManual converts an organization to manual only by org id.
	ConvertOrgToManual(context.Context, *connect_go.Request[org.ConvertOrgToManualRequest]) (*connect_go.Response[org.ConvertOrgToManualResponse], error)
	// Lists all orgs under the p3 hierarchy
	ListOwnedOrgs(context.Context, *connect_go.Request[org.ListOwnedOrgsRequest]) (*connect_go.ServerStreamForClient[org.ListOwnedOrgsResponse], error)
	// GetOrganizationPreferences returns general preferences controlling basic
	// organization related properties.
	GetOrganizationPreferences(context.Context, *connect_go.Request[org.GetOrganizationPreferencesRequest]) (*connect_go.Response[org.GetOrganizationPreferencesResponse], error)
	// UpdateOrganizationPreferences updates general preferences controlling basic
	// organization related properties.
	UpdateOrganizationPreferences(context.Context, *connect_go.Request[org.UpdateOrganizationPreferencesRequest]) (*connect_go.Response[org.UpdateOrganizationPreferencesResponse], error)
	// GetAgentPreferences returns preferences controlling direct agent properties.
	GetAgentPreferences(context.Context, *connect_go.Request[org.GetAgentPreferencesRequest]) (*connect_go.Response[org.GetAgentPreferencesResponse], error)
	// UpdateAgentPreferences updates preferences controlling direct agent
	// properties.
	UpdateAgentPreferences(context.Context, *connect_go.Request[org.UpdateAgentPreferencesRequest]) (*connect_go.Response[org.UpdateAgentPreferencesResponse], error)
	// GetContactPreferences returns preferences for contact lists.
	GetContactPreferences(context.Context, *connect_go.Request[org.GetContactPreferencesRequest]) (*connect_go.Response[org.GetContactPreferencesResponse], error)
	// UpdateContactPreferences updates preferences for contact lists.
	UpdateContactPreferences(context.Context, *connect_go.Request[org.UpdateContactPreferencesRequest]) (*connect_go.Response[org.UpdateContactPreferencesResponse], error)
	// GetAuthenticationPreferences returns preferences for controlling the
	GetAuthenticationPreferences(context.Context, *connect_go.Request[org.GetAuthenticationPreferencesRequest]) (*connect_go.Response[org.GetAuthenticationPreferencesResponse], error)
	// UpdateAuthenticationPreferences updates preferences for controlling the
	UpdateAuthenticationPreferences(context.Context, *connect_go.Request[org.UpdateAuthenticationPreferencesRequest]) (*connect_go.Response[org.UpdateAuthenticationPreferencesResponse], error)
	// GetWebhookPreferences returns preferences for web-hook push URLs.
	GetWebhookPreferences(context.Context, *connect_go.Request[org.GetWebhookPreferencesRequest]) (*connect_go.Response[org.GetWebhookPreferencesResponse], error)
	// UpdateWebhookPreferences updates preferences for web-hook push URLs.
	UpdateWebhookPreferences(context.Context, *connect_go.Request[org.UpdateWebhookPreferencesRequest]) (*connect_go.Response[org.UpdateWebhookPreferencesResponse], error)
	// GetDashboardGeneralPreferences returns preferences for agent dashboard
	// controls.
	GetDashboardGeneralPreferences(context.Context, *connect_go.Request[org.GetDashboardGeneralPreferencesRequest]) (*connect_go.Response[org.GetDashboardGeneralPreferencesResponse], error)
	// UpdateDashboardGeneralPreferences updates preferences for agent dashboard
	// controls.
	UpdateDashboardGeneralPreferences(context.Context, *connect_go.Request[org.UpdateDashboardGeneralPreferencesRequest]) (*connect_go.Response[org.UpdateDashboardGeneralPreferencesResponse], error)
	// GetDashboardQueuePreferences returns preferences for controlling agent queue
	// and hold table settings.
	GetDashboardQueuePreferences(context.Context, *connect_go.Request[org.GetDashboardQueuePreferencesRequest]) (*connect_go.Response[org.GetDashboardQueuePreferencesResponse], error)
	// UpdateDashboardQueuePreferences updates preferences for controlling agent
	// queue and hold table settings.
	UpdateDashboardQueuePreferences(context.Context, *connect_go.Request[org.UpdateDashboardQueuePreferencesRequest]) (*connect_go.Response[org.UpdateDashboardQueuePreferencesResponse], error)
	// GetPhonePreferences returns preferences for phone dial options, call ID,
	// and other call properties.
	GetPhonePreferences(context.Context, *connect_go.Request[org.GetPhonePreferencesRequest]) (*connect_go.Response[org.GetPhonePreferencesResponse], error)
	// UpdatePhonePreferences updates preferences for phone dial options, call ID,
	// and other call properties.
	UpdatePhonePreferences(context.Context, *connect_go.Request[org.UpdatePhonePreferencesRequest]) (*connect_go.Response[org.UpdatePhonePreferencesResponse], error)
	// GetCompliancePreferences returns preferences for natural language compliance
	// campaign settings.
	GetCompliancePreferences(context.Context, *connect_go.Request[org.GetCompliancePreferencesRequest]) (*connect_go.Response[org.GetCompliancePreferencesResponse], error)
	// UpdateCompliancePreferences updates preferences for natural language
	// compliance campaign settings.
	UpdateCompliancePreferences(context.Context, *connect_go.Request[org.UpdateCompliancePreferencesRequest]) (*connect_go.Response[org.UpdateCompliancePreferencesResponse], error)
	// GetBroadcastPreferences returns preferences for editing templates and
	// broadcast scheduling properties.
	GetBroadcastPreferences(context.Context, *connect_go.Request[org.GetBroadcastPreferencesRequest]) (*connect_go.Response[org.GetBroadcastPreferencesResponse], error)
	// UpdateBroadcastPreferences updates preferences for editing templates and
	// broadcast scheduling properties.
	UpdateBroadcastPreferences(context.Context, *connect_go.Request[org.UpdateBroadcastPreferencesRequest]) (*connect_go.Response[org.UpdateBroadcastPreferencesResponse], error)
	// GetSchedulePreferences returns preferences for editing campaign scheduling
	// properties.
	GetSchedulePreferences(context.Context, *connect_go.Request[org.GetSchedulePreferencesRequest]) (*connect_go.Response[org.GetSchedulePreferencesResponse], error)
	// UpdateSchedulePreferences updates preferences for editing campaign
	// scheduling properties.
	UpdateSchedulePreferences(context.Context, *connect_go.Request[org.UpdateSchedulePreferencesRequest]) (*connect_go.Response[org.UpdateSchedulePreferencesResponse], error)
	// GetEmailSmsPreferences returns preferences for email and SMS management.
	GetEmailSmsPreferences(context.Context, *connect_go.Request[org.GetEmailSmsPreferencesRequest]) (*connect_go.Response[org.GetEmailSmsPreferencesResponse], error)
	// UpdateEmailSmsPreferences updates preferences for email and SMS management.
	UpdateEmailSmsPreferences(context.Context, *connect_go.Request[org.UpdateEmailSmsPreferencesRequest]) (*connect_go.Response[org.UpdateEmailSmsPreferencesResponse], error)
	// GetBusinessPreferences returns preferences for business intelligence.
	GetBusinessPreferences(context.Context, *connect_go.Request[org.GetBusinessPreferencesRequest]) (*connect_go.Response[org.GetBusinessPreferencesResponse], error)
	// UpdateBusinessPreferences updates preferences for business intelligence.
	UpdateBusinessPreferences(context.Context, *connect_go.Request[org.UpdateBusinessPreferencesRequest]) (*connect_go.Response[org.UpdateBusinessPreferencesResponse], error)
	// UpdateAdminBusinessPreferences updates preferences for business intelligence.
	UpdateAdminBusinessPreferences(context.Context, *connect_go.Request[org.UpdateAdminBusinessPreferencesRequest]) (*connect_go.Response[org.UpdateAdminBusinessPreferencesResponse], error)
	// GetScorecardsPreferences returns preferences for scorecards.
	GetScorecardsPreferences(context.Context, *connect_go.Request[org.GetScorecardsPreferencesRequest]) (*connect_go.Response[org.GetScorecardsPreferencesResponse], error)
	// UpdateScorecardsPreferences updates preferences for scorecards.
	UpdateScorecardsPreferences(context.Context, *connect_go.Request[org.UpdateScorecardsPreferencesRequest]) (*connect_go.Response[org.UpdateScorecardsPreferencesResponse], error)
	// GetVoiceAnalyticsPreferences returns preferences for voice analytics.
	GetVoiceAnalyticsPreferences(context.Context, *connect_go.Request[org.GetVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[org.GetVoiceAnalyticsPreferencesResponse], error)
	// ListVoiceAnalyticsPreferences lists preferences for voice analytics.
	ListVoiceAnalyticsPreferences(context.Context, *connect_go.Request[org.ListVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[org.ListVoiceAnalyticsPreferencesResponse], error)
	// UpdateVoiceAnalyticsPreferences updates preferences for voice analytics.
	UpdateVoiceAnalyticsPreferences(context.Context, *connect_go.Request[org.UpdateVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[org.UpdateVoiceAnalyticsPreferencesResponse], error)
	// GetEndOfDayPreferences returns preferences for automated report jobs
	GetEndOfDayPreferences(context.Context, *connect_go.Request[org.GetEndOfDayPreferencesRequest]) (*connect_go.Response[org.GetEndOfDayPreferencesResponse], error)
	// UpdateEndOfDayPreferences updates preferences for automated report jobs
	UpdateEndOfDayPreferences(context.Context, *connect_go.Request[org.UpdateEndOfDayPreferencesRequest]) (*connect_go.Response[org.UpdateEndOfDayPreferencesResponse], error)
	// GetReportFilterPreferences returns preferences for filters in reports and
	GetReportFilterPreferences(context.Context, *connect_go.Request[org.GetFilterPreferencesRequest]) (*connect_go.Response[org.GetFilterPreferencesResponse], error)
	// UpdateReportFilterPreferences updates preferences for filters in reports and
	UpdateReportFilterPreferences(context.Context, *connect_go.Request[org.UpdateFilterPreferencesRequest]) (*connect_go.Response[org.UpdateFilterPreferencesResponse], error)
	// GetRecordingPreferences returns preferences for audio recording properties.
	GetRecordingPreferences(context.Context, *connect_go.Request[org.GetRecordingPreferencesRequest]) (*connect_go.Response[org.GetRecordingPreferencesResponse], error)
	// UpdateRecordingPreferences updates preferences for audio recording
	// properties.
	UpdateRecordingPreferences(context.Context, *connect_go.Request[org.UpdateRecordingPreferencesRequest]) (*connect_go.Response[org.UpdateRecordingPreferencesResponse], error)
	// GetAdminClientPreferences returns preferences for essential organization
	// properties only to be used by account managers and customer support.
	GetAdminClientPreferences(context.Context, *connect_go.Request[org.GetAdminClientPreferencesRequest]) (*connect_go.Response[org.GetAdminClientPreferencesResponse], error)
	// UpdateAdminClientPreferences updates preferences for essential organization
	UpdateAdminClientPreferences(context.Context, *connect_go.Request[org.UpdateAdminClientPreferencesRequest]) (*connect_go.Response[org.UpdateAdminClientPreferencesResponse], error)
	// AcceptLinkbackRecordingTerms insert a digital signature acceptance activity
	// log upon client acknowledgement of terms and conditions usage for linkback
	// recorded calls.
	AcceptLinkbackRecordingTerms(context.Context, *connect_go.Request[org.AcceptLinkbackRecordingTermsRequest]) (*connect_go.Response[org.AcceptLinkbackRecordingTermsResponse], error)
	// LinkbackUpdateBroadcastTemplates updates broadcast template options action
	// parameters to reflect the linkback recording usage value.
	LinkbackUpdateBroadcastTemplates(context.Context, *connect_go.Request[org.LinkbackUpdateBroadcastTemplatesRequest]) (*connect_go.Response[org.LinkbackUpdateBroadcastTemplatesResponse], error)
	// RecordEmailUnsubscribeAcknowledgement insert an activity log upon client
	// acknowledgement of responsibility for their own email unsubscribe links.
	RecordEmailUnsubscribeAcknowledgement(context.Context, *connect_go.Request[org.RecordEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[org.RecordEmailUnsubscribeAcknowledgementResponse], error)
	// ClearEmailUnsubscribeAcknowledgement insert an activity log upon the client
	// revoking their responsibility for email unsubscribe links.
	ClearEmailUnsubscribeAcknowledgement(context.Context, *connect_go.Request[org.ClearEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[org.ClearEmailUnsubscribeAcknowledgementResponse], error)
	// ListBusinessHours returns all business hours for an Org.
	//
	// Deprecated: do not use.
	ListBusinessHours(context.Context, *connect_go.Request[org.ListBusinessHoursRequest]) (*connect_go.Response[org.ListBusinessHoursResponse], error)
	// GetBusinessHours returns the business hours for the ID.
	//
	// Deprecated: do not use.
	GetBusinessHours(context.Context, *connect_go.Request[org.GetBusinessHoursRequest]) (*connect_go.Response[org.GetBusinessHoursResponse], error)
	// SetBusinessHours initializes a business hours object
	//
	// Deprecated: do not use.
	SetBusinessHours(context.Context, *connect_go.Request[org.SetBusinessHoursRequest]) (*connect_go.Response[org.SetBusinessHoursResponse], error)
	// AddIntervalToBusinessHours adds a day interval to a business hours object
	//
	// Deprecated: do not use.
	AddIntervalToBusinessHours(context.Context, *connect_go.Request[org.AddIntervalToBusinessHoursRequest]) (*connect_go.Response[org.AddIntervalToBusinessHoursResponse], error)
	// RemoveIntervalFromBusinessHours removes a day interval from a business hours object
	//
	// Deprecated: do not use.
	RemoveIntervalFromBusinessHours(context.Context, *connect_go.Request[org.RemoveIntervalFromBusinessHoursRequest]) (*connect_go.Response[org.RemoveIntervalFromBusinessHoursResponse], error)
	// UpdateBusinessHoursInfo updates the general info of a business hours object
	//
	// Deprecated: do not use.
	UpdateBusinessHoursInfo(context.Context, *connect_go.Request[org.UpdateBusinessHoursInfoRequest]) (*connect_go.Response[org.UpdateBusinessHoursInfoResponse], error)
	// DeleteBusinessHours removes business hours.
	//
	// Deprecated: do not use.
	DeleteBusinessHours(context.Context, *connect_go.Request[org.DeleteBusinessHoursRequest]) (*connect_go.Response[org.DeleteBusinessHoursResponse], error)
	// EvaluateBusinessHours determines whether or not the current time is within a business hours day interval
	//
	// Deprecated: do not use.
	EvaluateBusinessHours(context.Context, *connect_go.Request[org.EvaluateBusinessHoursRequest]) (*connect_go.Response[org.EvaluateBusinessHoursResponse], error)
	// CreateUser creates a new user and enables it for the region it is getting created in.
	CreateUser(context.Context, *connect_go.Request[org.CreateUserRequest]) (*connect_go.Response[org.CreateUserResponse], error)
	// CreateDelegatedUser creates a new delegated user and enables it for the region it is getting created in.
	CreateDelegatedUser(context.Context, *connect_go.Request[org.CreateDelegatedUserRequest]) (*connect_go.Response[org.CreateDelegatedUserResponse], error)
	// GetMyUser returns a single user by UserId or by AgentSid.
	GetMyUser(context.Context, *connect_go.Request[org.GetMyUserRequest]) (*connect_go.Response[org.GetMyUserResponse], error)
	// GetUser returns a single user by UserId or by AgentSid.
	GetUser(context.Context, *connect_go.Request[org.GetUserRequest]) (*connect_go.Response[org.GetUserResponse], error)
	// GetUserByOrgId returns a single user by UserId and OrgId
	// Requires Customer Support permission and allows cross Org requests.
	GetUserByOrgId(context.Context, *connect_go.Request[org.GetUserByOrgIdRequest]) (*connect_go.Response[org.GetUserByOrgIdResponse], error)
	// ListAgents returns a list of Agents.
	ListAgents(context.Context, *connect_go.Request[org.ListAgentsRequest]) (*connect_go.ServerStreamForClient[org.ListAgentsResponse], error)
	// ListPublicUsers returns a list of users with limited data for most applications.
	ListPublicUsers(context.Context, *connect_go.Request[org.ListPublicUsersRequest]) (*connect_go.ServerStreamForClient[org.ListPublicUsersResponse], error)
	// ListUsers returns a list of users.
	ListUsers(context.Context, *connect_go.Request[org.ListUsersRequest]) (*connect_go.ServerStreamForClient[org.ListUsersResponse], error)
	// ListUsersByOrgId returns a list of users.
	ListUsersByOrgId(context.Context, *connect_go.Request[org.ListUsersByOrgIdRequest]) (*connect_go.ServerStreamForClient[org.ListUsersByOrgIdResponse], error)
	// ListUsersByRegion returns a list of usersByRegion.
	ListUsersByRegion(context.Context, *connect_go.Request[org.ListUsersByRegionRequest]) (*connect_go.ServerStreamForClient[org.ListUsersByRegionResponse], error)
	// UpdateMyUser updates a user.
	UpdateMyUser(context.Context, *connect_go.Request[org.UpdateMyUserRequest]) (*connect_go.Response[org.UpdateMyUserResponse], error)
	// UpdateUser updates a user.
	UpdateUser(context.Context, *connect_go.Request[org.UpdateUserRequest]) (*connect_go.Response[org.UpdateUserResponse], error)
	// UpdateUserLabels updates a user's labels to be the passed in set of labels.
	UpdateUserLabels(context.Context, *connect_go.Request[org.UpdateUserLabelsRequest]) (*connect_go.Response[org.UpdateUserLabelsResponse], error)
	// UpdateUserCallerId updates a user.
	UpdateUserCallerId(context.Context, *connect_go.Request[org.UpdateUserCallerIdRequest]) (*connect_go.Response[org.UpdateUserCallerIdResponse], error)
	// UpdateUserDisabled updates whether a user is disabled.
	UpdateUserDisabled(context.Context, *connect_go.Request[org.UpdateUserDisabledRequest]) (*connect_go.Response[org.UpdateUserDisabledResponse], error)
	// UpdateUserDisabledByOrgId updates a user is disabled.
	UpdateUserDisabledByOrgId(context.Context, *connect_go.Request[org.UpdateUserDisabledByOrgIdRequest]) (*connect_go.Response[org.UpdateUserDisabledByOrgIdResponse], error)
	// GetMyUserPasswordResetLink updates a user's password.
	GetMyUserPasswordResetLink(context.Context, *connect_go.Request[org.GetMyUserPasswordResetLinkRequest]) (*connect_go.Response[org.GetMyUserPasswordResetLinkResponse], error)
	// GetUserPasswordResetLink gets a link to update a user's password.
	GetUserPasswordResetLink(context.Context, *connect_go.Request[org.GetUserPasswordResetLinkRequest]) (*connect_go.Response[org.GetUserPasswordResetLinkResponse], error)
	// GetUserPasswordResetLinkByOrgId gets a link to update a user's password.
	GetUserPasswordResetLinkByOrgId(context.Context, *connect_go.Request[org.GetUserPasswordResetLinkByOrgIdRequest]) (*connect_go.Response[org.GetUserPasswordResetLinkByOrgIdResponse], error)
	// CreatePasswordResetLink creates a password reset link for the given user id.
	CreatePasswordResetLink(context.Context, *connect_go.Request[org.CreatePasswordResetLinkRequest]) (*connect_go.Response[org.CreatePasswordResetLinkResponse], error)
	// CreatePasswordResetLinkByOrgId creates a password reset link for the given user id.
	CreatePasswordResetLinkByOrgId(context.Context, *connect_go.Request[org.CreatePasswordResetLinkByOrgIdRequest]) (*connect_go.Response[org.CreatePasswordResetLinkByOrgIdResponse], error)
	// Used to be called GetUserBlocked
	// GetUserLoginInfo gets information about a user's login.
	GetUserLoginInfo(context.Context, *connect_go.Request[org.GetUserLoginInfoRequest]) (*connect_go.Response[org.GetUserLoginInfoResponse], error)
	// GetUserEmailVerified gets whether the user's email is verified.
	GetUserEmailVerified(context.Context, *connect_go.Request[org.GetUserEmailVerifiedRequest]) (*connect_go.Response[org.GetUserEmailVerifiedResponse], error)
	// GetUserEmailVerifiedByOrgId gets whether the user's email is verified.
	GetUserEmailVerifiedByOrgId(context.Context, *connect_go.Request[org.GetUserEmailVerifiedByOrgIdRequest]) (*connect_go.Response[org.GetUserEmailVerifiedByOrgIdResponse], error)
	// ResetMyPassword resets the user's password.
	ResetMyPassword(context.Context, *connect_go.Request[org.ResetMyPasswordRequest]) (*connect_go.Response[org.ResetMyPasswordResponse], error)
	// ResetUserPassword resets the user's password.
	ResetUserPassword(context.Context, *connect_go.Request[org.ResetUserPasswordRequest]) (*connect_go.Response[org.ResetUserPasswordResponse], error)
	// ResetUserPasswordByOrgId resets the user's password.
	ResetUserPasswordByOrgId(context.Context, *connect_go.Request[org.ResetUserPasswordByOrgIdRequest]) (*connect_go.Response[org.ResetUserPasswordByOrgIdResponse], error)
	// SendUserEmailVerification sends a verification email to the user.
	SendUserEmailVerification(context.Context, *connect_go.Request[org.SendUserEmailVerificationRequest]) (*connect_go.Response[org.SendUserEmailVerificationResponse], error)
	// SendUserEmailVerificationByOrgId sends a verification email to the user.
	SendUserEmailVerificationByOrgId(context.Context, *connect_go.Request[org.SendUserEmailVerificationByOrgIdRequest]) (*connect_go.Response[org.SendUserEmailVerificationByOrgIdResponse], error)
	// SendPasswordReset sends a password reset email to the user.
	SendPasswordReset(context.Context, *connect_go.Request[org.SendPasswordResetRequest]) (*connect_go.Response[org.SendPasswordResetResponse], error)
	// SendPasswordResetByOrgId sends a password reset email to the user.
	SendPasswordResetByOrgId(context.Context, *connect_go.Request[org.SendPasswordResetByOrgIdRequest]) (*connect_go.Response[org.SendPasswordResetByOrgIdResponse], error)
	// GetUserSessionData returns data for the front end's session state
	GetUserSessionData(context.Context, *connect_go.Request[org.GetUserSessionDataRequest]) (*connect_go.Response[org.GetUserSessionDataResponse], error)
	// GetAgentProfileGroup returns an agent profile group by id
	GetAgentProfileGroup(context.Context, *connect_go.Request[org.GetAgentProfileGroupRequest]) (*connect_go.Response[org.GetAgentProfileGroupResponse], error)
	// ListAgentProfileGroups returns the agent profile groups associated with the current organization
	ListAgentProfileGroups(context.Context, *connect_go.Request[org.ListAgentProfileGroupsRequest]) (*connect_go.Response[org.ListAgentProfileGroupsResponse], error)
	// UpdateAgentProfileGroup updates an AgentProfileGroup. Can only update if user is in same org as AgentProfileGroup
	UpdateAgentProfileGroup(context.Context, *connect_go.Request[org.UpdateAgentProfileGroupRequest]) (*connect_go.Response[org.UpdateAgentProfileGroupResponse], error)
	// CreateAgentProfileGroup creates an AgentProfileGroup. Can only create if user is in same org as AgentProfileGroup
	CreateAgentProfileGroup(context.Context, *connect_go.Request[org.CreateAgentProfileGroupRequest]) (*connect_go.Response[org.CreateAgentProfileGroupResponse], error)
	// DeleteAgentProfileGroup deletes an AgentProfileGroup. Can only delete if user is in same org as AgentProfileGroup
	DeleteAgentProfileGroup(context.Context, *connect_go.Request[org.DeleteAgentProfileGroupRequest]) (*connect_go.Response[org.DeleteAgentProfileGroupResponse], error)
	// AssignAgentProfileGroups assigns a list of users to an AgentProfileGroup. Can only use if everything is in the same organization.
	AssignAgentProfileGroups(context.Context, *connect_go.Request[org.AssignAgentProfileGroupsRequest]) (*connect_go.Response[org.AssignAgentProfileGroupsResponse], error)
	// Creates a new user subscription.
	AddUserSubscription(context.Context, *connect_go.Request[org.AddUserSubscriptionRequest]) (*connect_go.Response[org.AddUserSubscriptionResponse], error)
	// Creates a new user subscription for a specified user with in requested users org.
	AddUserSubscriptionByUserId(context.Context, *connect_go.Request[org.AddUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.AddUserSubscriptionByUserIdResponse], error)
	// Gets a user subscription.
	GetUserSubscription(context.Context, *connect_go.Request[org.GetUserSubscriptionRequest]) (*connect_go.Response[org.GetUserSubscriptionResponse], error)
	// Gets a user subscription for a specified user with in requested users org.
	GetUserSubscriptionByUserId(context.Context, *connect_go.Request[org.GetUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.GetUserSubscriptionByUserIdResponse], error)
	// Updates a user subscription for the current user
	UpdateUserSubscription(context.Context, *connect_go.Request[org.UpdateUserSubscriptionRequest]) (*connect_go.Response[org.UpdateUserSubscriptionResponse], error)
	// Updates a user subscription for a given user id
	UpdateUserSubscriptionByUserId(context.Context, *connect_go.Request[org.UpdateUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.UpdateUserSubscriptionByUserIdResponse], error)
	// Remove a user subscription.
	RemoveUserSubscription(context.Context, *connect_go.Request[org.RemoveUserSubscriptionRequest]) (*connect_go.Response[org.RemoveUserSubscriptionResponse], error)
	// Remove a user subscription by a given user id
	RemoveUserSubscriptionByUserId(context.Context, *connect_go.Request[org.RemoveUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.RemoveUserSubscriptionByUserIdResponse], error)
	// Lists user subscriptions.
	ListUserSubscriptions(context.Context, *connect_go.Request[org.ListUserSubscriptionsRequest]) (*connect_go.Response[org.ListUserSubscriptionsResponse], error)
	// Lists user subscriptions.
	ListUserSubscriptionsByUserId(context.Context, *connect_go.Request[org.ListUserSubscriptionsByUserIdRequest]) (*connect_go.Response[org.ListUserSubscriptionsByUserIdResponse], error)
	// Lists subscriptions for multiple users in an org.
	ListOrgSubscriptions(context.Context, *connect_go.Request[org.ListOrgSubscriptionsRequest]) (*connect_go.Response[org.ListOrgSubscriptionsResponse], error)
	// AUTH TOKEN
	// CreateAuthToken creates an auth token for the current user.
	CreateAuthToken(context.Context, *connect_go.Request[org.CreateAuthTokenRequest]) (*connect_go.Response[org.CreateAuthTokenResponse], error)
	// CreateAuthTokenByUserId creates an auth token for the given user.
	CreateAuthTokenByUserId(context.Context, *connect_go.Request[org.CreateAuthTokenByUserIdRequest]) (*connect_go.Response[org.CreateAuthTokenByUserIdResponse], error)
	// ListAuthTokens list tokens of current user.
	ListAuthTokens(context.Context, *connect_go.Request[org.ListAuthTokensRequest]) (*connect_go.Response[org.ListAuthTokensResponse], error)
	// ListAuthTokensByUserId list tokens of given user.
	ListAuthTokensByUserId(context.Context, *connect_go.Request[org.ListAuthTokensByUserIdRequest]) (*connect_go.Response[org.ListAuthTokensByUserIdResponse], error)
	// SetAuthTokenExpiration sets expiration back one year for current user.
	SetAuthTokenExpiration(context.Context, *connect_go.Request[org.SetAuthTokenExpirationRequest]) (*connect_go.Response[org.SetAuthTokenExpirationResponse], error)
	// SetAuthTokenExpirationByUserId sets expiration back one year for given user.
	SetAuthTokenExpirationByUserId(context.Context, *connect_go.Request[org.SetAuthTokenExpirationByUserIdRequest]) (*connect_go.Response[org.SetAuthTokenExpirationByUserIdResponse], error)
	// DeleteAuthToken deletes a given auth token for the current user.
	DeleteAuthToken(context.Context, *connect_go.Request[org.DeleteAuthTokenRequest]) (*connect_go.Response[org.DeleteAuthTokenResponse], error)
	// DeleteAuthTokenByUserId deletes a given auth token for the given user.
	DeleteAuthTokenByUserId(context.Context, *connect_go.Request[org.DeleteAuthTokenByUserIdRequest]) (*connect_go.Response[org.DeleteAuthTokenByUserIdResponse], error)
	// GetHuntGroupSettings returns the field masked hunt group settings for the
	// provided hunt group.
	GetHuntGroupSettings(context.Context, *connect_go.Request[org.GetHuntGroupSettingsRequest]) (*connect_go.Response[org.GetHuntGroupSettingsResponse], error)
	// UpdateHuntGroupSettings updates the selected/masked hunt group settings
	// for the given hunt group.
	UpdateHuntGroupSettings(context.Context, *connect_go.Request[org.UpdateHuntGroupSettingsRequest]) (*connect_go.Response[org.UpdateHuntGroupSettingsResponse], error)
	// CreateHuntGroup is the RPC method for creating a hunt group.
	// It will create a hunt group with the given general details.
	CreateHuntGroup(context.Context, *connect_go.Request[org.CreateHuntGroupRequest]) (*connect_go.Response[org.CreateHuntGroupResponse], error)
	// UpdateHuntGroupGeneralDetails is the RPC method for updating the general details of a hunt group.
	UpdateHuntGroupGeneralDetails(context.Context, *connect_go.Request[org.UpdateHuntGroupGeneralDetailsRequest]) (*connect_go.Response[org.UpdateHuntGroupGeneralDetailsResponse], error)
	// DeleteHuntGroup is the RPC method for deleting a hunt group.
	DeleteHuntGroup(context.Context, *connect_go.Request[org.DeleteHuntGroupRequest]) (*connect_go.Response[org.DeleteHuntGroupResponse], error)
	// GetHuntGroupDetails returns the hunt group details for the given hunt group.
	GetHuntGroupDetails(context.Context, *connect_go.Request[org.GetHuntGroupDetailsRequest]) (*connect_go.Response[org.GetHuntGroupDetailsResponse], error)
	// Lists caller id numbers with their associated region codes for the given
	// bucket.
	ListCallerIdBuckets(context.Context, *connect_go.Request[org.ListCallerIdBucketsRequest]) (*connect_go.Response[org.ListCallerIdBucketsResponse], error)
	// Gets a single data dip template.
	GetDataDipTemplate(context.Context, *connect_go.Request[org.GetDataDipTemplateRequest]) (*connect_go.Response[org.GetDataDipTemplateResponse], error)
	// Lists data dip templates, optionally filtered by config type.
	ListDataDipTemplates(context.Context, *connect_go.Request[org.ListDataDipTemplatesRequest]) (*connect_go.Response[org.ListDataDipTemplatesResponse], error)
	// Saves a new data dip template.
	CreateDataDipTemplate(context.Context, *connect_go.Request[org.CreateDataDipTemplateRequest]) (*connect_go.Response[org.CreateDataDipTemplateResponse], error)
	// Updates a data dip template.
	UpdateDataDipTemplate(context.Context, *connect_go.Request[org.UpdateDataDipTemplateRequest]) (*connect_go.Response[org.UpdateDataDipTemplateResponse], error)
	// Deletes a data dip template.
	DeleteDataDipTemplate(context.Context, *connect_go.Request[org.DeleteDataDipTemplateRequest]) (*connect_go.Response[org.DeleteDataDipTemplateResponse], error)
	// Copies a data dip template.
	CopyDataDipTemplate(context.Context, *connect_go.Request[org.CopyDataDipTemplateRequest]) (*connect_go.Response[org.CopyDataDipTemplateResponse], error)
	// Copies a data dip template to a different organization.
	CopyDataDipTemplateToOrganization(context.Context, *connect_go.Request[org.CopyDataDipTemplateToOrganizationRequest]) (*connect_go.Response[org.CopyDataDipTemplateToOrganizationResponse], error)
	// ListBroadcastTemplateGeneralDetails returns a list of broadcast templates for an organization
	ListBroadcastTemplateGeneralDetails(context.Context, *connect_go.Request[org.ListBroadcastTemplateGeneralDetailsRequest]) (*connect_go.Response[org.ListBroadcastTemplateGeneralDetailsResponse], error)
	// Lists Agent Call Response Automatically added compliance rules for an Org.
	ListAgentResponseAutoRules(context.Context, *connect_go.Request[org.ListAgentResponseAutoRulesRequest]) (*connect_go.Response[org.ListAgentResponseAutoRulesResponse], error)
	// Creates a new Agent Call Response Automatically added compliance rule set.
	CreateAgentResponseAutoRules(context.Context, *connect_go.Request[org.CreateAgentResponseAutoRulesRequest]) (*connect_go.Response[org.CreateAgentResponseAutoRulesResponse], error)
	// Updates an existing Agent Call Response Automatically added compliance rule set.
	UpdateAgentResponseAutoRules(context.Context, *connect_go.Request[org.UpdateAgentResponseAutoRulesRequest]) (*connect_go.Response[org.UpdateAgentResponseAutoRulesResponse], error)
	// Deletes an existing Agent Call Response Automatically added compliance rule set.
	DeleteAgentResponseAutoRules(context.Context, *connect_go.Request[org.DeleteAgentResponseAutoRulesRequest]) (*connect_go.Response[org.DeleteAgentResponseAutoRulesResponse], error)
	// Lists all web links for a given hunt group
	ListHuntGroupWebLinks(context.Context, *connect_go.Request[org.ListHuntGroupWebLinksRequest]) (*connect_go.Response[org.ListHuntGroupWebLinksResponse], error)
	// Copies a web link from one hunt group to another
	CopyHuntGroupWebLink(context.Context, *connect_go.Request[org.CopyHuntGroupWebLinkRequest]) (*connect_go.Response[org.CopyHuntGroupWebLinkResponse], error)
	// Updates the list of web links in a hunt group to be the given list
	UpdateHuntGroupWebLinks(context.Context, *connect_go.Request[org.UpdateHuntGroupWebLinksRequest]) (*connect_go.Response[org.UpdateHuntGroupWebLinksResponse], error)
	// ListHuntGroupIntegrationLinks returns all integration links for a hunt group.
	ListHuntGroupIntegrationLinks(context.Context, *connect_go.Request[org.ListHuntGroupIntegrationLinksRequest]) (*connect_go.Response[org.ListHuntGroupIntegrationLinksResponse], error)
	// CopyHuntGroupIntegrationLink copies the integration link from one hunt group to another.
	// It will create a new integration link in the destination hunt group with the same settings
	// as the source integration link.
	CopyHuntGroupIntegrationLink(context.Context, *connect_go.Request[org.CopyHuntGroupIntegrationLinkRequest]) (*connect_go.Response[org.CopyHuntGroupIntegrationLinkResponse], error)
	// UpdateHuntGroupIntegrationLinks updates the integration links for a hunt group.
	// It will create any new integration links that do not already exist in the hunt group,
	// update any existing integration links with the new settings, and delete any integration links
	// that are not in the request.
	UpdateHuntGroupIntegrationLinks(context.Context, *connect_go.Request[org.UpdateHuntGroupIntegrationLinksRequest]) (*connect_go.Response[org.UpdateHuntGroupIntegrationLinksResponse], error)
	// GetHuntGroupClientInfoDisplayTemplate returns the client info display template for a given hunt group.
	GetHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.GetHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.GetHuntGroupClientInfoDisplayTemplateResponse], error)
	// CreateHuntGroupClientInfoDisplayTemplate creates a new client info display template for a givne hunt group.
	CreateHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.CreateHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.CreateHuntGroupClientInfoDisplayTemplateResponse], error)
	// UpdateHuntGroupClientInfoDisplayTemplate updates a client info display template for a given hunt group.
	UpdateHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.UpdateHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.UpdateHuntGroupClientInfoDisplayTemplateResponse], error)
	// DeleteHuntGroupClientInfoDisplayTemplate deletes a client info display template for a given hunt group.
	DeleteHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.DeleteHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.DeleteHuntGroupClientInfoDisplayTemplateResponse], error)
	// CopyHuntGroupClientInfoDisplayTemplate copies the client info display template from one hunt group to another.
	// It will create a new template in the destination hunt group with the same settings as the source template if it doesn't already exist.
	// Otherwise, it will update the existing template with the source template settings.
	CopyHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.CopyHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.CopyHuntGroupClientInfoDisplayTemplateResponse], error)
	// CreateCampaignClientInfoDisplayTemplate creates a new client info display template for a campaign
	// with the same settings as the source template from a hunt group.
	CreateCampaignClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.CreateCampaignClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.CreateCampaignClientInfoDisplayTemplateResponse], error)
	// ListHuntGroupsWithClientInfoTemplateData lists the hunt groups in an organization
	// with their client info display template data based on the filter.
	ListHuntGroupsWithClientInfoTemplateData(context.Context, *connect_go.Request[org.ListHuntGroupsWithClientInfoTemplateDataRequest]) (*connect_go.Response[org.ListHuntGroupsWithClientInfoTemplateDataResponse], error)
	// ListAgentTriggers returns a list of agent triggers for the given hunt group.
	ListAgentTriggers(context.Context, *connect_go.Request[org.ListAgentTriggersRequest]) (*connect_go.Response[org.ListAgentTriggersResponse], error)
	// CopyAgentTrigger copys an agent trigger to the given hunt group in the same org.
	CopyAgentTrigger(context.Context, *connect_go.Request[org.CopyAgentTriggerRequest]) (*connect_go.Response[org.CopyAgentTriggerResponse], error)
	// UpdateAgentTriggers updates all agent triggers for the given hunt group.
	UpdateAgentTriggers(context.Context, *connect_go.Request[org.UpdateAgentTriggersRequest]) (*connect_go.Response[org.UpdateAgentTriggersResponse], error)
	// ListHuntGroupScripts lists all hunt group scripts for the current organization.
	ListHuntGroupScripts(context.Context, *connect_go.Request[org.ListHuntGroupScriptsRequest]) (*connect_go.Response[org.ListHuntGroupScriptsResponse], error)
	// GetHuntGroupScript gets the specified script from the given script sid
	GetHuntGroupScript(context.Context, *connect_go.Request[org.GetHuntGroupScriptRequest]) (*connect_go.Response[org.GetHuntGroupScriptResponse], error)
	// CreateHuntGroupScript adds a creates a new hunt group script
	CreateHuntGroupScript(context.Context, *connect_go.Request[org.CreateHuntGroupScriptRequest]) (*connect_go.Response[org.CreateHuntGroupScriptResponse], error)
	// UpdateHuntGroupScript updates a script specified by the given script sid
	UpdateHuntGroupScript(context.Context, *connect_go.Request[org.UpdateHuntGroupScriptRequest]) (*connect_go.Response[org.UpdateHuntGroupScriptResponse], error)
	// DeleteHuntGroupScript deletes a hunt group script
	DeleteHuntGroupScript(context.Context, *connect_go.Request[org.DeleteHuntGroupScriptRequest]) (*connect_go.Response[org.DeleteHuntGroupScriptResponse], error)
	// AssignScriptToHuntGroups assigns a script to the specified hunt groups
	AssignScriptToHuntGroups(context.Context, *connect_go.Request[org.AssignScriptToHuntGroupsRequest]) (*connect_go.Response[org.AssignScriptToHuntGroupsResponse], error)
	// UnassignScriptFromHuntGroups unassigns a script from the specified hunt groups
	UnassignScriptFromHuntGroups(context.Context, *connect_go.Request[org.UnassignScriptFromHuntGroupsRequest]) (*connect_go.Response[org.UnassignScriptFromHuntGroupsResponse], error)
	// CreateTrust creates a new trust.
	CreateTrust(context.Context, *connect_go.Request[org.CreateTrustRequest]) (*connect_go.Response[org.CreateTrustResponse], error)
	// AcceptTrust accepts an incoming trust.
	AcceptTrust(context.Context, *connect_go.Request[org.AcceptTrustRequest]) (*connect_go.Response[org.AcceptTrustResponse], error)
	// RejectTrust rejects an incoming trust.
	RejectTrust(context.Context, *connect_go.Request[org.RejectTrustRequest]) (*connect_go.Response[org.RejectTrustResponse], error)
	// GetTrust returns a single trust by trust id.
	GetTrust(context.Context, *connect_go.Request[org.GetTrustRequest]) (*connect_go.Response[org.GetTrustResponse], error)
	// ListIncomingTrusts returns all pending trusts that are being granted
	// to the org of the currently logged in user.
	ListIncomingTrusts(context.Context, *connect_go.Request[org.ListIncomingTrustsRequest]) (*connect_go.Response[org.ListIncomingTrustsResponse], error)
	// ListGivenTrusts returns all trusts that have been given out for
	// the currently logged in user's org. The returned list will contain
	// accepted, pending, and rejected trusts.
	ListGivenTrusts(context.Context, *connect_go.Request[org.ListGivenTrustsRequest]) (*connect_go.Response[org.ListGivenTrustsResponse], error)
	// ListAssignableTrusts returns all accepted trusts that are being granted
	// to the org of the currently logged in user.
	ListAssignableTrusts(context.Context, *connect_go.Request[org.ListAssignableTrustsRequest]) (*connect_go.Response[org.ListAssignableTrustsResponse], error)
	// DeleteTrust deletes a trust by trust id. Only trusts where the current
	// org is the grantor can be deleted by this endpoint.
	DeleteTrust(context.Context, *connect_go.Request[org.DeleteTrustRequest]) (*connect_go.Response[org.DeleteTrustResponse], error)
	// AssignTrust assigns a trust to the given user ids.
	AssignTrust(context.Context, *connect_go.Request[org.AssignTrustRequest]) (*connect_go.Response[org.AssignTrustResponse], error)
	// UnassignTrust unassigns a trust from the given user id.
	UnassignTrust(context.Context, *connect_go.Request[org.UnassignTrustRequest]) (*connect_go.Response[org.UnassignTrustResponse], error)
	// CreateLabel creates a label with the given properties.
	CreateLabel(context.Context, *connect_go.Request[org.CreateLabelRequest]) (*connect_go.Response[org.CreateLabelResponse], error)
	// DeleteLabel deletes a label with the id given on the request.
	DeleteLabel(context.Context, *connect_go.Request[org.DeleteLabelRequest]) (*connect_go.Response[org.DeleteLabelResponse], error)
	// ListLabels returns all unique label names belonging to the given org id.
	ListLabels(context.Context, *connect_go.Request[org.ListLabelsRequest]) (*connect_go.Response[org.ListLabelsResponse], error)
	// GetLabel returns a single label with the given ID.
	GetLabel(context.Context, *connect_go.Request[org.GetLabelRequest]) (*connect_go.Response[org.GetLabelResponse], error)
	// UpdateLabel updates the given label.
	UpdateLabel(context.Context, *connect_go.Request[org.UpdateLabelRequest]) (*connect_go.Response[org.UpdateLabelResponse], error)
	// Assignlabel creates label assignments defined by the request.
	AssignLabel(context.Context, *connect_go.Request[org.AssignLabelRequest]) (*connect_go.Response[org.AssignLabelResponse], error)
	// Unassignlabel removes label assignments defined by the request.
	UnassignLabel(context.Context, *connect_go.Request[org.UnassignLabelRequest]) (*connect_go.Response[org.UnassignLabelResponse], error)
	// GetAssignmentCounts returns the total amount of label assignments
	// per entity type.
	GetAssignmentCounts(context.Context, *connect_go.Request[org.GetAssignmentCountsRequest]) (*connect_go.Response[org.GetAssignmentCountsResponse], error)
	// GetAssignableLabels returns a list of labels available to the current user.
	GetAssignableLabels(context.Context, *connect_go.Request[org.GetAssignableLabelsRequest]) (*connect_go.Response[org.GetAssignableLabelsResponse], error)
	// GetPermissions returns the permissions for a given user along with other user information.
	GetPermissions(context.Context, *connect_go.Request[org.GetPermissionsRequest]) (*connect_go.Response[org.GetPermissionsResponse], error)
	// GetUserPermissions returns the permissions for a given user.
	GetUserPermissions(context.Context, *connect_go.Request[org.GetUserPermissionsRequest]) (*connect_go.Response[org.GetUserPermissionsResponse], error)
	// Creates a new permission group.
	CreatePermissionGroup(context.Context, *connect_go.Request[org.CreatePermissionGroupRequest]) (*connect_go.Response[org.CreatePermissionGroupResponse], error)
	// UpdatePermissionGroup updates the permission group with the given id.
	UpdatePermissionGroup(context.Context, *connect_go.Request[org.UpdatePermissionGroupRequest]) (*connect_go.Response[org.UpdatePermissionGroupResponse], error)
	// DeletePermissionGroup deletes the permission group with the given id.
	DeletePermissionGroup(context.Context, *connect_go.Request[org.DeletePermissionGroupRequest]) (*connect_go.Response[org.DeletePermissionGroupResponse], error)
	// ListPermissionGroups returns a list of permissions for an organization.
	ListPermissionGroups(context.Context, *connect_go.Request[org.ListPermissionGroupsRequest]) (*connect_go.Response[org.ListPermissionGroupsResponse], error)
	// ListPermissionGroupsByOrgId returns a list of permissions for an
	// organization.
	ListPermissionGroupsByOrgId(context.Context, *connect_go.Request[org.ListPermissionGroupsByOrgIdRequest]) (*connect_go.Response[org.ListPermissionGroupsByOrgIdResponse], error)
	// AssignUsersPermissionGroup returns a user a permission group.
	AssignUsersPermissionGroup(context.Context, *connect_go.Request[org.AssignUsersPermissionGroupRequest]) (*connect_go.Response[org.AssignUsersPermissionGroupResponse], error)
	// RevokeUsersPermissionGroup returns a user a permission group.
	RevokeUsersPermissionGroup(context.Context, *connect_go.Request[org.RevokeUsersPermissionGroupRequest]) (*connect_go.Response[org.RevokeUsersPermissionGroupResponse], error)
	// AssignLabels assigns labels to a given permission group
	AssignLabels(context.Context, *connect_go.Request[org.AssignLabelsRequest]) (*connect_go.Response[org.AssignLabelsResponse], error)
	// RevokeLabels revokes labels from a given permission group
	RevokeLabels(context.Context, *connect_go.Request[org.RevokeLabelsRequest]) (*connect_go.Response[org.RevokeLabelsResponse], error)
	// AssignAccountOwnerPermissionToUser returns a user a permission group.
	AssignAccountOwnerPermissionToUser(context.Context, *connect_go.Request[org.AssignAccountOwnerPermissionToUserRequest]) (*connect_go.Response[org.AssignAccountOwnerPermissionToUserResponse], error)
	// RevokeAccountOwnerPermissionFromUser returns a user a permission group.
	RevokeAccountOwnerPermissionFromUser(context.Context, *connect_go.Request[org.RevokeAccountOwnerPermissionFromUserRequest]) (*connect_go.Response[org.RevokeAccountOwnerPermissionFromUserResponse], error)
	// Initializes the default read only permissions group for the
	// given organization.
	InitDefaultPermissionGroups(context.Context, *connect_go.Request[org.InitDefaultPermissionGroupsRequest]) (*connect_go.Response[org.InitDefaultPermissionGroupsResponse], error)
	// GetAccountOwnerGroup returns the account owner permission group
	// for an organization.
	GetAccountOwnerGroup(context.Context, *connect_go.Request[org.GetAccountOwnerGroupRequest]) (*connect_go.Response[org.GetAccountOwnerGroupResponse], error)
	// GetLicenses returns the licenses an organitzation is assigned.
	GetLicenses(context.Context, *connect_go.Request[org.GetLicensesRequest]) (*connect_go.Response[org.GetLicensesResponse], error)
	// GetOrgLicenses returns the licenses assigned to the organization
	// of the user who makes the request.
	GetOrgLicenses(context.Context, *connect_go.Request[org.GetOrgLicensesRequest]) (*connect_go.Response[org.GetOrgLicensesResponse], error)
	// UpdateLicenses updates an organization's licenses.
	UpdateLicenses(context.Context, *connect_go.Request[org.UpdateLicensesRequest]) (*connect_go.Response[org.UpdateLicensesResponse], error)
	// RemovePermissionFromAllPermissionGroups removes a permission from
	// all permission groups in an organization.
	RemovePermissionFromAllPermissionGroups(context.Context, *connect_go.Request[org.RemovePermissionFromAllPermissionGroupsRequest]) (*connect_go.Response[org.RemovePermissionFromAllPermissionGroupsResponse], error)
	// ListP3PermissionGroups returns the list of p3 permission groups
	// for the user's org.
	ListP3PermissionGroups(context.Context, *connect_go.Request[org.ListP3PermissionGroupsRequest]) (*connect_go.Response[org.ListP3PermissionGroupsResponse], error)
	// ListP3PermissionGroupsByOrgId returns the list of p3 permission groups
	// for an org by id.
	ListP3PermissionGroupsByOrgId(context.Context, *connect_go.Request[org.ListP3PermissionGroupsRequest]) (*connect_go.Response[org.ListP3PermissionGroupsResponse], error)
	// CreateP3PermissionGroup creates a new p3 permission group.
	CreateP3PermissionGroup(context.Context, *connect_go.Request[org.CreateP3PermissionGroupRequest]) (*connect_go.Response[org.CreateP3PermissionGroupResponse], error)
	// UpdateP3PermissionGroup updates an existing p3 permission group.
	// Requires PERMISSION_GROUP_EDIT.
	UpdateP3PermissionGroup(context.Context, *connect_go.Request[org.UpdateP3PermissionGroupRequest]) (*connect_go.Response[org.UpdateP3PermissionGroupResponse], error)
	// UpdateP3PermissionGroup updates an existing p3 permission group.
	// CUSTOMER_SUPPORT required for passing in an org id.
	UpdateP3PermissionGroupByOrgId(context.Context, *connect_go.Request[org.UpdateP3PermissionGroupByOrgIdRequest]) (*connect_go.Response[org.UpdateP3PermissionGroupByOrgIdResponse], error)
	// DeleteP3PermissionGroup deletes a p3 permission group.
	DeleteP3PermissionGroup(context.Context, *connect_go.Request[org.DeleteP3PermissionGroupRequest]) (*connect_go.Response[org.DeleteP3PermissionGroupResponse], error)
	// AssignUsersP3PermissionGroup assigns a p3 permission group
	// to a list of users.
	AssignUsersP3PermissionGroup(context.Context, *connect_go.Request[org.AssignUsersP3PermissionGroupRequest]) (*connect_go.Response[org.AssignUsersP3PermissionGroupResponse], error)
	// RevokeUsersP3PermissionGroup revokes a p3 permission group
	// from a list of users.
	RevokeUsersP3PermissionGroup(context.Context, *connect_go.Request[org.RevokeUsersP3PermissionGroupRequest]) (*connect_go.Response[org.RevokeUsersP3PermissionGroupResponse], error)
	// RefreshMfaLockout resets the lockout timer for the given user.
	RefreshMfaLockout(context.Context, *connect_go.Request[org.RefreshMfaLockoutRequest]) (*connect_go.Response[org.RefreshMfaLockoutResponse], error)
	// RefreshMfaLockoutByOrgId resets the lockout timer for the given user and org id.
	RefreshMfaLockoutByOrgId(context.Context, *connect_go.Request[org.RefreshMfaLockoutByOrgIdRequest]) (*connect_go.Response[org.RefreshMfaLockoutByOrgIdResponse], error)
	// SetMfaType sets the given user's mfa type.
	SetMfaType(context.Context, *connect_go.Request[org.SetMfaTypeRequest]) (*connect_go.Response[org.SetMfaTypeResponse], error)
	// SetMyMfaType sets the current user's mfa type.
	SetMyMfaType(context.Context, *connect_go.Request[org.SetMyMfaTypeRequest]) (*connect_go.Response[org.SetMyMfaTypeResponse], error)
	// EnableUserMfa enables or disables mfa for the given user
	EnableUserMfa(context.Context, *connect_go.Request[org.EnableUserMfaRequest]) (*connect_go.Response[org.EnableUserMfaResponse], error)
	// EnableMyUserMfa enables mfa for the current user
	EnableMyUserMfa(context.Context, *connect_go.Request[org.EnableMyUserMfaRequest]) (*connect_go.Response[org.EnableMyUserMfaResponse], error)
	// GetUserMfaInfo returns the mfa info for the given user.
	GetUserMfaInfo(context.Context, *connect_go.Request[org.GetUserMfaInfoRequest]) (*connect_go.Response[org.GetUserMfaInfoResponse], error)
	// GetMyUserMfaInfo returns the mfa info for the current user.
	GetMyUserMfaInfo(context.Context, *connect_go.Request[org.GetMyUserMfaInfoRequest]) (*connect_go.Response[org.GetMyUserMfaInfoResponse], error)
	// GetMyAllowedMfaMethods returns the mfa methods allowed to the current user.
	GetMyAllowedMfaMethods(context.Context, *connect_go.Request[org.GetMyAllowedMfaMethodsRequest]) (*connect_go.Response[org.GetMyAllowedMfaMethodsResponse], error)
	// CreateBusinessHours persists times businesses are available.
	//
	// Deprecated: do not use.
	CreateBusinessHours(context.Context, *connect_go.Request[org.CreateBusinessHoursRequest]) (*connect_go.Response[org.CreateBusinessHoursResponse], error)
	// UpdateBusinessHours persists changes to times businesses are available.
	//
	// Deprecated: do not use.
	UpdateBusinessHours(context.Context, *connect_go.Request[org.UpdateBusinessHoursRequest]) (*connect_go.Response[org.UpdateBusinessHoursResponse], error)
	// AddGroupedUserIPRestrictions adds a user or list of user's IPs they
	// are required to authenticate with
	AddGroupedUserIPRestrictions(context.Context, *connect_go.Request[org.AddGroupedUserIPRestrictionsRequest]) (*connect_go.Response[org.AddGroupedUserIPRestrictionsResponse], error)
	// RemoveGroupedUserIPRestrictions removes a user or list of user's IPs they
	// are required to authenticate with
	RemoveGroupedUserIPRestrictions(context.Context, *connect_go.Request[org.RemoveGroupedUserIPRestrictionsRequest]) (*connect_go.Response[org.RemoveGroupedUserIPRestrictionsResponse], error)
	// ListUsersAllowedIps -
	ListUsersAllowedIps(context.Context, *connect_go.Request[org.ListUsersAllowedIpsRequest]) (*connect_go.Response[org.ListUsersAllowedIpsResponse], error)
}

// NewOrgClient constructs a client for the api.v1alpha1.org.Org service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrgClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OrgClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &orgClient{
		createOrganization: connect_go.NewClient[org.CreateOrganizationRequest, org.CreateOrganizationResponse](
			httpClient,
			baseURL+OrgCreateOrganizationProcedure,
			opts...,
		),
		getOrganization: connect_go.NewClient[org.GetOrganizationRequest, org.GetOrganizationResponse](
			httpClient,
			baseURL+OrgGetOrganizationProcedure,
			opts...,
		),
		getOrganizationById: connect_go.NewClient[org.GetOrganizationByIdRequest, org.GetOrganizationByIdResponse](
			httpClient,
			baseURL+OrgGetOrganizationByIdProcedure,
			opts...,
		),
		updateOrganization: connect_go.NewClient[org.UpdateOrganizationRequest, org.UpdateOrganizationResponse](
			httpClient,
			baseURL+OrgUpdateOrganizationProcedure,
			opts...,
		),
		archiveOrganization: connect_go.NewClient[org.ArchiveOrganizationRequest, org.ArchiveOrganizationResponse](
			httpClient,
			baseURL+OrgArchiveOrganizationProcedure,
			opts...,
		),
		unArchiveOrganization: connect_go.NewClient[org.UnArchiveOrganizationRequest, org.UnArchiveOrganizationResponse](
			httpClient,
			baseURL+OrgUnArchiveOrganizationProcedure,
			opts...,
		),
		listAllOrganizationsGlobally: connect_go.NewClient[org.ListAllOrganizationsGloballyRequest, org.ListAllOrganizationsGloballyResponse](
			httpClient,
			baseURL+OrgListAllOrganizationsGloballyProcedure,
			opts...,
		),
		listOrganizationsByRegion: connect_go.NewClient[org.ListOrganizationsByRegionRequest, org.ListOrganizationsByRegionResponse](
			httpClient,
			baseURL+OrgListOrganizationsByRegionProcedure,
			opts...,
		),
		listArchivedOrganizations: connect_go.NewClient[org.ListArchivedOrganizationsRequest, org.ListArchivedOrganizationsResponse](
			httpClient,
			baseURL+OrgListArchivedOrganizationsProcedure,
			opts...,
		),
		convertOrgToManual: connect_go.NewClient[org.ConvertOrgToManualRequest, org.ConvertOrgToManualResponse](
			httpClient,
			baseURL+OrgConvertOrgToManualProcedure,
			opts...,
		),
		listOwnedOrgs: connect_go.NewClient[org.ListOwnedOrgsRequest, org.ListOwnedOrgsResponse](
			httpClient,
			baseURL+OrgListOwnedOrgsProcedure,
			opts...,
		),
		getOrganizationPreferences: connect_go.NewClient[org.GetOrganizationPreferencesRequest, org.GetOrganizationPreferencesResponse](
			httpClient,
			baseURL+OrgGetOrganizationPreferencesProcedure,
			opts...,
		),
		updateOrganizationPreferences: connect_go.NewClient[org.UpdateOrganizationPreferencesRequest, org.UpdateOrganizationPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateOrganizationPreferencesProcedure,
			opts...,
		),
		getAgentPreferences: connect_go.NewClient[org.GetAgentPreferencesRequest, org.GetAgentPreferencesResponse](
			httpClient,
			baseURL+OrgGetAgentPreferencesProcedure,
			opts...,
		),
		updateAgentPreferences: connect_go.NewClient[org.UpdateAgentPreferencesRequest, org.UpdateAgentPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateAgentPreferencesProcedure,
			opts...,
		),
		getContactPreferences: connect_go.NewClient[org.GetContactPreferencesRequest, org.GetContactPreferencesResponse](
			httpClient,
			baseURL+OrgGetContactPreferencesProcedure,
			opts...,
		),
		updateContactPreferences: connect_go.NewClient[org.UpdateContactPreferencesRequest, org.UpdateContactPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateContactPreferencesProcedure,
			opts...,
		),
		getAuthenticationPreferences: connect_go.NewClient[org.GetAuthenticationPreferencesRequest, org.GetAuthenticationPreferencesResponse](
			httpClient,
			baseURL+OrgGetAuthenticationPreferencesProcedure,
			opts...,
		),
		updateAuthenticationPreferences: connect_go.NewClient[org.UpdateAuthenticationPreferencesRequest, org.UpdateAuthenticationPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateAuthenticationPreferencesProcedure,
			opts...,
		),
		getWebhookPreferences: connect_go.NewClient[org.GetWebhookPreferencesRequest, org.GetWebhookPreferencesResponse](
			httpClient,
			baseURL+OrgGetWebhookPreferencesProcedure,
			opts...,
		),
		updateWebhookPreferences: connect_go.NewClient[org.UpdateWebhookPreferencesRequest, org.UpdateWebhookPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateWebhookPreferencesProcedure,
			opts...,
		),
		getDashboardGeneralPreferences: connect_go.NewClient[org.GetDashboardGeneralPreferencesRequest, org.GetDashboardGeneralPreferencesResponse](
			httpClient,
			baseURL+OrgGetDashboardGeneralPreferencesProcedure,
			opts...,
		),
		updateDashboardGeneralPreferences: connect_go.NewClient[org.UpdateDashboardGeneralPreferencesRequest, org.UpdateDashboardGeneralPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateDashboardGeneralPreferencesProcedure,
			opts...,
		),
		getDashboardQueuePreferences: connect_go.NewClient[org.GetDashboardQueuePreferencesRequest, org.GetDashboardQueuePreferencesResponse](
			httpClient,
			baseURL+OrgGetDashboardQueuePreferencesProcedure,
			opts...,
		),
		updateDashboardQueuePreferences: connect_go.NewClient[org.UpdateDashboardQueuePreferencesRequest, org.UpdateDashboardQueuePreferencesResponse](
			httpClient,
			baseURL+OrgUpdateDashboardQueuePreferencesProcedure,
			opts...,
		),
		getPhonePreferences: connect_go.NewClient[org.GetPhonePreferencesRequest, org.GetPhonePreferencesResponse](
			httpClient,
			baseURL+OrgGetPhonePreferencesProcedure,
			opts...,
		),
		updatePhonePreferences: connect_go.NewClient[org.UpdatePhonePreferencesRequest, org.UpdatePhonePreferencesResponse](
			httpClient,
			baseURL+OrgUpdatePhonePreferencesProcedure,
			opts...,
		),
		getCompliancePreferences: connect_go.NewClient[org.GetCompliancePreferencesRequest, org.GetCompliancePreferencesResponse](
			httpClient,
			baseURL+OrgGetCompliancePreferencesProcedure,
			opts...,
		),
		updateCompliancePreferences: connect_go.NewClient[org.UpdateCompliancePreferencesRequest, org.UpdateCompliancePreferencesResponse](
			httpClient,
			baseURL+OrgUpdateCompliancePreferencesProcedure,
			opts...,
		),
		getBroadcastPreferences: connect_go.NewClient[org.GetBroadcastPreferencesRequest, org.GetBroadcastPreferencesResponse](
			httpClient,
			baseURL+OrgGetBroadcastPreferencesProcedure,
			opts...,
		),
		updateBroadcastPreferences: connect_go.NewClient[org.UpdateBroadcastPreferencesRequest, org.UpdateBroadcastPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateBroadcastPreferencesProcedure,
			opts...,
		),
		getSchedulePreferences: connect_go.NewClient[org.GetSchedulePreferencesRequest, org.GetSchedulePreferencesResponse](
			httpClient,
			baseURL+OrgGetSchedulePreferencesProcedure,
			opts...,
		),
		updateSchedulePreferences: connect_go.NewClient[org.UpdateSchedulePreferencesRequest, org.UpdateSchedulePreferencesResponse](
			httpClient,
			baseURL+OrgUpdateSchedulePreferencesProcedure,
			opts...,
		),
		getEmailSmsPreferences: connect_go.NewClient[org.GetEmailSmsPreferencesRequest, org.GetEmailSmsPreferencesResponse](
			httpClient,
			baseURL+OrgGetEmailSmsPreferencesProcedure,
			opts...,
		),
		updateEmailSmsPreferences: connect_go.NewClient[org.UpdateEmailSmsPreferencesRequest, org.UpdateEmailSmsPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateEmailSmsPreferencesProcedure,
			opts...,
		),
		getBusinessPreferences: connect_go.NewClient[org.GetBusinessPreferencesRequest, org.GetBusinessPreferencesResponse](
			httpClient,
			baseURL+OrgGetBusinessPreferencesProcedure,
			opts...,
		),
		updateBusinessPreferences: connect_go.NewClient[org.UpdateBusinessPreferencesRequest, org.UpdateBusinessPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateBusinessPreferencesProcedure,
			opts...,
		),
		updateAdminBusinessPreferences: connect_go.NewClient[org.UpdateAdminBusinessPreferencesRequest, org.UpdateAdminBusinessPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateAdminBusinessPreferencesProcedure,
			opts...,
		),
		getScorecardsPreferences: connect_go.NewClient[org.GetScorecardsPreferencesRequest, org.GetScorecardsPreferencesResponse](
			httpClient,
			baseURL+OrgGetScorecardsPreferencesProcedure,
			opts...,
		),
		updateScorecardsPreferences: connect_go.NewClient[org.UpdateScorecardsPreferencesRequest, org.UpdateScorecardsPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateScorecardsPreferencesProcedure,
			opts...,
		),
		getVoiceAnalyticsPreferences: connect_go.NewClient[org.GetVoiceAnalyticsPreferencesRequest, org.GetVoiceAnalyticsPreferencesResponse](
			httpClient,
			baseURL+OrgGetVoiceAnalyticsPreferencesProcedure,
			opts...,
		),
		listVoiceAnalyticsPreferences: connect_go.NewClient[org.ListVoiceAnalyticsPreferencesRequest, org.ListVoiceAnalyticsPreferencesResponse](
			httpClient,
			baseURL+OrgListVoiceAnalyticsPreferencesProcedure,
			opts...,
		),
		updateVoiceAnalyticsPreferences: connect_go.NewClient[org.UpdateVoiceAnalyticsPreferencesRequest, org.UpdateVoiceAnalyticsPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateVoiceAnalyticsPreferencesProcedure,
			opts...,
		),
		getEndOfDayPreferences: connect_go.NewClient[org.GetEndOfDayPreferencesRequest, org.GetEndOfDayPreferencesResponse](
			httpClient,
			baseURL+OrgGetEndOfDayPreferencesProcedure,
			opts...,
		),
		updateEndOfDayPreferences: connect_go.NewClient[org.UpdateEndOfDayPreferencesRequest, org.UpdateEndOfDayPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateEndOfDayPreferencesProcedure,
			opts...,
		),
		getReportFilterPreferences: connect_go.NewClient[org.GetFilterPreferencesRequest, org.GetFilterPreferencesResponse](
			httpClient,
			baseURL+OrgGetReportFilterPreferencesProcedure,
			opts...,
		),
		updateReportFilterPreferences: connect_go.NewClient[org.UpdateFilterPreferencesRequest, org.UpdateFilterPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateReportFilterPreferencesProcedure,
			opts...,
		),
		getRecordingPreferences: connect_go.NewClient[org.GetRecordingPreferencesRequest, org.GetRecordingPreferencesResponse](
			httpClient,
			baseURL+OrgGetRecordingPreferencesProcedure,
			opts...,
		),
		updateRecordingPreferences: connect_go.NewClient[org.UpdateRecordingPreferencesRequest, org.UpdateRecordingPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateRecordingPreferencesProcedure,
			opts...,
		),
		getAdminClientPreferences: connect_go.NewClient[org.GetAdminClientPreferencesRequest, org.GetAdminClientPreferencesResponse](
			httpClient,
			baseURL+OrgGetAdminClientPreferencesProcedure,
			opts...,
		),
		updateAdminClientPreferences: connect_go.NewClient[org.UpdateAdminClientPreferencesRequest, org.UpdateAdminClientPreferencesResponse](
			httpClient,
			baseURL+OrgUpdateAdminClientPreferencesProcedure,
			opts...,
		),
		acceptLinkbackRecordingTerms: connect_go.NewClient[org.AcceptLinkbackRecordingTermsRequest, org.AcceptLinkbackRecordingTermsResponse](
			httpClient,
			baseURL+OrgAcceptLinkbackRecordingTermsProcedure,
			opts...,
		),
		linkbackUpdateBroadcastTemplates: connect_go.NewClient[org.LinkbackUpdateBroadcastTemplatesRequest, org.LinkbackUpdateBroadcastTemplatesResponse](
			httpClient,
			baseURL+OrgLinkbackUpdateBroadcastTemplatesProcedure,
			opts...,
		),
		recordEmailUnsubscribeAcknowledgement: connect_go.NewClient[org.RecordEmailUnsubscribeAcknowledgementRequest, org.RecordEmailUnsubscribeAcknowledgementResponse](
			httpClient,
			baseURL+OrgRecordEmailUnsubscribeAcknowledgementProcedure,
			opts...,
		),
		clearEmailUnsubscribeAcknowledgement: connect_go.NewClient[org.ClearEmailUnsubscribeAcknowledgementRequest, org.ClearEmailUnsubscribeAcknowledgementResponse](
			httpClient,
			baseURL+OrgClearEmailUnsubscribeAcknowledgementProcedure,
			opts...,
		),
		listBusinessHours: connect_go.NewClient[org.ListBusinessHoursRequest, org.ListBusinessHoursResponse](
			httpClient,
			baseURL+OrgListBusinessHoursProcedure,
			opts...,
		),
		getBusinessHours: connect_go.NewClient[org.GetBusinessHoursRequest, org.GetBusinessHoursResponse](
			httpClient,
			baseURL+OrgGetBusinessHoursProcedure,
			opts...,
		),
		setBusinessHours: connect_go.NewClient[org.SetBusinessHoursRequest, org.SetBusinessHoursResponse](
			httpClient,
			baseURL+OrgSetBusinessHoursProcedure,
			opts...,
		),
		addIntervalToBusinessHours: connect_go.NewClient[org.AddIntervalToBusinessHoursRequest, org.AddIntervalToBusinessHoursResponse](
			httpClient,
			baseURL+OrgAddIntervalToBusinessHoursProcedure,
			opts...,
		),
		removeIntervalFromBusinessHours: connect_go.NewClient[org.RemoveIntervalFromBusinessHoursRequest, org.RemoveIntervalFromBusinessHoursResponse](
			httpClient,
			baseURL+OrgRemoveIntervalFromBusinessHoursProcedure,
			opts...,
		),
		updateBusinessHoursInfo: connect_go.NewClient[org.UpdateBusinessHoursInfoRequest, org.UpdateBusinessHoursInfoResponse](
			httpClient,
			baseURL+OrgUpdateBusinessHoursInfoProcedure,
			opts...,
		),
		deleteBusinessHours: connect_go.NewClient[org.DeleteBusinessHoursRequest, org.DeleteBusinessHoursResponse](
			httpClient,
			baseURL+OrgDeleteBusinessHoursProcedure,
			opts...,
		),
		evaluateBusinessHours: connect_go.NewClient[org.EvaluateBusinessHoursRequest, org.EvaluateBusinessHoursResponse](
			httpClient,
			baseURL+OrgEvaluateBusinessHoursProcedure,
			opts...,
		),
		createUser: connect_go.NewClient[org.CreateUserRequest, org.CreateUserResponse](
			httpClient,
			baseURL+OrgCreateUserProcedure,
			opts...,
		),
		createDelegatedUser: connect_go.NewClient[org.CreateDelegatedUserRequest, org.CreateDelegatedUserResponse](
			httpClient,
			baseURL+OrgCreateDelegatedUserProcedure,
			opts...,
		),
		getMyUser: connect_go.NewClient[org.GetMyUserRequest, org.GetMyUserResponse](
			httpClient,
			baseURL+OrgGetMyUserProcedure,
			opts...,
		),
		getUser: connect_go.NewClient[org.GetUserRequest, org.GetUserResponse](
			httpClient,
			baseURL+OrgGetUserProcedure,
			opts...,
		),
		getUserByOrgId: connect_go.NewClient[org.GetUserByOrgIdRequest, org.GetUserByOrgIdResponse](
			httpClient,
			baseURL+OrgGetUserByOrgIdProcedure,
			opts...,
		),
		listAgents: connect_go.NewClient[org.ListAgentsRequest, org.ListAgentsResponse](
			httpClient,
			baseURL+OrgListAgentsProcedure,
			opts...,
		),
		listPublicUsers: connect_go.NewClient[org.ListPublicUsersRequest, org.ListPublicUsersResponse](
			httpClient,
			baseURL+OrgListPublicUsersProcedure,
			opts...,
		),
		listUsers: connect_go.NewClient[org.ListUsersRequest, org.ListUsersResponse](
			httpClient,
			baseURL+OrgListUsersProcedure,
			opts...,
		),
		listUsersByOrgId: connect_go.NewClient[org.ListUsersByOrgIdRequest, org.ListUsersByOrgIdResponse](
			httpClient,
			baseURL+OrgListUsersByOrgIdProcedure,
			opts...,
		),
		listUsersByRegion: connect_go.NewClient[org.ListUsersByRegionRequest, org.ListUsersByRegionResponse](
			httpClient,
			baseURL+OrgListUsersByRegionProcedure,
			opts...,
		),
		updateMyUser: connect_go.NewClient[org.UpdateMyUserRequest, org.UpdateMyUserResponse](
			httpClient,
			baseURL+OrgUpdateMyUserProcedure,
			opts...,
		),
		updateUser: connect_go.NewClient[org.UpdateUserRequest, org.UpdateUserResponse](
			httpClient,
			baseURL+OrgUpdateUserProcedure,
			opts...,
		),
		updateUserLabels: connect_go.NewClient[org.UpdateUserLabelsRequest, org.UpdateUserLabelsResponse](
			httpClient,
			baseURL+OrgUpdateUserLabelsProcedure,
			opts...,
		),
		updateUserCallerId: connect_go.NewClient[org.UpdateUserCallerIdRequest, org.UpdateUserCallerIdResponse](
			httpClient,
			baseURL+OrgUpdateUserCallerIdProcedure,
			opts...,
		),
		updateUserDisabled: connect_go.NewClient[org.UpdateUserDisabledRequest, org.UpdateUserDisabledResponse](
			httpClient,
			baseURL+OrgUpdateUserDisabledProcedure,
			opts...,
		),
		updateUserDisabledByOrgId: connect_go.NewClient[org.UpdateUserDisabledByOrgIdRequest, org.UpdateUserDisabledByOrgIdResponse](
			httpClient,
			baseURL+OrgUpdateUserDisabledByOrgIdProcedure,
			opts...,
		),
		getMyUserPasswordResetLink: connect_go.NewClient[org.GetMyUserPasswordResetLinkRequest, org.GetMyUserPasswordResetLinkResponse](
			httpClient,
			baseURL+OrgGetMyUserPasswordResetLinkProcedure,
			opts...,
		),
		getUserPasswordResetLink: connect_go.NewClient[org.GetUserPasswordResetLinkRequest, org.GetUserPasswordResetLinkResponse](
			httpClient,
			baseURL+OrgGetUserPasswordResetLinkProcedure,
			opts...,
		),
		getUserPasswordResetLinkByOrgId: connect_go.NewClient[org.GetUserPasswordResetLinkByOrgIdRequest, org.GetUserPasswordResetLinkByOrgIdResponse](
			httpClient,
			baseURL+OrgGetUserPasswordResetLinkByOrgIdProcedure,
			opts...,
		),
		createPasswordResetLink: connect_go.NewClient[org.CreatePasswordResetLinkRequest, org.CreatePasswordResetLinkResponse](
			httpClient,
			baseURL+OrgCreatePasswordResetLinkProcedure,
			opts...,
		),
		createPasswordResetLinkByOrgId: connect_go.NewClient[org.CreatePasswordResetLinkByOrgIdRequest, org.CreatePasswordResetLinkByOrgIdResponse](
			httpClient,
			baseURL+OrgCreatePasswordResetLinkByOrgIdProcedure,
			opts...,
		),
		getUserLoginInfo: connect_go.NewClient[org.GetUserLoginInfoRequest, org.GetUserLoginInfoResponse](
			httpClient,
			baseURL+OrgGetUserLoginInfoProcedure,
			opts...,
		),
		getUserEmailVerified: connect_go.NewClient[org.GetUserEmailVerifiedRequest, org.GetUserEmailVerifiedResponse](
			httpClient,
			baseURL+OrgGetUserEmailVerifiedProcedure,
			opts...,
		),
		getUserEmailVerifiedByOrgId: connect_go.NewClient[org.GetUserEmailVerifiedByOrgIdRequest, org.GetUserEmailVerifiedByOrgIdResponse](
			httpClient,
			baseURL+OrgGetUserEmailVerifiedByOrgIdProcedure,
			opts...,
		),
		resetMyPassword: connect_go.NewClient[org.ResetMyPasswordRequest, org.ResetMyPasswordResponse](
			httpClient,
			baseURL+OrgResetMyPasswordProcedure,
			opts...,
		),
		resetUserPassword: connect_go.NewClient[org.ResetUserPasswordRequest, org.ResetUserPasswordResponse](
			httpClient,
			baseURL+OrgResetUserPasswordProcedure,
			opts...,
		),
		resetUserPasswordByOrgId: connect_go.NewClient[org.ResetUserPasswordByOrgIdRequest, org.ResetUserPasswordByOrgIdResponse](
			httpClient,
			baseURL+OrgResetUserPasswordByOrgIdProcedure,
			opts...,
		),
		sendUserEmailVerification: connect_go.NewClient[org.SendUserEmailVerificationRequest, org.SendUserEmailVerificationResponse](
			httpClient,
			baseURL+OrgSendUserEmailVerificationProcedure,
			opts...,
		),
		sendUserEmailVerificationByOrgId: connect_go.NewClient[org.SendUserEmailVerificationByOrgIdRequest, org.SendUserEmailVerificationByOrgIdResponse](
			httpClient,
			baseURL+OrgSendUserEmailVerificationByOrgIdProcedure,
			opts...,
		),
		sendPasswordReset: connect_go.NewClient[org.SendPasswordResetRequest, org.SendPasswordResetResponse](
			httpClient,
			baseURL+OrgSendPasswordResetProcedure,
			opts...,
		),
		sendPasswordResetByOrgId: connect_go.NewClient[org.SendPasswordResetByOrgIdRequest, org.SendPasswordResetByOrgIdResponse](
			httpClient,
			baseURL+OrgSendPasswordResetByOrgIdProcedure,
			opts...,
		),
		getUserSessionData: connect_go.NewClient[org.GetUserSessionDataRequest, org.GetUserSessionDataResponse](
			httpClient,
			baseURL+OrgGetUserSessionDataProcedure,
			opts...,
		),
		getAgentProfileGroup: connect_go.NewClient[org.GetAgentProfileGroupRequest, org.GetAgentProfileGroupResponse](
			httpClient,
			baseURL+OrgGetAgentProfileGroupProcedure,
			opts...,
		),
		listAgentProfileGroups: connect_go.NewClient[org.ListAgentProfileGroupsRequest, org.ListAgentProfileGroupsResponse](
			httpClient,
			baseURL+OrgListAgentProfileGroupsProcedure,
			opts...,
		),
		updateAgentProfileGroup: connect_go.NewClient[org.UpdateAgentProfileGroupRequest, org.UpdateAgentProfileGroupResponse](
			httpClient,
			baseURL+OrgUpdateAgentProfileGroupProcedure,
			opts...,
		),
		createAgentProfileGroup: connect_go.NewClient[org.CreateAgentProfileGroupRequest, org.CreateAgentProfileGroupResponse](
			httpClient,
			baseURL+OrgCreateAgentProfileGroupProcedure,
			opts...,
		),
		deleteAgentProfileGroup: connect_go.NewClient[org.DeleteAgentProfileGroupRequest, org.DeleteAgentProfileGroupResponse](
			httpClient,
			baseURL+OrgDeleteAgentProfileGroupProcedure,
			opts...,
		),
		assignAgentProfileGroups: connect_go.NewClient[org.AssignAgentProfileGroupsRequest, org.AssignAgentProfileGroupsResponse](
			httpClient,
			baseURL+OrgAssignAgentProfileGroupsProcedure,
			opts...,
		),
		addUserSubscription: connect_go.NewClient[org.AddUserSubscriptionRequest, org.AddUserSubscriptionResponse](
			httpClient,
			baseURL+OrgAddUserSubscriptionProcedure,
			opts...,
		),
		addUserSubscriptionByUserId: connect_go.NewClient[org.AddUserSubscriptionByUserIdRequest, org.AddUserSubscriptionByUserIdResponse](
			httpClient,
			baseURL+OrgAddUserSubscriptionByUserIdProcedure,
			opts...,
		),
		getUserSubscription: connect_go.NewClient[org.GetUserSubscriptionRequest, org.GetUserSubscriptionResponse](
			httpClient,
			baseURL+OrgGetUserSubscriptionProcedure,
			opts...,
		),
		getUserSubscriptionByUserId: connect_go.NewClient[org.GetUserSubscriptionByUserIdRequest, org.GetUserSubscriptionByUserIdResponse](
			httpClient,
			baseURL+OrgGetUserSubscriptionByUserIdProcedure,
			opts...,
		),
		updateUserSubscription: connect_go.NewClient[org.UpdateUserSubscriptionRequest, org.UpdateUserSubscriptionResponse](
			httpClient,
			baseURL+OrgUpdateUserSubscriptionProcedure,
			opts...,
		),
		updateUserSubscriptionByUserId: connect_go.NewClient[org.UpdateUserSubscriptionByUserIdRequest, org.UpdateUserSubscriptionByUserIdResponse](
			httpClient,
			baseURL+OrgUpdateUserSubscriptionByUserIdProcedure,
			opts...,
		),
		removeUserSubscription: connect_go.NewClient[org.RemoveUserSubscriptionRequest, org.RemoveUserSubscriptionResponse](
			httpClient,
			baseURL+OrgRemoveUserSubscriptionProcedure,
			opts...,
		),
		removeUserSubscriptionByUserId: connect_go.NewClient[org.RemoveUserSubscriptionByUserIdRequest, org.RemoveUserSubscriptionByUserIdResponse](
			httpClient,
			baseURL+OrgRemoveUserSubscriptionByUserIdProcedure,
			opts...,
		),
		listUserSubscriptions: connect_go.NewClient[org.ListUserSubscriptionsRequest, org.ListUserSubscriptionsResponse](
			httpClient,
			baseURL+OrgListUserSubscriptionsProcedure,
			opts...,
		),
		listUserSubscriptionsByUserId: connect_go.NewClient[org.ListUserSubscriptionsByUserIdRequest, org.ListUserSubscriptionsByUserIdResponse](
			httpClient,
			baseURL+OrgListUserSubscriptionsByUserIdProcedure,
			opts...,
		),
		listOrgSubscriptions: connect_go.NewClient[org.ListOrgSubscriptionsRequest, org.ListOrgSubscriptionsResponse](
			httpClient,
			baseURL+OrgListOrgSubscriptionsProcedure,
			opts...,
		),
		createAuthToken: connect_go.NewClient[org.CreateAuthTokenRequest, org.CreateAuthTokenResponse](
			httpClient,
			baseURL+OrgCreateAuthTokenProcedure,
			opts...,
		),
		createAuthTokenByUserId: connect_go.NewClient[org.CreateAuthTokenByUserIdRequest, org.CreateAuthTokenByUserIdResponse](
			httpClient,
			baseURL+OrgCreateAuthTokenByUserIdProcedure,
			opts...,
		),
		listAuthTokens: connect_go.NewClient[org.ListAuthTokensRequest, org.ListAuthTokensResponse](
			httpClient,
			baseURL+OrgListAuthTokensProcedure,
			opts...,
		),
		listAuthTokensByUserId: connect_go.NewClient[org.ListAuthTokensByUserIdRequest, org.ListAuthTokensByUserIdResponse](
			httpClient,
			baseURL+OrgListAuthTokensByUserIdProcedure,
			opts...,
		),
		setAuthTokenExpiration: connect_go.NewClient[org.SetAuthTokenExpirationRequest, org.SetAuthTokenExpirationResponse](
			httpClient,
			baseURL+OrgSetAuthTokenExpirationProcedure,
			opts...,
		),
		setAuthTokenExpirationByUserId: connect_go.NewClient[org.SetAuthTokenExpirationByUserIdRequest, org.SetAuthTokenExpirationByUserIdResponse](
			httpClient,
			baseURL+OrgSetAuthTokenExpirationByUserIdProcedure,
			opts...,
		),
		deleteAuthToken: connect_go.NewClient[org.DeleteAuthTokenRequest, org.DeleteAuthTokenResponse](
			httpClient,
			baseURL+OrgDeleteAuthTokenProcedure,
			opts...,
		),
		deleteAuthTokenByUserId: connect_go.NewClient[org.DeleteAuthTokenByUserIdRequest, org.DeleteAuthTokenByUserIdResponse](
			httpClient,
			baseURL+OrgDeleteAuthTokenByUserIdProcedure,
			opts...,
		),
		getHuntGroupSettings: connect_go.NewClient[org.GetHuntGroupSettingsRequest, org.GetHuntGroupSettingsResponse](
			httpClient,
			baseURL+OrgGetHuntGroupSettingsProcedure,
			opts...,
		),
		updateHuntGroupSettings: connect_go.NewClient[org.UpdateHuntGroupSettingsRequest, org.UpdateHuntGroupSettingsResponse](
			httpClient,
			baseURL+OrgUpdateHuntGroupSettingsProcedure,
			opts...,
		),
		createHuntGroup: connect_go.NewClient[org.CreateHuntGroupRequest, org.CreateHuntGroupResponse](
			httpClient,
			baseURL+OrgCreateHuntGroupProcedure,
			opts...,
		),
		updateHuntGroupGeneralDetails: connect_go.NewClient[org.UpdateHuntGroupGeneralDetailsRequest, org.UpdateHuntGroupGeneralDetailsResponse](
			httpClient,
			baseURL+OrgUpdateHuntGroupGeneralDetailsProcedure,
			opts...,
		),
		deleteHuntGroup: connect_go.NewClient[org.DeleteHuntGroupRequest, org.DeleteHuntGroupResponse](
			httpClient,
			baseURL+OrgDeleteHuntGroupProcedure,
			opts...,
		),
		getHuntGroupDetails: connect_go.NewClient[org.GetHuntGroupDetailsRequest, org.GetHuntGroupDetailsResponse](
			httpClient,
			baseURL+OrgGetHuntGroupDetailsProcedure,
			opts...,
		),
		listCallerIdBuckets: connect_go.NewClient[org.ListCallerIdBucketsRequest, org.ListCallerIdBucketsResponse](
			httpClient,
			baseURL+OrgListCallerIdBucketsProcedure,
			opts...,
		),
		getDataDipTemplate: connect_go.NewClient[org.GetDataDipTemplateRequest, org.GetDataDipTemplateResponse](
			httpClient,
			baseURL+OrgGetDataDipTemplateProcedure,
			opts...,
		),
		listDataDipTemplates: connect_go.NewClient[org.ListDataDipTemplatesRequest, org.ListDataDipTemplatesResponse](
			httpClient,
			baseURL+OrgListDataDipTemplatesProcedure,
			opts...,
		),
		createDataDipTemplate: connect_go.NewClient[org.CreateDataDipTemplateRequest, org.CreateDataDipTemplateResponse](
			httpClient,
			baseURL+OrgCreateDataDipTemplateProcedure,
			opts...,
		),
		updateDataDipTemplate: connect_go.NewClient[org.UpdateDataDipTemplateRequest, org.UpdateDataDipTemplateResponse](
			httpClient,
			baseURL+OrgUpdateDataDipTemplateProcedure,
			opts...,
		),
		deleteDataDipTemplate: connect_go.NewClient[org.DeleteDataDipTemplateRequest, org.DeleteDataDipTemplateResponse](
			httpClient,
			baseURL+OrgDeleteDataDipTemplateProcedure,
			opts...,
		),
		copyDataDipTemplate: connect_go.NewClient[org.CopyDataDipTemplateRequest, org.CopyDataDipTemplateResponse](
			httpClient,
			baseURL+OrgCopyDataDipTemplateProcedure,
			opts...,
		),
		copyDataDipTemplateToOrganization: connect_go.NewClient[org.CopyDataDipTemplateToOrganizationRequest, org.CopyDataDipTemplateToOrganizationResponse](
			httpClient,
			baseURL+OrgCopyDataDipTemplateToOrganizationProcedure,
			opts...,
		),
		listBroadcastTemplateGeneralDetails: connect_go.NewClient[org.ListBroadcastTemplateGeneralDetailsRequest, org.ListBroadcastTemplateGeneralDetailsResponse](
			httpClient,
			baseURL+OrgListBroadcastTemplateGeneralDetailsProcedure,
			opts...,
		),
		listAgentResponseAutoRules: connect_go.NewClient[org.ListAgentResponseAutoRulesRequest, org.ListAgentResponseAutoRulesResponse](
			httpClient,
			baseURL+OrgListAgentResponseAutoRulesProcedure,
			opts...,
		),
		createAgentResponseAutoRules: connect_go.NewClient[org.CreateAgentResponseAutoRulesRequest, org.CreateAgentResponseAutoRulesResponse](
			httpClient,
			baseURL+OrgCreateAgentResponseAutoRulesProcedure,
			opts...,
		),
		updateAgentResponseAutoRules: connect_go.NewClient[org.UpdateAgentResponseAutoRulesRequest, org.UpdateAgentResponseAutoRulesResponse](
			httpClient,
			baseURL+OrgUpdateAgentResponseAutoRulesProcedure,
			opts...,
		),
		deleteAgentResponseAutoRules: connect_go.NewClient[org.DeleteAgentResponseAutoRulesRequest, org.DeleteAgentResponseAutoRulesResponse](
			httpClient,
			baseURL+OrgDeleteAgentResponseAutoRulesProcedure,
			opts...,
		),
		listHuntGroupWebLinks: connect_go.NewClient[org.ListHuntGroupWebLinksRequest, org.ListHuntGroupWebLinksResponse](
			httpClient,
			baseURL+OrgListHuntGroupWebLinksProcedure,
			opts...,
		),
		copyHuntGroupWebLink: connect_go.NewClient[org.CopyHuntGroupWebLinkRequest, org.CopyHuntGroupWebLinkResponse](
			httpClient,
			baseURL+OrgCopyHuntGroupWebLinkProcedure,
			opts...,
		),
		updateHuntGroupWebLinks: connect_go.NewClient[org.UpdateHuntGroupWebLinksRequest, org.UpdateHuntGroupWebLinksResponse](
			httpClient,
			baseURL+OrgUpdateHuntGroupWebLinksProcedure,
			opts...,
		),
		listHuntGroupIntegrationLinks: connect_go.NewClient[org.ListHuntGroupIntegrationLinksRequest, org.ListHuntGroupIntegrationLinksResponse](
			httpClient,
			baseURL+OrgListHuntGroupIntegrationLinksProcedure,
			opts...,
		),
		copyHuntGroupIntegrationLink: connect_go.NewClient[org.CopyHuntGroupIntegrationLinkRequest, org.CopyHuntGroupIntegrationLinkResponse](
			httpClient,
			baseURL+OrgCopyHuntGroupIntegrationLinkProcedure,
			opts...,
		),
		updateHuntGroupIntegrationLinks: connect_go.NewClient[org.UpdateHuntGroupIntegrationLinksRequest, org.UpdateHuntGroupIntegrationLinksResponse](
			httpClient,
			baseURL+OrgUpdateHuntGroupIntegrationLinksProcedure,
			opts...,
		),
		getHuntGroupClientInfoDisplayTemplate: connect_go.NewClient[org.GetHuntGroupClientInfoDisplayTemplateRequest, org.GetHuntGroupClientInfoDisplayTemplateResponse](
			httpClient,
			baseURL+OrgGetHuntGroupClientInfoDisplayTemplateProcedure,
			opts...,
		),
		createHuntGroupClientInfoDisplayTemplate: connect_go.NewClient[org.CreateHuntGroupClientInfoDisplayTemplateRequest, org.CreateHuntGroupClientInfoDisplayTemplateResponse](
			httpClient,
			baseURL+OrgCreateHuntGroupClientInfoDisplayTemplateProcedure,
			opts...,
		),
		updateHuntGroupClientInfoDisplayTemplate: connect_go.NewClient[org.UpdateHuntGroupClientInfoDisplayTemplateRequest, org.UpdateHuntGroupClientInfoDisplayTemplateResponse](
			httpClient,
			baseURL+OrgUpdateHuntGroupClientInfoDisplayTemplateProcedure,
			opts...,
		),
		deleteHuntGroupClientInfoDisplayTemplate: connect_go.NewClient[org.DeleteHuntGroupClientInfoDisplayTemplateRequest, org.DeleteHuntGroupClientInfoDisplayTemplateResponse](
			httpClient,
			baseURL+OrgDeleteHuntGroupClientInfoDisplayTemplateProcedure,
			opts...,
		),
		copyHuntGroupClientInfoDisplayTemplate: connect_go.NewClient[org.CopyHuntGroupClientInfoDisplayTemplateRequest, org.CopyHuntGroupClientInfoDisplayTemplateResponse](
			httpClient,
			baseURL+OrgCopyHuntGroupClientInfoDisplayTemplateProcedure,
			opts...,
		),
		createCampaignClientInfoDisplayTemplate: connect_go.NewClient[org.CreateCampaignClientInfoDisplayTemplateRequest, org.CreateCampaignClientInfoDisplayTemplateResponse](
			httpClient,
			baseURL+OrgCreateCampaignClientInfoDisplayTemplateProcedure,
			opts...,
		),
		listHuntGroupsWithClientInfoTemplateData: connect_go.NewClient[org.ListHuntGroupsWithClientInfoTemplateDataRequest, org.ListHuntGroupsWithClientInfoTemplateDataResponse](
			httpClient,
			baseURL+OrgListHuntGroupsWithClientInfoTemplateDataProcedure,
			opts...,
		),
		listAgentTriggers: connect_go.NewClient[org.ListAgentTriggersRequest, org.ListAgentTriggersResponse](
			httpClient,
			baseURL+OrgListAgentTriggersProcedure,
			opts...,
		),
		copyAgentTrigger: connect_go.NewClient[org.CopyAgentTriggerRequest, org.CopyAgentTriggerResponse](
			httpClient,
			baseURL+OrgCopyAgentTriggerProcedure,
			opts...,
		),
		updateAgentTriggers: connect_go.NewClient[org.UpdateAgentTriggersRequest, org.UpdateAgentTriggersResponse](
			httpClient,
			baseURL+OrgUpdateAgentTriggersProcedure,
			opts...,
		),
		listHuntGroupScripts: connect_go.NewClient[org.ListHuntGroupScriptsRequest, org.ListHuntGroupScriptsResponse](
			httpClient,
			baseURL+OrgListHuntGroupScriptsProcedure,
			opts...,
		),
		getHuntGroupScript: connect_go.NewClient[org.GetHuntGroupScriptRequest, org.GetHuntGroupScriptResponse](
			httpClient,
			baseURL+OrgGetHuntGroupScriptProcedure,
			opts...,
		),
		createHuntGroupScript: connect_go.NewClient[org.CreateHuntGroupScriptRequest, org.CreateHuntGroupScriptResponse](
			httpClient,
			baseURL+OrgCreateHuntGroupScriptProcedure,
			opts...,
		),
		updateHuntGroupScript: connect_go.NewClient[org.UpdateHuntGroupScriptRequest, org.UpdateHuntGroupScriptResponse](
			httpClient,
			baseURL+OrgUpdateHuntGroupScriptProcedure,
			opts...,
		),
		deleteHuntGroupScript: connect_go.NewClient[org.DeleteHuntGroupScriptRequest, org.DeleteHuntGroupScriptResponse](
			httpClient,
			baseURL+OrgDeleteHuntGroupScriptProcedure,
			opts...,
		),
		assignScriptToHuntGroups: connect_go.NewClient[org.AssignScriptToHuntGroupsRequest, org.AssignScriptToHuntGroupsResponse](
			httpClient,
			baseURL+OrgAssignScriptToHuntGroupsProcedure,
			opts...,
		),
		unassignScriptFromHuntGroups: connect_go.NewClient[org.UnassignScriptFromHuntGroupsRequest, org.UnassignScriptFromHuntGroupsResponse](
			httpClient,
			baseURL+OrgUnassignScriptFromHuntGroupsProcedure,
			opts...,
		),
		createTrust: connect_go.NewClient[org.CreateTrustRequest, org.CreateTrustResponse](
			httpClient,
			baseURL+OrgCreateTrustProcedure,
			opts...,
		),
		acceptTrust: connect_go.NewClient[org.AcceptTrustRequest, org.AcceptTrustResponse](
			httpClient,
			baseURL+OrgAcceptTrustProcedure,
			opts...,
		),
		rejectTrust: connect_go.NewClient[org.RejectTrustRequest, org.RejectTrustResponse](
			httpClient,
			baseURL+OrgRejectTrustProcedure,
			opts...,
		),
		getTrust: connect_go.NewClient[org.GetTrustRequest, org.GetTrustResponse](
			httpClient,
			baseURL+OrgGetTrustProcedure,
			opts...,
		),
		listIncomingTrusts: connect_go.NewClient[org.ListIncomingTrustsRequest, org.ListIncomingTrustsResponse](
			httpClient,
			baseURL+OrgListIncomingTrustsProcedure,
			opts...,
		),
		listGivenTrusts: connect_go.NewClient[org.ListGivenTrustsRequest, org.ListGivenTrustsResponse](
			httpClient,
			baseURL+OrgListGivenTrustsProcedure,
			opts...,
		),
		listAssignableTrusts: connect_go.NewClient[org.ListAssignableTrustsRequest, org.ListAssignableTrustsResponse](
			httpClient,
			baseURL+OrgListAssignableTrustsProcedure,
			opts...,
		),
		deleteTrust: connect_go.NewClient[org.DeleteTrustRequest, org.DeleteTrustResponse](
			httpClient,
			baseURL+OrgDeleteTrustProcedure,
			opts...,
		),
		assignTrust: connect_go.NewClient[org.AssignTrustRequest, org.AssignTrustResponse](
			httpClient,
			baseURL+OrgAssignTrustProcedure,
			opts...,
		),
		unassignTrust: connect_go.NewClient[org.UnassignTrustRequest, org.UnassignTrustResponse](
			httpClient,
			baseURL+OrgUnassignTrustProcedure,
			opts...,
		),
		createLabel: connect_go.NewClient[org.CreateLabelRequest, org.CreateLabelResponse](
			httpClient,
			baseURL+OrgCreateLabelProcedure,
			opts...,
		),
		deleteLabel: connect_go.NewClient[org.DeleteLabelRequest, org.DeleteLabelResponse](
			httpClient,
			baseURL+OrgDeleteLabelProcedure,
			opts...,
		),
		listLabels: connect_go.NewClient[org.ListLabelsRequest, org.ListLabelsResponse](
			httpClient,
			baseURL+OrgListLabelsProcedure,
			opts...,
		),
		getLabel: connect_go.NewClient[org.GetLabelRequest, org.GetLabelResponse](
			httpClient,
			baseURL+OrgGetLabelProcedure,
			opts...,
		),
		updateLabel: connect_go.NewClient[org.UpdateLabelRequest, org.UpdateLabelResponse](
			httpClient,
			baseURL+OrgUpdateLabelProcedure,
			opts...,
		),
		assignLabel: connect_go.NewClient[org.AssignLabelRequest, org.AssignLabelResponse](
			httpClient,
			baseURL+OrgAssignLabelProcedure,
			opts...,
		),
		unassignLabel: connect_go.NewClient[org.UnassignLabelRequest, org.UnassignLabelResponse](
			httpClient,
			baseURL+OrgUnassignLabelProcedure,
			opts...,
		),
		getAssignmentCounts: connect_go.NewClient[org.GetAssignmentCountsRequest, org.GetAssignmentCountsResponse](
			httpClient,
			baseURL+OrgGetAssignmentCountsProcedure,
			opts...,
		),
		getAssignableLabels: connect_go.NewClient[org.GetAssignableLabelsRequest, org.GetAssignableLabelsResponse](
			httpClient,
			baseURL+OrgGetAssignableLabelsProcedure,
			opts...,
		),
		getPermissions: connect_go.NewClient[org.GetPermissionsRequest, org.GetPermissionsResponse](
			httpClient,
			baseURL+OrgGetPermissionsProcedure,
			opts...,
		),
		getUserPermissions: connect_go.NewClient[org.GetUserPermissionsRequest, org.GetUserPermissionsResponse](
			httpClient,
			baseURL+OrgGetUserPermissionsProcedure,
			opts...,
		),
		createPermissionGroup: connect_go.NewClient[org.CreatePermissionGroupRequest, org.CreatePermissionGroupResponse](
			httpClient,
			baseURL+OrgCreatePermissionGroupProcedure,
			opts...,
		),
		updatePermissionGroup: connect_go.NewClient[org.UpdatePermissionGroupRequest, org.UpdatePermissionGroupResponse](
			httpClient,
			baseURL+OrgUpdatePermissionGroupProcedure,
			opts...,
		),
		deletePermissionGroup: connect_go.NewClient[org.DeletePermissionGroupRequest, org.DeletePermissionGroupResponse](
			httpClient,
			baseURL+OrgDeletePermissionGroupProcedure,
			opts...,
		),
		listPermissionGroups: connect_go.NewClient[org.ListPermissionGroupsRequest, org.ListPermissionGroupsResponse](
			httpClient,
			baseURL+OrgListPermissionGroupsProcedure,
			opts...,
		),
		listPermissionGroupsByOrgId: connect_go.NewClient[org.ListPermissionGroupsByOrgIdRequest, org.ListPermissionGroupsByOrgIdResponse](
			httpClient,
			baseURL+OrgListPermissionGroupsByOrgIdProcedure,
			opts...,
		),
		assignUsersPermissionGroup: connect_go.NewClient[org.AssignUsersPermissionGroupRequest, org.AssignUsersPermissionGroupResponse](
			httpClient,
			baseURL+OrgAssignUsersPermissionGroupProcedure,
			opts...,
		),
		revokeUsersPermissionGroup: connect_go.NewClient[org.RevokeUsersPermissionGroupRequest, org.RevokeUsersPermissionGroupResponse](
			httpClient,
			baseURL+OrgRevokeUsersPermissionGroupProcedure,
			opts...,
		),
		assignLabels: connect_go.NewClient[org.AssignLabelsRequest, org.AssignLabelsResponse](
			httpClient,
			baseURL+OrgAssignLabelsProcedure,
			opts...,
		),
		revokeLabels: connect_go.NewClient[org.RevokeLabelsRequest, org.RevokeLabelsResponse](
			httpClient,
			baseURL+OrgRevokeLabelsProcedure,
			opts...,
		),
		assignAccountOwnerPermissionToUser: connect_go.NewClient[org.AssignAccountOwnerPermissionToUserRequest, org.AssignAccountOwnerPermissionToUserResponse](
			httpClient,
			baseURL+OrgAssignAccountOwnerPermissionToUserProcedure,
			opts...,
		),
		revokeAccountOwnerPermissionFromUser: connect_go.NewClient[org.RevokeAccountOwnerPermissionFromUserRequest, org.RevokeAccountOwnerPermissionFromUserResponse](
			httpClient,
			baseURL+OrgRevokeAccountOwnerPermissionFromUserProcedure,
			opts...,
		),
		initDefaultPermissionGroups: connect_go.NewClient[org.InitDefaultPermissionGroupsRequest, org.InitDefaultPermissionGroupsResponse](
			httpClient,
			baseURL+OrgInitDefaultPermissionGroupsProcedure,
			opts...,
		),
		getAccountOwnerGroup: connect_go.NewClient[org.GetAccountOwnerGroupRequest, org.GetAccountOwnerGroupResponse](
			httpClient,
			baseURL+OrgGetAccountOwnerGroupProcedure,
			opts...,
		),
		getLicenses: connect_go.NewClient[org.GetLicensesRequest, org.GetLicensesResponse](
			httpClient,
			baseURL+OrgGetLicensesProcedure,
			opts...,
		),
		getOrgLicenses: connect_go.NewClient[org.GetOrgLicensesRequest, org.GetOrgLicensesResponse](
			httpClient,
			baseURL+OrgGetOrgLicensesProcedure,
			opts...,
		),
		updateLicenses: connect_go.NewClient[org.UpdateLicensesRequest, org.UpdateLicensesResponse](
			httpClient,
			baseURL+OrgUpdateLicensesProcedure,
			opts...,
		),
		removePermissionFromAllPermissionGroups: connect_go.NewClient[org.RemovePermissionFromAllPermissionGroupsRequest, org.RemovePermissionFromAllPermissionGroupsResponse](
			httpClient,
			baseURL+OrgRemovePermissionFromAllPermissionGroupsProcedure,
			opts...,
		),
		listP3PermissionGroups: connect_go.NewClient[org.ListP3PermissionGroupsRequest, org.ListP3PermissionGroupsResponse](
			httpClient,
			baseURL+OrgListP3PermissionGroupsProcedure,
			opts...,
		),
		listP3PermissionGroupsByOrgId: connect_go.NewClient[org.ListP3PermissionGroupsRequest, org.ListP3PermissionGroupsResponse](
			httpClient,
			baseURL+OrgListP3PermissionGroupsByOrgIdProcedure,
			opts...,
		),
		createP3PermissionGroup: connect_go.NewClient[org.CreateP3PermissionGroupRequest, org.CreateP3PermissionGroupResponse](
			httpClient,
			baseURL+OrgCreateP3PermissionGroupProcedure,
			opts...,
		),
		updateP3PermissionGroup: connect_go.NewClient[org.UpdateP3PermissionGroupRequest, org.UpdateP3PermissionGroupResponse](
			httpClient,
			baseURL+OrgUpdateP3PermissionGroupProcedure,
			opts...,
		),
		updateP3PermissionGroupByOrgId: connect_go.NewClient[org.UpdateP3PermissionGroupByOrgIdRequest, org.UpdateP3PermissionGroupByOrgIdResponse](
			httpClient,
			baseURL+OrgUpdateP3PermissionGroupByOrgIdProcedure,
			opts...,
		),
		deleteP3PermissionGroup: connect_go.NewClient[org.DeleteP3PermissionGroupRequest, org.DeleteP3PermissionGroupResponse](
			httpClient,
			baseURL+OrgDeleteP3PermissionGroupProcedure,
			opts...,
		),
		assignUsersP3PermissionGroup: connect_go.NewClient[org.AssignUsersP3PermissionGroupRequest, org.AssignUsersP3PermissionGroupResponse](
			httpClient,
			baseURL+OrgAssignUsersP3PermissionGroupProcedure,
			opts...,
		),
		revokeUsersP3PermissionGroup: connect_go.NewClient[org.RevokeUsersP3PermissionGroupRequest, org.RevokeUsersP3PermissionGroupResponse](
			httpClient,
			baseURL+OrgRevokeUsersP3PermissionGroupProcedure,
			opts...,
		),
		refreshMfaLockout: connect_go.NewClient[org.RefreshMfaLockoutRequest, org.RefreshMfaLockoutResponse](
			httpClient,
			baseURL+OrgRefreshMfaLockoutProcedure,
			opts...,
		),
		refreshMfaLockoutByOrgId: connect_go.NewClient[org.RefreshMfaLockoutByOrgIdRequest, org.RefreshMfaLockoutByOrgIdResponse](
			httpClient,
			baseURL+OrgRefreshMfaLockoutByOrgIdProcedure,
			opts...,
		),
		setMfaType: connect_go.NewClient[org.SetMfaTypeRequest, org.SetMfaTypeResponse](
			httpClient,
			baseURL+OrgSetMfaTypeProcedure,
			opts...,
		),
		setMyMfaType: connect_go.NewClient[org.SetMyMfaTypeRequest, org.SetMyMfaTypeResponse](
			httpClient,
			baseURL+OrgSetMyMfaTypeProcedure,
			opts...,
		),
		enableUserMfa: connect_go.NewClient[org.EnableUserMfaRequest, org.EnableUserMfaResponse](
			httpClient,
			baseURL+OrgEnableUserMfaProcedure,
			opts...,
		),
		enableMyUserMfa: connect_go.NewClient[org.EnableMyUserMfaRequest, org.EnableMyUserMfaResponse](
			httpClient,
			baseURL+OrgEnableMyUserMfaProcedure,
			opts...,
		),
		getUserMfaInfo: connect_go.NewClient[org.GetUserMfaInfoRequest, org.GetUserMfaInfoResponse](
			httpClient,
			baseURL+OrgGetUserMfaInfoProcedure,
			opts...,
		),
		getMyUserMfaInfo: connect_go.NewClient[org.GetMyUserMfaInfoRequest, org.GetMyUserMfaInfoResponse](
			httpClient,
			baseURL+OrgGetMyUserMfaInfoProcedure,
			opts...,
		),
		getMyAllowedMfaMethods: connect_go.NewClient[org.GetMyAllowedMfaMethodsRequest, org.GetMyAllowedMfaMethodsResponse](
			httpClient,
			baseURL+OrgGetMyAllowedMfaMethodsProcedure,
			opts...,
		),
		createBusinessHours: connect_go.NewClient[org.CreateBusinessHoursRequest, org.CreateBusinessHoursResponse](
			httpClient,
			baseURL+OrgCreateBusinessHoursProcedure,
			opts...,
		),
		updateBusinessHours: connect_go.NewClient[org.UpdateBusinessHoursRequest, org.UpdateBusinessHoursResponse](
			httpClient,
			baseURL+OrgUpdateBusinessHoursProcedure,
			opts...,
		),
		addGroupedUserIPRestrictions: connect_go.NewClient[org.AddGroupedUserIPRestrictionsRequest, org.AddGroupedUserIPRestrictionsResponse](
			httpClient,
			baseURL+OrgAddGroupedUserIPRestrictionsProcedure,
			opts...,
		),
		removeGroupedUserIPRestrictions: connect_go.NewClient[org.RemoveGroupedUserIPRestrictionsRequest, org.RemoveGroupedUserIPRestrictionsResponse](
			httpClient,
			baseURL+OrgRemoveGroupedUserIPRestrictionsProcedure,
			opts...,
		),
		listUsersAllowedIps: connect_go.NewClient[org.ListUsersAllowedIpsRequest, org.ListUsersAllowedIpsResponse](
			httpClient,
			baseURL+OrgListUsersAllowedIpsProcedure,
			opts...,
		),
	}
}

// orgClient implements OrgClient.
type orgClient struct {
	createOrganization                       *connect_go.Client[org.CreateOrganizationRequest, org.CreateOrganizationResponse]
	getOrganization                          *connect_go.Client[org.GetOrganizationRequest, org.GetOrganizationResponse]
	getOrganizationById                      *connect_go.Client[org.GetOrganizationByIdRequest, org.GetOrganizationByIdResponse]
	updateOrganization                       *connect_go.Client[org.UpdateOrganizationRequest, org.UpdateOrganizationResponse]
	archiveOrganization                      *connect_go.Client[org.ArchiveOrganizationRequest, org.ArchiveOrganizationResponse]
	unArchiveOrganization                    *connect_go.Client[org.UnArchiveOrganizationRequest, org.UnArchiveOrganizationResponse]
	listAllOrganizationsGlobally             *connect_go.Client[org.ListAllOrganizationsGloballyRequest, org.ListAllOrganizationsGloballyResponse]
	listOrganizationsByRegion                *connect_go.Client[org.ListOrganizationsByRegionRequest, org.ListOrganizationsByRegionResponse]
	listArchivedOrganizations                *connect_go.Client[org.ListArchivedOrganizationsRequest, org.ListArchivedOrganizationsResponse]
	convertOrgToManual                       *connect_go.Client[org.ConvertOrgToManualRequest, org.ConvertOrgToManualResponse]
	listOwnedOrgs                            *connect_go.Client[org.ListOwnedOrgsRequest, org.ListOwnedOrgsResponse]
	getOrganizationPreferences               *connect_go.Client[org.GetOrganizationPreferencesRequest, org.GetOrganizationPreferencesResponse]
	updateOrganizationPreferences            *connect_go.Client[org.UpdateOrganizationPreferencesRequest, org.UpdateOrganizationPreferencesResponse]
	getAgentPreferences                      *connect_go.Client[org.GetAgentPreferencesRequest, org.GetAgentPreferencesResponse]
	updateAgentPreferences                   *connect_go.Client[org.UpdateAgentPreferencesRequest, org.UpdateAgentPreferencesResponse]
	getContactPreferences                    *connect_go.Client[org.GetContactPreferencesRequest, org.GetContactPreferencesResponse]
	updateContactPreferences                 *connect_go.Client[org.UpdateContactPreferencesRequest, org.UpdateContactPreferencesResponse]
	getAuthenticationPreferences             *connect_go.Client[org.GetAuthenticationPreferencesRequest, org.GetAuthenticationPreferencesResponse]
	updateAuthenticationPreferences          *connect_go.Client[org.UpdateAuthenticationPreferencesRequest, org.UpdateAuthenticationPreferencesResponse]
	getWebhookPreferences                    *connect_go.Client[org.GetWebhookPreferencesRequest, org.GetWebhookPreferencesResponse]
	updateWebhookPreferences                 *connect_go.Client[org.UpdateWebhookPreferencesRequest, org.UpdateWebhookPreferencesResponse]
	getDashboardGeneralPreferences           *connect_go.Client[org.GetDashboardGeneralPreferencesRequest, org.GetDashboardGeneralPreferencesResponse]
	updateDashboardGeneralPreferences        *connect_go.Client[org.UpdateDashboardGeneralPreferencesRequest, org.UpdateDashboardGeneralPreferencesResponse]
	getDashboardQueuePreferences             *connect_go.Client[org.GetDashboardQueuePreferencesRequest, org.GetDashboardQueuePreferencesResponse]
	updateDashboardQueuePreferences          *connect_go.Client[org.UpdateDashboardQueuePreferencesRequest, org.UpdateDashboardQueuePreferencesResponse]
	getPhonePreferences                      *connect_go.Client[org.GetPhonePreferencesRequest, org.GetPhonePreferencesResponse]
	updatePhonePreferences                   *connect_go.Client[org.UpdatePhonePreferencesRequest, org.UpdatePhonePreferencesResponse]
	getCompliancePreferences                 *connect_go.Client[org.GetCompliancePreferencesRequest, org.GetCompliancePreferencesResponse]
	updateCompliancePreferences              *connect_go.Client[org.UpdateCompliancePreferencesRequest, org.UpdateCompliancePreferencesResponse]
	getBroadcastPreferences                  *connect_go.Client[org.GetBroadcastPreferencesRequest, org.GetBroadcastPreferencesResponse]
	updateBroadcastPreferences               *connect_go.Client[org.UpdateBroadcastPreferencesRequest, org.UpdateBroadcastPreferencesResponse]
	getSchedulePreferences                   *connect_go.Client[org.GetSchedulePreferencesRequest, org.GetSchedulePreferencesResponse]
	updateSchedulePreferences                *connect_go.Client[org.UpdateSchedulePreferencesRequest, org.UpdateSchedulePreferencesResponse]
	getEmailSmsPreferences                   *connect_go.Client[org.GetEmailSmsPreferencesRequest, org.GetEmailSmsPreferencesResponse]
	updateEmailSmsPreferences                *connect_go.Client[org.UpdateEmailSmsPreferencesRequest, org.UpdateEmailSmsPreferencesResponse]
	getBusinessPreferences                   *connect_go.Client[org.GetBusinessPreferencesRequest, org.GetBusinessPreferencesResponse]
	updateBusinessPreferences                *connect_go.Client[org.UpdateBusinessPreferencesRequest, org.UpdateBusinessPreferencesResponse]
	updateAdminBusinessPreferences           *connect_go.Client[org.UpdateAdminBusinessPreferencesRequest, org.UpdateAdminBusinessPreferencesResponse]
	getScorecardsPreferences                 *connect_go.Client[org.GetScorecardsPreferencesRequest, org.GetScorecardsPreferencesResponse]
	updateScorecardsPreferences              *connect_go.Client[org.UpdateScorecardsPreferencesRequest, org.UpdateScorecardsPreferencesResponse]
	getVoiceAnalyticsPreferences             *connect_go.Client[org.GetVoiceAnalyticsPreferencesRequest, org.GetVoiceAnalyticsPreferencesResponse]
	listVoiceAnalyticsPreferences            *connect_go.Client[org.ListVoiceAnalyticsPreferencesRequest, org.ListVoiceAnalyticsPreferencesResponse]
	updateVoiceAnalyticsPreferences          *connect_go.Client[org.UpdateVoiceAnalyticsPreferencesRequest, org.UpdateVoiceAnalyticsPreferencesResponse]
	getEndOfDayPreferences                   *connect_go.Client[org.GetEndOfDayPreferencesRequest, org.GetEndOfDayPreferencesResponse]
	updateEndOfDayPreferences                *connect_go.Client[org.UpdateEndOfDayPreferencesRequest, org.UpdateEndOfDayPreferencesResponse]
	getReportFilterPreferences               *connect_go.Client[org.GetFilterPreferencesRequest, org.GetFilterPreferencesResponse]
	updateReportFilterPreferences            *connect_go.Client[org.UpdateFilterPreferencesRequest, org.UpdateFilterPreferencesResponse]
	getRecordingPreferences                  *connect_go.Client[org.GetRecordingPreferencesRequest, org.GetRecordingPreferencesResponse]
	updateRecordingPreferences               *connect_go.Client[org.UpdateRecordingPreferencesRequest, org.UpdateRecordingPreferencesResponse]
	getAdminClientPreferences                *connect_go.Client[org.GetAdminClientPreferencesRequest, org.GetAdminClientPreferencesResponse]
	updateAdminClientPreferences             *connect_go.Client[org.UpdateAdminClientPreferencesRequest, org.UpdateAdminClientPreferencesResponse]
	acceptLinkbackRecordingTerms             *connect_go.Client[org.AcceptLinkbackRecordingTermsRequest, org.AcceptLinkbackRecordingTermsResponse]
	linkbackUpdateBroadcastTemplates         *connect_go.Client[org.LinkbackUpdateBroadcastTemplatesRequest, org.LinkbackUpdateBroadcastTemplatesResponse]
	recordEmailUnsubscribeAcknowledgement    *connect_go.Client[org.RecordEmailUnsubscribeAcknowledgementRequest, org.RecordEmailUnsubscribeAcknowledgementResponse]
	clearEmailUnsubscribeAcknowledgement     *connect_go.Client[org.ClearEmailUnsubscribeAcknowledgementRequest, org.ClearEmailUnsubscribeAcknowledgementResponse]
	listBusinessHours                        *connect_go.Client[org.ListBusinessHoursRequest, org.ListBusinessHoursResponse]
	getBusinessHours                         *connect_go.Client[org.GetBusinessHoursRequest, org.GetBusinessHoursResponse]
	setBusinessHours                         *connect_go.Client[org.SetBusinessHoursRequest, org.SetBusinessHoursResponse]
	addIntervalToBusinessHours               *connect_go.Client[org.AddIntervalToBusinessHoursRequest, org.AddIntervalToBusinessHoursResponse]
	removeIntervalFromBusinessHours          *connect_go.Client[org.RemoveIntervalFromBusinessHoursRequest, org.RemoveIntervalFromBusinessHoursResponse]
	updateBusinessHoursInfo                  *connect_go.Client[org.UpdateBusinessHoursInfoRequest, org.UpdateBusinessHoursInfoResponse]
	deleteBusinessHours                      *connect_go.Client[org.DeleteBusinessHoursRequest, org.DeleteBusinessHoursResponse]
	evaluateBusinessHours                    *connect_go.Client[org.EvaluateBusinessHoursRequest, org.EvaluateBusinessHoursResponse]
	createUser                               *connect_go.Client[org.CreateUserRequest, org.CreateUserResponse]
	createDelegatedUser                      *connect_go.Client[org.CreateDelegatedUserRequest, org.CreateDelegatedUserResponse]
	getMyUser                                *connect_go.Client[org.GetMyUserRequest, org.GetMyUserResponse]
	getUser                                  *connect_go.Client[org.GetUserRequest, org.GetUserResponse]
	getUserByOrgId                           *connect_go.Client[org.GetUserByOrgIdRequest, org.GetUserByOrgIdResponse]
	listAgents                               *connect_go.Client[org.ListAgentsRequest, org.ListAgentsResponse]
	listPublicUsers                          *connect_go.Client[org.ListPublicUsersRequest, org.ListPublicUsersResponse]
	listUsers                                *connect_go.Client[org.ListUsersRequest, org.ListUsersResponse]
	listUsersByOrgId                         *connect_go.Client[org.ListUsersByOrgIdRequest, org.ListUsersByOrgIdResponse]
	listUsersByRegion                        *connect_go.Client[org.ListUsersByRegionRequest, org.ListUsersByRegionResponse]
	updateMyUser                             *connect_go.Client[org.UpdateMyUserRequest, org.UpdateMyUserResponse]
	updateUser                               *connect_go.Client[org.UpdateUserRequest, org.UpdateUserResponse]
	updateUserLabels                         *connect_go.Client[org.UpdateUserLabelsRequest, org.UpdateUserLabelsResponse]
	updateUserCallerId                       *connect_go.Client[org.UpdateUserCallerIdRequest, org.UpdateUserCallerIdResponse]
	updateUserDisabled                       *connect_go.Client[org.UpdateUserDisabledRequest, org.UpdateUserDisabledResponse]
	updateUserDisabledByOrgId                *connect_go.Client[org.UpdateUserDisabledByOrgIdRequest, org.UpdateUserDisabledByOrgIdResponse]
	getMyUserPasswordResetLink               *connect_go.Client[org.GetMyUserPasswordResetLinkRequest, org.GetMyUserPasswordResetLinkResponse]
	getUserPasswordResetLink                 *connect_go.Client[org.GetUserPasswordResetLinkRequest, org.GetUserPasswordResetLinkResponse]
	getUserPasswordResetLinkByOrgId          *connect_go.Client[org.GetUserPasswordResetLinkByOrgIdRequest, org.GetUserPasswordResetLinkByOrgIdResponse]
	createPasswordResetLink                  *connect_go.Client[org.CreatePasswordResetLinkRequest, org.CreatePasswordResetLinkResponse]
	createPasswordResetLinkByOrgId           *connect_go.Client[org.CreatePasswordResetLinkByOrgIdRequest, org.CreatePasswordResetLinkByOrgIdResponse]
	getUserLoginInfo                         *connect_go.Client[org.GetUserLoginInfoRequest, org.GetUserLoginInfoResponse]
	getUserEmailVerified                     *connect_go.Client[org.GetUserEmailVerifiedRequest, org.GetUserEmailVerifiedResponse]
	getUserEmailVerifiedByOrgId              *connect_go.Client[org.GetUserEmailVerifiedByOrgIdRequest, org.GetUserEmailVerifiedByOrgIdResponse]
	resetMyPassword                          *connect_go.Client[org.ResetMyPasswordRequest, org.ResetMyPasswordResponse]
	resetUserPassword                        *connect_go.Client[org.ResetUserPasswordRequest, org.ResetUserPasswordResponse]
	resetUserPasswordByOrgId                 *connect_go.Client[org.ResetUserPasswordByOrgIdRequest, org.ResetUserPasswordByOrgIdResponse]
	sendUserEmailVerification                *connect_go.Client[org.SendUserEmailVerificationRequest, org.SendUserEmailVerificationResponse]
	sendUserEmailVerificationByOrgId         *connect_go.Client[org.SendUserEmailVerificationByOrgIdRequest, org.SendUserEmailVerificationByOrgIdResponse]
	sendPasswordReset                        *connect_go.Client[org.SendPasswordResetRequest, org.SendPasswordResetResponse]
	sendPasswordResetByOrgId                 *connect_go.Client[org.SendPasswordResetByOrgIdRequest, org.SendPasswordResetByOrgIdResponse]
	getUserSessionData                       *connect_go.Client[org.GetUserSessionDataRequest, org.GetUserSessionDataResponse]
	getAgentProfileGroup                     *connect_go.Client[org.GetAgentProfileGroupRequest, org.GetAgentProfileGroupResponse]
	listAgentProfileGroups                   *connect_go.Client[org.ListAgentProfileGroupsRequest, org.ListAgentProfileGroupsResponse]
	updateAgentProfileGroup                  *connect_go.Client[org.UpdateAgentProfileGroupRequest, org.UpdateAgentProfileGroupResponse]
	createAgentProfileGroup                  *connect_go.Client[org.CreateAgentProfileGroupRequest, org.CreateAgentProfileGroupResponse]
	deleteAgentProfileGroup                  *connect_go.Client[org.DeleteAgentProfileGroupRequest, org.DeleteAgentProfileGroupResponse]
	assignAgentProfileGroups                 *connect_go.Client[org.AssignAgentProfileGroupsRequest, org.AssignAgentProfileGroupsResponse]
	addUserSubscription                      *connect_go.Client[org.AddUserSubscriptionRequest, org.AddUserSubscriptionResponse]
	addUserSubscriptionByUserId              *connect_go.Client[org.AddUserSubscriptionByUserIdRequest, org.AddUserSubscriptionByUserIdResponse]
	getUserSubscription                      *connect_go.Client[org.GetUserSubscriptionRequest, org.GetUserSubscriptionResponse]
	getUserSubscriptionByUserId              *connect_go.Client[org.GetUserSubscriptionByUserIdRequest, org.GetUserSubscriptionByUserIdResponse]
	updateUserSubscription                   *connect_go.Client[org.UpdateUserSubscriptionRequest, org.UpdateUserSubscriptionResponse]
	updateUserSubscriptionByUserId           *connect_go.Client[org.UpdateUserSubscriptionByUserIdRequest, org.UpdateUserSubscriptionByUserIdResponse]
	removeUserSubscription                   *connect_go.Client[org.RemoveUserSubscriptionRequest, org.RemoveUserSubscriptionResponse]
	removeUserSubscriptionByUserId           *connect_go.Client[org.RemoveUserSubscriptionByUserIdRequest, org.RemoveUserSubscriptionByUserIdResponse]
	listUserSubscriptions                    *connect_go.Client[org.ListUserSubscriptionsRequest, org.ListUserSubscriptionsResponse]
	listUserSubscriptionsByUserId            *connect_go.Client[org.ListUserSubscriptionsByUserIdRequest, org.ListUserSubscriptionsByUserIdResponse]
	listOrgSubscriptions                     *connect_go.Client[org.ListOrgSubscriptionsRequest, org.ListOrgSubscriptionsResponse]
	createAuthToken                          *connect_go.Client[org.CreateAuthTokenRequest, org.CreateAuthTokenResponse]
	createAuthTokenByUserId                  *connect_go.Client[org.CreateAuthTokenByUserIdRequest, org.CreateAuthTokenByUserIdResponse]
	listAuthTokens                           *connect_go.Client[org.ListAuthTokensRequest, org.ListAuthTokensResponse]
	listAuthTokensByUserId                   *connect_go.Client[org.ListAuthTokensByUserIdRequest, org.ListAuthTokensByUserIdResponse]
	setAuthTokenExpiration                   *connect_go.Client[org.SetAuthTokenExpirationRequest, org.SetAuthTokenExpirationResponse]
	setAuthTokenExpirationByUserId           *connect_go.Client[org.SetAuthTokenExpirationByUserIdRequest, org.SetAuthTokenExpirationByUserIdResponse]
	deleteAuthToken                          *connect_go.Client[org.DeleteAuthTokenRequest, org.DeleteAuthTokenResponse]
	deleteAuthTokenByUserId                  *connect_go.Client[org.DeleteAuthTokenByUserIdRequest, org.DeleteAuthTokenByUserIdResponse]
	getHuntGroupSettings                     *connect_go.Client[org.GetHuntGroupSettingsRequest, org.GetHuntGroupSettingsResponse]
	updateHuntGroupSettings                  *connect_go.Client[org.UpdateHuntGroupSettingsRequest, org.UpdateHuntGroupSettingsResponse]
	createHuntGroup                          *connect_go.Client[org.CreateHuntGroupRequest, org.CreateHuntGroupResponse]
	updateHuntGroupGeneralDetails            *connect_go.Client[org.UpdateHuntGroupGeneralDetailsRequest, org.UpdateHuntGroupGeneralDetailsResponse]
	deleteHuntGroup                          *connect_go.Client[org.DeleteHuntGroupRequest, org.DeleteHuntGroupResponse]
	getHuntGroupDetails                      *connect_go.Client[org.GetHuntGroupDetailsRequest, org.GetHuntGroupDetailsResponse]
	listCallerIdBuckets                      *connect_go.Client[org.ListCallerIdBucketsRequest, org.ListCallerIdBucketsResponse]
	getDataDipTemplate                       *connect_go.Client[org.GetDataDipTemplateRequest, org.GetDataDipTemplateResponse]
	listDataDipTemplates                     *connect_go.Client[org.ListDataDipTemplatesRequest, org.ListDataDipTemplatesResponse]
	createDataDipTemplate                    *connect_go.Client[org.CreateDataDipTemplateRequest, org.CreateDataDipTemplateResponse]
	updateDataDipTemplate                    *connect_go.Client[org.UpdateDataDipTemplateRequest, org.UpdateDataDipTemplateResponse]
	deleteDataDipTemplate                    *connect_go.Client[org.DeleteDataDipTemplateRequest, org.DeleteDataDipTemplateResponse]
	copyDataDipTemplate                      *connect_go.Client[org.CopyDataDipTemplateRequest, org.CopyDataDipTemplateResponse]
	copyDataDipTemplateToOrganization        *connect_go.Client[org.CopyDataDipTemplateToOrganizationRequest, org.CopyDataDipTemplateToOrganizationResponse]
	listBroadcastTemplateGeneralDetails      *connect_go.Client[org.ListBroadcastTemplateGeneralDetailsRequest, org.ListBroadcastTemplateGeneralDetailsResponse]
	listAgentResponseAutoRules               *connect_go.Client[org.ListAgentResponseAutoRulesRequest, org.ListAgentResponseAutoRulesResponse]
	createAgentResponseAutoRules             *connect_go.Client[org.CreateAgentResponseAutoRulesRequest, org.CreateAgentResponseAutoRulesResponse]
	updateAgentResponseAutoRules             *connect_go.Client[org.UpdateAgentResponseAutoRulesRequest, org.UpdateAgentResponseAutoRulesResponse]
	deleteAgentResponseAutoRules             *connect_go.Client[org.DeleteAgentResponseAutoRulesRequest, org.DeleteAgentResponseAutoRulesResponse]
	listHuntGroupWebLinks                    *connect_go.Client[org.ListHuntGroupWebLinksRequest, org.ListHuntGroupWebLinksResponse]
	copyHuntGroupWebLink                     *connect_go.Client[org.CopyHuntGroupWebLinkRequest, org.CopyHuntGroupWebLinkResponse]
	updateHuntGroupWebLinks                  *connect_go.Client[org.UpdateHuntGroupWebLinksRequest, org.UpdateHuntGroupWebLinksResponse]
	listHuntGroupIntegrationLinks            *connect_go.Client[org.ListHuntGroupIntegrationLinksRequest, org.ListHuntGroupIntegrationLinksResponse]
	copyHuntGroupIntegrationLink             *connect_go.Client[org.CopyHuntGroupIntegrationLinkRequest, org.CopyHuntGroupIntegrationLinkResponse]
	updateHuntGroupIntegrationLinks          *connect_go.Client[org.UpdateHuntGroupIntegrationLinksRequest, org.UpdateHuntGroupIntegrationLinksResponse]
	getHuntGroupClientInfoDisplayTemplate    *connect_go.Client[org.GetHuntGroupClientInfoDisplayTemplateRequest, org.GetHuntGroupClientInfoDisplayTemplateResponse]
	createHuntGroupClientInfoDisplayTemplate *connect_go.Client[org.CreateHuntGroupClientInfoDisplayTemplateRequest, org.CreateHuntGroupClientInfoDisplayTemplateResponse]
	updateHuntGroupClientInfoDisplayTemplate *connect_go.Client[org.UpdateHuntGroupClientInfoDisplayTemplateRequest, org.UpdateHuntGroupClientInfoDisplayTemplateResponse]
	deleteHuntGroupClientInfoDisplayTemplate *connect_go.Client[org.DeleteHuntGroupClientInfoDisplayTemplateRequest, org.DeleteHuntGroupClientInfoDisplayTemplateResponse]
	copyHuntGroupClientInfoDisplayTemplate   *connect_go.Client[org.CopyHuntGroupClientInfoDisplayTemplateRequest, org.CopyHuntGroupClientInfoDisplayTemplateResponse]
	createCampaignClientInfoDisplayTemplate  *connect_go.Client[org.CreateCampaignClientInfoDisplayTemplateRequest, org.CreateCampaignClientInfoDisplayTemplateResponse]
	listHuntGroupsWithClientInfoTemplateData *connect_go.Client[org.ListHuntGroupsWithClientInfoTemplateDataRequest, org.ListHuntGroupsWithClientInfoTemplateDataResponse]
	listAgentTriggers                        *connect_go.Client[org.ListAgentTriggersRequest, org.ListAgentTriggersResponse]
	copyAgentTrigger                         *connect_go.Client[org.CopyAgentTriggerRequest, org.CopyAgentTriggerResponse]
	updateAgentTriggers                      *connect_go.Client[org.UpdateAgentTriggersRequest, org.UpdateAgentTriggersResponse]
	listHuntGroupScripts                     *connect_go.Client[org.ListHuntGroupScriptsRequest, org.ListHuntGroupScriptsResponse]
	getHuntGroupScript                       *connect_go.Client[org.GetHuntGroupScriptRequest, org.GetHuntGroupScriptResponse]
	createHuntGroupScript                    *connect_go.Client[org.CreateHuntGroupScriptRequest, org.CreateHuntGroupScriptResponse]
	updateHuntGroupScript                    *connect_go.Client[org.UpdateHuntGroupScriptRequest, org.UpdateHuntGroupScriptResponse]
	deleteHuntGroupScript                    *connect_go.Client[org.DeleteHuntGroupScriptRequest, org.DeleteHuntGroupScriptResponse]
	assignScriptToHuntGroups                 *connect_go.Client[org.AssignScriptToHuntGroupsRequest, org.AssignScriptToHuntGroupsResponse]
	unassignScriptFromHuntGroups             *connect_go.Client[org.UnassignScriptFromHuntGroupsRequest, org.UnassignScriptFromHuntGroupsResponse]
	createTrust                              *connect_go.Client[org.CreateTrustRequest, org.CreateTrustResponse]
	acceptTrust                              *connect_go.Client[org.AcceptTrustRequest, org.AcceptTrustResponse]
	rejectTrust                              *connect_go.Client[org.RejectTrustRequest, org.RejectTrustResponse]
	getTrust                                 *connect_go.Client[org.GetTrustRequest, org.GetTrustResponse]
	listIncomingTrusts                       *connect_go.Client[org.ListIncomingTrustsRequest, org.ListIncomingTrustsResponse]
	listGivenTrusts                          *connect_go.Client[org.ListGivenTrustsRequest, org.ListGivenTrustsResponse]
	listAssignableTrusts                     *connect_go.Client[org.ListAssignableTrustsRequest, org.ListAssignableTrustsResponse]
	deleteTrust                              *connect_go.Client[org.DeleteTrustRequest, org.DeleteTrustResponse]
	assignTrust                              *connect_go.Client[org.AssignTrustRequest, org.AssignTrustResponse]
	unassignTrust                            *connect_go.Client[org.UnassignTrustRequest, org.UnassignTrustResponse]
	createLabel                              *connect_go.Client[org.CreateLabelRequest, org.CreateLabelResponse]
	deleteLabel                              *connect_go.Client[org.DeleteLabelRequest, org.DeleteLabelResponse]
	listLabels                               *connect_go.Client[org.ListLabelsRequest, org.ListLabelsResponse]
	getLabel                                 *connect_go.Client[org.GetLabelRequest, org.GetLabelResponse]
	updateLabel                              *connect_go.Client[org.UpdateLabelRequest, org.UpdateLabelResponse]
	assignLabel                              *connect_go.Client[org.AssignLabelRequest, org.AssignLabelResponse]
	unassignLabel                            *connect_go.Client[org.UnassignLabelRequest, org.UnassignLabelResponse]
	getAssignmentCounts                      *connect_go.Client[org.GetAssignmentCountsRequest, org.GetAssignmentCountsResponse]
	getAssignableLabels                      *connect_go.Client[org.GetAssignableLabelsRequest, org.GetAssignableLabelsResponse]
	getPermissions                           *connect_go.Client[org.GetPermissionsRequest, org.GetPermissionsResponse]
	getUserPermissions                       *connect_go.Client[org.GetUserPermissionsRequest, org.GetUserPermissionsResponse]
	createPermissionGroup                    *connect_go.Client[org.CreatePermissionGroupRequest, org.CreatePermissionGroupResponse]
	updatePermissionGroup                    *connect_go.Client[org.UpdatePermissionGroupRequest, org.UpdatePermissionGroupResponse]
	deletePermissionGroup                    *connect_go.Client[org.DeletePermissionGroupRequest, org.DeletePermissionGroupResponse]
	listPermissionGroups                     *connect_go.Client[org.ListPermissionGroupsRequest, org.ListPermissionGroupsResponse]
	listPermissionGroupsByOrgId              *connect_go.Client[org.ListPermissionGroupsByOrgIdRequest, org.ListPermissionGroupsByOrgIdResponse]
	assignUsersPermissionGroup               *connect_go.Client[org.AssignUsersPermissionGroupRequest, org.AssignUsersPermissionGroupResponse]
	revokeUsersPermissionGroup               *connect_go.Client[org.RevokeUsersPermissionGroupRequest, org.RevokeUsersPermissionGroupResponse]
	assignLabels                             *connect_go.Client[org.AssignLabelsRequest, org.AssignLabelsResponse]
	revokeLabels                             *connect_go.Client[org.RevokeLabelsRequest, org.RevokeLabelsResponse]
	assignAccountOwnerPermissionToUser       *connect_go.Client[org.AssignAccountOwnerPermissionToUserRequest, org.AssignAccountOwnerPermissionToUserResponse]
	revokeAccountOwnerPermissionFromUser     *connect_go.Client[org.RevokeAccountOwnerPermissionFromUserRequest, org.RevokeAccountOwnerPermissionFromUserResponse]
	initDefaultPermissionGroups              *connect_go.Client[org.InitDefaultPermissionGroupsRequest, org.InitDefaultPermissionGroupsResponse]
	getAccountOwnerGroup                     *connect_go.Client[org.GetAccountOwnerGroupRequest, org.GetAccountOwnerGroupResponse]
	getLicenses                              *connect_go.Client[org.GetLicensesRequest, org.GetLicensesResponse]
	getOrgLicenses                           *connect_go.Client[org.GetOrgLicensesRequest, org.GetOrgLicensesResponse]
	updateLicenses                           *connect_go.Client[org.UpdateLicensesRequest, org.UpdateLicensesResponse]
	removePermissionFromAllPermissionGroups  *connect_go.Client[org.RemovePermissionFromAllPermissionGroupsRequest, org.RemovePermissionFromAllPermissionGroupsResponse]
	listP3PermissionGroups                   *connect_go.Client[org.ListP3PermissionGroupsRequest, org.ListP3PermissionGroupsResponse]
	listP3PermissionGroupsByOrgId            *connect_go.Client[org.ListP3PermissionGroupsRequest, org.ListP3PermissionGroupsResponse]
	createP3PermissionGroup                  *connect_go.Client[org.CreateP3PermissionGroupRequest, org.CreateP3PermissionGroupResponse]
	updateP3PermissionGroup                  *connect_go.Client[org.UpdateP3PermissionGroupRequest, org.UpdateP3PermissionGroupResponse]
	updateP3PermissionGroupByOrgId           *connect_go.Client[org.UpdateP3PermissionGroupByOrgIdRequest, org.UpdateP3PermissionGroupByOrgIdResponse]
	deleteP3PermissionGroup                  *connect_go.Client[org.DeleteP3PermissionGroupRequest, org.DeleteP3PermissionGroupResponse]
	assignUsersP3PermissionGroup             *connect_go.Client[org.AssignUsersP3PermissionGroupRequest, org.AssignUsersP3PermissionGroupResponse]
	revokeUsersP3PermissionGroup             *connect_go.Client[org.RevokeUsersP3PermissionGroupRequest, org.RevokeUsersP3PermissionGroupResponse]
	refreshMfaLockout                        *connect_go.Client[org.RefreshMfaLockoutRequest, org.RefreshMfaLockoutResponse]
	refreshMfaLockoutByOrgId                 *connect_go.Client[org.RefreshMfaLockoutByOrgIdRequest, org.RefreshMfaLockoutByOrgIdResponse]
	setMfaType                               *connect_go.Client[org.SetMfaTypeRequest, org.SetMfaTypeResponse]
	setMyMfaType                             *connect_go.Client[org.SetMyMfaTypeRequest, org.SetMyMfaTypeResponse]
	enableUserMfa                            *connect_go.Client[org.EnableUserMfaRequest, org.EnableUserMfaResponse]
	enableMyUserMfa                          *connect_go.Client[org.EnableMyUserMfaRequest, org.EnableMyUserMfaResponse]
	getUserMfaInfo                           *connect_go.Client[org.GetUserMfaInfoRequest, org.GetUserMfaInfoResponse]
	getMyUserMfaInfo                         *connect_go.Client[org.GetMyUserMfaInfoRequest, org.GetMyUserMfaInfoResponse]
	getMyAllowedMfaMethods                   *connect_go.Client[org.GetMyAllowedMfaMethodsRequest, org.GetMyAllowedMfaMethodsResponse]
	createBusinessHours                      *connect_go.Client[org.CreateBusinessHoursRequest, org.CreateBusinessHoursResponse]
	updateBusinessHours                      *connect_go.Client[org.UpdateBusinessHoursRequest, org.UpdateBusinessHoursResponse]
	addGroupedUserIPRestrictions             *connect_go.Client[org.AddGroupedUserIPRestrictionsRequest, org.AddGroupedUserIPRestrictionsResponse]
	removeGroupedUserIPRestrictions          *connect_go.Client[org.RemoveGroupedUserIPRestrictionsRequest, org.RemoveGroupedUserIPRestrictionsResponse]
	listUsersAllowedIps                      *connect_go.Client[org.ListUsersAllowedIpsRequest, org.ListUsersAllowedIpsResponse]
}

// CreateOrganization calls api.v1alpha1.org.Org.CreateOrganization.
func (c *orgClient) CreateOrganization(ctx context.Context, req *connect_go.Request[org.CreateOrganizationRequest]) (*connect_go.Response[org.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// GetOrganization calls api.v1alpha1.org.Org.GetOrganization.
func (c *orgClient) GetOrganization(ctx context.Context, req *connect_go.Request[org.GetOrganizationRequest]) (*connect_go.Response[org.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// GetOrganizationById calls api.v1alpha1.org.Org.GetOrganizationById.
func (c *orgClient) GetOrganizationById(ctx context.Context, req *connect_go.Request[org.GetOrganizationByIdRequest]) (*connect_go.Response[org.GetOrganizationByIdResponse], error) {
	return c.getOrganizationById.CallUnary(ctx, req)
}

// UpdateOrganization calls api.v1alpha1.org.Org.UpdateOrganization.
func (c *orgClient) UpdateOrganization(ctx context.Context, req *connect_go.Request[org.UpdateOrganizationRequest]) (*connect_go.Response[org.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// ArchiveOrganization calls api.v1alpha1.org.Org.ArchiveOrganization.
func (c *orgClient) ArchiveOrganization(ctx context.Context, req *connect_go.Request[org.ArchiveOrganizationRequest]) (*connect_go.Response[org.ArchiveOrganizationResponse], error) {
	return c.archiveOrganization.CallUnary(ctx, req)
}

// UnArchiveOrganization calls api.v1alpha1.org.Org.UnArchiveOrganization.
func (c *orgClient) UnArchiveOrganization(ctx context.Context, req *connect_go.Request[org.UnArchiveOrganizationRequest]) (*connect_go.Response[org.UnArchiveOrganizationResponse], error) {
	return c.unArchiveOrganization.CallUnary(ctx, req)
}

// ListAllOrganizationsGlobally calls api.v1alpha1.org.Org.ListAllOrganizationsGlobally.
func (c *orgClient) ListAllOrganizationsGlobally(ctx context.Context, req *connect_go.Request[org.ListAllOrganizationsGloballyRequest]) (*connect_go.ServerStreamForClient[org.ListAllOrganizationsGloballyResponse], error) {
	return c.listAllOrganizationsGlobally.CallServerStream(ctx, req)
}

// ListOrganizationsByRegion calls api.v1alpha1.org.Org.ListOrganizationsByRegion.
func (c *orgClient) ListOrganizationsByRegion(ctx context.Context, req *connect_go.Request[org.ListOrganizationsByRegionRequest]) (*connect_go.ServerStreamForClient[org.ListOrganizationsByRegionResponse], error) {
	return c.listOrganizationsByRegion.CallServerStream(ctx, req)
}

// ListArchivedOrganizations calls api.v1alpha1.org.Org.ListArchivedOrganizations.
func (c *orgClient) ListArchivedOrganizations(ctx context.Context, req *connect_go.Request[org.ListArchivedOrganizationsRequest]) (*connect_go.ServerStreamForClient[org.ListArchivedOrganizationsResponse], error) {
	return c.listArchivedOrganizations.CallServerStream(ctx, req)
}

// ConvertOrgToManual calls api.v1alpha1.org.Org.ConvertOrgToManual.
func (c *orgClient) ConvertOrgToManual(ctx context.Context, req *connect_go.Request[org.ConvertOrgToManualRequest]) (*connect_go.Response[org.ConvertOrgToManualResponse], error) {
	return c.convertOrgToManual.CallUnary(ctx, req)
}

// ListOwnedOrgs calls api.v1alpha1.org.Org.ListOwnedOrgs.
func (c *orgClient) ListOwnedOrgs(ctx context.Context, req *connect_go.Request[org.ListOwnedOrgsRequest]) (*connect_go.ServerStreamForClient[org.ListOwnedOrgsResponse], error) {
	return c.listOwnedOrgs.CallServerStream(ctx, req)
}

// GetOrganizationPreferences calls api.v1alpha1.org.Org.GetOrganizationPreferences.
func (c *orgClient) GetOrganizationPreferences(ctx context.Context, req *connect_go.Request[org.GetOrganizationPreferencesRequest]) (*connect_go.Response[org.GetOrganizationPreferencesResponse], error) {
	return c.getOrganizationPreferences.CallUnary(ctx, req)
}

// UpdateOrganizationPreferences calls api.v1alpha1.org.Org.UpdateOrganizationPreferences.
func (c *orgClient) UpdateOrganizationPreferences(ctx context.Context, req *connect_go.Request[org.UpdateOrganizationPreferencesRequest]) (*connect_go.Response[org.UpdateOrganizationPreferencesResponse], error) {
	return c.updateOrganizationPreferences.CallUnary(ctx, req)
}

// GetAgentPreferences calls api.v1alpha1.org.Org.GetAgentPreferences.
func (c *orgClient) GetAgentPreferences(ctx context.Context, req *connect_go.Request[org.GetAgentPreferencesRequest]) (*connect_go.Response[org.GetAgentPreferencesResponse], error) {
	return c.getAgentPreferences.CallUnary(ctx, req)
}

// UpdateAgentPreferences calls api.v1alpha1.org.Org.UpdateAgentPreferences.
func (c *orgClient) UpdateAgentPreferences(ctx context.Context, req *connect_go.Request[org.UpdateAgentPreferencesRequest]) (*connect_go.Response[org.UpdateAgentPreferencesResponse], error) {
	return c.updateAgentPreferences.CallUnary(ctx, req)
}

// GetContactPreferences calls api.v1alpha1.org.Org.GetContactPreferences.
func (c *orgClient) GetContactPreferences(ctx context.Context, req *connect_go.Request[org.GetContactPreferencesRequest]) (*connect_go.Response[org.GetContactPreferencesResponse], error) {
	return c.getContactPreferences.CallUnary(ctx, req)
}

// UpdateContactPreferences calls api.v1alpha1.org.Org.UpdateContactPreferences.
func (c *orgClient) UpdateContactPreferences(ctx context.Context, req *connect_go.Request[org.UpdateContactPreferencesRequest]) (*connect_go.Response[org.UpdateContactPreferencesResponse], error) {
	return c.updateContactPreferences.CallUnary(ctx, req)
}

// GetAuthenticationPreferences calls api.v1alpha1.org.Org.GetAuthenticationPreferences.
func (c *orgClient) GetAuthenticationPreferences(ctx context.Context, req *connect_go.Request[org.GetAuthenticationPreferencesRequest]) (*connect_go.Response[org.GetAuthenticationPreferencesResponse], error) {
	return c.getAuthenticationPreferences.CallUnary(ctx, req)
}

// UpdateAuthenticationPreferences calls api.v1alpha1.org.Org.UpdateAuthenticationPreferences.
func (c *orgClient) UpdateAuthenticationPreferences(ctx context.Context, req *connect_go.Request[org.UpdateAuthenticationPreferencesRequest]) (*connect_go.Response[org.UpdateAuthenticationPreferencesResponse], error) {
	return c.updateAuthenticationPreferences.CallUnary(ctx, req)
}

// GetWebhookPreferences calls api.v1alpha1.org.Org.GetWebhookPreferences.
func (c *orgClient) GetWebhookPreferences(ctx context.Context, req *connect_go.Request[org.GetWebhookPreferencesRequest]) (*connect_go.Response[org.GetWebhookPreferencesResponse], error) {
	return c.getWebhookPreferences.CallUnary(ctx, req)
}

// UpdateWebhookPreferences calls api.v1alpha1.org.Org.UpdateWebhookPreferences.
func (c *orgClient) UpdateWebhookPreferences(ctx context.Context, req *connect_go.Request[org.UpdateWebhookPreferencesRequest]) (*connect_go.Response[org.UpdateWebhookPreferencesResponse], error) {
	return c.updateWebhookPreferences.CallUnary(ctx, req)
}

// GetDashboardGeneralPreferences calls api.v1alpha1.org.Org.GetDashboardGeneralPreferences.
func (c *orgClient) GetDashboardGeneralPreferences(ctx context.Context, req *connect_go.Request[org.GetDashboardGeneralPreferencesRequest]) (*connect_go.Response[org.GetDashboardGeneralPreferencesResponse], error) {
	return c.getDashboardGeneralPreferences.CallUnary(ctx, req)
}

// UpdateDashboardGeneralPreferences calls api.v1alpha1.org.Org.UpdateDashboardGeneralPreferences.
func (c *orgClient) UpdateDashboardGeneralPreferences(ctx context.Context, req *connect_go.Request[org.UpdateDashboardGeneralPreferencesRequest]) (*connect_go.Response[org.UpdateDashboardGeneralPreferencesResponse], error) {
	return c.updateDashboardGeneralPreferences.CallUnary(ctx, req)
}

// GetDashboardQueuePreferences calls api.v1alpha1.org.Org.GetDashboardQueuePreferences.
func (c *orgClient) GetDashboardQueuePreferences(ctx context.Context, req *connect_go.Request[org.GetDashboardQueuePreferencesRequest]) (*connect_go.Response[org.GetDashboardQueuePreferencesResponse], error) {
	return c.getDashboardQueuePreferences.CallUnary(ctx, req)
}

// UpdateDashboardQueuePreferences calls api.v1alpha1.org.Org.UpdateDashboardQueuePreferences.
func (c *orgClient) UpdateDashboardQueuePreferences(ctx context.Context, req *connect_go.Request[org.UpdateDashboardQueuePreferencesRequest]) (*connect_go.Response[org.UpdateDashboardQueuePreferencesResponse], error) {
	return c.updateDashboardQueuePreferences.CallUnary(ctx, req)
}

// GetPhonePreferences calls api.v1alpha1.org.Org.GetPhonePreferences.
func (c *orgClient) GetPhonePreferences(ctx context.Context, req *connect_go.Request[org.GetPhonePreferencesRequest]) (*connect_go.Response[org.GetPhonePreferencesResponse], error) {
	return c.getPhonePreferences.CallUnary(ctx, req)
}

// UpdatePhonePreferences calls api.v1alpha1.org.Org.UpdatePhonePreferences.
func (c *orgClient) UpdatePhonePreferences(ctx context.Context, req *connect_go.Request[org.UpdatePhonePreferencesRequest]) (*connect_go.Response[org.UpdatePhonePreferencesResponse], error) {
	return c.updatePhonePreferences.CallUnary(ctx, req)
}

// GetCompliancePreferences calls api.v1alpha1.org.Org.GetCompliancePreferences.
func (c *orgClient) GetCompliancePreferences(ctx context.Context, req *connect_go.Request[org.GetCompliancePreferencesRequest]) (*connect_go.Response[org.GetCompliancePreferencesResponse], error) {
	return c.getCompliancePreferences.CallUnary(ctx, req)
}

// UpdateCompliancePreferences calls api.v1alpha1.org.Org.UpdateCompliancePreferences.
func (c *orgClient) UpdateCompliancePreferences(ctx context.Context, req *connect_go.Request[org.UpdateCompliancePreferencesRequest]) (*connect_go.Response[org.UpdateCompliancePreferencesResponse], error) {
	return c.updateCompliancePreferences.CallUnary(ctx, req)
}

// GetBroadcastPreferences calls api.v1alpha1.org.Org.GetBroadcastPreferences.
func (c *orgClient) GetBroadcastPreferences(ctx context.Context, req *connect_go.Request[org.GetBroadcastPreferencesRequest]) (*connect_go.Response[org.GetBroadcastPreferencesResponse], error) {
	return c.getBroadcastPreferences.CallUnary(ctx, req)
}

// UpdateBroadcastPreferences calls api.v1alpha1.org.Org.UpdateBroadcastPreferences.
func (c *orgClient) UpdateBroadcastPreferences(ctx context.Context, req *connect_go.Request[org.UpdateBroadcastPreferencesRequest]) (*connect_go.Response[org.UpdateBroadcastPreferencesResponse], error) {
	return c.updateBroadcastPreferences.CallUnary(ctx, req)
}

// GetSchedulePreferences calls api.v1alpha1.org.Org.GetSchedulePreferences.
func (c *orgClient) GetSchedulePreferences(ctx context.Context, req *connect_go.Request[org.GetSchedulePreferencesRequest]) (*connect_go.Response[org.GetSchedulePreferencesResponse], error) {
	return c.getSchedulePreferences.CallUnary(ctx, req)
}

// UpdateSchedulePreferences calls api.v1alpha1.org.Org.UpdateSchedulePreferences.
func (c *orgClient) UpdateSchedulePreferences(ctx context.Context, req *connect_go.Request[org.UpdateSchedulePreferencesRequest]) (*connect_go.Response[org.UpdateSchedulePreferencesResponse], error) {
	return c.updateSchedulePreferences.CallUnary(ctx, req)
}

// GetEmailSmsPreferences calls api.v1alpha1.org.Org.GetEmailSmsPreferences.
func (c *orgClient) GetEmailSmsPreferences(ctx context.Context, req *connect_go.Request[org.GetEmailSmsPreferencesRequest]) (*connect_go.Response[org.GetEmailSmsPreferencesResponse], error) {
	return c.getEmailSmsPreferences.CallUnary(ctx, req)
}

// UpdateEmailSmsPreferences calls api.v1alpha1.org.Org.UpdateEmailSmsPreferences.
func (c *orgClient) UpdateEmailSmsPreferences(ctx context.Context, req *connect_go.Request[org.UpdateEmailSmsPreferencesRequest]) (*connect_go.Response[org.UpdateEmailSmsPreferencesResponse], error) {
	return c.updateEmailSmsPreferences.CallUnary(ctx, req)
}

// GetBusinessPreferences calls api.v1alpha1.org.Org.GetBusinessPreferences.
func (c *orgClient) GetBusinessPreferences(ctx context.Context, req *connect_go.Request[org.GetBusinessPreferencesRequest]) (*connect_go.Response[org.GetBusinessPreferencesResponse], error) {
	return c.getBusinessPreferences.CallUnary(ctx, req)
}

// UpdateBusinessPreferences calls api.v1alpha1.org.Org.UpdateBusinessPreferences.
func (c *orgClient) UpdateBusinessPreferences(ctx context.Context, req *connect_go.Request[org.UpdateBusinessPreferencesRequest]) (*connect_go.Response[org.UpdateBusinessPreferencesResponse], error) {
	return c.updateBusinessPreferences.CallUnary(ctx, req)
}

// UpdateAdminBusinessPreferences calls api.v1alpha1.org.Org.UpdateAdminBusinessPreferences.
func (c *orgClient) UpdateAdminBusinessPreferences(ctx context.Context, req *connect_go.Request[org.UpdateAdminBusinessPreferencesRequest]) (*connect_go.Response[org.UpdateAdminBusinessPreferencesResponse], error) {
	return c.updateAdminBusinessPreferences.CallUnary(ctx, req)
}

// GetScorecardsPreferences calls api.v1alpha1.org.Org.GetScorecardsPreferences.
func (c *orgClient) GetScorecardsPreferences(ctx context.Context, req *connect_go.Request[org.GetScorecardsPreferencesRequest]) (*connect_go.Response[org.GetScorecardsPreferencesResponse], error) {
	return c.getScorecardsPreferences.CallUnary(ctx, req)
}

// UpdateScorecardsPreferences calls api.v1alpha1.org.Org.UpdateScorecardsPreferences.
func (c *orgClient) UpdateScorecardsPreferences(ctx context.Context, req *connect_go.Request[org.UpdateScorecardsPreferencesRequest]) (*connect_go.Response[org.UpdateScorecardsPreferencesResponse], error) {
	return c.updateScorecardsPreferences.CallUnary(ctx, req)
}

// GetVoiceAnalyticsPreferences calls api.v1alpha1.org.Org.GetVoiceAnalyticsPreferences.
func (c *orgClient) GetVoiceAnalyticsPreferences(ctx context.Context, req *connect_go.Request[org.GetVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[org.GetVoiceAnalyticsPreferencesResponse], error) {
	return c.getVoiceAnalyticsPreferences.CallUnary(ctx, req)
}

// ListVoiceAnalyticsPreferences calls api.v1alpha1.org.Org.ListVoiceAnalyticsPreferences.
func (c *orgClient) ListVoiceAnalyticsPreferences(ctx context.Context, req *connect_go.Request[org.ListVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[org.ListVoiceAnalyticsPreferencesResponse], error) {
	return c.listVoiceAnalyticsPreferences.CallUnary(ctx, req)
}

// UpdateVoiceAnalyticsPreferences calls api.v1alpha1.org.Org.UpdateVoiceAnalyticsPreferences.
func (c *orgClient) UpdateVoiceAnalyticsPreferences(ctx context.Context, req *connect_go.Request[org.UpdateVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[org.UpdateVoiceAnalyticsPreferencesResponse], error) {
	return c.updateVoiceAnalyticsPreferences.CallUnary(ctx, req)
}

// GetEndOfDayPreferences calls api.v1alpha1.org.Org.GetEndOfDayPreferences.
func (c *orgClient) GetEndOfDayPreferences(ctx context.Context, req *connect_go.Request[org.GetEndOfDayPreferencesRequest]) (*connect_go.Response[org.GetEndOfDayPreferencesResponse], error) {
	return c.getEndOfDayPreferences.CallUnary(ctx, req)
}

// UpdateEndOfDayPreferences calls api.v1alpha1.org.Org.UpdateEndOfDayPreferences.
func (c *orgClient) UpdateEndOfDayPreferences(ctx context.Context, req *connect_go.Request[org.UpdateEndOfDayPreferencesRequest]) (*connect_go.Response[org.UpdateEndOfDayPreferencesResponse], error) {
	return c.updateEndOfDayPreferences.CallUnary(ctx, req)
}

// GetReportFilterPreferences calls api.v1alpha1.org.Org.GetReportFilterPreferences.
func (c *orgClient) GetReportFilterPreferences(ctx context.Context, req *connect_go.Request[org.GetFilterPreferencesRequest]) (*connect_go.Response[org.GetFilterPreferencesResponse], error) {
	return c.getReportFilterPreferences.CallUnary(ctx, req)
}

// UpdateReportFilterPreferences calls api.v1alpha1.org.Org.UpdateReportFilterPreferences.
func (c *orgClient) UpdateReportFilterPreferences(ctx context.Context, req *connect_go.Request[org.UpdateFilterPreferencesRequest]) (*connect_go.Response[org.UpdateFilterPreferencesResponse], error) {
	return c.updateReportFilterPreferences.CallUnary(ctx, req)
}

// GetRecordingPreferences calls api.v1alpha1.org.Org.GetRecordingPreferences.
func (c *orgClient) GetRecordingPreferences(ctx context.Context, req *connect_go.Request[org.GetRecordingPreferencesRequest]) (*connect_go.Response[org.GetRecordingPreferencesResponse], error) {
	return c.getRecordingPreferences.CallUnary(ctx, req)
}

// UpdateRecordingPreferences calls api.v1alpha1.org.Org.UpdateRecordingPreferences.
func (c *orgClient) UpdateRecordingPreferences(ctx context.Context, req *connect_go.Request[org.UpdateRecordingPreferencesRequest]) (*connect_go.Response[org.UpdateRecordingPreferencesResponse], error) {
	return c.updateRecordingPreferences.CallUnary(ctx, req)
}

// GetAdminClientPreferences calls api.v1alpha1.org.Org.GetAdminClientPreferences.
func (c *orgClient) GetAdminClientPreferences(ctx context.Context, req *connect_go.Request[org.GetAdminClientPreferencesRequest]) (*connect_go.Response[org.GetAdminClientPreferencesResponse], error) {
	return c.getAdminClientPreferences.CallUnary(ctx, req)
}

// UpdateAdminClientPreferences calls api.v1alpha1.org.Org.UpdateAdminClientPreferences.
func (c *orgClient) UpdateAdminClientPreferences(ctx context.Context, req *connect_go.Request[org.UpdateAdminClientPreferencesRequest]) (*connect_go.Response[org.UpdateAdminClientPreferencesResponse], error) {
	return c.updateAdminClientPreferences.CallUnary(ctx, req)
}

// AcceptLinkbackRecordingTerms calls api.v1alpha1.org.Org.AcceptLinkbackRecordingTerms.
func (c *orgClient) AcceptLinkbackRecordingTerms(ctx context.Context, req *connect_go.Request[org.AcceptLinkbackRecordingTermsRequest]) (*connect_go.Response[org.AcceptLinkbackRecordingTermsResponse], error) {
	return c.acceptLinkbackRecordingTerms.CallUnary(ctx, req)
}

// LinkbackUpdateBroadcastTemplates calls api.v1alpha1.org.Org.LinkbackUpdateBroadcastTemplates.
func (c *orgClient) LinkbackUpdateBroadcastTemplates(ctx context.Context, req *connect_go.Request[org.LinkbackUpdateBroadcastTemplatesRequest]) (*connect_go.Response[org.LinkbackUpdateBroadcastTemplatesResponse], error) {
	return c.linkbackUpdateBroadcastTemplates.CallUnary(ctx, req)
}

// RecordEmailUnsubscribeAcknowledgement calls
// api.v1alpha1.org.Org.RecordEmailUnsubscribeAcknowledgement.
func (c *orgClient) RecordEmailUnsubscribeAcknowledgement(ctx context.Context, req *connect_go.Request[org.RecordEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[org.RecordEmailUnsubscribeAcknowledgementResponse], error) {
	return c.recordEmailUnsubscribeAcknowledgement.CallUnary(ctx, req)
}

// ClearEmailUnsubscribeAcknowledgement calls
// api.v1alpha1.org.Org.ClearEmailUnsubscribeAcknowledgement.
func (c *orgClient) ClearEmailUnsubscribeAcknowledgement(ctx context.Context, req *connect_go.Request[org.ClearEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[org.ClearEmailUnsubscribeAcknowledgementResponse], error) {
	return c.clearEmailUnsubscribeAcknowledgement.CallUnary(ctx, req)
}

// ListBusinessHours calls api.v1alpha1.org.Org.ListBusinessHours.
//
// Deprecated: do not use.
func (c *orgClient) ListBusinessHours(ctx context.Context, req *connect_go.Request[org.ListBusinessHoursRequest]) (*connect_go.Response[org.ListBusinessHoursResponse], error) {
	return c.listBusinessHours.CallUnary(ctx, req)
}

// GetBusinessHours calls api.v1alpha1.org.Org.GetBusinessHours.
//
// Deprecated: do not use.
func (c *orgClient) GetBusinessHours(ctx context.Context, req *connect_go.Request[org.GetBusinessHoursRequest]) (*connect_go.Response[org.GetBusinessHoursResponse], error) {
	return c.getBusinessHours.CallUnary(ctx, req)
}

// SetBusinessHours calls api.v1alpha1.org.Org.SetBusinessHours.
//
// Deprecated: do not use.
func (c *orgClient) SetBusinessHours(ctx context.Context, req *connect_go.Request[org.SetBusinessHoursRequest]) (*connect_go.Response[org.SetBusinessHoursResponse], error) {
	return c.setBusinessHours.CallUnary(ctx, req)
}

// AddIntervalToBusinessHours calls api.v1alpha1.org.Org.AddIntervalToBusinessHours.
//
// Deprecated: do not use.
func (c *orgClient) AddIntervalToBusinessHours(ctx context.Context, req *connect_go.Request[org.AddIntervalToBusinessHoursRequest]) (*connect_go.Response[org.AddIntervalToBusinessHoursResponse], error) {
	return c.addIntervalToBusinessHours.CallUnary(ctx, req)
}

// RemoveIntervalFromBusinessHours calls api.v1alpha1.org.Org.RemoveIntervalFromBusinessHours.
//
// Deprecated: do not use.
func (c *orgClient) RemoveIntervalFromBusinessHours(ctx context.Context, req *connect_go.Request[org.RemoveIntervalFromBusinessHoursRequest]) (*connect_go.Response[org.RemoveIntervalFromBusinessHoursResponse], error) {
	return c.removeIntervalFromBusinessHours.CallUnary(ctx, req)
}

// UpdateBusinessHoursInfo calls api.v1alpha1.org.Org.UpdateBusinessHoursInfo.
//
// Deprecated: do not use.
func (c *orgClient) UpdateBusinessHoursInfo(ctx context.Context, req *connect_go.Request[org.UpdateBusinessHoursInfoRequest]) (*connect_go.Response[org.UpdateBusinessHoursInfoResponse], error) {
	return c.updateBusinessHoursInfo.CallUnary(ctx, req)
}

// DeleteBusinessHours calls api.v1alpha1.org.Org.DeleteBusinessHours.
//
// Deprecated: do not use.
func (c *orgClient) DeleteBusinessHours(ctx context.Context, req *connect_go.Request[org.DeleteBusinessHoursRequest]) (*connect_go.Response[org.DeleteBusinessHoursResponse], error) {
	return c.deleteBusinessHours.CallUnary(ctx, req)
}

// EvaluateBusinessHours calls api.v1alpha1.org.Org.EvaluateBusinessHours.
//
// Deprecated: do not use.
func (c *orgClient) EvaluateBusinessHours(ctx context.Context, req *connect_go.Request[org.EvaluateBusinessHoursRequest]) (*connect_go.Response[org.EvaluateBusinessHoursResponse], error) {
	return c.evaluateBusinessHours.CallUnary(ctx, req)
}

// CreateUser calls api.v1alpha1.org.Org.CreateUser.
func (c *orgClient) CreateUser(ctx context.Context, req *connect_go.Request[org.CreateUserRequest]) (*connect_go.Response[org.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// CreateDelegatedUser calls api.v1alpha1.org.Org.CreateDelegatedUser.
func (c *orgClient) CreateDelegatedUser(ctx context.Context, req *connect_go.Request[org.CreateDelegatedUserRequest]) (*connect_go.Response[org.CreateDelegatedUserResponse], error) {
	return c.createDelegatedUser.CallUnary(ctx, req)
}

// GetMyUser calls api.v1alpha1.org.Org.GetMyUser.
func (c *orgClient) GetMyUser(ctx context.Context, req *connect_go.Request[org.GetMyUserRequest]) (*connect_go.Response[org.GetMyUserResponse], error) {
	return c.getMyUser.CallUnary(ctx, req)
}

// GetUser calls api.v1alpha1.org.Org.GetUser.
func (c *orgClient) GetUser(ctx context.Context, req *connect_go.Request[org.GetUserRequest]) (*connect_go.Response[org.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// GetUserByOrgId calls api.v1alpha1.org.Org.GetUserByOrgId.
func (c *orgClient) GetUserByOrgId(ctx context.Context, req *connect_go.Request[org.GetUserByOrgIdRequest]) (*connect_go.Response[org.GetUserByOrgIdResponse], error) {
	return c.getUserByOrgId.CallUnary(ctx, req)
}

// ListAgents calls api.v1alpha1.org.Org.ListAgents.
func (c *orgClient) ListAgents(ctx context.Context, req *connect_go.Request[org.ListAgentsRequest]) (*connect_go.ServerStreamForClient[org.ListAgentsResponse], error) {
	return c.listAgents.CallServerStream(ctx, req)
}

// ListPublicUsers calls api.v1alpha1.org.Org.ListPublicUsers.
func (c *orgClient) ListPublicUsers(ctx context.Context, req *connect_go.Request[org.ListPublicUsersRequest]) (*connect_go.ServerStreamForClient[org.ListPublicUsersResponse], error) {
	return c.listPublicUsers.CallServerStream(ctx, req)
}

// ListUsers calls api.v1alpha1.org.Org.ListUsers.
func (c *orgClient) ListUsers(ctx context.Context, req *connect_go.Request[org.ListUsersRequest]) (*connect_go.ServerStreamForClient[org.ListUsersResponse], error) {
	return c.listUsers.CallServerStream(ctx, req)
}

// ListUsersByOrgId calls api.v1alpha1.org.Org.ListUsersByOrgId.
func (c *orgClient) ListUsersByOrgId(ctx context.Context, req *connect_go.Request[org.ListUsersByOrgIdRequest]) (*connect_go.ServerStreamForClient[org.ListUsersByOrgIdResponse], error) {
	return c.listUsersByOrgId.CallServerStream(ctx, req)
}

// ListUsersByRegion calls api.v1alpha1.org.Org.ListUsersByRegion.
func (c *orgClient) ListUsersByRegion(ctx context.Context, req *connect_go.Request[org.ListUsersByRegionRequest]) (*connect_go.ServerStreamForClient[org.ListUsersByRegionResponse], error) {
	return c.listUsersByRegion.CallServerStream(ctx, req)
}

// UpdateMyUser calls api.v1alpha1.org.Org.UpdateMyUser.
func (c *orgClient) UpdateMyUser(ctx context.Context, req *connect_go.Request[org.UpdateMyUserRequest]) (*connect_go.Response[org.UpdateMyUserResponse], error) {
	return c.updateMyUser.CallUnary(ctx, req)
}

// UpdateUser calls api.v1alpha1.org.Org.UpdateUser.
func (c *orgClient) UpdateUser(ctx context.Context, req *connect_go.Request[org.UpdateUserRequest]) (*connect_go.Response[org.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// UpdateUserLabels calls api.v1alpha1.org.Org.UpdateUserLabels.
func (c *orgClient) UpdateUserLabels(ctx context.Context, req *connect_go.Request[org.UpdateUserLabelsRequest]) (*connect_go.Response[org.UpdateUserLabelsResponse], error) {
	return c.updateUserLabels.CallUnary(ctx, req)
}

// UpdateUserCallerId calls api.v1alpha1.org.Org.UpdateUserCallerId.
func (c *orgClient) UpdateUserCallerId(ctx context.Context, req *connect_go.Request[org.UpdateUserCallerIdRequest]) (*connect_go.Response[org.UpdateUserCallerIdResponse], error) {
	return c.updateUserCallerId.CallUnary(ctx, req)
}

// UpdateUserDisabled calls api.v1alpha1.org.Org.UpdateUserDisabled.
func (c *orgClient) UpdateUserDisabled(ctx context.Context, req *connect_go.Request[org.UpdateUserDisabledRequest]) (*connect_go.Response[org.UpdateUserDisabledResponse], error) {
	return c.updateUserDisabled.CallUnary(ctx, req)
}

// UpdateUserDisabledByOrgId calls api.v1alpha1.org.Org.UpdateUserDisabledByOrgId.
func (c *orgClient) UpdateUserDisabledByOrgId(ctx context.Context, req *connect_go.Request[org.UpdateUserDisabledByOrgIdRequest]) (*connect_go.Response[org.UpdateUserDisabledByOrgIdResponse], error) {
	return c.updateUserDisabledByOrgId.CallUnary(ctx, req)
}

// GetMyUserPasswordResetLink calls api.v1alpha1.org.Org.GetMyUserPasswordResetLink.
func (c *orgClient) GetMyUserPasswordResetLink(ctx context.Context, req *connect_go.Request[org.GetMyUserPasswordResetLinkRequest]) (*connect_go.Response[org.GetMyUserPasswordResetLinkResponse], error) {
	return c.getMyUserPasswordResetLink.CallUnary(ctx, req)
}

// GetUserPasswordResetLink calls api.v1alpha1.org.Org.GetUserPasswordResetLink.
func (c *orgClient) GetUserPasswordResetLink(ctx context.Context, req *connect_go.Request[org.GetUserPasswordResetLinkRequest]) (*connect_go.Response[org.GetUserPasswordResetLinkResponse], error) {
	return c.getUserPasswordResetLink.CallUnary(ctx, req)
}

// GetUserPasswordResetLinkByOrgId calls api.v1alpha1.org.Org.GetUserPasswordResetLinkByOrgId.
func (c *orgClient) GetUserPasswordResetLinkByOrgId(ctx context.Context, req *connect_go.Request[org.GetUserPasswordResetLinkByOrgIdRequest]) (*connect_go.Response[org.GetUserPasswordResetLinkByOrgIdResponse], error) {
	return c.getUserPasswordResetLinkByOrgId.CallUnary(ctx, req)
}

// CreatePasswordResetLink calls api.v1alpha1.org.Org.CreatePasswordResetLink.
func (c *orgClient) CreatePasswordResetLink(ctx context.Context, req *connect_go.Request[org.CreatePasswordResetLinkRequest]) (*connect_go.Response[org.CreatePasswordResetLinkResponse], error) {
	return c.createPasswordResetLink.CallUnary(ctx, req)
}

// CreatePasswordResetLinkByOrgId calls api.v1alpha1.org.Org.CreatePasswordResetLinkByOrgId.
func (c *orgClient) CreatePasswordResetLinkByOrgId(ctx context.Context, req *connect_go.Request[org.CreatePasswordResetLinkByOrgIdRequest]) (*connect_go.Response[org.CreatePasswordResetLinkByOrgIdResponse], error) {
	return c.createPasswordResetLinkByOrgId.CallUnary(ctx, req)
}

// GetUserLoginInfo calls api.v1alpha1.org.Org.GetUserLoginInfo.
func (c *orgClient) GetUserLoginInfo(ctx context.Context, req *connect_go.Request[org.GetUserLoginInfoRequest]) (*connect_go.Response[org.GetUserLoginInfoResponse], error) {
	return c.getUserLoginInfo.CallUnary(ctx, req)
}

// GetUserEmailVerified calls api.v1alpha1.org.Org.GetUserEmailVerified.
func (c *orgClient) GetUserEmailVerified(ctx context.Context, req *connect_go.Request[org.GetUserEmailVerifiedRequest]) (*connect_go.Response[org.GetUserEmailVerifiedResponse], error) {
	return c.getUserEmailVerified.CallUnary(ctx, req)
}

// GetUserEmailVerifiedByOrgId calls api.v1alpha1.org.Org.GetUserEmailVerifiedByOrgId.
func (c *orgClient) GetUserEmailVerifiedByOrgId(ctx context.Context, req *connect_go.Request[org.GetUserEmailVerifiedByOrgIdRequest]) (*connect_go.Response[org.GetUserEmailVerifiedByOrgIdResponse], error) {
	return c.getUserEmailVerifiedByOrgId.CallUnary(ctx, req)
}

// ResetMyPassword calls api.v1alpha1.org.Org.ResetMyPassword.
func (c *orgClient) ResetMyPassword(ctx context.Context, req *connect_go.Request[org.ResetMyPasswordRequest]) (*connect_go.Response[org.ResetMyPasswordResponse], error) {
	return c.resetMyPassword.CallUnary(ctx, req)
}

// ResetUserPassword calls api.v1alpha1.org.Org.ResetUserPassword.
func (c *orgClient) ResetUserPassword(ctx context.Context, req *connect_go.Request[org.ResetUserPasswordRequest]) (*connect_go.Response[org.ResetUserPasswordResponse], error) {
	return c.resetUserPassword.CallUnary(ctx, req)
}

// ResetUserPasswordByOrgId calls api.v1alpha1.org.Org.ResetUserPasswordByOrgId.
func (c *orgClient) ResetUserPasswordByOrgId(ctx context.Context, req *connect_go.Request[org.ResetUserPasswordByOrgIdRequest]) (*connect_go.Response[org.ResetUserPasswordByOrgIdResponse], error) {
	return c.resetUserPasswordByOrgId.CallUnary(ctx, req)
}

// SendUserEmailVerification calls api.v1alpha1.org.Org.SendUserEmailVerification.
func (c *orgClient) SendUserEmailVerification(ctx context.Context, req *connect_go.Request[org.SendUserEmailVerificationRequest]) (*connect_go.Response[org.SendUserEmailVerificationResponse], error) {
	return c.sendUserEmailVerification.CallUnary(ctx, req)
}

// SendUserEmailVerificationByOrgId calls api.v1alpha1.org.Org.SendUserEmailVerificationByOrgId.
func (c *orgClient) SendUserEmailVerificationByOrgId(ctx context.Context, req *connect_go.Request[org.SendUserEmailVerificationByOrgIdRequest]) (*connect_go.Response[org.SendUserEmailVerificationByOrgIdResponse], error) {
	return c.sendUserEmailVerificationByOrgId.CallUnary(ctx, req)
}

// SendPasswordReset calls api.v1alpha1.org.Org.SendPasswordReset.
func (c *orgClient) SendPasswordReset(ctx context.Context, req *connect_go.Request[org.SendPasswordResetRequest]) (*connect_go.Response[org.SendPasswordResetResponse], error) {
	return c.sendPasswordReset.CallUnary(ctx, req)
}

// SendPasswordResetByOrgId calls api.v1alpha1.org.Org.SendPasswordResetByOrgId.
func (c *orgClient) SendPasswordResetByOrgId(ctx context.Context, req *connect_go.Request[org.SendPasswordResetByOrgIdRequest]) (*connect_go.Response[org.SendPasswordResetByOrgIdResponse], error) {
	return c.sendPasswordResetByOrgId.CallUnary(ctx, req)
}

// GetUserSessionData calls api.v1alpha1.org.Org.GetUserSessionData.
func (c *orgClient) GetUserSessionData(ctx context.Context, req *connect_go.Request[org.GetUserSessionDataRequest]) (*connect_go.Response[org.GetUserSessionDataResponse], error) {
	return c.getUserSessionData.CallUnary(ctx, req)
}

// GetAgentProfileGroup calls api.v1alpha1.org.Org.GetAgentProfileGroup.
func (c *orgClient) GetAgentProfileGroup(ctx context.Context, req *connect_go.Request[org.GetAgentProfileGroupRequest]) (*connect_go.Response[org.GetAgentProfileGroupResponse], error) {
	return c.getAgentProfileGroup.CallUnary(ctx, req)
}

// ListAgentProfileGroups calls api.v1alpha1.org.Org.ListAgentProfileGroups.
func (c *orgClient) ListAgentProfileGroups(ctx context.Context, req *connect_go.Request[org.ListAgentProfileGroupsRequest]) (*connect_go.Response[org.ListAgentProfileGroupsResponse], error) {
	return c.listAgentProfileGroups.CallUnary(ctx, req)
}

// UpdateAgentProfileGroup calls api.v1alpha1.org.Org.UpdateAgentProfileGroup.
func (c *orgClient) UpdateAgentProfileGroup(ctx context.Context, req *connect_go.Request[org.UpdateAgentProfileGroupRequest]) (*connect_go.Response[org.UpdateAgentProfileGroupResponse], error) {
	return c.updateAgentProfileGroup.CallUnary(ctx, req)
}

// CreateAgentProfileGroup calls api.v1alpha1.org.Org.CreateAgentProfileGroup.
func (c *orgClient) CreateAgentProfileGroup(ctx context.Context, req *connect_go.Request[org.CreateAgentProfileGroupRequest]) (*connect_go.Response[org.CreateAgentProfileGroupResponse], error) {
	return c.createAgentProfileGroup.CallUnary(ctx, req)
}

// DeleteAgentProfileGroup calls api.v1alpha1.org.Org.DeleteAgentProfileGroup.
func (c *orgClient) DeleteAgentProfileGroup(ctx context.Context, req *connect_go.Request[org.DeleteAgentProfileGroupRequest]) (*connect_go.Response[org.DeleteAgentProfileGroupResponse], error) {
	return c.deleteAgentProfileGroup.CallUnary(ctx, req)
}

// AssignAgentProfileGroups calls api.v1alpha1.org.Org.AssignAgentProfileGroups.
func (c *orgClient) AssignAgentProfileGroups(ctx context.Context, req *connect_go.Request[org.AssignAgentProfileGroupsRequest]) (*connect_go.Response[org.AssignAgentProfileGroupsResponse], error) {
	return c.assignAgentProfileGroups.CallUnary(ctx, req)
}

// AddUserSubscription calls api.v1alpha1.org.Org.AddUserSubscription.
func (c *orgClient) AddUserSubscription(ctx context.Context, req *connect_go.Request[org.AddUserSubscriptionRequest]) (*connect_go.Response[org.AddUserSubscriptionResponse], error) {
	return c.addUserSubscription.CallUnary(ctx, req)
}

// AddUserSubscriptionByUserId calls api.v1alpha1.org.Org.AddUserSubscriptionByUserId.
func (c *orgClient) AddUserSubscriptionByUserId(ctx context.Context, req *connect_go.Request[org.AddUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.AddUserSubscriptionByUserIdResponse], error) {
	return c.addUserSubscriptionByUserId.CallUnary(ctx, req)
}

// GetUserSubscription calls api.v1alpha1.org.Org.GetUserSubscription.
func (c *orgClient) GetUserSubscription(ctx context.Context, req *connect_go.Request[org.GetUserSubscriptionRequest]) (*connect_go.Response[org.GetUserSubscriptionResponse], error) {
	return c.getUserSubscription.CallUnary(ctx, req)
}

// GetUserSubscriptionByUserId calls api.v1alpha1.org.Org.GetUserSubscriptionByUserId.
func (c *orgClient) GetUserSubscriptionByUserId(ctx context.Context, req *connect_go.Request[org.GetUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.GetUserSubscriptionByUserIdResponse], error) {
	return c.getUserSubscriptionByUserId.CallUnary(ctx, req)
}

// UpdateUserSubscription calls api.v1alpha1.org.Org.UpdateUserSubscription.
func (c *orgClient) UpdateUserSubscription(ctx context.Context, req *connect_go.Request[org.UpdateUserSubscriptionRequest]) (*connect_go.Response[org.UpdateUserSubscriptionResponse], error) {
	return c.updateUserSubscription.CallUnary(ctx, req)
}

// UpdateUserSubscriptionByUserId calls api.v1alpha1.org.Org.UpdateUserSubscriptionByUserId.
func (c *orgClient) UpdateUserSubscriptionByUserId(ctx context.Context, req *connect_go.Request[org.UpdateUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.UpdateUserSubscriptionByUserIdResponse], error) {
	return c.updateUserSubscriptionByUserId.CallUnary(ctx, req)
}

// RemoveUserSubscription calls api.v1alpha1.org.Org.RemoveUserSubscription.
func (c *orgClient) RemoveUserSubscription(ctx context.Context, req *connect_go.Request[org.RemoveUserSubscriptionRequest]) (*connect_go.Response[org.RemoveUserSubscriptionResponse], error) {
	return c.removeUserSubscription.CallUnary(ctx, req)
}

// RemoveUserSubscriptionByUserId calls api.v1alpha1.org.Org.RemoveUserSubscriptionByUserId.
func (c *orgClient) RemoveUserSubscriptionByUserId(ctx context.Context, req *connect_go.Request[org.RemoveUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.RemoveUserSubscriptionByUserIdResponse], error) {
	return c.removeUserSubscriptionByUserId.CallUnary(ctx, req)
}

// ListUserSubscriptions calls api.v1alpha1.org.Org.ListUserSubscriptions.
func (c *orgClient) ListUserSubscriptions(ctx context.Context, req *connect_go.Request[org.ListUserSubscriptionsRequest]) (*connect_go.Response[org.ListUserSubscriptionsResponse], error) {
	return c.listUserSubscriptions.CallUnary(ctx, req)
}

// ListUserSubscriptionsByUserId calls api.v1alpha1.org.Org.ListUserSubscriptionsByUserId.
func (c *orgClient) ListUserSubscriptionsByUserId(ctx context.Context, req *connect_go.Request[org.ListUserSubscriptionsByUserIdRequest]) (*connect_go.Response[org.ListUserSubscriptionsByUserIdResponse], error) {
	return c.listUserSubscriptionsByUserId.CallUnary(ctx, req)
}

// ListOrgSubscriptions calls api.v1alpha1.org.Org.ListOrgSubscriptions.
func (c *orgClient) ListOrgSubscriptions(ctx context.Context, req *connect_go.Request[org.ListOrgSubscriptionsRequest]) (*connect_go.Response[org.ListOrgSubscriptionsResponse], error) {
	return c.listOrgSubscriptions.CallUnary(ctx, req)
}

// CreateAuthToken calls api.v1alpha1.org.Org.CreateAuthToken.
func (c *orgClient) CreateAuthToken(ctx context.Context, req *connect_go.Request[org.CreateAuthTokenRequest]) (*connect_go.Response[org.CreateAuthTokenResponse], error) {
	return c.createAuthToken.CallUnary(ctx, req)
}

// CreateAuthTokenByUserId calls api.v1alpha1.org.Org.CreateAuthTokenByUserId.
func (c *orgClient) CreateAuthTokenByUserId(ctx context.Context, req *connect_go.Request[org.CreateAuthTokenByUserIdRequest]) (*connect_go.Response[org.CreateAuthTokenByUserIdResponse], error) {
	return c.createAuthTokenByUserId.CallUnary(ctx, req)
}

// ListAuthTokens calls api.v1alpha1.org.Org.ListAuthTokens.
func (c *orgClient) ListAuthTokens(ctx context.Context, req *connect_go.Request[org.ListAuthTokensRequest]) (*connect_go.Response[org.ListAuthTokensResponse], error) {
	return c.listAuthTokens.CallUnary(ctx, req)
}

// ListAuthTokensByUserId calls api.v1alpha1.org.Org.ListAuthTokensByUserId.
func (c *orgClient) ListAuthTokensByUserId(ctx context.Context, req *connect_go.Request[org.ListAuthTokensByUserIdRequest]) (*connect_go.Response[org.ListAuthTokensByUserIdResponse], error) {
	return c.listAuthTokensByUserId.CallUnary(ctx, req)
}

// SetAuthTokenExpiration calls api.v1alpha1.org.Org.SetAuthTokenExpiration.
func (c *orgClient) SetAuthTokenExpiration(ctx context.Context, req *connect_go.Request[org.SetAuthTokenExpirationRequest]) (*connect_go.Response[org.SetAuthTokenExpirationResponse], error) {
	return c.setAuthTokenExpiration.CallUnary(ctx, req)
}

// SetAuthTokenExpirationByUserId calls api.v1alpha1.org.Org.SetAuthTokenExpirationByUserId.
func (c *orgClient) SetAuthTokenExpirationByUserId(ctx context.Context, req *connect_go.Request[org.SetAuthTokenExpirationByUserIdRequest]) (*connect_go.Response[org.SetAuthTokenExpirationByUserIdResponse], error) {
	return c.setAuthTokenExpirationByUserId.CallUnary(ctx, req)
}

// DeleteAuthToken calls api.v1alpha1.org.Org.DeleteAuthToken.
func (c *orgClient) DeleteAuthToken(ctx context.Context, req *connect_go.Request[org.DeleteAuthTokenRequest]) (*connect_go.Response[org.DeleteAuthTokenResponse], error) {
	return c.deleteAuthToken.CallUnary(ctx, req)
}

// DeleteAuthTokenByUserId calls api.v1alpha1.org.Org.DeleteAuthTokenByUserId.
func (c *orgClient) DeleteAuthTokenByUserId(ctx context.Context, req *connect_go.Request[org.DeleteAuthTokenByUserIdRequest]) (*connect_go.Response[org.DeleteAuthTokenByUserIdResponse], error) {
	return c.deleteAuthTokenByUserId.CallUnary(ctx, req)
}

// GetHuntGroupSettings calls api.v1alpha1.org.Org.GetHuntGroupSettings.
func (c *orgClient) GetHuntGroupSettings(ctx context.Context, req *connect_go.Request[org.GetHuntGroupSettingsRequest]) (*connect_go.Response[org.GetHuntGroupSettingsResponse], error) {
	return c.getHuntGroupSettings.CallUnary(ctx, req)
}

// UpdateHuntGroupSettings calls api.v1alpha1.org.Org.UpdateHuntGroupSettings.
func (c *orgClient) UpdateHuntGroupSettings(ctx context.Context, req *connect_go.Request[org.UpdateHuntGroupSettingsRequest]) (*connect_go.Response[org.UpdateHuntGroupSettingsResponse], error) {
	return c.updateHuntGroupSettings.CallUnary(ctx, req)
}

// CreateHuntGroup calls api.v1alpha1.org.Org.CreateHuntGroup.
func (c *orgClient) CreateHuntGroup(ctx context.Context, req *connect_go.Request[org.CreateHuntGroupRequest]) (*connect_go.Response[org.CreateHuntGroupResponse], error) {
	return c.createHuntGroup.CallUnary(ctx, req)
}

// UpdateHuntGroupGeneralDetails calls api.v1alpha1.org.Org.UpdateHuntGroupGeneralDetails.
func (c *orgClient) UpdateHuntGroupGeneralDetails(ctx context.Context, req *connect_go.Request[org.UpdateHuntGroupGeneralDetailsRequest]) (*connect_go.Response[org.UpdateHuntGroupGeneralDetailsResponse], error) {
	return c.updateHuntGroupGeneralDetails.CallUnary(ctx, req)
}

// DeleteHuntGroup calls api.v1alpha1.org.Org.DeleteHuntGroup.
func (c *orgClient) DeleteHuntGroup(ctx context.Context, req *connect_go.Request[org.DeleteHuntGroupRequest]) (*connect_go.Response[org.DeleteHuntGroupResponse], error) {
	return c.deleteHuntGroup.CallUnary(ctx, req)
}

// GetHuntGroupDetails calls api.v1alpha1.org.Org.GetHuntGroupDetails.
func (c *orgClient) GetHuntGroupDetails(ctx context.Context, req *connect_go.Request[org.GetHuntGroupDetailsRequest]) (*connect_go.Response[org.GetHuntGroupDetailsResponse], error) {
	return c.getHuntGroupDetails.CallUnary(ctx, req)
}

// ListCallerIdBuckets calls api.v1alpha1.org.Org.ListCallerIdBuckets.
func (c *orgClient) ListCallerIdBuckets(ctx context.Context, req *connect_go.Request[org.ListCallerIdBucketsRequest]) (*connect_go.Response[org.ListCallerIdBucketsResponse], error) {
	return c.listCallerIdBuckets.CallUnary(ctx, req)
}

// GetDataDipTemplate calls api.v1alpha1.org.Org.GetDataDipTemplate.
func (c *orgClient) GetDataDipTemplate(ctx context.Context, req *connect_go.Request[org.GetDataDipTemplateRequest]) (*connect_go.Response[org.GetDataDipTemplateResponse], error) {
	return c.getDataDipTemplate.CallUnary(ctx, req)
}

// ListDataDipTemplates calls api.v1alpha1.org.Org.ListDataDipTemplates.
func (c *orgClient) ListDataDipTemplates(ctx context.Context, req *connect_go.Request[org.ListDataDipTemplatesRequest]) (*connect_go.Response[org.ListDataDipTemplatesResponse], error) {
	return c.listDataDipTemplates.CallUnary(ctx, req)
}

// CreateDataDipTemplate calls api.v1alpha1.org.Org.CreateDataDipTemplate.
func (c *orgClient) CreateDataDipTemplate(ctx context.Context, req *connect_go.Request[org.CreateDataDipTemplateRequest]) (*connect_go.Response[org.CreateDataDipTemplateResponse], error) {
	return c.createDataDipTemplate.CallUnary(ctx, req)
}

// UpdateDataDipTemplate calls api.v1alpha1.org.Org.UpdateDataDipTemplate.
func (c *orgClient) UpdateDataDipTemplate(ctx context.Context, req *connect_go.Request[org.UpdateDataDipTemplateRequest]) (*connect_go.Response[org.UpdateDataDipTemplateResponse], error) {
	return c.updateDataDipTemplate.CallUnary(ctx, req)
}

// DeleteDataDipTemplate calls api.v1alpha1.org.Org.DeleteDataDipTemplate.
func (c *orgClient) DeleteDataDipTemplate(ctx context.Context, req *connect_go.Request[org.DeleteDataDipTemplateRequest]) (*connect_go.Response[org.DeleteDataDipTemplateResponse], error) {
	return c.deleteDataDipTemplate.CallUnary(ctx, req)
}

// CopyDataDipTemplate calls api.v1alpha1.org.Org.CopyDataDipTemplate.
func (c *orgClient) CopyDataDipTemplate(ctx context.Context, req *connect_go.Request[org.CopyDataDipTemplateRequest]) (*connect_go.Response[org.CopyDataDipTemplateResponse], error) {
	return c.copyDataDipTemplate.CallUnary(ctx, req)
}

// CopyDataDipTemplateToOrganization calls api.v1alpha1.org.Org.CopyDataDipTemplateToOrganization.
func (c *orgClient) CopyDataDipTemplateToOrganization(ctx context.Context, req *connect_go.Request[org.CopyDataDipTemplateToOrganizationRequest]) (*connect_go.Response[org.CopyDataDipTemplateToOrganizationResponse], error) {
	return c.copyDataDipTemplateToOrganization.CallUnary(ctx, req)
}

// ListBroadcastTemplateGeneralDetails calls
// api.v1alpha1.org.Org.ListBroadcastTemplateGeneralDetails.
func (c *orgClient) ListBroadcastTemplateGeneralDetails(ctx context.Context, req *connect_go.Request[org.ListBroadcastTemplateGeneralDetailsRequest]) (*connect_go.Response[org.ListBroadcastTemplateGeneralDetailsResponse], error) {
	return c.listBroadcastTemplateGeneralDetails.CallUnary(ctx, req)
}

// ListAgentResponseAutoRules calls api.v1alpha1.org.Org.ListAgentResponseAutoRules.
func (c *orgClient) ListAgentResponseAutoRules(ctx context.Context, req *connect_go.Request[org.ListAgentResponseAutoRulesRequest]) (*connect_go.Response[org.ListAgentResponseAutoRulesResponse], error) {
	return c.listAgentResponseAutoRules.CallUnary(ctx, req)
}

// CreateAgentResponseAutoRules calls api.v1alpha1.org.Org.CreateAgentResponseAutoRules.
func (c *orgClient) CreateAgentResponseAutoRules(ctx context.Context, req *connect_go.Request[org.CreateAgentResponseAutoRulesRequest]) (*connect_go.Response[org.CreateAgentResponseAutoRulesResponse], error) {
	return c.createAgentResponseAutoRules.CallUnary(ctx, req)
}

// UpdateAgentResponseAutoRules calls api.v1alpha1.org.Org.UpdateAgentResponseAutoRules.
func (c *orgClient) UpdateAgentResponseAutoRules(ctx context.Context, req *connect_go.Request[org.UpdateAgentResponseAutoRulesRequest]) (*connect_go.Response[org.UpdateAgentResponseAutoRulesResponse], error) {
	return c.updateAgentResponseAutoRules.CallUnary(ctx, req)
}

// DeleteAgentResponseAutoRules calls api.v1alpha1.org.Org.DeleteAgentResponseAutoRules.
func (c *orgClient) DeleteAgentResponseAutoRules(ctx context.Context, req *connect_go.Request[org.DeleteAgentResponseAutoRulesRequest]) (*connect_go.Response[org.DeleteAgentResponseAutoRulesResponse], error) {
	return c.deleteAgentResponseAutoRules.CallUnary(ctx, req)
}

// ListHuntGroupWebLinks calls api.v1alpha1.org.Org.ListHuntGroupWebLinks.
func (c *orgClient) ListHuntGroupWebLinks(ctx context.Context, req *connect_go.Request[org.ListHuntGroupWebLinksRequest]) (*connect_go.Response[org.ListHuntGroupWebLinksResponse], error) {
	return c.listHuntGroupWebLinks.CallUnary(ctx, req)
}

// CopyHuntGroupWebLink calls api.v1alpha1.org.Org.CopyHuntGroupWebLink.
func (c *orgClient) CopyHuntGroupWebLink(ctx context.Context, req *connect_go.Request[org.CopyHuntGroupWebLinkRequest]) (*connect_go.Response[org.CopyHuntGroupWebLinkResponse], error) {
	return c.copyHuntGroupWebLink.CallUnary(ctx, req)
}

// UpdateHuntGroupWebLinks calls api.v1alpha1.org.Org.UpdateHuntGroupWebLinks.
func (c *orgClient) UpdateHuntGroupWebLinks(ctx context.Context, req *connect_go.Request[org.UpdateHuntGroupWebLinksRequest]) (*connect_go.Response[org.UpdateHuntGroupWebLinksResponse], error) {
	return c.updateHuntGroupWebLinks.CallUnary(ctx, req)
}

// ListHuntGroupIntegrationLinks calls api.v1alpha1.org.Org.ListHuntGroupIntegrationLinks.
func (c *orgClient) ListHuntGroupIntegrationLinks(ctx context.Context, req *connect_go.Request[org.ListHuntGroupIntegrationLinksRequest]) (*connect_go.Response[org.ListHuntGroupIntegrationLinksResponse], error) {
	return c.listHuntGroupIntegrationLinks.CallUnary(ctx, req)
}

// CopyHuntGroupIntegrationLink calls api.v1alpha1.org.Org.CopyHuntGroupIntegrationLink.
func (c *orgClient) CopyHuntGroupIntegrationLink(ctx context.Context, req *connect_go.Request[org.CopyHuntGroupIntegrationLinkRequest]) (*connect_go.Response[org.CopyHuntGroupIntegrationLinkResponse], error) {
	return c.copyHuntGroupIntegrationLink.CallUnary(ctx, req)
}

// UpdateHuntGroupIntegrationLinks calls api.v1alpha1.org.Org.UpdateHuntGroupIntegrationLinks.
func (c *orgClient) UpdateHuntGroupIntegrationLinks(ctx context.Context, req *connect_go.Request[org.UpdateHuntGroupIntegrationLinksRequest]) (*connect_go.Response[org.UpdateHuntGroupIntegrationLinksResponse], error) {
	return c.updateHuntGroupIntegrationLinks.CallUnary(ctx, req)
}

// GetHuntGroupClientInfoDisplayTemplate calls
// api.v1alpha1.org.Org.GetHuntGroupClientInfoDisplayTemplate.
func (c *orgClient) GetHuntGroupClientInfoDisplayTemplate(ctx context.Context, req *connect_go.Request[org.GetHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.GetHuntGroupClientInfoDisplayTemplateResponse], error) {
	return c.getHuntGroupClientInfoDisplayTemplate.CallUnary(ctx, req)
}

// CreateHuntGroupClientInfoDisplayTemplate calls
// api.v1alpha1.org.Org.CreateHuntGroupClientInfoDisplayTemplate.
func (c *orgClient) CreateHuntGroupClientInfoDisplayTemplate(ctx context.Context, req *connect_go.Request[org.CreateHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.CreateHuntGroupClientInfoDisplayTemplateResponse], error) {
	return c.createHuntGroupClientInfoDisplayTemplate.CallUnary(ctx, req)
}

// UpdateHuntGroupClientInfoDisplayTemplate calls
// api.v1alpha1.org.Org.UpdateHuntGroupClientInfoDisplayTemplate.
func (c *orgClient) UpdateHuntGroupClientInfoDisplayTemplate(ctx context.Context, req *connect_go.Request[org.UpdateHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.UpdateHuntGroupClientInfoDisplayTemplateResponse], error) {
	return c.updateHuntGroupClientInfoDisplayTemplate.CallUnary(ctx, req)
}

// DeleteHuntGroupClientInfoDisplayTemplate calls
// api.v1alpha1.org.Org.DeleteHuntGroupClientInfoDisplayTemplate.
func (c *orgClient) DeleteHuntGroupClientInfoDisplayTemplate(ctx context.Context, req *connect_go.Request[org.DeleteHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.DeleteHuntGroupClientInfoDisplayTemplateResponse], error) {
	return c.deleteHuntGroupClientInfoDisplayTemplate.CallUnary(ctx, req)
}

// CopyHuntGroupClientInfoDisplayTemplate calls
// api.v1alpha1.org.Org.CopyHuntGroupClientInfoDisplayTemplate.
func (c *orgClient) CopyHuntGroupClientInfoDisplayTemplate(ctx context.Context, req *connect_go.Request[org.CopyHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.CopyHuntGroupClientInfoDisplayTemplateResponse], error) {
	return c.copyHuntGroupClientInfoDisplayTemplate.CallUnary(ctx, req)
}

// CreateCampaignClientInfoDisplayTemplate calls
// api.v1alpha1.org.Org.CreateCampaignClientInfoDisplayTemplate.
func (c *orgClient) CreateCampaignClientInfoDisplayTemplate(ctx context.Context, req *connect_go.Request[org.CreateCampaignClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.CreateCampaignClientInfoDisplayTemplateResponse], error) {
	return c.createCampaignClientInfoDisplayTemplate.CallUnary(ctx, req)
}

// ListHuntGroupsWithClientInfoTemplateData calls
// api.v1alpha1.org.Org.ListHuntGroupsWithClientInfoTemplateData.
func (c *orgClient) ListHuntGroupsWithClientInfoTemplateData(ctx context.Context, req *connect_go.Request[org.ListHuntGroupsWithClientInfoTemplateDataRequest]) (*connect_go.Response[org.ListHuntGroupsWithClientInfoTemplateDataResponse], error) {
	return c.listHuntGroupsWithClientInfoTemplateData.CallUnary(ctx, req)
}

// ListAgentTriggers calls api.v1alpha1.org.Org.ListAgentTriggers.
func (c *orgClient) ListAgentTriggers(ctx context.Context, req *connect_go.Request[org.ListAgentTriggersRequest]) (*connect_go.Response[org.ListAgentTriggersResponse], error) {
	return c.listAgentTriggers.CallUnary(ctx, req)
}

// CopyAgentTrigger calls api.v1alpha1.org.Org.CopyAgentTrigger.
func (c *orgClient) CopyAgentTrigger(ctx context.Context, req *connect_go.Request[org.CopyAgentTriggerRequest]) (*connect_go.Response[org.CopyAgentTriggerResponse], error) {
	return c.copyAgentTrigger.CallUnary(ctx, req)
}

// UpdateAgentTriggers calls api.v1alpha1.org.Org.UpdateAgentTriggers.
func (c *orgClient) UpdateAgentTriggers(ctx context.Context, req *connect_go.Request[org.UpdateAgentTriggersRequest]) (*connect_go.Response[org.UpdateAgentTriggersResponse], error) {
	return c.updateAgentTriggers.CallUnary(ctx, req)
}

// ListHuntGroupScripts calls api.v1alpha1.org.Org.ListHuntGroupScripts.
func (c *orgClient) ListHuntGroupScripts(ctx context.Context, req *connect_go.Request[org.ListHuntGroupScriptsRequest]) (*connect_go.Response[org.ListHuntGroupScriptsResponse], error) {
	return c.listHuntGroupScripts.CallUnary(ctx, req)
}

// GetHuntGroupScript calls api.v1alpha1.org.Org.GetHuntGroupScript.
func (c *orgClient) GetHuntGroupScript(ctx context.Context, req *connect_go.Request[org.GetHuntGroupScriptRequest]) (*connect_go.Response[org.GetHuntGroupScriptResponse], error) {
	return c.getHuntGroupScript.CallUnary(ctx, req)
}

// CreateHuntGroupScript calls api.v1alpha1.org.Org.CreateHuntGroupScript.
func (c *orgClient) CreateHuntGroupScript(ctx context.Context, req *connect_go.Request[org.CreateHuntGroupScriptRequest]) (*connect_go.Response[org.CreateHuntGroupScriptResponse], error) {
	return c.createHuntGroupScript.CallUnary(ctx, req)
}

// UpdateHuntGroupScript calls api.v1alpha1.org.Org.UpdateHuntGroupScript.
func (c *orgClient) UpdateHuntGroupScript(ctx context.Context, req *connect_go.Request[org.UpdateHuntGroupScriptRequest]) (*connect_go.Response[org.UpdateHuntGroupScriptResponse], error) {
	return c.updateHuntGroupScript.CallUnary(ctx, req)
}

// DeleteHuntGroupScript calls api.v1alpha1.org.Org.DeleteHuntGroupScript.
func (c *orgClient) DeleteHuntGroupScript(ctx context.Context, req *connect_go.Request[org.DeleteHuntGroupScriptRequest]) (*connect_go.Response[org.DeleteHuntGroupScriptResponse], error) {
	return c.deleteHuntGroupScript.CallUnary(ctx, req)
}

// AssignScriptToHuntGroups calls api.v1alpha1.org.Org.AssignScriptToHuntGroups.
func (c *orgClient) AssignScriptToHuntGroups(ctx context.Context, req *connect_go.Request[org.AssignScriptToHuntGroupsRequest]) (*connect_go.Response[org.AssignScriptToHuntGroupsResponse], error) {
	return c.assignScriptToHuntGroups.CallUnary(ctx, req)
}

// UnassignScriptFromHuntGroups calls api.v1alpha1.org.Org.UnassignScriptFromHuntGroups.
func (c *orgClient) UnassignScriptFromHuntGroups(ctx context.Context, req *connect_go.Request[org.UnassignScriptFromHuntGroupsRequest]) (*connect_go.Response[org.UnassignScriptFromHuntGroupsResponse], error) {
	return c.unassignScriptFromHuntGroups.CallUnary(ctx, req)
}

// CreateTrust calls api.v1alpha1.org.Org.CreateTrust.
func (c *orgClient) CreateTrust(ctx context.Context, req *connect_go.Request[org.CreateTrustRequest]) (*connect_go.Response[org.CreateTrustResponse], error) {
	return c.createTrust.CallUnary(ctx, req)
}

// AcceptTrust calls api.v1alpha1.org.Org.AcceptTrust.
func (c *orgClient) AcceptTrust(ctx context.Context, req *connect_go.Request[org.AcceptTrustRequest]) (*connect_go.Response[org.AcceptTrustResponse], error) {
	return c.acceptTrust.CallUnary(ctx, req)
}

// RejectTrust calls api.v1alpha1.org.Org.RejectTrust.
func (c *orgClient) RejectTrust(ctx context.Context, req *connect_go.Request[org.RejectTrustRequest]) (*connect_go.Response[org.RejectTrustResponse], error) {
	return c.rejectTrust.CallUnary(ctx, req)
}

// GetTrust calls api.v1alpha1.org.Org.GetTrust.
func (c *orgClient) GetTrust(ctx context.Context, req *connect_go.Request[org.GetTrustRequest]) (*connect_go.Response[org.GetTrustResponse], error) {
	return c.getTrust.CallUnary(ctx, req)
}

// ListIncomingTrusts calls api.v1alpha1.org.Org.ListIncomingTrusts.
func (c *orgClient) ListIncomingTrusts(ctx context.Context, req *connect_go.Request[org.ListIncomingTrustsRequest]) (*connect_go.Response[org.ListIncomingTrustsResponse], error) {
	return c.listIncomingTrusts.CallUnary(ctx, req)
}

// ListGivenTrusts calls api.v1alpha1.org.Org.ListGivenTrusts.
func (c *orgClient) ListGivenTrusts(ctx context.Context, req *connect_go.Request[org.ListGivenTrustsRequest]) (*connect_go.Response[org.ListGivenTrustsResponse], error) {
	return c.listGivenTrusts.CallUnary(ctx, req)
}

// ListAssignableTrusts calls api.v1alpha1.org.Org.ListAssignableTrusts.
func (c *orgClient) ListAssignableTrusts(ctx context.Context, req *connect_go.Request[org.ListAssignableTrustsRequest]) (*connect_go.Response[org.ListAssignableTrustsResponse], error) {
	return c.listAssignableTrusts.CallUnary(ctx, req)
}

// DeleteTrust calls api.v1alpha1.org.Org.DeleteTrust.
func (c *orgClient) DeleteTrust(ctx context.Context, req *connect_go.Request[org.DeleteTrustRequest]) (*connect_go.Response[org.DeleteTrustResponse], error) {
	return c.deleteTrust.CallUnary(ctx, req)
}

// AssignTrust calls api.v1alpha1.org.Org.AssignTrust.
func (c *orgClient) AssignTrust(ctx context.Context, req *connect_go.Request[org.AssignTrustRequest]) (*connect_go.Response[org.AssignTrustResponse], error) {
	return c.assignTrust.CallUnary(ctx, req)
}

// UnassignTrust calls api.v1alpha1.org.Org.UnassignTrust.
func (c *orgClient) UnassignTrust(ctx context.Context, req *connect_go.Request[org.UnassignTrustRequest]) (*connect_go.Response[org.UnassignTrustResponse], error) {
	return c.unassignTrust.CallUnary(ctx, req)
}

// CreateLabel calls api.v1alpha1.org.Org.CreateLabel.
func (c *orgClient) CreateLabel(ctx context.Context, req *connect_go.Request[org.CreateLabelRequest]) (*connect_go.Response[org.CreateLabelResponse], error) {
	return c.createLabel.CallUnary(ctx, req)
}

// DeleteLabel calls api.v1alpha1.org.Org.DeleteLabel.
func (c *orgClient) DeleteLabel(ctx context.Context, req *connect_go.Request[org.DeleteLabelRequest]) (*connect_go.Response[org.DeleteLabelResponse], error) {
	return c.deleteLabel.CallUnary(ctx, req)
}

// ListLabels calls api.v1alpha1.org.Org.ListLabels.
func (c *orgClient) ListLabels(ctx context.Context, req *connect_go.Request[org.ListLabelsRequest]) (*connect_go.Response[org.ListLabelsResponse], error) {
	return c.listLabels.CallUnary(ctx, req)
}

// GetLabel calls api.v1alpha1.org.Org.GetLabel.
func (c *orgClient) GetLabel(ctx context.Context, req *connect_go.Request[org.GetLabelRequest]) (*connect_go.Response[org.GetLabelResponse], error) {
	return c.getLabel.CallUnary(ctx, req)
}

// UpdateLabel calls api.v1alpha1.org.Org.UpdateLabel.
func (c *orgClient) UpdateLabel(ctx context.Context, req *connect_go.Request[org.UpdateLabelRequest]) (*connect_go.Response[org.UpdateLabelResponse], error) {
	return c.updateLabel.CallUnary(ctx, req)
}

// AssignLabel calls api.v1alpha1.org.Org.AssignLabel.
func (c *orgClient) AssignLabel(ctx context.Context, req *connect_go.Request[org.AssignLabelRequest]) (*connect_go.Response[org.AssignLabelResponse], error) {
	return c.assignLabel.CallUnary(ctx, req)
}

// UnassignLabel calls api.v1alpha1.org.Org.UnassignLabel.
func (c *orgClient) UnassignLabel(ctx context.Context, req *connect_go.Request[org.UnassignLabelRequest]) (*connect_go.Response[org.UnassignLabelResponse], error) {
	return c.unassignLabel.CallUnary(ctx, req)
}

// GetAssignmentCounts calls api.v1alpha1.org.Org.GetAssignmentCounts.
func (c *orgClient) GetAssignmentCounts(ctx context.Context, req *connect_go.Request[org.GetAssignmentCountsRequest]) (*connect_go.Response[org.GetAssignmentCountsResponse], error) {
	return c.getAssignmentCounts.CallUnary(ctx, req)
}

// GetAssignableLabels calls api.v1alpha1.org.Org.GetAssignableLabels.
func (c *orgClient) GetAssignableLabels(ctx context.Context, req *connect_go.Request[org.GetAssignableLabelsRequest]) (*connect_go.Response[org.GetAssignableLabelsResponse], error) {
	return c.getAssignableLabels.CallUnary(ctx, req)
}

// GetPermissions calls api.v1alpha1.org.Org.GetPermissions.
func (c *orgClient) GetPermissions(ctx context.Context, req *connect_go.Request[org.GetPermissionsRequest]) (*connect_go.Response[org.GetPermissionsResponse], error) {
	return c.getPermissions.CallUnary(ctx, req)
}

// GetUserPermissions calls api.v1alpha1.org.Org.GetUserPermissions.
func (c *orgClient) GetUserPermissions(ctx context.Context, req *connect_go.Request[org.GetUserPermissionsRequest]) (*connect_go.Response[org.GetUserPermissionsResponse], error) {
	return c.getUserPermissions.CallUnary(ctx, req)
}

// CreatePermissionGroup calls api.v1alpha1.org.Org.CreatePermissionGroup.
func (c *orgClient) CreatePermissionGroup(ctx context.Context, req *connect_go.Request[org.CreatePermissionGroupRequest]) (*connect_go.Response[org.CreatePermissionGroupResponse], error) {
	return c.createPermissionGroup.CallUnary(ctx, req)
}

// UpdatePermissionGroup calls api.v1alpha1.org.Org.UpdatePermissionGroup.
func (c *orgClient) UpdatePermissionGroup(ctx context.Context, req *connect_go.Request[org.UpdatePermissionGroupRequest]) (*connect_go.Response[org.UpdatePermissionGroupResponse], error) {
	return c.updatePermissionGroup.CallUnary(ctx, req)
}

// DeletePermissionGroup calls api.v1alpha1.org.Org.DeletePermissionGroup.
func (c *orgClient) DeletePermissionGroup(ctx context.Context, req *connect_go.Request[org.DeletePermissionGroupRequest]) (*connect_go.Response[org.DeletePermissionGroupResponse], error) {
	return c.deletePermissionGroup.CallUnary(ctx, req)
}

// ListPermissionGroups calls api.v1alpha1.org.Org.ListPermissionGroups.
func (c *orgClient) ListPermissionGroups(ctx context.Context, req *connect_go.Request[org.ListPermissionGroupsRequest]) (*connect_go.Response[org.ListPermissionGroupsResponse], error) {
	return c.listPermissionGroups.CallUnary(ctx, req)
}

// ListPermissionGroupsByOrgId calls api.v1alpha1.org.Org.ListPermissionGroupsByOrgId.
func (c *orgClient) ListPermissionGroupsByOrgId(ctx context.Context, req *connect_go.Request[org.ListPermissionGroupsByOrgIdRequest]) (*connect_go.Response[org.ListPermissionGroupsByOrgIdResponse], error) {
	return c.listPermissionGroupsByOrgId.CallUnary(ctx, req)
}

// AssignUsersPermissionGroup calls api.v1alpha1.org.Org.AssignUsersPermissionGroup.
func (c *orgClient) AssignUsersPermissionGroup(ctx context.Context, req *connect_go.Request[org.AssignUsersPermissionGroupRequest]) (*connect_go.Response[org.AssignUsersPermissionGroupResponse], error) {
	return c.assignUsersPermissionGroup.CallUnary(ctx, req)
}

// RevokeUsersPermissionGroup calls api.v1alpha1.org.Org.RevokeUsersPermissionGroup.
func (c *orgClient) RevokeUsersPermissionGroup(ctx context.Context, req *connect_go.Request[org.RevokeUsersPermissionGroupRequest]) (*connect_go.Response[org.RevokeUsersPermissionGroupResponse], error) {
	return c.revokeUsersPermissionGroup.CallUnary(ctx, req)
}

// AssignLabels calls api.v1alpha1.org.Org.AssignLabels.
func (c *orgClient) AssignLabels(ctx context.Context, req *connect_go.Request[org.AssignLabelsRequest]) (*connect_go.Response[org.AssignLabelsResponse], error) {
	return c.assignLabels.CallUnary(ctx, req)
}

// RevokeLabels calls api.v1alpha1.org.Org.RevokeLabels.
func (c *orgClient) RevokeLabels(ctx context.Context, req *connect_go.Request[org.RevokeLabelsRequest]) (*connect_go.Response[org.RevokeLabelsResponse], error) {
	return c.revokeLabels.CallUnary(ctx, req)
}

// AssignAccountOwnerPermissionToUser calls api.v1alpha1.org.Org.AssignAccountOwnerPermissionToUser.
func (c *orgClient) AssignAccountOwnerPermissionToUser(ctx context.Context, req *connect_go.Request[org.AssignAccountOwnerPermissionToUserRequest]) (*connect_go.Response[org.AssignAccountOwnerPermissionToUserResponse], error) {
	return c.assignAccountOwnerPermissionToUser.CallUnary(ctx, req)
}

// RevokeAccountOwnerPermissionFromUser calls
// api.v1alpha1.org.Org.RevokeAccountOwnerPermissionFromUser.
func (c *orgClient) RevokeAccountOwnerPermissionFromUser(ctx context.Context, req *connect_go.Request[org.RevokeAccountOwnerPermissionFromUserRequest]) (*connect_go.Response[org.RevokeAccountOwnerPermissionFromUserResponse], error) {
	return c.revokeAccountOwnerPermissionFromUser.CallUnary(ctx, req)
}

// InitDefaultPermissionGroups calls api.v1alpha1.org.Org.InitDefaultPermissionGroups.
func (c *orgClient) InitDefaultPermissionGroups(ctx context.Context, req *connect_go.Request[org.InitDefaultPermissionGroupsRequest]) (*connect_go.Response[org.InitDefaultPermissionGroupsResponse], error) {
	return c.initDefaultPermissionGroups.CallUnary(ctx, req)
}

// GetAccountOwnerGroup calls api.v1alpha1.org.Org.GetAccountOwnerGroup.
func (c *orgClient) GetAccountOwnerGroup(ctx context.Context, req *connect_go.Request[org.GetAccountOwnerGroupRequest]) (*connect_go.Response[org.GetAccountOwnerGroupResponse], error) {
	return c.getAccountOwnerGroup.CallUnary(ctx, req)
}

// GetLicenses calls api.v1alpha1.org.Org.GetLicenses.
func (c *orgClient) GetLicenses(ctx context.Context, req *connect_go.Request[org.GetLicensesRequest]) (*connect_go.Response[org.GetLicensesResponse], error) {
	return c.getLicenses.CallUnary(ctx, req)
}

// GetOrgLicenses calls api.v1alpha1.org.Org.GetOrgLicenses.
func (c *orgClient) GetOrgLicenses(ctx context.Context, req *connect_go.Request[org.GetOrgLicensesRequest]) (*connect_go.Response[org.GetOrgLicensesResponse], error) {
	return c.getOrgLicenses.CallUnary(ctx, req)
}

// UpdateLicenses calls api.v1alpha1.org.Org.UpdateLicenses.
func (c *orgClient) UpdateLicenses(ctx context.Context, req *connect_go.Request[org.UpdateLicensesRequest]) (*connect_go.Response[org.UpdateLicensesResponse], error) {
	return c.updateLicenses.CallUnary(ctx, req)
}

// RemovePermissionFromAllPermissionGroups calls
// api.v1alpha1.org.Org.RemovePermissionFromAllPermissionGroups.
func (c *orgClient) RemovePermissionFromAllPermissionGroups(ctx context.Context, req *connect_go.Request[org.RemovePermissionFromAllPermissionGroupsRequest]) (*connect_go.Response[org.RemovePermissionFromAllPermissionGroupsResponse], error) {
	return c.removePermissionFromAllPermissionGroups.CallUnary(ctx, req)
}

// ListP3PermissionGroups calls api.v1alpha1.org.Org.ListP3PermissionGroups.
func (c *orgClient) ListP3PermissionGroups(ctx context.Context, req *connect_go.Request[org.ListP3PermissionGroupsRequest]) (*connect_go.Response[org.ListP3PermissionGroupsResponse], error) {
	return c.listP3PermissionGroups.CallUnary(ctx, req)
}

// ListP3PermissionGroupsByOrgId calls api.v1alpha1.org.Org.ListP3PermissionGroupsByOrgId.
func (c *orgClient) ListP3PermissionGroupsByOrgId(ctx context.Context, req *connect_go.Request[org.ListP3PermissionGroupsRequest]) (*connect_go.Response[org.ListP3PermissionGroupsResponse], error) {
	return c.listP3PermissionGroupsByOrgId.CallUnary(ctx, req)
}

// CreateP3PermissionGroup calls api.v1alpha1.org.Org.CreateP3PermissionGroup.
func (c *orgClient) CreateP3PermissionGroup(ctx context.Context, req *connect_go.Request[org.CreateP3PermissionGroupRequest]) (*connect_go.Response[org.CreateP3PermissionGroupResponse], error) {
	return c.createP3PermissionGroup.CallUnary(ctx, req)
}

// UpdateP3PermissionGroup calls api.v1alpha1.org.Org.UpdateP3PermissionGroup.
func (c *orgClient) UpdateP3PermissionGroup(ctx context.Context, req *connect_go.Request[org.UpdateP3PermissionGroupRequest]) (*connect_go.Response[org.UpdateP3PermissionGroupResponse], error) {
	return c.updateP3PermissionGroup.CallUnary(ctx, req)
}

// UpdateP3PermissionGroupByOrgId calls api.v1alpha1.org.Org.UpdateP3PermissionGroupByOrgId.
func (c *orgClient) UpdateP3PermissionGroupByOrgId(ctx context.Context, req *connect_go.Request[org.UpdateP3PermissionGroupByOrgIdRequest]) (*connect_go.Response[org.UpdateP3PermissionGroupByOrgIdResponse], error) {
	return c.updateP3PermissionGroupByOrgId.CallUnary(ctx, req)
}

// DeleteP3PermissionGroup calls api.v1alpha1.org.Org.DeleteP3PermissionGroup.
func (c *orgClient) DeleteP3PermissionGroup(ctx context.Context, req *connect_go.Request[org.DeleteP3PermissionGroupRequest]) (*connect_go.Response[org.DeleteP3PermissionGroupResponse], error) {
	return c.deleteP3PermissionGroup.CallUnary(ctx, req)
}

// AssignUsersP3PermissionGroup calls api.v1alpha1.org.Org.AssignUsersP3PermissionGroup.
func (c *orgClient) AssignUsersP3PermissionGroup(ctx context.Context, req *connect_go.Request[org.AssignUsersP3PermissionGroupRequest]) (*connect_go.Response[org.AssignUsersP3PermissionGroupResponse], error) {
	return c.assignUsersP3PermissionGroup.CallUnary(ctx, req)
}

// RevokeUsersP3PermissionGroup calls api.v1alpha1.org.Org.RevokeUsersP3PermissionGroup.
func (c *orgClient) RevokeUsersP3PermissionGroup(ctx context.Context, req *connect_go.Request[org.RevokeUsersP3PermissionGroupRequest]) (*connect_go.Response[org.RevokeUsersP3PermissionGroupResponse], error) {
	return c.revokeUsersP3PermissionGroup.CallUnary(ctx, req)
}

// RefreshMfaLockout calls api.v1alpha1.org.Org.RefreshMfaLockout.
func (c *orgClient) RefreshMfaLockout(ctx context.Context, req *connect_go.Request[org.RefreshMfaLockoutRequest]) (*connect_go.Response[org.RefreshMfaLockoutResponse], error) {
	return c.refreshMfaLockout.CallUnary(ctx, req)
}

// RefreshMfaLockoutByOrgId calls api.v1alpha1.org.Org.RefreshMfaLockoutByOrgId.
func (c *orgClient) RefreshMfaLockoutByOrgId(ctx context.Context, req *connect_go.Request[org.RefreshMfaLockoutByOrgIdRequest]) (*connect_go.Response[org.RefreshMfaLockoutByOrgIdResponse], error) {
	return c.refreshMfaLockoutByOrgId.CallUnary(ctx, req)
}

// SetMfaType calls api.v1alpha1.org.Org.SetMfaType.
func (c *orgClient) SetMfaType(ctx context.Context, req *connect_go.Request[org.SetMfaTypeRequest]) (*connect_go.Response[org.SetMfaTypeResponse], error) {
	return c.setMfaType.CallUnary(ctx, req)
}

// SetMyMfaType calls api.v1alpha1.org.Org.SetMyMfaType.
func (c *orgClient) SetMyMfaType(ctx context.Context, req *connect_go.Request[org.SetMyMfaTypeRequest]) (*connect_go.Response[org.SetMyMfaTypeResponse], error) {
	return c.setMyMfaType.CallUnary(ctx, req)
}

// EnableUserMfa calls api.v1alpha1.org.Org.EnableUserMfa.
func (c *orgClient) EnableUserMfa(ctx context.Context, req *connect_go.Request[org.EnableUserMfaRequest]) (*connect_go.Response[org.EnableUserMfaResponse], error) {
	return c.enableUserMfa.CallUnary(ctx, req)
}

// EnableMyUserMfa calls api.v1alpha1.org.Org.EnableMyUserMfa.
func (c *orgClient) EnableMyUserMfa(ctx context.Context, req *connect_go.Request[org.EnableMyUserMfaRequest]) (*connect_go.Response[org.EnableMyUserMfaResponse], error) {
	return c.enableMyUserMfa.CallUnary(ctx, req)
}

// GetUserMfaInfo calls api.v1alpha1.org.Org.GetUserMfaInfo.
func (c *orgClient) GetUserMfaInfo(ctx context.Context, req *connect_go.Request[org.GetUserMfaInfoRequest]) (*connect_go.Response[org.GetUserMfaInfoResponse], error) {
	return c.getUserMfaInfo.CallUnary(ctx, req)
}

// GetMyUserMfaInfo calls api.v1alpha1.org.Org.GetMyUserMfaInfo.
func (c *orgClient) GetMyUserMfaInfo(ctx context.Context, req *connect_go.Request[org.GetMyUserMfaInfoRequest]) (*connect_go.Response[org.GetMyUserMfaInfoResponse], error) {
	return c.getMyUserMfaInfo.CallUnary(ctx, req)
}

// GetMyAllowedMfaMethods calls api.v1alpha1.org.Org.GetMyAllowedMfaMethods.
func (c *orgClient) GetMyAllowedMfaMethods(ctx context.Context, req *connect_go.Request[org.GetMyAllowedMfaMethodsRequest]) (*connect_go.Response[org.GetMyAllowedMfaMethodsResponse], error) {
	return c.getMyAllowedMfaMethods.CallUnary(ctx, req)
}

// CreateBusinessHours calls api.v1alpha1.org.Org.CreateBusinessHours.
//
// Deprecated: do not use.
func (c *orgClient) CreateBusinessHours(ctx context.Context, req *connect_go.Request[org.CreateBusinessHoursRequest]) (*connect_go.Response[org.CreateBusinessHoursResponse], error) {
	return c.createBusinessHours.CallUnary(ctx, req)
}

// UpdateBusinessHours calls api.v1alpha1.org.Org.UpdateBusinessHours.
//
// Deprecated: do not use.
func (c *orgClient) UpdateBusinessHours(ctx context.Context, req *connect_go.Request[org.UpdateBusinessHoursRequest]) (*connect_go.Response[org.UpdateBusinessHoursResponse], error) {
	return c.updateBusinessHours.CallUnary(ctx, req)
}

// AddGroupedUserIPRestrictions calls api.v1alpha1.org.Org.AddGroupedUserIPRestrictions.
func (c *orgClient) AddGroupedUserIPRestrictions(ctx context.Context, req *connect_go.Request[org.AddGroupedUserIPRestrictionsRequest]) (*connect_go.Response[org.AddGroupedUserIPRestrictionsResponse], error) {
	return c.addGroupedUserIPRestrictions.CallUnary(ctx, req)
}

// RemoveGroupedUserIPRestrictions calls api.v1alpha1.org.Org.RemoveGroupedUserIPRestrictions.
func (c *orgClient) RemoveGroupedUserIPRestrictions(ctx context.Context, req *connect_go.Request[org.RemoveGroupedUserIPRestrictionsRequest]) (*connect_go.Response[org.RemoveGroupedUserIPRestrictionsResponse], error) {
	return c.removeGroupedUserIPRestrictions.CallUnary(ctx, req)
}

// ListUsersAllowedIps calls api.v1alpha1.org.Org.ListUsersAllowedIps.
func (c *orgClient) ListUsersAllowedIps(ctx context.Context, req *connect_go.Request[org.ListUsersAllowedIpsRequest]) (*connect_go.Response[org.ListUsersAllowedIpsResponse], error) {
	return c.listUsersAllowedIps.CallUnary(ctx, req)
}

// OrgHandler is an implementation of the api.v1alpha1.org.Org service.
type OrgHandler interface {
	// CreateOrganization creates a new organization entity and enables it for the
	// region it is getting created in.
	CreateOrganization(context.Context, *connect_go.Request[org.CreateOrganizationRequest]) (*connect_go.Response[org.CreateOrganizationResponse], error)
	// GetOrganization returns a single organization.
	GetOrganization(context.Context, *connect_go.Request[org.GetOrganizationRequest]) (*connect_go.Response[org.GetOrganizationResponse], error)
	// GetOrganizationById returns a single organization by a given orgId.
	GetOrganizationById(context.Context, *connect_go.Request[org.GetOrganizationByIdRequest]) (*connect_go.Response[org.GetOrganizationByIdResponse], error)
	// UpdateOrganization updates the mutable fields on the Organization entity
	// using the provided field mask.
	UpdateOrganization(context.Context, *connect_go.Request[org.UpdateOrganizationRequest]) (*connect_go.Response[org.UpdateOrganizationResponse], error)
	// Archives an organization. An archived organization effectively disappears, but isn't deleted.
	ArchiveOrganization(context.Context, *connect_go.Request[org.ArchiveOrganizationRequest]) (*connect_go.Response[org.ArchiveOrganizationResponse], error)
	// Unarchives an organization. An archived organization effectively disappears, but isn't deleted.
	UnArchiveOrganization(context.Context, *connect_go.Request[org.UnArchiveOrganizationRequest]) (*connect_go.Response[org.UnArchiveOrganizationResponse], error)
	// ListAllOrganizationsGlobally lists all organizations globally (archived and unarchived).
	ListAllOrganizationsGlobally(context.Context, *connect_go.Request[org.ListAllOrganizationsGloballyRequest], *connect_go.ServerStream[org.ListAllOrganizationsGloballyResponse]) error
	// ListOrganizationsByRegion lists organizations in the given region (unarchived).
	ListOrganizationsByRegion(context.Context, *connect_go.Request[org.ListOrganizationsByRegionRequest], *connect_go.ServerStream[org.ListOrganizationsByRegionResponse]) error
	// ListArchivedOrganizations lists all archived organizations in the current region.
	ListArchivedOrganizations(context.Context, *connect_go.Request[org.ListArchivedOrganizationsRequest], *connect_go.ServerStream[org.ListArchivedOrganizationsResponse]) error
	// ConvertOrgToManual converts an organization to manual only by org id.
	ConvertOrgToManual(context.Context, *connect_go.Request[org.ConvertOrgToManualRequest]) (*connect_go.Response[org.ConvertOrgToManualResponse], error)
	// Lists all orgs under the p3 hierarchy
	ListOwnedOrgs(context.Context, *connect_go.Request[org.ListOwnedOrgsRequest], *connect_go.ServerStream[org.ListOwnedOrgsResponse]) error
	// GetOrganizationPreferences returns general preferences controlling basic
	// organization related properties.
	GetOrganizationPreferences(context.Context, *connect_go.Request[org.GetOrganizationPreferencesRequest]) (*connect_go.Response[org.GetOrganizationPreferencesResponse], error)
	// UpdateOrganizationPreferences updates general preferences controlling basic
	// organization related properties.
	UpdateOrganizationPreferences(context.Context, *connect_go.Request[org.UpdateOrganizationPreferencesRequest]) (*connect_go.Response[org.UpdateOrganizationPreferencesResponse], error)
	// GetAgentPreferences returns preferences controlling direct agent properties.
	GetAgentPreferences(context.Context, *connect_go.Request[org.GetAgentPreferencesRequest]) (*connect_go.Response[org.GetAgentPreferencesResponse], error)
	// UpdateAgentPreferences updates preferences controlling direct agent
	// properties.
	UpdateAgentPreferences(context.Context, *connect_go.Request[org.UpdateAgentPreferencesRequest]) (*connect_go.Response[org.UpdateAgentPreferencesResponse], error)
	// GetContactPreferences returns preferences for contact lists.
	GetContactPreferences(context.Context, *connect_go.Request[org.GetContactPreferencesRequest]) (*connect_go.Response[org.GetContactPreferencesResponse], error)
	// UpdateContactPreferences updates preferences for contact lists.
	UpdateContactPreferences(context.Context, *connect_go.Request[org.UpdateContactPreferencesRequest]) (*connect_go.Response[org.UpdateContactPreferencesResponse], error)
	// GetAuthenticationPreferences returns preferences for controlling the
	GetAuthenticationPreferences(context.Context, *connect_go.Request[org.GetAuthenticationPreferencesRequest]) (*connect_go.Response[org.GetAuthenticationPreferencesResponse], error)
	// UpdateAuthenticationPreferences updates preferences for controlling the
	UpdateAuthenticationPreferences(context.Context, *connect_go.Request[org.UpdateAuthenticationPreferencesRequest]) (*connect_go.Response[org.UpdateAuthenticationPreferencesResponse], error)
	// GetWebhookPreferences returns preferences for web-hook push URLs.
	GetWebhookPreferences(context.Context, *connect_go.Request[org.GetWebhookPreferencesRequest]) (*connect_go.Response[org.GetWebhookPreferencesResponse], error)
	// UpdateWebhookPreferences updates preferences for web-hook push URLs.
	UpdateWebhookPreferences(context.Context, *connect_go.Request[org.UpdateWebhookPreferencesRequest]) (*connect_go.Response[org.UpdateWebhookPreferencesResponse], error)
	// GetDashboardGeneralPreferences returns preferences for agent dashboard
	// controls.
	GetDashboardGeneralPreferences(context.Context, *connect_go.Request[org.GetDashboardGeneralPreferencesRequest]) (*connect_go.Response[org.GetDashboardGeneralPreferencesResponse], error)
	// UpdateDashboardGeneralPreferences updates preferences for agent dashboard
	// controls.
	UpdateDashboardGeneralPreferences(context.Context, *connect_go.Request[org.UpdateDashboardGeneralPreferencesRequest]) (*connect_go.Response[org.UpdateDashboardGeneralPreferencesResponse], error)
	// GetDashboardQueuePreferences returns preferences for controlling agent queue
	// and hold table settings.
	GetDashboardQueuePreferences(context.Context, *connect_go.Request[org.GetDashboardQueuePreferencesRequest]) (*connect_go.Response[org.GetDashboardQueuePreferencesResponse], error)
	// UpdateDashboardQueuePreferences updates preferences for controlling agent
	// queue and hold table settings.
	UpdateDashboardQueuePreferences(context.Context, *connect_go.Request[org.UpdateDashboardQueuePreferencesRequest]) (*connect_go.Response[org.UpdateDashboardQueuePreferencesResponse], error)
	// GetPhonePreferences returns preferences for phone dial options, call ID,
	// and other call properties.
	GetPhonePreferences(context.Context, *connect_go.Request[org.GetPhonePreferencesRequest]) (*connect_go.Response[org.GetPhonePreferencesResponse], error)
	// UpdatePhonePreferences updates preferences for phone dial options, call ID,
	// and other call properties.
	UpdatePhonePreferences(context.Context, *connect_go.Request[org.UpdatePhonePreferencesRequest]) (*connect_go.Response[org.UpdatePhonePreferencesResponse], error)
	// GetCompliancePreferences returns preferences for natural language compliance
	// campaign settings.
	GetCompliancePreferences(context.Context, *connect_go.Request[org.GetCompliancePreferencesRequest]) (*connect_go.Response[org.GetCompliancePreferencesResponse], error)
	// UpdateCompliancePreferences updates preferences for natural language
	// compliance campaign settings.
	UpdateCompliancePreferences(context.Context, *connect_go.Request[org.UpdateCompliancePreferencesRequest]) (*connect_go.Response[org.UpdateCompliancePreferencesResponse], error)
	// GetBroadcastPreferences returns preferences for editing templates and
	// broadcast scheduling properties.
	GetBroadcastPreferences(context.Context, *connect_go.Request[org.GetBroadcastPreferencesRequest]) (*connect_go.Response[org.GetBroadcastPreferencesResponse], error)
	// UpdateBroadcastPreferences updates preferences for editing templates and
	// broadcast scheduling properties.
	UpdateBroadcastPreferences(context.Context, *connect_go.Request[org.UpdateBroadcastPreferencesRequest]) (*connect_go.Response[org.UpdateBroadcastPreferencesResponse], error)
	// GetSchedulePreferences returns preferences for editing campaign scheduling
	// properties.
	GetSchedulePreferences(context.Context, *connect_go.Request[org.GetSchedulePreferencesRequest]) (*connect_go.Response[org.GetSchedulePreferencesResponse], error)
	// UpdateSchedulePreferences updates preferences for editing campaign
	// scheduling properties.
	UpdateSchedulePreferences(context.Context, *connect_go.Request[org.UpdateSchedulePreferencesRequest]) (*connect_go.Response[org.UpdateSchedulePreferencesResponse], error)
	// GetEmailSmsPreferences returns preferences for email and SMS management.
	GetEmailSmsPreferences(context.Context, *connect_go.Request[org.GetEmailSmsPreferencesRequest]) (*connect_go.Response[org.GetEmailSmsPreferencesResponse], error)
	// UpdateEmailSmsPreferences updates preferences for email and SMS management.
	UpdateEmailSmsPreferences(context.Context, *connect_go.Request[org.UpdateEmailSmsPreferencesRequest]) (*connect_go.Response[org.UpdateEmailSmsPreferencesResponse], error)
	// GetBusinessPreferences returns preferences for business intelligence.
	GetBusinessPreferences(context.Context, *connect_go.Request[org.GetBusinessPreferencesRequest]) (*connect_go.Response[org.GetBusinessPreferencesResponse], error)
	// UpdateBusinessPreferences updates preferences for business intelligence.
	UpdateBusinessPreferences(context.Context, *connect_go.Request[org.UpdateBusinessPreferencesRequest]) (*connect_go.Response[org.UpdateBusinessPreferencesResponse], error)
	// UpdateAdminBusinessPreferences updates preferences for business intelligence.
	UpdateAdminBusinessPreferences(context.Context, *connect_go.Request[org.UpdateAdminBusinessPreferencesRequest]) (*connect_go.Response[org.UpdateAdminBusinessPreferencesResponse], error)
	// GetScorecardsPreferences returns preferences for scorecards.
	GetScorecardsPreferences(context.Context, *connect_go.Request[org.GetScorecardsPreferencesRequest]) (*connect_go.Response[org.GetScorecardsPreferencesResponse], error)
	// UpdateScorecardsPreferences updates preferences for scorecards.
	UpdateScorecardsPreferences(context.Context, *connect_go.Request[org.UpdateScorecardsPreferencesRequest]) (*connect_go.Response[org.UpdateScorecardsPreferencesResponse], error)
	// GetVoiceAnalyticsPreferences returns preferences for voice analytics.
	GetVoiceAnalyticsPreferences(context.Context, *connect_go.Request[org.GetVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[org.GetVoiceAnalyticsPreferencesResponse], error)
	// ListVoiceAnalyticsPreferences lists preferences for voice analytics.
	ListVoiceAnalyticsPreferences(context.Context, *connect_go.Request[org.ListVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[org.ListVoiceAnalyticsPreferencesResponse], error)
	// UpdateVoiceAnalyticsPreferences updates preferences for voice analytics.
	UpdateVoiceAnalyticsPreferences(context.Context, *connect_go.Request[org.UpdateVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[org.UpdateVoiceAnalyticsPreferencesResponse], error)
	// GetEndOfDayPreferences returns preferences for automated report jobs
	GetEndOfDayPreferences(context.Context, *connect_go.Request[org.GetEndOfDayPreferencesRequest]) (*connect_go.Response[org.GetEndOfDayPreferencesResponse], error)
	// UpdateEndOfDayPreferences updates preferences for automated report jobs
	UpdateEndOfDayPreferences(context.Context, *connect_go.Request[org.UpdateEndOfDayPreferencesRequest]) (*connect_go.Response[org.UpdateEndOfDayPreferencesResponse], error)
	// GetReportFilterPreferences returns preferences for filters in reports and
	GetReportFilterPreferences(context.Context, *connect_go.Request[org.GetFilterPreferencesRequest]) (*connect_go.Response[org.GetFilterPreferencesResponse], error)
	// UpdateReportFilterPreferences updates preferences for filters in reports and
	UpdateReportFilterPreferences(context.Context, *connect_go.Request[org.UpdateFilterPreferencesRequest]) (*connect_go.Response[org.UpdateFilterPreferencesResponse], error)
	// GetRecordingPreferences returns preferences for audio recording properties.
	GetRecordingPreferences(context.Context, *connect_go.Request[org.GetRecordingPreferencesRequest]) (*connect_go.Response[org.GetRecordingPreferencesResponse], error)
	// UpdateRecordingPreferences updates preferences for audio recording
	// properties.
	UpdateRecordingPreferences(context.Context, *connect_go.Request[org.UpdateRecordingPreferencesRequest]) (*connect_go.Response[org.UpdateRecordingPreferencesResponse], error)
	// GetAdminClientPreferences returns preferences for essential organization
	// properties only to be used by account managers and customer support.
	GetAdminClientPreferences(context.Context, *connect_go.Request[org.GetAdminClientPreferencesRequest]) (*connect_go.Response[org.GetAdminClientPreferencesResponse], error)
	// UpdateAdminClientPreferences updates preferences for essential organization
	UpdateAdminClientPreferences(context.Context, *connect_go.Request[org.UpdateAdminClientPreferencesRequest]) (*connect_go.Response[org.UpdateAdminClientPreferencesResponse], error)
	// AcceptLinkbackRecordingTerms insert a digital signature acceptance activity
	// log upon client acknowledgement of terms and conditions usage for linkback
	// recorded calls.
	AcceptLinkbackRecordingTerms(context.Context, *connect_go.Request[org.AcceptLinkbackRecordingTermsRequest]) (*connect_go.Response[org.AcceptLinkbackRecordingTermsResponse], error)
	// LinkbackUpdateBroadcastTemplates updates broadcast template options action
	// parameters to reflect the linkback recording usage value.
	LinkbackUpdateBroadcastTemplates(context.Context, *connect_go.Request[org.LinkbackUpdateBroadcastTemplatesRequest]) (*connect_go.Response[org.LinkbackUpdateBroadcastTemplatesResponse], error)
	// RecordEmailUnsubscribeAcknowledgement insert an activity log upon client
	// acknowledgement of responsibility for their own email unsubscribe links.
	RecordEmailUnsubscribeAcknowledgement(context.Context, *connect_go.Request[org.RecordEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[org.RecordEmailUnsubscribeAcknowledgementResponse], error)
	// ClearEmailUnsubscribeAcknowledgement insert an activity log upon the client
	// revoking their responsibility for email unsubscribe links.
	ClearEmailUnsubscribeAcknowledgement(context.Context, *connect_go.Request[org.ClearEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[org.ClearEmailUnsubscribeAcknowledgementResponse], error)
	// ListBusinessHours returns all business hours for an Org.
	//
	// Deprecated: do not use.
	ListBusinessHours(context.Context, *connect_go.Request[org.ListBusinessHoursRequest]) (*connect_go.Response[org.ListBusinessHoursResponse], error)
	// GetBusinessHours returns the business hours for the ID.
	//
	// Deprecated: do not use.
	GetBusinessHours(context.Context, *connect_go.Request[org.GetBusinessHoursRequest]) (*connect_go.Response[org.GetBusinessHoursResponse], error)
	// SetBusinessHours initializes a business hours object
	//
	// Deprecated: do not use.
	SetBusinessHours(context.Context, *connect_go.Request[org.SetBusinessHoursRequest]) (*connect_go.Response[org.SetBusinessHoursResponse], error)
	// AddIntervalToBusinessHours adds a day interval to a business hours object
	//
	// Deprecated: do not use.
	AddIntervalToBusinessHours(context.Context, *connect_go.Request[org.AddIntervalToBusinessHoursRequest]) (*connect_go.Response[org.AddIntervalToBusinessHoursResponse], error)
	// RemoveIntervalFromBusinessHours removes a day interval from a business hours object
	//
	// Deprecated: do not use.
	RemoveIntervalFromBusinessHours(context.Context, *connect_go.Request[org.RemoveIntervalFromBusinessHoursRequest]) (*connect_go.Response[org.RemoveIntervalFromBusinessHoursResponse], error)
	// UpdateBusinessHoursInfo updates the general info of a business hours object
	//
	// Deprecated: do not use.
	UpdateBusinessHoursInfo(context.Context, *connect_go.Request[org.UpdateBusinessHoursInfoRequest]) (*connect_go.Response[org.UpdateBusinessHoursInfoResponse], error)
	// DeleteBusinessHours removes business hours.
	//
	// Deprecated: do not use.
	DeleteBusinessHours(context.Context, *connect_go.Request[org.DeleteBusinessHoursRequest]) (*connect_go.Response[org.DeleteBusinessHoursResponse], error)
	// EvaluateBusinessHours determines whether or not the current time is within a business hours day interval
	//
	// Deprecated: do not use.
	EvaluateBusinessHours(context.Context, *connect_go.Request[org.EvaluateBusinessHoursRequest]) (*connect_go.Response[org.EvaluateBusinessHoursResponse], error)
	// CreateUser creates a new user and enables it for the region it is getting created in.
	CreateUser(context.Context, *connect_go.Request[org.CreateUserRequest]) (*connect_go.Response[org.CreateUserResponse], error)
	// CreateDelegatedUser creates a new delegated user and enables it for the region it is getting created in.
	CreateDelegatedUser(context.Context, *connect_go.Request[org.CreateDelegatedUserRequest]) (*connect_go.Response[org.CreateDelegatedUserResponse], error)
	// GetMyUser returns a single user by UserId or by AgentSid.
	GetMyUser(context.Context, *connect_go.Request[org.GetMyUserRequest]) (*connect_go.Response[org.GetMyUserResponse], error)
	// GetUser returns a single user by UserId or by AgentSid.
	GetUser(context.Context, *connect_go.Request[org.GetUserRequest]) (*connect_go.Response[org.GetUserResponse], error)
	// GetUserByOrgId returns a single user by UserId and OrgId
	// Requires Customer Support permission and allows cross Org requests.
	GetUserByOrgId(context.Context, *connect_go.Request[org.GetUserByOrgIdRequest]) (*connect_go.Response[org.GetUserByOrgIdResponse], error)
	// ListAgents returns a list of Agents.
	ListAgents(context.Context, *connect_go.Request[org.ListAgentsRequest], *connect_go.ServerStream[org.ListAgentsResponse]) error
	// ListPublicUsers returns a list of users with limited data for most applications.
	ListPublicUsers(context.Context, *connect_go.Request[org.ListPublicUsersRequest], *connect_go.ServerStream[org.ListPublicUsersResponse]) error
	// ListUsers returns a list of users.
	ListUsers(context.Context, *connect_go.Request[org.ListUsersRequest], *connect_go.ServerStream[org.ListUsersResponse]) error
	// ListUsersByOrgId returns a list of users.
	ListUsersByOrgId(context.Context, *connect_go.Request[org.ListUsersByOrgIdRequest], *connect_go.ServerStream[org.ListUsersByOrgIdResponse]) error
	// ListUsersByRegion returns a list of usersByRegion.
	ListUsersByRegion(context.Context, *connect_go.Request[org.ListUsersByRegionRequest], *connect_go.ServerStream[org.ListUsersByRegionResponse]) error
	// UpdateMyUser updates a user.
	UpdateMyUser(context.Context, *connect_go.Request[org.UpdateMyUserRequest]) (*connect_go.Response[org.UpdateMyUserResponse], error)
	// UpdateUser updates a user.
	UpdateUser(context.Context, *connect_go.Request[org.UpdateUserRequest]) (*connect_go.Response[org.UpdateUserResponse], error)
	// UpdateUserLabels updates a user's labels to be the passed in set of labels.
	UpdateUserLabels(context.Context, *connect_go.Request[org.UpdateUserLabelsRequest]) (*connect_go.Response[org.UpdateUserLabelsResponse], error)
	// UpdateUserCallerId updates a user.
	UpdateUserCallerId(context.Context, *connect_go.Request[org.UpdateUserCallerIdRequest]) (*connect_go.Response[org.UpdateUserCallerIdResponse], error)
	// UpdateUserDisabled updates whether a user is disabled.
	UpdateUserDisabled(context.Context, *connect_go.Request[org.UpdateUserDisabledRequest]) (*connect_go.Response[org.UpdateUserDisabledResponse], error)
	// UpdateUserDisabledByOrgId updates a user is disabled.
	UpdateUserDisabledByOrgId(context.Context, *connect_go.Request[org.UpdateUserDisabledByOrgIdRequest]) (*connect_go.Response[org.UpdateUserDisabledByOrgIdResponse], error)
	// GetMyUserPasswordResetLink updates a user's password.
	GetMyUserPasswordResetLink(context.Context, *connect_go.Request[org.GetMyUserPasswordResetLinkRequest]) (*connect_go.Response[org.GetMyUserPasswordResetLinkResponse], error)
	// GetUserPasswordResetLink gets a link to update a user's password.
	GetUserPasswordResetLink(context.Context, *connect_go.Request[org.GetUserPasswordResetLinkRequest]) (*connect_go.Response[org.GetUserPasswordResetLinkResponse], error)
	// GetUserPasswordResetLinkByOrgId gets a link to update a user's password.
	GetUserPasswordResetLinkByOrgId(context.Context, *connect_go.Request[org.GetUserPasswordResetLinkByOrgIdRequest]) (*connect_go.Response[org.GetUserPasswordResetLinkByOrgIdResponse], error)
	// CreatePasswordResetLink creates a password reset link for the given user id.
	CreatePasswordResetLink(context.Context, *connect_go.Request[org.CreatePasswordResetLinkRequest]) (*connect_go.Response[org.CreatePasswordResetLinkResponse], error)
	// CreatePasswordResetLinkByOrgId creates a password reset link for the given user id.
	CreatePasswordResetLinkByOrgId(context.Context, *connect_go.Request[org.CreatePasswordResetLinkByOrgIdRequest]) (*connect_go.Response[org.CreatePasswordResetLinkByOrgIdResponse], error)
	// Used to be called GetUserBlocked
	// GetUserLoginInfo gets information about a user's login.
	GetUserLoginInfo(context.Context, *connect_go.Request[org.GetUserLoginInfoRequest]) (*connect_go.Response[org.GetUserLoginInfoResponse], error)
	// GetUserEmailVerified gets whether the user's email is verified.
	GetUserEmailVerified(context.Context, *connect_go.Request[org.GetUserEmailVerifiedRequest]) (*connect_go.Response[org.GetUserEmailVerifiedResponse], error)
	// GetUserEmailVerifiedByOrgId gets whether the user's email is verified.
	GetUserEmailVerifiedByOrgId(context.Context, *connect_go.Request[org.GetUserEmailVerifiedByOrgIdRequest]) (*connect_go.Response[org.GetUserEmailVerifiedByOrgIdResponse], error)
	// ResetMyPassword resets the user's password.
	ResetMyPassword(context.Context, *connect_go.Request[org.ResetMyPasswordRequest]) (*connect_go.Response[org.ResetMyPasswordResponse], error)
	// ResetUserPassword resets the user's password.
	ResetUserPassword(context.Context, *connect_go.Request[org.ResetUserPasswordRequest]) (*connect_go.Response[org.ResetUserPasswordResponse], error)
	// ResetUserPasswordByOrgId resets the user's password.
	ResetUserPasswordByOrgId(context.Context, *connect_go.Request[org.ResetUserPasswordByOrgIdRequest]) (*connect_go.Response[org.ResetUserPasswordByOrgIdResponse], error)
	// SendUserEmailVerification sends a verification email to the user.
	SendUserEmailVerification(context.Context, *connect_go.Request[org.SendUserEmailVerificationRequest]) (*connect_go.Response[org.SendUserEmailVerificationResponse], error)
	// SendUserEmailVerificationByOrgId sends a verification email to the user.
	SendUserEmailVerificationByOrgId(context.Context, *connect_go.Request[org.SendUserEmailVerificationByOrgIdRequest]) (*connect_go.Response[org.SendUserEmailVerificationByOrgIdResponse], error)
	// SendPasswordReset sends a password reset email to the user.
	SendPasswordReset(context.Context, *connect_go.Request[org.SendPasswordResetRequest]) (*connect_go.Response[org.SendPasswordResetResponse], error)
	// SendPasswordResetByOrgId sends a password reset email to the user.
	SendPasswordResetByOrgId(context.Context, *connect_go.Request[org.SendPasswordResetByOrgIdRequest]) (*connect_go.Response[org.SendPasswordResetByOrgIdResponse], error)
	// GetUserSessionData returns data for the front end's session state
	GetUserSessionData(context.Context, *connect_go.Request[org.GetUserSessionDataRequest]) (*connect_go.Response[org.GetUserSessionDataResponse], error)
	// GetAgentProfileGroup returns an agent profile group by id
	GetAgentProfileGroup(context.Context, *connect_go.Request[org.GetAgentProfileGroupRequest]) (*connect_go.Response[org.GetAgentProfileGroupResponse], error)
	// ListAgentProfileGroups returns the agent profile groups associated with the current organization
	ListAgentProfileGroups(context.Context, *connect_go.Request[org.ListAgentProfileGroupsRequest]) (*connect_go.Response[org.ListAgentProfileGroupsResponse], error)
	// UpdateAgentProfileGroup updates an AgentProfileGroup. Can only update if user is in same org as AgentProfileGroup
	UpdateAgentProfileGroup(context.Context, *connect_go.Request[org.UpdateAgentProfileGroupRequest]) (*connect_go.Response[org.UpdateAgentProfileGroupResponse], error)
	// CreateAgentProfileGroup creates an AgentProfileGroup. Can only create if user is in same org as AgentProfileGroup
	CreateAgentProfileGroup(context.Context, *connect_go.Request[org.CreateAgentProfileGroupRequest]) (*connect_go.Response[org.CreateAgentProfileGroupResponse], error)
	// DeleteAgentProfileGroup deletes an AgentProfileGroup. Can only delete if user is in same org as AgentProfileGroup
	DeleteAgentProfileGroup(context.Context, *connect_go.Request[org.DeleteAgentProfileGroupRequest]) (*connect_go.Response[org.DeleteAgentProfileGroupResponse], error)
	// AssignAgentProfileGroups assigns a list of users to an AgentProfileGroup. Can only use if everything is in the same organization.
	AssignAgentProfileGroups(context.Context, *connect_go.Request[org.AssignAgentProfileGroupsRequest]) (*connect_go.Response[org.AssignAgentProfileGroupsResponse], error)
	// Creates a new user subscription.
	AddUserSubscription(context.Context, *connect_go.Request[org.AddUserSubscriptionRequest]) (*connect_go.Response[org.AddUserSubscriptionResponse], error)
	// Creates a new user subscription for a specified user with in requested users org.
	AddUserSubscriptionByUserId(context.Context, *connect_go.Request[org.AddUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.AddUserSubscriptionByUserIdResponse], error)
	// Gets a user subscription.
	GetUserSubscription(context.Context, *connect_go.Request[org.GetUserSubscriptionRequest]) (*connect_go.Response[org.GetUserSubscriptionResponse], error)
	// Gets a user subscription for a specified user with in requested users org.
	GetUserSubscriptionByUserId(context.Context, *connect_go.Request[org.GetUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.GetUserSubscriptionByUserIdResponse], error)
	// Updates a user subscription for the current user
	UpdateUserSubscription(context.Context, *connect_go.Request[org.UpdateUserSubscriptionRequest]) (*connect_go.Response[org.UpdateUserSubscriptionResponse], error)
	// Updates a user subscription for a given user id
	UpdateUserSubscriptionByUserId(context.Context, *connect_go.Request[org.UpdateUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.UpdateUserSubscriptionByUserIdResponse], error)
	// Remove a user subscription.
	RemoveUserSubscription(context.Context, *connect_go.Request[org.RemoveUserSubscriptionRequest]) (*connect_go.Response[org.RemoveUserSubscriptionResponse], error)
	// Remove a user subscription by a given user id
	RemoveUserSubscriptionByUserId(context.Context, *connect_go.Request[org.RemoveUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.RemoveUserSubscriptionByUserIdResponse], error)
	// Lists user subscriptions.
	ListUserSubscriptions(context.Context, *connect_go.Request[org.ListUserSubscriptionsRequest]) (*connect_go.Response[org.ListUserSubscriptionsResponse], error)
	// Lists user subscriptions.
	ListUserSubscriptionsByUserId(context.Context, *connect_go.Request[org.ListUserSubscriptionsByUserIdRequest]) (*connect_go.Response[org.ListUserSubscriptionsByUserIdResponse], error)
	// Lists subscriptions for multiple users in an org.
	ListOrgSubscriptions(context.Context, *connect_go.Request[org.ListOrgSubscriptionsRequest]) (*connect_go.Response[org.ListOrgSubscriptionsResponse], error)
	// AUTH TOKEN
	// CreateAuthToken creates an auth token for the current user.
	CreateAuthToken(context.Context, *connect_go.Request[org.CreateAuthTokenRequest]) (*connect_go.Response[org.CreateAuthTokenResponse], error)
	// CreateAuthTokenByUserId creates an auth token for the given user.
	CreateAuthTokenByUserId(context.Context, *connect_go.Request[org.CreateAuthTokenByUserIdRequest]) (*connect_go.Response[org.CreateAuthTokenByUserIdResponse], error)
	// ListAuthTokens list tokens of current user.
	ListAuthTokens(context.Context, *connect_go.Request[org.ListAuthTokensRequest]) (*connect_go.Response[org.ListAuthTokensResponse], error)
	// ListAuthTokensByUserId list tokens of given user.
	ListAuthTokensByUserId(context.Context, *connect_go.Request[org.ListAuthTokensByUserIdRequest]) (*connect_go.Response[org.ListAuthTokensByUserIdResponse], error)
	// SetAuthTokenExpiration sets expiration back one year for current user.
	SetAuthTokenExpiration(context.Context, *connect_go.Request[org.SetAuthTokenExpirationRequest]) (*connect_go.Response[org.SetAuthTokenExpirationResponse], error)
	// SetAuthTokenExpirationByUserId sets expiration back one year for given user.
	SetAuthTokenExpirationByUserId(context.Context, *connect_go.Request[org.SetAuthTokenExpirationByUserIdRequest]) (*connect_go.Response[org.SetAuthTokenExpirationByUserIdResponse], error)
	// DeleteAuthToken deletes a given auth token for the current user.
	DeleteAuthToken(context.Context, *connect_go.Request[org.DeleteAuthTokenRequest]) (*connect_go.Response[org.DeleteAuthTokenResponse], error)
	// DeleteAuthTokenByUserId deletes a given auth token for the given user.
	DeleteAuthTokenByUserId(context.Context, *connect_go.Request[org.DeleteAuthTokenByUserIdRequest]) (*connect_go.Response[org.DeleteAuthTokenByUserIdResponse], error)
	// GetHuntGroupSettings returns the field masked hunt group settings for the
	// provided hunt group.
	GetHuntGroupSettings(context.Context, *connect_go.Request[org.GetHuntGroupSettingsRequest]) (*connect_go.Response[org.GetHuntGroupSettingsResponse], error)
	// UpdateHuntGroupSettings updates the selected/masked hunt group settings
	// for the given hunt group.
	UpdateHuntGroupSettings(context.Context, *connect_go.Request[org.UpdateHuntGroupSettingsRequest]) (*connect_go.Response[org.UpdateHuntGroupSettingsResponse], error)
	// CreateHuntGroup is the RPC method for creating a hunt group.
	// It will create a hunt group with the given general details.
	CreateHuntGroup(context.Context, *connect_go.Request[org.CreateHuntGroupRequest]) (*connect_go.Response[org.CreateHuntGroupResponse], error)
	// UpdateHuntGroupGeneralDetails is the RPC method for updating the general details of a hunt group.
	UpdateHuntGroupGeneralDetails(context.Context, *connect_go.Request[org.UpdateHuntGroupGeneralDetailsRequest]) (*connect_go.Response[org.UpdateHuntGroupGeneralDetailsResponse], error)
	// DeleteHuntGroup is the RPC method for deleting a hunt group.
	DeleteHuntGroup(context.Context, *connect_go.Request[org.DeleteHuntGroupRequest]) (*connect_go.Response[org.DeleteHuntGroupResponse], error)
	// GetHuntGroupDetails returns the hunt group details for the given hunt group.
	GetHuntGroupDetails(context.Context, *connect_go.Request[org.GetHuntGroupDetailsRequest]) (*connect_go.Response[org.GetHuntGroupDetailsResponse], error)
	// Lists caller id numbers with their associated region codes for the given
	// bucket.
	ListCallerIdBuckets(context.Context, *connect_go.Request[org.ListCallerIdBucketsRequest]) (*connect_go.Response[org.ListCallerIdBucketsResponse], error)
	// Gets a single data dip template.
	GetDataDipTemplate(context.Context, *connect_go.Request[org.GetDataDipTemplateRequest]) (*connect_go.Response[org.GetDataDipTemplateResponse], error)
	// Lists data dip templates, optionally filtered by config type.
	ListDataDipTemplates(context.Context, *connect_go.Request[org.ListDataDipTemplatesRequest]) (*connect_go.Response[org.ListDataDipTemplatesResponse], error)
	// Saves a new data dip template.
	CreateDataDipTemplate(context.Context, *connect_go.Request[org.CreateDataDipTemplateRequest]) (*connect_go.Response[org.CreateDataDipTemplateResponse], error)
	// Updates a data dip template.
	UpdateDataDipTemplate(context.Context, *connect_go.Request[org.UpdateDataDipTemplateRequest]) (*connect_go.Response[org.UpdateDataDipTemplateResponse], error)
	// Deletes a data dip template.
	DeleteDataDipTemplate(context.Context, *connect_go.Request[org.DeleteDataDipTemplateRequest]) (*connect_go.Response[org.DeleteDataDipTemplateResponse], error)
	// Copies a data dip template.
	CopyDataDipTemplate(context.Context, *connect_go.Request[org.CopyDataDipTemplateRequest]) (*connect_go.Response[org.CopyDataDipTemplateResponse], error)
	// Copies a data dip template to a different organization.
	CopyDataDipTemplateToOrganization(context.Context, *connect_go.Request[org.CopyDataDipTemplateToOrganizationRequest]) (*connect_go.Response[org.CopyDataDipTemplateToOrganizationResponse], error)
	// ListBroadcastTemplateGeneralDetails returns a list of broadcast templates for an organization
	ListBroadcastTemplateGeneralDetails(context.Context, *connect_go.Request[org.ListBroadcastTemplateGeneralDetailsRequest]) (*connect_go.Response[org.ListBroadcastTemplateGeneralDetailsResponse], error)
	// Lists Agent Call Response Automatically added compliance rules for an Org.
	ListAgentResponseAutoRules(context.Context, *connect_go.Request[org.ListAgentResponseAutoRulesRequest]) (*connect_go.Response[org.ListAgentResponseAutoRulesResponse], error)
	// Creates a new Agent Call Response Automatically added compliance rule set.
	CreateAgentResponseAutoRules(context.Context, *connect_go.Request[org.CreateAgentResponseAutoRulesRequest]) (*connect_go.Response[org.CreateAgentResponseAutoRulesResponse], error)
	// Updates an existing Agent Call Response Automatically added compliance rule set.
	UpdateAgentResponseAutoRules(context.Context, *connect_go.Request[org.UpdateAgentResponseAutoRulesRequest]) (*connect_go.Response[org.UpdateAgentResponseAutoRulesResponse], error)
	// Deletes an existing Agent Call Response Automatically added compliance rule set.
	DeleteAgentResponseAutoRules(context.Context, *connect_go.Request[org.DeleteAgentResponseAutoRulesRequest]) (*connect_go.Response[org.DeleteAgentResponseAutoRulesResponse], error)
	// Lists all web links for a given hunt group
	ListHuntGroupWebLinks(context.Context, *connect_go.Request[org.ListHuntGroupWebLinksRequest]) (*connect_go.Response[org.ListHuntGroupWebLinksResponse], error)
	// Copies a web link from one hunt group to another
	CopyHuntGroupWebLink(context.Context, *connect_go.Request[org.CopyHuntGroupWebLinkRequest]) (*connect_go.Response[org.CopyHuntGroupWebLinkResponse], error)
	// Updates the list of web links in a hunt group to be the given list
	UpdateHuntGroupWebLinks(context.Context, *connect_go.Request[org.UpdateHuntGroupWebLinksRequest]) (*connect_go.Response[org.UpdateHuntGroupWebLinksResponse], error)
	// ListHuntGroupIntegrationLinks returns all integration links for a hunt group.
	ListHuntGroupIntegrationLinks(context.Context, *connect_go.Request[org.ListHuntGroupIntegrationLinksRequest]) (*connect_go.Response[org.ListHuntGroupIntegrationLinksResponse], error)
	// CopyHuntGroupIntegrationLink copies the integration link from one hunt group to another.
	// It will create a new integration link in the destination hunt group with the same settings
	// as the source integration link.
	CopyHuntGroupIntegrationLink(context.Context, *connect_go.Request[org.CopyHuntGroupIntegrationLinkRequest]) (*connect_go.Response[org.CopyHuntGroupIntegrationLinkResponse], error)
	// UpdateHuntGroupIntegrationLinks updates the integration links for a hunt group.
	// It will create any new integration links that do not already exist in the hunt group,
	// update any existing integration links with the new settings, and delete any integration links
	// that are not in the request.
	UpdateHuntGroupIntegrationLinks(context.Context, *connect_go.Request[org.UpdateHuntGroupIntegrationLinksRequest]) (*connect_go.Response[org.UpdateHuntGroupIntegrationLinksResponse], error)
	// GetHuntGroupClientInfoDisplayTemplate returns the client info display template for a given hunt group.
	GetHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.GetHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.GetHuntGroupClientInfoDisplayTemplateResponse], error)
	// CreateHuntGroupClientInfoDisplayTemplate creates a new client info display template for a givne hunt group.
	CreateHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.CreateHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.CreateHuntGroupClientInfoDisplayTemplateResponse], error)
	// UpdateHuntGroupClientInfoDisplayTemplate updates a client info display template for a given hunt group.
	UpdateHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.UpdateHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.UpdateHuntGroupClientInfoDisplayTemplateResponse], error)
	// DeleteHuntGroupClientInfoDisplayTemplate deletes a client info display template for a given hunt group.
	DeleteHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.DeleteHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.DeleteHuntGroupClientInfoDisplayTemplateResponse], error)
	// CopyHuntGroupClientInfoDisplayTemplate copies the client info display template from one hunt group to another.
	// It will create a new template in the destination hunt group with the same settings as the source template if it doesn't already exist.
	// Otherwise, it will update the existing template with the source template settings.
	CopyHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.CopyHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.CopyHuntGroupClientInfoDisplayTemplateResponse], error)
	// CreateCampaignClientInfoDisplayTemplate creates a new client info display template for a campaign
	// with the same settings as the source template from a hunt group.
	CreateCampaignClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.CreateCampaignClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.CreateCampaignClientInfoDisplayTemplateResponse], error)
	// ListHuntGroupsWithClientInfoTemplateData lists the hunt groups in an organization
	// with their client info display template data based on the filter.
	ListHuntGroupsWithClientInfoTemplateData(context.Context, *connect_go.Request[org.ListHuntGroupsWithClientInfoTemplateDataRequest]) (*connect_go.Response[org.ListHuntGroupsWithClientInfoTemplateDataResponse], error)
	// ListAgentTriggers returns a list of agent triggers for the given hunt group.
	ListAgentTriggers(context.Context, *connect_go.Request[org.ListAgentTriggersRequest]) (*connect_go.Response[org.ListAgentTriggersResponse], error)
	// CopyAgentTrigger copys an agent trigger to the given hunt group in the same org.
	CopyAgentTrigger(context.Context, *connect_go.Request[org.CopyAgentTriggerRequest]) (*connect_go.Response[org.CopyAgentTriggerResponse], error)
	// UpdateAgentTriggers updates all agent triggers for the given hunt group.
	UpdateAgentTriggers(context.Context, *connect_go.Request[org.UpdateAgentTriggersRequest]) (*connect_go.Response[org.UpdateAgentTriggersResponse], error)
	// ListHuntGroupScripts lists all hunt group scripts for the current organization.
	ListHuntGroupScripts(context.Context, *connect_go.Request[org.ListHuntGroupScriptsRequest]) (*connect_go.Response[org.ListHuntGroupScriptsResponse], error)
	// GetHuntGroupScript gets the specified script from the given script sid
	GetHuntGroupScript(context.Context, *connect_go.Request[org.GetHuntGroupScriptRequest]) (*connect_go.Response[org.GetHuntGroupScriptResponse], error)
	// CreateHuntGroupScript adds a creates a new hunt group script
	CreateHuntGroupScript(context.Context, *connect_go.Request[org.CreateHuntGroupScriptRequest]) (*connect_go.Response[org.CreateHuntGroupScriptResponse], error)
	// UpdateHuntGroupScript updates a script specified by the given script sid
	UpdateHuntGroupScript(context.Context, *connect_go.Request[org.UpdateHuntGroupScriptRequest]) (*connect_go.Response[org.UpdateHuntGroupScriptResponse], error)
	// DeleteHuntGroupScript deletes a hunt group script
	DeleteHuntGroupScript(context.Context, *connect_go.Request[org.DeleteHuntGroupScriptRequest]) (*connect_go.Response[org.DeleteHuntGroupScriptResponse], error)
	// AssignScriptToHuntGroups assigns a script to the specified hunt groups
	AssignScriptToHuntGroups(context.Context, *connect_go.Request[org.AssignScriptToHuntGroupsRequest]) (*connect_go.Response[org.AssignScriptToHuntGroupsResponse], error)
	// UnassignScriptFromHuntGroups unassigns a script from the specified hunt groups
	UnassignScriptFromHuntGroups(context.Context, *connect_go.Request[org.UnassignScriptFromHuntGroupsRequest]) (*connect_go.Response[org.UnassignScriptFromHuntGroupsResponse], error)
	// CreateTrust creates a new trust.
	CreateTrust(context.Context, *connect_go.Request[org.CreateTrustRequest]) (*connect_go.Response[org.CreateTrustResponse], error)
	// AcceptTrust accepts an incoming trust.
	AcceptTrust(context.Context, *connect_go.Request[org.AcceptTrustRequest]) (*connect_go.Response[org.AcceptTrustResponse], error)
	// RejectTrust rejects an incoming trust.
	RejectTrust(context.Context, *connect_go.Request[org.RejectTrustRequest]) (*connect_go.Response[org.RejectTrustResponse], error)
	// GetTrust returns a single trust by trust id.
	GetTrust(context.Context, *connect_go.Request[org.GetTrustRequest]) (*connect_go.Response[org.GetTrustResponse], error)
	// ListIncomingTrusts returns all pending trusts that are being granted
	// to the org of the currently logged in user.
	ListIncomingTrusts(context.Context, *connect_go.Request[org.ListIncomingTrustsRequest]) (*connect_go.Response[org.ListIncomingTrustsResponse], error)
	// ListGivenTrusts returns all trusts that have been given out for
	// the currently logged in user's org. The returned list will contain
	// accepted, pending, and rejected trusts.
	ListGivenTrusts(context.Context, *connect_go.Request[org.ListGivenTrustsRequest]) (*connect_go.Response[org.ListGivenTrustsResponse], error)
	// ListAssignableTrusts returns all accepted trusts that are being granted
	// to the org of the currently logged in user.
	ListAssignableTrusts(context.Context, *connect_go.Request[org.ListAssignableTrustsRequest]) (*connect_go.Response[org.ListAssignableTrustsResponse], error)
	// DeleteTrust deletes a trust by trust id. Only trusts where the current
	// org is the grantor can be deleted by this endpoint.
	DeleteTrust(context.Context, *connect_go.Request[org.DeleteTrustRequest]) (*connect_go.Response[org.DeleteTrustResponse], error)
	// AssignTrust assigns a trust to the given user ids.
	AssignTrust(context.Context, *connect_go.Request[org.AssignTrustRequest]) (*connect_go.Response[org.AssignTrustResponse], error)
	// UnassignTrust unassigns a trust from the given user id.
	UnassignTrust(context.Context, *connect_go.Request[org.UnassignTrustRequest]) (*connect_go.Response[org.UnassignTrustResponse], error)
	// CreateLabel creates a label with the given properties.
	CreateLabel(context.Context, *connect_go.Request[org.CreateLabelRequest]) (*connect_go.Response[org.CreateLabelResponse], error)
	// DeleteLabel deletes a label with the id given on the request.
	DeleteLabel(context.Context, *connect_go.Request[org.DeleteLabelRequest]) (*connect_go.Response[org.DeleteLabelResponse], error)
	// ListLabels returns all unique label names belonging to the given org id.
	ListLabels(context.Context, *connect_go.Request[org.ListLabelsRequest]) (*connect_go.Response[org.ListLabelsResponse], error)
	// GetLabel returns a single label with the given ID.
	GetLabel(context.Context, *connect_go.Request[org.GetLabelRequest]) (*connect_go.Response[org.GetLabelResponse], error)
	// UpdateLabel updates the given label.
	UpdateLabel(context.Context, *connect_go.Request[org.UpdateLabelRequest]) (*connect_go.Response[org.UpdateLabelResponse], error)
	// Assignlabel creates label assignments defined by the request.
	AssignLabel(context.Context, *connect_go.Request[org.AssignLabelRequest]) (*connect_go.Response[org.AssignLabelResponse], error)
	// Unassignlabel removes label assignments defined by the request.
	UnassignLabel(context.Context, *connect_go.Request[org.UnassignLabelRequest]) (*connect_go.Response[org.UnassignLabelResponse], error)
	// GetAssignmentCounts returns the total amount of label assignments
	// per entity type.
	GetAssignmentCounts(context.Context, *connect_go.Request[org.GetAssignmentCountsRequest]) (*connect_go.Response[org.GetAssignmentCountsResponse], error)
	// GetAssignableLabels returns a list of labels available to the current user.
	GetAssignableLabels(context.Context, *connect_go.Request[org.GetAssignableLabelsRequest]) (*connect_go.Response[org.GetAssignableLabelsResponse], error)
	// GetPermissions returns the permissions for a given user along with other user information.
	GetPermissions(context.Context, *connect_go.Request[org.GetPermissionsRequest]) (*connect_go.Response[org.GetPermissionsResponse], error)
	// GetUserPermissions returns the permissions for a given user.
	GetUserPermissions(context.Context, *connect_go.Request[org.GetUserPermissionsRequest]) (*connect_go.Response[org.GetUserPermissionsResponse], error)
	// Creates a new permission group.
	CreatePermissionGroup(context.Context, *connect_go.Request[org.CreatePermissionGroupRequest]) (*connect_go.Response[org.CreatePermissionGroupResponse], error)
	// UpdatePermissionGroup updates the permission group with the given id.
	UpdatePermissionGroup(context.Context, *connect_go.Request[org.UpdatePermissionGroupRequest]) (*connect_go.Response[org.UpdatePermissionGroupResponse], error)
	// DeletePermissionGroup deletes the permission group with the given id.
	DeletePermissionGroup(context.Context, *connect_go.Request[org.DeletePermissionGroupRequest]) (*connect_go.Response[org.DeletePermissionGroupResponse], error)
	// ListPermissionGroups returns a list of permissions for an organization.
	ListPermissionGroups(context.Context, *connect_go.Request[org.ListPermissionGroupsRequest]) (*connect_go.Response[org.ListPermissionGroupsResponse], error)
	// ListPermissionGroupsByOrgId returns a list of permissions for an
	// organization.
	ListPermissionGroupsByOrgId(context.Context, *connect_go.Request[org.ListPermissionGroupsByOrgIdRequest]) (*connect_go.Response[org.ListPermissionGroupsByOrgIdResponse], error)
	// AssignUsersPermissionGroup returns a user a permission group.
	AssignUsersPermissionGroup(context.Context, *connect_go.Request[org.AssignUsersPermissionGroupRequest]) (*connect_go.Response[org.AssignUsersPermissionGroupResponse], error)
	// RevokeUsersPermissionGroup returns a user a permission group.
	RevokeUsersPermissionGroup(context.Context, *connect_go.Request[org.RevokeUsersPermissionGroupRequest]) (*connect_go.Response[org.RevokeUsersPermissionGroupResponse], error)
	// AssignLabels assigns labels to a given permission group
	AssignLabels(context.Context, *connect_go.Request[org.AssignLabelsRequest]) (*connect_go.Response[org.AssignLabelsResponse], error)
	// RevokeLabels revokes labels from a given permission group
	RevokeLabels(context.Context, *connect_go.Request[org.RevokeLabelsRequest]) (*connect_go.Response[org.RevokeLabelsResponse], error)
	// AssignAccountOwnerPermissionToUser returns a user a permission group.
	AssignAccountOwnerPermissionToUser(context.Context, *connect_go.Request[org.AssignAccountOwnerPermissionToUserRequest]) (*connect_go.Response[org.AssignAccountOwnerPermissionToUserResponse], error)
	// RevokeAccountOwnerPermissionFromUser returns a user a permission group.
	RevokeAccountOwnerPermissionFromUser(context.Context, *connect_go.Request[org.RevokeAccountOwnerPermissionFromUserRequest]) (*connect_go.Response[org.RevokeAccountOwnerPermissionFromUserResponse], error)
	// Initializes the default read only permissions group for the
	// given organization.
	InitDefaultPermissionGroups(context.Context, *connect_go.Request[org.InitDefaultPermissionGroupsRequest]) (*connect_go.Response[org.InitDefaultPermissionGroupsResponse], error)
	// GetAccountOwnerGroup returns the account owner permission group
	// for an organization.
	GetAccountOwnerGroup(context.Context, *connect_go.Request[org.GetAccountOwnerGroupRequest]) (*connect_go.Response[org.GetAccountOwnerGroupResponse], error)
	// GetLicenses returns the licenses an organitzation is assigned.
	GetLicenses(context.Context, *connect_go.Request[org.GetLicensesRequest]) (*connect_go.Response[org.GetLicensesResponse], error)
	// GetOrgLicenses returns the licenses assigned to the organization
	// of the user who makes the request.
	GetOrgLicenses(context.Context, *connect_go.Request[org.GetOrgLicensesRequest]) (*connect_go.Response[org.GetOrgLicensesResponse], error)
	// UpdateLicenses updates an organization's licenses.
	UpdateLicenses(context.Context, *connect_go.Request[org.UpdateLicensesRequest]) (*connect_go.Response[org.UpdateLicensesResponse], error)
	// RemovePermissionFromAllPermissionGroups removes a permission from
	// all permission groups in an organization.
	RemovePermissionFromAllPermissionGroups(context.Context, *connect_go.Request[org.RemovePermissionFromAllPermissionGroupsRequest]) (*connect_go.Response[org.RemovePermissionFromAllPermissionGroupsResponse], error)
	// ListP3PermissionGroups returns the list of p3 permission groups
	// for the user's org.
	ListP3PermissionGroups(context.Context, *connect_go.Request[org.ListP3PermissionGroupsRequest]) (*connect_go.Response[org.ListP3PermissionGroupsResponse], error)
	// ListP3PermissionGroupsByOrgId returns the list of p3 permission groups
	// for an org by id.
	ListP3PermissionGroupsByOrgId(context.Context, *connect_go.Request[org.ListP3PermissionGroupsRequest]) (*connect_go.Response[org.ListP3PermissionGroupsResponse], error)
	// CreateP3PermissionGroup creates a new p3 permission group.
	CreateP3PermissionGroup(context.Context, *connect_go.Request[org.CreateP3PermissionGroupRequest]) (*connect_go.Response[org.CreateP3PermissionGroupResponse], error)
	// UpdateP3PermissionGroup updates an existing p3 permission group.
	// Requires PERMISSION_GROUP_EDIT.
	UpdateP3PermissionGroup(context.Context, *connect_go.Request[org.UpdateP3PermissionGroupRequest]) (*connect_go.Response[org.UpdateP3PermissionGroupResponse], error)
	// UpdateP3PermissionGroup updates an existing p3 permission group.
	// CUSTOMER_SUPPORT required for passing in an org id.
	UpdateP3PermissionGroupByOrgId(context.Context, *connect_go.Request[org.UpdateP3PermissionGroupByOrgIdRequest]) (*connect_go.Response[org.UpdateP3PermissionGroupByOrgIdResponse], error)
	// DeleteP3PermissionGroup deletes a p3 permission group.
	DeleteP3PermissionGroup(context.Context, *connect_go.Request[org.DeleteP3PermissionGroupRequest]) (*connect_go.Response[org.DeleteP3PermissionGroupResponse], error)
	// AssignUsersP3PermissionGroup assigns a p3 permission group
	// to a list of users.
	AssignUsersP3PermissionGroup(context.Context, *connect_go.Request[org.AssignUsersP3PermissionGroupRequest]) (*connect_go.Response[org.AssignUsersP3PermissionGroupResponse], error)
	// RevokeUsersP3PermissionGroup revokes a p3 permission group
	// from a list of users.
	RevokeUsersP3PermissionGroup(context.Context, *connect_go.Request[org.RevokeUsersP3PermissionGroupRequest]) (*connect_go.Response[org.RevokeUsersP3PermissionGroupResponse], error)
	// RefreshMfaLockout resets the lockout timer for the given user.
	RefreshMfaLockout(context.Context, *connect_go.Request[org.RefreshMfaLockoutRequest]) (*connect_go.Response[org.RefreshMfaLockoutResponse], error)
	// RefreshMfaLockoutByOrgId resets the lockout timer for the given user and org id.
	RefreshMfaLockoutByOrgId(context.Context, *connect_go.Request[org.RefreshMfaLockoutByOrgIdRequest]) (*connect_go.Response[org.RefreshMfaLockoutByOrgIdResponse], error)
	// SetMfaType sets the given user's mfa type.
	SetMfaType(context.Context, *connect_go.Request[org.SetMfaTypeRequest]) (*connect_go.Response[org.SetMfaTypeResponse], error)
	// SetMyMfaType sets the current user's mfa type.
	SetMyMfaType(context.Context, *connect_go.Request[org.SetMyMfaTypeRequest]) (*connect_go.Response[org.SetMyMfaTypeResponse], error)
	// EnableUserMfa enables or disables mfa for the given user
	EnableUserMfa(context.Context, *connect_go.Request[org.EnableUserMfaRequest]) (*connect_go.Response[org.EnableUserMfaResponse], error)
	// EnableMyUserMfa enables mfa for the current user
	EnableMyUserMfa(context.Context, *connect_go.Request[org.EnableMyUserMfaRequest]) (*connect_go.Response[org.EnableMyUserMfaResponse], error)
	// GetUserMfaInfo returns the mfa info for the given user.
	GetUserMfaInfo(context.Context, *connect_go.Request[org.GetUserMfaInfoRequest]) (*connect_go.Response[org.GetUserMfaInfoResponse], error)
	// GetMyUserMfaInfo returns the mfa info for the current user.
	GetMyUserMfaInfo(context.Context, *connect_go.Request[org.GetMyUserMfaInfoRequest]) (*connect_go.Response[org.GetMyUserMfaInfoResponse], error)
	// GetMyAllowedMfaMethods returns the mfa methods allowed to the current user.
	GetMyAllowedMfaMethods(context.Context, *connect_go.Request[org.GetMyAllowedMfaMethodsRequest]) (*connect_go.Response[org.GetMyAllowedMfaMethodsResponse], error)
	// CreateBusinessHours persists times businesses are available.
	//
	// Deprecated: do not use.
	CreateBusinessHours(context.Context, *connect_go.Request[org.CreateBusinessHoursRequest]) (*connect_go.Response[org.CreateBusinessHoursResponse], error)
	// UpdateBusinessHours persists changes to times businesses are available.
	//
	// Deprecated: do not use.
	UpdateBusinessHours(context.Context, *connect_go.Request[org.UpdateBusinessHoursRequest]) (*connect_go.Response[org.UpdateBusinessHoursResponse], error)
	// AddGroupedUserIPRestrictions adds a user or list of user's IPs they
	// are required to authenticate with
	AddGroupedUserIPRestrictions(context.Context, *connect_go.Request[org.AddGroupedUserIPRestrictionsRequest]) (*connect_go.Response[org.AddGroupedUserIPRestrictionsResponse], error)
	// RemoveGroupedUserIPRestrictions removes a user or list of user's IPs they
	// are required to authenticate with
	RemoveGroupedUserIPRestrictions(context.Context, *connect_go.Request[org.RemoveGroupedUserIPRestrictionsRequest]) (*connect_go.Response[org.RemoveGroupedUserIPRestrictionsResponse], error)
	// ListUsersAllowedIps -
	ListUsersAllowedIps(context.Context, *connect_go.Request[org.ListUsersAllowedIpsRequest]) (*connect_go.Response[org.ListUsersAllowedIpsResponse], error)
}

// NewOrgHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrgHandler(svc OrgHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	orgCreateOrganizationHandler := connect_go.NewUnaryHandler(
		OrgCreateOrganizationProcedure,
		svc.CreateOrganization,
		opts...,
	)
	orgGetOrganizationHandler := connect_go.NewUnaryHandler(
		OrgGetOrganizationProcedure,
		svc.GetOrganization,
		opts...,
	)
	orgGetOrganizationByIdHandler := connect_go.NewUnaryHandler(
		OrgGetOrganizationByIdProcedure,
		svc.GetOrganizationById,
		opts...,
	)
	orgUpdateOrganizationHandler := connect_go.NewUnaryHandler(
		OrgUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		opts...,
	)
	orgArchiveOrganizationHandler := connect_go.NewUnaryHandler(
		OrgArchiveOrganizationProcedure,
		svc.ArchiveOrganization,
		opts...,
	)
	orgUnArchiveOrganizationHandler := connect_go.NewUnaryHandler(
		OrgUnArchiveOrganizationProcedure,
		svc.UnArchiveOrganization,
		opts...,
	)
	orgListAllOrganizationsGloballyHandler := connect_go.NewServerStreamHandler(
		OrgListAllOrganizationsGloballyProcedure,
		svc.ListAllOrganizationsGlobally,
		opts...,
	)
	orgListOrganizationsByRegionHandler := connect_go.NewServerStreamHandler(
		OrgListOrganizationsByRegionProcedure,
		svc.ListOrganizationsByRegion,
		opts...,
	)
	orgListArchivedOrganizationsHandler := connect_go.NewServerStreamHandler(
		OrgListArchivedOrganizationsProcedure,
		svc.ListArchivedOrganizations,
		opts...,
	)
	orgConvertOrgToManualHandler := connect_go.NewUnaryHandler(
		OrgConvertOrgToManualProcedure,
		svc.ConvertOrgToManual,
		opts...,
	)
	orgListOwnedOrgsHandler := connect_go.NewServerStreamHandler(
		OrgListOwnedOrgsProcedure,
		svc.ListOwnedOrgs,
		opts...,
	)
	orgGetOrganizationPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetOrganizationPreferencesProcedure,
		svc.GetOrganizationPreferences,
		opts...,
	)
	orgUpdateOrganizationPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateOrganizationPreferencesProcedure,
		svc.UpdateOrganizationPreferences,
		opts...,
	)
	orgGetAgentPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetAgentPreferencesProcedure,
		svc.GetAgentPreferences,
		opts...,
	)
	orgUpdateAgentPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateAgentPreferencesProcedure,
		svc.UpdateAgentPreferences,
		opts...,
	)
	orgGetContactPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetContactPreferencesProcedure,
		svc.GetContactPreferences,
		opts...,
	)
	orgUpdateContactPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateContactPreferencesProcedure,
		svc.UpdateContactPreferences,
		opts...,
	)
	orgGetAuthenticationPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetAuthenticationPreferencesProcedure,
		svc.GetAuthenticationPreferences,
		opts...,
	)
	orgUpdateAuthenticationPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateAuthenticationPreferencesProcedure,
		svc.UpdateAuthenticationPreferences,
		opts...,
	)
	orgGetWebhookPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetWebhookPreferencesProcedure,
		svc.GetWebhookPreferences,
		opts...,
	)
	orgUpdateWebhookPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateWebhookPreferencesProcedure,
		svc.UpdateWebhookPreferences,
		opts...,
	)
	orgGetDashboardGeneralPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetDashboardGeneralPreferencesProcedure,
		svc.GetDashboardGeneralPreferences,
		opts...,
	)
	orgUpdateDashboardGeneralPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateDashboardGeneralPreferencesProcedure,
		svc.UpdateDashboardGeneralPreferences,
		opts...,
	)
	orgGetDashboardQueuePreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetDashboardQueuePreferencesProcedure,
		svc.GetDashboardQueuePreferences,
		opts...,
	)
	orgUpdateDashboardQueuePreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateDashboardQueuePreferencesProcedure,
		svc.UpdateDashboardQueuePreferences,
		opts...,
	)
	orgGetPhonePreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetPhonePreferencesProcedure,
		svc.GetPhonePreferences,
		opts...,
	)
	orgUpdatePhonePreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdatePhonePreferencesProcedure,
		svc.UpdatePhonePreferences,
		opts...,
	)
	orgGetCompliancePreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetCompliancePreferencesProcedure,
		svc.GetCompliancePreferences,
		opts...,
	)
	orgUpdateCompliancePreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateCompliancePreferencesProcedure,
		svc.UpdateCompliancePreferences,
		opts...,
	)
	orgGetBroadcastPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetBroadcastPreferencesProcedure,
		svc.GetBroadcastPreferences,
		opts...,
	)
	orgUpdateBroadcastPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateBroadcastPreferencesProcedure,
		svc.UpdateBroadcastPreferences,
		opts...,
	)
	orgGetSchedulePreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetSchedulePreferencesProcedure,
		svc.GetSchedulePreferences,
		opts...,
	)
	orgUpdateSchedulePreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateSchedulePreferencesProcedure,
		svc.UpdateSchedulePreferences,
		opts...,
	)
	orgGetEmailSmsPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetEmailSmsPreferencesProcedure,
		svc.GetEmailSmsPreferences,
		opts...,
	)
	orgUpdateEmailSmsPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateEmailSmsPreferencesProcedure,
		svc.UpdateEmailSmsPreferences,
		opts...,
	)
	orgGetBusinessPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetBusinessPreferencesProcedure,
		svc.GetBusinessPreferences,
		opts...,
	)
	orgUpdateBusinessPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateBusinessPreferencesProcedure,
		svc.UpdateBusinessPreferences,
		opts...,
	)
	orgUpdateAdminBusinessPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateAdminBusinessPreferencesProcedure,
		svc.UpdateAdminBusinessPreferences,
		opts...,
	)
	orgGetScorecardsPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetScorecardsPreferencesProcedure,
		svc.GetScorecardsPreferences,
		opts...,
	)
	orgUpdateScorecardsPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateScorecardsPreferencesProcedure,
		svc.UpdateScorecardsPreferences,
		opts...,
	)
	orgGetVoiceAnalyticsPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetVoiceAnalyticsPreferencesProcedure,
		svc.GetVoiceAnalyticsPreferences,
		opts...,
	)
	orgListVoiceAnalyticsPreferencesHandler := connect_go.NewUnaryHandler(
		OrgListVoiceAnalyticsPreferencesProcedure,
		svc.ListVoiceAnalyticsPreferences,
		opts...,
	)
	orgUpdateVoiceAnalyticsPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateVoiceAnalyticsPreferencesProcedure,
		svc.UpdateVoiceAnalyticsPreferences,
		opts...,
	)
	orgGetEndOfDayPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetEndOfDayPreferencesProcedure,
		svc.GetEndOfDayPreferences,
		opts...,
	)
	orgUpdateEndOfDayPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateEndOfDayPreferencesProcedure,
		svc.UpdateEndOfDayPreferences,
		opts...,
	)
	orgGetReportFilterPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetReportFilterPreferencesProcedure,
		svc.GetReportFilterPreferences,
		opts...,
	)
	orgUpdateReportFilterPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateReportFilterPreferencesProcedure,
		svc.UpdateReportFilterPreferences,
		opts...,
	)
	orgGetRecordingPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetRecordingPreferencesProcedure,
		svc.GetRecordingPreferences,
		opts...,
	)
	orgUpdateRecordingPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateRecordingPreferencesProcedure,
		svc.UpdateRecordingPreferences,
		opts...,
	)
	orgGetAdminClientPreferencesHandler := connect_go.NewUnaryHandler(
		OrgGetAdminClientPreferencesProcedure,
		svc.GetAdminClientPreferences,
		opts...,
	)
	orgUpdateAdminClientPreferencesHandler := connect_go.NewUnaryHandler(
		OrgUpdateAdminClientPreferencesProcedure,
		svc.UpdateAdminClientPreferences,
		opts...,
	)
	orgAcceptLinkbackRecordingTermsHandler := connect_go.NewUnaryHandler(
		OrgAcceptLinkbackRecordingTermsProcedure,
		svc.AcceptLinkbackRecordingTerms,
		opts...,
	)
	orgLinkbackUpdateBroadcastTemplatesHandler := connect_go.NewUnaryHandler(
		OrgLinkbackUpdateBroadcastTemplatesProcedure,
		svc.LinkbackUpdateBroadcastTemplates,
		opts...,
	)
	orgRecordEmailUnsubscribeAcknowledgementHandler := connect_go.NewUnaryHandler(
		OrgRecordEmailUnsubscribeAcknowledgementProcedure,
		svc.RecordEmailUnsubscribeAcknowledgement,
		opts...,
	)
	orgClearEmailUnsubscribeAcknowledgementHandler := connect_go.NewUnaryHandler(
		OrgClearEmailUnsubscribeAcknowledgementProcedure,
		svc.ClearEmailUnsubscribeAcknowledgement,
		opts...,
	)
	orgListBusinessHoursHandler := connect_go.NewUnaryHandler(
		OrgListBusinessHoursProcedure,
		svc.ListBusinessHours,
		opts...,
	)
	orgGetBusinessHoursHandler := connect_go.NewUnaryHandler(
		OrgGetBusinessHoursProcedure,
		svc.GetBusinessHours,
		opts...,
	)
	orgSetBusinessHoursHandler := connect_go.NewUnaryHandler(
		OrgSetBusinessHoursProcedure,
		svc.SetBusinessHours,
		opts...,
	)
	orgAddIntervalToBusinessHoursHandler := connect_go.NewUnaryHandler(
		OrgAddIntervalToBusinessHoursProcedure,
		svc.AddIntervalToBusinessHours,
		opts...,
	)
	orgRemoveIntervalFromBusinessHoursHandler := connect_go.NewUnaryHandler(
		OrgRemoveIntervalFromBusinessHoursProcedure,
		svc.RemoveIntervalFromBusinessHours,
		opts...,
	)
	orgUpdateBusinessHoursInfoHandler := connect_go.NewUnaryHandler(
		OrgUpdateBusinessHoursInfoProcedure,
		svc.UpdateBusinessHoursInfo,
		opts...,
	)
	orgDeleteBusinessHoursHandler := connect_go.NewUnaryHandler(
		OrgDeleteBusinessHoursProcedure,
		svc.DeleteBusinessHours,
		opts...,
	)
	orgEvaluateBusinessHoursHandler := connect_go.NewUnaryHandler(
		OrgEvaluateBusinessHoursProcedure,
		svc.EvaluateBusinessHours,
		opts...,
	)
	orgCreateUserHandler := connect_go.NewUnaryHandler(
		OrgCreateUserProcedure,
		svc.CreateUser,
		opts...,
	)
	orgCreateDelegatedUserHandler := connect_go.NewUnaryHandler(
		OrgCreateDelegatedUserProcedure,
		svc.CreateDelegatedUser,
		opts...,
	)
	orgGetMyUserHandler := connect_go.NewUnaryHandler(
		OrgGetMyUserProcedure,
		svc.GetMyUser,
		opts...,
	)
	orgGetUserHandler := connect_go.NewUnaryHandler(
		OrgGetUserProcedure,
		svc.GetUser,
		opts...,
	)
	orgGetUserByOrgIdHandler := connect_go.NewUnaryHandler(
		OrgGetUserByOrgIdProcedure,
		svc.GetUserByOrgId,
		opts...,
	)
	orgListAgentsHandler := connect_go.NewServerStreamHandler(
		OrgListAgentsProcedure,
		svc.ListAgents,
		opts...,
	)
	orgListPublicUsersHandler := connect_go.NewServerStreamHandler(
		OrgListPublicUsersProcedure,
		svc.ListPublicUsers,
		opts...,
	)
	orgListUsersHandler := connect_go.NewServerStreamHandler(
		OrgListUsersProcedure,
		svc.ListUsers,
		opts...,
	)
	orgListUsersByOrgIdHandler := connect_go.NewServerStreamHandler(
		OrgListUsersByOrgIdProcedure,
		svc.ListUsersByOrgId,
		opts...,
	)
	orgListUsersByRegionHandler := connect_go.NewServerStreamHandler(
		OrgListUsersByRegionProcedure,
		svc.ListUsersByRegion,
		opts...,
	)
	orgUpdateMyUserHandler := connect_go.NewUnaryHandler(
		OrgUpdateMyUserProcedure,
		svc.UpdateMyUser,
		opts...,
	)
	orgUpdateUserHandler := connect_go.NewUnaryHandler(
		OrgUpdateUserProcedure,
		svc.UpdateUser,
		opts...,
	)
	orgUpdateUserLabelsHandler := connect_go.NewUnaryHandler(
		OrgUpdateUserLabelsProcedure,
		svc.UpdateUserLabels,
		opts...,
	)
	orgUpdateUserCallerIdHandler := connect_go.NewUnaryHandler(
		OrgUpdateUserCallerIdProcedure,
		svc.UpdateUserCallerId,
		opts...,
	)
	orgUpdateUserDisabledHandler := connect_go.NewUnaryHandler(
		OrgUpdateUserDisabledProcedure,
		svc.UpdateUserDisabled,
		opts...,
	)
	orgUpdateUserDisabledByOrgIdHandler := connect_go.NewUnaryHandler(
		OrgUpdateUserDisabledByOrgIdProcedure,
		svc.UpdateUserDisabledByOrgId,
		opts...,
	)
	orgGetMyUserPasswordResetLinkHandler := connect_go.NewUnaryHandler(
		OrgGetMyUserPasswordResetLinkProcedure,
		svc.GetMyUserPasswordResetLink,
		opts...,
	)
	orgGetUserPasswordResetLinkHandler := connect_go.NewUnaryHandler(
		OrgGetUserPasswordResetLinkProcedure,
		svc.GetUserPasswordResetLink,
		opts...,
	)
	orgGetUserPasswordResetLinkByOrgIdHandler := connect_go.NewUnaryHandler(
		OrgGetUserPasswordResetLinkByOrgIdProcedure,
		svc.GetUserPasswordResetLinkByOrgId,
		opts...,
	)
	orgCreatePasswordResetLinkHandler := connect_go.NewUnaryHandler(
		OrgCreatePasswordResetLinkProcedure,
		svc.CreatePasswordResetLink,
		opts...,
	)
	orgCreatePasswordResetLinkByOrgIdHandler := connect_go.NewUnaryHandler(
		OrgCreatePasswordResetLinkByOrgIdProcedure,
		svc.CreatePasswordResetLinkByOrgId,
		opts...,
	)
	orgGetUserLoginInfoHandler := connect_go.NewUnaryHandler(
		OrgGetUserLoginInfoProcedure,
		svc.GetUserLoginInfo,
		opts...,
	)
	orgGetUserEmailVerifiedHandler := connect_go.NewUnaryHandler(
		OrgGetUserEmailVerifiedProcedure,
		svc.GetUserEmailVerified,
		opts...,
	)
	orgGetUserEmailVerifiedByOrgIdHandler := connect_go.NewUnaryHandler(
		OrgGetUserEmailVerifiedByOrgIdProcedure,
		svc.GetUserEmailVerifiedByOrgId,
		opts...,
	)
	orgResetMyPasswordHandler := connect_go.NewUnaryHandler(
		OrgResetMyPasswordProcedure,
		svc.ResetMyPassword,
		opts...,
	)
	orgResetUserPasswordHandler := connect_go.NewUnaryHandler(
		OrgResetUserPasswordProcedure,
		svc.ResetUserPassword,
		opts...,
	)
	orgResetUserPasswordByOrgIdHandler := connect_go.NewUnaryHandler(
		OrgResetUserPasswordByOrgIdProcedure,
		svc.ResetUserPasswordByOrgId,
		opts...,
	)
	orgSendUserEmailVerificationHandler := connect_go.NewUnaryHandler(
		OrgSendUserEmailVerificationProcedure,
		svc.SendUserEmailVerification,
		opts...,
	)
	orgSendUserEmailVerificationByOrgIdHandler := connect_go.NewUnaryHandler(
		OrgSendUserEmailVerificationByOrgIdProcedure,
		svc.SendUserEmailVerificationByOrgId,
		opts...,
	)
	orgSendPasswordResetHandler := connect_go.NewUnaryHandler(
		OrgSendPasswordResetProcedure,
		svc.SendPasswordReset,
		opts...,
	)
	orgSendPasswordResetByOrgIdHandler := connect_go.NewUnaryHandler(
		OrgSendPasswordResetByOrgIdProcedure,
		svc.SendPasswordResetByOrgId,
		opts...,
	)
	orgGetUserSessionDataHandler := connect_go.NewUnaryHandler(
		OrgGetUserSessionDataProcedure,
		svc.GetUserSessionData,
		opts...,
	)
	orgGetAgentProfileGroupHandler := connect_go.NewUnaryHandler(
		OrgGetAgentProfileGroupProcedure,
		svc.GetAgentProfileGroup,
		opts...,
	)
	orgListAgentProfileGroupsHandler := connect_go.NewUnaryHandler(
		OrgListAgentProfileGroupsProcedure,
		svc.ListAgentProfileGroups,
		opts...,
	)
	orgUpdateAgentProfileGroupHandler := connect_go.NewUnaryHandler(
		OrgUpdateAgentProfileGroupProcedure,
		svc.UpdateAgentProfileGroup,
		opts...,
	)
	orgCreateAgentProfileGroupHandler := connect_go.NewUnaryHandler(
		OrgCreateAgentProfileGroupProcedure,
		svc.CreateAgentProfileGroup,
		opts...,
	)
	orgDeleteAgentProfileGroupHandler := connect_go.NewUnaryHandler(
		OrgDeleteAgentProfileGroupProcedure,
		svc.DeleteAgentProfileGroup,
		opts...,
	)
	orgAssignAgentProfileGroupsHandler := connect_go.NewUnaryHandler(
		OrgAssignAgentProfileGroupsProcedure,
		svc.AssignAgentProfileGroups,
		opts...,
	)
	orgAddUserSubscriptionHandler := connect_go.NewUnaryHandler(
		OrgAddUserSubscriptionProcedure,
		svc.AddUserSubscription,
		opts...,
	)
	orgAddUserSubscriptionByUserIdHandler := connect_go.NewUnaryHandler(
		OrgAddUserSubscriptionByUserIdProcedure,
		svc.AddUserSubscriptionByUserId,
		opts...,
	)
	orgGetUserSubscriptionHandler := connect_go.NewUnaryHandler(
		OrgGetUserSubscriptionProcedure,
		svc.GetUserSubscription,
		opts...,
	)
	orgGetUserSubscriptionByUserIdHandler := connect_go.NewUnaryHandler(
		OrgGetUserSubscriptionByUserIdProcedure,
		svc.GetUserSubscriptionByUserId,
		opts...,
	)
	orgUpdateUserSubscriptionHandler := connect_go.NewUnaryHandler(
		OrgUpdateUserSubscriptionProcedure,
		svc.UpdateUserSubscription,
		opts...,
	)
	orgUpdateUserSubscriptionByUserIdHandler := connect_go.NewUnaryHandler(
		OrgUpdateUserSubscriptionByUserIdProcedure,
		svc.UpdateUserSubscriptionByUserId,
		opts...,
	)
	orgRemoveUserSubscriptionHandler := connect_go.NewUnaryHandler(
		OrgRemoveUserSubscriptionProcedure,
		svc.RemoveUserSubscription,
		opts...,
	)
	orgRemoveUserSubscriptionByUserIdHandler := connect_go.NewUnaryHandler(
		OrgRemoveUserSubscriptionByUserIdProcedure,
		svc.RemoveUserSubscriptionByUserId,
		opts...,
	)
	orgListUserSubscriptionsHandler := connect_go.NewUnaryHandler(
		OrgListUserSubscriptionsProcedure,
		svc.ListUserSubscriptions,
		opts...,
	)
	orgListUserSubscriptionsByUserIdHandler := connect_go.NewUnaryHandler(
		OrgListUserSubscriptionsByUserIdProcedure,
		svc.ListUserSubscriptionsByUserId,
		opts...,
	)
	orgListOrgSubscriptionsHandler := connect_go.NewUnaryHandler(
		OrgListOrgSubscriptionsProcedure,
		svc.ListOrgSubscriptions,
		opts...,
	)
	orgCreateAuthTokenHandler := connect_go.NewUnaryHandler(
		OrgCreateAuthTokenProcedure,
		svc.CreateAuthToken,
		opts...,
	)
	orgCreateAuthTokenByUserIdHandler := connect_go.NewUnaryHandler(
		OrgCreateAuthTokenByUserIdProcedure,
		svc.CreateAuthTokenByUserId,
		opts...,
	)
	orgListAuthTokensHandler := connect_go.NewUnaryHandler(
		OrgListAuthTokensProcedure,
		svc.ListAuthTokens,
		opts...,
	)
	orgListAuthTokensByUserIdHandler := connect_go.NewUnaryHandler(
		OrgListAuthTokensByUserIdProcedure,
		svc.ListAuthTokensByUserId,
		opts...,
	)
	orgSetAuthTokenExpirationHandler := connect_go.NewUnaryHandler(
		OrgSetAuthTokenExpirationProcedure,
		svc.SetAuthTokenExpiration,
		opts...,
	)
	orgSetAuthTokenExpirationByUserIdHandler := connect_go.NewUnaryHandler(
		OrgSetAuthTokenExpirationByUserIdProcedure,
		svc.SetAuthTokenExpirationByUserId,
		opts...,
	)
	orgDeleteAuthTokenHandler := connect_go.NewUnaryHandler(
		OrgDeleteAuthTokenProcedure,
		svc.DeleteAuthToken,
		opts...,
	)
	orgDeleteAuthTokenByUserIdHandler := connect_go.NewUnaryHandler(
		OrgDeleteAuthTokenByUserIdProcedure,
		svc.DeleteAuthTokenByUserId,
		opts...,
	)
	orgGetHuntGroupSettingsHandler := connect_go.NewUnaryHandler(
		OrgGetHuntGroupSettingsProcedure,
		svc.GetHuntGroupSettings,
		opts...,
	)
	orgUpdateHuntGroupSettingsHandler := connect_go.NewUnaryHandler(
		OrgUpdateHuntGroupSettingsProcedure,
		svc.UpdateHuntGroupSettings,
		opts...,
	)
	orgCreateHuntGroupHandler := connect_go.NewUnaryHandler(
		OrgCreateHuntGroupProcedure,
		svc.CreateHuntGroup,
		opts...,
	)
	orgUpdateHuntGroupGeneralDetailsHandler := connect_go.NewUnaryHandler(
		OrgUpdateHuntGroupGeneralDetailsProcedure,
		svc.UpdateHuntGroupGeneralDetails,
		opts...,
	)
	orgDeleteHuntGroupHandler := connect_go.NewUnaryHandler(
		OrgDeleteHuntGroupProcedure,
		svc.DeleteHuntGroup,
		opts...,
	)
	orgGetHuntGroupDetailsHandler := connect_go.NewUnaryHandler(
		OrgGetHuntGroupDetailsProcedure,
		svc.GetHuntGroupDetails,
		opts...,
	)
	orgListCallerIdBucketsHandler := connect_go.NewUnaryHandler(
		OrgListCallerIdBucketsProcedure,
		svc.ListCallerIdBuckets,
		opts...,
	)
	orgGetDataDipTemplateHandler := connect_go.NewUnaryHandler(
		OrgGetDataDipTemplateProcedure,
		svc.GetDataDipTemplate,
		opts...,
	)
	orgListDataDipTemplatesHandler := connect_go.NewUnaryHandler(
		OrgListDataDipTemplatesProcedure,
		svc.ListDataDipTemplates,
		opts...,
	)
	orgCreateDataDipTemplateHandler := connect_go.NewUnaryHandler(
		OrgCreateDataDipTemplateProcedure,
		svc.CreateDataDipTemplate,
		opts...,
	)
	orgUpdateDataDipTemplateHandler := connect_go.NewUnaryHandler(
		OrgUpdateDataDipTemplateProcedure,
		svc.UpdateDataDipTemplate,
		opts...,
	)
	orgDeleteDataDipTemplateHandler := connect_go.NewUnaryHandler(
		OrgDeleteDataDipTemplateProcedure,
		svc.DeleteDataDipTemplate,
		opts...,
	)
	orgCopyDataDipTemplateHandler := connect_go.NewUnaryHandler(
		OrgCopyDataDipTemplateProcedure,
		svc.CopyDataDipTemplate,
		opts...,
	)
	orgCopyDataDipTemplateToOrganizationHandler := connect_go.NewUnaryHandler(
		OrgCopyDataDipTemplateToOrganizationProcedure,
		svc.CopyDataDipTemplateToOrganization,
		opts...,
	)
	orgListBroadcastTemplateGeneralDetailsHandler := connect_go.NewUnaryHandler(
		OrgListBroadcastTemplateGeneralDetailsProcedure,
		svc.ListBroadcastTemplateGeneralDetails,
		opts...,
	)
	orgListAgentResponseAutoRulesHandler := connect_go.NewUnaryHandler(
		OrgListAgentResponseAutoRulesProcedure,
		svc.ListAgentResponseAutoRules,
		opts...,
	)
	orgCreateAgentResponseAutoRulesHandler := connect_go.NewUnaryHandler(
		OrgCreateAgentResponseAutoRulesProcedure,
		svc.CreateAgentResponseAutoRules,
		opts...,
	)
	orgUpdateAgentResponseAutoRulesHandler := connect_go.NewUnaryHandler(
		OrgUpdateAgentResponseAutoRulesProcedure,
		svc.UpdateAgentResponseAutoRules,
		opts...,
	)
	orgDeleteAgentResponseAutoRulesHandler := connect_go.NewUnaryHandler(
		OrgDeleteAgentResponseAutoRulesProcedure,
		svc.DeleteAgentResponseAutoRules,
		opts...,
	)
	orgListHuntGroupWebLinksHandler := connect_go.NewUnaryHandler(
		OrgListHuntGroupWebLinksProcedure,
		svc.ListHuntGroupWebLinks,
		opts...,
	)
	orgCopyHuntGroupWebLinkHandler := connect_go.NewUnaryHandler(
		OrgCopyHuntGroupWebLinkProcedure,
		svc.CopyHuntGroupWebLink,
		opts...,
	)
	orgUpdateHuntGroupWebLinksHandler := connect_go.NewUnaryHandler(
		OrgUpdateHuntGroupWebLinksProcedure,
		svc.UpdateHuntGroupWebLinks,
		opts...,
	)
	orgListHuntGroupIntegrationLinksHandler := connect_go.NewUnaryHandler(
		OrgListHuntGroupIntegrationLinksProcedure,
		svc.ListHuntGroupIntegrationLinks,
		opts...,
	)
	orgCopyHuntGroupIntegrationLinkHandler := connect_go.NewUnaryHandler(
		OrgCopyHuntGroupIntegrationLinkProcedure,
		svc.CopyHuntGroupIntegrationLink,
		opts...,
	)
	orgUpdateHuntGroupIntegrationLinksHandler := connect_go.NewUnaryHandler(
		OrgUpdateHuntGroupIntegrationLinksProcedure,
		svc.UpdateHuntGroupIntegrationLinks,
		opts...,
	)
	orgGetHuntGroupClientInfoDisplayTemplateHandler := connect_go.NewUnaryHandler(
		OrgGetHuntGroupClientInfoDisplayTemplateProcedure,
		svc.GetHuntGroupClientInfoDisplayTemplate,
		opts...,
	)
	orgCreateHuntGroupClientInfoDisplayTemplateHandler := connect_go.NewUnaryHandler(
		OrgCreateHuntGroupClientInfoDisplayTemplateProcedure,
		svc.CreateHuntGroupClientInfoDisplayTemplate,
		opts...,
	)
	orgUpdateHuntGroupClientInfoDisplayTemplateHandler := connect_go.NewUnaryHandler(
		OrgUpdateHuntGroupClientInfoDisplayTemplateProcedure,
		svc.UpdateHuntGroupClientInfoDisplayTemplate,
		opts...,
	)
	orgDeleteHuntGroupClientInfoDisplayTemplateHandler := connect_go.NewUnaryHandler(
		OrgDeleteHuntGroupClientInfoDisplayTemplateProcedure,
		svc.DeleteHuntGroupClientInfoDisplayTemplate,
		opts...,
	)
	orgCopyHuntGroupClientInfoDisplayTemplateHandler := connect_go.NewUnaryHandler(
		OrgCopyHuntGroupClientInfoDisplayTemplateProcedure,
		svc.CopyHuntGroupClientInfoDisplayTemplate,
		opts...,
	)
	orgCreateCampaignClientInfoDisplayTemplateHandler := connect_go.NewUnaryHandler(
		OrgCreateCampaignClientInfoDisplayTemplateProcedure,
		svc.CreateCampaignClientInfoDisplayTemplate,
		opts...,
	)
	orgListHuntGroupsWithClientInfoTemplateDataHandler := connect_go.NewUnaryHandler(
		OrgListHuntGroupsWithClientInfoTemplateDataProcedure,
		svc.ListHuntGroupsWithClientInfoTemplateData,
		opts...,
	)
	orgListAgentTriggersHandler := connect_go.NewUnaryHandler(
		OrgListAgentTriggersProcedure,
		svc.ListAgentTriggers,
		opts...,
	)
	orgCopyAgentTriggerHandler := connect_go.NewUnaryHandler(
		OrgCopyAgentTriggerProcedure,
		svc.CopyAgentTrigger,
		opts...,
	)
	orgUpdateAgentTriggersHandler := connect_go.NewUnaryHandler(
		OrgUpdateAgentTriggersProcedure,
		svc.UpdateAgentTriggers,
		opts...,
	)
	orgListHuntGroupScriptsHandler := connect_go.NewUnaryHandler(
		OrgListHuntGroupScriptsProcedure,
		svc.ListHuntGroupScripts,
		opts...,
	)
	orgGetHuntGroupScriptHandler := connect_go.NewUnaryHandler(
		OrgGetHuntGroupScriptProcedure,
		svc.GetHuntGroupScript,
		opts...,
	)
	orgCreateHuntGroupScriptHandler := connect_go.NewUnaryHandler(
		OrgCreateHuntGroupScriptProcedure,
		svc.CreateHuntGroupScript,
		opts...,
	)
	orgUpdateHuntGroupScriptHandler := connect_go.NewUnaryHandler(
		OrgUpdateHuntGroupScriptProcedure,
		svc.UpdateHuntGroupScript,
		opts...,
	)
	orgDeleteHuntGroupScriptHandler := connect_go.NewUnaryHandler(
		OrgDeleteHuntGroupScriptProcedure,
		svc.DeleteHuntGroupScript,
		opts...,
	)
	orgAssignScriptToHuntGroupsHandler := connect_go.NewUnaryHandler(
		OrgAssignScriptToHuntGroupsProcedure,
		svc.AssignScriptToHuntGroups,
		opts...,
	)
	orgUnassignScriptFromHuntGroupsHandler := connect_go.NewUnaryHandler(
		OrgUnassignScriptFromHuntGroupsProcedure,
		svc.UnassignScriptFromHuntGroups,
		opts...,
	)
	orgCreateTrustHandler := connect_go.NewUnaryHandler(
		OrgCreateTrustProcedure,
		svc.CreateTrust,
		opts...,
	)
	orgAcceptTrustHandler := connect_go.NewUnaryHandler(
		OrgAcceptTrustProcedure,
		svc.AcceptTrust,
		opts...,
	)
	orgRejectTrustHandler := connect_go.NewUnaryHandler(
		OrgRejectTrustProcedure,
		svc.RejectTrust,
		opts...,
	)
	orgGetTrustHandler := connect_go.NewUnaryHandler(
		OrgGetTrustProcedure,
		svc.GetTrust,
		opts...,
	)
	orgListIncomingTrustsHandler := connect_go.NewUnaryHandler(
		OrgListIncomingTrustsProcedure,
		svc.ListIncomingTrusts,
		opts...,
	)
	orgListGivenTrustsHandler := connect_go.NewUnaryHandler(
		OrgListGivenTrustsProcedure,
		svc.ListGivenTrusts,
		opts...,
	)
	orgListAssignableTrustsHandler := connect_go.NewUnaryHandler(
		OrgListAssignableTrustsProcedure,
		svc.ListAssignableTrusts,
		opts...,
	)
	orgDeleteTrustHandler := connect_go.NewUnaryHandler(
		OrgDeleteTrustProcedure,
		svc.DeleteTrust,
		opts...,
	)
	orgAssignTrustHandler := connect_go.NewUnaryHandler(
		OrgAssignTrustProcedure,
		svc.AssignTrust,
		opts...,
	)
	orgUnassignTrustHandler := connect_go.NewUnaryHandler(
		OrgUnassignTrustProcedure,
		svc.UnassignTrust,
		opts...,
	)
	orgCreateLabelHandler := connect_go.NewUnaryHandler(
		OrgCreateLabelProcedure,
		svc.CreateLabel,
		opts...,
	)
	orgDeleteLabelHandler := connect_go.NewUnaryHandler(
		OrgDeleteLabelProcedure,
		svc.DeleteLabel,
		opts...,
	)
	orgListLabelsHandler := connect_go.NewUnaryHandler(
		OrgListLabelsProcedure,
		svc.ListLabels,
		opts...,
	)
	orgGetLabelHandler := connect_go.NewUnaryHandler(
		OrgGetLabelProcedure,
		svc.GetLabel,
		opts...,
	)
	orgUpdateLabelHandler := connect_go.NewUnaryHandler(
		OrgUpdateLabelProcedure,
		svc.UpdateLabel,
		opts...,
	)
	orgAssignLabelHandler := connect_go.NewUnaryHandler(
		OrgAssignLabelProcedure,
		svc.AssignLabel,
		opts...,
	)
	orgUnassignLabelHandler := connect_go.NewUnaryHandler(
		OrgUnassignLabelProcedure,
		svc.UnassignLabel,
		opts...,
	)
	orgGetAssignmentCountsHandler := connect_go.NewUnaryHandler(
		OrgGetAssignmentCountsProcedure,
		svc.GetAssignmentCounts,
		opts...,
	)
	orgGetAssignableLabelsHandler := connect_go.NewUnaryHandler(
		OrgGetAssignableLabelsProcedure,
		svc.GetAssignableLabels,
		opts...,
	)
	orgGetPermissionsHandler := connect_go.NewUnaryHandler(
		OrgGetPermissionsProcedure,
		svc.GetPermissions,
		opts...,
	)
	orgGetUserPermissionsHandler := connect_go.NewUnaryHandler(
		OrgGetUserPermissionsProcedure,
		svc.GetUserPermissions,
		opts...,
	)
	orgCreatePermissionGroupHandler := connect_go.NewUnaryHandler(
		OrgCreatePermissionGroupProcedure,
		svc.CreatePermissionGroup,
		opts...,
	)
	orgUpdatePermissionGroupHandler := connect_go.NewUnaryHandler(
		OrgUpdatePermissionGroupProcedure,
		svc.UpdatePermissionGroup,
		opts...,
	)
	orgDeletePermissionGroupHandler := connect_go.NewUnaryHandler(
		OrgDeletePermissionGroupProcedure,
		svc.DeletePermissionGroup,
		opts...,
	)
	orgListPermissionGroupsHandler := connect_go.NewUnaryHandler(
		OrgListPermissionGroupsProcedure,
		svc.ListPermissionGroups,
		opts...,
	)
	orgListPermissionGroupsByOrgIdHandler := connect_go.NewUnaryHandler(
		OrgListPermissionGroupsByOrgIdProcedure,
		svc.ListPermissionGroupsByOrgId,
		opts...,
	)
	orgAssignUsersPermissionGroupHandler := connect_go.NewUnaryHandler(
		OrgAssignUsersPermissionGroupProcedure,
		svc.AssignUsersPermissionGroup,
		opts...,
	)
	orgRevokeUsersPermissionGroupHandler := connect_go.NewUnaryHandler(
		OrgRevokeUsersPermissionGroupProcedure,
		svc.RevokeUsersPermissionGroup,
		opts...,
	)
	orgAssignLabelsHandler := connect_go.NewUnaryHandler(
		OrgAssignLabelsProcedure,
		svc.AssignLabels,
		opts...,
	)
	orgRevokeLabelsHandler := connect_go.NewUnaryHandler(
		OrgRevokeLabelsProcedure,
		svc.RevokeLabels,
		opts...,
	)
	orgAssignAccountOwnerPermissionToUserHandler := connect_go.NewUnaryHandler(
		OrgAssignAccountOwnerPermissionToUserProcedure,
		svc.AssignAccountOwnerPermissionToUser,
		opts...,
	)
	orgRevokeAccountOwnerPermissionFromUserHandler := connect_go.NewUnaryHandler(
		OrgRevokeAccountOwnerPermissionFromUserProcedure,
		svc.RevokeAccountOwnerPermissionFromUser,
		opts...,
	)
	orgInitDefaultPermissionGroupsHandler := connect_go.NewUnaryHandler(
		OrgInitDefaultPermissionGroupsProcedure,
		svc.InitDefaultPermissionGroups,
		opts...,
	)
	orgGetAccountOwnerGroupHandler := connect_go.NewUnaryHandler(
		OrgGetAccountOwnerGroupProcedure,
		svc.GetAccountOwnerGroup,
		opts...,
	)
	orgGetLicensesHandler := connect_go.NewUnaryHandler(
		OrgGetLicensesProcedure,
		svc.GetLicenses,
		opts...,
	)
	orgGetOrgLicensesHandler := connect_go.NewUnaryHandler(
		OrgGetOrgLicensesProcedure,
		svc.GetOrgLicenses,
		opts...,
	)
	orgUpdateLicensesHandler := connect_go.NewUnaryHandler(
		OrgUpdateLicensesProcedure,
		svc.UpdateLicenses,
		opts...,
	)
	orgRemovePermissionFromAllPermissionGroupsHandler := connect_go.NewUnaryHandler(
		OrgRemovePermissionFromAllPermissionGroupsProcedure,
		svc.RemovePermissionFromAllPermissionGroups,
		opts...,
	)
	orgListP3PermissionGroupsHandler := connect_go.NewUnaryHandler(
		OrgListP3PermissionGroupsProcedure,
		svc.ListP3PermissionGroups,
		opts...,
	)
	orgListP3PermissionGroupsByOrgIdHandler := connect_go.NewUnaryHandler(
		OrgListP3PermissionGroupsByOrgIdProcedure,
		svc.ListP3PermissionGroupsByOrgId,
		opts...,
	)
	orgCreateP3PermissionGroupHandler := connect_go.NewUnaryHandler(
		OrgCreateP3PermissionGroupProcedure,
		svc.CreateP3PermissionGroup,
		opts...,
	)
	orgUpdateP3PermissionGroupHandler := connect_go.NewUnaryHandler(
		OrgUpdateP3PermissionGroupProcedure,
		svc.UpdateP3PermissionGroup,
		opts...,
	)
	orgUpdateP3PermissionGroupByOrgIdHandler := connect_go.NewUnaryHandler(
		OrgUpdateP3PermissionGroupByOrgIdProcedure,
		svc.UpdateP3PermissionGroupByOrgId,
		opts...,
	)
	orgDeleteP3PermissionGroupHandler := connect_go.NewUnaryHandler(
		OrgDeleteP3PermissionGroupProcedure,
		svc.DeleteP3PermissionGroup,
		opts...,
	)
	orgAssignUsersP3PermissionGroupHandler := connect_go.NewUnaryHandler(
		OrgAssignUsersP3PermissionGroupProcedure,
		svc.AssignUsersP3PermissionGroup,
		opts...,
	)
	orgRevokeUsersP3PermissionGroupHandler := connect_go.NewUnaryHandler(
		OrgRevokeUsersP3PermissionGroupProcedure,
		svc.RevokeUsersP3PermissionGroup,
		opts...,
	)
	orgRefreshMfaLockoutHandler := connect_go.NewUnaryHandler(
		OrgRefreshMfaLockoutProcedure,
		svc.RefreshMfaLockout,
		opts...,
	)
	orgRefreshMfaLockoutByOrgIdHandler := connect_go.NewUnaryHandler(
		OrgRefreshMfaLockoutByOrgIdProcedure,
		svc.RefreshMfaLockoutByOrgId,
		opts...,
	)
	orgSetMfaTypeHandler := connect_go.NewUnaryHandler(
		OrgSetMfaTypeProcedure,
		svc.SetMfaType,
		opts...,
	)
	orgSetMyMfaTypeHandler := connect_go.NewUnaryHandler(
		OrgSetMyMfaTypeProcedure,
		svc.SetMyMfaType,
		opts...,
	)
	orgEnableUserMfaHandler := connect_go.NewUnaryHandler(
		OrgEnableUserMfaProcedure,
		svc.EnableUserMfa,
		opts...,
	)
	orgEnableMyUserMfaHandler := connect_go.NewUnaryHandler(
		OrgEnableMyUserMfaProcedure,
		svc.EnableMyUserMfa,
		opts...,
	)
	orgGetUserMfaInfoHandler := connect_go.NewUnaryHandler(
		OrgGetUserMfaInfoProcedure,
		svc.GetUserMfaInfo,
		opts...,
	)
	orgGetMyUserMfaInfoHandler := connect_go.NewUnaryHandler(
		OrgGetMyUserMfaInfoProcedure,
		svc.GetMyUserMfaInfo,
		opts...,
	)
	orgGetMyAllowedMfaMethodsHandler := connect_go.NewUnaryHandler(
		OrgGetMyAllowedMfaMethodsProcedure,
		svc.GetMyAllowedMfaMethods,
		opts...,
	)
	orgCreateBusinessHoursHandler := connect_go.NewUnaryHandler(
		OrgCreateBusinessHoursProcedure,
		svc.CreateBusinessHours,
		opts...,
	)
	orgUpdateBusinessHoursHandler := connect_go.NewUnaryHandler(
		OrgUpdateBusinessHoursProcedure,
		svc.UpdateBusinessHours,
		opts...,
	)
	orgAddGroupedUserIPRestrictionsHandler := connect_go.NewUnaryHandler(
		OrgAddGroupedUserIPRestrictionsProcedure,
		svc.AddGroupedUserIPRestrictions,
		opts...,
	)
	orgRemoveGroupedUserIPRestrictionsHandler := connect_go.NewUnaryHandler(
		OrgRemoveGroupedUserIPRestrictionsProcedure,
		svc.RemoveGroupedUserIPRestrictions,
		opts...,
	)
	orgListUsersAllowedIpsHandler := connect_go.NewUnaryHandler(
		OrgListUsersAllowedIpsProcedure,
		svc.ListUsersAllowedIps,
		opts...,
	)
	return "/api.v1alpha1.org.Org/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrgCreateOrganizationProcedure:
			orgCreateOrganizationHandler.ServeHTTP(w, r)
		case OrgGetOrganizationProcedure:
			orgGetOrganizationHandler.ServeHTTP(w, r)
		case OrgGetOrganizationByIdProcedure:
			orgGetOrganizationByIdHandler.ServeHTTP(w, r)
		case OrgUpdateOrganizationProcedure:
			orgUpdateOrganizationHandler.ServeHTTP(w, r)
		case OrgArchiveOrganizationProcedure:
			orgArchiveOrganizationHandler.ServeHTTP(w, r)
		case OrgUnArchiveOrganizationProcedure:
			orgUnArchiveOrganizationHandler.ServeHTTP(w, r)
		case OrgListAllOrganizationsGloballyProcedure:
			orgListAllOrganizationsGloballyHandler.ServeHTTP(w, r)
		case OrgListOrganizationsByRegionProcedure:
			orgListOrganizationsByRegionHandler.ServeHTTP(w, r)
		case OrgListArchivedOrganizationsProcedure:
			orgListArchivedOrganizationsHandler.ServeHTTP(w, r)
		case OrgConvertOrgToManualProcedure:
			orgConvertOrgToManualHandler.ServeHTTP(w, r)
		case OrgListOwnedOrgsProcedure:
			orgListOwnedOrgsHandler.ServeHTTP(w, r)
		case OrgGetOrganizationPreferencesProcedure:
			orgGetOrganizationPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateOrganizationPreferencesProcedure:
			orgUpdateOrganizationPreferencesHandler.ServeHTTP(w, r)
		case OrgGetAgentPreferencesProcedure:
			orgGetAgentPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateAgentPreferencesProcedure:
			orgUpdateAgentPreferencesHandler.ServeHTTP(w, r)
		case OrgGetContactPreferencesProcedure:
			orgGetContactPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateContactPreferencesProcedure:
			orgUpdateContactPreferencesHandler.ServeHTTP(w, r)
		case OrgGetAuthenticationPreferencesProcedure:
			orgGetAuthenticationPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateAuthenticationPreferencesProcedure:
			orgUpdateAuthenticationPreferencesHandler.ServeHTTP(w, r)
		case OrgGetWebhookPreferencesProcedure:
			orgGetWebhookPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateWebhookPreferencesProcedure:
			orgUpdateWebhookPreferencesHandler.ServeHTTP(w, r)
		case OrgGetDashboardGeneralPreferencesProcedure:
			orgGetDashboardGeneralPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateDashboardGeneralPreferencesProcedure:
			orgUpdateDashboardGeneralPreferencesHandler.ServeHTTP(w, r)
		case OrgGetDashboardQueuePreferencesProcedure:
			orgGetDashboardQueuePreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateDashboardQueuePreferencesProcedure:
			orgUpdateDashboardQueuePreferencesHandler.ServeHTTP(w, r)
		case OrgGetPhonePreferencesProcedure:
			orgGetPhonePreferencesHandler.ServeHTTP(w, r)
		case OrgUpdatePhonePreferencesProcedure:
			orgUpdatePhonePreferencesHandler.ServeHTTP(w, r)
		case OrgGetCompliancePreferencesProcedure:
			orgGetCompliancePreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateCompliancePreferencesProcedure:
			orgUpdateCompliancePreferencesHandler.ServeHTTP(w, r)
		case OrgGetBroadcastPreferencesProcedure:
			orgGetBroadcastPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateBroadcastPreferencesProcedure:
			orgUpdateBroadcastPreferencesHandler.ServeHTTP(w, r)
		case OrgGetSchedulePreferencesProcedure:
			orgGetSchedulePreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateSchedulePreferencesProcedure:
			orgUpdateSchedulePreferencesHandler.ServeHTTP(w, r)
		case OrgGetEmailSmsPreferencesProcedure:
			orgGetEmailSmsPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateEmailSmsPreferencesProcedure:
			orgUpdateEmailSmsPreferencesHandler.ServeHTTP(w, r)
		case OrgGetBusinessPreferencesProcedure:
			orgGetBusinessPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateBusinessPreferencesProcedure:
			orgUpdateBusinessPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateAdminBusinessPreferencesProcedure:
			orgUpdateAdminBusinessPreferencesHandler.ServeHTTP(w, r)
		case OrgGetScorecardsPreferencesProcedure:
			orgGetScorecardsPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateScorecardsPreferencesProcedure:
			orgUpdateScorecardsPreferencesHandler.ServeHTTP(w, r)
		case OrgGetVoiceAnalyticsPreferencesProcedure:
			orgGetVoiceAnalyticsPreferencesHandler.ServeHTTP(w, r)
		case OrgListVoiceAnalyticsPreferencesProcedure:
			orgListVoiceAnalyticsPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateVoiceAnalyticsPreferencesProcedure:
			orgUpdateVoiceAnalyticsPreferencesHandler.ServeHTTP(w, r)
		case OrgGetEndOfDayPreferencesProcedure:
			orgGetEndOfDayPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateEndOfDayPreferencesProcedure:
			orgUpdateEndOfDayPreferencesHandler.ServeHTTP(w, r)
		case OrgGetReportFilterPreferencesProcedure:
			orgGetReportFilterPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateReportFilterPreferencesProcedure:
			orgUpdateReportFilterPreferencesHandler.ServeHTTP(w, r)
		case OrgGetRecordingPreferencesProcedure:
			orgGetRecordingPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateRecordingPreferencesProcedure:
			orgUpdateRecordingPreferencesHandler.ServeHTTP(w, r)
		case OrgGetAdminClientPreferencesProcedure:
			orgGetAdminClientPreferencesHandler.ServeHTTP(w, r)
		case OrgUpdateAdminClientPreferencesProcedure:
			orgUpdateAdminClientPreferencesHandler.ServeHTTP(w, r)
		case OrgAcceptLinkbackRecordingTermsProcedure:
			orgAcceptLinkbackRecordingTermsHandler.ServeHTTP(w, r)
		case OrgLinkbackUpdateBroadcastTemplatesProcedure:
			orgLinkbackUpdateBroadcastTemplatesHandler.ServeHTTP(w, r)
		case OrgRecordEmailUnsubscribeAcknowledgementProcedure:
			orgRecordEmailUnsubscribeAcknowledgementHandler.ServeHTTP(w, r)
		case OrgClearEmailUnsubscribeAcknowledgementProcedure:
			orgClearEmailUnsubscribeAcknowledgementHandler.ServeHTTP(w, r)
		case OrgListBusinessHoursProcedure:
			orgListBusinessHoursHandler.ServeHTTP(w, r)
		case OrgGetBusinessHoursProcedure:
			orgGetBusinessHoursHandler.ServeHTTP(w, r)
		case OrgSetBusinessHoursProcedure:
			orgSetBusinessHoursHandler.ServeHTTP(w, r)
		case OrgAddIntervalToBusinessHoursProcedure:
			orgAddIntervalToBusinessHoursHandler.ServeHTTP(w, r)
		case OrgRemoveIntervalFromBusinessHoursProcedure:
			orgRemoveIntervalFromBusinessHoursHandler.ServeHTTP(w, r)
		case OrgUpdateBusinessHoursInfoProcedure:
			orgUpdateBusinessHoursInfoHandler.ServeHTTP(w, r)
		case OrgDeleteBusinessHoursProcedure:
			orgDeleteBusinessHoursHandler.ServeHTTP(w, r)
		case OrgEvaluateBusinessHoursProcedure:
			orgEvaluateBusinessHoursHandler.ServeHTTP(w, r)
		case OrgCreateUserProcedure:
			orgCreateUserHandler.ServeHTTP(w, r)
		case OrgCreateDelegatedUserProcedure:
			orgCreateDelegatedUserHandler.ServeHTTP(w, r)
		case OrgGetMyUserProcedure:
			orgGetMyUserHandler.ServeHTTP(w, r)
		case OrgGetUserProcedure:
			orgGetUserHandler.ServeHTTP(w, r)
		case OrgGetUserByOrgIdProcedure:
			orgGetUserByOrgIdHandler.ServeHTTP(w, r)
		case OrgListAgentsProcedure:
			orgListAgentsHandler.ServeHTTP(w, r)
		case OrgListPublicUsersProcedure:
			orgListPublicUsersHandler.ServeHTTP(w, r)
		case OrgListUsersProcedure:
			orgListUsersHandler.ServeHTTP(w, r)
		case OrgListUsersByOrgIdProcedure:
			orgListUsersByOrgIdHandler.ServeHTTP(w, r)
		case OrgListUsersByRegionProcedure:
			orgListUsersByRegionHandler.ServeHTTP(w, r)
		case OrgUpdateMyUserProcedure:
			orgUpdateMyUserHandler.ServeHTTP(w, r)
		case OrgUpdateUserProcedure:
			orgUpdateUserHandler.ServeHTTP(w, r)
		case OrgUpdateUserLabelsProcedure:
			orgUpdateUserLabelsHandler.ServeHTTP(w, r)
		case OrgUpdateUserCallerIdProcedure:
			orgUpdateUserCallerIdHandler.ServeHTTP(w, r)
		case OrgUpdateUserDisabledProcedure:
			orgUpdateUserDisabledHandler.ServeHTTP(w, r)
		case OrgUpdateUserDisabledByOrgIdProcedure:
			orgUpdateUserDisabledByOrgIdHandler.ServeHTTP(w, r)
		case OrgGetMyUserPasswordResetLinkProcedure:
			orgGetMyUserPasswordResetLinkHandler.ServeHTTP(w, r)
		case OrgGetUserPasswordResetLinkProcedure:
			orgGetUserPasswordResetLinkHandler.ServeHTTP(w, r)
		case OrgGetUserPasswordResetLinkByOrgIdProcedure:
			orgGetUserPasswordResetLinkByOrgIdHandler.ServeHTTP(w, r)
		case OrgCreatePasswordResetLinkProcedure:
			orgCreatePasswordResetLinkHandler.ServeHTTP(w, r)
		case OrgCreatePasswordResetLinkByOrgIdProcedure:
			orgCreatePasswordResetLinkByOrgIdHandler.ServeHTTP(w, r)
		case OrgGetUserLoginInfoProcedure:
			orgGetUserLoginInfoHandler.ServeHTTP(w, r)
		case OrgGetUserEmailVerifiedProcedure:
			orgGetUserEmailVerifiedHandler.ServeHTTP(w, r)
		case OrgGetUserEmailVerifiedByOrgIdProcedure:
			orgGetUserEmailVerifiedByOrgIdHandler.ServeHTTP(w, r)
		case OrgResetMyPasswordProcedure:
			orgResetMyPasswordHandler.ServeHTTP(w, r)
		case OrgResetUserPasswordProcedure:
			orgResetUserPasswordHandler.ServeHTTP(w, r)
		case OrgResetUserPasswordByOrgIdProcedure:
			orgResetUserPasswordByOrgIdHandler.ServeHTTP(w, r)
		case OrgSendUserEmailVerificationProcedure:
			orgSendUserEmailVerificationHandler.ServeHTTP(w, r)
		case OrgSendUserEmailVerificationByOrgIdProcedure:
			orgSendUserEmailVerificationByOrgIdHandler.ServeHTTP(w, r)
		case OrgSendPasswordResetProcedure:
			orgSendPasswordResetHandler.ServeHTTP(w, r)
		case OrgSendPasswordResetByOrgIdProcedure:
			orgSendPasswordResetByOrgIdHandler.ServeHTTP(w, r)
		case OrgGetUserSessionDataProcedure:
			orgGetUserSessionDataHandler.ServeHTTP(w, r)
		case OrgGetAgentProfileGroupProcedure:
			orgGetAgentProfileGroupHandler.ServeHTTP(w, r)
		case OrgListAgentProfileGroupsProcedure:
			orgListAgentProfileGroupsHandler.ServeHTTP(w, r)
		case OrgUpdateAgentProfileGroupProcedure:
			orgUpdateAgentProfileGroupHandler.ServeHTTP(w, r)
		case OrgCreateAgentProfileGroupProcedure:
			orgCreateAgentProfileGroupHandler.ServeHTTP(w, r)
		case OrgDeleteAgentProfileGroupProcedure:
			orgDeleteAgentProfileGroupHandler.ServeHTTP(w, r)
		case OrgAssignAgentProfileGroupsProcedure:
			orgAssignAgentProfileGroupsHandler.ServeHTTP(w, r)
		case OrgAddUserSubscriptionProcedure:
			orgAddUserSubscriptionHandler.ServeHTTP(w, r)
		case OrgAddUserSubscriptionByUserIdProcedure:
			orgAddUserSubscriptionByUserIdHandler.ServeHTTP(w, r)
		case OrgGetUserSubscriptionProcedure:
			orgGetUserSubscriptionHandler.ServeHTTP(w, r)
		case OrgGetUserSubscriptionByUserIdProcedure:
			orgGetUserSubscriptionByUserIdHandler.ServeHTTP(w, r)
		case OrgUpdateUserSubscriptionProcedure:
			orgUpdateUserSubscriptionHandler.ServeHTTP(w, r)
		case OrgUpdateUserSubscriptionByUserIdProcedure:
			orgUpdateUserSubscriptionByUserIdHandler.ServeHTTP(w, r)
		case OrgRemoveUserSubscriptionProcedure:
			orgRemoveUserSubscriptionHandler.ServeHTTP(w, r)
		case OrgRemoveUserSubscriptionByUserIdProcedure:
			orgRemoveUserSubscriptionByUserIdHandler.ServeHTTP(w, r)
		case OrgListUserSubscriptionsProcedure:
			orgListUserSubscriptionsHandler.ServeHTTP(w, r)
		case OrgListUserSubscriptionsByUserIdProcedure:
			orgListUserSubscriptionsByUserIdHandler.ServeHTTP(w, r)
		case OrgListOrgSubscriptionsProcedure:
			orgListOrgSubscriptionsHandler.ServeHTTP(w, r)
		case OrgCreateAuthTokenProcedure:
			orgCreateAuthTokenHandler.ServeHTTP(w, r)
		case OrgCreateAuthTokenByUserIdProcedure:
			orgCreateAuthTokenByUserIdHandler.ServeHTTP(w, r)
		case OrgListAuthTokensProcedure:
			orgListAuthTokensHandler.ServeHTTP(w, r)
		case OrgListAuthTokensByUserIdProcedure:
			orgListAuthTokensByUserIdHandler.ServeHTTP(w, r)
		case OrgSetAuthTokenExpirationProcedure:
			orgSetAuthTokenExpirationHandler.ServeHTTP(w, r)
		case OrgSetAuthTokenExpirationByUserIdProcedure:
			orgSetAuthTokenExpirationByUserIdHandler.ServeHTTP(w, r)
		case OrgDeleteAuthTokenProcedure:
			orgDeleteAuthTokenHandler.ServeHTTP(w, r)
		case OrgDeleteAuthTokenByUserIdProcedure:
			orgDeleteAuthTokenByUserIdHandler.ServeHTTP(w, r)
		case OrgGetHuntGroupSettingsProcedure:
			orgGetHuntGroupSettingsHandler.ServeHTTP(w, r)
		case OrgUpdateHuntGroupSettingsProcedure:
			orgUpdateHuntGroupSettingsHandler.ServeHTTP(w, r)
		case OrgCreateHuntGroupProcedure:
			orgCreateHuntGroupHandler.ServeHTTP(w, r)
		case OrgUpdateHuntGroupGeneralDetailsProcedure:
			orgUpdateHuntGroupGeneralDetailsHandler.ServeHTTP(w, r)
		case OrgDeleteHuntGroupProcedure:
			orgDeleteHuntGroupHandler.ServeHTTP(w, r)
		case OrgGetHuntGroupDetailsProcedure:
			orgGetHuntGroupDetailsHandler.ServeHTTP(w, r)
		case OrgListCallerIdBucketsProcedure:
			orgListCallerIdBucketsHandler.ServeHTTP(w, r)
		case OrgGetDataDipTemplateProcedure:
			orgGetDataDipTemplateHandler.ServeHTTP(w, r)
		case OrgListDataDipTemplatesProcedure:
			orgListDataDipTemplatesHandler.ServeHTTP(w, r)
		case OrgCreateDataDipTemplateProcedure:
			orgCreateDataDipTemplateHandler.ServeHTTP(w, r)
		case OrgUpdateDataDipTemplateProcedure:
			orgUpdateDataDipTemplateHandler.ServeHTTP(w, r)
		case OrgDeleteDataDipTemplateProcedure:
			orgDeleteDataDipTemplateHandler.ServeHTTP(w, r)
		case OrgCopyDataDipTemplateProcedure:
			orgCopyDataDipTemplateHandler.ServeHTTP(w, r)
		case OrgCopyDataDipTemplateToOrganizationProcedure:
			orgCopyDataDipTemplateToOrganizationHandler.ServeHTTP(w, r)
		case OrgListBroadcastTemplateGeneralDetailsProcedure:
			orgListBroadcastTemplateGeneralDetailsHandler.ServeHTTP(w, r)
		case OrgListAgentResponseAutoRulesProcedure:
			orgListAgentResponseAutoRulesHandler.ServeHTTP(w, r)
		case OrgCreateAgentResponseAutoRulesProcedure:
			orgCreateAgentResponseAutoRulesHandler.ServeHTTP(w, r)
		case OrgUpdateAgentResponseAutoRulesProcedure:
			orgUpdateAgentResponseAutoRulesHandler.ServeHTTP(w, r)
		case OrgDeleteAgentResponseAutoRulesProcedure:
			orgDeleteAgentResponseAutoRulesHandler.ServeHTTP(w, r)
		case OrgListHuntGroupWebLinksProcedure:
			orgListHuntGroupWebLinksHandler.ServeHTTP(w, r)
		case OrgCopyHuntGroupWebLinkProcedure:
			orgCopyHuntGroupWebLinkHandler.ServeHTTP(w, r)
		case OrgUpdateHuntGroupWebLinksProcedure:
			orgUpdateHuntGroupWebLinksHandler.ServeHTTP(w, r)
		case OrgListHuntGroupIntegrationLinksProcedure:
			orgListHuntGroupIntegrationLinksHandler.ServeHTTP(w, r)
		case OrgCopyHuntGroupIntegrationLinkProcedure:
			orgCopyHuntGroupIntegrationLinkHandler.ServeHTTP(w, r)
		case OrgUpdateHuntGroupIntegrationLinksProcedure:
			orgUpdateHuntGroupIntegrationLinksHandler.ServeHTTP(w, r)
		case OrgGetHuntGroupClientInfoDisplayTemplateProcedure:
			orgGetHuntGroupClientInfoDisplayTemplateHandler.ServeHTTP(w, r)
		case OrgCreateHuntGroupClientInfoDisplayTemplateProcedure:
			orgCreateHuntGroupClientInfoDisplayTemplateHandler.ServeHTTP(w, r)
		case OrgUpdateHuntGroupClientInfoDisplayTemplateProcedure:
			orgUpdateHuntGroupClientInfoDisplayTemplateHandler.ServeHTTP(w, r)
		case OrgDeleteHuntGroupClientInfoDisplayTemplateProcedure:
			orgDeleteHuntGroupClientInfoDisplayTemplateHandler.ServeHTTP(w, r)
		case OrgCopyHuntGroupClientInfoDisplayTemplateProcedure:
			orgCopyHuntGroupClientInfoDisplayTemplateHandler.ServeHTTP(w, r)
		case OrgCreateCampaignClientInfoDisplayTemplateProcedure:
			orgCreateCampaignClientInfoDisplayTemplateHandler.ServeHTTP(w, r)
		case OrgListHuntGroupsWithClientInfoTemplateDataProcedure:
			orgListHuntGroupsWithClientInfoTemplateDataHandler.ServeHTTP(w, r)
		case OrgListAgentTriggersProcedure:
			orgListAgentTriggersHandler.ServeHTTP(w, r)
		case OrgCopyAgentTriggerProcedure:
			orgCopyAgentTriggerHandler.ServeHTTP(w, r)
		case OrgUpdateAgentTriggersProcedure:
			orgUpdateAgentTriggersHandler.ServeHTTP(w, r)
		case OrgListHuntGroupScriptsProcedure:
			orgListHuntGroupScriptsHandler.ServeHTTP(w, r)
		case OrgGetHuntGroupScriptProcedure:
			orgGetHuntGroupScriptHandler.ServeHTTP(w, r)
		case OrgCreateHuntGroupScriptProcedure:
			orgCreateHuntGroupScriptHandler.ServeHTTP(w, r)
		case OrgUpdateHuntGroupScriptProcedure:
			orgUpdateHuntGroupScriptHandler.ServeHTTP(w, r)
		case OrgDeleteHuntGroupScriptProcedure:
			orgDeleteHuntGroupScriptHandler.ServeHTTP(w, r)
		case OrgAssignScriptToHuntGroupsProcedure:
			orgAssignScriptToHuntGroupsHandler.ServeHTTP(w, r)
		case OrgUnassignScriptFromHuntGroupsProcedure:
			orgUnassignScriptFromHuntGroupsHandler.ServeHTTP(w, r)
		case OrgCreateTrustProcedure:
			orgCreateTrustHandler.ServeHTTP(w, r)
		case OrgAcceptTrustProcedure:
			orgAcceptTrustHandler.ServeHTTP(w, r)
		case OrgRejectTrustProcedure:
			orgRejectTrustHandler.ServeHTTP(w, r)
		case OrgGetTrustProcedure:
			orgGetTrustHandler.ServeHTTP(w, r)
		case OrgListIncomingTrustsProcedure:
			orgListIncomingTrustsHandler.ServeHTTP(w, r)
		case OrgListGivenTrustsProcedure:
			orgListGivenTrustsHandler.ServeHTTP(w, r)
		case OrgListAssignableTrustsProcedure:
			orgListAssignableTrustsHandler.ServeHTTP(w, r)
		case OrgDeleteTrustProcedure:
			orgDeleteTrustHandler.ServeHTTP(w, r)
		case OrgAssignTrustProcedure:
			orgAssignTrustHandler.ServeHTTP(w, r)
		case OrgUnassignTrustProcedure:
			orgUnassignTrustHandler.ServeHTTP(w, r)
		case OrgCreateLabelProcedure:
			orgCreateLabelHandler.ServeHTTP(w, r)
		case OrgDeleteLabelProcedure:
			orgDeleteLabelHandler.ServeHTTP(w, r)
		case OrgListLabelsProcedure:
			orgListLabelsHandler.ServeHTTP(w, r)
		case OrgGetLabelProcedure:
			orgGetLabelHandler.ServeHTTP(w, r)
		case OrgUpdateLabelProcedure:
			orgUpdateLabelHandler.ServeHTTP(w, r)
		case OrgAssignLabelProcedure:
			orgAssignLabelHandler.ServeHTTP(w, r)
		case OrgUnassignLabelProcedure:
			orgUnassignLabelHandler.ServeHTTP(w, r)
		case OrgGetAssignmentCountsProcedure:
			orgGetAssignmentCountsHandler.ServeHTTP(w, r)
		case OrgGetAssignableLabelsProcedure:
			orgGetAssignableLabelsHandler.ServeHTTP(w, r)
		case OrgGetPermissionsProcedure:
			orgGetPermissionsHandler.ServeHTTP(w, r)
		case OrgGetUserPermissionsProcedure:
			orgGetUserPermissionsHandler.ServeHTTP(w, r)
		case OrgCreatePermissionGroupProcedure:
			orgCreatePermissionGroupHandler.ServeHTTP(w, r)
		case OrgUpdatePermissionGroupProcedure:
			orgUpdatePermissionGroupHandler.ServeHTTP(w, r)
		case OrgDeletePermissionGroupProcedure:
			orgDeletePermissionGroupHandler.ServeHTTP(w, r)
		case OrgListPermissionGroupsProcedure:
			orgListPermissionGroupsHandler.ServeHTTP(w, r)
		case OrgListPermissionGroupsByOrgIdProcedure:
			orgListPermissionGroupsByOrgIdHandler.ServeHTTP(w, r)
		case OrgAssignUsersPermissionGroupProcedure:
			orgAssignUsersPermissionGroupHandler.ServeHTTP(w, r)
		case OrgRevokeUsersPermissionGroupProcedure:
			orgRevokeUsersPermissionGroupHandler.ServeHTTP(w, r)
		case OrgAssignLabelsProcedure:
			orgAssignLabelsHandler.ServeHTTP(w, r)
		case OrgRevokeLabelsProcedure:
			orgRevokeLabelsHandler.ServeHTTP(w, r)
		case OrgAssignAccountOwnerPermissionToUserProcedure:
			orgAssignAccountOwnerPermissionToUserHandler.ServeHTTP(w, r)
		case OrgRevokeAccountOwnerPermissionFromUserProcedure:
			orgRevokeAccountOwnerPermissionFromUserHandler.ServeHTTP(w, r)
		case OrgInitDefaultPermissionGroupsProcedure:
			orgInitDefaultPermissionGroupsHandler.ServeHTTP(w, r)
		case OrgGetAccountOwnerGroupProcedure:
			orgGetAccountOwnerGroupHandler.ServeHTTP(w, r)
		case OrgGetLicensesProcedure:
			orgGetLicensesHandler.ServeHTTP(w, r)
		case OrgGetOrgLicensesProcedure:
			orgGetOrgLicensesHandler.ServeHTTP(w, r)
		case OrgUpdateLicensesProcedure:
			orgUpdateLicensesHandler.ServeHTTP(w, r)
		case OrgRemovePermissionFromAllPermissionGroupsProcedure:
			orgRemovePermissionFromAllPermissionGroupsHandler.ServeHTTP(w, r)
		case OrgListP3PermissionGroupsProcedure:
			orgListP3PermissionGroupsHandler.ServeHTTP(w, r)
		case OrgListP3PermissionGroupsByOrgIdProcedure:
			orgListP3PermissionGroupsByOrgIdHandler.ServeHTTP(w, r)
		case OrgCreateP3PermissionGroupProcedure:
			orgCreateP3PermissionGroupHandler.ServeHTTP(w, r)
		case OrgUpdateP3PermissionGroupProcedure:
			orgUpdateP3PermissionGroupHandler.ServeHTTP(w, r)
		case OrgUpdateP3PermissionGroupByOrgIdProcedure:
			orgUpdateP3PermissionGroupByOrgIdHandler.ServeHTTP(w, r)
		case OrgDeleteP3PermissionGroupProcedure:
			orgDeleteP3PermissionGroupHandler.ServeHTTP(w, r)
		case OrgAssignUsersP3PermissionGroupProcedure:
			orgAssignUsersP3PermissionGroupHandler.ServeHTTP(w, r)
		case OrgRevokeUsersP3PermissionGroupProcedure:
			orgRevokeUsersP3PermissionGroupHandler.ServeHTTP(w, r)
		case OrgRefreshMfaLockoutProcedure:
			orgRefreshMfaLockoutHandler.ServeHTTP(w, r)
		case OrgRefreshMfaLockoutByOrgIdProcedure:
			orgRefreshMfaLockoutByOrgIdHandler.ServeHTTP(w, r)
		case OrgSetMfaTypeProcedure:
			orgSetMfaTypeHandler.ServeHTTP(w, r)
		case OrgSetMyMfaTypeProcedure:
			orgSetMyMfaTypeHandler.ServeHTTP(w, r)
		case OrgEnableUserMfaProcedure:
			orgEnableUserMfaHandler.ServeHTTP(w, r)
		case OrgEnableMyUserMfaProcedure:
			orgEnableMyUserMfaHandler.ServeHTTP(w, r)
		case OrgGetUserMfaInfoProcedure:
			orgGetUserMfaInfoHandler.ServeHTTP(w, r)
		case OrgGetMyUserMfaInfoProcedure:
			orgGetMyUserMfaInfoHandler.ServeHTTP(w, r)
		case OrgGetMyAllowedMfaMethodsProcedure:
			orgGetMyAllowedMfaMethodsHandler.ServeHTTP(w, r)
		case OrgCreateBusinessHoursProcedure:
			orgCreateBusinessHoursHandler.ServeHTTP(w, r)
		case OrgUpdateBusinessHoursProcedure:
			orgUpdateBusinessHoursHandler.ServeHTTP(w, r)
		case OrgAddGroupedUserIPRestrictionsProcedure:
			orgAddGroupedUserIPRestrictionsHandler.ServeHTTP(w, r)
		case OrgRemoveGroupedUserIPRestrictionsProcedure:
			orgRemoveGroupedUserIPRestrictionsHandler.ServeHTTP(w, r)
		case OrgListUsersAllowedIpsProcedure:
			orgListUsersAllowedIpsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrgHandler returns CodeUnimplemented from all methods.
type UnimplementedOrgHandler struct{}

func (UnimplementedOrgHandler) CreateOrganization(context.Context, *connect_go.Request[org.CreateOrganizationRequest]) (*connect_go.Response[org.CreateOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateOrganization is not implemented"))
}

func (UnimplementedOrgHandler) GetOrganization(context.Context, *connect_go.Request[org.GetOrganizationRequest]) (*connect_go.Response[org.GetOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetOrganization is not implemented"))
}

func (UnimplementedOrgHandler) GetOrganizationById(context.Context, *connect_go.Request[org.GetOrganizationByIdRequest]) (*connect_go.Response[org.GetOrganizationByIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetOrganizationById is not implemented"))
}

func (UnimplementedOrgHandler) UpdateOrganization(context.Context, *connect_go.Request[org.UpdateOrganizationRequest]) (*connect_go.Response[org.UpdateOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateOrganization is not implemented"))
}

func (UnimplementedOrgHandler) ArchiveOrganization(context.Context, *connect_go.Request[org.ArchiveOrganizationRequest]) (*connect_go.Response[org.ArchiveOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ArchiveOrganization is not implemented"))
}

func (UnimplementedOrgHandler) UnArchiveOrganization(context.Context, *connect_go.Request[org.UnArchiveOrganizationRequest]) (*connect_go.Response[org.UnArchiveOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UnArchiveOrganization is not implemented"))
}

func (UnimplementedOrgHandler) ListAllOrganizationsGlobally(context.Context, *connect_go.Request[org.ListAllOrganizationsGloballyRequest], *connect_go.ServerStream[org.ListAllOrganizationsGloballyResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListAllOrganizationsGlobally is not implemented"))
}

func (UnimplementedOrgHandler) ListOrganizationsByRegion(context.Context, *connect_go.Request[org.ListOrganizationsByRegionRequest], *connect_go.ServerStream[org.ListOrganizationsByRegionResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListOrganizationsByRegion is not implemented"))
}

func (UnimplementedOrgHandler) ListArchivedOrganizations(context.Context, *connect_go.Request[org.ListArchivedOrganizationsRequest], *connect_go.ServerStream[org.ListArchivedOrganizationsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListArchivedOrganizations is not implemented"))
}

func (UnimplementedOrgHandler) ConvertOrgToManual(context.Context, *connect_go.Request[org.ConvertOrgToManualRequest]) (*connect_go.Response[org.ConvertOrgToManualResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ConvertOrgToManual is not implemented"))
}

func (UnimplementedOrgHandler) ListOwnedOrgs(context.Context, *connect_go.Request[org.ListOwnedOrgsRequest], *connect_go.ServerStream[org.ListOwnedOrgsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListOwnedOrgs is not implemented"))
}

func (UnimplementedOrgHandler) GetOrganizationPreferences(context.Context, *connect_go.Request[org.GetOrganizationPreferencesRequest]) (*connect_go.Response[org.GetOrganizationPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetOrganizationPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateOrganizationPreferences(context.Context, *connect_go.Request[org.UpdateOrganizationPreferencesRequest]) (*connect_go.Response[org.UpdateOrganizationPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateOrganizationPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetAgentPreferences(context.Context, *connect_go.Request[org.GetAgentPreferencesRequest]) (*connect_go.Response[org.GetAgentPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetAgentPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAgentPreferences(context.Context, *connect_go.Request[org.UpdateAgentPreferencesRequest]) (*connect_go.Response[org.UpdateAgentPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateAgentPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetContactPreferences(context.Context, *connect_go.Request[org.GetContactPreferencesRequest]) (*connect_go.Response[org.GetContactPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetContactPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateContactPreferences(context.Context, *connect_go.Request[org.UpdateContactPreferencesRequest]) (*connect_go.Response[org.UpdateContactPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateContactPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetAuthenticationPreferences(context.Context, *connect_go.Request[org.GetAuthenticationPreferencesRequest]) (*connect_go.Response[org.GetAuthenticationPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetAuthenticationPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAuthenticationPreferences(context.Context, *connect_go.Request[org.UpdateAuthenticationPreferencesRequest]) (*connect_go.Response[org.UpdateAuthenticationPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateAuthenticationPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetWebhookPreferences(context.Context, *connect_go.Request[org.GetWebhookPreferencesRequest]) (*connect_go.Response[org.GetWebhookPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetWebhookPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateWebhookPreferences(context.Context, *connect_go.Request[org.UpdateWebhookPreferencesRequest]) (*connect_go.Response[org.UpdateWebhookPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateWebhookPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetDashboardGeneralPreferences(context.Context, *connect_go.Request[org.GetDashboardGeneralPreferencesRequest]) (*connect_go.Response[org.GetDashboardGeneralPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetDashboardGeneralPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateDashboardGeneralPreferences(context.Context, *connect_go.Request[org.UpdateDashboardGeneralPreferencesRequest]) (*connect_go.Response[org.UpdateDashboardGeneralPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateDashboardGeneralPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetDashboardQueuePreferences(context.Context, *connect_go.Request[org.GetDashboardQueuePreferencesRequest]) (*connect_go.Response[org.GetDashboardQueuePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetDashboardQueuePreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateDashboardQueuePreferences(context.Context, *connect_go.Request[org.UpdateDashboardQueuePreferencesRequest]) (*connect_go.Response[org.UpdateDashboardQueuePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateDashboardQueuePreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetPhonePreferences(context.Context, *connect_go.Request[org.GetPhonePreferencesRequest]) (*connect_go.Response[org.GetPhonePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetPhonePreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdatePhonePreferences(context.Context, *connect_go.Request[org.UpdatePhonePreferencesRequest]) (*connect_go.Response[org.UpdatePhonePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdatePhonePreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetCompliancePreferences(context.Context, *connect_go.Request[org.GetCompliancePreferencesRequest]) (*connect_go.Response[org.GetCompliancePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetCompliancePreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateCompliancePreferences(context.Context, *connect_go.Request[org.UpdateCompliancePreferencesRequest]) (*connect_go.Response[org.UpdateCompliancePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateCompliancePreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetBroadcastPreferences(context.Context, *connect_go.Request[org.GetBroadcastPreferencesRequest]) (*connect_go.Response[org.GetBroadcastPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetBroadcastPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateBroadcastPreferences(context.Context, *connect_go.Request[org.UpdateBroadcastPreferencesRequest]) (*connect_go.Response[org.UpdateBroadcastPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateBroadcastPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetSchedulePreferences(context.Context, *connect_go.Request[org.GetSchedulePreferencesRequest]) (*connect_go.Response[org.GetSchedulePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetSchedulePreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateSchedulePreferences(context.Context, *connect_go.Request[org.UpdateSchedulePreferencesRequest]) (*connect_go.Response[org.UpdateSchedulePreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateSchedulePreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetEmailSmsPreferences(context.Context, *connect_go.Request[org.GetEmailSmsPreferencesRequest]) (*connect_go.Response[org.GetEmailSmsPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetEmailSmsPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateEmailSmsPreferences(context.Context, *connect_go.Request[org.UpdateEmailSmsPreferencesRequest]) (*connect_go.Response[org.UpdateEmailSmsPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateEmailSmsPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetBusinessPreferences(context.Context, *connect_go.Request[org.GetBusinessPreferencesRequest]) (*connect_go.Response[org.GetBusinessPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetBusinessPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateBusinessPreferences(context.Context, *connect_go.Request[org.UpdateBusinessPreferencesRequest]) (*connect_go.Response[org.UpdateBusinessPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateBusinessPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAdminBusinessPreferences(context.Context, *connect_go.Request[org.UpdateAdminBusinessPreferencesRequest]) (*connect_go.Response[org.UpdateAdminBusinessPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateAdminBusinessPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetScorecardsPreferences(context.Context, *connect_go.Request[org.GetScorecardsPreferencesRequest]) (*connect_go.Response[org.GetScorecardsPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetScorecardsPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateScorecardsPreferences(context.Context, *connect_go.Request[org.UpdateScorecardsPreferencesRequest]) (*connect_go.Response[org.UpdateScorecardsPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateScorecardsPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetVoiceAnalyticsPreferences(context.Context, *connect_go.Request[org.GetVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[org.GetVoiceAnalyticsPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetVoiceAnalyticsPreferences is not implemented"))
}

func (UnimplementedOrgHandler) ListVoiceAnalyticsPreferences(context.Context, *connect_go.Request[org.ListVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[org.ListVoiceAnalyticsPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListVoiceAnalyticsPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateVoiceAnalyticsPreferences(context.Context, *connect_go.Request[org.UpdateVoiceAnalyticsPreferencesRequest]) (*connect_go.Response[org.UpdateVoiceAnalyticsPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateVoiceAnalyticsPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetEndOfDayPreferences(context.Context, *connect_go.Request[org.GetEndOfDayPreferencesRequest]) (*connect_go.Response[org.GetEndOfDayPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetEndOfDayPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateEndOfDayPreferences(context.Context, *connect_go.Request[org.UpdateEndOfDayPreferencesRequest]) (*connect_go.Response[org.UpdateEndOfDayPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateEndOfDayPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetReportFilterPreferences(context.Context, *connect_go.Request[org.GetFilterPreferencesRequest]) (*connect_go.Response[org.GetFilterPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetReportFilterPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateReportFilterPreferences(context.Context, *connect_go.Request[org.UpdateFilterPreferencesRequest]) (*connect_go.Response[org.UpdateFilterPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateReportFilterPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetRecordingPreferences(context.Context, *connect_go.Request[org.GetRecordingPreferencesRequest]) (*connect_go.Response[org.GetRecordingPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetRecordingPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateRecordingPreferences(context.Context, *connect_go.Request[org.UpdateRecordingPreferencesRequest]) (*connect_go.Response[org.UpdateRecordingPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateRecordingPreferences is not implemented"))
}

func (UnimplementedOrgHandler) GetAdminClientPreferences(context.Context, *connect_go.Request[org.GetAdminClientPreferencesRequest]) (*connect_go.Response[org.GetAdminClientPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetAdminClientPreferences is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAdminClientPreferences(context.Context, *connect_go.Request[org.UpdateAdminClientPreferencesRequest]) (*connect_go.Response[org.UpdateAdminClientPreferencesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateAdminClientPreferences is not implemented"))
}

func (UnimplementedOrgHandler) AcceptLinkbackRecordingTerms(context.Context, *connect_go.Request[org.AcceptLinkbackRecordingTermsRequest]) (*connect_go.Response[org.AcceptLinkbackRecordingTermsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.AcceptLinkbackRecordingTerms is not implemented"))
}

func (UnimplementedOrgHandler) LinkbackUpdateBroadcastTemplates(context.Context, *connect_go.Request[org.LinkbackUpdateBroadcastTemplatesRequest]) (*connect_go.Response[org.LinkbackUpdateBroadcastTemplatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.LinkbackUpdateBroadcastTemplates is not implemented"))
}

func (UnimplementedOrgHandler) RecordEmailUnsubscribeAcknowledgement(context.Context, *connect_go.Request[org.RecordEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[org.RecordEmailUnsubscribeAcknowledgementResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.RecordEmailUnsubscribeAcknowledgement is not implemented"))
}

func (UnimplementedOrgHandler) ClearEmailUnsubscribeAcknowledgement(context.Context, *connect_go.Request[org.ClearEmailUnsubscribeAcknowledgementRequest]) (*connect_go.Response[org.ClearEmailUnsubscribeAcknowledgementResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ClearEmailUnsubscribeAcknowledgement is not implemented"))
}

func (UnimplementedOrgHandler) ListBusinessHours(context.Context, *connect_go.Request[org.ListBusinessHoursRequest]) (*connect_go.Response[org.ListBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListBusinessHours is not implemented"))
}

func (UnimplementedOrgHandler) GetBusinessHours(context.Context, *connect_go.Request[org.GetBusinessHoursRequest]) (*connect_go.Response[org.GetBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetBusinessHours is not implemented"))
}

func (UnimplementedOrgHandler) SetBusinessHours(context.Context, *connect_go.Request[org.SetBusinessHoursRequest]) (*connect_go.Response[org.SetBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.SetBusinessHours is not implemented"))
}

func (UnimplementedOrgHandler) AddIntervalToBusinessHours(context.Context, *connect_go.Request[org.AddIntervalToBusinessHoursRequest]) (*connect_go.Response[org.AddIntervalToBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.AddIntervalToBusinessHours is not implemented"))
}

func (UnimplementedOrgHandler) RemoveIntervalFromBusinessHours(context.Context, *connect_go.Request[org.RemoveIntervalFromBusinessHoursRequest]) (*connect_go.Response[org.RemoveIntervalFromBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.RemoveIntervalFromBusinessHours is not implemented"))
}

func (UnimplementedOrgHandler) UpdateBusinessHoursInfo(context.Context, *connect_go.Request[org.UpdateBusinessHoursInfoRequest]) (*connect_go.Response[org.UpdateBusinessHoursInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateBusinessHoursInfo is not implemented"))
}

func (UnimplementedOrgHandler) DeleteBusinessHours(context.Context, *connect_go.Request[org.DeleteBusinessHoursRequest]) (*connect_go.Response[org.DeleteBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.DeleteBusinessHours is not implemented"))
}

func (UnimplementedOrgHandler) EvaluateBusinessHours(context.Context, *connect_go.Request[org.EvaluateBusinessHoursRequest]) (*connect_go.Response[org.EvaluateBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.EvaluateBusinessHours is not implemented"))
}

func (UnimplementedOrgHandler) CreateUser(context.Context, *connect_go.Request[org.CreateUserRequest]) (*connect_go.Response[org.CreateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateUser is not implemented"))
}

func (UnimplementedOrgHandler) CreateDelegatedUser(context.Context, *connect_go.Request[org.CreateDelegatedUserRequest]) (*connect_go.Response[org.CreateDelegatedUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateDelegatedUser is not implemented"))
}

func (UnimplementedOrgHandler) GetMyUser(context.Context, *connect_go.Request[org.GetMyUserRequest]) (*connect_go.Response[org.GetMyUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetMyUser is not implemented"))
}

func (UnimplementedOrgHandler) GetUser(context.Context, *connect_go.Request[org.GetUserRequest]) (*connect_go.Response[org.GetUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetUser is not implemented"))
}

func (UnimplementedOrgHandler) GetUserByOrgId(context.Context, *connect_go.Request[org.GetUserByOrgIdRequest]) (*connect_go.Response[org.GetUserByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetUserByOrgId is not implemented"))
}

func (UnimplementedOrgHandler) ListAgents(context.Context, *connect_go.Request[org.ListAgentsRequest], *connect_go.ServerStream[org.ListAgentsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListAgents is not implemented"))
}

func (UnimplementedOrgHandler) ListPublicUsers(context.Context, *connect_go.Request[org.ListPublicUsersRequest], *connect_go.ServerStream[org.ListPublicUsersResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListPublicUsers is not implemented"))
}

func (UnimplementedOrgHandler) ListUsers(context.Context, *connect_go.Request[org.ListUsersRequest], *connect_go.ServerStream[org.ListUsersResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListUsers is not implemented"))
}

func (UnimplementedOrgHandler) ListUsersByOrgId(context.Context, *connect_go.Request[org.ListUsersByOrgIdRequest], *connect_go.ServerStream[org.ListUsersByOrgIdResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListUsersByOrgId is not implemented"))
}

func (UnimplementedOrgHandler) ListUsersByRegion(context.Context, *connect_go.Request[org.ListUsersByRegionRequest], *connect_go.ServerStream[org.ListUsersByRegionResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListUsersByRegion is not implemented"))
}

func (UnimplementedOrgHandler) UpdateMyUser(context.Context, *connect_go.Request[org.UpdateMyUserRequest]) (*connect_go.Response[org.UpdateMyUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateMyUser is not implemented"))
}

func (UnimplementedOrgHandler) UpdateUser(context.Context, *connect_go.Request[org.UpdateUserRequest]) (*connect_go.Response[org.UpdateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateUser is not implemented"))
}

func (UnimplementedOrgHandler) UpdateUserLabels(context.Context, *connect_go.Request[org.UpdateUserLabelsRequest]) (*connect_go.Response[org.UpdateUserLabelsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateUserLabels is not implemented"))
}

func (UnimplementedOrgHandler) UpdateUserCallerId(context.Context, *connect_go.Request[org.UpdateUserCallerIdRequest]) (*connect_go.Response[org.UpdateUserCallerIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateUserCallerId is not implemented"))
}

func (UnimplementedOrgHandler) UpdateUserDisabled(context.Context, *connect_go.Request[org.UpdateUserDisabledRequest]) (*connect_go.Response[org.UpdateUserDisabledResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateUserDisabled is not implemented"))
}

func (UnimplementedOrgHandler) UpdateUserDisabledByOrgId(context.Context, *connect_go.Request[org.UpdateUserDisabledByOrgIdRequest]) (*connect_go.Response[org.UpdateUserDisabledByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateUserDisabledByOrgId is not implemented"))
}

func (UnimplementedOrgHandler) GetMyUserPasswordResetLink(context.Context, *connect_go.Request[org.GetMyUserPasswordResetLinkRequest]) (*connect_go.Response[org.GetMyUserPasswordResetLinkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetMyUserPasswordResetLink is not implemented"))
}

func (UnimplementedOrgHandler) GetUserPasswordResetLink(context.Context, *connect_go.Request[org.GetUserPasswordResetLinkRequest]) (*connect_go.Response[org.GetUserPasswordResetLinkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetUserPasswordResetLink is not implemented"))
}

func (UnimplementedOrgHandler) GetUserPasswordResetLinkByOrgId(context.Context, *connect_go.Request[org.GetUserPasswordResetLinkByOrgIdRequest]) (*connect_go.Response[org.GetUserPasswordResetLinkByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetUserPasswordResetLinkByOrgId is not implemented"))
}

func (UnimplementedOrgHandler) CreatePasswordResetLink(context.Context, *connect_go.Request[org.CreatePasswordResetLinkRequest]) (*connect_go.Response[org.CreatePasswordResetLinkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreatePasswordResetLink is not implemented"))
}

func (UnimplementedOrgHandler) CreatePasswordResetLinkByOrgId(context.Context, *connect_go.Request[org.CreatePasswordResetLinkByOrgIdRequest]) (*connect_go.Response[org.CreatePasswordResetLinkByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreatePasswordResetLinkByOrgId is not implemented"))
}

func (UnimplementedOrgHandler) GetUserLoginInfo(context.Context, *connect_go.Request[org.GetUserLoginInfoRequest]) (*connect_go.Response[org.GetUserLoginInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetUserLoginInfo is not implemented"))
}

func (UnimplementedOrgHandler) GetUserEmailVerified(context.Context, *connect_go.Request[org.GetUserEmailVerifiedRequest]) (*connect_go.Response[org.GetUserEmailVerifiedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetUserEmailVerified is not implemented"))
}

func (UnimplementedOrgHandler) GetUserEmailVerifiedByOrgId(context.Context, *connect_go.Request[org.GetUserEmailVerifiedByOrgIdRequest]) (*connect_go.Response[org.GetUserEmailVerifiedByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetUserEmailVerifiedByOrgId is not implemented"))
}

func (UnimplementedOrgHandler) ResetMyPassword(context.Context, *connect_go.Request[org.ResetMyPasswordRequest]) (*connect_go.Response[org.ResetMyPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ResetMyPassword is not implemented"))
}

func (UnimplementedOrgHandler) ResetUserPassword(context.Context, *connect_go.Request[org.ResetUserPasswordRequest]) (*connect_go.Response[org.ResetUserPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ResetUserPassword is not implemented"))
}

func (UnimplementedOrgHandler) ResetUserPasswordByOrgId(context.Context, *connect_go.Request[org.ResetUserPasswordByOrgIdRequest]) (*connect_go.Response[org.ResetUserPasswordByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ResetUserPasswordByOrgId is not implemented"))
}

func (UnimplementedOrgHandler) SendUserEmailVerification(context.Context, *connect_go.Request[org.SendUserEmailVerificationRequest]) (*connect_go.Response[org.SendUserEmailVerificationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.SendUserEmailVerification is not implemented"))
}

func (UnimplementedOrgHandler) SendUserEmailVerificationByOrgId(context.Context, *connect_go.Request[org.SendUserEmailVerificationByOrgIdRequest]) (*connect_go.Response[org.SendUserEmailVerificationByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.SendUserEmailVerificationByOrgId is not implemented"))
}

func (UnimplementedOrgHandler) SendPasswordReset(context.Context, *connect_go.Request[org.SendPasswordResetRequest]) (*connect_go.Response[org.SendPasswordResetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.SendPasswordReset is not implemented"))
}

func (UnimplementedOrgHandler) SendPasswordResetByOrgId(context.Context, *connect_go.Request[org.SendPasswordResetByOrgIdRequest]) (*connect_go.Response[org.SendPasswordResetByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.SendPasswordResetByOrgId is not implemented"))
}

func (UnimplementedOrgHandler) GetUserSessionData(context.Context, *connect_go.Request[org.GetUserSessionDataRequest]) (*connect_go.Response[org.GetUserSessionDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetUserSessionData is not implemented"))
}

func (UnimplementedOrgHandler) GetAgentProfileGroup(context.Context, *connect_go.Request[org.GetAgentProfileGroupRequest]) (*connect_go.Response[org.GetAgentProfileGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetAgentProfileGroup is not implemented"))
}

func (UnimplementedOrgHandler) ListAgentProfileGroups(context.Context, *connect_go.Request[org.ListAgentProfileGroupsRequest]) (*connect_go.Response[org.ListAgentProfileGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListAgentProfileGroups is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAgentProfileGroup(context.Context, *connect_go.Request[org.UpdateAgentProfileGroupRequest]) (*connect_go.Response[org.UpdateAgentProfileGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateAgentProfileGroup is not implemented"))
}

func (UnimplementedOrgHandler) CreateAgentProfileGroup(context.Context, *connect_go.Request[org.CreateAgentProfileGroupRequest]) (*connect_go.Response[org.CreateAgentProfileGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateAgentProfileGroup is not implemented"))
}

func (UnimplementedOrgHandler) DeleteAgentProfileGroup(context.Context, *connect_go.Request[org.DeleteAgentProfileGroupRequest]) (*connect_go.Response[org.DeleteAgentProfileGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.DeleteAgentProfileGroup is not implemented"))
}

func (UnimplementedOrgHandler) AssignAgentProfileGroups(context.Context, *connect_go.Request[org.AssignAgentProfileGroupsRequest]) (*connect_go.Response[org.AssignAgentProfileGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.AssignAgentProfileGroups is not implemented"))
}

func (UnimplementedOrgHandler) AddUserSubscription(context.Context, *connect_go.Request[org.AddUserSubscriptionRequest]) (*connect_go.Response[org.AddUserSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.AddUserSubscription is not implemented"))
}

func (UnimplementedOrgHandler) AddUserSubscriptionByUserId(context.Context, *connect_go.Request[org.AddUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.AddUserSubscriptionByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.AddUserSubscriptionByUserId is not implemented"))
}

func (UnimplementedOrgHandler) GetUserSubscription(context.Context, *connect_go.Request[org.GetUserSubscriptionRequest]) (*connect_go.Response[org.GetUserSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetUserSubscription is not implemented"))
}

func (UnimplementedOrgHandler) GetUserSubscriptionByUserId(context.Context, *connect_go.Request[org.GetUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.GetUserSubscriptionByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetUserSubscriptionByUserId is not implemented"))
}

func (UnimplementedOrgHandler) UpdateUserSubscription(context.Context, *connect_go.Request[org.UpdateUserSubscriptionRequest]) (*connect_go.Response[org.UpdateUserSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateUserSubscription is not implemented"))
}

func (UnimplementedOrgHandler) UpdateUserSubscriptionByUserId(context.Context, *connect_go.Request[org.UpdateUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.UpdateUserSubscriptionByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateUserSubscriptionByUserId is not implemented"))
}

func (UnimplementedOrgHandler) RemoveUserSubscription(context.Context, *connect_go.Request[org.RemoveUserSubscriptionRequest]) (*connect_go.Response[org.RemoveUserSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.RemoveUserSubscription is not implemented"))
}

func (UnimplementedOrgHandler) RemoveUserSubscriptionByUserId(context.Context, *connect_go.Request[org.RemoveUserSubscriptionByUserIdRequest]) (*connect_go.Response[org.RemoveUserSubscriptionByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.RemoveUserSubscriptionByUserId is not implemented"))
}

func (UnimplementedOrgHandler) ListUserSubscriptions(context.Context, *connect_go.Request[org.ListUserSubscriptionsRequest]) (*connect_go.Response[org.ListUserSubscriptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListUserSubscriptions is not implemented"))
}

func (UnimplementedOrgHandler) ListUserSubscriptionsByUserId(context.Context, *connect_go.Request[org.ListUserSubscriptionsByUserIdRequest]) (*connect_go.Response[org.ListUserSubscriptionsByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListUserSubscriptionsByUserId is not implemented"))
}

func (UnimplementedOrgHandler) ListOrgSubscriptions(context.Context, *connect_go.Request[org.ListOrgSubscriptionsRequest]) (*connect_go.Response[org.ListOrgSubscriptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListOrgSubscriptions is not implemented"))
}

func (UnimplementedOrgHandler) CreateAuthToken(context.Context, *connect_go.Request[org.CreateAuthTokenRequest]) (*connect_go.Response[org.CreateAuthTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateAuthToken is not implemented"))
}

func (UnimplementedOrgHandler) CreateAuthTokenByUserId(context.Context, *connect_go.Request[org.CreateAuthTokenByUserIdRequest]) (*connect_go.Response[org.CreateAuthTokenByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateAuthTokenByUserId is not implemented"))
}

func (UnimplementedOrgHandler) ListAuthTokens(context.Context, *connect_go.Request[org.ListAuthTokensRequest]) (*connect_go.Response[org.ListAuthTokensResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListAuthTokens is not implemented"))
}

func (UnimplementedOrgHandler) ListAuthTokensByUserId(context.Context, *connect_go.Request[org.ListAuthTokensByUserIdRequest]) (*connect_go.Response[org.ListAuthTokensByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListAuthTokensByUserId is not implemented"))
}

func (UnimplementedOrgHandler) SetAuthTokenExpiration(context.Context, *connect_go.Request[org.SetAuthTokenExpirationRequest]) (*connect_go.Response[org.SetAuthTokenExpirationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.SetAuthTokenExpiration is not implemented"))
}

func (UnimplementedOrgHandler) SetAuthTokenExpirationByUserId(context.Context, *connect_go.Request[org.SetAuthTokenExpirationByUserIdRequest]) (*connect_go.Response[org.SetAuthTokenExpirationByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.SetAuthTokenExpirationByUserId is not implemented"))
}

func (UnimplementedOrgHandler) DeleteAuthToken(context.Context, *connect_go.Request[org.DeleteAuthTokenRequest]) (*connect_go.Response[org.DeleteAuthTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.DeleteAuthToken is not implemented"))
}

func (UnimplementedOrgHandler) DeleteAuthTokenByUserId(context.Context, *connect_go.Request[org.DeleteAuthTokenByUserIdRequest]) (*connect_go.Response[org.DeleteAuthTokenByUserIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.DeleteAuthTokenByUserId is not implemented"))
}

func (UnimplementedOrgHandler) GetHuntGroupSettings(context.Context, *connect_go.Request[org.GetHuntGroupSettingsRequest]) (*connect_go.Response[org.GetHuntGroupSettingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetHuntGroupSettings is not implemented"))
}

func (UnimplementedOrgHandler) UpdateHuntGroupSettings(context.Context, *connect_go.Request[org.UpdateHuntGroupSettingsRequest]) (*connect_go.Response[org.UpdateHuntGroupSettingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateHuntGroupSettings is not implemented"))
}

func (UnimplementedOrgHandler) CreateHuntGroup(context.Context, *connect_go.Request[org.CreateHuntGroupRequest]) (*connect_go.Response[org.CreateHuntGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateHuntGroup is not implemented"))
}

func (UnimplementedOrgHandler) UpdateHuntGroupGeneralDetails(context.Context, *connect_go.Request[org.UpdateHuntGroupGeneralDetailsRequest]) (*connect_go.Response[org.UpdateHuntGroupGeneralDetailsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateHuntGroupGeneralDetails is not implemented"))
}

func (UnimplementedOrgHandler) DeleteHuntGroup(context.Context, *connect_go.Request[org.DeleteHuntGroupRequest]) (*connect_go.Response[org.DeleteHuntGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.DeleteHuntGroup is not implemented"))
}

func (UnimplementedOrgHandler) GetHuntGroupDetails(context.Context, *connect_go.Request[org.GetHuntGroupDetailsRequest]) (*connect_go.Response[org.GetHuntGroupDetailsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetHuntGroupDetails is not implemented"))
}

func (UnimplementedOrgHandler) ListCallerIdBuckets(context.Context, *connect_go.Request[org.ListCallerIdBucketsRequest]) (*connect_go.Response[org.ListCallerIdBucketsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListCallerIdBuckets is not implemented"))
}

func (UnimplementedOrgHandler) GetDataDipTemplate(context.Context, *connect_go.Request[org.GetDataDipTemplateRequest]) (*connect_go.Response[org.GetDataDipTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetDataDipTemplate is not implemented"))
}

func (UnimplementedOrgHandler) ListDataDipTemplates(context.Context, *connect_go.Request[org.ListDataDipTemplatesRequest]) (*connect_go.Response[org.ListDataDipTemplatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListDataDipTemplates is not implemented"))
}

func (UnimplementedOrgHandler) CreateDataDipTemplate(context.Context, *connect_go.Request[org.CreateDataDipTemplateRequest]) (*connect_go.Response[org.CreateDataDipTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateDataDipTemplate is not implemented"))
}

func (UnimplementedOrgHandler) UpdateDataDipTemplate(context.Context, *connect_go.Request[org.UpdateDataDipTemplateRequest]) (*connect_go.Response[org.UpdateDataDipTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateDataDipTemplate is not implemented"))
}

func (UnimplementedOrgHandler) DeleteDataDipTemplate(context.Context, *connect_go.Request[org.DeleteDataDipTemplateRequest]) (*connect_go.Response[org.DeleteDataDipTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.DeleteDataDipTemplate is not implemented"))
}

func (UnimplementedOrgHandler) CopyDataDipTemplate(context.Context, *connect_go.Request[org.CopyDataDipTemplateRequest]) (*connect_go.Response[org.CopyDataDipTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CopyDataDipTemplate is not implemented"))
}

func (UnimplementedOrgHandler) CopyDataDipTemplateToOrganization(context.Context, *connect_go.Request[org.CopyDataDipTemplateToOrganizationRequest]) (*connect_go.Response[org.CopyDataDipTemplateToOrganizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CopyDataDipTemplateToOrganization is not implemented"))
}

func (UnimplementedOrgHandler) ListBroadcastTemplateGeneralDetails(context.Context, *connect_go.Request[org.ListBroadcastTemplateGeneralDetailsRequest]) (*connect_go.Response[org.ListBroadcastTemplateGeneralDetailsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListBroadcastTemplateGeneralDetails is not implemented"))
}

func (UnimplementedOrgHandler) ListAgentResponseAutoRules(context.Context, *connect_go.Request[org.ListAgentResponseAutoRulesRequest]) (*connect_go.Response[org.ListAgentResponseAutoRulesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListAgentResponseAutoRules is not implemented"))
}

func (UnimplementedOrgHandler) CreateAgentResponseAutoRules(context.Context, *connect_go.Request[org.CreateAgentResponseAutoRulesRequest]) (*connect_go.Response[org.CreateAgentResponseAutoRulesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateAgentResponseAutoRules is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAgentResponseAutoRules(context.Context, *connect_go.Request[org.UpdateAgentResponseAutoRulesRequest]) (*connect_go.Response[org.UpdateAgentResponseAutoRulesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateAgentResponseAutoRules is not implemented"))
}

func (UnimplementedOrgHandler) DeleteAgentResponseAutoRules(context.Context, *connect_go.Request[org.DeleteAgentResponseAutoRulesRequest]) (*connect_go.Response[org.DeleteAgentResponseAutoRulesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.DeleteAgentResponseAutoRules is not implemented"))
}

func (UnimplementedOrgHandler) ListHuntGroupWebLinks(context.Context, *connect_go.Request[org.ListHuntGroupWebLinksRequest]) (*connect_go.Response[org.ListHuntGroupWebLinksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListHuntGroupWebLinks is not implemented"))
}

func (UnimplementedOrgHandler) CopyHuntGroupWebLink(context.Context, *connect_go.Request[org.CopyHuntGroupWebLinkRequest]) (*connect_go.Response[org.CopyHuntGroupWebLinkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CopyHuntGroupWebLink is not implemented"))
}

func (UnimplementedOrgHandler) UpdateHuntGroupWebLinks(context.Context, *connect_go.Request[org.UpdateHuntGroupWebLinksRequest]) (*connect_go.Response[org.UpdateHuntGroupWebLinksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateHuntGroupWebLinks is not implemented"))
}

func (UnimplementedOrgHandler) ListHuntGroupIntegrationLinks(context.Context, *connect_go.Request[org.ListHuntGroupIntegrationLinksRequest]) (*connect_go.Response[org.ListHuntGroupIntegrationLinksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListHuntGroupIntegrationLinks is not implemented"))
}

func (UnimplementedOrgHandler) CopyHuntGroupIntegrationLink(context.Context, *connect_go.Request[org.CopyHuntGroupIntegrationLinkRequest]) (*connect_go.Response[org.CopyHuntGroupIntegrationLinkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CopyHuntGroupIntegrationLink is not implemented"))
}

func (UnimplementedOrgHandler) UpdateHuntGroupIntegrationLinks(context.Context, *connect_go.Request[org.UpdateHuntGroupIntegrationLinksRequest]) (*connect_go.Response[org.UpdateHuntGroupIntegrationLinksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateHuntGroupIntegrationLinks is not implemented"))
}

func (UnimplementedOrgHandler) GetHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.GetHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.GetHuntGroupClientInfoDisplayTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetHuntGroupClientInfoDisplayTemplate is not implemented"))
}

func (UnimplementedOrgHandler) CreateHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.CreateHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.CreateHuntGroupClientInfoDisplayTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateHuntGroupClientInfoDisplayTemplate is not implemented"))
}

func (UnimplementedOrgHandler) UpdateHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.UpdateHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.UpdateHuntGroupClientInfoDisplayTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateHuntGroupClientInfoDisplayTemplate is not implemented"))
}

func (UnimplementedOrgHandler) DeleteHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.DeleteHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.DeleteHuntGroupClientInfoDisplayTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.DeleteHuntGroupClientInfoDisplayTemplate is not implemented"))
}

func (UnimplementedOrgHandler) CopyHuntGroupClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.CopyHuntGroupClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.CopyHuntGroupClientInfoDisplayTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CopyHuntGroupClientInfoDisplayTemplate is not implemented"))
}

func (UnimplementedOrgHandler) CreateCampaignClientInfoDisplayTemplate(context.Context, *connect_go.Request[org.CreateCampaignClientInfoDisplayTemplateRequest]) (*connect_go.Response[org.CreateCampaignClientInfoDisplayTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateCampaignClientInfoDisplayTemplate is not implemented"))
}

func (UnimplementedOrgHandler) ListHuntGroupsWithClientInfoTemplateData(context.Context, *connect_go.Request[org.ListHuntGroupsWithClientInfoTemplateDataRequest]) (*connect_go.Response[org.ListHuntGroupsWithClientInfoTemplateDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListHuntGroupsWithClientInfoTemplateData is not implemented"))
}

func (UnimplementedOrgHandler) ListAgentTriggers(context.Context, *connect_go.Request[org.ListAgentTriggersRequest]) (*connect_go.Response[org.ListAgentTriggersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListAgentTriggers is not implemented"))
}

func (UnimplementedOrgHandler) CopyAgentTrigger(context.Context, *connect_go.Request[org.CopyAgentTriggerRequest]) (*connect_go.Response[org.CopyAgentTriggerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CopyAgentTrigger is not implemented"))
}

func (UnimplementedOrgHandler) UpdateAgentTriggers(context.Context, *connect_go.Request[org.UpdateAgentTriggersRequest]) (*connect_go.Response[org.UpdateAgentTriggersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateAgentTriggers is not implemented"))
}

func (UnimplementedOrgHandler) ListHuntGroupScripts(context.Context, *connect_go.Request[org.ListHuntGroupScriptsRequest]) (*connect_go.Response[org.ListHuntGroupScriptsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListHuntGroupScripts is not implemented"))
}

func (UnimplementedOrgHandler) GetHuntGroupScript(context.Context, *connect_go.Request[org.GetHuntGroupScriptRequest]) (*connect_go.Response[org.GetHuntGroupScriptResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetHuntGroupScript is not implemented"))
}

func (UnimplementedOrgHandler) CreateHuntGroupScript(context.Context, *connect_go.Request[org.CreateHuntGroupScriptRequest]) (*connect_go.Response[org.CreateHuntGroupScriptResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateHuntGroupScript is not implemented"))
}

func (UnimplementedOrgHandler) UpdateHuntGroupScript(context.Context, *connect_go.Request[org.UpdateHuntGroupScriptRequest]) (*connect_go.Response[org.UpdateHuntGroupScriptResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateHuntGroupScript is not implemented"))
}

func (UnimplementedOrgHandler) DeleteHuntGroupScript(context.Context, *connect_go.Request[org.DeleteHuntGroupScriptRequest]) (*connect_go.Response[org.DeleteHuntGroupScriptResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.DeleteHuntGroupScript is not implemented"))
}

func (UnimplementedOrgHandler) AssignScriptToHuntGroups(context.Context, *connect_go.Request[org.AssignScriptToHuntGroupsRequest]) (*connect_go.Response[org.AssignScriptToHuntGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.AssignScriptToHuntGroups is not implemented"))
}

func (UnimplementedOrgHandler) UnassignScriptFromHuntGroups(context.Context, *connect_go.Request[org.UnassignScriptFromHuntGroupsRequest]) (*connect_go.Response[org.UnassignScriptFromHuntGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UnassignScriptFromHuntGroups is not implemented"))
}

func (UnimplementedOrgHandler) CreateTrust(context.Context, *connect_go.Request[org.CreateTrustRequest]) (*connect_go.Response[org.CreateTrustResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateTrust is not implemented"))
}

func (UnimplementedOrgHandler) AcceptTrust(context.Context, *connect_go.Request[org.AcceptTrustRequest]) (*connect_go.Response[org.AcceptTrustResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.AcceptTrust is not implemented"))
}

func (UnimplementedOrgHandler) RejectTrust(context.Context, *connect_go.Request[org.RejectTrustRequest]) (*connect_go.Response[org.RejectTrustResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.RejectTrust is not implemented"))
}

func (UnimplementedOrgHandler) GetTrust(context.Context, *connect_go.Request[org.GetTrustRequest]) (*connect_go.Response[org.GetTrustResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetTrust is not implemented"))
}

func (UnimplementedOrgHandler) ListIncomingTrusts(context.Context, *connect_go.Request[org.ListIncomingTrustsRequest]) (*connect_go.Response[org.ListIncomingTrustsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListIncomingTrusts is not implemented"))
}

func (UnimplementedOrgHandler) ListGivenTrusts(context.Context, *connect_go.Request[org.ListGivenTrustsRequest]) (*connect_go.Response[org.ListGivenTrustsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListGivenTrusts is not implemented"))
}

func (UnimplementedOrgHandler) ListAssignableTrusts(context.Context, *connect_go.Request[org.ListAssignableTrustsRequest]) (*connect_go.Response[org.ListAssignableTrustsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListAssignableTrusts is not implemented"))
}

func (UnimplementedOrgHandler) DeleteTrust(context.Context, *connect_go.Request[org.DeleteTrustRequest]) (*connect_go.Response[org.DeleteTrustResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.DeleteTrust is not implemented"))
}

func (UnimplementedOrgHandler) AssignTrust(context.Context, *connect_go.Request[org.AssignTrustRequest]) (*connect_go.Response[org.AssignTrustResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.AssignTrust is not implemented"))
}

func (UnimplementedOrgHandler) UnassignTrust(context.Context, *connect_go.Request[org.UnassignTrustRequest]) (*connect_go.Response[org.UnassignTrustResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UnassignTrust is not implemented"))
}

func (UnimplementedOrgHandler) CreateLabel(context.Context, *connect_go.Request[org.CreateLabelRequest]) (*connect_go.Response[org.CreateLabelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateLabel is not implemented"))
}

func (UnimplementedOrgHandler) DeleteLabel(context.Context, *connect_go.Request[org.DeleteLabelRequest]) (*connect_go.Response[org.DeleteLabelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.DeleteLabel is not implemented"))
}

func (UnimplementedOrgHandler) ListLabels(context.Context, *connect_go.Request[org.ListLabelsRequest]) (*connect_go.Response[org.ListLabelsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListLabels is not implemented"))
}

func (UnimplementedOrgHandler) GetLabel(context.Context, *connect_go.Request[org.GetLabelRequest]) (*connect_go.Response[org.GetLabelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetLabel is not implemented"))
}

func (UnimplementedOrgHandler) UpdateLabel(context.Context, *connect_go.Request[org.UpdateLabelRequest]) (*connect_go.Response[org.UpdateLabelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateLabel is not implemented"))
}

func (UnimplementedOrgHandler) AssignLabel(context.Context, *connect_go.Request[org.AssignLabelRequest]) (*connect_go.Response[org.AssignLabelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.AssignLabel is not implemented"))
}

func (UnimplementedOrgHandler) UnassignLabel(context.Context, *connect_go.Request[org.UnassignLabelRequest]) (*connect_go.Response[org.UnassignLabelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UnassignLabel is not implemented"))
}

func (UnimplementedOrgHandler) GetAssignmentCounts(context.Context, *connect_go.Request[org.GetAssignmentCountsRequest]) (*connect_go.Response[org.GetAssignmentCountsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetAssignmentCounts is not implemented"))
}

func (UnimplementedOrgHandler) GetAssignableLabels(context.Context, *connect_go.Request[org.GetAssignableLabelsRequest]) (*connect_go.Response[org.GetAssignableLabelsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetAssignableLabels is not implemented"))
}

func (UnimplementedOrgHandler) GetPermissions(context.Context, *connect_go.Request[org.GetPermissionsRequest]) (*connect_go.Response[org.GetPermissionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetPermissions is not implemented"))
}

func (UnimplementedOrgHandler) GetUserPermissions(context.Context, *connect_go.Request[org.GetUserPermissionsRequest]) (*connect_go.Response[org.GetUserPermissionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetUserPermissions is not implemented"))
}

func (UnimplementedOrgHandler) CreatePermissionGroup(context.Context, *connect_go.Request[org.CreatePermissionGroupRequest]) (*connect_go.Response[org.CreatePermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreatePermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) UpdatePermissionGroup(context.Context, *connect_go.Request[org.UpdatePermissionGroupRequest]) (*connect_go.Response[org.UpdatePermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdatePermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) DeletePermissionGroup(context.Context, *connect_go.Request[org.DeletePermissionGroupRequest]) (*connect_go.Response[org.DeletePermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.DeletePermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) ListPermissionGroups(context.Context, *connect_go.Request[org.ListPermissionGroupsRequest]) (*connect_go.Response[org.ListPermissionGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListPermissionGroups is not implemented"))
}

func (UnimplementedOrgHandler) ListPermissionGroupsByOrgId(context.Context, *connect_go.Request[org.ListPermissionGroupsByOrgIdRequest]) (*connect_go.Response[org.ListPermissionGroupsByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListPermissionGroupsByOrgId is not implemented"))
}

func (UnimplementedOrgHandler) AssignUsersPermissionGroup(context.Context, *connect_go.Request[org.AssignUsersPermissionGroupRequest]) (*connect_go.Response[org.AssignUsersPermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.AssignUsersPermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) RevokeUsersPermissionGroup(context.Context, *connect_go.Request[org.RevokeUsersPermissionGroupRequest]) (*connect_go.Response[org.RevokeUsersPermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.RevokeUsersPermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) AssignLabels(context.Context, *connect_go.Request[org.AssignLabelsRequest]) (*connect_go.Response[org.AssignLabelsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.AssignLabels is not implemented"))
}

func (UnimplementedOrgHandler) RevokeLabels(context.Context, *connect_go.Request[org.RevokeLabelsRequest]) (*connect_go.Response[org.RevokeLabelsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.RevokeLabels is not implemented"))
}

func (UnimplementedOrgHandler) AssignAccountOwnerPermissionToUser(context.Context, *connect_go.Request[org.AssignAccountOwnerPermissionToUserRequest]) (*connect_go.Response[org.AssignAccountOwnerPermissionToUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.AssignAccountOwnerPermissionToUser is not implemented"))
}

func (UnimplementedOrgHandler) RevokeAccountOwnerPermissionFromUser(context.Context, *connect_go.Request[org.RevokeAccountOwnerPermissionFromUserRequest]) (*connect_go.Response[org.RevokeAccountOwnerPermissionFromUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.RevokeAccountOwnerPermissionFromUser is not implemented"))
}

func (UnimplementedOrgHandler) InitDefaultPermissionGroups(context.Context, *connect_go.Request[org.InitDefaultPermissionGroupsRequest]) (*connect_go.Response[org.InitDefaultPermissionGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.InitDefaultPermissionGroups is not implemented"))
}

func (UnimplementedOrgHandler) GetAccountOwnerGroup(context.Context, *connect_go.Request[org.GetAccountOwnerGroupRequest]) (*connect_go.Response[org.GetAccountOwnerGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetAccountOwnerGroup is not implemented"))
}

func (UnimplementedOrgHandler) GetLicenses(context.Context, *connect_go.Request[org.GetLicensesRequest]) (*connect_go.Response[org.GetLicensesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetLicenses is not implemented"))
}

func (UnimplementedOrgHandler) GetOrgLicenses(context.Context, *connect_go.Request[org.GetOrgLicensesRequest]) (*connect_go.Response[org.GetOrgLicensesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetOrgLicenses is not implemented"))
}

func (UnimplementedOrgHandler) UpdateLicenses(context.Context, *connect_go.Request[org.UpdateLicensesRequest]) (*connect_go.Response[org.UpdateLicensesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateLicenses is not implemented"))
}

func (UnimplementedOrgHandler) RemovePermissionFromAllPermissionGroups(context.Context, *connect_go.Request[org.RemovePermissionFromAllPermissionGroupsRequest]) (*connect_go.Response[org.RemovePermissionFromAllPermissionGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.RemovePermissionFromAllPermissionGroups is not implemented"))
}

func (UnimplementedOrgHandler) ListP3PermissionGroups(context.Context, *connect_go.Request[org.ListP3PermissionGroupsRequest]) (*connect_go.Response[org.ListP3PermissionGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListP3PermissionGroups is not implemented"))
}

func (UnimplementedOrgHandler) ListP3PermissionGroupsByOrgId(context.Context, *connect_go.Request[org.ListP3PermissionGroupsRequest]) (*connect_go.Response[org.ListP3PermissionGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListP3PermissionGroupsByOrgId is not implemented"))
}

func (UnimplementedOrgHandler) CreateP3PermissionGroup(context.Context, *connect_go.Request[org.CreateP3PermissionGroupRequest]) (*connect_go.Response[org.CreateP3PermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateP3PermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) UpdateP3PermissionGroup(context.Context, *connect_go.Request[org.UpdateP3PermissionGroupRequest]) (*connect_go.Response[org.UpdateP3PermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateP3PermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) UpdateP3PermissionGroupByOrgId(context.Context, *connect_go.Request[org.UpdateP3PermissionGroupByOrgIdRequest]) (*connect_go.Response[org.UpdateP3PermissionGroupByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateP3PermissionGroupByOrgId is not implemented"))
}

func (UnimplementedOrgHandler) DeleteP3PermissionGroup(context.Context, *connect_go.Request[org.DeleteP3PermissionGroupRequest]) (*connect_go.Response[org.DeleteP3PermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.DeleteP3PermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) AssignUsersP3PermissionGroup(context.Context, *connect_go.Request[org.AssignUsersP3PermissionGroupRequest]) (*connect_go.Response[org.AssignUsersP3PermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.AssignUsersP3PermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) RevokeUsersP3PermissionGroup(context.Context, *connect_go.Request[org.RevokeUsersP3PermissionGroupRequest]) (*connect_go.Response[org.RevokeUsersP3PermissionGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.RevokeUsersP3PermissionGroup is not implemented"))
}

func (UnimplementedOrgHandler) RefreshMfaLockout(context.Context, *connect_go.Request[org.RefreshMfaLockoutRequest]) (*connect_go.Response[org.RefreshMfaLockoutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.RefreshMfaLockout is not implemented"))
}

func (UnimplementedOrgHandler) RefreshMfaLockoutByOrgId(context.Context, *connect_go.Request[org.RefreshMfaLockoutByOrgIdRequest]) (*connect_go.Response[org.RefreshMfaLockoutByOrgIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.RefreshMfaLockoutByOrgId is not implemented"))
}

func (UnimplementedOrgHandler) SetMfaType(context.Context, *connect_go.Request[org.SetMfaTypeRequest]) (*connect_go.Response[org.SetMfaTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.SetMfaType is not implemented"))
}

func (UnimplementedOrgHandler) SetMyMfaType(context.Context, *connect_go.Request[org.SetMyMfaTypeRequest]) (*connect_go.Response[org.SetMyMfaTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.SetMyMfaType is not implemented"))
}

func (UnimplementedOrgHandler) EnableUserMfa(context.Context, *connect_go.Request[org.EnableUserMfaRequest]) (*connect_go.Response[org.EnableUserMfaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.EnableUserMfa is not implemented"))
}

func (UnimplementedOrgHandler) EnableMyUserMfa(context.Context, *connect_go.Request[org.EnableMyUserMfaRequest]) (*connect_go.Response[org.EnableMyUserMfaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.EnableMyUserMfa is not implemented"))
}

func (UnimplementedOrgHandler) GetUserMfaInfo(context.Context, *connect_go.Request[org.GetUserMfaInfoRequest]) (*connect_go.Response[org.GetUserMfaInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetUserMfaInfo is not implemented"))
}

func (UnimplementedOrgHandler) GetMyUserMfaInfo(context.Context, *connect_go.Request[org.GetMyUserMfaInfoRequest]) (*connect_go.Response[org.GetMyUserMfaInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetMyUserMfaInfo is not implemented"))
}

func (UnimplementedOrgHandler) GetMyAllowedMfaMethods(context.Context, *connect_go.Request[org.GetMyAllowedMfaMethodsRequest]) (*connect_go.Response[org.GetMyAllowedMfaMethodsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.GetMyAllowedMfaMethods is not implemented"))
}

func (UnimplementedOrgHandler) CreateBusinessHours(context.Context, *connect_go.Request[org.CreateBusinessHoursRequest]) (*connect_go.Response[org.CreateBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.CreateBusinessHours is not implemented"))
}

func (UnimplementedOrgHandler) UpdateBusinessHours(context.Context, *connect_go.Request[org.UpdateBusinessHoursRequest]) (*connect_go.Response[org.UpdateBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.UpdateBusinessHours is not implemented"))
}

func (UnimplementedOrgHandler) AddGroupedUserIPRestrictions(context.Context, *connect_go.Request[org.AddGroupedUserIPRestrictionsRequest]) (*connect_go.Response[org.AddGroupedUserIPRestrictionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.AddGroupedUserIPRestrictions is not implemented"))
}

func (UnimplementedOrgHandler) RemoveGroupedUserIPRestrictions(context.Context, *connect_go.Request[org.RemoveGroupedUserIPRestrictionsRequest]) (*connect_go.Response[org.RemoveGroupedUserIPRestrictionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.RemoveGroupedUserIPRestrictions is not implemented"))
}

func (UnimplementedOrgHandler) ListUsersAllowedIps(context.Context, *connect_go.Request[org.ListUsersAllowedIpsRequest]) (*connect_go.Response[org.ListUsersAllowedIpsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.Org.ListUsersAllowedIps is not implemented"))
}
