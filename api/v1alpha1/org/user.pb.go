// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: api/v1alpha1/org/user.proto

package org

import (
	commons "github.com/tcncloud/api-go/api/commons"
	org "github.com/tcncloud/api-go/api/commons/org"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for the CreateUser rpc.
type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if org_id is set the user will be created for
	// the given org_id. This requires the CUSTOMER_SUPPORT permission.
	// if this field is not set it will get the org_id
	// from the token. This only requires the USER_CREATE permission.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The first name for the new user.
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The last name for the new user.
	LastName string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The email for the new user.
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	// The user name of the new user.
	UserName string `protobuf:"bytes,5,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// The password of the new user.
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// The ids of the permission groups that the new user will have.
	PermissionGroupIds []string `protobuf:"bytes,7,rep,name=permission_group_ids,json=permissionGroupIds,proto3" json:"permission_group_ids,omitempty"`
	// The partner agent id of the new user.
	PartnerAgentId string `protobuf:"bytes,9,opt,name=partner_agent_id,json=partnerAgentId,proto3" json:"partner_agent_id,omitempty"`
	// The id of the p3 permission group that the new user will have.
	P3PermissionGroupId string `protobuf:"bytes,10,opt,name=p3_permission_group_id,json=p3PermissionGroupId,proto3" json:"p3_permission_group_id,omitempty"`
	// The linkback numbers the new user will have.
	LinkbackNumbers []string `protobuf:"bytes,11,rep,name=linkback_numbers,json=linkbackNumbers,proto3" json:"linkback_numbers,omitempty"`
	// The caller ids the new user will have.
	CallerIds []string `protobuf:"bytes,12,rep,name=caller_ids,json=callerIds,proto3" json:"caller_ids,omitempty"`
	// Default app the user starts on
	DefaultApp commons.OperatorApplications `protobuf:"varint,13,opt,name=default_app,json=defaultApp,proto3,enum=api.commons.OperatorApplications" json:"default_app,omitempty"`
	// The caller id for the user.
	UserCallerId string `protobuf:"bytes,14,opt,name=user_caller_id,json=userCallerId,proto3" json:"user_caller_id,omitempty"`
	// The id of the agent profile group the user will belong to.
	AgentProfileGroupId string `protobuf:"bytes,15,opt,name=agent_profile_group_id,json=agentProfileGroupId,proto3" json:"agent_profile_group_id,omitempty"`
	// A list of labels to assign to the user
	LabelIds []string `protobuf:"bytes,16,rep,name=label_ids,json=labelIds,proto3" json:"label_ids,omitempty"`
	// User TimeZone with wrapper for nullable timezone
	TimeZoneOverride *commons.TimeZoneWrapper `protobuf:"bytes,17,opt,name=time_zone_override,json=timeZoneOverride,proto3" json:"time_zone_override,omitempty"`
	// The hunt group that the created user will belong to.
	HuntGroupSid int64 `protobuf:"varint,18,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{0}
}

func (x *CreateUserRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *CreateUserRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CreateUserRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CreateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateUserRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CreateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateUserRequest) GetPermissionGroupIds() []string {
	if x != nil {
		return x.PermissionGroupIds
	}
	return nil
}

func (x *CreateUserRequest) GetPartnerAgentId() string {
	if x != nil {
		return x.PartnerAgentId
	}
	return ""
}

func (x *CreateUserRequest) GetP3PermissionGroupId() string {
	if x != nil {
		return x.P3PermissionGroupId
	}
	return ""
}

func (x *CreateUserRequest) GetLinkbackNumbers() []string {
	if x != nil {
		return x.LinkbackNumbers
	}
	return nil
}

func (x *CreateUserRequest) GetCallerIds() []string {
	if x != nil {
		return x.CallerIds
	}
	return nil
}

func (x *CreateUserRequest) GetDefaultApp() commons.OperatorApplications {
	if x != nil {
		return x.DefaultApp
	}
	return commons.OperatorApplications(0)
}

func (x *CreateUserRequest) GetUserCallerId() string {
	if x != nil {
		return x.UserCallerId
	}
	return ""
}

func (x *CreateUserRequest) GetAgentProfileGroupId() string {
	if x != nil {
		return x.AgentProfileGroupId
	}
	return ""
}

func (x *CreateUserRequest) GetLabelIds() []string {
	if x != nil {
		return x.LabelIds
	}
	return nil
}

func (x *CreateUserRequest) GetTimeZoneOverride() *commons.TimeZoneWrapper {
	if x != nil {
		return x.TimeZoneOverride
	}
	return nil
}

func (x *CreateUserRequest) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

// Response message for the CreateUser rpc.
type CreateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the created user.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CreateUserResponse) Reset() {
	*x = CreateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserResponse) ProtoMessage() {}

func (x *CreateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{1}
}

func (x *CreateUserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Request message for the CreateDelegatedUser rpc.
type CreateDelegatedUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the user id provided by the auth (idp) connection.
	AuthUserId string `protobuf:"bytes,1,opt,name=auth_user_id,json=authUserId,proto3" json:"auth_user_id,omitempty"`
	// org_id for which the user will be created for.
	// generally when org_id is passed, it requires
	// customer support permission, but this is an
	// un-authenticated request so it is an exception
	// which is handled by envoy.
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// the user's email provided by the auth connection.
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// the username provided by the auth connection.
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// the user's first name.
	FirstName string `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// the user's last name.
	LastName string `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// the user's groups provided by the auth connection.
	Groups []string `protobuf:"bytes,7,rep,name=groups,proto3" json:"groups,omitempty"`
	// the id of the auth connection the user is coming from.
	ConnectionId string `protobuf:"bytes,8,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *CreateDelegatedUserRequest) Reset() {
	*x = CreateDelegatedUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDelegatedUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDelegatedUserRequest) ProtoMessage() {}

func (x *CreateDelegatedUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDelegatedUserRequest.ProtoReflect.Descriptor instead.
func (*CreateDelegatedUserRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDelegatedUserRequest) GetAuthUserId() string {
	if x != nil {
		return x.AuthUserId
	}
	return ""
}

func (x *CreateDelegatedUserRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *CreateDelegatedUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateDelegatedUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateDelegatedUserRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CreateDelegatedUserRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CreateDelegatedUserRequest) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *CreateDelegatedUserRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

// Response message for the CreateDelegatedUser rpc.
type CreateDelegatedUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the created user.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CreateDelegatedUserResponse) Reset() {
	*x = CreateDelegatedUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDelegatedUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDelegatedUserResponse) ProtoMessage() {}

func (x *CreateDelegatedUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDelegatedUserResponse.ProtoReflect.Descriptor instead.
func (*CreateDelegatedUserResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDelegatedUserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Request message for GetMyUser.
type GetMyUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMyUserRequest) Reset() {
	*x = GetMyUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyUserRequest) ProtoMessage() {}

func (x *GetMyUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyUserRequest.ProtoReflect.Descriptor instead.
func (*GetMyUserRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{4}
}

// Response message for GetMyUser.
type GetMyUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID of the user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The ID of the user's organization
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The agents's username
	Username string `protobuf:"bytes,13,opt,name=username,proto3" json:"username,omitempty"`
	// Whether the user is delegated (sso related)
	Delegated bool `protobuf:"varint,3,opt,name=delegated,proto3" json:"delegated,omitempty"`
	// The name of the user's organization
	OrgName string `protobuf:"bytes,4,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	// An object with the hunt group fields required for the call
	HuntGroup *GetMyUserResponse_HuntGroup `protobuf:"bytes,5,opt,name=hunt_group,json=huntGroup,proto3" json:"hunt_group,omitempty"`
	// A list of the labels associated with the user
	Labels []*org.Label `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	// A list of the skills associated with the user
	Skills []*org.Skill `protobuf:"bytes,7,rep,name=skills,proto3" json:"skills,omitempty"`
	// A list of the permission groups the user belongs to
	PermissionGroups []*org.PermissionGroup `protobuf:"bytes,8,rep,name=permission_groups,json=permissionGroups,proto3" json:"permission_groups,omitempty"`
	// The user's p3 permission group
	P3PermissionGroup *org.P3PermissionGroup `protobuf:"bytes,9,opt,name=p3_permission_group,json=p3PermissionGroup,proto3" json:"p3_permission_group,omitempty"`
	// An object with the agent profile group fields required for the call
	AgentProfileGroup *GetMyUserResponse_AgentProfileGroup `protobuf:"bytes,10,opt,name=agent_profile_group,json=agentProfileGroup,proto3" json:"agent_profile_group,omitempty"`
	// A list of the trusts assigned to the user.
	Trusts []*org.Trust `protobuf:"bytes,11,rep,name=trusts,proto3" json:"trusts,omitempty"`
	// Whether the user is an account owner
	AccountOwner bool `protobuf:"varint,12,opt,name=account_owner,json=accountOwner,proto3" json:"account_owner,omitempty"`
}

func (x *GetMyUserResponse) Reset() {
	*x = GetMyUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyUserResponse) ProtoMessage() {}

func (x *GetMyUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyUserResponse.ProtoReflect.Descriptor instead.
func (*GetMyUserResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{5}
}

func (x *GetMyUserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetMyUserResponse) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetMyUserResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetMyUserResponse) GetDelegated() bool {
	if x != nil {
		return x.Delegated
	}
	return false
}

func (x *GetMyUserResponse) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *GetMyUserResponse) GetHuntGroup() *GetMyUserResponse_HuntGroup {
	if x != nil {
		return x.HuntGroup
	}
	return nil
}

func (x *GetMyUserResponse) GetLabels() []*org.Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetMyUserResponse) GetSkills() []*org.Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *GetMyUserResponse) GetPermissionGroups() []*org.PermissionGroup {
	if x != nil {
		return x.PermissionGroups
	}
	return nil
}

func (x *GetMyUserResponse) GetP3PermissionGroup() *org.P3PermissionGroup {
	if x != nil {
		return x.P3PermissionGroup
	}
	return nil
}

func (x *GetMyUserResponse) GetAgentProfileGroup() *GetMyUserResponse_AgentProfileGroup {
	if x != nil {
		return x.AgentProfileGroup
	}
	return nil
}

func (x *GetMyUserResponse) GetTrusts() []*org.Trust {
	if x != nil {
		return x.Trusts
	}
	return nil
}

func (x *GetMyUserResponse) GetAccountOwner() bool {
	if x != nil {
		return x.AccountOwner
	}
	return false
}

// Request message for GetUser.
type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Get by UserId.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Response message for GetUser.
type GetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID of the user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The ID of the user's organization
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Whether the user is delegated (sso related)
	Delegated bool `protobuf:"varint,3,opt,name=delegated,proto3" json:"delegated,omitempty"` // The name of the user's organization
	// User TimeZone with wrapper for nullable timezone.
	TimeZoneOverride *commons.TimeZoneWrapper `protobuf:"bytes,4,opt,name=time_zone_override,json=timeZoneOverride,proto3" json:"time_zone_override,omitempty"`
	// An object with the hunt group fields required for the call
	HuntGroup *GetUserResponse_HuntGroup `protobuf:"bytes,5,opt,name=hunt_group,json=huntGroup,proto3" json:"hunt_group,omitempty"`
	// A list of the labels associated with the user
	Labels []*org.Label `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	// A list of the skills associated with the user
	Skills []*org.Skill `protobuf:"bytes,7,rep,name=skills,proto3" json:"skills,omitempty"`
	// A list of the permission groups the user belongs to
	PermissionGroups []*org.PermissionGroup `protobuf:"bytes,8,rep,name=permission_groups,json=permissionGroups,proto3" json:"permission_groups,omitempty"`
	// The user's p3 permission group
	P3PermissionGroup *org.P3PermissionGroup `protobuf:"bytes,9,opt,name=p3_permission_group,json=p3PermissionGroup,proto3" json:"p3_permission_group,omitempty"`
	// An object with the agent profile group fields required for the call
	AgentProfileGroup *GetUserResponse_AgentProfileGroup `protobuf:"bytes,10,opt,name=agent_profile_group,json=agentProfileGroup,proto3" json:"agent_profile_group,omitempty"`
	// name of users organization
	OrgName string `protobuf:"bytes,11,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	// users first name
	FirstName string `protobuf:"bytes,12,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The agents's username
	Username string `protobuf:"bytes,13,opt,name=username,proto3" json:"username,omitempty"`
	// users last name
	LastName string `protobuf:"bytes,14,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// if the user is disabled from logging in
	LoginDisabled bool `protobuf:"varint,15,opt,name=login_disabled,json=loginDisabled,proto3" json:"login_disabled,omitempty"`
	// users partner agent sid
	PartnerAgentId string `protobuf:"bytes,16,opt,name=partner_agent_id,json=partnerAgentId,proto3" json:"partner_agent_id,omitempty"`
	// users caller id
	UserCallerId string `protobuf:"bytes,17,opt,name=user_caller_id,json=userCallerId,proto3" json:"user_caller_id,omitempty"`
	// a users array of linkback numbers
	LinkbackNumbers []string `protobuf:"bytes,18,rep,name=linkback_numbers,json=linkbackNumbers,proto3" json:"linkback_numbers,omitempty"`
	// a users array of caller ids
	CallerIds []string `protobuf:"bytes,19,rep,name=caller_ids,json=callerIds,proto3" json:"caller_ids,omitempty"`
	// default application that is selected when signed in
	DefaultApp commons.OperatorApplications `protobuf:"varint,20,opt,name=default_app,json=defaultApp,proto3,enum=api.commons.OperatorApplications" json:"default_app,omitempty"`
	// Login Sid of the user
	LoginSid int64 `protobuf:"varint,21,opt,name=login_sid,json=loginSid,proto3" json:"login_sid,omitempty"`
	// Agent Sid
	AgentSid int64 `protobuf:"varint,22,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	// A list of trusts the user has been assigned.
	Trusts []*org.Trust `protobuf:"bytes,23,rep,name=trusts,proto3" json:"trusts,omitempty"`
	// user's email
	Email string `protobuf:"bytes,24,opt,name=email,proto3" json:"email,omitempty"`
	// user's default region
	DefaultRegion string `protobuf:"bytes,25,opt,name=default_region,json=defaultRegion,proto3" json:"default_region,omitempty"`
	// user's created date
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// user's last updated date
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// user's password reset required
	PasswordResetRequired bool `protobuf:"varint,28,opt,name=password_reset_required,json=passwordResetRequired,proto3" json:"password_reset_required,omitempty"`
	// Whether the user is an account owner
	AccountOwner bool `protobuf:"varint,29,opt,name=account_owner,json=accountOwner,proto3" json:"account_owner,omitempty"`
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserResponse) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetUserResponse) GetDelegated() bool {
	if x != nil {
		return x.Delegated
	}
	return false
}

func (x *GetUserResponse) GetTimeZoneOverride() *commons.TimeZoneWrapper {
	if x != nil {
		return x.TimeZoneOverride
	}
	return nil
}

func (x *GetUserResponse) GetHuntGroup() *GetUserResponse_HuntGroup {
	if x != nil {
		return x.HuntGroup
	}
	return nil
}

func (x *GetUserResponse) GetLabels() []*org.Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetUserResponse) GetSkills() []*org.Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *GetUserResponse) GetPermissionGroups() []*org.PermissionGroup {
	if x != nil {
		return x.PermissionGroups
	}
	return nil
}

func (x *GetUserResponse) GetP3PermissionGroup() *org.P3PermissionGroup {
	if x != nil {
		return x.P3PermissionGroup
	}
	return nil
}

func (x *GetUserResponse) GetAgentProfileGroup() *GetUserResponse_AgentProfileGroup {
	if x != nil {
		return x.AgentProfileGroup
	}
	return nil
}

func (x *GetUserResponse) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *GetUserResponse) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *GetUserResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetUserResponse) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *GetUserResponse) GetLoginDisabled() bool {
	if x != nil {
		return x.LoginDisabled
	}
	return false
}

func (x *GetUserResponse) GetPartnerAgentId() string {
	if x != nil {
		return x.PartnerAgentId
	}
	return ""
}

func (x *GetUserResponse) GetUserCallerId() string {
	if x != nil {
		return x.UserCallerId
	}
	return ""
}

func (x *GetUserResponse) GetLinkbackNumbers() []string {
	if x != nil {
		return x.LinkbackNumbers
	}
	return nil
}

func (x *GetUserResponse) GetCallerIds() []string {
	if x != nil {
		return x.CallerIds
	}
	return nil
}

func (x *GetUserResponse) GetDefaultApp() commons.OperatorApplications {
	if x != nil {
		return x.DefaultApp
	}
	return commons.OperatorApplications(0)
}

func (x *GetUserResponse) GetLoginSid() int64 {
	if x != nil {
		return x.LoginSid
	}
	return 0
}

func (x *GetUserResponse) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *GetUserResponse) GetTrusts() []*org.Trust {
	if x != nil {
		return x.Trusts
	}
	return nil
}

func (x *GetUserResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetUserResponse) GetDefaultRegion() string {
	if x != nil {
		return x.DefaultRegion
	}
	return ""
}

func (x *GetUserResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetUserResponse) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *GetUserResponse) GetPasswordResetRequired() bool {
	if x != nil {
		return x.PasswordResetRequired
	}
	return false
}

func (x *GetUserResponse) GetAccountOwner() bool {
	if x != nil {
		return x.AccountOwner
	}
	return false
}

// Request message for GetUserByOrgId.
type GetUserByOrgIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Get by UserId.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// OrgId of the user being requested.
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *GetUserByOrgIdRequest) Reset() {
	*x = GetUserByOrgIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByOrgIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByOrgIdRequest) ProtoMessage() {}

func (x *GetUserByOrgIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByOrgIdRequest.ProtoReflect.Descriptor instead.
func (*GetUserByOrgIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserByOrgIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserByOrgIdRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// Response message for GetUserByOrgId.
type GetUserByOrgIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID of the user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The ID of the user's organization
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The agents's username
	Username string `protobuf:"bytes,13,opt,name=username,proto3" json:"username,omitempty"`
	// Whether the user is delegated (sso related)
	Delegated bool `protobuf:"varint,3,opt,name=delegated,proto3" json:"delegated,omitempty"`
	// The name of the user's organization
	OrgName string `protobuf:"bytes,4,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	// An object with the hunt group fields required for the call
	HuntGroup *GetUserByOrgIdResponse_HuntGroup `protobuf:"bytes,5,opt,name=hunt_group,json=huntGroup,proto3" json:"hunt_group,omitempty"`
	// A list of the labels associated with the user
	Labels []*org.Label `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	// A list of the skills associated with the user
	Skills []*org.Skill `protobuf:"bytes,7,rep,name=skills,proto3" json:"skills,omitempty"`
	// A list of the permission groups the user belongs to
	PermissionGroups []*org.PermissionGroup `protobuf:"bytes,8,rep,name=permission_groups,json=permissionGroups,proto3" json:"permission_groups,omitempty"`
	// The user's p3 permission group
	P3PermissionGroup *org.P3PermissionGroup `protobuf:"bytes,9,opt,name=p3_permission_group,json=p3PermissionGroup,proto3" json:"p3_permission_group,omitempty"`
	// An object with the agent profile group fields required for the call
	AgentProfileGroup *GetUserByOrgIdResponse_AgentProfileGroup `protobuf:"bytes,10,opt,name=agent_profile_group,json=agentProfileGroup,proto3" json:"agent_profile_group,omitempty"`
	// A list of trusts the user has been assigned.
	Trusts []*org.Trust `protobuf:"bytes,21,rep,name=trusts,proto3" json:"trusts,omitempty"`
	// Whether the user is an account owner
	AccountOwner bool `protobuf:"varint,22,opt,name=account_owner,json=accountOwner,proto3" json:"account_owner,omitempty"`
}

func (x *GetUserByOrgIdResponse) Reset() {
	*x = GetUserByOrgIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByOrgIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByOrgIdResponse) ProtoMessage() {}

func (x *GetUserByOrgIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByOrgIdResponse.ProtoReflect.Descriptor instead.
func (*GetUserByOrgIdResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserByOrgIdResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserByOrgIdResponse) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetUserByOrgIdResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetUserByOrgIdResponse) GetDelegated() bool {
	if x != nil {
		return x.Delegated
	}
	return false
}

func (x *GetUserByOrgIdResponse) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *GetUserByOrgIdResponse) GetHuntGroup() *GetUserByOrgIdResponse_HuntGroup {
	if x != nil {
		return x.HuntGroup
	}
	return nil
}

func (x *GetUserByOrgIdResponse) GetLabels() []*org.Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetUserByOrgIdResponse) GetSkills() []*org.Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *GetUserByOrgIdResponse) GetPermissionGroups() []*org.PermissionGroup {
	if x != nil {
		return x.PermissionGroups
	}
	return nil
}

func (x *GetUserByOrgIdResponse) GetP3PermissionGroup() *org.P3PermissionGroup {
	if x != nil {
		return x.P3PermissionGroup
	}
	return nil
}

func (x *GetUserByOrgIdResponse) GetAgentProfileGroup() *GetUserByOrgIdResponse_AgentProfileGroup {
	if x != nil {
		return x.AgentProfileGroup
	}
	return nil
}

func (x *GetUserByOrgIdResponse) GetTrusts() []*org.Trust {
	if x != nil {
		return x.Trusts
	}
	return nil
}

func (x *GetUserByOrgIdResponse) GetAccountOwner() bool {
	if x != nil {
		return x.AccountOwner
	}
	return false
}

// Request message for listAgents rpc.
type ListAgentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAgentsRequest) Reset() {
	*x = ListAgentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsRequest) ProtoMessage() {}

func (x *ListAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsRequest.ProtoReflect.Descriptor instead.
func (*ListAgentsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{10}
}

// Response message for listAgents rpc.
type ListAgentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of returned agents with masked data.
	Agents []*ListAgentsResponse_AgentDetails `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
}

func (x *ListAgentsResponse) Reset() {
	*x = ListAgentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsResponse) ProtoMessage() {}

func (x *ListAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsResponse.ProtoReflect.Descriptor instead.
func (*ListAgentsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{11}
}

func (x *ListAgentsResponse) GetAgents() []*ListAgentsResponse_AgentDetails {
	if x != nil {
		return x.Agents
	}
	return nil
}

// Request message for listUsers rpc.
type ListUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListUsersRequest) Reset() {
	*x = ListUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersRequest) ProtoMessage() {}

func (x *ListUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersRequest.ProtoReflect.Descriptor instead.
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{12}
}

// Response message for listUsers rpc.
type ListUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of returned users with masked data.
	Users []*ListUsersResponse_UserDetails `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *ListUsersResponse) Reset() {
	*x = ListUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersResponse) ProtoMessage() {}

func (x *ListUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersResponse.ProtoReflect.Descriptor instead.
func (*ListUsersResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{13}
}

func (x *ListUsersResponse) GetUsers() []*ListUsersResponse_UserDetails {
	if x != nil {
		return x.Users
	}
	return nil
}

// Request message for the ListUsersByOrgId rpc.
type ListUsersByOrgIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Filter by the user's archived status.
	ArchivedFilter commons.UserArchivedStateFilter `protobuf:"varint,2,opt,name=archived_filter,json=archivedFilter,proto3,enum=api.commons.UserArchivedStateFilter" json:"archived_filter,omitempty"`
}

func (x *ListUsersByOrgIdRequest) Reset() {
	*x = ListUsersByOrgIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersByOrgIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersByOrgIdRequest) ProtoMessage() {}

func (x *ListUsersByOrgIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersByOrgIdRequest.ProtoReflect.Descriptor instead.
func (*ListUsersByOrgIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{14}
}

func (x *ListUsersByOrgIdRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListUsersByOrgIdRequest) GetArchivedFilter() commons.UserArchivedStateFilter {
	if x != nil {
		return x.ArchivedFilter
	}
	return commons.UserArchivedStateFilter(0)
}

// Response message for the ListsUsersByOrgId rpc.
type ListUsersByOrgIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of returned users with masked data.
	Users []*ListUsersByOrgIdResponse_UserDetails `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *ListUsersByOrgIdResponse) Reset() {
	*x = ListUsersByOrgIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersByOrgIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersByOrgIdResponse) ProtoMessage() {}

func (x *ListUsersByOrgIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersByOrgIdResponse.ProtoReflect.Descriptor instead.
func (*ListUsersByOrgIdResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{15}
}

func (x *ListUsersByOrgIdResponse) GetUsers() []*ListUsersByOrgIdResponse_UserDetails {
	if x != nil {
		return x.Users
	}
	return nil
}

// Request message for the ListUsersByRegion rpc.
type ListUsersByRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by region.
	RegionId string `protobuf:"bytes,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Return a list of only user agents (users whose default app is agent). When this is false all users are returned.
	Agent bool `protobuf:"varint,2,opt,name=agent,proto3" json:"agent,omitempty"`
	// Filter by the user's archived status.
	ArchivedFilter commons.UserArchivedStateFilter `protobuf:"varint,3,opt,name=archived_filter,json=archivedFilter,proto3,enum=api.commons.UserArchivedStateFilter" json:"archived_filter,omitempty"`
}

func (x *ListUsersByRegionRequest) Reset() {
	*x = ListUsersByRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersByRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersByRegionRequest) ProtoMessage() {}

func (x *ListUsersByRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersByRegionRequest.ProtoReflect.Descriptor instead.
func (*ListUsersByRegionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{16}
}

func (x *ListUsersByRegionRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListUsersByRegionRequest) GetAgent() bool {
	if x != nil {
		return x.Agent
	}
	return false
}

func (x *ListUsersByRegionRequest) GetArchivedFilter() commons.UserArchivedStateFilter {
	if x != nil {
		return x.ArchivedFilter
	}
	return commons.UserArchivedStateFilter(0)
}

// Response message for the ListsUserByRegion rpc.
type ListUsersByRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of returned users with masked data.
	Users []*ListUsersByRegionResponse_UserDetails `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *ListUsersByRegionResponse) Reset() {
	*x = ListUsersByRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersByRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersByRegionResponse) ProtoMessage() {}

func (x *ListUsersByRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersByRegionResponse.ProtoReflect.Descriptor instead.
func (*ListUsersByRegionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{17}
}

func (x *ListUsersByRegionResponse) GetUsers() []*ListUsersByRegionResponse_UserDetails {
	if x != nil {
		return x.Users
	}
	return nil
}

// Request message for the UpdateMyUser rpc.
type UpdateMyUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The linkback numbers the updated user will have.
	LinkbackNumbers []string `protobuf:"bytes,1,rep,name=linkback_numbers,json=linkbackNumbers,proto3" json:"linkback_numbers,omitempty"`
	// The caller ids the updated user will have.
	CallerIds []string `protobuf:"bytes,2,rep,name=caller_ids,json=callerIds,proto3" json:"caller_ids,omitempty"`
	// User TimeZone with wrapper for nullable timezone.
	TimeZoneOverride *commons.TimeZoneWrapper `protobuf:"bytes,3,opt,name=time_zone_override,json=timeZoneOverride,proto3" json:"time_zone_override,omitempty"`
	// Default app the user starts on
	DefaultApp commons.OperatorApplications `protobuf:"varint,4,opt,name=default_app,json=defaultApp,proto3,enum=api.commons.OperatorApplications" json:"default_app,omitempty"`
	// Mask to filter fields on organization entities in response.
	FieldMask []string `protobuf:"bytes,10,rep,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *UpdateMyUserRequest) Reset() {
	*x = UpdateMyUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMyUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMyUserRequest) ProtoMessage() {}

func (x *UpdateMyUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMyUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateMyUserRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateMyUserRequest) GetLinkbackNumbers() []string {
	if x != nil {
		return x.LinkbackNumbers
	}
	return nil
}

func (x *UpdateMyUserRequest) GetCallerIds() []string {
	if x != nil {
		return x.CallerIds
	}
	return nil
}

func (x *UpdateMyUserRequest) GetTimeZoneOverride() *commons.TimeZoneWrapper {
	if x != nil {
		return x.TimeZoneOverride
	}
	return nil
}

func (x *UpdateMyUserRequest) GetDefaultApp() commons.OperatorApplications {
	if x != nil {
		return x.DefaultApp
	}
	return commons.OperatorApplications(0)
}

func (x *UpdateMyUserRequest) GetFieldMask() []string {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Response message for the UpdateMyUser rpc.
type UpdateMyUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMyUserResponse) Reset() {
	*x = UpdateMyUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMyUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMyUserResponse) ProtoMessage() {}

func (x *UpdateMyUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMyUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateMyUserResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{19}
}

// Request message for the UpdateUser rpc.
type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user id of the user to be updated
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The first name the updated user will have.
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The last name the updated user will have.
	LastName string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The partner agent id the updated user will have.
	PartnerAgentId string `protobuf:"bytes,4,opt,name=partner_agent_id,json=partnerAgentId,proto3" json:"partner_agent_id,omitempty"`
	// User TimeZone with wrapper for nullable timezone.
	TimeZoneOverride *commons.TimeZoneWrapper `protobuf:"bytes,5,opt,name=time_zone_override,json=timeZoneOverride,proto3" json:"time_zone_override,omitempty"`
	// The linkback numbers the updated user will have.
	LinkbackNumbers []string `protobuf:"bytes,6,rep,name=linkback_numbers,json=linkbackNumbers,proto3" json:"linkback_numbers,omitempty"`
	// The caller ids the updated user will have.
	CallerIds []string `protobuf:"bytes,7,rep,name=caller_ids,json=callerIds,proto3" json:"caller_ids,omitempty"`
	// Default app the user starts on
	DefaultApp commons.OperatorApplications `protobuf:"varint,8,opt,name=default_app,json=defaultApp,proto3,enum=api.commons.OperatorApplications" json:"default_app,omitempty"`
	// Whether the updated user will require a password reset.
	PasswordResetRequired bool `protobuf:"varint,9,opt,name=password_reset_required,json=passwordResetRequired,proto3" json:"password_reset_required,omitempty"`
	// The agent profile group id the updated user will have.
	AgentProfileGroupId string `protobuf:"bytes,10,opt,name=agent_profile_group_id,json=agentProfileGroupId,proto3" json:"agent_profile_group_id,omitempty"`
	// The username the updated user will have.
	Username string `protobuf:"bytes,11,opt,name=username,proto3" json:"username,omitempty"`
	// The email the updated user will have.
	Email string `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`
	// The Agent Caller Id of the user
	UserCallerId string `protobuf:"bytes,13,opt,name=user_caller_id,json=userCallerId,proto3" json:"user_caller_id,omitempty"`
	// A list of labels to assign to the user
	LabelIds []string `protobuf:"bytes,14,rep,name=label_ids,json=labelIds,proto3" json:"label_ids,omitempty"`
	// Mask to filter fields on organization entities in response.
	FieldMask []string `protobuf:"bytes,20,rep,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpdateUserRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpdateUserRequest) GetPartnerAgentId() string {
	if x != nil {
		return x.PartnerAgentId
	}
	return ""
}

func (x *UpdateUserRequest) GetTimeZoneOverride() *commons.TimeZoneWrapper {
	if x != nil {
		return x.TimeZoneOverride
	}
	return nil
}

func (x *UpdateUserRequest) GetLinkbackNumbers() []string {
	if x != nil {
		return x.LinkbackNumbers
	}
	return nil
}

func (x *UpdateUserRequest) GetCallerIds() []string {
	if x != nil {
		return x.CallerIds
	}
	return nil
}

func (x *UpdateUserRequest) GetDefaultApp() commons.OperatorApplications {
	if x != nil {
		return x.DefaultApp
	}
	return commons.OperatorApplications(0)
}

func (x *UpdateUserRequest) GetPasswordResetRequired() bool {
	if x != nil {
		return x.PasswordResetRequired
	}
	return false
}

func (x *UpdateUserRequest) GetAgentProfileGroupId() string {
	if x != nil {
		return x.AgentProfileGroupId
	}
	return ""
}

func (x *UpdateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateUserRequest) GetUserCallerId() string {
	if x != nil {
		return x.UserCallerId
	}
	return ""
}

func (x *UpdateUserRequest) GetLabelIds() []string {
	if x != nil {
		return x.LabelIds
	}
	return nil
}

func (x *UpdateUserRequest) GetFieldMask() []string {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Response message for the UpdateUser rpc.
type UpdateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateUserResponse) Reset() {
	*x = UpdateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResponse) ProtoMessage() {}

func (x *UpdateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{21}
}

// Request message for the UpdateUserLabels rpc.
type UpdateUserLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user whose labels will be updated.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The organization ID of the user
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Labels to update user to
	LabelIds []string `protobuf:"bytes,3,rep,name=label_ids,json=labelIds,proto3" json:"label_ids,omitempty"`
}

func (x *UpdateUserLabelsRequest) Reset() {
	*x = UpdateUserLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserLabelsRequest) ProtoMessage() {}

func (x *UpdateUserLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserLabelsRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserLabelsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateUserLabelsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserLabelsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UpdateUserLabelsRequest) GetLabelIds() []string {
	if x != nil {
		return x.LabelIds
	}
	return nil
}

// Response message for the UpdateUserLabels rpc.
type UpdateUserLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateUserLabelsResponse) Reset() {
	*x = UpdateUserLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserLabelsResponse) ProtoMessage() {}

func (x *UpdateUserLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserLabelsResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserLabelsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{23}
}

// Request message for the UpdateUserCallerId rpc.
type UpdateUserCallerIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user id of the user to be updated
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The caller id for the updated user
	UserCallerId string `protobuf:"bytes,2,opt,name=user_caller_id,json=userCallerId,proto3" json:"user_caller_id,omitempty"`
}

func (x *UpdateUserCallerIdRequest) Reset() {
	*x = UpdateUserCallerIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserCallerIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserCallerIdRequest) ProtoMessage() {}

func (x *UpdateUserCallerIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserCallerIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserCallerIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateUserCallerIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserCallerIdRequest) GetUserCallerId() string {
	if x != nil {
		return x.UserCallerId
	}
	return ""
}

// Response message for the UpdateUserCallerId rpc.
type UpdateUserCallerIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateUserCallerIdResponse) Reset() {
	*x = UpdateUserCallerIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserCallerIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserCallerIdResponse) ProtoMessage() {}

func (x *UpdateUserCallerIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserCallerIdResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserCallerIdResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{25}
}

// Request message for the UpdateUserDisabled rpc.
type UpdateUserDisabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user id of the user to be updated
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Whether the user is able to login
	LoginDisabled bool `protobuf:"varint,2,opt,name=login_disabled,json=loginDisabled,proto3" json:"login_disabled,omitempty"`
}

func (x *UpdateUserDisabledRequest) Reset() {
	*x = UpdateUserDisabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDisabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDisabledRequest) ProtoMessage() {}

func (x *UpdateUserDisabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDisabledRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserDisabledRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateUserDisabledRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserDisabledRequest) GetLoginDisabled() bool {
	if x != nil {
		return x.LoginDisabled
	}
	return false
}

// Response message for the UpdateUserDisabled rpc.
type UpdateUserDisabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateUserDisabledResponse) Reset() {
	*x = UpdateUserDisabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDisabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDisabledResponse) ProtoMessage() {}

func (x *UpdateUserDisabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDisabledResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserDisabledResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{27}
}

// Request message for the UpdateUserDisabledByOrgId rpc.
type UpdateUserDisabledByOrgIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user id of the user to be updated
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The organization id of the user to be updated
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Whether the user is able to login
	LoginDisabled bool `protobuf:"varint,3,opt,name=login_disabled,json=loginDisabled,proto3" json:"login_disabled,omitempty"`
}

func (x *UpdateUserDisabledByOrgIdRequest) Reset() {
	*x = UpdateUserDisabledByOrgIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDisabledByOrgIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDisabledByOrgIdRequest) ProtoMessage() {}

func (x *UpdateUserDisabledByOrgIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDisabledByOrgIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserDisabledByOrgIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateUserDisabledByOrgIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserDisabledByOrgIdRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UpdateUserDisabledByOrgIdRequest) GetLoginDisabled() bool {
	if x != nil {
		return x.LoginDisabled
	}
	return false
}

// Response message for the UpdateUserDisabledByOrgId rpc.
type UpdateUserDisabledByOrgIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateUserDisabledByOrgIdResponse) Reset() {
	*x = UpdateUserDisabledByOrgIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDisabledByOrgIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDisabledByOrgIdResponse) ProtoMessage() {}

func (x *UpdateUserDisabledByOrgIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDisabledByOrgIdResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserDisabledByOrgIdResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{29}
}

// Request message for the GetMyUserPasswordResetLink rpc.
type GetMyUserPasswordResetLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time to live (in seconds) of the generated link, defaults to 180 if unset.
	Ttl int64 `protobuf:"varint,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *GetMyUserPasswordResetLinkRequest) Reset() {
	*x = GetMyUserPasswordResetLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyUserPasswordResetLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyUserPasswordResetLinkRequest) ProtoMessage() {}

func (x *GetMyUserPasswordResetLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyUserPasswordResetLinkRequest.ProtoReflect.Descriptor instead.
func (*GetMyUserPasswordResetLinkRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{30}
}

func (x *GetMyUserPasswordResetLinkRequest) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// Response message for the GetMyUserPasswordResetLink rpc.
type GetMyUserPasswordResetLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The generated password reset link URL.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetMyUserPasswordResetLinkResponse) Reset() {
	*x = GetMyUserPasswordResetLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyUserPasswordResetLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyUserPasswordResetLinkResponse) ProtoMessage() {}

func (x *GetMyUserPasswordResetLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyUserPasswordResetLinkResponse.ProtoReflect.Descriptor instead.
func (*GetMyUserPasswordResetLinkResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{31}
}

func (x *GetMyUserPasswordResetLinkResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Request message for the GetUserPasswordResetLink rpc.
type GetUserPasswordResetLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user whose password will be updated.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The time to live (in seconds) of the generated link, defaults to 180 if unset.
	Ttl int64 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *GetUserPasswordResetLinkRequest) Reset() {
	*x = GetUserPasswordResetLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPasswordResetLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPasswordResetLinkRequest) ProtoMessage() {}

func (x *GetUserPasswordResetLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPasswordResetLinkRequest.ProtoReflect.Descriptor instead.
func (*GetUserPasswordResetLinkRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{32}
}

func (x *GetUserPasswordResetLinkRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserPasswordResetLinkRequest) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// Response message for the GetUserPasswordResetLink rpc.
type GetUserPasswordResetLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The generated password reset link URL.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetUserPasswordResetLinkResponse) Reset() {
	*x = GetUserPasswordResetLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPasswordResetLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPasswordResetLinkResponse) ProtoMessage() {}

func (x *GetUserPasswordResetLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPasswordResetLinkResponse.ProtoReflect.Descriptor instead.
func (*GetUserPasswordResetLinkResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{33}
}

func (x *GetUserPasswordResetLinkResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Request message for the GetUserPasswordResetLinkByOrgId rpc.
type GetUserPasswordResetLinkByOrgIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user whose password will be updated.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The organization ID of the user
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The time to live (in seconds) of the generated link, defaults to 180 if unset.
	Ttl int64 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *GetUserPasswordResetLinkByOrgIdRequest) Reset() {
	*x = GetUserPasswordResetLinkByOrgIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPasswordResetLinkByOrgIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPasswordResetLinkByOrgIdRequest) ProtoMessage() {}

func (x *GetUserPasswordResetLinkByOrgIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPasswordResetLinkByOrgIdRequest.ProtoReflect.Descriptor instead.
func (*GetUserPasswordResetLinkByOrgIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{34}
}

func (x *GetUserPasswordResetLinkByOrgIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserPasswordResetLinkByOrgIdRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetUserPasswordResetLinkByOrgIdRequest) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// Response message for the GetUserPasswordResetLinkByOrgId rpc.
type GetUserPasswordResetLinkByOrgIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The generated password reset link URL.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetUserPasswordResetLinkByOrgIdResponse) Reset() {
	*x = GetUserPasswordResetLinkByOrgIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPasswordResetLinkByOrgIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPasswordResetLinkByOrgIdResponse) ProtoMessage() {}

func (x *GetUserPasswordResetLinkByOrgIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPasswordResetLinkByOrgIdResponse.ProtoReflect.Descriptor instead.
func (*GetUserPasswordResetLinkByOrgIdResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{35}
}

func (x *GetUserPasswordResetLinkByOrgIdResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// This rpc used to be called GetUserBlocked
// Request message for the GetUserLoginInfo rpc.
type GetUserLoginInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The organization ID of the user
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *GetUserLoginInfoRequest) Reset() {
	*x = GetUserLoginInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserLoginInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserLoginInfoRequest) ProtoMessage() {}

func (x *GetUserLoginInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserLoginInfoRequest.ProtoReflect.Descriptor instead.
func (*GetUserLoginInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{36}
}

func (x *GetUserLoginInfoRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserLoginInfoRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// Response message for the GetUserLoginInfo rpc.
type GetUserLoginInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the user is manually blocked in auth0
	Blocked bool `protobuf:"varint,1,opt,name=blocked,proto3" json:"blocked,omitempty"`
	// The last IP the user used to login
	LastIp string `protobuf:"bytes,2,opt,name=last_ip,json=lastIp,proto3" json:"last_ip,omitempty"`
	// The time of the user's latest login
	LastLogin *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_login,json=lastLogin,proto3" json:"last_login,omitempty"`
	// The time of the user's latest password reset
	LastPasswordReset *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_password_reset,json=lastPasswordReset,proto3" json:"last_password_reset,omitempty"`
	// The number of times the user has logged in
	LoginsCount int64 `protobuf:"varint,5,opt,name=logins_count,json=loginsCount,proto3" json:"logins_count,omitempty"`
	// The time the user was created in auth0
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The last time the user was updated in auth0
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Whether the user has specific IPs which are blocked
	HasBlockedIps bool `protobuf:"varint,8,opt,name=has_blocked_ips,json=hasBlockedIps,proto3" json:"has_blocked_ips,omitempty"`
}

func (x *GetUserLoginInfoResponse) Reset() {
	*x = GetUserLoginInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserLoginInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserLoginInfoResponse) ProtoMessage() {}

func (x *GetUserLoginInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserLoginInfoResponse.ProtoReflect.Descriptor instead.
func (*GetUserLoginInfoResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{37}
}

func (x *GetUserLoginInfoResponse) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *GetUserLoginInfoResponse) GetLastIp() string {
	if x != nil {
		return x.LastIp
	}
	return ""
}

func (x *GetUserLoginInfoResponse) GetLastLogin() *timestamppb.Timestamp {
	if x != nil {
		return x.LastLogin
	}
	return nil
}

func (x *GetUserLoginInfoResponse) GetLastPasswordReset() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPasswordReset
	}
	return nil
}

func (x *GetUserLoginInfoResponse) GetLoginsCount() int64 {
	if x != nil {
		return x.LoginsCount
	}
	return 0
}

func (x *GetUserLoginInfoResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetUserLoginInfoResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GetUserLoginInfoResponse) GetHasBlockedIps() bool {
	if x != nil {
		return x.HasBlockedIps
	}
	return false
}

// Request message for the GetUserEmailVerified rpc.
type GetUserEmailVerifiedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user to be checked.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserEmailVerifiedRequest) Reset() {
	*x = GetUserEmailVerifiedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserEmailVerifiedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserEmailVerifiedRequest) ProtoMessage() {}

func (x *GetUserEmailVerifiedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserEmailVerifiedRequest.ProtoReflect.Descriptor instead.
func (*GetUserEmailVerifiedRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{38}
}

func (x *GetUserEmailVerifiedRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Response message for the GetUserEmailVerified rpc.
type GetUserEmailVerifiedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the user's email is verified
	EmailVerified bool `protobuf:"varint,1,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified,omitempty"`
}

func (x *GetUserEmailVerifiedResponse) Reset() {
	*x = GetUserEmailVerifiedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserEmailVerifiedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserEmailVerifiedResponse) ProtoMessage() {}

func (x *GetUserEmailVerifiedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserEmailVerifiedResponse.ProtoReflect.Descriptor instead.
func (*GetUserEmailVerifiedResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{39}
}

func (x *GetUserEmailVerifiedResponse) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

// Request message for the GetUserEmailVerifiedByOrgId rpc.
type GetUserEmailVerifiedByOrgIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user to be checked.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The organization ID of the user.
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *GetUserEmailVerifiedByOrgIdRequest) Reset() {
	*x = GetUserEmailVerifiedByOrgIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserEmailVerifiedByOrgIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserEmailVerifiedByOrgIdRequest) ProtoMessage() {}

func (x *GetUserEmailVerifiedByOrgIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserEmailVerifiedByOrgIdRequest.ProtoReflect.Descriptor instead.
func (*GetUserEmailVerifiedByOrgIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{40}
}

func (x *GetUserEmailVerifiedByOrgIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserEmailVerifiedByOrgIdRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// Response message for the GetUserEmailVerifiedByOrgId rpc.
type GetUserEmailVerifiedByOrgIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the user's email is verified
	EmailVerified bool `protobuf:"varint,1,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified,omitempty"`
}

func (x *GetUserEmailVerifiedByOrgIdResponse) Reset() {
	*x = GetUserEmailVerifiedByOrgIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserEmailVerifiedByOrgIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserEmailVerifiedByOrgIdResponse) ProtoMessage() {}

func (x *GetUserEmailVerifiedByOrgIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserEmailVerifiedByOrgIdResponse.ProtoReflect.Descriptor instead.
func (*GetUserEmailVerifiedByOrgIdResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{41}
}

func (x *GetUserEmailVerifiedByOrgIdResponse) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

// Request message for the SendUserEmailVerification rpc.
type SendUserEmailVerificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user to be verified.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SendUserEmailVerificationRequest) Reset() {
	*x = SendUserEmailVerificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendUserEmailVerificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendUserEmailVerificationRequest) ProtoMessage() {}

func (x *SendUserEmailVerificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendUserEmailVerificationRequest.ProtoReflect.Descriptor instead.
func (*SendUserEmailVerificationRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{42}
}

func (x *SendUserEmailVerificationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Response message for the SendUserEmailVerification rpc.
type SendUserEmailVerificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendUserEmailVerificationResponse) Reset() {
	*x = SendUserEmailVerificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendUserEmailVerificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendUserEmailVerificationResponse) ProtoMessage() {}

func (x *SendUserEmailVerificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendUserEmailVerificationResponse.ProtoReflect.Descriptor instead.
func (*SendUserEmailVerificationResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{43}
}

// Request message for the SendUserEmailVerificationByOrgId rpc.
type SendUserEmailVerificationByOrgIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user to be verified.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The organization ID of the user.
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *SendUserEmailVerificationByOrgIdRequest) Reset() {
	*x = SendUserEmailVerificationByOrgIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendUserEmailVerificationByOrgIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendUserEmailVerificationByOrgIdRequest) ProtoMessage() {}

func (x *SendUserEmailVerificationByOrgIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendUserEmailVerificationByOrgIdRequest.ProtoReflect.Descriptor instead.
func (*SendUserEmailVerificationByOrgIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{44}
}

func (x *SendUserEmailVerificationByOrgIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SendUserEmailVerificationByOrgIdRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// Response message for the SendUserEmailVerificationByOrgId rpc.
type SendUserEmailVerificationByOrgIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendUserEmailVerificationByOrgIdResponse) Reset() {
	*x = SendUserEmailVerificationByOrgIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendUserEmailVerificationByOrgIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendUserEmailVerificationByOrgIdResponse) ProtoMessage() {}

func (x *SendUserEmailVerificationByOrgIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendUserEmailVerificationByOrgIdResponse.ProtoReflect.Descriptor instead.
func (*SendUserEmailVerificationByOrgIdResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{45}
}

// Request message for the GetUserSessionData rpc.
type GetUserSessionDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserSessionDataRequest) Reset() {
	*x = GetUserSessionDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSessionDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSessionDataRequest) ProtoMessage() {}

func (x *GetUserSessionDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSessionDataRequest.ProtoReflect.Descriptor instead.
func (*GetUserSessionDataRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{46}
}

// Response message for the GetUserSessionData rpc.
type GetUserSessionDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user the data is about
	User *GetUserSessionDataResponse_User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// The user's organizations's name
	OrgName string `protobuf:"bytes,2,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	// List of legacy P3 permissions.
	P3Permissions []commons.Permission `protobuf:"varint,3,rep,packed,name=p3_permissions,json=p3Permissions,proto3,enum=api.commons.Permission" json:"p3_permissions,omitempty"`
	// A list of the permission groups the user belongs to
	PermissionGroups []*org.PermissionGroup `protobuf:"bytes,4,rep,name=permission_groups,json=permissionGroups,proto3" json:"permission_groups,omitempty"`
	// A list of the labels associated with the user
	Labels []*org.Label `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *GetUserSessionDataResponse) Reset() {
	*x = GetUserSessionDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSessionDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSessionDataResponse) ProtoMessage() {}

func (x *GetUserSessionDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSessionDataResponse.ProtoReflect.Descriptor instead.
func (*GetUserSessionDataResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{47}
}

func (x *GetUserSessionDataResponse) GetUser() *GetUserSessionDataResponse_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetUserSessionDataResponse) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *GetUserSessionDataResponse) GetP3Permissions() []commons.Permission {
	if x != nil {
		return x.P3Permissions
	}
	return nil
}

func (x *GetUserSessionDataResponse) GetPermissionGroups() []*org.PermissionGroup {
	if x != nil {
		return x.PermissionGroups
	}
	return nil
}

func (x *GetUserSessionDataResponse) GetLabels() []*org.Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Object to contain the hunt group fields
type GetMyUserResponse_HuntGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid of the hunt group the agent is assigned to
	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The name of the hunt group the agent is assigned to
	HuntGroupName string `protobuf:"bytes,2,opt,name=hunt_group_name,json=huntGroupName,proto3" json:"hunt_group_name,omitempty"`
}

func (x *GetMyUserResponse_HuntGroup) Reset() {
	*x = GetMyUserResponse_HuntGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyUserResponse_HuntGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyUserResponse_HuntGroup) ProtoMessage() {}

func (x *GetMyUserResponse_HuntGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyUserResponse_HuntGroup.ProtoReflect.Descriptor instead.
func (*GetMyUserResponse_HuntGroup) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetMyUserResponse_HuntGroup) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *GetMyUserResponse_HuntGroup) GetHuntGroupName() string {
	if x != nil {
		return x.HuntGroupName
	}
	return ""
}

// Object to contain the agent profile group fields
type GetMyUserResponse_AgentProfileGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the user's agent profile group
	AgentProfileGroupId string `protobuf:"bytes,1,opt,name=agent_profile_group_id,json=agentProfileGroupId,proto3" json:"agent_profile_group_id,omitempty"`
	// The name of the user's agent profile group
	AgentProfileGroupName string `protobuf:"bytes,2,opt,name=agent_profile_group_name,json=agentProfileGroupName,proto3" json:"agent_profile_group_name,omitempty"`
}

func (x *GetMyUserResponse_AgentProfileGroup) Reset() {
	*x = GetMyUserResponse_AgentProfileGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyUserResponse_AgentProfileGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyUserResponse_AgentProfileGroup) ProtoMessage() {}

func (x *GetMyUserResponse_AgentProfileGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyUserResponse_AgentProfileGroup.ProtoReflect.Descriptor instead.
func (*GetMyUserResponse_AgentProfileGroup) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{5, 1}
}

func (x *GetMyUserResponse_AgentProfileGroup) GetAgentProfileGroupId() string {
	if x != nil {
		return x.AgentProfileGroupId
	}
	return ""
}

func (x *GetMyUserResponse_AgentProfileGroup) GetAgentProfileGroupName() string {
	if x != nil {
		return x.AgentProfileGroupName
	}
	return ""
}

// Object to contain the hunt group fields
type GetUserResponse_HuntGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid of the hunt group the agent is assigned to
	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The name of the hunt group the agent is assigned to
	HuntGroupName string `protobuf:"bytes,2,opt,name=hunt_group_name,json=huntGroupName,proto3" json:"hunt_group_name,omitempty"`
}

func (x *GetUserResponse_HuntGroup) Reset() {
	*x = GetUserResponse_HuntGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserResponse_HuntGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse_HuntGroup) ProtoMessage() {}

func (x *GetUserResponse_HuntGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse_HuntGroup.ProtoReflect.Descriptor instead.
func (*GetUserResponse_HuntGroup) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetUserResponse_HuntGroup) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *GetUserResponse_HuntGroup) GetHuntGroupName() string {
	if x != nil {
		return x.HuntGroupName
	}
	return ""
}

// Object to contain the agent profile group fields
type GetUserResponse_AgentProfileGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the user's agent profile group
	AgentProfileGroupId string `protobuf:"bytes,1,opt,name=agent_profile_group_id,json=agentProfileGroupId,proto3" json:"agent_profile_group_id,omitempty"`
	// The name of the user's agent profile group
	AgentProfileGroupName string `protobuf:"bytes,2,opt,name=agent_profile_group_name,json=agentProfileGroupName,proto3" json:"agent_profile_group_name,omitempty"`
}

func (x *GetUserResponse_AgentProfileGroup) Reset() {
	*x = GetUserResponse_AgentProfileGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserResponse_AgentProfileGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse_AgentProfileGroup) ProtoMessage() {}

func (x *GetUserResponse_AgentProfileGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse_AgentProfileGroup.ProtoReflect.Descriptor instead.
func (*GetUserResponse_AgentProfileGroup) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{7, 1}
}

func (x *GetUserResponse_AgentProfileGroup) GetAgentProfileGroupId() string {
	if x != nil {
		return x.AgentProfileGroupId
	}
	return ""
}

func (x *GetUserResponse_AgentProfileGroup) GetAgentProfileGroupName() string {
	if x != nil {
		return x.AgentProfileGroupName
	}
	return ""
}

// Object to contain the hunt group fields
type GetUserByOrgIdResponse_HuntGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid of the hunt group the agent is assigned to
	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The name of the hunt group the agent is assigned to
	HuntGroupName string `protobuf:"bytes,2,opt,name=hunt_group_name,json=huntGroupName,proto3" json:"hunt_group_name,omitempty"`
}

func (x *GetUserByOrgIdResponse_HuntGroup) Reset() {
	*x = GetUserByOrgIdResponse_HuntGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByOrgIdResponse_HuntGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByOrgIdResponse_HuntGroup) ProtoMessage() {}

func (x *GetUserByOrgIdResponse_HuntGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByOrgIdResponse_HuntGroup.ProtoReflect.Descriptor instead.
func (*GetUserByOrgIdResponse_HuntGroup) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetUserByOrgIdResponse_HuntGroup) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *GetUserByOrgIdResponse_HuntGroup) GetHuntGroupName() string {
	if x != nil {
		return x.HuntGroupName
	}
	return ""
}

// Object to contain the agent profile group fields
type GetUserByOrgIdResponse_AgentProfileGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the user's agent profile group
	AgentProfileGroupId string `protobuf:"bytes,1,opt,name=agent_profile_group_id,json=agentProfileGroupId,proto3" json:"agent_profile_group_id,omitempty"`
	// The name of the user's agent profile group
	AgentProfileGroupName string `protobuf:"bytes,2,opt,name=agent_profile_group_name,json=agentProfileGroupName,proto3" json:"agent_profile_group_name,omitempty"`
}

func (x *GetUserByOrgIdResponse_AgentProfileGroup) Reset() {
	*x = GetUserByOrgIdResponse_AgentProfileGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByOrgIdResponse_AgentProfileGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByOrgIdResponse_AgentProfileGroup) ProtoMessage() {}

func (x *GetUserByOrgIdResponse_AgentProfileGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByOrgIdResponse_AgentProfileGroup.ProtoReflect.Descriptor instead.
func (*GetUserByOrgIdResponse_AgentProfileGroup) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{9, 1}
}

func (x *GetUserByOrgIdResponse_AgentProfileGroup) GetAgentProfileGroupId() string {
	if x != nil {
		return x.AgentProfileGroupId
	}
	return ""
}

func (x *GetUserByOrgIdResponse_AgentProfileGroup) GetAgentProfileGroupName() string {
	if x != nil {
		return x.AgentProfileGroupName
	}
	return ""
}

// Object for ListAgents to return a list of.
type ListAgentsResponse_AgentDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID of the agent
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The ID of the agent's organization
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The agent's first name
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The agent's last name
	LastName string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The agents's username
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	// A list of the skills associated with the agent
	Skills []*org.Skill `protobuf:"bytes,6,rep,name=skills,proto3" json:"skills,omitempty"`
	// Whether or not the agent is disabled.
	LoginDisabled bool `protobuf:"varint,7,opt,name=login_disabled,json=loginDisabled,proto3" json:"login_disabled,omitempty"`
	// An object with the hunt group fields required for the call
	HuntGroup *ListAgentsResponse_AgentDetails_HuntGroup `protobuf:"bytes,8,opt,name=hunt_group,json=huntGroup,proto3" json:"hunt_group,omitempty"`
	// Whether the agent is delegated (sso related)
	Delegated bool `protobuf:"varint,10,opt,name=delegated,proto3" json:"delegated,omitempty"`
	// A list of the trust ids the user has been assigned.
	TrustIds []string `protobuf:"bytes,11,rep,name=trust_ids,json=trustIds,proto3" json:"trust_ids,omitempty"`
	// A list of the (neo)permission groups the user belongs to
	PermissionGroups []*org.PermissionGroup `protobuf:"bytes,12,rep,name=permission_groups,json=permissionGroups,proto3" json:"permission_groups,omitempty"`
	// The agent's agent sid
	AgentSid int64 `protobuf:"varint,13,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	// The agent's full name
	Name string `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	// The User's partner agent id.
	PartnerAgentId string `protobuf:"bytes,15,opt,name=partner_agent_id,json=partnerAgentId,proto3" json:"partner_agent_id,omitempty"`
	// User caller id
	UserCallerId string `protobuf:"bytes,16,opt,name=user_caller_id,json=userCallerId,proto3" json:"user_caller_id,omitempty"`
	// The date/time the user was created.
	Created *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=created,proto3" json:"created,omitempty"`
	// The date/time the user was last updated.
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// An object with the agent profile group fields required for the call
	AgentProfileGroup *ListAgentsResponse_AgentDetails_AgentProfileGroup `protobuf:"bytes,19,opt,name=agent_profile_group,json=agentProfileGroup,proto3" json:"agent_profile_group,omitempty"`
	// a bool signalling whether or not the user is also an agent
	Agent bool `protobuf:"varint,20,opt,name=agent,proto3" json:"agent,omitempty"`
	// User TimeZone with wrapper for nullable timezone
	TimeZoneOverride *commons.TimeZoneWrapper `protobuf:"bytes,21,opt,name=time_zone_override,json=timeZoneOverride,proto3" json:"time_zone_override,omitempty"`
	// The email of the agent. Empty if none set.
	Email string `protobuf:"bytes,22,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ListAgentsResponse_AgentDetails) Reset() {
	*x = ListAgentsResponse_AgentDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsResponse_AgentDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsResponse_AgentDetails) ProtoMessage() {}

func (x *ListAgentsResponse_AgentDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsResponse_AgentDetails.ProtoReflect.Descriptor instead.
func (*ListAgentsResponse_AgentDetails) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ListAgentsResponse_AgentDetails) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListAgentsResponse_AgentDetails) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListAgentsResponse_AgentDetails) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ListAgentsResponse_AgentDetails) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ListAgentsResponse_AgentDetails) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ListAgentsResponse_AgentDetails) GetSkills() []*org.Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *ListAgentsResponse_AgentDetails) GetLoginDisabled() bool {
	if x != nil {
		return x.LoginDisabled
	}
	return false
}

func (x *ListAgentsResponse_AgentDetails) GetHuntGroup() *ListAgentsResponse_AgentDetails_HuntGroup {
	if x != nil {
		return x.HuntGroup
	}
	return nil
}

func (x *ListAgentsResponse_AgentDetails) GetDelegated() bool {
	if x != nil {
		return x.Delegated
	}
	return false
}

func (x *ListAgentsResponse_AgentDetails) GetTrustIds() []string {
	if x != nil {
		return x.TrustIds
	}
	return nil
}

func (x *ListAgentsResponse_AgentDetails) GetPermissionGroups() []*org.PermissionGroup {
	if x != nil {
		return x.PermissionGroups
	}
	return nil
}

func (x *ListAgentsResponse_AgentDetails) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *ListAgentsResponse_AgentDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListAgentsResponse_AgentDetails) GetPartnerAgentId() string {
	if x != nil {
		return x.PartnerAgentId
	}
	return ""
}

func (x *ListAgentsResponse_AgentDetails) GetUserCallerId() string {
	if x != nil {
		return x.UserCallerId
	}
	return ""
}

func (x *ListAgentsResponse_AgentDetails) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ListAgentsResponse_AgentDetails) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *ListAgentsResponse_AgentDetails) GetAgentProfileGroup() *ListAgentsResponse_AgentDetails_AgentProfileGroup {
	if x != nil {
		return x.AgentProfileGroup
	}
	return nil
}

func (x *ListAgentsResponse_AgentDetails) GetAgent() bool {
	if x != nil {
		return x.Agent
	}
	return false
}

func (x *ListAgentsResponse_AgentDetails) GetTimeZoneOverride() *commons.TimeZoneWrapper {
	if x != nil {
		return x.TimeZoneOverride
	}
	return nil
}

func (x *ListAgentsResponse_AgentDetails) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// Object to contain the hunt group fields
type ListAgentsResponse_AgentDetails_HuntGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sid of the hunt group the agent is assigned to
	HuntGroupSid int64 `protobuf:"varint,1,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
	// The name of the hunt group the agent is assigned to
	HuntGroupName string `protobuf:"bytes,2,opt,name=hunt_group_name,json=huntGroupName,proto3" json:"hunt_group_name,omitempty"`
}

func (x *ListAgentsResponse_AgentDetails_HuntGroup) Reset() {
	*x = ListAgentsResponse_AgentDetails_HuntGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsResponse_AgentDetails_HuntGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsResponse_AgentDetails_HuntGroup) ProtoMessage() {}

func (x *ListAgentsResponse_AgentDetails_HuntGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsResponse_AgentDetails_HuntGroup.ProtoReflect.Descriptor instead.
func (*ListAgentsResponse_AgentDetails_HuntGroup) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{11, 0, 0}
}

func (x *ListAgentsResponse_AgentDetails_HuntGroup) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

func (x *ListAgentsResponse_AgentDetails_HuntGroup) GetHuntGroupName() string {
	if x != nil {
		return x.HuntGroupName
	}
	return ""
}

// Object to contain the agent profile group fields
type ListAgentsResponse_AgentDetails_AgentProfileGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the user's agent profile group
	AgentProfileGroupId string `protobuf:"bytes,1,opt,name=agent_profile_group_id,json=agentProfileGroupId,proto3" json:"agent_profile_group_id,omitempty"`
	// The name of the user's agent profile group
	AgentProfileGroupName string `protobuf:"bytes,2,opt,name=agent_profile_group_name,json=agentProfileGroupName,proto3" json:"agent_profile_group_name,omitempty"`
}

func (x *ListAgentsResponse_AgentDetails_AgentProfileGroup) Reset() {
	*x = ListAgentsResponse_AgentDetails_AgentProfileGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsResponse_AgentDetails_AgentProfileGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsResponse_AgentDetails_AgentProfileGroup) ProtoMessage() {}

func (x *ListAgentsResponse_AgentDetails_AgentProfileGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsResponse_AgentDetails_AgentProfileGroup.ProtoReflect.Descriptor instead.
func (*ListAgentsResponse_AgentDetails_AgentProfileGroup) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{11, 0, 1}
}

func (x *ListAgentsResponse_AgentDetails_AgentProfileGroup) GetAgentProfileGroupId() string {
	if x != nil {
		return x.AgentProfileGroupId
	}
	return ""
}

func (x *ListAgentsResponse_AgentDetails_AgentProfileGroup) GetAgentProfileGroupName() string {
	if x != nil {
		return x.AgentProfileGroupName
	}
	return ""
}

// Object for ListUsers to return a list of.
type ListUsersResponse_UserDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID of the user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The ID of the user's organization
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The user's first name
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The user's last name
	LastName string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The user's username
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	// Whether or not the user is disabled.
	LoginDisabled bool `protobuf:"varint,7,opt,name=login_disabled,json=loginDisabled,proto3" json:"login_disabled,omitempty"`
	// A list of the (neo)permission group Ids the agent belongs to
	PermissionGroupIds []string `protobuf:"bytes,9,rep,name=permission_group_ids,json=permissionGroupIds,proto3" json:"permission_group_ids,omitempty"`
	// Whether the user is an account owner
	AccountOwner bool `protobuf:"varint,11,opt,name=account_owner,json=accountOwner,proto3" json:"account_owner,omitempty"`
	// Whether the user is also an agent
	Agent bool `protobuf:"varint,12,opt,name=agent,proto3" json:"agent,omitempty"`
	// A list of the trust ids the user has been assigned.
	TrustIds []string `protobuf:"bytes,13,rep,name=trust_ids,json=trustIds,proto3" json:"trust_ids,omitempty"`
}

func (x *ListUsersResponse_UserDetails) Reset() {
	*x = ListUsersResponse_UserDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersResponse_UserDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersResponse_UserDetails) ProtoMessage() {}

func (x *ListUsersResponse_UserDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersResponse_UserDetails.ProtoReflect.Descriptor instead.
func (*ListUsersResponse_UserDetails) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ListUsersResponse_UserDetails) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListUsersResponse_UserDetails) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListUsersResponse_UserDetails) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ListUsersResponse_UserDetails) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ListUsersResponse_UserDetails) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ListUsersResponse_UserDetails) GetLoginDisabled() bool {
	if x != nil {
		return x.LoginDisabled
	}
	return false
}

func (x *ListUsersResponse_UserDetails) GetPermissionGroupIds() []string {
	if x != nil {
		return x.PermissionGroupIds
	}
	return nil
}

func (x *ListUsersResponse_UserDetails) GetAccountOwner() bool {
	if x != nil {
		return x.AccountOwner
	}
	return false
}

func (x *ListUsersResponse_UserDetails) GetAgent() bool {
	if x != nil {
		return x.Agent
	}
	return false
}

func (x *ListUsersResponse_UserDetails) GetTrustIds() []string {
	if x != nil {
		return x.TrustIds
	}
	return nil
}

// Object for ListUsersByOrgId to return a list of.
type ListUsersByOrgIdResponse_UserDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID of the user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The ID of the user's organization
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The name of the user's organization
	OrgName string `protobuf:"bytes,3,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	// The user's first name
	FirstName string `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The user's last name
	LastName string `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The user's username
	Username string `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	// Whether or not the user is disabled.
	LoginDisabled bool `protobuf:"varint,7,opt,name=login_disabled,json=loginDisabled,proto3" json:"login_disabled,omitempty"`
	// A list of the (neo)permission group Ids the agent belongs to
	PermissionGroupIds []string `protobuf:"bytes,8,rep,name=permission_group_ids,json=permissionGroupIds,proto3" json:"permission_group_ids,omitempty"`
	// Whether the user is an account owner
	AccountOwner bool `protobuf:"varint,10,opt,name=account_owner,json=accountOwner,proto3" json:"account_owner,omitempty"`
	// Whether the user is also an agent
	Agent bool `protobuf:"varint,11,opt,name=agent,proto3" json:"agent,omitempty"`
	// A list of the trust ids the user has been assigned.
	TrustIds []string `protobuf:"bytes,12,rep,name=trust_ids,json=trustIds,proto3" json:"trust_ids,omitempty"`
}

func (x *ListUsersByOrgIdResponse_UserDetails) Reset() {
	*x = ListUsersByOrgIdResponse_UserDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersByOrgIdResponse_UserDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersByOrgIdResponse_UserDetails) ProtoMessage() {}

func (x *ListUsersByOrgIdResponse_UserDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersByOrgIdResponse_UserDetails.ProtoReflect.Descriptor instead.
func (*ListUsersByOrgIdResponse_UserDetails) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{15, 0}
}

func (x *ListUsersByOrgIdResponse_UserDetails) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListUsersByOrgIdResponse_UserDetails) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListUsersByOrgIdResponse_UserDetails) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *ListUsersByOrgIdResponse_UserDetails) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ListUsersByOrgIdResponse_UserDetails) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ListUsersByOrgIdResponse_UserDetails) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ListUsersByOrgIdResponse_UserDetails) GetLoginDisabled() bool {
	if x != nil {
		return x.LoginDisabled
	}
	return false
}

func (x *ListUsersByOrgIdResponse_UserDetails) GetPermissionGroupIds() []string {
	if x != nil {
		return x.PermissionGroupIds
	}
	return nil
}

func (x *ListUsersByOrgIdResponse_UserDetails) GetAccountOwner() bool {
	if x != nil {
		return x.AccountOwner
	}
	return false
}

func (x *ListUsersByOrgIdResponse_UserDetails) GetAgent() bool {
	if x != nil {
		return x.Agent
	}
	return false
}

func (x *ListUsersByOrgIdResponse_UserDetails) GetTrustIds() []string {
	if x != nil {
		return x.TrustIds
	}
	return nil
}

// Object for ListUsersByRegion to return a list of.
type ListUsersByRegionResponse_UserDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID of the user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The ID of the user's organization
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The user's first name
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The user's last name
	LastName string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The user's username
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	// Whether or not the user is disabled.
	LoginDisabled bool `protobuf:"varint,7,opt,name=login_disabled,json=loginDisabled,proto3" json:"login_disabled,omitempty"`
	// A list of the (neo)permission group Ids the agent belongs to
	PermissionGroupIds []string `protobuf:"bytes,9,rep,name=permission_group_ids,json=permissionGroupIds,proto3" json:"permission_group_ids,omitempty"`
	// Whether the user is an account owner
	AccountOwner bool `protobuf:"varint,11,opt,name=account_owner,json=accountOwner,proto3" json:"account_owner,omitempty"`
	// Whether the user is also an agent
	Agent bool `protobuf:"varint,12,opt,name=agent,proto3" json:"agent,omitempty"`
	// A list of the trust ids the user has been assigned.
	TrustIds []string `protobuf:"bytes,13,rep,name=trust_ids,json=trustIds,proto3" json:"trust_ids,omitempty"`
}

func (x *ListUsersByRegionResponse_UserDetails) Reset() {
	*x = ListUsersByRegionResponse_UserDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersByRegionResponse_UserDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersByRegionResponse_UserDetails) ProtoMessage() {}

func (x *ListUsersByRegionResponse_UserDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersByRegionResponse_UserDetails.ProtoReflect.Descriptor instead.
func (*ListUsersByRegionResponse_UserDetails) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ListUsersByRegionResponse_UserDetails) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListUsersByRegionResponse_UserDetails) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListUsersByRegionResponse_UserDetails) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ListUsersByRegionResponse_UserDetails) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ListUsersByRegionResponse_UserDetails) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ListUsersByRegionResponse_UserDetails) GetLoginDisabled() bool {
	if x != nil {
		return x.LoginDisabled
	}
	return false
}

func (x *ListUsersByRegionResponse_UserDetails) GetPermissionGroupIds() []string {
	if x != nil {
		return x.PermissionGroupIds
	}
	return nil
}

func (x *ListUsersByRegionResponse_UserDetails) GetAccountOwner() bool {
	if x != nil {
		return x.AccountOwner
	}
	return false
}

func (x *ListUsersByRegionResponse_UserDetails) GetAgent() bool {
	if x != nil {
		return x.Agent
	}
	return false
}

func (x *ListUsersByRegionResponse_UserDetails) GetTrustIds() []string {
	if x != nil {
		return x.TrustIds
	}
	return nil
}

type GetUserSessionDataResponse_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The ID of the org the user belongs to.
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The Username of the user.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// The ID of the p3 permission group the user has.
	P3PermissionGroupId string `protobuf:"bytes,4,opt,name=p3_permission_group_id,json=p3PermissionGroupId,proto3" json:"p3_permission_group_id,omitempty"`
	// The User's partner agent id.
	PartnerAgentId string `protobuf:"bytes,8,opt,name=partner_agent_id,json=partnerAgentId,proto3" json:"partner_agent_id,omitempty"`
	// The user's regional sids. The key of the map is a region id.
	RegionSidMap map[string]*GetUserSessionDataResponse_User_RegionSids `protobuf:"bytes,10,rep,name=region_sid_map,json=regionSidMap,proto3" json:"region_sid_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// region_id of a the user's default region
	DefaultRegion string `protobuf:"bytes,11,opt,name=default_region,json=defaultRegion,proto3" json:"default_region,omitempty"`
	// payload
	ApiKey string `protobuf:"bytes,12,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// The User's email.
	Email string `protobuf:"bytes,13,opt,name=email,proto3" json:"email,omitempty"`
	// Whether or not the user is disabled.
	LoginDisabled bool `protobuf:"varint,14,opt,name=login_disabled,json=loginDisabled,proto3" json:"login_disabled,omitempty"`
	// login preferences
	CallerIds       []string `protobuf:"bytes,15,rep,name=caller_ids,json=callerIds,proto3" json:"caller_ids,omitempty"`
	LinkbackNumbers []string `protobuf:"bytes,16,rep,name=linkback_numbers,json=linkbackNumbers,proto3" json:"linkback_numbers,omitempty"`
	AuthUserId      string   `protobuf:"bytes,17,opt,name=auth_user_id,json=authUserId,proto3" json:"auth_user_id,omitempty"`
	EnableMfa       bool     `protobuf:"varint,18,opt,name=enable_mfa,json=enableMfa,proto3" json:"enable_mfa,omitempty"`
	// The user's first name.
	FirstName string `protobuf:"bytes,19,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The user's last name.
	LastName string `protobuf:"bytes,20,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The date/time the user was created.
	Created *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=created,proto3" json:"created,omitempty"`
	// The date/time the user was last updated.
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Whether or not the user must reset their password on next login.
	PasswordResetRequired bool `protobuf:"varint,23,opt,name=password_reset_required,json=passwordResetRequired,proto3" json:"password_reset_required,omitempty"`
	// connection id is the id of the auth connection that the
	// user is coming from if it is a delgated user. If the user
	// is not delgated this will be nil.
	ConnectionId *wrapperspb.StringValue `protobuf:"bytes,24,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// User TimeZone with wrapper for nullable timezone
	TimeZoneOverride *commons.TimeZoneWrapper `protobuf:"bytes,25,opt,name=time_zone_override,json=timeZoneOverride,proto3" json:"time_zone_override,omitempty"`
	// UserSettings
	// List of permission groups ids the user is a member of
	PermissionGroupIds []string `protobuf:"bytes,26,rep,name=permission_group_ids,json=permissionGroupIds,proto3" json:"permission_group_ids,omitempty"`
	// List of trust ids the user has been assigned.
	TrustIds []string `protobuf:"bytes,27,rep,name=trust_ids,json=trustIds,proto3" json:"trust_ids,omitempty"`
	// default_app for a user
	DefaultApplication commons.OperatorApplications `protobuf:"varint,28,opt,name=default_application,json=defaultApplication,proto3,enum=api.commons.OperatorApplications" json:"default_application,omitempty"`
	// User caller id
	UserCallerId string `protobuf:"bytes,29,opt,name=user_caller_id,json=userCallerId,proto3" json:"user_caller_id,omitempty"`
	// users assigned agent profile group
	AgentProfileGroupId string `protobuf:"bytes,30,opt,name=agent_profile_group_id,json=agentProfileGroupId,proto3" json:"agent_profile_group_id,omitempty"`
	// a bool signalling whether or not the user is also an agent
	Agent bool `protobuf:"varint,31,opt,name=agent,proto3" json:"agent,omitempty"`
	// a bool to determine whether or not user is account owner
	AccountOwner bool `protobuf:"varint,32,opt,name=account_owner,json=accountOwner,proto3" json:"account_owner,omitempty"`
}

func (x *GetUserSessionDataResponse_User) Reset() {
	*x = GetUserSessionDataResponse_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSessionDataResponse_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSessionDataResponse_User) ProtoMessage() {}

func (x *GetUserSessionDataResponse_User) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSessionDataResponse_User.ProtoReflect.Descriptor instead.
func (*GetUserSessionDataResponse_User) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{47, 0}
}

func (x *GetUserSessionDataResponse_User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserSessionDataResponse_User) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetUserSessionDataResponse_User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetUserSessionDataResponse_User) GetP3PermissionGroupId() string {
	if x != nil {
		return x.P3PermissionGroupId
	}
	return ""
}

func (x *GetUserSessionDataResponse_User) GetPartnerAgentId() string {
	if x != nil {
		return x.PartnerAgentId
	}
	return ""
}

func (x *GetUserSessionDataResponse_User) GetRegionSidMap() map[string]*GetUserSessionDataResponse_User_RegionSids {
	if x != nil {
		return x.RegionSidMap
	}
	return nil
}

func (x *GetUserSessionDataResponse_User) GetDefaultRegion() string {
	if x != nil {
		return x.DefaultRegion
	}
	return ""
}

func (x *GetUserSessionDataResponse_User) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *GetUserSessionDataResponse_User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetUserSessionDataResponse_User) GetLoginDisabled() bool {
	if x != nil {
		return x.LoginDisabled
	}
	return false
}

func (x *GetUserSessionDataResponse_User) GetCallerIds() []string {
	if x != nil {
		return x.CallerIds
	}
	return nil
}

func (x *GetUserSessionDataResponse_User) GetLinkbackNumbers() []string {
	if x != nil {
		return x.LinkbackNumbers
	}
	return nil
}

func (x *GetUserSessionDataResponse_User) GetAuthUserId() string {
	if x != nil {
		return x.AuthUserId
	}
	return ""
}

func (x *GetUserSessionDataResponse_User) GetEnableMfa() bool {
	if x != nil {
		return x.EnableMfa
	}
	return false
}

func (x *GetUserSessionDataResponse_User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *GetUserSessionDataResponse_User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *GetUserSessionDataResponse_User) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetUserSessionDataResponse_User) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *GetUserSessionDataResponse_User) GetPasswordResetRequired() bool {
	if x != nil {
		return x.PasswordResetRequired
	}
	return false
}

func (x *GetUserSessionDataResponse_User) GetConnectionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ConnectionId
	}
	return nil
}

func (x *GetUserSessionDataResponse_User) GetTimeZoneOverride() *commons.TimeZoneWrapper {
	if x != nil {
		return x.TimeZoneOverride
	}
	return nil
}

func (x *GetUserSessionDataResponse_User) GetPermissionGroupIds() []string {
	if x != nil {
		return x.PermissionGroupIds
	}
	return nil
}

func (x *GetUserSessionDataResponse_User) GetTrustIds() []string {
	if x != nil {
		return x.TrustIds
	}
	return nil
}

func (x *GetUserSessionDataResponse_User) GetDefaultApplication() commons.OperatorApplications {
	if x != nil {
		return x.DefaultApplication
	}
	return commons.OperatorApplications(0)
}

func (x *GetUserSessionDataResponse_User) GetUserCallerId() string {
	if x != nil {
		return x.UserCallerId
	}
	return ""
}

func (x *GetUserSessionDataResponse_User) GetAgentProfileGroupId() string {
	if x != nil {
		return x.AgentProfileGroupId
	}
	return ""
}

func (x *GetUserSessionDataResponse_User) GetAgent() bool {
	if x != nil {
		return x.Agent
	}
	return false
}

func (x *GetUserSessionDataResponse_User) GetAccountOwner() bool {
	if x != nil {
		return x.AccountOwner
	}
	return false
}

// The entity object used in the region_sid_map.
type GetUserSessionDataResponse_User_RegionSids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The login sid for the region.
	LoginSid int64 `protobuf:"varint,1,opt,name=login_sid,json=loginSid,proto3" json:"login_sid,omitempty"`
	// THe agent sid for the region.
	AgentSid int64 `protobuf:"varint,2,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	// THe client sid for the region.
	ClientSid int64 `protobuf:"varint,3,opt,name=client_sid,json=clientSid,proto3" json:"client_sid,omitempty"`
}

func (x *GetUserSessionDataResponse_User_RegionSids) Reset() {
	*x = GetUserSessionDataResponse_User_RegionSids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_org_user_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSessionDataResponse_User_RegionSids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSessionDataResponse_User_RegionSids) ProtoMessage() {}

func (x *GetUserSessionDataResponse_User_RegionSids) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_user_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSessionDataResponse_User_RegionSids.ProtoReflect.Descriptor instead.
func (*GetUserSessionDataResponse_User_RegionSids) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_user_proto_rawDescGZIP(), []int{47, 0, 0}
}

func (x *GetUserSessionDataResponse_User_RegionSids) GetLoginSid() int64 {
	if x != nil {
		return x.LoginSid
	}
	return 0
}

func (x *GetUserSessionDataResponse_User_RegionSids) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *GetUserSessionDataResponse_User_RegionSids) GetClientSid() int64 {
	if x != nil {
		return x.ClientSid
	}
	return 0
}

var File_api_v1alpha1_org_user_proto protoreflect.FileDescriptor

var file_api_v1alpha1_org_user_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x1a,
	0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x65, 0x72, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x05, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x33, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x16, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x64, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x10, 0x74, 0x69,
	0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x12,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x84, 0x07, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x0a, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x09, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x70, 0x33,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x50, 0x33, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x70, 0x33, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x65,
	0x0a, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x72, 0x75, 0x73, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x06, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x1a, 0x59, 0x0a, 0x09, 0x48, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x81, 0x01, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x29, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xb4, 0x0c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x09, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2e,
	0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x4d,
	0x0a, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x52, 0x0a,
	0x13, 0x70, 0x33, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x50, 0x33, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11,
	0x70, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x63, 0x0a, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b,
	0x62, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x52, 0x06, 0x74, 0x72, 0x75, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x36, 0x0a, 0x17, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x1a, 0x59, 0x0a, 0x09,
	0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x81, 0x01, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a,
	0x16, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x22, 0x93, 0x07, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x68, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x70, 0x33, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x50, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x70, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x6a, 0x0a, 0x13, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x72, 0x75, 0x73, 0x74, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x06,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x1a, 0x59, 0x0a, 0x09, 0x48,
	0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x81, 0x01, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a, 0x16,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x85, 0x0a, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0xa3, 0x09, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x5a, 0x0a, 0x0a, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x09, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x73, 0x0a,
	0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x59, 0x0a, 0x09, 0x48, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x81, 0x01, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb1, 0x03, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0xd4, 0x02, 0x0a, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x64,
	0x73, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22,
	0x7f, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0xda, 0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0xef, 0x02, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x64, 0x73, 0x4a,
	0x04, 0x08, 0x09, 0x10, 0x0a, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x9c, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a,
	0x0f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc1, 0x03, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0xd4, 0x02, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x75, 0x73, 0x74, 0x49,
	0x64, 0x73, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x22, 0x8e, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x10, 0x74, 0x69,
	0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x42,
	0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x70, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xed, 0x04, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4a,
	0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69,
	0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x33, 0x0a, 0x16, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x66, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5a, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x79,
	0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22,
	0x36, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x4c, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x34, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x6a, 0x0a, 0x26, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x3b, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0x49, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22,
	0x95, 0x03, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x70, 0x12,
	0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x13, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69,
	0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x49, 0x70, 0x73, 0x22, 0x36, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x45, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x54, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79,
	0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x23,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x3b, 0x0a, 0x20, 0x53, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x65, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x27,
	0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x53, 0x65, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xfb, 0x0d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x33, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x2e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0xbb, 0x0b, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x33, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6c,
	0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x66, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x66, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x52,
	0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x1a, 0x65, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x1a,
	0x7d, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0xb0,
	0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x42, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f, 0x72,
	0x67, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x4f, 0xaa, 0x02, 0x10, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0xca, 0x02, 0x10, 0x41, 0x70, 0x69,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x4f, 0x72, 0x67, 0xe2, 0x02, 0x1c,
	0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x4f, 0x72, 0x67,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x41,
	0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3a, 0x3a, 0x4f, 0x72,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1alpha1_org_user_proto_rawDescOnce sync.Once
	file_api_v1alpha1_org_user_proto_rawDescData = file_api_v1alpha1_org_user_proto_rawDesc
)

func file_api_v1alpha1_org_user_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_org_user_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_org_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1alpha1_org_user_proto_rawDescData)
	})
	return file_api_v1alpha1_org_user_proto_rawDescData
}

var file_api_v1alpha1_org_user_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_api_v1alpha1_org_user_proto_goTypes = []interface{}{
	(*CreateUserRequest)(nil),                                 // 0: api.v1alpha1.org.CreateUserRequest
	(*CreateUserResponse)(nil),                                // 1: api.v1alpha1.org.CreateUserResponse
	(*CreateDelegatedUserRequest)(nil),                        // 2: api.v1alpha1.org.CreateDelegatedUserRequest
	(*CreateDelegatedUserResponse)(nil),                       // 3: api.v1alpha1.org.CreateDelegatedUserResponse
	(*GetMyUserRequest)(nil),                                  // 4: api.v1alpha1.org.GetMyUserRequest
	(*GetMyUserResponse)(nil),                                 // 5: api.v1alpha1.org.GetMyUserResponse
	(*GetUserRequest)(nil),                                    // 6: api.v1alpha1.org.GetUserRequest
	(*GetUserResponse)(nil),                                   // 7: api.v1alpha1.org.GetUserResponse
	(*GetUserByOrgIdRequest)(nil),                             // 8: api.v1alpha1.org.GetUserByOrgIdRequest
	(*GetUserByOrgIdResponse)(nil),                            // 9: api.v1alpha1.org.GetUserByOrgIdResponse
	(*ListAgentsRequest)(nil),                                 // 10: api.v1alpha1.org.ListAgentsRequest
	(*ListAgentsResponse)(nil),                                // 11: api.v1alpha1.org.ListAgentsResponse
	(*ListUsersRequest)(nil),                                  // 12: api.v1alpha1.org.ListUsersRequest
	(*ListUsersResponse)(nil),                                 // 13: api.v1alpha1.org.ListUsersResponse
	(*ListUsersByOrgIdRequest)(nil),                           // 14: api.v1alpha1.org.ListUsersByOrgIdRequest
	(*ListUsersByOrgIdResponse)(nil),                          // 15: api.v1alpha1.org.ListUsersByOrgIdResponse
	(*ListUsersByRegionRequest)(nil),                          // 16: api.v1alpha1.org.ListUsersByRegionRequest
	(*ListUsersByRegionResponse)(nil),                         // 17: api.v1alpha1.org.ListUsersByRegionResponse
	(*UpdateMyUserRequest)(nil),                               // 18: api.v1alpha1.org.UpdateMyUserRequest
	(*UpdateMyUserResponse)(nil),                              // 19: api.v1alpha1.org.UpdateMyUserResponse
	(*UpdateUserRequest)(nil),                                 // 20: api.v1alpha1.org.UpdateUserRequest
	(*UpdateUserResponse)(nil),                                // 21: api.v1alpha1.org.UpdateUserResponse
	(*UpdateUserLabelsRequest)(nil),                           // 22: api.v1alpha1.org.UpdateUserLabelsRequest
	(*UpdateUserLabelsResponse)(nil),                          // 23: api.v1alpha1.org.UpdateUserLabelsResponse
	(*UpdateUserCallerIdRequest)(nil),                         // 24: api.v1alpha1.org.UpdateUserCallerIdRequest
	(*UpdateUserCallerIdResponse)(nil),                        // 25: api.v1alpha1.org.UpdateUserCallerIdResponse
	(*UpdateUserDisabledRequest)(nil),                         // 26: api.v1alpha1.org.UpdateUserDisabledRequest
	(*UpdateUserDisabledResponse)(nil),                        // 27: api.v1alpha1.org.UpdateUserDisabledResponse
	(*UpdateUserDisabledByOrgIdRequest)(nil),                  // 28: api.v1alpha1.org.UpdateUserDisabledByOrgIdRequest
	(*UpdateUserDisabledByOrgIdResponse)(nil),                 // 29: api.v1alpha1.org.UpdateUserDisabledByOrgIdResponse
	(*GetMyUserPasswordResetLinkRequest)(nil),                 // 30: api.v1alpha1.org.GetMyUserPasswordResetLinkRequest
	(*GetMyUserPasswordResetLinkResponse)(nil),                // 31: api.v1alpha1.org.GetMyUserPasswordResetLinkResponse
	(*GetUserPasswordResetLinkRequest)(nil),                   // 32: api.v1alpha1.org.GetUserPasswordResetLinkRequest
	(*GetUserPasswordResetLinkResponse)(nil),                  // 33: api.v1alpha1.org.GetUserPasswordResetLinkResponse
	(*GetUserPasswordResetLinkByOrgIdRequest)(nil),            // 34: api.v1alpha1.org.GetUserPasswordResetLinkByOrgIdRequest
	(*GetUserPasswordResetLinkByOrgIdResponse)(nil),           // 35: api.v1alpha1.org.GetUserPasswordResetLinkByOrgIdResponse
	(*GetUserLoginInfoRequest)(nil),                           // 36: api.v1alpha1.org.GetUserLoginInfoRequest
	(*GetUserLoginInfoResponse)(nil),                          // 37: api.v1alpha1.org.GetUserLoginInfoResponse
	(*GetUserEmailVerifiedRequest)(nil),                       // 38: api.v1alpha1.org.GetUserEmailVerifiedRequest
	(*GetUserEmailVerifiedResponse)(nil),                      // 39: api.v1alpha1.org.GetUserEmailVerifiedResponse
	(*GetUserEmailVerifiedByOrgIdRequest)(nil),                // 40: api.v1alpha1.org.GetUserEmailVerifiedByOrgIdRequest
	(*GetUserEmailVerifiedByOrgIdResponse)(nil),               // 41: api.v1alpha1.org.GetUserEmailVerifiedByOrgIdResponse
	(*SendUserEmailVerificationRequest)(nil),                  // 42: api.v1alpha1.org.SendUserEmailVerificationRequest
	(*SendUserEmailVerificationResponse)(nil),                 // 43: api.v1alpha1.org.SendUserEmailVerificationResponse
	(*SendUserEmailVerificationByOrgIdRequest)(nil),           // 44: api.v1alpha1.org.SendUserEmailVerificationByOrgIdRequest
	(*SendUserEmailVerificationByOrgIdResponse)(nil),          // 45: api.v1alpha1.org.SendUserEmailVerificationByOrgIdResponse
	(*GetUserSessionDataRequest)(nil),                         // 46: api.v1alpha1.org.GetUserSessionDataRequest
	(*GetUserSessionDataResponse)(nil),                        // 47: api.v1alpha1.org.GetUserSessionDataResponse
	(*GetMyUserResponse_HuntGroup)(nil),                       // 48: api.v1alpha1.org.GetMyUserResponse.HuntGroup
	(*GetMyUserResponse_AgentProfileGroup)(nil),               // 49: api.v1alpha1.org.GetMyUserResponse.AgentProfileGroup
	(*GetUserResponse_HuntGroup)(nil),                         // 50: api.v1alpha1.org.GetUserResponse.HuntGroup
	(*GetUserResponse_AgentProfileGroup)(nil),                 // 51: api.v1alpha1.org.GetUserResponse.AgentProfileGroup
	(*GetUserByOrgIdResponse_HuntGroup)(nil),                  // 52: api.v1alpha1.org.GetUserByOrgIdResponse.HuntGroup
	(*GetUserByOrgIdResponse_AgentProfileGroup)(nil),          // 53: api.v1alpha1.org.GetUserByOrgIdResponse.AgentProfileGroup
	(*ListAgentsResponse_AgentDetails)(nil),                   // 54: api.v1alpha1.org.ListAgentsResponse.AgentDetails
	(*ListAgentsResponse_AgentDetails_HuntGroup)(nil),         // 55: api.v1alpha1.org.ListAgentsResponse.AgentDetails.HuntGroup
	(*ListAgentsResponse_AgentDetails_AgentProfileGroup)(nil), // 56: api.v1alpha1.org.ListAgentsResponse.AgentDetails.AgentProfileGroup
	(*ListUsersResponse_UserDetails)(nil),                     // 57: api.v1alpha1.org.ListUsersResponse.UserDetails
	(*ListUsersByOrgIdResponse_UserDetails)(nil),              // 58: api.v1alpha1.org.ListUsersByOrgIdResponse.UserDetails
	(*ListUsersByRegionResponse_UserDetails)(nil),             // 59: api.v1alpha1.org.ListUsersByRegionResponse.UserDetails
	(*GetUserSessionDataResponse_User)(nil),                   // 60: api.v1alpha1.org.GetUserSessionDataResponse.User
	(*GetUserSessionDataResponse_User_RegionSids)(nil),        // 61: api.v1alpha1.org.GetUserSessionDataResponse.User.RegionSids
	nil,                                  // 62: api.v1alpha1.org.GetUserSessionDataResponse.User.RegionSidMapEntry
	(commons.OperatorApplications)(0),    // 63: api.commons.OperatorApplications
	(*commons.TimeZoneWrapper)(nil),      // 64: api.commons.TimeZoneWrapper
	(*org.Label)(nil),                    // 65: api.commons.org.Label
	(*org.Skill)(nil),                    // 66: api.commons.org.Skill
	(*org.PermissionGroup)(nil),          // 67: api.commons.org.PermissionGroup
	(*org.P3PermissionGroup)(nil),        // 68: api.commons.org.P3PermissionGroup
	(*org.Trust)(nil),                    // 69: api.commons.org.Trust
	(*timestamppb.Timestamp)(nil),        // 70: google.protobuf.Timestamp
	(commons.UserArchivedStateFilter)(0), // 71: api.commons.UserArchivedStateFilter
	(commons.Permission)(0),              // 72: api.commons.Permission
	(*wrapperspb.StringValue)(nil),       // 73: google.protobuf.StringValue
}
var file_api_v1alpha1_org_user_proto_depIdxs = []int32{
	63, // 0: api.v1alpha1.org.CreateUserRequest.default_app:type_name -> api.commons.OperatorApplications
	64, // 1: api.v1alpha1.org.CreateUserRequest.time_zone_override:type_name -> api.commons.TimeZoneWrapper
	48, // 2: api.v1alpha1.org.GetMyUserResponse.hunt_group:type_name -> api.v1alpha1.org.GetMyUserResponse.HuntGroup
	65, // 3: api.v1alpha1.org.GetMyUserResponse.labels:type_name -> api.commons.org.Label
	66, // 4: api.v1alpha1.org.GetMyUserResponse.skills:type_name -> api.commons.org.Skill
	67, // 5: api.v1alpha1.org.GetMyUserResponse.permission_groups:type_name -> api.commons.org.PermissionGroup
	68, // 6: api.v1alpha1.org.GetMyUserResponse.p3_permission_group:type_name -> api.commons.org.P3PermissionGroup
	49, // 7: api.v1alpha1.org.GetMyUserResponse.agent_profile_group:type_name -> api.v1alpha1.org.GetMyUserResponse.AgentProfileGroup
	69, // 8: api.v1alpha1.org.GetMyUserResponse.trusts:type_name -> api.commons.org.Trust
	64, // 9: api.v1alpha1.org.GetUserResponse.time_zone_override:type_name -> api.commons.TimeZoneWrapper
	50, // 10: api.v1alpha1.org.GetUserResponse.hunt_group:type_name -> api.v1alpha1.org.GetUserResponse.HuntGroup
	65, // 11: api.v1alpha1.org.GetUserResponse.labels:type_name -> api.commons.org.Label
	66, // 12: api.v1alpha1.org.GetUserResponse.skills:type_name -> api.commons.org.Skill
	67, // 13: api.v1alpha1.org.GetUserResponse.permission_groups:type_name -> api.commons.org.PermissionGroup
	68, // 14: api.v1alpha1.org.GetUserResponse.p3_permission_group:type_name -> api.commons.org.P3PermissionGroup
	51, // 15: api.v1alpha1.org.GetUserResponse.agent_profile_group:type_name -> api.v1alpha1.org.GetUserResponse.AgentProfileGroup
	63, // 16: api.v1alpha1.org.GetUserResponse.default_app:type_name -> api.commons.OperatorApplications
	69, // 17: api.v1alpha1.org.GetUserResponse.trusts:type_name -> api.commons.org.Trust
	70, // 18: api.v1alpha1.org.GetUserResponse.created_at:type_name -> google.protobuf.Timestamp
	70, // 19: api.v1alpha1.org.GetUserResponse.last_updated:type_name -> google.protobuf.Timestamp
	52, // 20: api.v1alpha1.org.GetUserByOrgIdResponse.hunt_group:type_name -> api.v1alpha1.org.GetUserByOrgIdResponse.HuntGroup
	65, // 21: api.v1alpha1.org.GetUserByOrgIdResponse.labels:type_name -> api.commons.org.Label
	66, // 22: api.v1alpha1.org.GetUserByOrgIdResponse.skills:type_name -> api.commons.org.Skill
	67, // 23: api.v1alpha1.org.GetUserByOrgIdResponse.permission_groups:type_name -> api.commons.org.PermissionGroup
	68, // 24: api.v1alpha1.org.GetUserByOrgIdResponse.p3_permission_group:type_name -> api.commons.org.P3PermissionGroup
	53, // 25: api.v1alpha1.org.GetUserByOrgIdResponse.agent_profile_group:type_name -> api.v1alpha1.org.GetUserByOrgIdResponse.AgentProfileGroup
	69, // 26: api.v1alpha1.org.GetUserByOrgIdResponse.trusts:type_name -> api.commons.org.Trust
	54, // 27: api.v1alpha1.org.ListAgentsResponse.agents:type_name -> api.v1alpha1.org.ListAgentsResponse.AgentDetails
	57, // 28: api.v1alpha1.org.ListUsersResponse.users:type_name -> api.v1alpha1.org.ListUsersResponse.UserDetails
	71, // 29: api.v1alpha1.org.ListUsersByOrgIdRequest.archived_filter:type_name -> api.commons.UserArchivedStateFilter
	58, // 30: api.v1alpha1.org.ListUsersByOrgIdResponse.users:type_name -> api.v1alpha1.org.ListUsersByOrgIdResponse.UserDetails
	71, // 31: api.v1alpha1.org.ListUsersByRegionRequest.archived_filter:type_name -> api.commons.UserArchivedStateFilter
	59, // 32: api.v1alpha1.org.ListUsersByRegionResponse.users:type_name -> api.v1alpha1.org.ListUsersByRegionResponse.UserDetails
	64, // 33: api.v1alpha1.org.UpdateMyUserRequest.time_zone_override:type_name -> api.commons.TimeZoneWrapper
	63, // 34: api.v1alpha1.org.UpdateMyUserRequest.default_app:type_name -> api.commons.OperatorApplications
	64, // 35: api.v1alpha1.org.UpdateUserRequest.time_zone_override:type_name -> api.commons.TimeZoneWrapper
	63, // 36: api.v1alpha1.org.UpdateUserRequest.default_app:type_name -> api.commons.OperatorApplications
	70, // 37: api.v1alpha1.org.GetUserLoginInfoResponse.last_login:type_name -> google.protobuf.Timestamp
	70, // 38: api.v1alpha1.org.GetUserLoginInfoResponse.last_password_reset:type_name -> google.protobuf.Timestamp
	70, // 39: api.v1alpha1.org.GetUserLoginInfoResponse.created_at:type_name -> google.protobuf.Timestamp
	70, // 40: api.v1alpha1.org.GetUserLoginInfoResponse.updated_at:type_name -> google.protobuf.Timestamp
	60, // 41: api.v1alpha1.org.GetUserSessionDataResponse.user:type_name -> api.v1alpha1.org.GetUserSessionDataResponse.User
	72, // 42: api.v1alpha1.org.GetUserSessionDataResponse.p3_permissions:type_name -> api.commons.Permission
	67, // 43: api.v1alpha1.org.GetUserSessionDataResponse.permission_groups:type_name -> api.commons.org.PermissionGroup
	65, // 44: api.v1alpha1.org.GetUserSessionDataResponse.labels:type_name -> api.commons.org.Label
	66, // 45: api.v1alpha1.org.ListAgentsResponse.AgentDetails.skills:type_name -> api.commons.org.Skill
	55, // 46: api.v1alpha1.org.ListAgentsResponse.AgentDetails.hunt_group:type_name -> api.v1alpha1.org.ListAgentsResponse.AgentDetails.HuntGroup
	67, // 47: api.v1alpha1.org.ListAgentsResponse.AgentDetails.permission_groups:type_name -> api.commons.org.PermissionGroup
	70, // 48: api.v1alpha1.org.ListAgentsResponse.AgentDetails.created:type_name -> google.protobuf.Timestamp
	70, // 49: api.v1alpha1.org.ListAgentsResponse.AgentDetails.last_updated:type_name -> google.protobuf.Timestamp
	56, // 50: api.v1alpha1.org.ListAgentsResponse.AgentDetails.agent_profile_group:type_name -> api.v1alpha1.org.ListAgentsResponse.AgentDetails.AgentProfileGroup
	64, // 51: api.v1alpha1.org.ListAgentsResponse.AgentDetails.time_zone_override:type_name -> api.commons.TimeZoneWrapper
	62, // 52: api.v1alpha1.org.GetUserSessionDataResponse.User.region_sid_map:type_name -> api.v1alpha1.org.GetUserSessionDataResponse.User.RegionSidMapEntry
	70, // 53: api.v1alpha1.org.GetUserSessionDataResponse.User.created:type_name -> google.protobuf.Timestamp
	70, // 54: api.v1alpha1.org.GetUserSessionDataResponse.User.last_updated:type_name -> google.protobuf.Timestamp
	73, // 55: api.v1alpha1.org.GetUserSessionDataResponse.User.connection_id:type_name -> google.protobuf.StringValue
	64, // 56: api.v1alpha1.org.GetUserSessionDataResponse.User.time_zone_override:type_name -> api.commons.TimeZoneWrapper
	63, // 57: api.v1alpha1.org.GetUserSessionDataResponse.User.default_application:type_name -> api.commons.OperatorApplications
	61, // 58: api.v1alpha1.org.GetUserSessionDataResponse.User.RegionSidMapEntry.value:type_name -> api.v1alpha1.org.GetUserSessionDataResponse.User.RegionSids
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_org_user_proto_init() }
func file_api_v1alpha1_org_user_proto_init() {
	if File_api_v1alpha1_org_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1alpha1_org_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDelegatedUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDelegatedUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByOrgIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByOrgIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersByOrgIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersByOrgIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersByRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersByRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMyUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMyUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserCallerIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserCallerIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDisabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDisabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDisabledByOrgIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserDisabledByOrgIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyUserPasswordResetLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyUserPasswordResetLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPasswordResetLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPasswordResetLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPasswordResetLinkByOrgIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPasswordResetLinkByOrgIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserLoginInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserLoginInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserEmailVerifiedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserEmailVerifiedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserEmailVerifiedByOrgIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserEmailVerifiedByOrgIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendUserEmailVerificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendUserEmailVerificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendUserEmailVerificationByOrgIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendUserEmailVerificationByOrgIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSessionDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSessionDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyUserResponse_HuntGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyUserResponse_AgentProfileGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserResponse_HuntGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserResponse_AgentProfileGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByOrgIdResponse_HuntGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByOrgIdResponse_AgentProfileGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsResponse_AgentDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsResponse_AgentDetails_HuntGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsResponse_AgentDetails_AgentProfileGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersResponse_UserDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersByOrgIdResponse_UserDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersByRegionResponse_UserDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSessionDataResponse_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_org_user_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSessionDataResponse_User_RegionSids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1alpha1_org_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1alpha1_org_user_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_org_user_proto_depIdxs,
		MessageInfos:      file_api_v1alpha1_org_user_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_org_user_proto = out.File
	file_api_v1alpha1_org_user_proto_rawDesc = nil
	file_api_v1alpha1_org_user_proto_goTypes = nil
	file_api_v1alpha1_org_user_proto_depIdxs = nil
}
