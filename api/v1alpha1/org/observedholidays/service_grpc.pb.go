// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/org/observedholidays/service.proto

package observedholidays

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ObservedHolidaysService_ListObservedHolidays_FullMethodName       = "/api.v1alpha1.org.observedholidays.ObservedHolidaysService/ListObservedHolidays"
	ObservedHolidaysService_GetObservedHolidays_FullMethodName        = "/api.v1alpha1.org.observedholidays.ObservedHolidaysService/GetObservedHolidays"
	ObservedHolidaysService_SetObservedHolidays_FullMethodName        = "/api.v1alpha1.org.observedholidays.ObservedHolidaysService/SetObservedHolidays"
	ObservedHolidaysService_AddToObservedHolidays_FullMethodName      = "/api.v1alpha1.org.observedholidays.ObservedHolidaysService/AddToObservedHolidays"
	ObservedHolidaysService_RemoveObservedHolidays_FullMethodName     = "/api.v1alpha1.org.observedholidays.ObservedHolidaysService/RemoveObservedHolidays"
	ObservedHolidaysService_UpdateObservedHolidaysInfo_FullMethodName = "/api.v1alpha1.org.observedholidays.ObservedHolidaysService/UpdateObservedHolidaysInfo"
	ObservedHolidaysService_DeleteObservedHolidays_FullMethodName     = "/api.v1alpha1.org.observedholidays.ObservedHolidaysService/DeleteObservedHolidays"
	ObservedHolidaysService_EvaluateObservedHolidays_FullMethodName   = "/api.v1alpha1.org.observedholidays.ObservedHolidaysService/EvaluateObservedHolidays"
)

// ObservedHolidaysServiceClient is the client API for ObservedHolidaysService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObservedHolidaysServiceClient interface {
	// ListObservedHolidays returns all ObservedHolidays for an Org.
	ListObservedHolidays(ctx context.Context, in *ListObservedHolidaysRequest, opts ...grpc.CallOption) (*ListObservedHolidaysResponse, error)
	// GetObservedHolidays returns the ObservedHolidays for the ID.
	GetObservedHolidays(ctx context.Context, in *GetObservedHolidaysRequest, opts ...grpc.CallOption) (*GetObservedHolidaysResponse, error)
	// SetObservedHolidays creates a new ObservedHolidays for an Org.
	SetObservedHolidays(ctx context.Context, in *SetObservedHolidaysRequest, opts ...grpc.CallOption) (*SetObservedHolidaysResponse, error)
	// AddToObservedHolidays adds a new ObservedHolidays for an Org.
	AddToObservedHolidays(ctx context.Context, in *AddToObservedHolidaysRequest, opts ...grpc.CallOption) (*AddToObservedHolidaysResponse, error)
	// RemoveObservedHolidays removes an existing ObservedHolidays from an Org.
	RemoveObservedHolidays(ctx context.Context, in *RemoveFromObservedHolidaysRequest, opts ...grpc.CallOption) (*RemoveFromObservedHolidaysResponse, error)
	// UpdateObservedHolidaysInfo updates the general info for a specified ObservedHolidays.
	UpdateObservedHolidaysInfo(ctx context.Context, in *UpdateObservedHolidaysInfoRequest, opts ...grpc.CallOption) (*UpdateObservedHolidaysInfoResponse, error)
	// DeleteObservedHolidays deletes an existing ObservedHolidays.
	DeleteObservedHolidays(ctx context.Context, in *DeleteObservedHolidaysRequest, opts ...grpc.CallOption) (*DeleteObservedHolidaysResponse, error)
	// EvaluateObservedHolidays evaluates the ObservedHolidays.
	EvaluateObservedHolidays(ctx context.Context, in *EvaluateObservedHolidaysRequest, opts ...grpc.CallOption) (*EvaluateObservedHolidaysResponse, error)
}

type observedHolidaysServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObservedHolidaysServiceClient(cc grpc.ClientConnInterface) ObservedHolidaysServiceClient {
	return &observedHolidaysServiceClient{cc}
}

func (c *observedHolidaysServiceClient) ListObservedHolidays(ctx context.Context, in *ListObservedHolidaysRequest, opts ...grpc.CallOption) (*ListObservedHolidaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListObservedHolidaysResponse)
	err := c.cc.Invoke(ctx, ObservedHolidaysService_ListObservedHolidays_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observedHolidaysServiceClient) GetObservedHolidays(ctx context.Context, in *GetObservedHolidaysRequest, opts ...grpc.CallOption) (*GetObservedHolidaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObservedHolidaysResponse)
	err := c.cc.Invoke(ctx, ObservedHolidaysService_GetObservedHolidays_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observedHolidaysServiceClient) SetObservedHolidays(ctx context.Context, in *SetObservedHolidaysRequest, opts ...grpc.CallOption) (*SetObservedHolidaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetObservedHolidaysResponse)
	err := c.cc.Invoke(ctx, ObservedHolidaysService_SetObservedHolidays_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observedHolidaysServiceClient) AddToObservedHolidays(ctx context.Context, in *AddToObservedHolidaysRequest, opts ...grpc.CallOption) (*AddToObservedHolidaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToObservedHolidaysResponse)
	err := c.cc.Invoke(ctx, ObservedHolidaysService_AddToObservedHolidays_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observedHolidaysServiceClient) RemoveObservedHolidays(ctx context.Context, in *RemoveFromObservedHolidaysRequest, opts ...grpc.CallOption) (*RemoveFromObservedHolidaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromObservedHolidaysResponse)
	err := c.cc.Invoke(ctx, ObservedHolidaysService_RemoveObservedHolidays_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observedHolidaysServiceClient) UpdateObservedHolidaysInfo(ctx context.Context, in *UpdateObservedHolidaysInfoRequest, opts ...grpc.CallOption) (*UpdateObservedHolidaysInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateObservedHolidaysInfoResponse)
	err := c.cc.Invoke(ctx, ObservedHolidaysService_UpdateObservedHolidaysInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observedHolidaysServiceClient) DeleteObservedHolidays(ctx context.Context, in *DeleteObservedHolidaysRequest, opts ...grpc.CallOption) (*DeleteObservedHolidaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteObservedHolidaysResponse)
	err := c.cc.Invoke(ctx, ObservedHolidaysService_DeleteObservedHolidays_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observedHolidaysServiceClient) EvaluateObservedHolidays(ctx context.Context, in *EvaluateObservedHolidaysRequest, opts ...grpc.CallOption) (*EvaluateObservedHolidaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvaluateObservedHolidaysResponse)
	err := c.cc.Invoke(ctx, ObservedHolidaysService_EvaluateObservedHolidays_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObservedHolidaysServiceServer is the server API for ObservedHolidaysService service.
// All implementations must embed UnimplementedObservedHolidaysServiceServer
// for forward compatibility.
type ObservedHolidaysServiceServer interface {
	// ListObservedHolidays returns all ObservedHolidays for an Org.
	ListObservedHolidays(context.Context, *ListObservedHolidaysRequest) (*ListObservedHolidaysResponse, error)
	// GetObservedHolidays returns the ObservedHolidays for the ID.
	GetObservedHolidays(context.Context, *GetObservedHolidaysRequest) (*GetObservedHolidaysResponse, error)
	// SetObservedHolidays creates a new ObservedHolidays for an Org.
	SetObservedHolidays(context.Context, *SetObservedHolidaysRequest) (*SetObservedHolidaysResponse, error)
	// AddToObservedHolidays adds a new ObservedHolidays for an Org.
	AddToObservedHolidays(context.Context, *AddToObservedHolidaysRequest) (*AddToObservedHolidaysResponse, error)
	// RemoveObservedHolidays removes an existing ObservedHolidays from an Org.
	RemoveObservedHolidays(context.Context, *RemoveFromObservedHolidaysRequest) (*RemoveFromObservedHolidaysResponse, error)
	// UpdateObservedHolidaysInfo updates the general info for a specified ObservedHolidays.
	UpdateObservedHolidaysInfo(context.Context, *UpdateObservedHolidaysInfoRequest) (*UpdateObservedHolidaysInfoResponse, error)
	// DeleteObservedHolidays deletes an existing ObservedHolidays.
	DeleteObservedHolidays(context.Context, *DeleteObservedHolidaysRequest) (*DeleteObservedHolidaysResponse, error)
	// EvaluateObservedHolidays evaluates the ObservedHolidays.
	EvaluateObservedHolidays(context.Context, *EvaluateObservedHolidaysRequest) (*EvaluateObservedHolidaysResponse, error)
	mustEmbedUnimplementedObservedHolidaysServiceServer()
}

// UnimplementedObservedHolidaysServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedObservedHolidaysServiceServer struct{}

func (UnimplementedObservedHolidaysServiceServer) ListObservedHolidays(context.Context, *ListObservedHolidaysRequest) (*ListObservedHolidaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObservedHolidays not implemented")
}
func (UnimplementedObservedHolidaysServiceServer) GetObservedHolidays(context.Context, *GetObservedHolidaysRequest) (*GetObservedHolidaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObservedHolidays not implemented")
}
func (UnimplementedObservedHolidaysServiceServer) SetObservedHolidays(context.Context, *SetObservedHolidaysRequest) (*SetObservedHolidaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetObservedHolidays not implemented")
}
func (UnimplementedObservedHolidaysServiceServer) AddToObservedHolidays(context.Context, *AddToObservedHolidaysRequest) (*AddToObservedHolidaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToObservedHolidays not implemented")
}
func (UnimplementedObservedHolidaysServiceServer) RemoveObservedHolidays(context.Context, *RemoveFromObservedHolidaysRequest) (*RemoveFromObservedHolidaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveObservedHolidays not implemented")
}
func (UnimplementedObservedHolidaysServiceServer) UpdateObservedHolidaysInfo(context.Context, *UpdateObservedHolidaysInfoRequest) (*UpdateObservedHolidaysInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObservedHolidaysInfo not implemented")
}
func (UnimplementedObservedHolidaysServiceServer) DeleteObservedHolidays(context.Context, *DeleteObservedHolidaysRequest) (*DeleteObservedHolidaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObservedHolidays not implemented")
}
func (UnimplementedObservedHolidaysServiceServer) EvaluateObservedHolidays(context.Context, *EvaluateObservedHolidaysRequest) (*EvaluateObservedHolidaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateObservedHolidays not implemented")
}
func (UnimplementedObservedHolidaysServiceServer) mustEmbedUnimplementedObservedHolidaysServiceServer() {
}
func (UnimplementedObservedHolidaysServiceServer) testEmbeddedByValue() {}

// UnsafeObservedHolidaysServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObservedHolidaysServiceServer will
// result in compilation errors.
type UnsafeObservedHolidaysServiceServer interface {
	mustEmbedUnimplementedObservedHolidaysServiceServer()
}

func RegisterObservedHolidaysServiceServer(s grpc.ServiceRegistrar, srv ObservedHolidaysServiceServer) {
	// If the following call pancis, it indicates UnimplementedObservedHolidaysServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ObservedHolidaysService_ServiceDesc, srv)
}

func _ObservedHolidaysService_ListObservedHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObservedHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservedHolidaysServiceServer).ListObservedHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservedHolidaysService_ListObservedHolidays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservedHolidaysServiceServer).ListObservedHolidays(ctx, req.(*ListObservedHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObservedHolidaysService_GetObservedHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObservedHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservedHolidaysServiceServer).GetObservedHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservedHolidaysService_GetObservedHolidays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservedHolidaysServiceServer).GetObservedHolidays(ctx, req.(*GetObservedHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObservedHolidaysService_SetObservedHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetObservedHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservedHolidaysServiceServer).SetObservedHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservedHolidaysService_SetObservedHolidays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservedHolidaysServiceServer).SetObservedHolidays(ctx, req.(*SetObservedHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObservedHolidaysService_AddToObservedHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToObservedHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservedHolidaysServiceServer).AddToObservedHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservedHolidaysService_AddToObservedHolidays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservedHolidaysServiceServer).AddToObservedHolidays(ctx, req.(*AddToObservedHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObservedHolidaysService_RemoveObservedHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromObservedHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservedHolidaysServiceServer).RemoveObservedHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservedHolidaysService_RemoveObservedHolidays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservedHolidaysServiceServer).RemoveObservedHolidays(ctx, req.(*RemoveFromObservedHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObservedHolidaysService_UpdateObservedHolidaysInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObservedHolidaysInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservedHolidaysServiceServer).UpdateObservedHolidaysInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservedHolidaysService_UpdateObservedHolidaysInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservedHolidaysServiceServer).UpdateObservedHolidaysInfo(ctx, req.(*UpdateObservedHolidaysInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObservedHolidaysService_DeleteObservedHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObservedHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservedHolidaysServiceServer).DeleteObservedHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservedHolidaysService_DeleteObservedHolidays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservedHolidaysServiceServer).DeleteObservedHolidays(ctx, req.(*DeleteObservedHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObservedHolidaysService_EvaluateObservedHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateObservedHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObservedHolidaysServiceServer).EvaluateObservedHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObservedHolidaysService_EvaluateObservedHolidays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObservedHolidaysServiceServer).EvaluateObservedHolidays(ctx, req.(*EvaluateObservedHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObservedHolidaysService_ServiceDesc is the grpc.ServiceDesc for ObservedHolidaysService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObservedHolidaysService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.org.observedholidays.ObservedHolidaysService",
	HandlerType: (*ObservedHolidaysServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListObservedHolidays",
			Handler:    _ObservedHolidaysService_ListObservedHolidays_Handler,
		},
		{
			MethodName: "GetObservedHolidays",
			Handler:    _ObservedHolidaysService_GetObservedHolidays_Handler,
		},
		{
			MethodName: "SetObservedHolidays",
			Handler:    _ObservedHolidaysService_SetObservedHolidays_Handler,
		},
		{
			MethodName: "AddToObservedHolidays",
			Handler:    _ObservedHolidaysService_AddToObservedHolidays_Handler,
		},
		{
			MethodName: "RemoveObservedHolidays",
			Handler:    _ObservedHolidaysService_RemoveObservedHolidays_Handler,
		},
		{
			MethodName: "UpdateObservedHolidaysInfo",
			Handler:    _ObservedHolidaysService_UpdateObservedHolidaysInfo_Handler,
		},
		{
			MethodName: "DeleteObservedHolidays",
			Handler:    _ObservedHolidaysService_DeleteObservedHolidays_Handler,
		},
		{
			MethodName: "EvaluateObservedHolidays",
			Handler:    _ObservedHolidaysService_EvaluateObservedHolidays_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/org/observedholidays/service.proto",
}
