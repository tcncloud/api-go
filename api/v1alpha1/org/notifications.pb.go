// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: api/v1alpha1/org/notifications.proto

package org

import (
	commons "github.com/tcncloud/api-go/api/commons"
	audit "github.com/tcncloud/api-go/api/commons/audit"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// UserSubscription contains the info to send a notification to a user.
// It contains a user, the event type, a delivery method, and custom app settings.
type UserSubscription struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required.
	// The unique id given to the setting. Used for updating and deleting.
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// Required.
	//
	// Used by matrix-notify.
	// It receives an event on a event type and
	// uses it to look up the targets for that event type.
	// e.g. api.commons.audit.EventType_DUMMY_EVENT_DID_SOMETHING
	EventType audit.EventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=api.commons.audit.EventType" json:"event_type,omitempty"`
	// Required.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Required.
	//
	// Types that are valid to be assigned to DeliverMethod:
	//
	//	*UserSubscription_Room303_
	//	*UserSubscription_Delivery_
	DeliverMethod isUserSubscription_DeliverMethod `protobuf_oneof:"deliver_method"`
	// Optional.
	// If set, user only notified for events that match ALL filters.
	Filters []*commons.FieldValueFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. Updates must specify current version or be rejected.
	Version       int64 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserSubscription) Reset() {
	*x = UserSubscription{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSubscription) ProtoMessage() {}

func (x *UserSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSubscription.ProtoReflect.Descriptor instead.
func (*UserSubscription) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{0}
}

func (x *UserSubscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *UserSubscription) GetEventType() audit.EventType {
	if x != nil {
		return x.EventType
	}
	return audit.EventType(0)
}

func (x *UserSubscription) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserSubscription) GetDeliverMethod() isUserSubscription_DeliverMethod {
	if x != nil {
		return x.DeliverMethod
	}
	return nil
}

func (x *UserSubscription) GetRoom303() *UserSubscription_Room303 {
	if x != nil {
		if x, ok := x.DeliverMethod.(*UserSubscription_Room303_); ok {
			return x.Room303
		}
	}
	return nil
}

func (x *UserSubscription) GetDelivery() *UserSubscription_Delivery {
	if x != nil {
		if x, ok := x.DeliverMethod.(*UserSubscription_Delivery_); ok {
			return x.Delivery
		}
	}
	return nil
}

func (x *UserSubscription) GetFilters() []*commons.FieldValueFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *UserSubscription) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type isUserSubscription_DeliverMethod interface {
	isUserSubscription_DeliverMethod()
}

type UserSubscription_Room303_ struct {
	Room303 *UserSubscription_Room303 `protobuf:"bytes,100,opt,name=room303,proto3,oneof"`
}

type UserSubscription_Delivery_ struct {
	// TODO: add email, sms, etc.
	Delivery *UserSubscription_Delivery `protobuf:"bytes,200,opt,name=delivery,proto3,oneof"`
}

func (*UserSubscription_Room303_) isUserSubscription_DeliverMethod() {}

func (*UserSubscription_Delivery_) isUserSubscription_DeliverMethod() {}

// Request to add a user subscription.
type AddUserSubscriptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required.
	// All fields (except subscription id) must be set.
	Subscription  *UserSubscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUserSubscriptionRequest) Reset() {
	*x = AddUserSubscriptionRequest{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserSubscriptionRequest) ProtoMessage() {}

func (x *AddUserSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*AddUserSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{1}
}

func (x *AddUserSubscriptionRequest) GetSubscription() *UserSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Response to adding a user subscription.
// Contains a single user subscription.
type AddUserSubscriptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscription  *UserSubscription      `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUserSubscriptionResponse) Reset() {
	*x = AddUserSubscriptionResponse{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserSubscriptionResponse) ProtoMessage() {}

func (x *AddUserSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*AddUserSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{2}
}

func (x *AddUserSubscriptionResponse) GetSubscription() *UserSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Request to add a user subscription by a specified user with editing users org.
type AddUserSubscriptionByUserIdRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required.
	// User assigned to subscription
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// All fields (except subscription id) must be set.
	Subscription  *UserSubscription `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUserSubscriptionByUserIdRequest) Reset() {
	*x = AddUserSubscriptionByUserIdRequest{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserSubscriptionByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserSubscriptionByUserIdRequest) ProtoMessage() {}

func (x *AddUserSubscriptionByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserSubscriptionByUserIdRequest.ProtoReflect.Descriptor instead.
func (*AddUserSubscriptionByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{3}
}

func (x *AddUserSubscriptionByUserIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddUserSubscriptionByUserIdRequest) GetSubscription() *UserSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Response to adding a user subscription.
// Contains a single user subscription.
type AddUserSubscriptionByUserIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscription  *UserSubscription      `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUserSubscriptionByUserIdResponse) Reset() {
	*x = AddUserSubscriptionByUserIdResponse{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUserSubscriptionByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserSubscriptionByUserIdResponse) ProtoMessage() {}

func (x *AddUserSubscriptionByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserSubscriptionByUserIdResponse.ProtoReflect.Descriptor instead.
func (*AddUserSubscriptionByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{4}
}

func (x *AddUserSubscriptionByUserIdResponse) GetSubscription() *UserSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Request for getting a user subscription.
type GetUserSubscriptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required.
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetUserSubscriptionRequest) Reset() {
	*x = GetUserSubscriptionRequest{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSubscriptionRequest) ProtoMessage() {}

func (x *GetUserSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetUserSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserSubscriptionRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

// Response for getting a user subscription.
// Contains a single user subscription.
type GetUserSubscriptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscription  *UserSubscription      `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserSubscriptionResponse) Reset() {
	*x = GetUserSubscriptionResponse{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSubscriptionResponse) ProtoMessage() {}

func (x *GetUserSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetUserSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserSubscriptionResponse) GetSubscription() *UserSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Request for getting a user subscription.
type GetUserSubscriptionByUserIdRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required.
	// User assigned to subscription
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Required.
	SubscriptionId string `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetUserSubscriptionByUserIdRequest) Reset() {
	*x = GetUserSubscriptionByUserIdRequest{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserSubscriptionByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSubscriptionByUserIdRequest) ProtoMessage() {}

func (x *GetUserSubscriptionByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSubscriptionByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetUserSubscriptionByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserSubscriptionByUserIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserSubscriptionByUserIdRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

// Response for getting a user subscription.
// Contains a single user subscription.
type GetUserSubscriptionByUserIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscription  *UserSubscription      `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserSubscriptionByUserIdResponse) Reset() {
	*x = GetUserSubscriptionByUserIdResponse{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserSubscriptionByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSubscriptionByUserIdResponse) ProtoMessage() {}

func (x *GetUserSubscriptionByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSubscriptionByUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetUserSubscriptionByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserSubscriptionByUserIdResponse) GetSubscription() *UserSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Request for updating a user subscription.
type UpdateUserSubscriptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required.
	// Must have org id, user id, and subscription id.
	Subscription *UserSubscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	// Required. Only fields in field mask will be updated.
	// Valid fields include: "filters", "room303"
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserSubscriptionRequest) Reset() {
	*x = UpdateUserSubscriptionRequest{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSubscriptionRequest) ProtoMessage() {}

func (x *UpdateUserSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateUserSubscriptionRequest) GetSubscription() *UserSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *UpdateUserSubscriptionRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Response for updating a user subscription.
// Contains a single user subscription.
type UpdateUserSubscriptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscription  *UserSubscription      `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserSubscriptionResponse) Reset() {
	*x = UpdateUserSubscriptionResponse{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSubscriptionResponse) ProtoMessage() {}

func (x *UpdateUserSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateUserSubscriptionResponse) GetSubscription() *UserSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Request for updating a user subscription.
type UpdateUserSubscriptionByUserIdRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required.
	// Must have org id, user id, and subscription id.
	Subscription *UserSubscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	// Required. Only fields in field mask will be updated.
	// Valid fields include: "filters", "room303"
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserSubscriptionByUserIdRequest) Reset() {
	*x = UpdateUserSubscriptionByUserIdRequest{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserSubscriptionByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSubscriptionByUserIdRequest) ProtoMessage() {}

func (x *UpdateUserSubscriptionByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSubscriptionByUserIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserSubscriptionByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateUserSubscriptionByUserIdRequest) GetSubscription() *UserSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *UpdateUserSubscriptionByUserIdRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Response for updating a user subscription.
// Contains a single user subscription.
type UpdateUserSubscriptionByUserIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscription  *UserSubscription      `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserSubscriptionByUserIdResponse) Reset() {
	*x = UpdateUserSubscriptionByUserIdResponse{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserSubscriptionByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSubscriptionByUserIdResponse) ProtoMessage() {}

func (x *UpdateUserSubscriptionByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSubscriptionByUserIdResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserSubscriptionByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateUserSubscriptionByUserIdResponse) GetSubscription() *UserSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Request for removing a user subscription by id.
type RemoveUserSubscriptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required.
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RemoveUserSubscriptionRequest) Reset() {
	*x = RemoveUserSubscriptionRequest{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserSubscriptionRequest) ProtoMessage() {}

func (x *RemoveUserSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveUserSubscriptionRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

// Response for deleting a user subscription.
type RemoveUserSubscriptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUserSubscriptionResponse) Reset() {
	*x = RemoveUserSubscriptionResponse{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserSubscriptionResponse) ProtoMessage() {}

func (x *RemoveUserSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*RemoveUserSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{14}
}

// Request for removing a user subscription by id.
type RemoveUserSubscriptionByUserIdRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required.
	// Primary key for subscriptions.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Required.
	SubscriptionId string `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RemoveUserSubscriptionByUserIdRequest) Reset() {
	*x = RemoveUserSubscriptionByUserIdRequest{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserSubscriptionByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserSubscriptionByUserIdRequest) ProtoMessage() {}

func (x *RemoveUserSubscriptionByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserSubscriptionByUserIdRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserSubscriptionByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveUserSubscriptionByUserIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RemoveUserSubscriptionByUserIdRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

// Response for deleting a user subscription.
type RemoveUserSubscriptionByUserIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUserSubscriptionByUserIdResponse) Reset() {
	*x = RemoveUserSubscriptionByUserIdResponse{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserSubscriptionByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserSubscriptionByUserIdResponse) ProtoMessage() {}

func (x *RemoveUserSubscriptionByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserSubscriptionByUserIdResponse.ProtoReflect.Descriptor instead.
func (*RemoveUserSubscriptionByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{16}
}

// Request for listing subscriptions for the current user.
type ListUserSubscriptionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserSubscriptionsRequest) Reset() {
	*x = ListUserSubscriptionsRequest{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserSubscriptionsRequest) ProtoMessage() {}

func (x *ListUserSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*ListUserSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{17}
}

// Response for listing subscriptions for the current user.
// Contains a user subscriptions (plural) object.
type ListUserSubscriptionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscriptions []*UserSubscription    `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserSubscriptionsResponse) Reset() {
	*x = ListUserSubscriptionsResponse{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserSubscriptionsResponse) ProtoMessage() {}

func (x *ListUserSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*ListUserSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{18}
}

func (x *ListUserSubscriptionsResponse) GetSubscriptions() []*UserSubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

// Request for listing subscriptions for a given user.
type ListUserSubscriptionsByUserIdRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required.
	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserSubscriptionsByUserIdRequest) Reset() {
	*x = ListUserSubscriptionsByUserIdRequest{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserSubscriptionsByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserSubscriptionsByUserIdRequest) ProtoMessage() {}

func (x *ListUserSubscriptionsByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserSubscriptionsByUserIdRequest.ProtoReflect.Descriptor instead.
func (*ListUserSubscriptionsByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{19}
}

func (x *ListUserSubscriptionsByUserIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Response for listing subscriptions for a given user.
// Contains a user subscriptions (plural) object.
type ListUserSubscriptionsByUserIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscriptions []*UserSubscription    `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserSubscriptionsByUserIdResponse) Reset() {
	*x = ListUserSubscriptionsByUserIdResponse{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserSubscriptionsByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserSubscriptionsByUserIdResponse) ProtoMessage() {}

func (x *ListUserSubscriptionsByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserSubscriptionsByUserIdResponse.ProtoReflect.Descriptor instead.
func (*ListUserSubscriptionsByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{20}
}

func (x *ListUserSubscriptionsByUserIdResponse) GetSubscriptions() []*UserSubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

// Request for listing subscriptions (for many users) for an org.
type ListOrgSubscriptionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Optional.
	// Used by matrix-notify to get settings in bulk for a particular event type.
	EventType     audit.EventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=api.commons.audit.EventType" json:"event_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOrgSubscriptionsRequest) Reset() {
	*x = ListOrgSubscriptionsRequest{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOrgSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgSubscriptionsRequest) ProtoMessage() {}

func (x *ListOrgSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*ListOrgSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{21}
}

func (x *ListOrgSubscriptionsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListOrgSubscriptionsRequest) GetEventType() audit.EventType {
	if x != nil {
		return x.EventType
	}
	return audit.EventType(0)
}

// Response for listing subscriptions for multiple users.
type ListOrgSubscriptionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscriptions []*UserSubscription    `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOrgSubscriptionsResponse) Reset() {
	*x = ListOrgSubscriptionsResponse{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOrgSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgSubscriptionsResponse) ProtoMessage() {}

func (x *ListOrgSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*ListOrgSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{22}
}

func (x *ListOrgSubscriptionsResponse) GetSubscriptions() []*UserSubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type UserSubscription_Room303 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomName      string                 `protobuf:"bytes,1,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserSubscription_Room303) Reset() {
	*x = UserSubscription_Room303{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSubscription_Room303) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSubscription_Room303) ProtoMessage() {}

func (x *UserSubscription_Room303) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSubscription_Room303.ProtoReflect.Descriptor instead.
func (*UserSubscription_Room303) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{0, 0}
}

func (x *UserSubscription_Room303) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

type UserSubscription_Delivery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required.
	// Used to lookup how the notification is going to happen through Delivery.
	TransferConfigName string `protobuf:"bytes,1,opt,name=transfer_config_name,json=transferConfigName,proto3" json:"transfer_config_name,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UserSubscription_Delivery) Reset() {
	*x = UserSubscription_Delivery{}
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSubscription_Delivery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSubscription_Delivery) ProtoMessage() {}

func (x *UserSubscription_Delivery) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_notifications_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSubscription_Delivery.ProtoReflect.Descriptor instead.
func (*UserSubscription_Delivery) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_notifications_proto_rawDescGZIP(), []int{0, 1}
}

func (x *UserSubscription_Delivery) GetTransferConfigName() string {
	if x != nil {
		return x.TransferConfigName
	}
	return ""
}

var File_api_v1alpha1_org_notifications_proto protoreflect.FileDescriptor

var file_api_v1alpha1_org_notifications_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x1a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf0, 0x03, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x33, 0x30, 0x33, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x33, 0x30,
	0x33, 0x48, 0x00, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x33, 0x30, 0x33, 0x12, 0x4a, 0x0a, 0x08,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x26, 0x0a, 0x07, 0x52,
	0x6f, 0x6f, 0x6d, 0x33, 0x30, 0x33, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x3c, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x22, 0x64, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x1b, 0x41, 0x64, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x85, 0x01, 0x0a, 0x22, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x65,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6d, 0x0a,
	0x23, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x68, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x25,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x70, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x1d, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x25, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x28, 0x0a, 0x26, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3f, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x71, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0xb9, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67,
	0x42, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d,
	0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x6f, 0x72, 0x67, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x4f, 0xaa, 0x02, 0x10, 0x41, 0x70, 0x69, 0x2e,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0xca, 0x02, 0x10, 0x41,
	0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x4f, 0x72, 0x67, 0xe2,
	0x02, 0x1c, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x4f,
	0x72, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x12, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3a, 0x3a,
	0x4f, 0x72, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1alpha1_org_notifications_proto_rawDescOnce sync.Once
	file_api_v1alpha1_org_notifications_proto_rawDescData = file_api_v1alpha1_org_notifications_proto_rawDesc
)

func file_api_v1alpha1_org_notifications_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_org_notifications_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_org_notifications_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1alpha1_org_notifications_proto_rawDescData)
	})
	return file_api_v1alpha1_org_notifications_proto_rawDescData
}

var file_api_v1alpha1_org_notifications_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_api_v1alpha1_org_notifications_proto_goTypes = []any{
	(*UserSubscription)(nil),                       // 0: api.v1alpha1.org.UserSubscription
	(*AddUserSubscriptionRequest)(nil),             // 1: api.v1alpha1.org.AddUserSubscriptionRequest
	(*AddUserSubscriptionResponse)(nil),            // 2: api.v1alpha1.org.AddUserSubscriptionResponse
	(*AddUserSubscriptionByUserIdRequest)(nil),     // 3: api.v1alpha1.org.AddUserSubscriptionByUserIdRequest
	(*AddUserSubscriptionByUserIdResponse)(nil),    // 4: api.v1alpha1.org.AddUserSubscriptionByUserIdResponse
	(*GetUserSubscriptionRequest)(nil),             // 5: api.v1alpha1.org.GetUserSubscriptionRequest
	(*GetUserSubscriptionResponse)(nil),            // 6: api.v1alpha1.org.GetUserSubscriptionResponse
	(*GetUserSubscriptionByUserIdRequest)(nil),     // 7: api.v1alpha1.org.GetUserSubscriptionByUserIdRequest
	(*GetUserSubscriptionByUserIdResponse)(nil),    // 8: api.v1alpha1.org.GetUserSubscriptionByUserIdResponse
	(*UpdateUserSubscriptionRequest)(nil),          // 9: api.v1alpha1.org.UpdateUserSubscriptionRequest
	(*UpdateUserSubscriptionResponse)(nil),         // 10: api.v1alpha1.org.UpdateUserSubscriptionResponse
	(*UpdateUserSubscriptionByUserIdRequest)(nil),  // 11: api.v1alpha1.org.UpdateUserSubscriptionByUserIdRequest
	(*UpdateUserSubscriptionByUserIdResponse)(nil), // 12: api.v1alpha1.org.UpdateUserSubscriptionByUserIdResponse
	(*RemoveUserSubscriptionRequest)(nil),          // 13: api.v1alpha1.org.RemoveUserSubscriptionRequest
	(*RemoveUserSubscriptionResponse)(nil),         // 14: api.v1alpha1.org.RemoveUserSubscriptionResponse
	(*RemoveUserSubscriptionByUserIdRequest)(nil),  // 15: api.v1alpha1.org.RemoveUserSubscriptionByUserIdRequest
	(*RemoveUserSubscriptionByUserIdResponse)(nil), // 16: api.v1alpha1.org.RemoveUserSubscriptionByUserIdResponse
	(*ListUserSubscriptionsRequest)(nil),           // 17: api.v1alpha1.org.ListUserSubscriptionsRequest
	(*ListUserSubscriptionsResponse)(nil),          // 18: api.v1alpha1.org.ListUserSubscriptionsResponse
	(*ListUserSubscriptionsByUserIdRequest)(nil),   // 19: api.v1alpha1.org.ListUserSubscriptionsByUserIdRequest
	(*ListUserSubscriptionsByUserIdResponse)(nil),  // 20: api.v1alpha1.org.ListUserSubscriptionsByUserIdResponse
	(*ListOrgSubscriptionsRequest)(nil),            // 21: api.v1alpha1.org.ListOrgSubscriptionsRequest
	(*ListOrgSubscriptionsResponse)(nil),           // 22: api.v1alpha1.org.ListOrgSubscriptionsResponse
	(*UserSubscription_Room303)(nil),               // 23: api.v1alpha1.org.UserSubscription.Room303
	(*UserSubscription_Delivery)(nil),              // 24: api.v1alpha1.org.UserSubscription.Delivery
	(audit.EventType)(0),                           // 25: api.commons.audit.EventType
	(*commons.FieldValueFilter)(nil),               // 26: api.commons.FieldValueFilter
	(*fieldmaskpb.FieldMask)(nil),                  // 27: google.protobuf.FieldMask
}
var file_api_v1alpha1_org_notifications_proto_depIdxs = []int32{
	25, // 0: api.v1alpha1.org.UserSubscription.event_type:type_name -> api.commons.audit.EventType
	23, // 1: api.v1alpha1.org.UserSubscription.room303:type_name -> api.v1alpha1.org.UserSubscription.Room303
	24, // 2: api.v1alpha1.org.UserSubscription.delivery:type_name -> api.v1alpha1.org.UserSubscription.Delivery
	26, // 3: api.v1alpha1.org.UserSubscription.filters:type_name -> api.commons.FieldValueFilter
	0,  // 4: api.v1alpha1.org.AddUserSubscriptionRequest.subscription:type_name -> api.v1alpha1.org.UserSubscription
	0,  // 5: api.v1alpha1.org.AddUserSubscriptionResponse.subscription:type_name -> api.v1alpha1.org.UserSubscription
	0,  // 6: api.v1alpha1.org.AddUserSubscriptionByUserIdRequest.subscription:type_name -> api.v1alpha1.org.UserSubscription
	0,  // 7: api.v1alpha1.org.AddUserSubscriptionByUserIdResponse.subscription:type_name -> api.v1alpha1.org.UserSubscription
	0,  // 8: api.v1alpha1.org.GetUserSubscriptionResponse.subscription:type_name -> api.v1alpha1.org.UserSubscription
	0,  // 9: api.v1alpha1.org.GetUserSubscriptionByUserIdResponse.subscription:type_name -> api.v1alpha1.org.UserSubscription
	0,  // 10: api.v1alpha1.org.UpdateUserSubscriptionRequest.subscription:type_name -> api.v1alpha1.org.UserSubscription
	27, // 11: api.v1alpha1.org.UpdateUserSubscriptionRequest.field_mask:type_name -> google.protobuf.FieldMask
	0,  // 12: api.v1alpha1.org.UpdateUserSubscriptionResponse.subscription:type_name -> api.v1alpha1.org.UserSubscription
	0,  // 13: api.v1alpha1.org.UpdateUserSubscriptionByUserIdRequest.subscription:type_name -> api.v1alpha1.org.UserSubscription
	27, // 14: api.v1alpha1.org.UpdateUserSubscriptionByUserIdRequest.field_mask:type_name -> google.protobuf.FieldMask
	0,  // 15: api.v1alpha1.org.UpdateUserSubscriptionByUserIdResponse.subscription:type_name -> api.v1alpha1.org.UserSubscription
	0,  // 16: api.v1alpha1.org.ListUserSubscriptionsResponse.subscriptions:type_name -> api.v1alpha1.org.UserSubscription
	0,  // 17: api.v1alpha1.org.ListUserSubscriptionsByUserIdResponse.subscriptions:type_name -> api.v1alpha1.org.UserSubscription
	25, // 18: api.v1alpha1.org.ListOrgSubscriptionsRequest.event_type:type_name -> api.commons.audit.EventType
	0,  // 19: api.v1alpha1.org.ListOrgSubscriptionsResponse.subscriptions:type_name -> api.v1alpha1.org.UserSubscription
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_org_notifications_proto_init() }
func file_api_v1alpha1_org_notifications_proto_init() {
	if File_api_v1alpha1_org_notifications_proto != nil {
		return
	}
	file_api_v1alpha1_org_notifications_proto_msgTypes[0].OneofWrappers = []any{
		(*UserSubscription_Room303_)(nil),
		(*UserSubscription_Delivery_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1alpha1_org_notifications_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1alpha1_org_notifications_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_org_notifications_proto_depIdxs,
		MessageInfos:      file_api_v1alpha1_org_notifications_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_org_notifications_proto = out.File
	file_api_v1alpha1_org_notifications_proto_rawDesc = nil
	file_api_v1alpha1_org_notifications_proto_goTypes = nil
	file_api_v1alpha1_org_notifications_proto_depIdxs = nil
}
