// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1alpha1/org/authconnection/service.proto

package authconnection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthConnectionService_CreateAuthConnection_FullMethodName       = "/api.v1alpha1.org.authconnection.AuthConnectionService/CreateAuthConnection"
	AuthConnectionService_GetAuthConnectionSettings_FullMethodName  = "/api.v1alpha1.org.authconnection.AuthConnectionService/GetAuthConnectionSettings"
	AuthConnectionService_GetAuthConnection_FullMethodName          = "/api.v1alpha1.org.authconnection.AuthConnectionService/GetAuthConnection"
	AuthConnectionService_DeleteAuthConnection_FullMethodName       = "/api.v1alpha1.org.authconnection.AuthConnectionService/DeleteAuthConnection"
	AuthConnectionService_UpdateAuthConnectionSecret_FullMethodName = "/api.v1alpha1.org.authconnection.AuthConnectionService/UpdateAuthConnectionSecret"
	AuthConnectionService_UpdateAuthConnectionGroups_FullMethodName = "/api.v1alpha1.org.authconnection.AuthConnectionService/UpdateAuthConnectionGroups"
)

// AuthConnectionServiceClient is the client API for AuthConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthConnectionServiceClient interface {
	// CreateAuthConnection creates a new auth0 connection.
	CreateAuthConnection(ctx context.Context, in *CreateAuthConnectionRequest, opts ...grpc.CallOption) (*CreateAuthConnectionResponse, error)
	// GetAuthConnectionSettings gets auth connection settings.
	// DEPRECATED: use GetAuthConnection
	GetAuthConnectionSettings(ctx context.Context, in *GetAuthConnectionSettingsRequest, opts ...grpc.CallOption) (*GetAuthConnectionSettingsResponse, error)
	// GetAuthConnection gets an existing auth connection.
	GetAuthConnection(ctx context.Context, in *GetAuthConnectionRequest, opts ...grpc.CallOption) (*GetAuthConnectionResponse, error)
	// DeleteAuthConnection removes the current orgs auth settings.
	DeleteAuthConnection(ctx context.Context, in *DeleteAuthConnectionRequest, opts ...grpc.CallOption) (*DeleteAuthConnectionResponse, error)
	// UpdateAuthConnectionSecret updates a connections secret.
	UpdateAuthConnectionSecret(ctx context.Context, in *UpdateAuthConnectionSecretRequest, opts ...grpc.CallOption) (*UpdateAuthConnectionSecretResponse, error)
	// UpdateAuthConnectionGroups updates a connections groups.
	UpdateAuthConnectionGroups(ctx context.Context, in *UpdateAuthConnectionGroupsRequest, opts ...grpc.CallOption) (*UpdateAuthConnectionGroupsResponse, error)
}

type authConnectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthConnectionServiceClient(cc grpc.ClientConnInterface) AuthConnectionServiceClient {
	return &authConnectionServiceClient{cc}
}

func (c *authConnectionServiceClient) CreateAuthConnection(ctx context.Context, in *CreateAuthConnectionRequest, opts ...grpc.CallOption) (*CreateAuthConnectionResponse, error) {
	out := new(CreateAuthConnectionResponse)
	err := c.cc.Invoke(ctx, AuthConnectionService_CreateAuthConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authConnectionServiceClient) GetAuthConnectionSettings(ctx context.Context, in *GetAuthConnectionSettingsRequest, opts ...grpc.CallOption) (*GetAuthConnectionSettingsResponse, error) {
	out := new(GetAuthConnectionSettingsResponse)
	err := c.cc.Invoke(ctx, AuthConnectionService_GetAuthConnectionSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authConnectionServiceClient) GetAuthConnection(ctx context.Context, in *GetAuthConnectionRequest, opts ...grpc.CallOption) (*GetAuthConnectionResponse, error) {
	out := new(GetAuthConnectionResponse)
	err := c.cc.Invoke(ctx, AuthConnectionService_GetAuthConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authConnectionServiceClient) DeleteAuthConnection(ctx context.Context, in *DeleteAuthConnectionRequest, opts ...grpc.CallOption) (*DeleteAuthConnectionResponse, error) {
	out := new(DeleteAuthConnectionResponse)
	err := c.cc.Invoke(ctx, AuthConnectionService_DeleteAuthConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authConnectionServiceClient) UpdateAuthConnectionSecret(ctx context.Context, in *UpdateAuthConnectionSecretRequest, opts ...grpc.CallOption) (*UpdateAuthConnectionSecretResponse, error) {
	out := new(UpdateAuthConnectionSecretResponse)
	err := c.cc.Invoke(ctx, AuthConnectionService_UpdateAuthConnectionSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authConnectionServiceClient) UpdateAuthConnectionGroups(ctx context.Context, in *UpdateAuthConnectionGroupsRequest, opts ...grpc.CallOption) (*UpdateAuthConnectionGroupsResponse, error) {
	out := new(UpdateAuthConnectionGroupsResponse)
	err := c.cc.Invoke(ctx, AuthConnectionService_UpdateAuthConnectionGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthConnectionServiceServer is the server API for AuthConnectionService service.
// All implementations must embed UnimplementedAuthConnectionServiceServer
// for forward compatibility
type AuthConnectionServiceServer interface {
	// CreateAuthConnection creates a new auth0 connection.
	CreateAuthConnection(context.Context, *CreateAuthConnectionRequest) (*CreateAuthConnectionResponse, error)
	// GetAuthConnectionSettings gets auth connection settings.
	// DEPRECATED: use GetAuthConnection
	GetAuthConnectionSettings(context.Context, *GetAuthConnectionSettingsRequest) (*GetAuthConnectionSettingsResponse, error)
	// GetAuthConnection gets an existing auth connection.
	GetAuthConnection(context.Context, *GetAuthConnectionRequest) (*GetAuthConnectionResponse, error)
	// DeleteAuthConnection removes the current orgs auth settings.
	DeleteAuthConnection(context.Context, *DeleteAuthConnectionRequest) (*DeleteAuthConnectionResponse, error)
	// UpdateAuthConnectionSecret updates a connections secret.
	UpdateAuthConnectionSecret(context.Context, *UpdateAuthConnectionSecretRequest) (*UpdateAuthConnectionSecretResponse, error)
	// UpdateAuthConnectionGroups updates a connections groups.
	UpdateAuthConnectionGroups(context.Context, *UpdateAuthConnectionGroupsRequest) (*UpdateAuthConnectionGroupsResponse, error)
	mustEmbedUnimplementedAuthConnectionServiceServer()
}

// UnimplementedAuthConnectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthConnectionServiceServer struct {
}

func (UnimplementedAuthConnectionServiceServer) CreateAuthConnection(context.Context, *CreateAuthConnectionRequest) (*CreateAuthConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthConnection not implemented")
}
func (UnimplementedAuthConnectionServiceServer) GetAuthConnectionSettings(context.Context, *GetAuthConnectionSettingsRequest) (*GetAuthConnectionSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthConnectionSettings not implemented")
}
func (UnimplementedAuthConnectionServiceServer) GetAuthConnection(context.Context, *GetAuthConnectionRequest) (*GetAuthConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthConnection not implemented")
}
func (UnimplementedAuthConnectionServiceServer) DeleteAuthConnection(context.Context, *DeleteAuthConnectionRequest) (*DeleteAuthConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthConnection not implemented")
}
func (UnimplementedAuthConnectionServiceServer) UpdateAuthConnectionSecret(context.Context, *UpdateAuthConnectionSecretRequest) (*UpdateAuthConnectionSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthConnectionSecret not implemented")
}
func (UnimplementedAuthConnectionServiceServer) UpdateAuthConnectionGroups(context.Context, *UpdateAuthConnectionGroupsRequest) (*UpdateAuthConnectionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthConnectionGroups not implemented")
}
func (UnimplementedAuthConnectionServiceServer) mustEmbedUnimplementedAuthConnectionServiceServer() {}

// UnsafeAuthConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthConnectionServiceServer will
// result in compilation errors.
type UnsafeAuthConnectionServiceServer interface {
	mustEmbedUnimplementedAuthConnectionServiceServer()
}

func RegisterAuthConnectionServiceServer(s grpc.ServiceRegistrar, srv AuthConnectionServiceServer) {
	s.RegisterService(&AuthConnectionService_ServiceDesc, srv)
}

func _AuthConnectionService_CreateAuthConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthConnectionServiceServer).CreateAuthConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthConnectionService_CreateAuthConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthConnectionServiceServer).CreateAuthConnection(ctx, req.(*CreateAuthConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthConnectionService_GetAuthConnectionSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthConnectionSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthConnectionServiceServer).GetAuthConnectionSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthConnectionService_GetAuthConnectionSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthConnectionServiceServer).GetAuthConnectionSettings(ctx, req.(*GetAuthConnectionSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthConnectionService_GetAuthConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthConnectionServiceServer).GetAuthConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthConnectionService_GetAuthConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthConnectionServiceServer).GetAuthConnection(ctx, req.(*GetAuthConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthConnectionService_DeleteAuthConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthConnectionServiceServer).DeleteAuthConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthConnectionService_DeleteAuthConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthConnectionServiceServer).DeleteAuthConnection(ctx, req.(*DeleteAuthConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthConnectionService_UpdateAuthConnectionSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthConnectionSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthConnectionServiceServer).UpdateAuthConnectionSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthConnectionService_UpdateAuthConnectionSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthConnectionServiceServer).UpdateAuthConnectionSecret(ctx, req.(*UpdateAuthConnectionSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthConnectionService_UpdateAuthConnectionGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthConnectionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthConnectionServiceServer).UpdateAuthConnectionGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthConnectionService_UpdateAuthConnectionGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthConnectionServiceServer).UpdateAuthConnectionGroups(ctx, req.(*UpdateAuthConnectionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthConnectionService_ServiceDesc is the grpc.ServiceDesc for AuthConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.org.authconnection.AuthConnectionService",
	HandlerType: (*AuthConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuthConnection",
			Handler:    _AuthConnectionService_CreateAuthConnection_Handler,
		},
		{
			MethodName: "GetAuthConnectionSettings",
			Handler:    _AuthConnectionService_GetAuthConnectionSettings_Handler,
		},
		{
			MethodName: "GetAuthConnection",
			Handler:    _AuthConnectionService_GetAuthConnection_Handler,
		},
		{
			MethodName: "DeleteAuthConnection",
			Handler:    _AuthConnectionService_DeleteAuthConnection_Handler,
		},
		{
			MethodName: "UpdateAuthConnectionSecret",
			Handler:    _AuthConnectionService_UpdateAuthConnectionSecret_Handler,
		},
		{
			MethodName: "UpdateAuthConnectionGroups",
			Handler:    _AuthConnectionService_UpdateAuthConnectionGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/org/authconnection/service.proto",
}
