// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1alpha1/org/businesshours/service.proto

package businesshours

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BusinessHoursService_ListBusinessHours_FullMethodName               = "/api.v1alpha1.org.businesshours.BusinessHoursService/ListBusinessHours"
	BusinessHoursService_GetBusinessHours_FullMethodName                = "/api.v1alpha1.org.businesshours.BusinessHoursService/GetBusinessHours"
	BusinessHoursService_SetBusinessHours_FullMethodName                = "/api.v1alpha1.org.businesshours.BusinessHoursService/SetBusinessHours"
	BusinessHoursService_AddIntervalToBusinessHours_FullMethodName      = "/api.v1alpha1.org.businesshours.BusinessHoursService/AddIntervalToBusinessHours"
	BusinessHoursService_RemoveIntervalFromBusinessHours_FullMethodName = "/api.v1alpha1.org.businesshours.BusinessHoursService/RemoveIntervalFromBusinessHours"
	BusinessHoursService_UpdateBusinessHoursInfo_FullMethodName         = "/api.v1alpha1.org.businesshours.BusinessHoursService/UpdateBusinessHoursInfo"
	BusinessHoursService_DeleteBusinessHours_FullMethodName             = "/api.v1alpha1.org.businesshours.BusinessHoursService/DeleteBusinessHours"
	BusinessHoursService_EvaluateBusinessHours_FullMethodName           = "/api.v1alpha1.org.businesshours.BusinessHoursService/EvaluateBusinessHours"
)

// BusinessHoursServiceClient is the client API for BusinessHoursService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessHoursServiceClient interface {
	// ListBusinessHours returns all business hours for an Org.
	ListBusinessHours(ctx context.Context, in *ListBusinessHoursRequest, opts ...grpc.CallOption) (*ListBusinessHoursResponse, error)
	// GetBusinessHours returns the business hours for the ID.
	GetBusinessHours(ctx context.Context, in *GetBusinessHoursRequest, opts ...grpc.CallOption) (*GetBusinessHoursResponse, error)
	// SetBusinessHours initializes a business hours object
	SetBusinessHours(ctx context.Context, in *SetBusinessHoursRequest, opts ...grpc.CallOption) (*SetBusinessHoursResponse, error)
	// AddIntervalToBusinessHours adds a day interval to a business hours object
	AddIntervalToBusinessHours(ctx context.Context, in *AddIntervalToBusinessHoursRequest, opts ...grpc.CallOption) (*AddIntervalToBusinessHoursResponse, error)
	// RemoveIntervalFromBusinessHours removes a day interval from a business hours object
	RemoveIntervalFromBusinessHours(ctx context.Context, in *RemoveIntervalFromBusinessHoursRequest, opts ...grpc.CallOption) (*RemoveIntervalFromBusinessHoursResponse, error)
	// UpdateBusinessHoursInfo updates the general info of a business hours object
	UpdateBusinessHoursInfo(ctx context.Context, in *UpdateBusinessHoursInfoRequest, opts ...grpc.CallOption) (*UpdateBusinessHoursInfoResponse, error)
	// DeleteBusinessHours removes business hours.
	DeleteBusinessHours(ctx context.Context, in *DeleteBusinessHoursRequest, opts ...grpc.CallOption) (*DeleteBusinessHoursResponse, error)
	// EvaluateBusinessHours determines whether or not the current time is within a business hours day interval
	EvaluateBusinessHours(ctx context.Context, in *EvaluateBusinessHoursRequest, opts ...grpc.CallOption) (*EvaluateBusinessHoursResponse, error)
}

type businessHoursServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessHoursServiceClient(cc grpc.ClientConnInterface) BusinessHoursServiceClient {
	return &businessHoursServiceClient{cc}
}

func (c *businessHoursServiceClient) ListBusinessHours(ctx context.Context, in *ListBusinessHoursRequest, opts ...grpc.CallOption) (*ListBusinessHoursResponse, error) {
	out := new(ListBusinessHoursResponse)
	err := c.cc.Invoke(ctx, BusinessHoursService_ListBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessHoursServiceClient) GetBusinessHours(ctx context.Context, in *GetBusinessHoursRequest, opts ...grpc.CallOption) (*GetBusinessHoursResponse, error) {
	out := new(GetBusinessHoursResponse)
	err := c.cc.Invoke(ctx, BusinessHoursService_GetBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessHoursServiceClient) SetBusinessHours(ctx context.Context, in *SetBusinessHoursRequest, opts ...grpc.CallOption) (*SetBusinessHoursResponse, error) {
	out := new(SetBusinessHoursResponse)
	err := c.cc.Invoke(ctx, BusinessHoursService_SetBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessHoursServiceClient) AddIntervalToBusinessHours(ctx context.Context, in *AddIntervalToBusinessHoursRequest, opts ...grpc.CallOption) (*AddIntervalToBusinessHoursResponse, error) {
	out := new(AddIntervalToBusinessHoursResponse)
	err := c.cc.Invoke(ctx, BusinessHoursService_AddIntervalToBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessHoursServiceClient) RemoveIntervalFromBusinessHours(ctx context.Context, in *RemoveIntervalFromBusinessHoursRequest, opts ...grpc.CallOption) (*RemoveIntervalFromBusinessHoursResponse, error) {
	out := new(RemoveIntervalFromBusinessHoursResponse)
	err := c.cc.Invoke(ctx, BusinessHoursService_RemoveIntervalFromBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessHoursServiceClient) UpdateBusinessHoursInfo(ctx context.Context, in *UpdateBusinessHoursInfoRequest, opts ...grpc.CallOption) (*UpdateBusinessHoursInfoResponse, error) {
	out := new(UpdateBusinessHoursInfoResponse)
	err := c.cc.Invoke(ctx, BusinessHoursService_UpdateBusinessHoursInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessHoursServiceClient) DeleteBusinessHours(ctx context.Context, in *DeleteBusinessHoursRequest, opts ...grpc.CallOption) (*DeleteBusinessHoursResponse, error) {
	out := new(DeleteBusinessHoursResponse)
	err := c.cc.Invoke(ctx, BusinessHoursService_DeleteBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessHoursServiceClient) EvaluateBusinessHours(ctx context.Context, in *EvaluateBusinessHoursRequest, opts ...grpc.CallOption) (*EvaluateBusinessHoursResponse, error) {
	out := new(EvaluateBusinessHoursResponse)
	err := c.cc.Invoke(ctx, BusinessHoursService_EvaluateBusinessHours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessHoursServiceServer is the server API for BusinessHoursService service.
// All implementations must embed UnimplementedBusinessHoursServiceServer
// for forward compatibility
type BusinessHoursServiceServer interface {
	// ListBusinessHours returns all business hours for an Org.
	ListBusinessHours(context.Context, *ListBusinessHoursRequest) (*ListBusinessHoursResponse, error)
	// GetBusinessHours returns the business hours for the ID.
	GetBusinessHours(context.Context, *GetBusinessHoursRequest) (*GetBusinessHoursResponse, error)
	// SetBusinessHours initializes a business hours object
	SetBusinessHours(context.Context, *SetBusinessHoursRequest) (*SetBusinessHoursResponse, error)
	// AddIntervalToBusinessHours adds a day interval to a business hours object
	AddIntervalToBusinessHours(context.Context, *AddIntervalToBusinessHoursRequest) (*AddIntervalToBusinessHoursResponse, error)
	// RemoveIntervalFromBusinessHours removes a day interval from a business hours object
	RemoveIntervalFromBusinessHours(context.Context, *RemoveIntervalFromBusinessHoursRequest) (*RemoveIntervalFromBusinessHoursResponse, error)
	// UpdateBusinessHoursInfo updates the general info of a business hours object
	UpdateBusinessHoursInfo(context.Context, *UpdateBusinessHoursInfoRequest) (*UpdateBusinessHoursInfoResponse, error)
	// DeleteBusinessHours removes business hours.
	DeleteBusinessHours(context.Context, *DeleteBusinessHoursRequest) (*DeleteBusinessHoursResponse, error)
	// EvaluateBusinessHours determines whether or not the current time is within a business hours day interval
	EvaluateBusinessHours(context.Context, *EvaluateBusinessHoursRequest) (*EvaluateBusinessHoursResponse, error)
	mustEmbedUnimplementedBusinessHoursServiceServer()
}

// UnimplementedBusinessHoursServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessHoursServiceServer struct {
}

func (UnimplementedBusinessHoursServiceServer) ListBusinessHours(context.Context, *ListBusinessHoursRequest) (*ListBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessHours not implemented")
}
func (UnimplementedBusinessHoursServiceServer) GetBusinessHours(context.Context, *GetBusinessHoursRequest) (*GetBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessHours not implemented")
}
func (UnimplementedBusinessHoursServiceServer) SetBusinessHours(context.Context, *SetBusinessHoursRequest) (*SetBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBusinessHours not implemented")
}
func (UnimplementedBusinessHoursServiceServer) AddIntervalToBusinessHours(context.Context, *AddIntervalToBusinessHoursRequest) (*AddIntervalToBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIntervalToBusinessHours not implemented")
}
func (UnimplementedBusinessHoursServiceServer) RemoveIntervalFromBusinessHours(context.Context, *RemoveIntervalFromBusinessHoursRequest) (*RemoveIntervalFromBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIntervalFromBusinessHours not implemented")
}
func (UnimplementedBusinessHoursServiceServer) UpdateBusinessHoursInfo(context.Context, *UpdateBusinessHoursInfoRequest) (*UpdateBusinessHoursInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessHoursInfo not implemented")
}
func (UnimplementedBusinessHoursServiceServer) DeleteBusinessHours(context.Context, *DeleteBusinessHoursRequest) (*DeleteBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessHours not implemented")
}
func (UnimplementedBusinessHoursServiceServer) EvaluateBusinessHours(context.Context, *EvaluateBusinessHoursRequest) (*EvaluateBusinessHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateBusinessHours not implemented")
}
func (UnimplementedBusinessHoursServiceServer) mustEmbedUnimplementedBusinessHoursServiceServer() {}

// UnsafeBusinessHoursServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessHoursServiceServer will
// result in compilation errors.
type UnsafeBusinessHoursServiceServer interface {
	mustEmbedUnimplementedBusinessHoursServiceServer()
}

func RegisterBusinessHoursServiceServer(s grpc.ServiceRegistrar, srv BusinessHoursServiceServer) {
	s.RegisterService(&BusinessHoursService_ServiceDesc, srv)
}

func _BusinessHoursService_ListBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessHoursServiceServer).ListBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessHoursService_ListBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessHoursServiceServer).ListBusinessHours(ctx, req.(*ListBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessHoursService_GetBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessHoursServiceServer).GetBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessHoursService_GetBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessHoursServiceServer).GetBusinessHours(ctx, req.(*GetBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessHoursService_SetBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessHoursServiceServer).SetBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessHoursService_SetBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessHoursServiceServer).SetBusinessHours(ctx, req.(*SetBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessHoursService_AddIntervalToBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIntervalToBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessHoursServiceServer).AddIntervalToBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessHoursService_AddIntervalToBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessHoursServiceServer).AddIntervalToBusinessHours(ctx, req.(*AddIntervalToBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessHoursService_RemoveIntervalFromBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIntervalFromBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessHoursServiceServer).RemoveIntervalFromBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessHoursService_RemoveIntervalFromBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessHoursServiceServer).RemoveIntervalFromBusinessHours(ctx, req.(*RemoveIntervalFromBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessHoursService_UpdateBusinessHoursInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessHoursInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessHoursServiceServer).UpdateBusinessHoursInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessHoursService_UpdateBusinessHoursInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessHoursServiceServer).UpdateBusinessHoursInfo(ctx, req.(*UpdateBusinessHoursInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessHoursService_DeleteBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessHoursServiceServer).DeleteBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessHoursService_DeleteBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessHoursServiceServer).DeleteBusinessHours(ctx, req.(*DeleteBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessHoursService_EvaluateBusinessHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateBusinessHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessHoursServiceServer).EvaluateBusinessHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessHoursService_EvaluateBusinessHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessHoursServiceServer).EvaluateBusinessHours(ctx, req.(*EvaluateBusinessHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessHoursService_ServiceDesc is the grpc.ServiceDesc for BusinessHoursService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessHoursService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.org.businesshours.BusinessHoursService",
	HandlerType: (*BusinessHoursServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBusinessHours",
			Handler:    _BusinessHoursService_ListBusinessHours_Handler,
		},
		{
			MethodName: "GetBusinessHours",
			Handler:    _BusinessHoursService_GetBusinessHours_Handler,
		},
		{
			MethodName: "SetBusinessHours",
			Handler:    _BusinessHoursService_SetBusinessHours_Handler,
		},
		{
			MethodName: "AddIntervalToBusinessHours",
			Handler:    _BusinessHoursService_AddIntervalToBusinessHours_Handler,
		},
		{
			MethodName: "RemoveIntervalFromBusinessHours",
			Handler:    _BusinessHoursService_RemoveIntervalFromBusinessHours_Handler,
		},
		{
			MethodName: "UpdateBusinessHoursInfo",
			Handler:    _BusinessHoursService_UpdateBusinessHoursInfo_Handler,
		},
		{
			MethodName: "DeleteBusinessHours",
			Handler:    _BusinessHoursService_DeleteBusinessHours_Handler,
		},
		{
			MethodName: "EvaluateBusinessHours",
			Handler:    _BusinessHoursService_EvaluateBusinessHours_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/org/businesshours/service.proto",
}
