// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/org/businesshours/service.proto

package businesshoursconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	businesshours "github.com/tcncloud/api-go/api/v1alpha1/org/businesshours"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BusinessHoursServiceName is the fully-qualified name of the BusinessHoursService service.
	BusinessHoursServiceName = "api.v1alpha1.org.businesshours.BusinessHoursService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BusinessHoursServiceListBusinessHoursProcedure is the fully-qualified name of the
	// BusinessHoursService's ListBusinessHours RPC.
	BusinessHoursServiceListBusinessHoursProcedure = "/api.v1alpha1.org.businesshours.BusinessHoursService/ListBusinessHours"
	// BusinessHoursServiceGetBusinessHoursProcedure is the fully-qualified name of the
	// BusinessHoursService's GetBusinessHours RPC.
	BusinessHoursServiceGetBusinessHoursProcedure = "/api.v1alpha1.org.businesshours.BusinessHoursService/GetBusinessHours"
	// BusinessHoursServiceSetBusinessHoursProcedure is the fully-qualified name of the
	// BusinessHoursService's SetBusinessHours RPC.
	BusinessHoursServiceSetBusinessHoursProcedure = "/api.v1alpha1.org.businesshours.BusinessHoursService/SetBusinessHours"
	// BusinessHoursServiceAddIntervalToBusinessHoursProcedure is the fully-qualified name of the
	// BusinessHoursService's AddIntervalToBusinessHours RPC.
	BusinessHoursServiceAddIntervalToBusinessHoursProcedure = "/api.v1alpha1.org.businesshours.BusinessHoursService/AddIntervalToBusinessHours"
	// BusinessHoursServiceRemoveIntervalFromBusinessHoursProcedure is the fully-qualified name of the
	// BusinessHoursService's RemoveIntervalFromBusinessHours RPC.
	BusinessHoursServiceRemoveIntervalFromBusinessHoursProcedure = "/api.v1alpha1.org.businesshours.BusinessHoursService/RemoveIntervalFromBusinessHours"
	// BusinessHoursServiceUpdateBusinessHoursInfoProcedure is the fully-qualified name of the
	// BusinessHoursService's UpdateBusinessHoursInfo RPC.
	BusinessHoursServiceUpdateBusinessHoursInfoProcedure = "/api.v1alpha1.org.businesshours.BusinessHoursService/UpdateBusinessHoursInfo"
	// BusinessHoursServiceDeleteBusinessHoursProcedure is the fully-qualified name of the
	// BusinessHoursService's DeleteBusinessHours RPC.
	BusinessHoursServiceDeleteBusinessHoursProcedure = "/api.v1alpha1.org.businesshours.BusinessHoursService/DeleteBusinessHours"
	// BusinessHoursServiceEvaluateBusinessHoursProcedure is the fully-qualified name of the
	// BusinessHoursService's EvaluateBusinessHours RPC.
	BusinessHoursServiceEvaluateBusinessHoursProcedure = "/api.v1alpha1.org.businesshours.BusinessHoursService/EvaluateBusinessHours"
)

// BusinessHoursServiceClient is a client for the
// api.v1alpha1.org.businesshours.BusinessHoursService service.
type BusinessHoursServiceClient interface {
	// ListBusinessHours returns all business hours for an Org.
	ListBusinessHours(context.Context, *connect_go.Request[businesshours.ListBusinessHoursRequest]) (*connect_go.Response[businesshours.ListBusinessHoursResponse], error)
	// GetBusinessHours returns the business hours for the ID.
	GetBusinessHours(context.Context, *connect_go.Request[businesshours.GetBusinessHoursRequest]) (*connect_go.Response[businesshours.GetBusinessHoursResponse], error)
	// SetBusinessHours initializes a business hours object
	SetBusinessHours(context.Context, *connect_go.Request[businesshours.SetBusinessHoursRequest]) (*connect_go.Response[businesshours.SetBusinessHoursResponse], error)
	// AddIntervalToBusinessHours adds a day interval to a business hours object
	AddIntervalToBusinessHours(context.Context, *connect_go.Request[businesshours.AddIntervalToBusinessHoursRequest]) (*connect_go.Response[businesshours.AddIntervalToBusinessHoursResponse], error)
	// RemoveIntervalFromBusinessHours removes a day interval from a business hours object
	RemoveIntervalFromBusinessHours(context.Context, *connect_go.Request[businesshours.RemoveIntervalFromBusinessHoursRequest]) (*connect_go.Response[businesshours.RemoveIntervalFromBusinessHoursResponse], error)
	// UpdateBusinessHoursInfo updates the general info of a business hours object
	UpdateBusinessHoursInfo(context.Context, *connect_go.Request[businesshours.UpdateBusinessHoursInfoRequest]) (*connect_go.Response[businesshours.UpdateBusinessHoursInfoResponse], error)
	// DeleteBusinessHours removes business hours.
	DeleteBusinessHours(context.Context, *connect_go.Request[businesshours.DeleteBusinessHoursRequest]) (*connect_go.Response[businesshours.DeleteBusinessHoursResponse], error)
	// EvaluateBusinessHours determines whether or not the current time is within a business hours day interval
	EvaluateBusinessHours(context.Context, *connect_go.Request[businesshours.EvaluateBusinessHoursRequest]) (*connect_go.Response[businesshours.EvaluateBusinessHoursResponse], error)
}

// NewBusinessHoursServiceClient constructs a client for the
// api.v1alpha1.org.businesshours.BusinessHoursService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBusinessHoursServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BusinessHoursServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &businessHoursServiceClient{
		listBusinessHours: connect_go.NewClient[businesshours.ListBusinessHoursRequest, businesshours.ListBusinessHoursResponse](
			httpClient,
			baseURL+BusinessHoursServiceListBusinessHoursProcedure,
			opts...,
		),
		getBusinessHours: connect_go.NewClient[businesshours.GetBusinessHoursRequest, businesshours.GetBusinessHoursResponse](
			httpClient,
			baseURL+BusinessHoursServiceGetBusinessHoursProcedure,
			opts...,
		),
		setBusinessHours: connect_go.NewClient[businesshours.SetBusinessHoursRequest, businesshours.SetBusinessHoursResponse](
			httpClient,
			baseURL+BusinessHoursServiceSetBusinessHoursProcedure,
			opts...,
		),
		addIntervalToBusinessHours: connect_go.NewClient[businesshours.AddIntervalToBusinessHoursRequest, businesshours.AddIntervalToBusinessHoursResponse](
			httpClient,
			baseURL+BusinessHoursServiceAddIntervalToBusinessHoursProcedure,
			opts...,
		),
		removeIntervalFromBusinessHours: connect_go.NewClient[businesshours.RemoveIntervalFromBusinessHoursRequest, businesshours.RemoveIntervalFromBusinessHoursResponse](
			httpClient,
			baseURL+BusinessHoursServiceRemoveIntervalFromBusinessHoursProcedure,
			opts...,
		),
		updateBusinessHoursInfo: connect_go.NewClient[businesshours.UpdateBusinessHoursInfoRequest, businesshours.UpdateBusinessHoursInfoResponse](
			httpClient,
			baseURL+BusinessHoursServiceUpdateBusinessHoursInfoProcedure,
			opts...,
		),
		deleteBusinessHours: connect_go.NewClient[businesshours.DeleteBusinessHoursRequest, businesshours.DeleteBusinessHoursResponse](
			httpClient,
			baseURL+BusinessHoursServiceDeleteBusinessHoursProcedure,
			opts...,
		),
		evaluateBusinessHours: connect_go.NewClient[businesshours.EvaluateBusinessHoursRequest, businesshours.EvaluateBusinessHoursResponse](
			httpClient,
			baseURL+BusinessHoursServiceEvaluateBusinessHoursProcedure,
			opts...,
		),
	}
}

// businessHoursServiceClient implements BusinessHoursServiceClient.
type businessHoursServiceClient struct {
	listBusinessHours               *connect_go.Client[businesshours.ListBusinessHoursRequest, businesshours.ListBusinessHoursResponse]
	getBusinessHours                *connect_go.Client[businesshours.GetBusinessHoursRequest, businesshours.GetBusinessHoursResponse]
	setBusinessHours                *connect_go.Client[businesshours.SetBusinessHoursRequest, businesshours.SetBusinessHoursResponse]
	addIntervalToBusinessHours      *connect_go.Client[businesshours.AddIntervalToBusinessHoursRequest, businesshours.AddIntervalToBusinessHoursResponse]
	removeIntervalFromBusinessHours *connect_go.Client[businesshours.RemoveIntervalFromBusinessHoursRequest, businesshours.RemoveIntervalFromBusinessHoursResponse]
	updateBusinessHoursInfo         *connect_go.Client[businesshours.UpdateBusinessHoursInfoRequest, businesshours.UpdateBusinessHoursInfoResponse]
	deleteBusinessHours             *connect_go.Client[businesshours.DeleteBusinessHoursRequest, businesshours.DeleteBusinessHoursResponse]
	evaluateBusinessHours           *connect_go.Client[businesshours.EvaluateBusinessHoursRequest, businesshours.EvaluateBusinessHoursResponse]
}

// ListBusinessHours calls api.v1alpha1.org.businesshours.BusinessHoursService.ListBusinessHours.
func (c *businessHoursServiceClient) ListBusinessHours(ctx context.Context, req *connect_go.Request[businesshours.ListBusinessHoursRequest]) (*connect_go.Response[businesshours.ListBusinessHoursResponse], error) {
	return c.listBusinessHours.CallUnary(ctx, req)
}

// GetBusinessHours calls api.v1alpha1.org.businesshours.BusinessHoursService.GetBusinessHours.
func (c *businessHoursServiceClient) GetBusinessHours(ctx context.Context, req *connect_go.Request[businesshours.GetBusinessHoursRequest]) (*connect_go.Response[businesshours.GetBusinessHoursResponse], error) {
	return c.getBusinessHours.CallUnary(ctx, req)
}

// SetBusinessHours calls api.v1alpha1.org.businesshours.BusinessHoursService.SetBusinessHours.
func (c *businessHoursServiceClient) SetBusinessHours(ctx context.Context, req *connect_go.Request[businesshours.SetBusinessHoursRequest]) (*connect_go.Response[businesshours.SetBusinessHoursResponse], error) {
	return c.setBusinessHours.CallUnary(ctx, req)
}

// AddIntervalToBusinessHours calls
// api.v1alpha1.org.businesshours.BusinessHoursService.AddIntervalToBusinessHours.
func (c *businessHoursServiceClient) AddIntervalToBusinessHours(ctx context.Context, req *connect_go.Request[businesshours.AddIntervalToBusinessHoursRequest]) (*connect_go.Response[businesshours.AddIntervalToBusinessHoursResponse], error) {
	return c.addIntervalToBusinessHours.CallUnary(ctx, req)
}

// RemoveIntervalFromBusinessHours calls
// api.v1alpha1.org.businesshours.BusinessHoursService.RemoveIntervalFromBusinessHours.
func (c *businessHoursServiceClient) RemoveIntervalFromBusinessHours(ctx context.Context, req *connect_go.Request[businesshours.RemoveIntervalFromBusinessHoursRequest]) (*connect_go.Response[businesshours.RemoveIntervalFromBusinessHoursResponse], error) {
	return c.removeIntervalFromBusinessHours.CallUnary(ctx, req)
}

// UpdateBusinessHoursInfo calls
// api.v1alpha1.org.businesshours.BusinessHoursService.UpdateBusinessHoursInfo.
func (c *businessHoursServiceClient) UpdateBusinessHoursInfo(ctx context.Context, req *connect_go.Request[businesshours.UpdateBusinessHoursInfoRequest]) (*connect_go.Response[businesshours.UpdateBusinessHoursInfoResponse], error) {
	return c.updateBusinessHoursInfo.CallUnary(ctx, req)
}

// DeleteBusinessHours calls
// api.v1alpha1.org.businesshours.BusinessHoursService.DeleteBusinessHours.
func (c *businessHoursServiceClient) DeleteBusinessHours(ctx context.Context, req *connect_go.Request[businesshours.DeleteBusinessHoursRequest]) (*connect_go.Response[businesshours.DeleteBusinessHoursResponse], error) {
	return c.deleteBusinessHours.CallUnary(ctx, req)
}

// EvaluateBusinessHours calls
// api.v1alpha1.org.businesshours.BusinessHoursService.EvaluateBusinessHours.
func (c *businessHoursServiceClient) EvaluateBusinessHours(ctx context.Context, req *connect_go.Request[businesshours.EvaluateBusinessHoursRequest]) (*connect_go.Response[businesshours.EvaluateBusinessHoursResponse], error) {
	return c.evaluateBusinessHours.CallUnary(ctx, req)
}

// BusinessHoursServiceHandler is an implementation of the
// api.v1alpha1.org.businesshours.BusinessHoursService service.
type BusinessHoursServiceHandler interface {
	// ListBusinessHours returns all business hours for an Org.
	ListBusinessHours(context.Context, *connect_go.Request[businesshours.ListBusinessHoursRequest]) (*connect_go.Response[businesshours.ListBusinessHoursResponse], error)
	// GetBusinessHours returns the business hours for the ID.
	GetBusinessHours(context.Context, *connect_go.Request[businesshours.GetBusinessHoursRequest]) (*connect_go.Response[businesshours.GetBusinessHoursResponse], error)
	// SetBusinessHours initializes a business hours object
	SetBusinessHours(context.Context, *connect_go.Request[businesshours.SetBusinessHoursRequest]) (*connect_go.Response[businesshours.SetBusinessHoursResponse], error)
	// AddIntervalToBusinessHours adds a day interval to a business hours object
	AddIntervalToBusinessHours(context.Context, *connect_go.Request[businesshours.AddIntervalToBusinessHoursRequest]) (*connect_go.Response[businesshours.AddIntervalToBusinessHoursResponse], error)
	// RemoveIntervalFromBusinessHours removes a day interval from a business hours object
	RemoveIntervalFromBusinessHours(context.Context, *connect_go.Request[businesshours.RemoveIntervalFromBusinessHoursRequest]) (*connect_go.Response[businesshours.RemoveIntervalFromBusinessHoursResponse], error)
	// UpdateBusinessHoursInfo updates the general info of a business hours object
	UpdateBusinessHoursInfo(context.Context, *connect_go.Request[businesshours.UpdateBusinessHoursInfoRequest]) (*connect_go.Response[businesshours.UpdateBusinessHoursInfoResponse], error)
	// DeleteBusinessHours removes business hours.
	DeleteBusinessHours(context.Context, *connect_go.Request[businesshours.DeleteBusinessHoursRequest]) (*connect_go.Response[businesshours.DeleteBusinessHoursResponse], error)
	// EvaluateBusinessHours determines whether or not the current time is within a business hours day interval
	EvaluateBusinessHours(context.Context, *connect_go.Request[businesshours.EvaluateBusinessHoursRequest]) (*connect_go.Response[businesshours.EvaluateBusinessHoursResponse], error)
}

// NewBusinessHoursServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBusinessHoursServiceHandler(svc BusinessHoursServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	businessHoursServiceListBusinessHoursHandler := connect_go.NewUnaryHandler(
		BusinessHoursServiceListBusinessHoursProcedure,
		svc.ListBusinessHours,
		opts...,
	)
	businessHoursServiceGetBusinessHoursHandler := connect_go.NewUnaryHandler(
		BusinessHoursServiceGetBusinessHoursProcedure,
		svc.GetBusinessHours,
		opts...,
	)
	businessHoursServiceSetBusinessHoursHandler := connect_go.NewUnaryHandler(
		BusinessHoursServiceSetBusinessHoursProcedure,
		svc.SetBusinessHours,
		opts...,
	)
	businessHoursServiceAddIntervalToBusinessHoursHandler := connect_go.NewUnaryHandler(
		BusinessHoursServiceAddIntervalToBusinessHoursProcedure,
		svc.AddIntervalToBusinessHours,
		opts...,
	)
	businessHoursServiceRemoveIntervalFromBusinessHoursHandler := connect_go.NewUnaryHandler(
		BusinessHoursServiceRemoveIntervalFromBusinessHoursProcedure,
		svc.RemoveIntervalFromBusinessHours,
		opts...,
	)
	businessHoursServiceUpdateBusinessHoursInfoHandler := connect_go.NewUnaryHandler(
		BusinessHoursServiceUpdateBusinessHoursInfoProcedure,
		svc.UpdateBusinessHoursInfo,
		opts...,
	)
	businessHoursServiceDeleteBusinessHoursHandler := connect_go.NewUnaryHandler(
		BusinessHoursServiceDeleteBusinessHoursProcedure,
		svc.DeleteBusinessHours,
		opts...,
	)
	businessHoursServiceEvaluateBusinessHoursHandler := connect_go.NewUnaryHandler(
		BusinessHoursServiceEvaluateBusinessHoursProcedure,
		svc.EvaluateBusinessHours,
		opts...,
	)
	return "/api.v1alpha1.org.businesshours.BusinessHoursService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BusinessHoursServiceListBusinessHoursProcedure:
			businessHoursServiceListBusinessHoursHandler.ServeHTTP(w, r)
		case BusinessHoursServiceGetBusinessHoursProcedure:
			businessHoursServiceGetBusinessHoursHandler.ServeHTTP(w, r)
		case BusinessHoursServiceSetBusinessHoursProcedure:
			businessHoursServiceSetBusinessHoursHandler.ServeHTTP(w, r)
		case BusinessHoursServiceAddIntervalToBusinessHoursProcedure:
			businessHoursServiceAddIntervalToBusinessHoursHandler.ServeHTTP(w, r)
		case BusinessHoursServiceRemoveIntervalFromBusinessHoursProcedure:
			businessHoursServiceRemoveIntervalFromBusinessHoursHandler.ServeHTTP(w, r)
		case BusinessHoursServiceUpdateBusinessHoursInfoProcedure:
			businessHoursServiceUpdateBusinessHoursInfoHandler.ServeHTTP(w, r)
		case BusinessHoursServiceDeleteBusinessHoursProcedure:
			businessHoursServiceDeleteBusinessHoursHandler.ServeHTTP(w, r)
		case BusinessHoursServiceEvaluateBusinessHoursProcedure:
			businessHoursServiceEvaluateBusinessHoursHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBusinessHoursServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBusinessHoursServiceHandler struct{}

func (UnimplementedBusinessHoursServiceHandler) ListBusinessHours(context.Context, *connect_go.Request[businesshours.ListBusinessHoursRequest]) (*connect_go.Response[businesshours.ListBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.businesshours.BusinessHoursService.ListBusinessHours is not implemented"))
}

func (UnimplementedBusinessHoursServiceHandler) GetBusinessHours(context.Context, *connect_go.Request[businesshours.GetBusinessHoursRequest]) (*connect_go.Response[businesshours.GetBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.businesshours.BusinessHoursService.GetBusinessHours is not implemented"))
}

func (UnimplementedBusinessHoursServiceHandler) SetBusinessHours(context.Context, *connect_go.Request[businesshours.SetBusinessHoursRequest]) (*connect_go.Response[businesshours.SetBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.businesshours.BusinessHoursService.SetBusinessHours is not implemented"))
}

func (UnimplementedBusinessHoursServiceHandler) AddIntervalToBusinessHours(context.Context, *connect_go.Request[businesshours.AddIntervalToBusinessHoursRequest]) (*connect_go.Response[businesshours.AddIntervalToBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.businesshours.BusinessHoursService.AddIntervalToBusinessHours is not implemented"))
}

func (UnimplementedBusinessHoursServiceHandler) RemoveIntervalFromBusinessHours(context.Context, *connect_go.Request[businesshours.RemoveIntervalFromBusinessHoursRequest]) (*connect_go.Response[businesshours.RemoveIntervalFromBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.businesshours.BusinessHoursService.RemoveIntervalFromBusinessHours is not implemented"))
}

func (UnimplementedBusinessHoursServiceHandler) UpdateBusinessHoursInfo(context.Context, *connect_go.Request[businesshours.UpdateBusinessHoursInfoRequest]) (*connect_go.Response[businesshours.UpdateBusinessHoursInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.businesshours.BusinessHoursService.UpdateBusinessHoursInfo is not implemented"))
}

func (UnimplementedBusinessHoursServiceHandler) DeleteBusinessHours(context.Context, *connect_go.Request[businesshours.DeleteBusinessHoursRequest]) (*connect_go.Response[businesshours.DeleteBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.businesshours.BusinessHoursService.DeleteBusinessHours is not implemented"))
}

func (UnimplementedBusinessHoursServiceHandler) EvaluateBusinessHours(context.Context, *connect_go.Request[businesshours.EvaluateBusinessHoursRequest]) (*connect_go.Response[businesshours.EvaluateBusinessHoursResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.businesshours.BusinessHoursService.EvaluateBusinessHours is not implemented"))
}
