// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: api/v1alpha1/org/p3_permissions.proto

package org

import (
	commons "github.com/tcncloud/api-go/api/commons"
	org "github.com/tcncloud/api-go/api/commons/org"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for the CreateP3PermissionGroup RPC.
type CreateP3PermissionGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Display name for this group
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// More detailed description for this group
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// List of permissions associated with this group
	Permissions   []commons.Permission `protobuf:"varint,3,rep,packed,name=permissions,proto3,enum=api.commons.Permission" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateP3PermissionGroupRequest) Reset() {
	*x = CreateP3PermissionGroupRequest{}
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateP3PermissionGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateP3PermissionGroupRequest) ProtoMessage() {}

func (x *CreateP3PermissionGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateP3PermissionGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateP3PermissionGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP(), []int{0}
}

func (x *CreateP3PermissionGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateP3PermissionGroupRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateP3PermissionGroupRequest) GetPermissions() []commons.Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// Response message for the CreateP3PermissionGroup RPC.
type CreateP3PermissionGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The newly created P3PermissionGroup
	P3PermissionGroupId string `protobuf:"bytes,1,opt,name=p3_permission_group_id,json=p3PermissionGroupId,proto3" json:"p3_permission_group_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CreateP3PermissionGroupResponse) Reset() {
	*x = CreateP3PermissionGroupResponse{}
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateP3PermissionGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateP3PermissionGroupResponse) ProtoMessage() {}

func (x *CreateP3PermissionGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateP3PermissionGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateP3PermissionGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP(), []int{1}
}

func (x *CreateP3PermissionGroupResponse) GetP3PermissionGroupId() string {
	if x != nil {
		return x.P3PermissionGroupId
	}
	return ""
}

// Request message for the UpdateP3PermissionGroup RPC.
type UpdateP3PermissionGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Id of the P3PermissionGroup to be updated
	P3PermissionGroupId string `protobuf:"bytes,1,opt,name=p3_permission_group_id,json=p3PermissionGroupId,proto3" json:"p3_permission_group_id,omitempty"`
	// P3 permission group values to update.
	// The mutable fields are: name, description, permissions.
	P3PermissionGroup *org.P3PermissionGroup `protobuf:"bytes,3,opt,name=p3_permission_group,json=p3PermissionGroup,proto3" json:"p3_permission_group,omitempty"`
	// Field mask for selecting which fields to update.
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,10,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateP3PermissionGroupRequest) Reset() {
	*x = UpdateP3PermissionGroupRequest{}
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateP3PermissionGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateP3PermissionGroupRequest) ProtoMessage() {}

func (x *UpdateP3PermissionGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateP3PermissionGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateP3PermissionGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateP3PermissionGroupRequest) GetP3PermissionGroupId() string {
	if x != nil {
		return x.P3PermissionGroupId
	}
	return ""
}

func (x *UpdateP3PermissionGroupRequest) GetP3PermissionGroup() *org.P3PermissionGroup {
	if x != nil {
		return x.P3PermissionGroup
	}
	return nil
}

func (x *UpdateP3PermissionGroupRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Response message for the UpdateP3PermissionGroup RPC.
type UpdateP3PermissionGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The updated P3PermissionGroup
	P3PermissionGroup *org.P3PermissionGroup `protobuf:"bytes,1,opt,name=p3_permission_group,json=p3PermissionGroup,proto3" json:"p3_permission_group,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateP3PermissionGroupResponse) Reset() {
	*x = UpdateP3PermissionGroupResponse{}
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateP3PermissionGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateP3PermissionGroupResponse) ProtoMessage() {}

func (x *UpdateP3PermissionGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateP3PermissionGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdateP3PermissionGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateP3PermissionGroupResponse) GetP3PermissionGroup() *org.P3PermissionGroup {
	if x != nil {
		return x.P3PermissionGroup
	}
	return nil
}

// Request message for the UpdateP3PermissionGroupByOrgId RPC.
type UpdateP3PermissionGroupByOrgIdRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Id of the P3PermissionGroup to be updated
	P3PermissionGroupId string `protobuf:"bytes,1,opt,name=p3_permission_group_id,json=p3PermissionGroupId,proto3" json:"p3_permission_group_id,omitempty"`
	// Org Id is the org this group belongs to.
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// P3 permission group values to update.
	// The mutable fields are: name, description, permissions.
	P3PermissionGroup *org.P3PermissionGroup `protobuf:"bytes,3,opt,name=p3_permission_group,json=p3PermissionGroup,proto3" json:"p3_permission_group,omitempty"`
	// Field mask for selecting which fields to update.
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,10,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateP3PermissionGroupByOrgIdRequest) Reset() {
	*x = UpdateP3PermissionGroupByOrgIdRequest{}
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateP3PermissionGroupByOrgIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateP3PermissionGroupByOrgIdRequest) ProtoMessage() {}

func (x *UpdateP3PermissionGroupByOrgIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateP3PermissionGroupByOrgIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateP3PermissionGroupByOrgIdRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateP3PermissionGroupByOrgIdRequest) GetP3PermissionGroupId() string {
	if x != nil {
		return x.P3PermissionGroupId
	}
	return ""
}

func (x *UpdateP3PermissionGroupByOrgIdRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UpdateP3PermissionGroupByOrgIdRequest) GetP3PermissionGroup() *org.P3PermissionGroup {
	if x != nil {
		return x.P3PermissionGroup
	}
	return nil
}

func (x *UpdateP3PermissionGroupByOrgIdRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Response message for the UpdateP3PermissionGroupByOrgId RPC.
type UpdateP3PermissionGroupByOrgIdResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The updated P3PermissionGroup
	P3PermissionGroup *org.P3PermissionGroup `protobuf:"bytes,1,opt,name=p3_permission_group,json=p3PermissionGroup,proto3" json:"p3_permission_group,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateP3PermissionGroupByOrgIdResponse) Reset() {
	*x = UpdateP3PermissionGroupByOrgIdResponse{}
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateP3PermissionGroupByOrgIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateP3PermissionGroupByOrgIdResponse) ProtoMessage() {}

func (x *UpdateP3PermissionGroupByOrgIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateP3PermissionGroupByOrgIdResponse.ProtoReflect.Descriptor instead.
func (*UpdateP3PermissionGroupByOrgIdResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateP3PermissionGroupByOrgIdResponse) GetP3PermissionGroup() *org.P3PermissionGroup {
	if x != nil {
		return x.P3PermissionGroup
	}
	return nil
}

// Request message for the DeleteP3PermissionGroup RPC.
type DeleteP3PermissionGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Id of the P3PermissionGroup to be deleted
	P3PermissionGroupId string `protobuf:"bytes,1,opt,name=p3_permission_group_id,json=p3PermissionGroupId,proto3" json:"p3_permission_group_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DeleteP3PermissionGroupRequest) Reset() {
	*x = DeleteP3PermissionGroupRequest{}
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteP3PermissionGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteP3PermissionGroupRequest) ProtoMessage() {}

func (x *DeleteP3PermissionGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteP3PermissionGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteP3PermissionGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteP3PermissionGroupRequest) GetP3PermissionGroupId() string {
	if x != nil {
		return x.P3PermissionGroupId
	}
	return ""
}

// Response message for the DeleteP3PermissionGroup RPC.
type DeleteP3PermissionGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteP3PermissionGroupResponse) Reset() {
	*x = DeleteP3PermissionGroupResponse{}
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteP3PermissionGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteP3PermissionGroupResponse) ProtoMessage() {}

func (x *DeleteP3PermissionGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteP3PermissionGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteP3PermissionGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP(), []int{7}
}

// Request message for the AssignUsersP3PermissionGroup RPC.
type AssignUsersP3PermissionGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Id of the P3PermissionGroup to be assigned
	P3PermissionGroupId string `protobuf:"bytes,1,opt,name=p3_permission_group_id,json=p3PermissionGroupId,proto3" json:"p3_permission_group_id,omitempty"`
	// List of users to assign this group to
	UserIds       []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignUsersP3PermissionGroupRequest) Reset() {
	*x = AssignUsersP3PermissionGroupRequest{}
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignUsersP3PermissionGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignUsersP3PermissionGroupRequest) ProtoMessage() {}

func (x *AssignUsersP3PermissionGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignUsersP3PermissionGroupRequest.ProtoReflect.Descriptor instead.
func (*AssignUsersP3PermissionGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP(), []int{8}
}

func (x *AssignUsersP3PermissionGroupRequest) GetP3PermissionGroupId() string {
	if x != nil {
		return x.P3PermissionGroupId
	}
	return ""
}

func (x *AssignUsersP3PermissionGroupRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// Response message for the AssignUsersP3PermissionGroup RPC.
type AssignUsersP3PermissionGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of users that were assigned the group
	UserIds       []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignUsersP3PermissionGroupResponse) Reset() {
	*x = AssignUsersP3PermissionGroupResponse{}
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignUsersP3PermissionGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignUsersP3PermissionGroupResponse) ProtoMessage() {}

func (x *AssignUsersP3PermissionGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignUsersP3PermissionGroupResponse.ProtoReflect.Descriptor instead.
func (*AssignUsersP3PermissionGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP(), []int{9}
}

func (x *AssignUsersP3PermissionGroupResponse) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// Request message for the RevokeUsersP3PermissionGroup RPC.
type RevokeUsersP3PermissionGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of users having P3PermissionGroup revoked
	UserIds       []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeUsersP3PermissionGroupRequest) Reset() {
	*x = RevokeUsersP3PermissionGroupRequest{}
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeUsersP3PermissionGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeUsersP3PermissionGroupRequest) ProtoMessage() {}

func (x *RevokeUsersP3PermissionGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeUsersP3PermissionGroupRequest.ProtoReflect.Descriptor instead.
func (*RevokeUsersP3PermissionGroupRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP(), []int{10}
}

func (x *RevokeUsersP3PermissionGroupRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// Response message for the RevokeUsersP3PermissionGroup RPC.
type RevokeUsersP3PermissionGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of users that had permissions revoked
	UserIds       []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeUsersP3PermissionGroupResponse) Reset() {
	*x = RevokeUsersP3PermissionGroupResponse{}
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeUsersP3PermissionGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeUsersP3PermissionGroupResponse) ProtoMessage() {}

func (x *RevokeUsersP3PermissionGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeUsersP3PermissionGroupResponse.ProtoReflect.Descriptor instead.
func (*RevokeUsersP3PermissionGroupResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP(), []int{11}
}

func (x *RevokeUsersP3PermissionGroupResponse) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// Request message for the ListP3PermissionGroups RPC.
type ListP3PermissionGroupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Org's Id to list P3PermissionGroups for.
	// Passing in Org Id requires PERMISSION_CUSTOMER_SUPPORT,
	// otherwise it is taken off the user token and requires PERMISSION_ORG_VIEW.
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListP3PermissionGroupsRequest) Reset() {
	*x = ListP3PermissionGroupsRequest{}
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListP3PermissionGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListP3PermissionGroupsRequest) ProtoMessage() {}

func (x *ListP3PermissionGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListP3PermissionGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListP3PermissionGroupsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP(), []int{12}
}

func (x *ListP3PermissionGroupsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// Response message for the ListP3PermissionGroups RPC.
type ListP3PermissionGroupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of P3PermissionGroups for the requested org
	P3PermissionGroups []*org.P3PermissionGroup `protobuf:"bytes,1,rep,name=p3_permission_groups,json=p3PermissionGroups,proto3" json:"p3_permission_groups,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListP3PermissionGroupsResponse) Reset() {
	*x = ListP3PermissionGroupsResponse{}
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListP3PermissionGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListP3PermissionGroupsResponse) ProtoMessage() {}

func (x *ListP3PermissionGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_org_p3_permissions_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListP3PermissionGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListP3PermissionGroupsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP(), []int{13}
}

func (x *ListP3PermissionGroupsResponse) GetP3PermissionGroups() []*org.P3PermissionGroup {
	if x != nil {
		return x.P3PermissionGroups
	}
	return nil
}

var File_api_v1alpha1_org_p3_permissions_proto protoreflect.FileDescriptor

var file_api_v1alpha1_org_p3_permissions_proto_rawDesc = []byte{
	0x0a, 0x25, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x2f, 0x70, 0x33, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x1a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x56, 0x0a, 0x1f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x16, 0x70, 0x33, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x33,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x33, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x13, 0x70,
	0x33, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x50, 0x33, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x70, 0x33,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x75, 0x0a, 0x1f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x13, 0x70, 0x33, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x50, 0x33, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11,
	0x70, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x82, 0x02, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x33, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x70,
	0x33, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x33, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x13, 0x70, 0x33, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x50, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x70, 0x33, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x7c, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x13, 0x70, 0x33, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x50, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x11, 0x70, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x55, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x33,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x33, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75,
	0x0a, 0x23, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x33, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x33, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x41, 0x0a, 0x24, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x50, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x40, 0x0a, 0x23, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x41, 0x0a, 0x24, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x36, 0x0a,
	0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x33, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x70, 0x33, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x50, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x70, 0x33, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0xb9, 0x01,
	0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x42, 0x12, 0x50, 0x33, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x4f, 0xaa,
	0x02, 0x10, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f,
	0x72, 0x67, 0xca, 0x02, 0x10, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x5c, 0x4f, 0x72, 0x67, 0xe2, 0x02, 0x1c, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x5c, 0x4f, 0x72, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x3a, 0x3a, 0x4f, 0x72, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_v1alpha1_org_p3_permissions_proto_rawDescOnce sync.Once
	file_api_v1alpha1_org_p3_permissions_proto_rawDescData = file_api_v1alpha1_org_p3_permissions_proto_rawDesc
)

func file_api_v1alpha1_org_p3_permissions_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_org_p3_permissions_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_org_p3_permissions_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1alpha1_org_p3_permissions_proto_rawDescData)
	})
	return file_api_v1alpha1_org_p3_permissions_proto_rawDescData
}

var file_api_v1alpha1_org_p3_permissions_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_api_v1alpha1_org_p3_permissions_proto_goTypes = []any{
	(*CreateP3PermissionGroupRequest)(nil),         // 0: api.v1alpha1.org.CreateP3PermissionGroupRequest
	(*CreateP3PermissionGroupResponse)(nil),        // 1: api.v1alpha1.org.CreateP3PermissionGroupResponse
	(*UpdateP3PermissionGroupRequest)(nil),         // 2: api.v1alpha1.org.UpdateP3PermissionGroupRequest
	(*UpdateP3PermissionGroupResponse)(nil),        // 3: api.v1alpha1.org.UpdateP3PermissionGroupResponse
	(*UpdateP3PermissionGroupByOrgIdRequest)(nil),  // 4: api.v1alpha1.org.UpdateP3PermissionGroupByOrgIdRequest
	(*UpdateP3PermissionGroupByOrgIdResponse)(nil), // 5: api.v1alpha1.org.UpdateP3PermissionGroupByOrgIdResponse
	(*DeleteP3PermissionGroupRequest)(nil),         // 6: api.v1alpha1.org.DeleteP3PermissionGroupRequest
	(*DeleteP3PermissionGroupResponse)(nil),        // 7: api.v1alpha1.org.DeleteP3PermissionGroupResponse
	(*AssignUsersP3PermissionGroupRequest)(nil),    // 8: api.v1alpha1.org.AssignUsersP3PermissionGroupRequest
	(*AssignUsersP3PermissionGroupResponse)(nil),   // 9: api.v1alpha1.org.AssignUsersP3PermissionGroupResponse
	(*RevokeUsersP3PermissionGroupRequest)(nil),    // 10: api.v1alpha1.org.RevokeUsersP3PermissionGroupRequest
	(*RevokeUsersP3PermissionGroupResponse)(nil),   // 11: api.v1alpha1.org.RevokeUsersP3PermissionGroupResponse
	(*ListP3PermissionGroupsRequest)(nil),          // 12: api.v1alpha1.org.ListP3PermissionGroupsRequest
	(*ListP3PermissionGroupsResponse)(nil),         // 13: api.v1alpha1.org.ListP3PermissionGroupsResponse
	(commons.Permission)(0),                        // 14: api.commons.Permission
	(*org.P3PermissionGroup)(nil),                  // 15: api.commons.org.P3PermissionGroup
	(*fieldmaskpb.FieldMask)(nil),                  // 16: google.protobuf.FieldMask
}
var file_api_v1alpha1_org_p3_permissions_proto_depIdxs = []int32{
	14, // 0: api.v1alpha1.org.CreateP3PermissionGroupRequest.permissions:type_name -> api.commons.Permission
	15, // 1: api.v1alpha1.org.UpdateP3PermissionGroupRequest.p3_permission_group:type_name -> api.commons.org.P3PermissionGroup
	16, // 2: api.v1alpha1.org.UpdateP3PermissionGroupRequest.field_mask:type_name -> google.protobuf.FieldMask
	15, // 3: api.v1alpha1.org.UpdateP3PermissionGroupResponse.p3_permission_group:type_name -> api.commons.org.P3PermissionGroup
	15, // 4: api.v1alpha1.org.UpdateP3PermissionGroupByOrgIdRequest.p3_permission_group:type_name -> api.commons.org.P3PermissionGroup
	16, // 5: api.v1alpha1.org.UpdateP3PermissionGroupByOrgIdRequest.field_mask:type_name -> google.protobuf.FieldMask
	15, // 6: api.v1alpha1.org.UpdateP3PermissionGroupByOrgIdResponse.p3_permission_group:type_name -> api.commons.org.P3PermissionGroup
	15, // 7: api.v1alpha1.org.ListP3PermissionGroupsResponse.p3_permission_groups:type_name -> api.commons.org.P3PermissionGroup
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_org_p3_permissions_proto_init() }
func file_api_v1alpha1_org_p3_permissions_proto_init() {
	if File_api_v1alpha1_org_p3_permissions_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1alpha1_org_p3_permissions_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1alpha1_org_p3_permissions_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_org_p3_permissions_proto_depIdxs,
		MessageInfos:      file_api_v1alpha1_org_p3_permissions_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_org_p3_permissions_proto = out.File
	file_api_v1alpha1_org_p3_permissions_proto_rawDesc = nil
	file_api_v1alpha1_org_p3_permissions_proto_goTypes = nil
	file_api_v1alpha1_org_p3_permissions_proto_depIdxs = nil
}
