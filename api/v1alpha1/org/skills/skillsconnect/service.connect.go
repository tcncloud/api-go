// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/org/skills/service.proto

package skillsconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	skills "github.com/tcncloud/api-go/api/v1alpha1/org/skills"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SkillsServiceName is the fully-qualified name of the SkillsService service.
	SkillsServiceName = "api.v1alpha1.org.skills.SkillsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SkillsServiceCreateSkillGroupProcedure is the fully-qualified name of the SkillsService's
	// CreateSkillGroup RPC.
	SkillsServiceCreateSkillGroupProcedure = "/api.v1alpha1.org.skills.SkillsService/CreateSkillGroup"
	// SkillsServiceListSkillGroupsProcedure is the fully-qualified name of the SkillsService's
	// ListSkillGroups RPC.
	SkillsServiceListSkillGroupsProcedure = "/api.v1alpha1.org.skills.SkillsService/ListSkillGroups"
	// SkillsServiceUpdateSkillGroupProcedure is the fully-qualified name of the SkillsService's
	// UpdateSkillGroup RPC.
	SkillsServiceUpdateSkillGroupProcedure = "/api.v1alpha1.org.skills.SkillsService/UpdateSkillGroup"
	// SkillsServiceGetSkillGroupProcedure is the fully-qualified name of the SkillsService's
	// GetSkillGroup RPC.
	SkillsServiceGetSkillGroupProcedure = "/api.v1alpha1.org.skills.SkillsService/GetSkillGroup"
	// SkillsServiceDeleteSkillGroupProcedure is the fully-qualified name of the SkillsService's
	// DeleteSkillGroup RPC.
	SkillsServiceDeleteSkillGroupProcedure = "/api.v1alpha1.org.skills.SkillsService/DeleteSkillGroup"
	// SkillsServiceRemoveSkillFromAllGroupsProcedure is the fully-qualified name of the SkillsService's
	// RemoveSkillFromAllGroups RPC.
	SkillsServiceRemoveSkillFromAllGroupsProcedure = "/api.v1alpha1.org.skills.SkillsService/RemoveSkillFromAllGroups"
	// SkillsServiceAssignSkillGroupsProcedure is the fully-qualified name of the SkillsService's
	// AssignSkillGroups RPC.
	SkillsServiceAssignSkillGroupsProcedure = "/api.v1alpha1.org.skills.SkillsService/AssignSkillGroups"
	// SkillsServiceUpdateUsersOnSkillGroupProcedure is the fully-qualified name of the SkillsService's
	// UpdateUsersOnSkillGroup RPC.
	SkillsServiceUpdateUsersOnSkillGroupProcedure = "/api.v1alpha1.org.skills.SkillsService/UpdateUsersOnSkillGroup"
	// SkillsServiceRevokeSkillGroupsProcedure is the fully-qualified name of the SkillsService's
	// RevokeSkillGroups RPC.
	SkillsServiceRevokeSkillGroupsProcedure = "/api.v1alpha1.org.skills.SkillsService/RevokeSkillGroups"
	// SkillsServiceGetUserSkillGroupsProcedure is the fully-qualified name of the SkillsService's
	// GetUserSkillGroups RPC.
	SkillsServiceGetUserSkillGroupsProcedure = "/api.v1alpha1.org.skills.SkillsService/GetUserSkillGroups"
	// SkillsServiceGetUserSkillsProcedure is the fully-qualified name of the SkillsService's
	// GetUserSkills RPC.
	SkillsServiceGetUserSkillsProcedure = "/api.v1alpha1.org.skills.SkillsService/GetUserSkills"
	// SkillsServiceGetSkillGroupMembersProcedure is the fully-qualified name of the SkillsService's
	// GetSkillGroupMembers RPC.
	SkillsServiceGetSkillGroupMembersProcedure = "/api.v1alpha1.org.skills.SkillsService/GetSkillGroupMembers"
	// SkillsServiceListSkillGroupsMembersProcedure is the fully-qualified name of the SkillsService's
	// ListSkillGroupsMembers RPC.
	SkillsServiceListSkillGroupsMembersProcedure = "/api.v1alpha1.org.skills.SkillsService/ListSkillGroupsMembers"
)

// SkillsServiceClient is a client for the api.v1alpha1.org.skills.SkillsService service.
type SkillsServiceClient interface {
	// CreateSkillGroup creates a new skill group.
	CreateSkillGroup(context.Context, *connect_go.Request[skills.CreateSkillGroupRequest]) (*connect_go.Response[skills.CreateSkillGroupResponse], error)
	// ListSkillGroups lists the skill groups belonging to an organization.
	ListSkillGroups(context.Context, *connect_go.Request[skills.ListSkillGroupsRequest]) (*connect_go.Response[skills.ListSkillGroupsResponse], error)
	// UpdateSkillGroup updates a single skill group.
	UpdateSkillGroup(context.Context, *connect_go.Request[skills.UpdateSkillGroupRequest]) (*connect_go.Response[skills.UpdateSkillGroupResponse], error)
	// GetSkillGroup gets a single skill group.
	GetSkillGroup(context.Context, *connect_go.Request[skills.GetSkillGroupRequest]) (*connect_go.Response[skills.GetSkillGroupResponse], error)
	// DeleteSkillGroup deletes a skill group.
	DeleteSkillGroup(context.Context, *connect_go.Request[skills.DeleteSkillGroupRequest]) (*connect_go.Response[skills.DeleteSkillGroupResponse], error)
	// RemoveSkillFromAllGroups removes a skill from all skill groups which contain it.
	RemoveSkillFromAllGroups(context.Context, *connect_go.Request[skills.RemoveSkillFromAllGroupsRequest]) (*connect_go.Response[skills.RemoveSkillFromAllGroupsResponse], error)
	// AssignSkillGroups assigns a user to the given skill groups.
	AssignSkillGroups(context.Context, *connect_go.Request[skills.AssignSkillGroupsRequest]) (*connect_go.Response[skills.AssignSkillGroupsResponse], error)
	// UpdateUsersOnSkillGroup updates a skill groups assigned users.
	UpdateUsersOnSkillGroup(context.Context, *connect_go.Request[skills.UpdateUsersOnSkillGroupRequest]) (*connect_go.Response[skills.UpdateUsersOnSkillGroupResponse], error)
	// RevokeSkillGroups revokes the given skill groups from a user.
	RevokeSkillGroups(context.Context, *connect_go.Request[skills.RevokeSkillGroupsRequest]) (*connect_go.Response[skills.RevokeSkillGroupsResponse], error)
	// GetUserSkillGroups gets the skill groups assigned to a user.
	GetUserSkillGroups(context.Context, *connect_go.Request[skills.GetUserSkillGroupsRequest]) (*connect_go.Response[skills.GetUserSkillGroupsResponse], error)
	// GetUserSkills gets a user's skill proficiencies.
	GetUserSkills(context.Context, *connect_go.Request[skills.GetUserSkillsRequest]) (*connect_go.Response[skills.GetUserSkillsResponse], error)
	// GetSkillGroupMembers gets the members of a skill group.
	GetSkillGroupMembers(context.Context, *connect_go.Request[skills.GetSkillGroupMembersRequest]) (*connect_go.Response[skills.GetSkillGroupMembersResponse], error)
	// ListSkillGroupsMembers gets the members of a skill group for each skill group in an Org.
	ListSkillGroupsMembers(context.Context, *connect_go.Request[skills.ListSkillGroupsMembersRequest]) (*connect_go.Response[skills.ListSkillGroupsMembersResponse], error)
}

// NewSkillsServiceClient constructs a client for the api.v1alpha1.org.skills.SkillsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSkillsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SkillsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &skillsServiceClient{
		createSkillGroup: connect_go.NewClient[skills.CreateSkillGroupRequest, skills.CreateSkillGroupResponse](
			httpClient,
			baseURL+SkillsServiceCreateSkillGroupProcedure,
			opts...,
		),
		listSkillGroups: connect_go.NewClient[skills.ListSkillGroupsRequest, skills.ListSkillGroupsResponse](
			httpClient,
			baseURL+SkillsServiceListSkillGroupsProcedure,
			opts...,
		),
		updateSkillGroup: connect_go.NewClient[skills.UpdateSkillGroupRequest, skills.UpdateSkillGroupResponse](
			httpClient,
			baseURL+SkillsServiceUpdateSkillGroupProcedure,
			opts...,
		),
		getSkillGroup: connect_go.NewClient[skills.GetSkillGroupRequest, skills.GetSkillGroupResponse](
			httpClient,
			baseURL+SkillsServiceGetSkillGroupProcedure,
			opts...,
		),
		deleteSkillGroup: connect_go.NewClient[skills.DeleteSkillGroupRequest, skills.DeleteSkillGroupResponse](
			httpClient,
			baseURL+SkillsServiceDeleteSkillGroupProcedure,
			opts...,
		),
		removeSkillFromAllGroups: connect_go.NewClient[skills.RemoveSkillFromAllGroupsRequest, skills.RemoveSkillFromAllGroupsResponse](
			httpClient,
			baseURL+SkillsServiceRemoveSkillFromAllGroupsProcedure,
			opts...,
		),
		assignSkillGroups: connect_go.NewClient[skills.AssignSkillGroupsRequest, skills.AssignSkillGroupsResponse](
			httpClient,
			baseURL+SkillsServiceAssignSkillGroupsProcedure,
			opts...,
		),
		updateUsersOnSkillGroup: connect_go.NewClient[skills.UpdateUsersOnSkillGroupRequest, skills.UpdateUsersOnSkillGroupResponse](
			httpClient,
			baseURL+SkillsServiceUpdateUsersOnSkillGroupProcedure,
			opts...,
		),
		revokeSkillGroups: connect_go.NewClient[skills.RevokeSkillGroupsRequest, skills.RevokeSkillGroupsResponse](
			httpClient,
			baseURL+SkillsServiceRevokeSkillGroupsProcedure,
			opts...,
		),
		getUserSkillGroups: connect_go.NewClient[skills.GetUserSkillGroupsRequest, skills.GetUserSkillGroupsResponse](
			httpClient,
			baseURL+SkillsServiceGetUserSkillGroupsProcedure,
			opts...,
		),
		getUserSkills: connect_go.NewClient[skills.GetUserSkillsRequest, skills.GetUserSkillsResponse](
			httpClient,
			baseURL+SkillsServiceGetUserSkillsProcedure,
			opts...,
		),
		getSkillGroupMembers: connect_go.NewClient[skills.GetSkillGroupMembersRequest, skills.GetSkillGroupMembersResponse](
			httpClient,
			baseURL+SkillsServiceGetSkillGroupMembersProcedure,
			opts...,
		),
		listSkillGroupsMembers: connect_go.NewClient[skills.ListSkillGroupsMembersRequest, skills.ListSkillGroupsMembersResponse](
			httpClient,
			baseURL+SkillsServiceListSkillGroupsMembersProcedure,
			opts...,
		),
	}
}

// skillsServiceClient implements SkillsServiceClient.
type skillsServiceClient struct {
	createSkillGroup         *connect_go.Client[skills.CreateSkillGroupRequest, skills.CreateSkillGroupResponse]
	listSkillGroups          *connect_go.Client[skills.ListSkillGroupsRequest, skills.ListSkillGroupsResponse]
	updateSkillGroup         *connect_go.Client[skills.UpdateSkillGroupRequest, skills.UpdateSkillGroupResponse]
	getSkillGroup            *connect_go.Client[skills.GetSkillGroupRequest, skills.GetSkillGroupResponse]
	deleteSkillGroup         *connect_go.Client[skills.DeleteSkillGroupRequest, skills.DeleteSkillGroupResponse]
	removeSkillFromAllGroups *connect_go.Client[skills.RemoveSkillFromAllGroupsRequest, skills.RemoveSkillFromAllGroupsResponse]
	assignSkillGroups        *connect_go.Client[skills.AssignSkillGroupsRequest, skills.AssignSkillGroupsResponse]
	updateUsersOnSkillGroup  *connect_go.Client[skills.UpdateUsersOnSkillGroupRequest, skills.UpdateUsersOnSkillGroupResponse]
	revokeSkillGroups        *connect_go.Client[skills.RevokeSkillGroupsRequest, skills.RevokeSkillGroupsResponse]
	getUserSkillGroups       *connect_go.Client[skills.GetUserSkillGroupsRequest, skills.GetUserSkillGroupsResponse]
	getUserSkills            *connect_go.Client[skills.GetUserSkillsRequest, skills.GetUserSkillsResponse]
	getSkillGroupMembers     *connect_go.Client[skills.GetSkillGroupMembersRequest, skills.GetSkillGroupMembersResponse]
	listSkillGroupsMembers   *connect_go.Client[skills.ListSkillGroupsMembersRequest, skills.ListSkillGroupsMembersResponse]
}

// CreateSkillGroup calls api.v1alpha1.org.skills.SkillsService.CreateSkillGroup.
func (c *skillsServiceClient) CreateSkillGroup(ctx context.Context, req *connect_go.Request[skills.CreateSkillGroupRequest]) (*connect_go.Response[skills.CreateSkillGroupResponse], error) {
	return c.createSkillGroup.CallUnary(ctx, req)
}

// ListSkillGroups calls api.v1alpha1.org.skills.SkillsService.ListSkillGroups.
func (c *skillsServiceClient) ListSkillGroups(ctx context.Context, req *connect_go.Request[skills.ListSkillGroupsRequest]) (*connect_go.Response[skills.ListSkillGroupsResponse], error) {
	return c.listSkillGroups.CallUnary(ctx, req)
}

// UpdateSkillGroup calls api.v1alpha1.org.skills.SkillsService.UpdateSkillGroup.
func (c *skillsServiceClient) UpdateSkillGroup(ctx context.Context, req *connect_go.Request[skills.UpdateSkillGroupRequest]) (*connect_go.Response[skills.UpdateSkillGroupResponse], error) {
	return c.updateSkillGroup.CallUnary(ctx, req)
}

// GetSkillGroup calls api.v1alpha1.org.skills.SkillsService.GetSkillGroup.
func (c *skillsServiceClient) GetSkillGroup(ctx context.Context, req *connect_go.Request[skills.GetSkillGroupRequest]) (*connect_go.Response[skills.GetSkillGroupResponse], error) {
	return c.getSkillGroup.CallUnary(ctx, req)
}

// DeleteSkillGroup calls api.v1alpha1.org.skills.SkillsService.DeleteSkillGroup.
func (c *skillsServiceClient) DeleteSkillGroup(ctx context.Context, req *connect_go.Request[skills.DeleteSkillGroupRequest]) (*connect_go.Response[skills.DeleteSkillGroupResponse], error) {
	return c.deleteSkillGroup.CallUnary(ctx, req)
}

// RemoveSkillFromAllGroups calls api.v1alpha1.org.skills.SkillsService.RemoveSkillFromAllGroups.
func (c *skillsServiceClient) RemoveSkillFromAllGroups(ctx context.Context, req *connect_go.Request[skills.RemoveSkillFromAllGroupsRequest]) (*connect_go.Response[skills.RemoveSkillFromAllGroupsResponse], error) {
	return c.removeSkillFromAllGroups.CallUnary(ctx, req)
}

// AssignSkillGroups calls api.v1alpha1.org.skills.SkillsService.AssignSkillGroups.
func (c *skillsServiceClient) AssignSkillGroups(ctx context.Context, req *connect_go.Request[skills.AssignSkillGroupsRequest]) (*connect_go.Response[skills.AssignSkillGroupsResponse], error) {
	return c.assignSkillGroups.CallUnary(ctx, req)
}

// UpdateUsersOnSkillGroup calls api.v1alpha1.org.skills.SkillsService.UpdateUsersOnSkillGroup.
func (c *skillsServiceClient) UpdateUsersOnSkillGroup(ctx context.Context, req *connect_go.Request[skills.UpdateUsersOnSkillGroupRequest]) (*connect_go.Response[skills.UpdateUsersOnSkillGroupResponse], error) {
	return c.updateUsersOnSkillGroup.CallUnary(ctx, req)
}

// RevokeSkillGroups calls api.v1alpha1.org.skills.SkillsService.RevokeSkillGroups.
func (c *skillsServiceClient) RevokeSkillGroups(ctx context.Context, req *connect_go.Request[skills.RevokeSkillGroupsRequest]) (*connect_go.Response[skills.RevokeSkillGroupsResponse], error) {
	return c.revokeSkillGroups.CallUnary(ctx, req)
}

// GetUserSkillGroups calls api.v1alpha1.org.skills.SkillsService.GetUserSkillGroups.
func (c *skillsServiceClient) GetUserSkillGroups(ctx context.Context, req *connect_go.Request[skills.GetUserSkillGroupsRequest]) (*connect_go.Response[skills.GetUserSkillGroupsResponse], error) {
	return c.getUserSkillGroups.CallUnary(ctx, req)
}

// GetUserSkills calls api.v1alpha1.org.skills.SkillsService.GetUserSkills.
func (c *skillsServiceClient) GetUserSkills(ctx context.Context, req *connect_go.Request[skills.GetUserSkillsRequest]) (*connect_go.Response[skills.GetUserSkillsResponse], error) {
	return c.getUserSkills.CallUnary(ctx, req)
}

// GetSkillGroupMembers calls api.v1alpha1.org.skills.SkillsService.GetSkillGroupMembers.
func (c *skillsServiceClient) GetSkillGroupMembers(ctx context.Context, req *connect_go.Request[skills.GetSkillGroupMembersRequest]) (*connect_go.Response[skills.GetSkillGroupMembersResponse], error) {
	return c.getSkillGroupMembers.CallUnary(ctx, req)
}

// ListSkillGroupsMembers calls api.v1alpha1.org.skills.SkillsService.ListSkillGroupsMembers.
func (c *skillsServiceClient) ListSkillGroupsMembers(ctx context.Context, req *connect_go.Request[skills.ListSkillGroupsMembersRequest]) (*connect_go.Response[skills.ListSkillGroupsMembersResponse], error) {
	return c.listSkillGroupsMembers.CallUnary(ctx, req)
}

// SkillsServiceHandler is an implementation of the api.v1alpha1.org.skills.SkillsService service.
type SkillsServiceHandler interface {
	// CreateSkillGroup creates a new skill group.
	CreateSkillGroup(context.Context, *connect_go.Request[skills.CreateSkillGroupRequest]) (*connect_go.Response[skills.CreateSkillGroupResponse], error)
	// ListSkillGroups lists the skill groups belonging to an organization.
	ListSkillGroups(context.Context, *connect_go.Request[skills.ListSkillGroupsRequest]) (*connect_go.Response[skills.ListSkillGroupsResponse], error)
	// UpdateSkillGroup updates a single skill group.
	UpdateSkillGroup(context.Context, *connect_go.Request[skills.UpdateSkillGroupRequest]) (*connect_go.Response[skills.UpdateSkillGroupResponse], error)
	// GetSkillGroup gets a single skill group.
	GetSkillGroup(context.Context, *connect_go.Request[skills.GetSkillGroupRequest]) (*connect_go.Response[skills.GetSkillGroupResponse], error)
	// DeleteSkillGroup deletes a skill group.
	DeleteSkillGroup(context.Context, *connect_go.Request[skills.DeleteSkillGroupRequest]) (*connect_go.Response[skills.DeleteSkillGroupResponse], error)
	// RemoveSkillFromAllGroups removes a skill from all skill groups which contain it.
	RemoveSkillFromAllGroups(context.Context, *connect_go.Request[skills.RemoveSkillFromAllGroupsRequest]) (*connect_go.Response[skills.RemoveSkillFromAllGroupsResponse], error)
	// AssignSkillGroups assigns a user to the given skill groups.
	AssignSkillGroups(context.Context, *connect_go.Request[skills.AssignSkillGroupsRequest]) (*connect_go.Response[skills.AssignSkillGroupsResponse], error)
	// UpdateUsersOnSkillGroup updates a skill groups assigned users.
	UpdateUsersOnSkillGroup(context.Context, *connect_go.Request[skills.UpdateUsersOnSkillGroupRequest]) (*connect_go.Response[skills.UpdateUsersOnSkillGroupResponse], error)
	// RevokeSkillGroups revokes the given skill groups from a user.
	RevokeSkillGroups(context.Context, *connect_go.Request[skills.RevokeSkillGroupsRequest]) (*connect_go.Response[skills.RevokeSkillGroupsResponse], error)
	// GetUserSkillGroups gets the skill groups assigned to a user.
	GetUserSkillGroups(context.Context, *connect_go.Request[skills.GetUserSkillGroupsRequest]) (*connect_go.Response[skills.GetUserSkillGroupsResponse], error)
	// GetUserSkills gets a user's skill proficiencies.
	GetUserSkills(context.Context, *connect_go.Request[skills.GetUserSkillsRequest]) (*connect_go.Response[skills.GetUserSkillsResponse], error)
	// GetSkillGroupMembers gets the members of a skill group.
	GetSkillGroupMembers(context.Context, *connect_go.Request[skills.GetSkillGroupMembersRequest]) (*connect_go.Response[skills.GetSkillGroupMembersResponse], error)
	// ListSkillGroupsMembers gets the members of a skill group for each skill group in an Org.
	ListSkillGroupsMembers(context.Context, *connect_go.Request[skills.ListSkillGroupsMembersRequest]) (*connect_go.Response[skills.ListSkillGroupsMembersResponse], error)
}

// NewSkillsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSkillsServiceHandler(svc SkillsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	skillsServiceCreateSkillGroupHandler := connect_go.NewUnaryHandler(
		SkillsServiceCreateSkillGroupProcedure,
		svc.CreateSkillGroup,
		opts...,
	)
	skillsServiceListSkillGroupsHandler := connect_go.NewUnaryHandler(
		SkillsServiceListSkillGroupsProcedure,
		svc.ListSkillGroups,
		opts...,
	)
	skillsServiceUpdateSkillGroupHandler := connect_go.NewUnaryHandler(
		SkillsServiceUpdateSkillGroupProcedure,
		svc.UpdateSkillGroup,
		opts...,
	)
	skillsServiceGetSkillGroupHandler := connect_go.NewUnaryHandler(
		SkillsServiceGetSkillGroupProcedure,
		svc.GetSkillGroup,
		opts...,
	)
	skillsServiceDeleteSkillGroupHandler := connect_go.NewUnaryHandler(
		SkillsServiceDeleteSkillGroupProcedure,
		svc.DeleteSkillGroup,
		opts...,
	)
	skillsServiceRemoveSkillFromAllGroupsHandler := connect_go.NewUnaryHandler(
		SkillsServiceRemoveSkillFromAllGroupsProcedure,
		svc.RemoveSkillFromAllGroups,
		opts...,
	)
	skillsServiceAssignSkillGroupsHandler := connect_go.NewUnaryHandler(
		SkillsServiceAssignSkillGroupsProcedure,
		svc.AssignSkillGroups,
		opts...,
	)
	skillsServiceUpdateUsersOnSkillGroupHandler := connect_go.NewUnaryHandler(
		SkillsServiceUpdateUsersOnSkillGroupProcedure,
		svc.UpdateUsersOnSkillGroup,
		opts...,
	)
	skillsServiceRevokeSkillGroupsHandler := connect_go.NewUnaryHandler(
		SkillsServiceRevokeSkillGroupsProcedure,
		svc.RevokeSkillGroups,
		opts...,
	)
	skillsServiceGetUserSkillGroupsHandler := connect_go.NewUnaryHandler(
		SkillsServiceGetUserSkillGroupsProcedure,
		svc.GetUserSkillGroups,
		opts...,
	)
	skillsServiceGetUserSkillsHandler := connect_go.NewUnaryHandler(
		SkillsServiceGetUserSkillsProcedure,
		svc.GetUserSkills,
		opts...,
	)
	skillsServiceGetSkillGroupMembersHandler := connect_go.NewUnaryHandler(
		SkillsServiceGetSkillGroupMembersProcedure,
		svc.GetSkillGroupMembers,
		opts...,
	)
	skillsServiceListSkillGroupsMembersHandler := connect_go.NewUnaryHandler(
		SkillsServiceListSkillGroupsMembersProcedure,
		svc.ListSkillGroupsMembers,
		opts...,
	)
	return "/api.v1alpha1.org.skills.SkillsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SkillsServiceCreateSkillGroupProcedure:
			skillsServiceCreateSkillGroupHandler.ServeHTTP(w, r)
		case SkillsServiceListSkillGroupsProcedure:
			skillsServiceListSkillGroupsHandler.ServeHTTP(w, r)
		case SkillsServiceUpdateSkillGroupProcedure:
			skillsServiceUpdateSkillGroupHandler.ServeHTTP(w, r)
		case SkillsServiceGetSkillGroupProcedure:
			skillsServiceGetSkillGroupHandler.ServeHTTP(w, r)
		case SkillsServiceDeleteSkillGroupProcedure:
			skillsServiceDeleteSkillGroupHandler.ServeHTTP(w, r)
		case SkillsServiceRemoveSkillFromAllGroupsProcedure:
			skillsServiceRemoveSkillFromAllGroupsHandler.ServeHTTP(w, r)
		case SkillsServiceAssignSkillGroupsProcedure:
			skillsServiceAssignSkillGroupsHandler.ServeHTTP(w, r)
		case SkillsServiceUpdateUsersOnSkillGroupProcedure:
			skillsServiceUpdateUsersOnSkillGroupHandler.ServeHTTP(w, r)
		case SkillsServiceRevokeSkillGroupsProcedure:
			skillsServiceRevokeSkillGroupsHandler.ServeHTTP(w, r)
		case SkillsServiceGetUserSkillGroupsProcedure:
			skillsServiceGetUserSkillGroupsHandler.ServeHTTP(w, r)
		case SkillsServiceGetUserSkillsProcedure:
			skillsServiceGetUserSkillsHandler.ServeHTTP(w, r)
		case SkillsServiceGetSkillGroupMembersProcedure:
			skillsServiceGetSkillGroupMembersHandler.ServeHTTP(w, r)
		case SkillsServiceListSkillGroupsMembersProcedure:
			skillsServiceListSkillGroupsMembersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSkillsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSkillsServiceHandler struct{}

func (UnimplementedSkillsServiceHandler) CreateSkillGroup(context.Context, *connect_go.Request[skills.CreateSkillGroupRequest]) (*connect_go.Response[skills.CreateSkillGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.skills.SkillsService.CreateSkillGroup is not implemented"))
}

func (UnimplementedSkillsServiceHandler) ListSkillGroups(context.Context, *connect_go.Request[skills.ListSkillGroupsRequest]) (*connect_go.Response[skills.ListSkillGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.skills.SkillsService.ListSkillGroups is not implemented"))
}

func (UnimplementedSkillsServiceHandler) UpdateSkillGroup(context.Context, *connect_go.Request[skills.UpdateSkillGroupRequest]) (*connect_go.Response[skills.UpdateSkillGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.skills.SkillsService.UpdateSkillGroup is not implemented"))
}

func (UnimplementedSkillsServiceHandler) GetSkillGroup(context.Context, *connect_go.Request[skills.GetSkillGroupRequest]) (*connect_go.Response[skills.GetSkillGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.skills.SkillsService.GetSkillGroup is not implemented"))
}

func (UnimplementedSkillsServiceHandler) DeleteSkillGroup(context.Context, *connect_go.Request[skills.DeleteSkillGroupRequest]) (*connect_go.Response[skills.DeleteSkillGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.skills.SkillsService.DeleteSkillGroup is not implemented"))
}

func (UnimplementedSkillsServiceHandler) RemoveSkillFromAllGroups(context.Context, *connect_go.Request[skills.RemoveSkillFromAllGroupsRequest]) (*connect_go.Response[skills.RemoveSkillFromAllGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.skills.SkillsService.RemoveSkillFromAllGroups is not implemented"))
}

func (UnimplementedSkillsServiceHandler) AssignSkillGroups(context.Context, *connect_go.Request[skills.AssignSkillGroupsRequest]) (*connect_go.Response[skills.AssignSkillGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.skills.SkillsService.AssignSkillGroups is not implemented"))
}

func (UnimplementedSkillsServiceHandler) UpdateUsersOnSkillGroup(context.Context, *connect_go.Request[skills.UpdateUsersOnSkillGroupRequest]) (*connect_go.Response[skills.UpdateUsersOnSkillGroupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.skills.SkillsService.UpdateUsersOnSkillGroup is not implemented"))
}

func (UnimplementedSkillsServiceHandler) RevokeSkillGroups(context.Context, *connect_go.Request[skills.RevokeSkillGroupsRequest]) (*connect_go.Response[skills.RevokeSkillGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.skills.SkillsService.RevokeSkillGroups is not implemented"))
}

func (UnimplementedSkillsServiceHandler) GetUserSkillGroups(context.Context, *connect_go.Request[skills.GetUserSkillGroupsRequest]) (*connect_go.Response[skills.GetUserSkillGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.skills.SkillsService.GetUserSkillGroups is not implemented"))
}

func (UnimplementedSkillsServiceHandler) GetUserSkills(context.Context, *connect_go.Request[skills.GetUserSkillsRequest]) (*connect_go.Response[skills.GetUserSkillsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.skills.SkillsService.GetUserSkills is not implemented"))
}

func (UnimplementedSkillsServiceHandler) GetSkillGroupMembers(context.Context, *connect_go.Request[skills.GetSkillGroupMembersRequest]) (*connect_go.Response[skills.GetSkillGroupMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.skills.SkillsService.GetSkillGroupMembers is not implemented"))
}

func (UnimplementedSkillsServiceHandler) ListSkillGroupsMembers(context.Context, *connect_go.Request[skills.ListSkillGroupsMembersRequest]) (*connect_go.Response[skills.ListSkillGroupsMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.org.skills.SkillsService.ListSkillGroupsMembers is not implemented"))
}
