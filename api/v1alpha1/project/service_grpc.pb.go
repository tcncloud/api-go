// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1alpha1/project/service.proto

package project

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectApi_CreateProject_FullMethodName               = "/api.v1alpha1.project.ProjectApi/CreateProject"
	ProjectApi_ListProjects_FullMethodName                = "/api.v1alpha1.project.ProjectApi/ListProjects"
	ProjectApi_EditProjectById_FullMethodName             = "/api.v1alpha1.project.ProjectApi/EditProjectById"
	ProjectApi_CloseProjectById_FullMethodName            = "/api.v1alpha1.project.ProjectApi/CloseProjectById"
	ProjectApi_GetProjectById_FullMethodName              = "/api.v1alpha1.project.ProjectApi/GetProjectById"
	ProjectApi_CreateCannedMessage_FullMethodName         = "/api.v1alpha1.project.ProjectApi/CreateCannedMessage"
	ProjectApi_ListCannedMessages_FullMethodName          = "/api.v1alpha1.project.ProjectApi/ListCannedMessages"
	ProjectApi_UpdateCannedMessage_FullMethodName         = "/api.v1alpha1.project.ProjectApi/UpdateCannedMessage"
	ProjectApi_GetCannedMessageById_FullMethodName        = "/api.v1alpha1.project.ProjectApi/GetCannedMessageById"
	ProjectApi_DeleteCannedMessageById_FullMethodName     = "/api.v1alpha1.project.ProjectApi/DeleteCannedMessageById"
	ProjectApi_CreateCannedMessageGroup_FullMethodName    = "/api.v1alpha1.project.ProjectApi/CreateCannedMessageGroup"
	ProjectApi_ListCannedMessageGroups_FullMethodName     = "/api.v1alpha1.project.ProjectApi/ListCannedMessageGroups"
	ProjectApi_UpdateCannedMessageGroup_FullMethodName    = "/api.v1alpha1.project.ProjectApi/UpdateCannedMessageGroup"
	ProjectApi_DeleteCannedMessageGroup_FullMethodName    = "/api.v1alpha1.project.ProjectApi/DeleteCannedMessageGroup"
	ProjectApi_ListCannedMessagesByGroupId_FullMethodName = "/api.v1alpha1.project.ProjectApi/ListCannedMessagesByGroupId"
	ProjectApi_GetCannedMessageGroupById_FullMethodName   = "/api.v1alpha1.project.ProjectApi/GetCannedMessageGroupById"
)

// ProjectApiClient is the client API for ProjectApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectApiClient interface {
	// Create/Record project defined by CreateProjectReq message for a specified
	// name, description and status.
	// The method will return a Project message/entity that will
	// contain the newly created project_id value for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*CreateProjectRes, error)
	// list projects for the current org
	// The method will return a list of Project messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListProjects(ctx context.Context, in *ListProjectsReq, opts ...grpc.CallOption) (*ListProjectsRes, error)
	// Update project defined by EditProjectByIdReq message for a specified
	// project id.
	// The method will return a Project message/entity that will
	// contain the updated details for the project_id
	// Required permissions:
	//
	//	OMNI_BOSS
	EditProjectById(ctx context.Context, in *EditProjectByIdReq, opts ...grpc.CallOption) (*EditProjectByIdRes, error)
	// Closes project defined by CloseProjectByIdReq message for a specified
	// project id.
	// The method will stop all child campaigns and return a an empty response
	// if successful
	// Required permissions:
	//
	//	OMNI_BOSS
	CloseProjectById(ctx context.Context, in *CloseProjectByIdReq, opts ...grpc.CallOption) (*CloseProjectByIdRes, error)
	// Get project details defined by GetProjectByIdReq message for a specified
	// project id.
	// The method will return a GetProjectByIdRes message/entity that will
	// contain all the project details for the project_id
	// Required permissions:
	//
	//	OMNI_BOSS
	GetProjectById(ctx context.Context, in *GetProjectByIdReq, opts ...grpc.CallOption) (*Project, error)
	// Create/Record canned message defined by CreateCannedMessageReq message for a specified
	// name, description and message_body.
	// The method will return a CannedMessage message/entity that will
	// contain the newly created canned message details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateCannedMessage(ctx context.Context, in *CreateCannedMessageReq, opts ...grpc.CallOption) (*CannedMessage, error)
	// list canned messages for the current org
	// The method will return a list of canned messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessages(ctx context.Context, in *ListCannedMessagesReq, opts ...grpc.CallOption) (*ListCannedMessagesRes, error)
	// Update canned message defined by UpdateCannedMessageReq message for a specified
	// name, description and message_body.
	// The method will return a CannedMessage message/entity that will
	// contain the updated canned message details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCannedMessage(ctx context.Context, in *UpdateCannedMessageReq, opts ...grpc.CallOption) (*CannedMessage, error)
	// Get canned message details for the canned_message_id
	// The method will return an canned message/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	GetCannedMessageById(ctx context.Context, in *GetCannedMessageByIdReq, opts ...grpc.CallOption) (*CannedMessageWithGroup, error)
	// Delete canned message details for the canned_message_id
	// The method will delete an canned message/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteCannedMessageById(ctx context.Context, in *DeleteCannedMessageByIdReq, opts ...grpc.CallOption) (*DeleteCannedMessageByIdRes, error)
	// Create/Record canned message group defined by CreateCannedMessageGroup Req message for a specified
	// name and description.
	// The method will return a CannedMessageGroup message/entity that will
	// contain the newly created canned message group details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateCannedMessageGroup(ctx context.Context, in *CreateCannedMessageGroupReq, opts ...grpc.CallOption) (*CannedMessageGroup, error)
	// list canned message groups for the current org
	// The method will return a list of canned message groups/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessageGroups(ctx context.Context, in *ListCannedMessageGroupsReq, opts ...grpc.CallOption) (*ListCannedMessageGroupsRes, error)
	// Update canned message group defined by UpdateCannedMessageGroupReq message for a specified
	// name and description.
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCannedMessageGroup(ctx context.Context, in *UpdateCannedMessageGroupReq, opts ...grpc.CallOption) (*UpdateCannedMessageGroupRes, error)
	// Delete canned message group and all the related messages for the canned_message_group_id
	// The method will delete an canned message group/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteCannedMessageGroup(ctx context.Context, in *DeleteCannedMessageGroupReq, opts ...grpc.CallOption) (*DeleteCannedMessageGroupRes, error)
	// list canned messages for the group
	// The method will return a list of canned messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessagesByGroupId(ctx context.Context, in *ListCannedMessagesByGroupIdReq, opts ...grpc.CallOption) (*ListCannedMessagesByGroupIdRes, error)
	// Get canned message group details for the canned_message_group_id
	// The method will return an canned message group/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	GetCannedMessageGroupById(ctx context.Context, in *GetCannedMessageGroupByIdReq, opts ...grpc.CallOption) (*CannedMessageGroup, error)
}

type projectApiClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectApiClient(cc grpc.ClientConnInterface) ProjectApiClient {
	return &projectApiClient{cc}
}

func (c *projectApiClient) CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*CreateProjectRes, error) {
	out := new(CreateProjectRes)
	err := c.cc.Invoke(ctx, ProjectApi_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) ListProjects(ctx context.Context, in *ListProjectsReq, opts ...grpc.CallOption) (*ListProjectsRes, error) {
	out := new(ListProjectsRes)
	err := c.cc.Invoke(ctx, ProjectApi_ListProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) EditProjectById(ctx context.Context, in *EditProjectByIdReq, opts ...grpc.CallOption) (*EditProjectByIdRes, error) {
	out := new(EditProjectByIdRes)
	err := c.cc.Invoke(ctx, ProjectApi_EditProjectById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) CloseProjectById(ctx context.Context, in *CloseProjectByIdReq, opts ...grpc.CallOption) (*CloseProjectByIdRes, error) {
	out := new(CloseProjectByIdRes)
	err := c.cc.Invoke(ctx, ProjectApi_CloseProjectById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) GetProjectById(ctx context.Context, in *GetProjectByIdReq, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, ProjectApi_GetProjectById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) CreateCannedMessage(ctx context.Context, in *CreateCannedMessageReq, opts ...grpc.CallOption) (*CannedMessage, error) {
	out := new(CannedMessage)
	err := c.cc.Invoke(ctx, ProjectApi_CreateCannedMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) ListCannedMessages(ctx context.Context, in *ListCannedMessagesReq, opts ...grpc.CallOption) (*ListCannedMessagesRes, error) {
	out := new(ListCannedMessagesRes)
	err := c.cc.Invoke(ctx, ProjectApi_ListCannedMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) UpdateCannedMessage(ctx context.Context, in *UpdateCannedMessageReq, opts ...grpc.CallOption) (*CannedMessage, error) {
	out := new(CannedMessage)
	err := c.cc.Invoke(ctx, ProjectApi_UpdateCannedMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) GetCannedMessageById(ctx context.Context, in *GetCannedMessageByIdReq, opts ...grpc.CallOption) (*CannedMessageWithGroup, error) {
	out := new(CannedMessageWithGroup)
	err := c.cc.Invoke(ctx, ProjectApi_GetCannedMessageById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) DeleteCannedMessageById(ctx context.Context, in *DeleteCannedMessageByIdReq, opts ...grpc.CallOption) (*DeleteCannedMessageByIdRes, error) {
	out := new(DeleteCannedMessageByIdRes)
	err := c.cc.Invoke(ctx, ProjectApi_DeleteCannedMessageById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) CreateCannedMessageGroup(ctx context.Context, in *CreateCannedMessageGroupReq, opts ...grpc.CallOption) (*CannedMessageGroup, error) {
	out := new(CannedMessageGroup)
	err := c.cc.Invoke(ctx, ProjectApi_CreateCannedMessageGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) ListCannedMessageGroups(ctx context.Context, in *ListCannedMessageGroupsReq, opts ...grpc.CallOption) (*ListCannedMessageGroupsRes, error) {
	out := new(ListCannedMessageGroupsRes)
	err := c.cc.Invoke(ctx, ProjectApi_ListCannedMessageGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) UpdateCannedMessageGroup(ctx context.Context, in *UpdateCannedMessageGroupReq, opts ...grpc.CallOption) (*UpdateCannedMessageGroupRes, error) {
	out := new(UpdateCannedMessageGroupRes)
	err := c.cc.Invoke(ctx, ProjectApi_UpdateCannedMessageGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) DeleteCannedMessageGroup(ctx context.Context, in *DeleteCannedMessageGroupReq, opts ...grpc.CallOption) (*DeleteCannedMessageGroupRes, error) {
	out := new(DeleteCannedMessageGroupRes)
	err := c.cc.Invoke(ctx, ProjectApi_DeleteCannedMessageGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) ListCannedMessagesByGroupId(ctx context.Context, in *ListCannedMessagesByGroupIdReq, opts ...grpc.CallOption) (*ListCannedMessagesByGroupIdRes, error) {
	out := new(ListCannedMessagesByGroupIdRes)
	err := c.cc.Invoke(ctx, ProjectApi_ListCannedMessagesByGroupId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectApiClient) GetCannedMessageGroupById(ctx context.Context, in *GetCannedMessageGroupByIdReq, opts ...grpc.CallOption) (*CannedMessageGroup, error) {
	out := new(CannedMessageGroup)
	err := c.cc.Invoke(ctx, ProjectApi_GetCannedMessageGroupById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectApiServer is the server API for ProjectApi service.
// All implementations must embed UnimplementedProjectApiServer
// for forward compatibility
type ProjectApiServer interface {
	// Create/Record project defined by CreateProjectReq message for a specified
	// name, description and status.
	// The method will return a Project message/entity that will
	// contain the newly created project_id value for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateProject(context.Context, *CreateProjectReq) (*CreateProjectRes, error)
	// list projects for the current org
	// The method will return a list of Project messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListProjects(context.Context, *ListProjectsReq) (*ListProjectsRes, error)
	// Update project defined by EditProjectByIdReq message for a specified
	// project id.
	// The method will return a Project message/entity that will
	// contain the updated details for the project_id
	// Required permissions:
	//
	//	OMNI_BOSS
	EditProjectById(context.Context, *EditProjectByIdReq) (*EditProjectByIdRes, error)
	// Closes project defined by CloseProjectByIdReq message for a specified
	// project id.
	// The method will stop all child campaigns and return a an empty response
	// if successful
	// Required permissions:
	//
	//	OMNI_BOSS
	CloseProjectById(context.Context, *CloseProjectByIdReq) (*CloseProjectByIdRes, error)
	// Get project details defined by GetProjectByIdReq message for a specified
	// project id.
	// The method will return a GetProjectByIdRes message/entity that will
	// contain all the project details for the project_id
	// Required permissions:
	//
	//	OMNI_BOSS
	GetProjectById(context.Context, *GetProjectByIdReq) (*Project, error)
	// Create/Record canned message defined by CreateCannedMessageReq message for a specified
	// name, description and message_body.
	// The method will return a CannedMessage message/entity that will
	// contain the newly created canned message details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateCannedMessage(context.Context, *CreateCannedMessageReq) (*CannedMessage, error)
	// list canned messages for the current org
	// The method will return a list of canned messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessages(context.Context, *ListCannedMessagesReq) (*ListCannedMessagesRes, error)
	// Update canned message defined by UpdateCannedMessageReq message for a specified
	// name, description and message_body.
	// The method will return a CannedMessage message/entity that will
	// contain the updated canned message details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCannedMessage(context.Context, *UpdateCannedMessageReq) (*CannedMessage, error)
	// Get canned message details for the canned_message_id
	// The method will return an canned message/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	GetCannedMessageById(context.Context, *GetCannedMessageByIdReq) (*CannedMessageWithGroup, error)
	// Delete canned message details for the canned_message_id
	// The method will delete an canned message/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteCannedMessageById(context.Context, *DeleteCannedMessageByIdReq) (*DeleteCannedMessageByIdRes, error)
	// Create/Record canned message group defined by CreateCannedMessageGroup Req message for a specified
	// name and description.
	// The method will return a CannedMessageGroup message/entity that will
	// contain the newly created canned message group details for this client
	// Required permissions:
	//
	//	OMNI_BOSS
	CreateCannedMessageGroup(context.Context, *CreateCannedMessageGroupReq) (*CannedMessageGroup, error)
	// list canned message groups for the current org
	// The method will return a list of canned message groups/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessageGroups(context.Context, *ListCannedMessageGroupsReq) (*ListCannedMessageGroupsRes, error)
	// Update canned message group defined by UpdateCannedMessageGroupReq message for a specified
	// name and description.
	// Required permissions:
	//
	//	OMNI_BOSS
	UpdateCannedMessageGroup(context.Context, *UpdateCannedMessageGroupReq) (*UpdateCannedMessageGroupRes, error)
	// Delete canned message group and all the related messages for the canned_message_group_id
	// The method will delete an canned message group/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	DeleteCannedMessageGroup(context.Context, *DeleteCannedMessageGroupReq) (*DeleteCannedMessageGroupRes, error)
	// list canned messages for the group
	// The method will return a list of canned messages/entities
	// Required permissions:
	//
	//	OMNI_BOSS
	ListCannedMessagesByGroupId(context.Context, *ListCannedMessagesByGroupIdReq) (*ListCannedMessagesByGroupIdRes, error)
	// Get canned message group details for the canned_message_group_id
	// The method will return an canned message group/entity
	// Required permissions:
	//
	//	OMNI_BOSS
	GetCannedMessageGroupById(context.Context, *GetCannedMessageGroupByIdReq) (*CannedMessageGroup, error)
	mustEmbedUnimplementedProjectApiServer()
}

// UnimplementedProjectApiServer must be embedded to have forward compatible implementations.
type UnimplementedProjectApiServer struct {
}

func (UnimplementedProjectApiServer) CreateProject(context.Context, *CreateProjectReq) (*CreateProjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectApiServer) ListProjects(context.Context, *ListProjectsReq) (*ListProjectsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedProjectApiServer) EditProjectById(context.Context, *EditProjectByIdReq) (*EditProjectByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditProjectById not implemented")
}
func (UnimplementedProjectApiServer) CloseProjectById(context.Context, *CloseProjectByIdReq) (*CloseProjectByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseProjectById not implemented")
}
func (UnimplementedProjectApiServer) GetProjectById(context.Context, *GetProjectByIdReq) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectById not implemented")
}
func (UnimplementedProjectApiServer) CreateCannedMessage(context.Context, *CreateCannedMessageReq) (*CannedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCannedMessage not implemented")
}
func (UnimplementedProjectApiServer) ListCannedMessages(context.Context, *ListCannedMessagesReq) (*ListCannedMessagesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCannedMessages not implemented")
}
func (UnimplementedProjectApiServer) UpdateCannedMessage(context.Context, *UpdateCannedMessageReq) (*CannedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCannedMessage not implemented")
}
func (UnimplementedProjectApiServer) GetCannedMessageById(context.Context, *GetCannedMessageByIdReq) (*CannedMessageWithGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCannedMessageById not implemented")
}
func (UnimplementedProjectApiServer) DeleteCannedMessageById(context.Context, *DeleteCannedMessageByIdReq) (*DeleteCannedMessageByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCannedMessageById not implemented")
}
func (UnimplementedProjectApiServer) CreateCannedMessageGroup(context.Context, *CreateCannedMessageGroupReq) (*CannedMessageGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCannedMessageGroup not implemented")
}
func (UnimplementedProjectApiServer) ListCannedMessageGroups(context.Context, *ListCannedMessageGroupsReq) (*ListCannedMessageGroupsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCannedMessageGroups not implemented")
}
func (UnimplementedProjectApiServer) UpdateCannedMessageGroup(context.Context, *UpdateCannedMessageGroupReq) (*UpdateCannedMessageGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCannedMessageGroup not implemented")
}
func (UnimplementedProjectApiServer) DeleteCannedMessageGroup(context.Context, *DeleteCannedMessageGroupReq) (*DeleteCannedMessageGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCannedMessageGroup not implemented")
}
func (UnimplementedProjectApiServer) ListCannedMessagesByGroupId(context.Context, *ListCannedMessagesByGroupIdReq) (*ListCannedMessagesByGroupIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCannedMessagesByGroupId not implemented")
}
func (UnimplementedProjectApiServer) GetCannedMessageGroupById(context.Context, *GetCannedMessageGroupByIdReq) (*CannedMessageGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCannedMessageGroupById not implemented")
}
func (UnimplementedProjectApiServer) mustEmbedUnimplementedProjectApiServer() {}

// UnsafeProjectApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectApiServer will
// result in compilation errors.
type UnsafeProjectApiServer interface {
	mustEmbedUnimplementedProjectApiServer()
}

func RegisterProjectApiServer(s grpc.ServiceRegistrar, srv ProjectApiServer) {
	s.RegisterService(&ProjectApi_ServiceDesc, srv)
}

func _ProjectApi_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).CreateProject(ctx, req.(*CreateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).ListProjects(ctx, req.(*ListProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_EditProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditProjectByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).EditProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_EditProjectById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).EditProjectById(ctx, req.(*EditProjectByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_CloseProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseProjectByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).CloseProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_CloseProjectById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).CloseProjectById(ctx, req.(*CloseProjectByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_GetProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).GetProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_GetProjectById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).GetProjectById(ctx, req.(*GetProjectByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_CreateCannedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCannedMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).CreateCannedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_CreateCannedMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).CreateCannedMessage(ctx, req.(*CreateCannedMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_ListCannedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCannedMessagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).ListCannedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_ListCannedMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).ListCannedMessages(ctx, req.(*ListCannedMessagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_UpdateCannedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCannedMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).UpdateCannedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_UpdateCannedMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).UpdateCannedMessage(ctx, req.(*UpdateCannedMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_GetCannedMessageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCannedMessageByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).GetCannedMessageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_GetCannedMessageById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).GetCannedMessageById(ctx, req.(*GetCannedMessageByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_DeleteCannedMessageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCannedMessageByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).DeleteCannedMessageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_DeleteCannedMessageById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).DeleteCannedMessageById(ctx, req.(*DeleteCannedMessageByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_CreateCannedMessageGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCannedMessageGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).CreateCannedMessageGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_CreateCannedMessageGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).CreateCannedMessageGroup(ctx, req.(*CreateCannedMessageGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_ListCannedMessageGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCannedMessageGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).ListCannedMessageGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_ListCannedMessageGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).ListCannedMessageGroups(ctx, req.(*ListCannedMessageGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_UpdateCannedMessageGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCannedMessageGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).UpdateCannedMessageGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_UpdateCannedMessageGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).UpdateCannedMessageGroup(ctx, req.(*UpdateCannedMessageGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_DeleteCannedMessageGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCannedMessageGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).DeleteCannedMessageGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_DeleteCannedMessageGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).DeleteCannedMessageGroup(ctx, req.(*DeleteCannedMessageGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_ListCannedMessagesByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCannedMessagesByGroupIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).ListCannedMessagesByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_ListCannedMessagesByGroupId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).ListCannedMessagesByGroupId(ctx, req.(*ListCannedMessagesByGroupIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectApi_GetCannedMessageGroupById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCannedMessageGroupByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectApiServer).GetCannedMessageGroupById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectApi_GetCannedMessageGroupById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectApiServer).GetCannedMessageGroupById(ctx, req.(*GetCannedMessageGroupByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectApi_ServiceDesc is the grpc.ServiceDesc for ProjectApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.project.ProjectApi",
	HandlerType: (*ProjectApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _ProjectApi_CreateProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _ProjectApi_ListProjects_Handler,
		},
		{
			MethodName: "EditProjectById",
			Handler:    _ProjectApi_EditProjectById_Handler,
		},
		{
			MethodName: "CloseProjectById",
			Handler:    _ProjectApi_CloseProjectById_Handler,
		},
		{
			MethodName: "GetProjectById",
			Handler:    _ProjectApi_GetProjectById_Handler,
		},
		{
			MethodName: "CreateCannedMessage",
			Handler:    _ProjectApi_CreateCannedMessage_Handler,
		},
		{
			MethodName: "ListCannedMessages",
			Handler:    _ProjectApi_ListCannedMessages_Handler,
		},
		{
			MethodName: "UpdateCannedMessage",
			Handler:    _ProjectApi_UpdateCannedMessage_Handler,
		},
		{
			MethodName: "GetCannedMessageById",
			Handler:    _ProjectApi_GetCannedMessageById_Handler,
		},
		{
			MethodName: "DeleteCannedMessageById",
			Handler:    _ProjectApi_DeleteCannedMessageById_Handler,
		},
		{
			MethodName: "CreateCannedMessageGroup",
			Handler:    _ProjectApi_CreateCannedMessageGroup_Handler,
		},
		{
			MethodName: "ListCannedMessageGroups",
			Handler:    _ProjectApi_ListCannedMessageGroups_Handler,
		},
		{
			MethodName: "UpdateCannedMessageGroup",
			Handler:    _ProjectApi_UpdateCannedMessageGroup_Handler,
		},
		{
			MethodName: "DeleteCannedMessageGroup",
			Handler:    _ProjectApi_DeleteCannedMessageGroup_Handler,
		},
		{
			MethodName: "ListCannedMessagesByGroupId",
			Handler:    _ProjectApi_ListCannedMessagesByGroupId_Handler,
		},
		{
			MethodName: "GetCannedMessageGroupById",
			Handler:    _ProjectApi_GetCannedMessageGroupById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/project/service.proto",
}
