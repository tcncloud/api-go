// Copyright (c) 2020, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: api/v1alpha1/wfm/wfm.proto

package wfm

import (
	_ "github.com/tcncloud/api-go/annotations"
	commons "github.com/tcncloud/api-go/api/commons"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum specifying what type of forecast data interval to delete
type DeleteForecastIntervalsReq_ForecastIntervalDeleteType int32

const (
	DeleteForecastIntervalsReq_INTERVALS_AND_DELTAS DeleteForecastIntervalsReq_ForecastIntervalDeleteType = 0
	DeleteForecastIntervalsReq_DELTAS               DeleteForecastIntervalsReq_ForecastIntervalDeleteType = 1
)

// Enum value maps for DeleteForecastIntervalsReq_ForecastIntervalDeleteType.
var (
	DeleteForecastIntervalsReq_ForecastIntervalDeleteType_name = map[int32]string{
		0: "INTERVALS_AND_DELTAS",
		1: "DELTAS",
	}
	DeleteForecastIntervalsReq_ForecastIntervalDeleteType_value = map[string]int32{
		"INTERVALS_AND_DELTAS": 0,
		"DELTAS":               1,
	}
)

func (x DeleteForecastIntervalsReq_ForecastIntervalDeleteType) Enum() *DeleteForecastIntervalsReq_ForecastIntervalDeleteType {
	p := new(DeleteForecastIntervalsReq_ForecastIntervalDeleteType)
	*p = x
	return p
}

func (x DeleteForecastIntervalsReq_ForecastIntervalDeleteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteForecastIntervalsReq_ForecastIntervalDeleteType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1alpha1_wfm_wfm_proto_enumTypes[0].Descriptor()
}

func (DeleteForecastIntervalsReq_ForecastIntervalDeleteType) Type() protoreflect.EnumType {
	return &file_api_v1alpha1_wfm_wfm_proto_enumTypes[0]
}

func (x DeleteForecastIntervalsReq_ForecastIntervalDeleteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteForecastIntervalsReq_ForecastIntervalDeleteType.Descriptor instead.
func (DeleteForecastIntervalsReq_ForecastIntervalDeleteType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{92, 0}
}

// Request message for the PerformInitialClientSetup RPC.
type PerformInitialClientSetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PerformInitialClientSetupRequest) Reset() {
	*x = PerformInitialClientSetupRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformInitialClientSetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformInitialClientSetupRequest) ProtoMessage() {}

func (x *PerformInitialClientSetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformInitialClientSetupRequest.ProtoReflect.Descriptor instead.
func (*PerformInitialClientSetupRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{0}
}

// Response message for the PerformInitialClientSetup RPC.
type PerformInitialClientSetupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setup status for the requested client.
	SetupStatus *commons.InitialSetupStatus `protobuf:"bytes,1,opt,name=setup_status,json=setupStatus,proto3" json:"setup_status,omitempty"`
}

func (x *PerformInitialClientSetupResponse) Reset() {
	*x = PerformInitialClientSetupResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformInitialClientSetupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformInitialClientSetupResponse) ProtoMessage() {}

func (x *PerformInitialClientSetupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformInitialClientSetupResponse.ProtoReflect.Descriptor instead.
func (*PerformInitialClientSetupResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{1}
}

func (x *PerformInitialClientSetupResponse) GetSetupStatus() *commons.InitialSetupStatus {
	if x != nil {
		return x.SetupStatus
	}
	return nil
}

// Request message for the CreateInitialDemoActivities RPC.
type CreateInitialDemoActivitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateInitialDemoActivitiesRequest) Reset() {
	*x = CreateInitialDemoActivitiesRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInitialDemoActivitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInitialDemoActivitiesRequest) ProtoMessage() {}

func (x *CreateInitialDemoActivitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInitialDemoActivitiesRequest.ProtoReflect.Descriptor instead.
func (*CreateInitialDemoActivitiesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{2}
}

// Response message for the CreateInitialDemoActivities RPC.
type CreateInitialDemoActivitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateInitialDemoActivitiesResponse) Reset() {
	*x = CreateInitialDemoActivitiesResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInitialDemoActivitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInitialDemoActivitiesResponse) ProtoMessage() {}

func (x *CreateInitialDemoActivitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInitialDemoActivitiesResponse.ProtoReflect.Descriptor instead.
func (*CreateInitialDemoActivitiesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{3}
}

// Message type specifying information regarding the skill that will associated with
// SkillProfile and other entities.
type Skill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile skill.
	SkillSid int64 `protobuf:"varint,1,opt,name=skill_sid,json=skillSid,proto3" json:"skill_sid,omitempty"`
	// type of the skill.
	ClientSkillType commons.SkillType_Enum `protobuf:"varint,2,opt,name=client_skill_type,json=clientSkillType,proto3,enum=api.commons.SkillType_Enum" json:"client_skill_type,omitempty"`
	// skill name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// approximate date that the skill was deleted, if absent, the skill has not been deleted.
	DeleteDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=delete_date,json=deleteDate,proto3" json:"delete_date,omitempty"`
	// ID of the skill (as shown in backoffice) for the given skill type (agent, PBX, hunt_group, etc).
	ClientSkillSid int64 `protobuf:"varint,5,opt,name=client_skill_sid,json=clientSkillSid,proto3" json:"client_skill_sid,omitempty"`
	// Proficiency that this skill has for the skill profile containing it.
	// This field will only be set when this skill is contained within a SkillProfile.
	Proficiency int32 `protobuf:"varint,6,opt,name=proficiency,proto3" json:"proficiency,omitempty"`
}

func (x *Skill) Reset() {
	*x = Skill{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Skill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skill) ProtoMessage() {}

func (x *Skill) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skill.ProtoReflect.Descriptor instead.
func (*Skill) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{4}
}

func (x *Skill) GetSkillSid() int64 {
	if x != nil {
		return x.SkillSid
	}
	return 0
}

func (x *Skill) GetClientSkillType() commons.SkillType_Enum {
	if x != nil {
		return x.ClientSkillType
	}
	return commons.SkillType_Enum(0)
}

func (x *Skill) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Skill) GetDeleteDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteDate
	}
	return nil
}

func (x *Skill) GetClientSkillSid() int64 {
	if x != nil {
		return x.ClientSkillSid
	}
	return 0
}

func (x *Skill) GetProficiency() int32 {
	if x != nil {
		return x.Proficiency
	}
	return 0
}

// Message type specifying a skill profile including specific skills
type SkillProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// name of the skill profile.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description about the skill profile.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// date of creation of the skill profile.
	CreateDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	// indicates whether the autogenerated name of the skill profile has been modified by the org.
	Unnamed bool `protobuf:"varint,5,opt,name=unnamed,proto3" json:"unnamed,omitempty"`
	// date that the profile became inactive, if not set, then the profile is currently active.
	InactiveAsOfDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=inactive_as_of_date,json=inactiveAsOfDate,proto3" json:"inactive_as_of_date,omitempty"`
	// skills of the skill profile.
	Skills []*Skill `protobuf:"bytes,7,rep,name=skills,proto3" json:"skills,omitempty"`
	// number of skills that this skill profile has.
	SkillsCount int32 `protobuf:"varint,8,opt,name=skills_count,json=skillsCount,proto3" json:"skills_count,omitempty"`
	// percentage of total calls that had this skill profile.
	Occurrence float32 `protobuf:"fixed32,9,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	// average time that calls took to be answered.
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,10,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// average duration of answered calls.
	AverageHandleTimeInSeconds float32 `protobuf:"fixed32,11,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// average time that agents spent in wrap up.
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,12,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// average time that callers waited before hanging unanswered calls.
	AverageTimeToAbortInSeconds float32 `protobuf:"fixed32,13,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// indicates whether or not the averages were manually entered by the user (if false then the averages were automatically calculated from the historical data).
	AreAveragesManual bool `protobuf:"varint,14,opt,name=are_averages_manual,json=areAveragesManual,proto3" json:"are_averages_manual,omitempty"`
}

func (x *SkillProfile) Reset() {
	*x = SkillProfile{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkillProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillProfile) ProtoMessage() {}

func (x *SkillProfile) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillProfile.ProtoReflect.Descriptor instead.
func (*SkillProfile) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{5}
}

func (x *SkillProfile) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *SkillProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SkillProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SkillProfile) GetCreateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *SkillProfile) GetUnnamed() bool {
	if x != nil {
		return x.Unnamed
	}
	return false
}

func (x *SkillProfile) GetInactiveAsOfDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InactiveAsOfDate
	}
	return nil
}

func (x *SkillProfile) GetSkills() []*Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *SkillProfile) GetSkillsCount() int32 {
	if x != nil {
		return x.SkillsCount
	}
	return 0
}

func (x *SkillProfile) GetOccurrence() float32 {
	if x != nil {
		return x.Occurrence
	}
	return 0
}

func (x *SkillProfile) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *SkillProfile) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *SkillProfile) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *SkillProfile) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

func (x *SkillProfile) GetAreAveragesManual() bool {
	if x != nil {
		return x.AreAveragesManual
	}
	return false
}

type SkillProfileGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile group.
	SkillProfileGroupSid int64 `protobuf:"varint,1,opt,name=skill_profile_group_sid,json=skillProfileGroupSid,proto3" json:"skill_profile_group_sid,omitempty"`
	// name of the skill profile group.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description about the skill profile group.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// date of creation of the skill profile group.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// average time that calls took to be answered.
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,5,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// average duration of answered calls.
	AverageHandleTimeInSeconds float32 `protobuf:"fixed32,6,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// average time that agents spent in wrap up.
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,7,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// average time that callers waited before hanging unanswered calls.
	AverageTimeToAbortInSeconds float32 `protobuf:"fixed32,8,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// indicates whether or not the averages were manually entered by the user (if false then the averages were automatically calculated from the historical data).
	AreAveragesManual bool `protobuf:"varint,9,opt,name=are_averages_manual,json=areAveragesManual,proto3" json:"are_averages_manual,omitempty"`
	// IDs of the skill profiles that belong to this group.
	SkillProfileSids []int64 `protobuf:"varint,10,rep,packed,name=skill_profile_sids,json=skillProfileSids,proto3" json:"skill_profile_sids,omitempty"`
	// Datetime that the group was set to inactive, if not set then the group is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
}

func (x *SkillProfileGroup) Reset() {
	*x = SkillProfileGroup{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkillProfileGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillProfileGroup) ProtoMessage() {}

func (x *SkillProfileGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillProfileGroup.ProtoReflect.Descriptor instead.
func (*SkillProfileGroup) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{6}
}

func (x *SkillProfileGroup) GetSkillProfileGroupSid() int64 {
	if x != nil {
		return x.SkillProfileGroupSid
	}
	return 0
}

func (x *SkillProfileGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SkillProfileGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SkillProfileGroup) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SkillProfileGroup) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *SkillProfileGroup) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *SkillProfileGroup) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *SkillProfileGroup) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

func (x *SkillProfileGroup) GetAreAveragesManual() bool {
	if x != nil {
		return x.AreAveragesManual
	}
	return false
}

func (x *SkillProfileGroup) GetSkillProfileSids() []int64 {
	if x != nil {
		return x.SkillProfileSids
	}
	return nil
}

func (x *SkillProfileGroup) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

// Request message for the ListSkillProfiles RPC.
type ListSkillProfilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to true only active skill profiles will be returned, otherwise active and inactive skill profiles will be returned.
	ActiveOnly bool `protobuf:"varint,1,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
	// If set to true the skills of skill profiles will be returned, otherwise they will not.
	WithSkills bool `protobuf:"varint,2,opt,name=with_skills,json=withSkills,proto3" json:"with_skills,omitempty"`
}

func (x *ListSkillProfilesReq) Reset() {
	*x = ListSkillProfilesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSkillProfilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSkillProfilesReq) ProtoMessage() {}

func (x *ListSkillProfilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSkillProfilesReq.ProtoReflect.Descriptor instead.
func (*ListSkillProfilesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{7}
}

func (x *ListSkillProfilesReq) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

func (x *ListSkillProfilesReq) GetWithSkills() bool {
	if x != nil {
		return x.WithSkills
	}
	return false
}

// Response message for the ListSkillProfiles RPC.
type ListSkillProfilesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillProfiles []*SkillProfile `protobuf:"bytes,1,rep,name=skill_profiles,json=skillProfiles,proto3" json:"skill_profiles,omitempty"`
}

func (x *ListSkillProfilesRes) Reset() {
	*x = ListSkillProfilesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSkillProfilesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSkillProfilesRes) ProtoMessage() {}

func (x *ListSkillProfilesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSkillProfilesRes.ProtoReflect.Descriptor instead.
func (*ListSkillProfilesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{8}
}

func (x *ListSkillProfilesRes) GetSkillProfiles() []*SkillProfile {
	if x != nil {
		return x.SkillProfiles
	}
	return nil
}

// Request message for the UpdateSkillProfile RPC.
type UpdateSkillProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// skill profile id to modify.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// new name that the skill profile will have.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// new description that the skill profile will have.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// average time that calls took to be answered.
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,4,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// average duration of answered calls.
	AverageHandleTimeInSeconds float32 `protobuf:"fixed32,5,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// average time that agents spent in wrap up.
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,6,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// average time that callers waited before hanging unanswered calls.
	AverageTimeToAbortInSeconds float32 `protobuf:"fixed32,7,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// indicates whether or not the averages were manually entered by the user (if false then the averages were automatically calculated from the historical data).
	AreAveragesManual bool `protobuf:"varint,8,opt,name=are_averages_manual,json=areAveragesManual,proto3" json:"are_averages_manual,omitempty"`
}

func (x *UpdateSkillProfileReq) Reset() {
	*x = UpdateSkillProfileReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkillProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileReq) ProtoMessage() {}

func (x *UpdateSkillProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileReq.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateSkillProfileReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *UpdateSkillProfileReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSkillProfileReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSkillProfileReq) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *UpdateSkillProfileReq) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *UpdateSkillProfileReq) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *UpdateSkillProfileReq) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

func (x *UpdateSkillProfileReq) GetAreAveragesManual() bool {
	if x != nil {
		return x.AreAveragesManual
	}
	return false
}

// Response message for the UpdateSkillProfile RPC.
type UpdateSkillProfileRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSkillProfileRes) Reset() {
	*x = UpdateSkillProfileRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkillProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileRes) ProtoMessage() {}

func (x *UpdateSkillProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileRes.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{10}
}

// Request message for the UpdateSkillProfileProficiencies RPC.
type UpdateSkillProfileProficienciesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proficiencies to update.
	Proficiencies []*UpdateSkillProfileProficienciesReq_Proficiency `protobuf:"bytes,2,rep,name=proficiencies,proto3" json:"proficiencies,omitempty"`
}

func (x *UpdateSkillProfileProficienciesReq) Reset() {
	*x = UpdateSkillProfileProficienciesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkillProfileProficienciesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileProficienciesReq) ProtoMessage() {}

func (x *UpdateSkillProfileProficienciesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileProficienciesReq.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileProficienciesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateSkillProfileProficienciesReq) GetProficiencies() []*UpdateSkillProfileProficienciesReq_Proficiency {
	if x != nil {
		return x.Proficiencies
	}
	return nil
}

// Response message for the UpdateSkillProfileProficiencies RPC.
type UpdateSkillProfileProficienciesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSkillProfileProficienciesRes) Reset() {
	*x = UpdateSkillProfileProficienciesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkillProfileProficienciesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileProficienciesRes) ProtoMessage() {}

func (x *UpdateSkillProfileProficienciesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileProficienciesRes.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileProficienciesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{12}
}

// Request message for the GetSkillProfile RPC.
type GetSkillProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desired skill profile.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
}

func (x *GetSkillProfileReq) Reset() {
	*x = GetSkillProfileReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSkillProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkillProfileReq) ProtoMessage() {}

func (x *GetSkillProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkillProfileReq.ProtoReflect.Descriptor instead.
func (*GetSkillProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{13}
}

func (x *GetSkillProfileReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

// Response message for the GetSkillProfile RPC.
type GetSkillProfileRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillProfile *SkillProfile `protobuf:"bytes,1,opt,name=skill_profile,json=skillProfile,proto3" json:"skill_profile,omitempty"`
	// Inactive skill profile mappings that the requested skill profile has.
	// If the profile's @inactive_as_of_date is nil then the mapping is of inactive profiles to this one.
	// If the profile's @inactive_as_of_date is NOT nil then the mapping is of this profile to an active one.
	Mappings []*GetSkillProfileRes_Mapping `protobuf:"bytes,2,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *GetSkillProfileRes) Reset() {
	*x = GetSkillProfileRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSkillProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkillProfileRes) ProtoMessage() {}

func (x *GetSkillProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkillProfileRes.ProtoReflect.Descriptor instead.
func (*GetSkillProfileRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{14}
}

func (x *GetSkillProfileRes) GetSkillProfile() *SkillProfile {
	if x != nil {
		return x.SkillProfile
	}
	return nil
}

func (x *GetSkillProfileRes) GetMappings() []*GetSkillProfileRes_Mapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

// Request message for the ResyncSkillProfiles RPC.
type ResyncSkillProfilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not to resync from the historical range start date time.
	// If set to false resync will be done from the last resync date.
	FromHistoricalRangeStartDate bool `protobuf:"varint,1,opt,name=from_historical_range_start_date,json=fromHistoricalRangeStartDate,proto3" json:"from_historical_range_start_date,omitempty"`
}

func (x *ResyncSkillProfilesReq) Reset() {
	*x = ResyncSkillProfilesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResyncSkillProfilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResyncSkillProfilesReq) ProtoMessage() {}

func (x *ResyncSkillProfilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResyncSkillProfilesReq.ProtoReflect.Descriptor instead.
func (*ResyncSkillProfilesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{15}
}

func (x *ResyncSkillProfilesReq) GetFromHistoricalRangeStartDate() bool {
	if x != nil {
		return x.FromHistoricalRangeStartDate
	}
	return false
}

// Response message for the ResyncSkillProfiles RPC.
type ResyncSkillProfilesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the newly created skill profiles.
	CreatedSkillProfileSids []int64 `protobuf:"varint,1,rep,packed,name=created_skill_profile_sids,json=createdSkillProfileSids,proto3" json:"created_skill_profile_sids,omitempty"`
}

func (x *ResyncSkillProfilesRes) Reset() {
	*x = ResyncSkillProfilesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResyncSkillProfilesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResyncSkillProfilesRes) ProtoMessage() {}

func (x *ResyncSkillProfilesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResyncSkillProfilesRes.ProtoReflect.Descriptor instead.
func (*ResyncSkillProfilesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{16}
}

func (x *ResyncSkillProfilesRes) GetCreatedSkillProfileSids() []int64 {
	if x != nil {
		return x.CreatedSkillProfileSids
	}
	return nil
}

// Request message for the GetLastSkillProfileResyncDate RPC.
type GetLastSkillProfileResyncDateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLastSkillProfileResyncDateReq) Reset() {
	*x = GetLastSkillProfileResyncDateReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLastSkillProfileResyncDateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastSkillProfileResyncDateReq) ProtoMessage() {}

func (x *GetLastSkillProfileResyncDateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastSkillProfileResyncDateReq.ProtoReflect.Descriptor instead.
func (*GetLastSkillProfileResyncDateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{17}
}

// Response message for the GetLastSkillProfileResyncDate RPC.
type GetLastSkillProfileResyncDateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// last date that the org resynced their skill profiles.
	// if not set, then the org hasn't done a resync of the skill profiles at any point in time.
	ResyncDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=resync_date,json=resyncDate,proto3" json:"resync_date,omitempty"`
}

func (x *GetLastSkillProfileResyncDateRes) Reset() {
	*x = GetLastSkillProfileResyncDateRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLastSkillProfileResyncDateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastSkillProfileResyncDateRes) ProtoMessage() {}

func (x *GetLastSkillProfileResyncDateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastSkillProfileResyncDateRes.ProtoReflect.Descriptor instead.
func (*GetLastSkillProfileResyncDateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{18}
}

func (x *GetLastSkillProfileResyncDateRes) GetResyncDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ResyncDate
	}
	return nil
}

// Request message for the UpsertForecastingParameters RPC.
type UpsertForecastingParametersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parameters used for forecasts and training data samples.
	ForecastingParameters *commons.ForecastingParameters `protobuf:"bytes,3,opt,name=forecasting_parameters,json=forecastingParameters,proto3" json:"forecasting_parameters,omitempty"`
}

func (x *UpsertForecastingParametersReq) Reset() {
	*x = UpsertForecastingParametersReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertForecastingParametersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertForecastingParametersReq) ProtoMessage() {}

func (x *UpsertForecastingParametersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertForecastingParametersReq.ProtoReflect.Descriptor instead.
func (*UpsertForecastingParametersReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{19}
}

func (x *UpsertForecastingParametersReq) GetForecastingParameters() *commons.ForecastingParameters {
	if x != nil {
		return x.ForecastingParameters
	}
	return nil
}

// Response message for the UpsertForecastingParameters RPC.
type UpsertForecastingParametersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpsertForecastingParametersRes) Reset() {
	*x = UpsertForecastingParametersRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertForecastingParametersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertForecastingParametersRes) ProtoMessage() {}

func (x *UpsertForecastingParametersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertForecastingParametersRes.ProtoReflect.Descriptor instead.
func (*UpsertForecastingParametersRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{20}
}

// Request message for the GetForecastingParameters RPC.
type GetForecastingParametersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForecastingParametersReq) Reset() {
	*x = GetForecastingParametersReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetForecastingParametersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastingParametersReq) ProtoMessage() {}

func (x *GetForecastingParametersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastingParametersReq.ProtoReflect.Descriptor instead.
func (*GetForecastingParametersReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{21}
}

// Response message for the GetForecastingParameters RPC.
type GetForecastingParametersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parameters used for forecasts and training data samples.
	ForecastingParameters *commons.ForecastingParameters `protobuf:"bytes,1,opt,name=forecasting_parameters,json=forecastingParameters,proto3" json:"forecasting_parameters,omitempty"`
}

func (x *GetForecastingParametersRes) Reset() {
	*x = GetForecastingParametersRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetForecastingParametersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastingParametersRes) ProtoMessage() {}

func (x *GetForecastingParametersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastingParametersRes.ProtoReflect.Descriptor instead.
func (*GetForecastingParametersRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{22}
}

func (x *GetForecastingParametersRes) GetForecastingParameters() *commons.ForecastingParameters {
	if x != nil {
		return x.ForecastingParameters
	}
	return nil
}

// Message type specifying an interval of calls linked to a skill profile used for historical the forecaster
type HistoricalDataInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// time that this interval starts at.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// ID of the skill profile that this interval belongs to.
	// Deprecated as of Sep/8/2023: use skill_profile_category instead.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	SkillProfileSid int64 `protobuf:"varint,2,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// the following are averages for all the calls found for this interval.
	// average time that calls took to be answered.
	AverageSpeedOfAnswerInSeconds *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// average duration of answered calls.
	AverageHandleTimeInSeconds *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// average time that agents spent in wrap up.
	AverageAfterCallWorkInSeconds *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// average time that callers waited before hanging unanswered calls.
	AverageTimeToAbortInSeconds *wrapperspb.FloatValue `protobuf:"bytes,6,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// total calls found for this interval (answered + unanswered).
	TotalCalls int32 `protobuf:"varint,7,opt,name=total_calls,json=totalCalls,proto3" json:"total_calls,omitempty"`
	// total number of calls that were abandoned
	TotalAbandonedCalls int32 `protobuf:"varint,8,opt,name=total_abandoned_calls,json=totalAbandonedCalls,proto3" json:"total_abandoned_calls,omitempty"`
	// true=interval w/ delta applied, false=historical interval
	IsDelta bool `protobuf:"varint,9,opt,name=is_delta,json=isDelta,proto3" json:"is_delta,omitempty"`
	// The following are only set by the server when requesting the training data intervals and the interval is a delta.
	// They will contain the non delta values for that interval.
	// original average time that calls took to be answered.
	OriginalAverageSpeedOfAnswerInSeconds *wrapperspb.FloatValue `protobuf:"bytes,10,opt,name=original_average_speed_of_answer_in_seconds,json=originalAverageSpeedOfAnswerInSeconds,proto3" json:"original_average_speed_of_answer_in_seconds,omitempty"`
	// original average duration of answered calls.
	OriginalAverageHandleTimeInSeconds *wrapperspb.FloatValue `protobuf:"bytes,11,opt,name=original_average_handle_time_in_seconds,json=originalAverageHandleTimeInSeconds,proto3" json:"original_average_handle_time_in_seconds,omitempty"`
	// original average time that agents spent in wrap up.
	OriginalAverageAfterCallWorkInSeconds *wrapperspb.FloatValue `protobuf:"bytes,12,opt,name=original_average_after_call_work_in_seconds,json=originalAverageAfterCallWorkInSeconds,proto3" json:"original_average_after_call_work_in_seconds,omitempty"`
	// original average time that callers waited before hanging unanswered calls.
	OriginalAverageTimeToAbortInSeconds *wrapperspb.FloatValue `protobuf:"bytes,13,opt,name=original_average_time_to_abort_in_seconds,json=originalAverageTimeToAbortInSeconds,proto3" json:"original_average_time_to_abort_in_seconds,omitempty"`
	// original total calls found for this interval (answered + unanswered).
	OriginalTotalCalls int32 `protobuf:"varint,14,opt,name=original_total_calls,json=originalTotalCalls,proto3" json:"original_total_calls,omitempty"`
	// original total number of calls that were abandoned
	OriginalTotalAbandonedCalls int32 `protobuf:"varint,15,opt,name=original_total_abandoned_calls,json=originalTotalAbandonedCalls,proto3" json:"original_total_abandoned_calls,omitempty"`
	// Skill profile category that the interval belongs to.
	SkillProfileCategory *commons.SkillProfileCategory `protobuf:"bytes,16,opt,name=skill_profile_category,json=skillProfileCategory,proto3" json:"skill_profile_category,omitempty"`
}

func (x *HistoricalDataInterval) Reset() {
	*x = HistoricalDataInterval{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoricalDataInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalDataInterval) ProtoMessage() {}

func (x *HistoricalDataInterval) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalDataInterval.ProtoReflect.Descriptor instead.
func (*HistoricalDataInterval) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{23}
}

func (x *HistoricalDataInterval) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *HistoricalDataInterval) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *HistoricalDataInterval) GetAverageSpeedOfAnswerInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetAverageHandleTimeInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetAverageAfterCallWorkInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetAverageTimeToAbortInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetTotalCalls() int32 {
	if x != nil {
		return x.TotalCalls
	}
	return 0
}

func (x *HistoricalDataInterval) GetTotalAbandonedCalls() int32 {
	if x != nil {
		return x.TotalAbandonedCalls
	}
	return 0
}

func (x *HistoricalDataInterval) GetIsDelta() bool {
	if x != nil {
		return x.IsDelta
	}
	return false
}

func (x *HistoricalDataInterval) GetOriginalAverageSpeedOfAnswerInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.OriginalAverageSpeedOfAnswerInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetOriginalAverageHandleTimeInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.OriginalAverageHandleTimeInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetOriginalAverageAfterCallWorkInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.OriginalAverageAfterCallWorkInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetOriginalAverageTimeToAbortInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.OriginalAverageTimeToAbortInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetOriginalTotalCalls() int32 {
	if x != nil {
		return x.OriginalTotalCalls
	}
	return 0
}

func (x *HistoricalDataInterval) GetOriginalTotalAbandonedCalls() int32 {
	if x != nil {
		return x.OriginalTotalAbandonedCalls
	}
	return 0
}

func (x *HistoricalDataInterval) GetSkillProfileCategory() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillProfileCategory
	}
	return nil
}

// Request message for the GetClientHistoryCacheInfo RPC.
// DEPRECATED as of Dec/13/2023 - Use PerformInitialClientSetup instead.
//
// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
type GetClientHistoryCacheInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetClientHistoryCacheInfoReq) Reset() {
	*x = GetClientHistoryCacheInfoReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClientHistoryCacheInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientHistoryCacheInfoReq) ProtoMessage() {}

func (x *GetClientHistoryCacheInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientHistoryCacheInfoReq.ProtoReflect.Descriptor instead.
func (*GetClientHistoryCacheInfoReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{24}
}

// Response message for the GetClientHistoryCacheInfo RPC.
// DEPRECATED as of Dec/13/2023 - Use PerformInitialClientSetup instead.
//
// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
type GetClientHistoryCacheInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cache info for the requested client.
	CacheInfo *commons.ClientHistoryCacheInfo `protobuf:"bytes,1,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
}

func (x *GetClientHistoryCacheInfoRes) Reset() {
	*x = GetClientHistoryCacheInfoRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClientHistoryCacheInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientHistoryCacheInfoRes) ProtoMessage() {}

func (x *GetClientHistoryCacheInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientHistoryCacheInfoRes.ProtoReflect.Descriptor instead.
func (*GetClientHistoryCacheInfoRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{25}
}

func (x *GetClientHistoryCacheInfoRes) GetCacheInfo() *commons.ClientHistoryCacheInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

// Request message for the ListHistoricalData RPC
type ListHistoricalDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile used to examine matching calls in the client's historical data.
	// Deprecated as of Sep/8/2023: use skill_profile_category instead.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// Skill profile category that the desired calls will belong to.
	SkillProfileCategory *commons.SkillProfileCategory `protobuf:"bytes,2,opt,name=skill_profile_category,json=skillProfileCategory,proto3" json:"skill_profile_category,omitempty"`
}

func (x *ListHistoricalDataReq) Reset() {
	*x = ListHistoricalDataReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHistoricalDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoricalDataReq) ProtoMessage() {}

func (x *ListHistoricalDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoricalDataReq.ProtoReflect.Descriptor instead.
func (*ListHistoricalDataReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{26}
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *ListHistoricalDataReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *ListHistoricalDataReq) GetSkillProfileCategory() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillProfileCategory
	}
	return nil
}

// Response message for the ListHistoricalData RPC
type ListHistoricalDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// historical data intervals for the skill profile that the org requested.
	HistoricalDataIntervals []*HistoricalDataInterval `protobuf:"bytes,1,rep,name=historical_data_intervals,json=historicalDataIntervals,proto3" json:"historical_data_intervals,omitempty"`
}

func (x *ListHistoricalDataRes) Reset() {
	*x = ListHistoricalDataRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHistoricalDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoricalDataRes) ProtoMessage() {}

func (x *ListHistoricalDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoricalDataRes.ProtoReflect.Descriptor instead.
func (*ListHistoricalDataRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{27}
}

func (x *ListHistoricalDataRes) GetHistoricalDataIntervals() []*HistoricalDataInterval {
	if x != nil {
		return x.HistoricalDataIntervals
	}
	return nil
}

// Request message for the UpsertHistoricalDataDelta RPC
type UpsertHistoricalDataDeltaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Training data delta to create/update.
	Delta *HistoricalDataInterval `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *UpsertHistoricalDataDeltaReq) Reset() {
	*x = UpsertHistoricalDataDeltaReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertHistoricalDataDeltaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertHistoricalDataDeltaReq) ProtoMessage() {}

func (x *UpsertHistoricalDataDeltaReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertHistoricalDataDeltaReq.ProtoReflect.Descriptor instead.
func (*UpsertHistoricalDataDeltaReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{28}
}

func (x *UpsertHistoricalDataDeltaReq) GetDelta() *HistoricalDataInterval {
	if x != nil {
		return x.Delta
	}
	return nil
}

// Response message for the UpsertHistoricalDataDelta RPC
type UpsertHistoricalDataDeltaRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated delta that was stored.
	Delta *HistoricalDataInterval `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *UpsertHistoricalDataDeltaRes) Reset() {
	*x = UpsertHistoricalDataDeltaRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertHistoricalDataDeltaRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertHistoricalDataDeltaRes) ProtoMessage() {}

func (x *UpsertHistoricalDataDeltaRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertHistoricalDataDeltaRes.ProtoReflect.Descriptor instead.
func (*UpsertHistoricalDataDeltaRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{29}
}

func (x *UpsertHistoricalDataDeltaRes) GetDelta() *HistoricalDataInterval {
	if x != nil {
		return x.Delta
	}
	return nil
}

// Request message for the UpsertHistoricalDataDelta RPC.
type UpsertHistoricalDataDeltasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Training data delta to create/update.
	Deltas []*HistoricalDataInterval `protobuf:"bytes,1,rep,name=deltas,proto3" json:"deltas,omitempty"`
}

func (x *UpsertHistoricalDataDeltasReq) Reset() {
	*x = UpsertHistoricalDataDeltasReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertHistoricalDataDeltasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertHistoricalDataDeltasReq) ProtoMessage() {}

func (x *UpsertHistoricalDataDeltasReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertHistoricalDataDeltasReq.ProtoReflect.Descriptor instead.
func (*UpsertHistoricalDataDeltasReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{30}
}

func (x *UpsertHistoricalDataDeltasReq) GetDeltas() []*HistoricalDataInterval {
	if x != nil {
		return x.Deltas
	}
	return nil
}

// Response message for the UpsertHistoricalDataDelta RPC.
type UpsertHistoricalDataDeltasRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpsertHistoricalDataDeltasRes) Reset() {
	*x = UpsertHistoricalDataDeltasRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertHistoricalDataDeltasRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertHistoricalDataDeltasRes) ProtoMessage() {}

func (x *UpsertHistoricalDataDeltasRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertHistoricalDataDeltasRes.ProtoReflect.Descriptor instead.
func (*UpsertHistoricalDataDeltasRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{31}
}

// Request message for the ListSkills RPC
type ListSkillsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSkillsReq) Reset() {
	*x = ListSkillsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSkillsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSkillsReq) ProtoMessage() {}

func (x *ListSkillsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSkillsReq.ProtoReflect.Descriptor instead.
func (*ListSkillsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{32}
}

// Response message for the ListSkills RPC
type ListSkillsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// skills found for the given parameters.
	Skills []*Skill `protobuf:"bytes,1,rep,name=skills,proto3" json:"skills,omitempty"`
}

func (x *ListSkillsRes) Reset() {
	*x = ListSkillsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSkillsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSkillsRes) ProtoMessage() {}

func (x *ListSkillsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSkillsRes.ProtoReflect.Descriptor instead.
func (*ListSkillsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{33}
}

func (x *ListSkillsRes) GetSkills() []*Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

// Message type specifying parameters used to generate a profile forecast
type CallProfileTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the template
	CallProfileTemplateSid int64 `protobuf:"varint,1,opt,name=call_profile_template_sid,json=callProfileTemplateSid,proto3" json:"call_profile_template_sid,omitempty"`
	// Name of the template.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// call profile for total calls
	TotalCallsProfile *commons.CallProfileGroupCalls `protobuf:"bytes,3,opt,name=total_calls_profile,json=totalCallsProfile,proto3" json:"total_calls_profile,omitempty"`
	// call profile for total abandoned calls
	TotalAbandonedCallsProfile *commons.CallProfileGroupCalls `protobuf:"bytes,4,opt,name=total_abandoned_calls_profile,json=totalAbandonedCallsProfile,proto3" json:"total_abandoned_calls_profile,omitempty"`
	// call profile for ASA
	AverageSpeedOfAnswerProfile *commons.CallProfileGroupAvgs `protobuf:"bytes,5,opt,name=average_speed_of_answer_profile,json=averageSpeedOfAnswerProfile,proto3" json:"average_speed_of_answer_profile,omitempty"`
	// call profile for AHT
	AverageHandleTimeProfile *commons.CallProfileGroupAvgs `protobuf:"bytes,6,opt,name=average_handle_time_profile,json=averageHandleTimeProfile,proto3" json:"average_handle_time_profile,omitempty"`
	// call profile for ACW
	AverageAfterCallWorkProfile *commons.CallProfileGroupAvgs `protobuf:"bytes,7,opt,name=average_after_call_work_profile,json=averageAfterCallWorkProfile,proto3" json:"average_after_call_work_profile,omitempty"`
	// call profile for ATAB
	AverageTimeToAbortProfile *commons.CallProfileGroupAvgs `protobuf:"bytes,8,opt,name=average_time_to_abort_profile,json=averageTimeToAbortProfile,proto3" json:"average_time_to_abort_profile,omitempty"`
	// Fixed average for speed of answer
	FixedAverageSpeedOfAnswer float32 `protobuf:"fixed32,9,opt,name=fixed_average_speed_of_answer,json=fixedAverageSpeedOfAnswer,proto3" json:"fixed_average_speed_of_answer,omitempty"`
	// Fixed average for handle time
	FixedAverageHandleTime float32 `protobuf:"fixed32,10,opt,name=fixed_average_handle_time,json=fixedAverageHandleTime,proto3" json:"fixed_average_handle_time,omitempty"`
	// Fixed average for after call work
	FixedAverageAfterCallWork float32 `protobuf:"fixed32,11,opt,name=fixed_average_after_call_work,json=fixedAverageAfterCallWork,proto3" json:"fixed_average_after_call_work,omitempty"`
	// Fixed average for time to abort
	FixedAverageTimeToAbort float32 `protobuf:"fixed32,12,opt,name=fixed_average_time_to_abort,json=fixedAverageTimeToAbort,proto3" json:"fixed_average_time_to_abort,omitempty"`
	// Indicates if fixed averages is the default forecast that this template should be used for.
	DefaultToFixedAveragesForecast bool `protobuf:"varint,13,opt,name=default_to_fixed_averages_forecast,json=defaultToFixedAveragesForecast,proto3" json:"default_to_fixed_averages_forecast,omitempty"`
	// Time zone in IANA format that the call profile template is in.
	TimeZone string `protobuf:"bytes,14,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *CallProfileTemplate) Reset() {
	*x = CallProfileTemplate{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallProfileTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallProfileTemplate) ProtoMessage() {}

func (x *CallProfileTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallProfileTemplate.ProtoReflect.Descriptor instead.
func (*CallProfileTemplate) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{34}
}

func (x *CallProfileTemplate) GetCallProfileTemplateSid() int64 {
	if x != nil {
		return x.CallProfileTemplateSid
	}
	return 0
}

func (x *CallProfileTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CallProfileTemplate) GetTotalCallsProfile() *commons.CallProfileGroupCalls {
	if x != nil {
		return x.TotalCallsProfile
	}
	return nil
}

func (x *CallProfileTemplate) GetTotalAbandonedCallsProfile() *commons.CallProfileGroupCalls {
	if x != nil {
		return x.TotalAbandonedCallsProfile
	}
	return nil
}

func (x *CallProfileTemplate) GetAverageSpeedOfAnswerProfile() *commons.CallProfileGroupAvgs {
	if x != nil {
		return x.AverageSpeedOfAnswerProfile
	}
	return nil
}

func (x *CallProfileTemplate) GetAverageHandleTimeProfile() *commons.CallProfileGroupAvgs {
	if x != nil {
		return x.AverageHandleTimeProfile
	}
	return nil
}

func (x *CallProfileTemplate) GetAverageAfterCallWorkProfile() *commons.CallProfileGroupAvgs {
	if x != nil {
		return x.AverageAfterCallWorkProfile
	}
	return nil
}

func (x *CallProfileTemplate) GetAverageTimeToAbortProfile() *commons.CallProfileGroupAvgs {
	if x != nil {
		return x.AverageTimeToAbortProfile
	}
	return nil
}

func (x *CallProfileTemplate) GetFixedAverageSpeedOfAnswer() float32 {
	if x != nil {
		return x.FixedAverageSpeedOfAnswer
	}
	return 0
}

func (x *CallProfileTemplate) GetFixedAverageHandleTime() float32 {
	if x != nil {
		return x.FixedAverageHandleTime
	}
	return 0
}

func (x *CallProfileTemplate) GetFixedAverageAfterCallWork() float32 {
	if x != nil {
		return x.FixedAverageAfterCallWork
	}
	return 0
}

func (x *CallProfileTemplate) GetFixedAverageTimeToAbort() float32 {
	if x != nil {
		return x.FixedAverageTimeToAbort
	}
	return 0
}

func (x *CallProfileTemplate) GetDefaultToFixedAveragesForecast() bool {
	if x != nil {
		return x.DefaultToFixedAveragesForecast
	}
	return false
}

func (x *CallProfileTemplate) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

// Request message for the BuildCallProfileTemplateForSkillProfile RPC.
// DEPRECATED as of Sep/7/2023 - Use BuildCallProfileTemplate instead.
//
// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
type BuildCallProfileTemplateForSkillProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile of the training data used to generate the template.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// Time zone in IANA format that the call profile template built will be in.
	TimeZone string `protobuf:"bytes,2,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *BuildCallProfileTemplateForSkillProfileReq) Reset() {
	*x = BuildCallProfileTemplateForSkillProfileReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildCallProfileTemplateForSkillProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildCallProfileTemplateForSkillProfileReq) ProtoMessage() {}

func (x *BuildCallProfileTemplateForSkillProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildCallProfileTemplateForSkillProfileReq.ProtoReflect.Descriptor instead.
func (*BuildCallProfileTemplateForSkillProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{35}
}

func (x *BuildCallProfileTemplateForSkillProfileReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *BuildCallProfileTemplateForSkillProfileReq) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

// Response message for the BuildCallProfileTemplateForSkillProfile RPC.
// DEPRECATED as of Sep/7/2023 - Use BuildCallProfileTemplate instead.
//
// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
type BuildCallProfileTemplateForSkillProfileRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// call profile template found in the training data set.
	CallProfileTemplate *CallProfileTemplate `protobuf:"bytes,1,opt,name=call_profile_template,json=callProfileTemplate,proto3" json:"call_profile_template,omitempty"`
}

func (x *BuildCallProfileTemplateForSkillProfileRes) Reset() {
	*x = BuildCallProfileTemplateForSkillProfileRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildCallProfileTemplateForSkillProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildCallProfileTemplateForSkillProfileRes) ProtoMessage() {}

func (x *BuildCallProfileTemplateForSkillProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildCallProfileTemplateForSkillProfileRes.ProtoReflect.Descriptor instead.
func (*BuildCallProfileTemplateForSkillProfileRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{36}
}

func (x *BuildCallProfileTemplateForSkillProfileRes) GetCallProfileTemplate() *CallProfileTemplate {
	if x != nil {
		return x.CallProfileTemplate
	}
	return nil
}

// Request message for the BuildCallProfileTemplate RPC.
type BuildCallProfileTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skill profile category of the training data used to generate the template.
	SkillProfileCategory *commons.SkillProfileCategory `protobuf:"bytes,1,opt,name=skill_profile_category,json=skillProfileCategory,proto3" json:"skill_profile_category,omitempty"`
	// Time zone in IANA format that the call profile template built will be in.
	TimeZone string `protobuf:"bytes,2,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *BuildCallProfileTemplateReq) Reset() {
	*x = BuildCallProfileTemplateReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildCallProfileTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildCallProfileTemplateReq) ProtoMessage() {}

func (x *BuildCallProfileTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildCallProfileTemplateReq.ProtoReflect.Descriptor instead.
func (*BuildCallProfileTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{37}
}

func (x *BuildCallProfileTemplateReq) GetSkillProfileCategory() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillProfileCategory
	}
	return nil
}

func (x *BuildCallProfileTemplateReq) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

// Response message for the BuildCallProfileTemplate RPC.
type BuildCallProfileTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// call profile template found in the training data set.
	CallProfileTemplate *CallProfileTemplate `protobuf:"bytes,1,opt,name=call_profile_template,json=callProfileTemplate,proto3" json:"call_profile_template,omitempty"`
}

func (x *BuildCallProfileTemplateRes) Reset() {
	*x = BuildCallProfileTemplateRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildCallProfileTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildCallProfileTemplateRes) ProtoMessage() {}

func (x *BuildCallProfileTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildCallProfileTemplateRes.ProtoReflect.Descriptor instead.
func (*BuildCallProfileTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{38}
}

func (x *BuildCallProfileTemplateRes) GetCallProfileTemplate() *CallProfileTemplate {
	if x != nil {
		return x.CallProfileTemplate
	}
	return nil
}

// Request message for the CreateInactiveSkillProfileMapping RPC.
// DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
//
// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
type CreateInactiveSkillProfileMappingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the inactive skill profile that will be mapped to the active_skill_profile_sid.
	InactiveSkillProfileSid int64 `protobuf:"varint,1,opt,name=inactive_skill_profile_sid,json=inactiveSkillProfileSid,proto3" json:"inactive_skill_profile_sid,omitempty"`
	// ID of the active skill profile that the inactive_skill_profile_sid will be mapped to.
	ActiveSkillProfileSid int64 `protobuf:"varint,2,opt,name=active_skill_profile_sid,json=activeSkillProfileSid,proto3" json:"active_skill_profile_sid,omitempty"`
}

func (x *CreateInactiveSkillProfileMappingReq) Reset() {
	*x = CreateInactiveSkillProfileMappingReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInactiveSkillProfileMappingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInactiveSkillProfileMappingReq) ProtoMessage() {}

func (x *CreateInactiveSkillProfileMappingReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInactiveSkillProfileMappingReq.ProtoReflect.Descriptor instead.
func (*CreateInactiveSkillProfileMappingReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{39}
}

func (x *CreateInactiveSkillProfileMappingReq) GetInactiveSkillProfileSid() int64 {
	if x != nil {
		return x.InactiveSkillProfileSid
	}
	return 0
}

func (x *CreateInactiveSkillProfileMappingReq) GetActiveSkillProfileSid() int64 {
	if x != nil {
		return x.ActiveSkillProfileSid
	}
	return 0
}

// Response message for the CreateInactiveSkillProfileMapping RPC.
// DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
//
// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
type CreateInactiveSkillProfileMappingRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateInactiveSkillProfileMappingRes) Reset() {
	*x = CreateInactiveSkillProfileMappingRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInactiveSkillProfileMappingRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInactiveSkillProfileMappingRes) ProtoMessage() {}

func (x *CreateInactiveSkillProfileMappingRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInactiveSkillProfileMappingRes.ProtoReflect.Descriptor instead.
func (*CreateInactiveSkillProfileMappingRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{40}
}

// Request message for the GetAvailableRegressionForecasterModelTypes RPC.
type GetAvailableRegressionForecasterModelTypesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAvailableRegressionForecasterModelTypesReq) Reset() {
	*x = GetAvailableRegressionForecasterModelTypesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailableRegressionForecasterModelTypesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableRegressionForecasterModelTypesReq) ProtoMessage() {}

func (x *GetAvailableRegressionForecasterModelTypesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableRegressionForecasterModelTypesReq.ProtoReflect.Descriptor instead.
func (*GetAvailableRegressionForecasterModelTypesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{41}
}

// Response message for the GetAvailableRegressionForecasterModelTypes RPC.
type GetAvailableRegressionForecasterModelTypesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the available forecaster types currently available.
	ModelTypes []commons.RegressionForecasterModelTypes `protobuf:"varint,1,rep,packed,name=model_types,json=modelTypes,proto3,enum=api.commons.RegressionForecasterModelTypes" json:"model_types,omitempty"`
}

func (x *GetAvailableRegressionForecasterModelTypesRes) Reset() {
	*x = GetAvailableRegressionForecasterModelTypesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailableRegressionForecasterModelTypesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableRegressionForecasterModelTypesRes) ProtoMessage() {}

func (x *GetAvailableRegressionForecasterModelTypesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableRegressionForecasterModelTypesRes.ProtoReflect.Descriptor instead.
func (*GetAvailableRegressionForecasterModelTypesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{42}
}

func (x *GetAvailableRegressionForecasterModelTypesRes) GetModelTypes() []commons.RegressionForecasterModelTypes {
	if x != nil {
		return x.ModelTypes
	}
	return nil
}

// Request message for the DisconnectInactiveSkillProfileMapping RPC.
// DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
//
// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
type DisconnectInactiveSkillProfileMappingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the inactive skill profile to disconnect.
	InactiveSkillProfileSid int64 `protobuf:"varint,1,opt,name=inactive_skill_profile_sid,json=inactiveSkillProfileSid,proto3" json:"inactive_skill_profile_sid,omitempty"`
}

func (x *DisconnectInactiveSkillProfileMappingReq) Reset() {
	*x = DisconnectInactiveSkillProfileMappingReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectInactiveSkillProfileMappingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectInactiveSkillProfileMappingReq) ProtoMessage() {}

func (x *DisconnectInactiveSkillProfileMappingReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectInactiveSkillProfileMappingReq.ProtoReflect.Descriptor instead.
func (*DisconnectInactiveSkillProfileMappingReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{43}
}

func (x *DisconnectInactiveSkillProfileMappingReq) GetInactiveSkillProfileSid() int64 {
	if x != nil {
		return x.InactiveSkillProfileSid
	}
	return 0
}

// Response message for the DisconnectInactiveSkillProfileMapping RPC.
// DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
//
// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
type DisconnectInactiveSkillProfileMappingRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisconnectInactiveSkillProfileMappingRes) Reset() {
	*x = DisconnectInactiveSkillProfileMappingRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectInactiveSkillProfileMappingRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectInactiveSkillProfileMappingRes) ProtoMessage() {}

func (x *DisconnectInactiveSkillProfileMappingRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectInactiveSkillProfileMappingRes.ProtoReflect.Descriptor instead.
func (*DisconnectInactiveSkillProfileMappingRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{44}
}

// Request message for the CreateSkillProfileGroup RPC.
type CreateSkillProfileGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skill profile group to create.
	// @skill_profile_group_sid will be ignored since that field is generated upon creation of the entity.
	// @skill_profile_group_sids will be ignored since associations cannot be created by this method.
	SkillProfileGroup *SkillProfileGroup `protobuf:"bytes,1,opt,name=skill_profile_group,json=skillProfileGroup,proto3" json:"skill_profile_group,omitempty"`
}

func (x *CreateSkillProfileGroupReq) Reset() {
	*x = CreateSkillProfileGroupReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSkillProfileGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSkillProfileGroupReq) ProtoMessage() {}

func (x *CreateSkillProfileGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSkillProfileGroupReq.ProtoReflect.Descriptor instead.
func (*CreateSkillProfileGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{45}
}

func (x *CreateSkillProfileGroupReq) GetSkillProfileGroup() *SkillProfileGroup {
	if x != nil {
		return x.SkillProfileGroup
	}
	return nil
}

// Response message for the CreateSkillProfileGroup RPC.
type CreateSkillProfileGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile group created.
	SkillProfileGroupSid int64 `protobuf:"varint,1,opt,name=skill_profile_group_sid,json=skillProfileGroupSid,proto3" json:"skill_profile_group_sid,omitempty"`
}

func (x *CreateSkillProfileGroupRes) Reset() {
	*x = CreateSkillProfileGroupRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSkillProfileGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSkillProfileGroupRes) ProtoMessage() {}

func (x *CreateSkillProfileGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSkillProfileGroupRes.ProtoReflect.Descriptor instead.
func (*CreateSkillProfileGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{46}
}

func (x *CreateSkillProfileGroupRes) GetSkillProfileGroupSid() int64 {
	if x != nil {
		return x.SkillProfileGroupSid
	}
	return 0
}

// Request message for the UpdateSkillProfileGroup RPC.
type UpdateSkillProfileGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skill profile group to update.
	// @skill_profile_group_sids will be ignored since associations cannot be updated by this method.
	SkillProfileGroup *SkillProfileGroup `protobuf:"bytes,1,opt,name=skill_profile_group,json=skillProfileGroup,proto3" json:"skill_profile_group,omitempty"`
}

func (x *UpdateSkillProfileGroupReq) Reset() {
	*x = UpdateSkillProfileGroupReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkillProfileGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileGroupReq) ProtoMessage() {}

func (x *UpdateSkillProfileGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileGroupReq.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateSkillProfileGroupReq) GetSkillProfileGroup() *SkillProfileGroup {
	if x != nil {
		return x.SkillProfileGroup
	}
	return nil
}

// Response message for the UpdateSkillProfileGroup RPC.
type UpdateSkillProfileGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSkillProfileGroupRes) Reset() {
	*x = UpdateSkillProfileGroupRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkillProfileGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileGroupRes) ProtoMessage() {}

func (x *UpdateSkillProfileGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileGroupRes.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{48}
}

// Request message for the ListSkillProfileGroups RPC.
type ListSkillProfileGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the skill profile groups to get.
	// If left empty it will get all the skill profile groups for the org
	SkillProfileGroupSids []int64 `protobuf:"varint,1,rep,packed,name=skill_profile_group_sids,json=skillProfileGroupSids,proto3" json:"skill_profile_group_sids,omitempty"`
	// Indicates whether inactive profile groups will be included in the result.
	IncludeInactive bool `protobuf:"varint,2,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
}

func (x *ListSkillProfileGroupsReq) Reset() {
	*x = ListSkillProfileGroupsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSkillProfileGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSkillProfileGroupsReq) ProtoMessage() {}

func (x *ListSkillProfileGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSkillProfileGroupsReq.ProtoReflect.Descriptor instead.
func (*ListSkillProfileGroupsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{49}
}

func (x *ListSkillProfileGroupsReq) GetSkillProfileGroupSids() []int64 {
	if x != nil {
		return x.SkillProfileGroupSids
	}
	return nil
}

func (x *ListSkillProfileGroupsReq) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

// Response message for the ListSkillProfileGroups RPC.
type ListSkillProfileGroupsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skill profile groups found.
	SkillProfileGroups []*SkillProfileGroup `protobuf:"bytes,1,rep,name=skill_profile_groups,json=skillProfileGroups,proto3" json:"skill_profile_groups,omitempty"`
}

func (x *ListSkillProfileGroupsRes) Reset() {
	*x = ListSkillProfileGroupsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSkillProfileGroupsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSkillProfileGroupsRes) ProtoMessage() {}

func (x *ListSkillProfileGroupsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSkillProfileGroupsRes.ProtoReflect.Descriptor instead.
func (*ListSkillProfileGroupsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{50}
}

func (x *ListSkillProfileGroupsRes) GetSkillProfileGroups() []*SkillProfileGroup {
	if x != nil {
		return x.SkillProfileGroups
	}
	return nil
}

// Request message for the UpdateSkillProfileGroupAssociations RPC.
type UpdateSkillProfileGroupAssociationsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the skill profile groups to update the associations of.
	SkillProfileGroupSid int64 `protobuf:"varint,1,opt,name=skill_profile_group_sid,json=skillProfileGroupSid,proto3" json:"skill_profile_group_sid,omitempty"`
	// IDs of the skill profiles to associate with this group.
	SkillProfileSidsToAssociate []int64 `protobuf:"varint,2,rep,packed,name=skill_profile_sids_to_associate,json=skillProfileSidsToAssociate,proto3" json:"skill_profile_sids_to_associate,omitempty"`
	// IDs of the skill profiles to disassociate with this group.
	SkillProfileSidsToDisassociate []int64 `protobuf:"varint,3,rep,packed,name=skill_profile_sids_to_disassociate,json=skillProfileSidsToDisassociate,proto3" json:"skill_profile_sids_to_disassociate,omitempty"`
}

func (x *UpdateSkillProfileGroupAssociationsReq) Reset() {
	*x = UpdateSkillProfileGroupAssociationsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkillProfileGroupAssociationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileGroupAssociationsReq) ProtoMessage() {}

func (x *UpdateSkillProfileGroupAssociationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileGroupAssociationsReq.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileGroupAssociationsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateSkillProfileGroupAssociationsReq) GetSkillProfileGroupSid() int64 {
	if x != nil {
		return x.SkillProfileGroupSid
	}
	return 0
}

func (x *UpdateSkillProfileGroupAssociationsReq) GetSkillProfileSidsToAssociate() []int64 {
	if x != nil {
		return x.SkillProfileSidsToAssociate
	}
	return nil
}

func (x *UpdateSkillProfileGroupAssociationsReq) GetSkillProfileSidsToDisassociate() []int64 {
	if x != nil {
		return x.SkillProfileSidsToDisassociate
	}
	return nil
}

// Response message for the UpdateSkillProfileGroupAssociations RPC.
type UpdateSkillProfileGroupAssociationsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSkillProfileGroupAssociationsRes) Reset() {
	*x = UpdateSkillProfileGroupAssociationsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkillProfileGroupAssociationsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileGroupAssociationsRes) ProtoMessage() {}

func (x *UpdateSkillProfileGroupAssociationsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileGroupAssociationsRes.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileGroupAssociationsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{52}
}

// Request message for the DeleteHistoricalDataDeltas RPC.
type DeleteHistoricalDataDeltasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile of which to delete the deltas.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// start datetimes of the deltas to delete.
	// If no datetimes are given, it will delete all the deltas that the given @skill_profile_sid has.
	StartDatetimes []*timestamppb.Timestamp `protobuf:"bytes,2,rep,name=start_datetimes,json=startDatetimes,proto3" json:"start_datetimes,omitempty"`
}

func (x *DeleteHistoricalDataDeltasReq) Reset() {
	*x = DeleteHistoricalDataDeltasReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHistoricalDataDeltasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHistoricalDataDeltasReq) ProtoMessage() {}

func (x *DeleteHistoricalDataDeltasReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHistoricalDataDeltasReq.ProtoReflect.Descriptor instead.
func (*DeleteHistoricalDataDeltasReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteHistoricalDataDeltasReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *DeleteHistoricalDataDeltasReq) GetStartDatetimes() []*timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetimes
	}
	return nil
}

// Response message for the DeleteHistoricalDataDeltas RPC.
type DeleteHistoricalDataDeltasRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteHistoricalDataDeltasRes) Reset() {
	*x = DeleteHistoricalDataDeltasRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHistoricalDataDeltasRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHistoricalDataDeltasRes) ProtoMessage() {}

func (x *DeleteHistoricalDataDeltasRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHistoricalDataDeltasRes.ProtoReflect.Descriptor instead.
func (*DeleteHistoricalDataDeltasRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{54}
}

// Request message for the ListTopSkillProfiles RPC.
type ListTopSkillProfilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// max number of top skill profiles to get.
	MaxNumberOfProfiles int32 `protobuf:"varint,1,opt,name=max_number_of_profiles,json=maxNumberOfProfiles,proto3" json:"max_number_of_profiles,omitempty"`
}

func (x *ListTopSkillProfilesReq) Reset() {
	*x = ListTopSkillProfilesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTopSkillProfilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopSkillProfilesReq) ProtoMessage() {}

func (x *ListTopSkillProfilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopSkillProfilesReq.ProtoReflect.Descriptor instead.
func (*ListTopSkillProfilesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{55}
}

func (x *ListTopSkillProfilesReq) GetMaxNumberOfProfiles() int32 {
	if x != nil {
		return x.MaxNumberOfProfiles
	}
	return 0
}

// Response message for the ListTopSkillProfiles RPC.
type ListTopSkillProfilesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// skill profiles found for the given parameters.
	SkillProfiles []*SkillProfile `protobuf:"bytes,1,rep,name=skill_profiles,json=skillProfiles,proto3" json:"skill_profiles,omitempty"`
}

func (x *ListTopSkillProfilesRes) Reset() {
	*x = ListTopSkillProfilesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTopSkillProfilesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopSkillProfilesRes) ProtoMessage() {}

func (x *ListTopSkillProfilesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopSkillProfilesRes.ProtoReflect.Descriptor instead.
func (*ListTopSkillProfilesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{56}
}

func (x *ListTopSkillProfilesRes) GetSkillProfiles() []*SkillProfile {
	if x != nil {
		return x.SkillProfiles
	}
	return nil
}

// Request message for the GetSkillProfilesCount RPC
type GetSkillProfilesCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSkillProfilesCountReq) Reset() {
	*x = GetSkillProfilesCountReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSkillProfilesCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkillProfilesCountReq) ProtoMessage() {}

func (x *GetSkillProfilesCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkillProfilesCountReq.ProtoReflect.Descriptor instead.
func (*GetSkillProfilesCountReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{57}
}

// Response message for the GetSkillProfilesCount RPC
type GetSkillProfilesCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of skill profiles that the org has.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetSkillProfilesCountRes) Reset() {
	*x = GetSkillProfilesCountRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSkillProfilesCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkillProfilesCountRes) ProtoMessage() {}

func (x *GetSkillProfilesCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkillProfilesCountRes.ProtoReflect.Descriptor instead.
func (*GetSkillProfilesCountRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{58}
}

func (x *GetSkillProfilesCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Request message for the BuildProfileForecastByInterval RPC
type BuildProfileForecastByIntervalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template to use to generate the profile forecast.
	CallProfileTemplate *CallProfileTemplate `protobuf:"bytes,1,opt,name=call_profile_template,json=callProfileTemplate,proto3" json:"call_profile_template,omitempty"`
	// If @fixed_averages_forecast is set to true it will do a fixed averages forecast,
	// and will only use the fixed averages fields and @total_calls_profile from the @call_profile_template.
	// Otherwise, it will do a regular profile forecast and only the fixed averages fields @call_profile_template will be ignored.
	FixedAveragesForecast bool `protobuf:"varint,2,opt,name=fixed_averages_forecast,json=fixedAveragesForecast,proto3" json:"fixed_averages_forecast,omitempty"`
	// ID of the skill profile that the forecast will belong to.
	// Deprecated as of Sep/8/2023: use skill_profile_category instead.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	SkillProfileSid int64 `protobuf:"varint,3,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// Skill profile category that the forecast belongs to.
	SkillProfileCategory *commons.SkillProfileCategory `protobuf:"bytes,4,opt,name=skill_profile_category,json=skillProfileCategory,proto3" json:"skill_profile_category,omitempty"`
}

func (x *BuildProfileForecastByIntervalReq) Reset() {
	*x = BuildProfileForecastByIntervalReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildProfileForecastByIntervalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildProfileForecastByIntervalReq) ProtoMessage() {}

func (x *BuildProfileForecastByIntervalReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildProfileForecastByIntervalReq.ProtoReflect.Descriptor instead.
func (*BuildProfileForecastByIntervalReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{59}
}

func (x *BuildProfileForecastByIntervalReq) GetCallProfileTemplate() *CallProfileTemplate {
	if x != nil {
		return x.CallProfileTemplate
	}
	return nil
}

func (x *BuildProfileForecastByIntervalReq) GetFixedAveragesForecast() bool {
	if x != nil {
		return x.FixedAveragesForecast
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *BuildProfileForecastByIntervalReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *BuildProfileForecastByIntervalReq) GetSkillProfileCategory() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillProfileCategory
	}
	return nil
}

// Message type specifying calls in an interval for a specific skill profile
type CallDataByInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start time of the interval.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// ID of the skill profile to forecast for (not set in profile forecasts).
	// Deprecated as of Sep/8/2023: use skill_profile_category instead.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	SkillProfileSid int64 `protobuf:"varint,2,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// the number of calls in this interval with this skill profile (answered + unanswered).
	TotalCalls int32 `protobuf:"varint,3,opt,name=total_calls,json=totalCalls,proto3" json:"total_calls,omitempty"`
	// optional
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,4,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// optional
	AverageHandleTimeInSeconds float32 `protobuf:"fixed32,5,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// optional
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,6,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// optional
	AverageTimeToAbortInSeconds float32 `protobuf:"fixed32,7,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// the number of abandoned calls in this interval for this skill profile.
	TotalAbandonedCalls int32 `protobuf:"varint,8,opt,name=total_abandoned_calls,json=totalAbandonedCalls,proto3" json:"total_abandoned_calls,omitempty"`
	// Whether the interval has been modified or not
	IsDelta bool `protobuf:"varint,9,opt,name=is_delta,json=isDelta,proto3" json:"is_delta,omitempty"`
	// ID of the forecast interval that the delta/interval belongs to
	ForecastDataIntervalSid int64 `protobuf:"varint,10,opt,name=forecast_data_interval_sid,json=forecastDataIntervalSid,proto3" json:"forecast_data_interval_sid,omitempty"`
	// Interval width minutes that the interval used on creation.
	// Only set for forecast intervals.
	IntervalWidthInMinutes int32 `protobuf:"varint,11,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// Skill profile category that the interval belongs to.
	SkillProfileCategory *commons.SkillProfileCategory `protobuf:"bytes,12,opt,name=skill_profile_category,json=skillProfileCategory,proto3" json:"skill_profile_category,omitempty"`
}

func (x *CallDataByInterval) Reset() {
	*x = CallDataByInterval{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallDataByInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallDataByInterval) ProtoMessage() {}

func (x *CallDataByInterval) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallDataByInterval.ProtoReflect.Descriptor instead.
func (*CallDataByInterval) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{60}
}

func (x *CallDataByInterval) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *CallDataByInterval) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *CallDataByInterval) GetTotalCalls() int32 {
	if x != nil {
		return x.TotalCalls
	}
	return 0
}

func (x *CallDataByInterval) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *CallDataByInterval) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *CallDataByInterval) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *CallDataByInterval) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

func (x *CallDataByInterval) GetTotalAbandonedCalls() int32 {
	if x != nil {
		return x.TotalAbandonedCalls
	}
	return 0
}

func (x *CallDataByInterval) GetIsDelta() bool {
	if x != nil {
		return x.IsDelta
	}
	return false
}

func (x *CallDataByInterval) GetForecastDataIntervalSid() int64 {
	if x != nil {
		return x.ForecastDataIntervalSid
	}
	return 0
}

func (x *CallDataByInterval) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *CallDataByInterval) GetSkillProfileCategory() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillProfileCategory
	}
	return nil
}

// Request message for the BuildProfileForecastByIntervalWithStats RPC
type BuildProfileForecastByIntervalWithStatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template to use to generate the profile forecast.
	CallProfileTemplate *CallProfileTemplate `protobuf:"bytes,1,opt,name=call_profile_template,json=callProfileTemplate,proto3" json:"call_profile_template,omitempty"`
	// If @fixed_averages_forecast is set to true it will do a fixed averages forecast,
	// and will only use the fixed averages fields and @total_calls_profile from the @call_profile_template.
	// Otherwise, it will do a regular profile forecast and only the fixed averages fields @call_profile_template will be ignored.
	FixedAveragesForecast bool `protobuf:"varint,2,opt,name=fixed_averages_forecast,json=fixedAveragesForecast,proto3" json:"fixed_averages_forecast,omitempty"`
	// ID of the skill profile that the forecast will belong to.
	// Deprecated as of Sep/8/2023: use skill_profile_category instead.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	SkillProfileSid int64 `protobuf:"varint,3,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// Skill profile category that the forecast belongs to.
	SkillProfileCategory *commons.SkillProfileCategory `protobuf:"bytes,4,opt,name=skill_profile_category,json=skillProfileCategory,proto3" json:"skill_profile_category,omitempty"`
}

func (x *BuildProfileForecastByIntervalWithStatsReq) Reset() {
	*x = BuildProfileForecastByIntervalWithStatsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildProfileForecastByIntervalWithStatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildProfileForecastByIntervalWithStatsReq) ProtoMessage() {}

func (x *BuildProfileForecastByIntervalWithStatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildProfileForecastByIntervalWithStatsReq.ProtoReflect.Descriptor instead.
func (*BuildProfileForecastByIntervalWithStatsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{61}
}

func (x *BuildProfileForecastByIntervalWithStatsReq) GetCallProfileTemplate() *CallProfileTemplate {
	if x != nil {
		return x.CallProfileTemplate
	}
	return nil
}

func (x *BuildProfileForecastByIntervalWithStatsReq) GetFixedAveragesForecast() bool {
	if x != nil {
		return x.FixedAveragesForecast
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *BuildProfileForecastByIntervalWithStatsReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *BuildProfileForecastByIntervalWithStatsReq) GetSkillProfileCategory() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillProfileCategory
	}
	return nil
}

// Response message for BuildProfileForecastByIntervalWithStats RPC
type BuildProfileForecastByIntervalWithStatsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResultOneof:
	//
	//	*BuildProfileForecastByIntervalWithStatsRes_CallData
	//	*BuildProfileForecastByIntervalWithStatsRes_ForecastStats
	ResultOneof isBuildProfileForecastByIntervalWithStatsRes_ResultOneof `protobuf_oneof:"result_oneof"`
}

func (x *BuildProfileForecastByIntervalWithStatsRes) Reset() {
	*x = BuildProfileForecastByIntervalWithStatsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildProfileForecastByIntervalWithStatsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildProfileForecastByIntervalWithStatsRes) ProtoMessage() {}

func (x *BuildProfileForecastByIntervalWithStatsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildProfileForecastByIntervalWithStatsRes.ProtoReflect.Descriptor instead.
func (*BuildProfileForecastByIntervalWithStatsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{62}
}

func (m *BuildProfileForecastByIntervalWithStatsRes) GetResultOneof() isBuildProfileForecastByIntervalWithStatsRes_ResultOneof {
	if m != nil {
		return m.ResultOneof
	}
	return nil
}

func (x *BuildProfileForecastByIntervalWithStatsRes) GetCallData() *CallDataByInterval {
	if x, ok := x.GetResultOneof().(*BuildProfileForecastByIntervalWithStatsRes_CallData); ok {
		return x.CallData
	}
	return nil
}

func (x *BuildProfileForecastByIntervalWithStatsRes) GetForecastStats() *GetForecastStatisticsRes {
	if x, ok := x.GetResultOneof().(*BuildProfileForecastByIntervalWithStatsRes_ForecastStats); ok {
		return x.ForecastStats
	}
	return nil
}

type isBuildProfileForecastByIntervalWithStatsRes_ResultOneof interface {
	isBuildProfileForecastByIntervalWithStatsRes_ResultOneof()
}

type BuildProfileForecastByIntervalWithStatsRes_CallData struct {
	// Forecast data intervals generated from the forecast
	CallData *CallDataByInterval `protobuf:"bytes,1,opt,name=call_data,json=callData,proto3,oneof"`
}

type BuildProfileForecastByIntervalWithStatsRes_ForecastStats struct {
	// Statistics comparing the historical data during the test interval with the prediction data during the same period.
	// This will only be the type of the first message returned.
	ForecastStats *GetForecastStatisticsRes `protobuf:"bytes,2,opt,name=forecast_stats,json=forecastStats,proto3,oneof"`
}

func (*BuildProfileForecastByIntervalWithStatsRes_CallData) isBuildProfileForecastByIntervalWithStatsRes_ResultOneof() {
}

func (*BuildProfileForecastByIntervalWithStatsRes_ForecastStats) isBuildProfileForecastByIntervalWithStatsRes_ResultOneof() {
}

// Request message for the UpsertProfileForecast RPC
type UpsertProfileForecastReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile that the forecast will belong to.
	// Deprecated as of Sep/8/2023: use skill_profile_category instead.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// Template to use to generate the forecast that will be stored.
	CallProfileTemplate *CallProfileTemplate `protobuf:"bytes,2,opt,name=call_profile_template,json=callProfileTemplate,proto3" json:"call_profile_template,omitempty"`
	// If @fixed_averages_forecast is set to true it will do a fixed averages forecast,
	// and will only use the fixed averages fields and @total_calls_profile from the @call_profile_template.
	// Otherwise, it will do a regular profile forecast and only the fixed averages fields @call_profile_template will be ignored.
	FixedAveragesForecast bool `protobuf:"varint,3,opt,name=fixed_averages_forecast,json=fixedAveragesForecast,proto3" json:"fixed_averages_forecast,omitempty"`
	// Skill profile category that the forecast belongs to.
	SkillProfileCategory *commons.SkillProfileCategory `protobuf:"bytes,4,opt,name=skill_profile_category,json=skillProfileCategory,proto3" json:"skill_profile_category,omitempty"`
}

func (x *UpsertProfileForecastReq) Reset() {
	*x = UpsertProfileForecastReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertProfileForecastReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProfileForecastReq) ProtoMessage() {}

func (x *UpsertProfileForecastReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProfileForecastReq.ProtoReflect.Descriptor instead.
func (*UpsertProfileForecastReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{63}
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *UpsertProfileForecastReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *UpsertProfileForecastReq) GetCallProfileTemplate() *CallProfileTemplate {
	if x != nil {
		return x.CallProfileTemplate
	}
	return nil
}

func (x *UpsertProfileForecastReq) GetFixedAveragesForecast() bool {
	if x != nil {
		return x.FixedAveragesForecast
	}
	return false
}

func (x *UpsertProfileForecastReq) GetSkillProfileCategory() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillProfileCategory
	}
	return nil
}

// Response message for the UpsertProfileForecast RPC
type UpsertProfileForecastRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpsertProfileForecastRes) Reset() {
	*x = UpsertProfileForecastRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertProfileForecastRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProfileForecastRes) ProtoMessage() {}

func (x *UpsertProfileForecastRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProfileForecastRes.ProtoReflect.Descriptor instead.
func (*UpsertProfileForecastRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{64}
}

// Request message for the CreateCallProfileTemplate RPC
type CreateCallProfileTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template to store in the db.
	CallProfileTemplate *CallProfileTemplate `protobuf:"bytes,1,opt,name=call_profile_template,json=callProfileTemplate,proto3" json:"call_profile_template,omitempty"`
}

func (x *CreateCallProfileTemplateReq) Reset() {
	*x = CreateCallProfileTemplateReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCallProfileTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallProfileTemplateReq) ProtoMessage() {}

func (x *CreateCallProfileTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallProfileTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateCallProfileTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{65}
}

func (x *CreateCallProfileTemplateReq) GetCallProfileTemplate() *CallProfileTemplate {
	if x != nil {
		return x.CallProfileTemplate
	}
	return nil
}

// Response message for the CreateCallProfileTemplate RPC
type CreateCallProfileTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCallProfileTemplateRes) Reset() {
	*x = CreateCallProfileTemplateRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCallProfileTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallProfileTemplateRes) ProtoMessage() {}

func (x *CreateCallProfileTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallProfileTemplateRes.ProtoReflect.Descriptor instead.
func (*CreateCallProfileTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{66}
}

// Request message for the DeleteCallProfileTemplate RPC
type DeleteCallProfileTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the call profile template to delete.
	CallProfileTemplateSid int64 `protobuf:"varint,1,opt,name=call_profile_template_sid,json=callProfileTemplateSid,proto3" json:"call_profile_template_sid,omitempty"`
}

func (x *DeleteCallProfileTemplateReq) Reset() {
	*x = DeleteCallProfileTemplateReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCallProfileTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCallProfileTemplateReq) ProtoMessage() {}

func (x *DeleteCallProfileTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCallProfileTemplateReq.ProtoReflect.Descriptor instead.
func (*DeleteCallProfileTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{67}
}

func (x *DeleteCallProfileTemplateReq) GetCallProfileTemplateSid() int64 {
	if x != nil {
		return x.CallProfileTemplateSid
	}
	return 0
}

// Response message for the DeleteCallProfileTemplate RPC
type DeleteCallProfileTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCallProfileTemplateRes) Reset() {
	*x = DeleteCallProfileTemplateRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCallProfileTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCallProfileTemplateRes) ProtoMessage() {}

func (x *DeleteCallProfileTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCallProfileTemplateRes.ProtoReflect.Descriptor instead.
func (*DeleteCallProfileTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{68}
}

// Message type specifying the parameters for a regression forecast
type RegressionTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the regression template.
	RegressionTemplateSid int64 `protobuf:"varint,1,opt,name=regression_template_sid,json=regressionTemplateSid,proto3" json:"regression_template_sid,omitempty"`
	// Name of the regression template.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Selected algorithmic method to be used
	ModelType commons.RegressionForecasterModelTypes `protobuf:"varint,3,opt,name=model_type,json=modelType,proto3,enum=api.commons.RegressionForecasterModelTypes" json:"model_type,omitempty"`
	// Number of weeks of training data to exclude when building a forecast.
	ExcludeCallDataForNWeeks int32 `protobuf:"varint,4,opt,name=exclude_call_data_for_n_weeks,json=excludeCallDataForNWeeks,proto3" json:"exclude_call_data_for_n_weeks,omitempty"`
	// Number of weeks in the past to emphasize;
	NumWeeksAgoToEmphasize int32 `protobuf:"varint,5,opt,name=num_weeks_ago_to_emphasize,json=numWeeksAgoToEmphasize,proto3" json:"num_weeks_ago_to_emphasize,omitempty"`
	// Value that especificies the max value of deviations to use. Greater deviations than the specified values will be excluded.
	// optional
	MaxDeviation float32 `protobuf:"fixed32,6,opt,name=max_deviation,json=maxDeviation,proto3" json:"max_deviation,omitempty"`
	// Percentage from 0 to 100 that specifies the trend sensitivity.
	TrendSensitivity float32 `protobuf:"fixed32,7,opt,name=trend_sensitivity,json=trendSensitivity,proto3" json:"trend_sensitivity,omitempty"`
	// Whether or not to exclude intervals with no calls.
	ExcludeIntervalsWithNoCalls bool `protobuf:"varint,8,opt,name=exclude_intervals_with_no_calls,json=excludeIntervalsWithNoCalls,proto3" json:"exclude_intervals_with_no_calls,omitempty"`
	// Processing type for the averages.
	AvgsProcessingType commons.RegressionForecasterAvgsProcessingType `protobuf:"varint,9,opt,name=avgs_processing_type,json=avgsProcessingType,proto3,enum=api.commons.RegressionForecasterAvgsProcessingType" json:"avgs_processing_type,omitempty"`
	// Whether or not to include seasonality.
	IncludeSeasonality bool `protobuf:"varint,10,opt,name=include_seasonality,json=includeSeasonality,proto3" json:"include_seasonality,omitempty"`
	// Whether or not to include trend.
	IncludeTrend bool `protobuf:"varint,11,opt,name=include_trend,json=includeTrend,proto3" json:"include_trend,omitempty"`
}

func (x *RegressionTemplate) Reset() {
	*x = RegressionTemplate{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegressionTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegressionTemplate) ProtoMessage() {}

func (x *RegressionTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegressionTemplate.ProtoReflect.Descriptor instead.
func (*RegressionTemplate) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{69}
}

func (x *RegressionTemplate) GetRegressionTemplateSid() int64 {
	if x != nil {
		return x.RegressionTemplateSid
	}
	return 0
}

func (x *RegressionTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegressionTemplate) GetModelType() commons.RegressionForecasterModelTypes {
	if x != nil {
		return x.ModelType
	}
	return commons.RegressionForecasterModelTypes(0)
}

func (x *RegressionTemplate) GetExcludeCallDataForNWeeks() int32 {
	if x != nil {
		return x.ExcludeCallDataForNWeeks
	}
	return 0
}

func (x *RegressionTemplate) GetNumWeeksAgoToEmphasize() int32 {
	if x != nil {
		return x.NumWeeksAgoToEmphasize
	}
	return 0
}

func (x *RegressionTemplate) GetMaxDeviation() float32 {
	if x != nil {
		return x.MaxDeviation
	}
	return 0
}

func (x *RegressionTemplate) GetTrendSensitivity() float32 {
	if x != nil {
		return x.TrendSensitivity
	}
	return 0
}

func (x *RegressionTemplate) GetExcludeIntervalsWithNoCalls() bool {
	if x != nil {
		return x.ExcludeIntervalsWithNoCalls
	}
	return false
}

func (x *RegressionTemplate) GetAvgsProcessingType() commons.RegressionForecasterAvgsProcessingType {
	if x != nil {
		return x.AvgsProcessingType
	}
	return commons.RegressionForecasterAvgsProcessingType(0)
}

func (x *RegressionTemplate) GetIncludeSeasonality() bool {
	if x != nil {
		return x.IncludeSeasonality
	}
	return false
}

func (x *RegressionTemplate) GetIncludeTrend() bool {
	if x != nil {
		return x.IncludeTrend
	}
	return false
}

// Request message for the CreateRegressionTemplate RPC
type CreateRegressionTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Regression template to be stored in the db.
	RegressionTemplate *RegressionTemplate `protobuf:"bytes,1,opt,name=regression_template,json=regressionTemplate,proto3" json:"regression_template,omitempty"`
}

func (x *CreateRegressionTemplateReq) Reset() {
	*x = CreateRegressionTemplateReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRegressionTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegressionTemplateReq) ProtoMessage() {}

func (x *CreateRegressionTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegressionTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateRegressionTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{70}
}

func (x *CreateRegressionTemplateReq) GetRegressionTemplate() *RegressionTemplate {
	if x != nil {
		return x.RegressionTemplate
	}
	return nil
}

// Response message for the CreateRegressionTemplate RPC
type CreateRegressionTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateRegressionTemplateRes) Reset() {
	*x = CreateRegressionTemplateRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRegressionTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegressionTemplateRes) ProtoMessage() {}

func (x *CreateRegressionTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegressionTemplateRes.ProtoReflect.Descriptor instead.
func (*CreateRegressionTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{71}
}

// Request message for the DeleteRegressionTemplate RPC
type DeleteRegressionTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the regression template to delete.
	RegressionTemplateSid int64 `protobuf:"varint,1,opt,name=regression_template_sid,json=regressionTemplateSid,proto3" json:"regression_template_sid,omitempty"`
}

func (x *DeleteRegressionTemplateReq) Reset() {
	*x = DeleteRegressionTemplateReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRegressionTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegressionTemplateReq) ProtoMessage() {}

func (x *DeleteRegressionTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegressionTemplateReq.ProtoReflect.Descriptor instead.
func (*DeleteRegressionTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteRegressionTemplateReq) GetRegressionTemplateSid() int64 {
	if x != nil {
		return x.RegressionTemplateSid
	}
	return 0
}

// Response message for the DeleteRegressionTemplate RPC
type DeleteRegressionTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRegressionTemplateRes) Reset() {
	*x = DeleteRegressionTemplateRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRegressionTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegressionTemplateRes) ProtoMessage() {}

func (x *DeleteRegressionTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegressionTemplateRes.ProtoReflect.Descriptor instead.
func (*DeleteRegressionTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{73}
}

// Request message for the ListRegressionTemplates RPC
type ListRegressionTemplatesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRegressionTemplatesReq) Reset() {
	*x = ListRegressionTemplatesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegressionTemplatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegressionTemplatesReq) ProtoMessage() {}

func (x *ListRegressionTemplatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegressionTemplatesReq.ProtoReflect.Descriptor instead.
func (*ListRegressionTemplatesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{74}
}

// Response message for the ListRegressionTemplates RPC
type ListRegressionTemplatesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all existing regression templates retrieved for an org.
	RegressionTemplates []*RegressionTemplate `protobuf:"bytes,1,rep,name=regression_templates,json=regressionTemplates,proto3" json:"regression_templates,omitempty"`
}

func (x *ListRegressionTemplatesRes) Reset() {
	*x = ListRegressionTemplatesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegressionTemplatesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegressionTemplatesRes) ProtoMessage() {}

func (x *ListRegressionTemplatesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegressionTemplatesRes.ProtoReflect.Descriptor instead.
func (*ListRegressionTemplatesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{75}
}

func (x *ListRegressionTemplatesRes) GetRegressionTemplates() []*RegressionTemplate {
	if x != nil {
		return x.RegressionTemplates
	}
	return nil
}

// Request message for the BuildRegressionForecastByInterval RPC
type BuildRegressionForecastByIntervalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the following only apply for avgs_processing_type=RegressionForecasterAvgsProcessingType.FIXED_AVERAGES
	// optional
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,1,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// optional
	AverageHandleTimeInSeconds float32 `protobuf:"fixed32,2,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// optional
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,3,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// optional
	AverageTimeToAbortInSeconds float32 `protobuf:"fixed32,4,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// Template to use to generate the regression forecast
	RegressionTemplate *RegressionTemplate `protobuf:"bytes,5,opt,name=regression_template,json=regressionTemplate,proto3" json:"regression_template,omitempty"`
	// IDs of the skill profiles to generate the forecasts,
	SkillProfileSidsToForecast []int64 `protobuf:"varint,6,rep,packed,name=skill_profile_sids_to_forecast,json=skillProfileSidsToForecast,proto3" json:"skill_profile_sids_to_forecast,omitempty"`
}

func (x *BuildRegressionForecastByIntervalReq) Reset() {
	*x = BuildRegressionForecastByIntervalReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildRegressionForecastByIntervalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildRegressionForecastByIntervalReq) ProtoMessage() {}

func (x *BuildRegressionForecastByIntervalReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildRegressionForecastByIntervalReq.ProtoReflect.Descriptor instead.
func (*BuildRegressionForecastByIntervalReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{76}
}

func (x *BuildRegressionForecastByIntervalReq) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalReq) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalReq) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalReq) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalReq) GetRegressionTemplate() *RegressionTemplate {
	if x != nil {
		return x.RegressionTemplate
	}
	return nil
}

func (x *BuildRegressionForecastByIntervalReq) GetSkillProfileSidsToForecast() []int64 {
	if x != nil {
		return x.SkillProfileSidsToForecast
	}
	return nil
}

// Request message for the BuildRegressionForecastByIntervalWithStats RPC
type BuildRegressionForecastByIntervalWithStatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the following only apply for avgs_processing_type=RegressionForecasterAvgsProcessingType.FIXED_AVERAGES
	// optional
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,1,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// optional
	AverageHandleTimeInSeconds float32 `protobuf:"fixed32,2,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// optional
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,3,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// optional
	AverageTimeToAbortInSeconds float32 `protobuf:"fixed32,4,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// Template to use to generate the regression forecast
	RegressionTemplate *RegressionTemplate `protobuf:"bytes,5,opt,name=regression_template,json=regressionTemplate,proto3" json:"regression_template,omitempty"`
	// IDs of the skill profiles to generate the forecasts,
	SkillProfileSidsToForecast []int64 `protobuf:"varint,6,rep,packed,name=skill_profile_sids_to_forecast,json=skillProfileSidsToForecast,proto3" json:"skill_profile_sids_to_forecast,omitempty"`
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) Reset() {
	*x = BuildRegressionForecastByIntervalWithStatsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildRegressionForecastByIntervalWithStatsReq) ProtoMessage() {}

func (x *BuildRegressionForecastByIntervalWithStatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildRegressionForecastByIntervalWithStatsReq.ProtoReflect.Descriptor instead.
func (*BuildRegressionForecastByIntervalWithStatsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{77}
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) GetRegressionTemplate() *RegressionTemplate {
	if x != nil {
		return x.RegressionTemplate
	}
	return nil
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) GetSkillProfileSidsToForecast() []int64 {
	if x != nil {
		return x.SkillProfileSidsToForecast
	}
	return nil
}

// Represents the statistics of a given forecast
type GetForecastStatisticsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the total number of intervals measured
	NumIntervalsMeasured int32 `protobuf:"varint,1,opt,name=num_intervals_measured,json=numIntervalsMeasured,proto3" json:"num_intervals_measured,omitempty"`
	// total number of actual historical calls
	TotalCallsHistorical int32 `protobuf:"varint,2,opt,name=total_calls_historical,json=totalCallsHistorical,proto3" json:"total_calls_historical,omitempty"`
	// total number of predicted calls
	TotalCallsPredicted int32 `protobuf:"varint,3,opt,name=total_calls_predicted,json=totalCallsPredicted,proto3" json:"total_calls_predicted,omitempty"`
	// percentage over predicted (+ve) or under predicted (-ve)
	PercentCallsOverUnder float32 `protobuf:"fixed32,4,opt,name=percent_calls_over_under,json=percentCallsOverUnder,proto3" json:"percent_calls_over_under,omitempty"`
	// root-mean-squared error between actual and predicted calls
	RmsErrorCalls float32 `protobuf:"fixed32,5,opt,name=rms_error_calls,json=rmsErrorCalls,proto3" json:"rms_error_calls,omitempty"`
	// root-mean-squared error between actual and predicted atab
	RmsError_ATAB float32 `protobuf:"fixed32,6,opt,name=rms_error_ATAB,json=rmsErrorATAB,proto3" json:"rms_error_ATAB,omitempty"`
	// root-mean-squared error between actual and predicted asa
	RmsError_ASA float32 `protobuf:"fixed32,7,opt,name=rms_error_ASA,json=rmsErrorASA,proto3" json:"rms_error_ASA,omitempty"`
	// root-mean-squared error between actual and predicted acw
	RmsError_ACW float32 `protobuf:"fixed32,8,opt,name=rms_error_ACW,json=rmsErrorACW,proto3" json:"rms_error_ACW,omitempty"`
	// root-mean-squared error between actual and predicted aht
	RmsError_AHT float32 `protobuf:"fixed32,9,opt,name=rms_error_AHT,json=rmsErrorAHT,proto3" json:"rms_error_AHT,omitempty"`
	// Indicates whether or not the stats generated were invalid
	AreStatsInvalid bool `protobuf:"varint,10,opt,name=are_stats_invalid,json=areStatsInvalid,proto3" json:"are_stats_invalid,omitempty"`
	// Message explaining why the stats were invalid
	InvalidReason string `protobuf:"bytes,11,opt,name=invalid_reason,json=invalidReason,proto3" json:"invalid_reason,omitempty"`
}

func (x *GetForecastStatisticsRes) Reset() {
	*x = GetForecastStatisticsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetForecastStatisticsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastStatisticsRes) ProtoMessage() {}

func (x *GetForecastStatisticsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastStatisticsRes.ProtoReflect.Descriptor instead.
func (*GetForecastStatisticsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{78}
}

func (x *GetForecastStatisticsRes) GetNumIntervalsMeasured() int32 {
	if x != nil {
		return x.NumIntervalsMeasured
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetTotalCallsHistorical() int32 {
	if x != nil {
		return x.TotalCallsHistorical
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetTotalCallsPredicted() int32 {
	if x != nil {
		return x.TotalCallsPredicted
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetPercentCallsOverUnder() float32 {
	if x != nil {
		return x.PercentCallsOverUnder
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetRmsErrorCalls() float32 {
	if x != nil {
		return x.RmsErrorCalls
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetRmsError_ATAB() float32 {
	if x != nil {
		return x.RmsError_ATAB
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetRmsError_ASA() float32 {
	if x != nil {
		return x.RmsError_ASA
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetRmsError_ACW() float32 {
	if x != nil {
		return x.RmsError_ACW
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetRmsError_AHT() float32 {
	if x != nil {
		return x.RmsError_AHT
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetAreStatsInvalid() bool {
	if x != nil {
		return x.AreStatsInvalid
	}
	return false
}

func (x *GetForecastStatisticsRes) GetInvalidReason() string {
	if x != nil {
		return x.InvalidReason
	}
	return ""
}

// Response message for BuildRegressionForecastByIntervalWithStats RPC
type BuildRegressionForecastByIntervalWithStatsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResultOneof:
	//
	//	*BuildRegressionForecastByIntervalWithStatsRes_CallData
	//	*BuildRegressionForecastByIntervalWithStatsRes_ForecastStats
	ResultOneof isBuildRegressionForecastByIntervalWithStatsRes_ResultOneof `protobuf_oneof:"result_oneof"`
}

func (x *BuildRegressionForecastByIntervalWithStatsRes) Reset() {
	*x = BuildRegressionForecastByIntervalWithStatsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildRegressionForecastByIntervalWithStatsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildRegressionForecastByIntervalWithStatsRes) ProtoMessage() {}

func (x *BuildRegressionForecastByIntervalWithStatsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildRegressionForecastByIntervalWithStatsRes.ProtoReflect.Descriptor instead.
func (*BuildRegressionForecastByIntervalWithStatsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{79}
}

func (m *BuildRegressionForecastByIntervalWithStatsRes) GetResultOneof() isBuildRegressionForecastByIntervalWithStatsRes_ResultOneof {
	if m != nil {
		return m.ResultOneof
	}
	return nil
}

func (x *BuildRegressionForecastByIntervalWithStatsRes) GetCallData() *CallDataByInterval {
	if x, ok := x.GetResultOneof().(*BuildRegressionForecastByIntervalWithStatsRes_CallData); ok {
		return x.CallData
	}
	return nil
}

func (x *BuildRegressionForecastByIntervalWithStatsRes) GetForecastStats() *GetForecastStatisticsRes {
	if x, ok := x.GetResultOneof().(*BuildRegressionForecastByIntervalWithStatsRes_ForecastStats); ok {
		return x.ForecastStats
	}
	return nil
}

type isBuildRegressionForecastByIntervalWithStatsRes_ResultOneof interface {
	isBuildRegressionForecastByIntervalWithStatsRes_ResultOneof()
}

type BuildRegressionForecastByIntervalWithStatsRes_CallData struct {
	// Forecast data intervals generated from the forecast
	CallData *CallDataByInterval `protobuf:"bytes,1,opt,name=call_data,json=callData,proto3,oneof"`
}

type BuildRegressionForecastByIntervalWithStatsRes_ForecastStats struct {
	// Statistics comparing the historical data during the test interval with the prediction data during the same period.
	// This will only be the type of the first message returned.
	ForecastStats *GetForecastStatisticsRes `protobuf:"bytes,2,opt,name=forecast_stats,json=forecastStats,proto3,oneof"`
}

func (*BuildRegressionForecastByIntervalWithStatsRes_CallData) isBuildRegressionForecastByIntervalWithStatsRes_ResultOneof() {
}

func (*BuildRegressionForecastByIntervalWithStatsRes_ForecastStats) isBuildRegressionForecastByIntervalWithStatsRes_ResultOneof() {
}

// Request message for the ListCallProfileTemplates RPC
type ListCallProfileTemplatesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCallProfileTemplatesReq) Reset() {
	*x = ListCallProfileTemplatesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCallProfileTemplatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCallProfileTemplatesReq) ProtoMessage() {}

func (x *ListCallProfileTemplatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCallProfileTemplatesReq.ProtoReflect.Descriptor instead.
func (*ListCallProfileTemplatesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{80}
}

// Response message for the ListCallProfileTemplates RPC
type ListCallProfileTemplatesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the call profile templates for the requesting org
	CallProfileTemplates []*CallProfileTemplate `protobuf:"bytes,1,rep,name=call_profile_templates,json=callProfileTemplates,proto3" json:"call_profile_templates,omitempty"`
}

func (x *ListCallProfileTemplatesRes) Reset() {
	*x = ListCallProfileTemplatesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCallProfileTemplatesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCallProfileTemplatesRes) ProtoMessage() {}

func (x *ListCallProfileTemplatesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCallProfileTemplatesRes.ProtoReflect.Descriptor instead.
func (*ListCallProfileTemplatesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{81}
}

func (x *ListCallProfileTemplatesRes) GetCallProfileTemplates() []*CallProfileTemplate {
	if x != nil {
		return x.CallProfileTemplates
	}
	return nil
}

// Request message for the ListForecastIntervalsForSkillProfile RPC
// DEPRECATED as of Sep/13/2023 - Use ListForecastIntervals instead.
//
// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
type ListForecastIntervalsForSkillProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of skill profile to get the forecast of.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
}

func (x *ListForecastIntervalsForSkillProfileReq) Reset() {
	*x = ListForecastIntervalsForSkillProfileReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListForecastIntervalsForSkillProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListForecastIntervalsForSkillProfileReq) ProtoMessage() {}

func (x *ListForecastIntervalsForSkillProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListForecastIntervalsForSkillProfileReq.ProtoReflect.Descriptor instead.
func (*ListForecastIntervalsForSkillProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{82}
}

func (x *ListForecastIntervalsForSkillProfileReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

// Request message for the ListForecastIntervals RPC
type ListForecastIntervalsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Category to get the forecast data intervals for.
	SkillProfileCategory *commons.SkillProfileCategory `protobuf:"bytes,1,opt,name=skill_profile_category,json=skillProfileCategory,proto3" json:"skill_profile_category,omitempty"`
}

func (x *ListForecastIntervalsReq) Reset() {
	*x = ListForecastIntervalsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListForecastIntervalsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListForecastIntervalsReq) ProtoMessage() {}

func (x *ListForecastIntervalsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListForecastIntervalsReq.ProtoReflect.Descriptor instead.
func (*ListForecastIntervalsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{83}
}

func (x *ListForecastIntervalsReq) GetSkillProfileCategory() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillProfileCategory
	}
	return nil
}

// Request message for the ListForecastIntervalsV2 RPC
type ListForecastIntervalsV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Category to get the forecast data intervals for.
	SkillProfileCategory *commons.SkillProfileCategory `protobuf:"bytes,1,opt,name=skill_profile_category,json=skillProfileCategory,proto3" json:"skill_profile_category,omitempty"`
}

func (x *ListForecastIntervalsV2Request) Reset() {
	*x = ListForecastIntervalsV2Request{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListForecastIntervalsV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListForecastIntervalsV2Request) ProtoMessage() {}

func (x *ListForecastIntervalsV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListForecastIntervalsV2Request.ProtoReflect.Descriptor instead.
func (*ListForecastIntervalsV2Request) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{84}
}

func (x *ListForecastIntervalsV2Request) GetSkillProfileCategory() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillProfileCategory
	}
	return nil
}

// Response message for the ListForecastIntervalsV2 RPC
type ListForecastIntervalsV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Intervals found for the skill profile category.
	Intervals []*CallDataByInterval `protobuf:"bytes,1,rep,name=intervals,proto3" json:"intervals,omitempty"`
}

func (x *ListForecastIntervalsV2Response) Reset() {
	*x = ListForecastIntervalsV2Response{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListForecastIntervalsV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListForecastIntervalsV2Response) ProtoMessage() {}

func (x *ListForecastIntervalsV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListForecastIntervalsV2Response.ProtoReflect.Descriptor instead.
func (*ListForecastIntervalsV2Response) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{85}
}

func (x *ListForecastIntervalsV2Response) GetIntervals() []*CallDataByInterval {
	if x != nil {
		return x.Intervals
	}
	return nil
}

// Request message for the UpsertRegressionForecast RPC
type UpsertRegressionForecastReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Forecast template used to build the regression forecast
	RegressionTemplate *RegressionTemplate `protobuf:"bytes,1,opt,name=regression_template,json=regressionTemplate,proto3" json:"regression_template,omitempty"`
	// the following only apply for avgs_processing_type=RegressionForecasterAvgsProcessingType.FIXED_AVERAGES
	// optional
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,2,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// optional
	AverageHandleTimeInSeconds float32 `protobuf:"fixed32,3,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// optional
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,4,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// optional
	AverageTimeToAbortInSeconds float32 `protobuf:"fixed32,5,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// IDs of the skill Profiles of which to save the generated forecast.
	SkillProfileSidsToForecast []int64 `protobuf:"varint,6,rep,packed,name=skill_profile_sids_to_forecast,json=skillProfileSidsToForecast,proto3" json:"skill_profile_sids_to_forecast,omitempty"`
}

func (x *UpsertRegressionForecastReq) Reset() {
	*x = UpsertRegressionForecastReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertRegressionForecastReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRegressionForecastReq) ProtoMessage() {}

func (x *UpsertRegressionForecastReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRegressionForecastReq.ProtoReflect.Descriptor instead.
func (*UpsertRegressionForecastReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{86}
}

func (x *UpsertRegressionForecastReq) GetRegressionTemplate() *RegressionTemplate {
	if x != nil {
		return x.RegressionTemplate
	}
	return nil
}

func (x *UpsertRegressionForecastReq) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *UpsertRegressionForecastReq) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *UpsertRegressionForecastReq) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *UpsertRegressionForecastReq) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

func (x *UpsertRegressionForecastReq) GetSkillProfileSidsToForecast() []int64 {
	if x != nil {
		return x.SkillProfileSidsToForecast
	}
	return nil
}

// Response message for the UpsertRegressionForecast RPC
type UpsertRegressionForecastRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpsertRegressionForecastRes) Reset() {
	*x = UpsertRegressionForecastRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertRegressionForecastRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRegressionForecastRes) ProtoMessage() {}

func (x *UpsertRegressionForecastRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRegressionForecastRes.ProtoReflect.Descriptor instead.
func (*UpsertRegressionForecastRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{87}
}

// Request message for the UpsertForecastDataDelta RPC
type UpsertForecastDataDeltaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delta to store
	// The @start_datetime, @is_delta, and @skill_profile_category fields DO NOT need to be set.
	Delta *CallDataByInterval `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *UpsertForecastDataDeltaReq) Reset() {
	*x = UpsertForecastDataDeltaReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertForecastDataDeltaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertForecastDataDeltaReq) ProtoMessage() {}

func (x *UpsertForecastDataDeltaReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertForecastDataDeltaReq.ProtoReflect.Descriptor instead.
func (*UpsertForecastDataDeltaReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{88}
}

func (x *UpsertForecastDataDeltaReq) GetDelta() *CallDataByInterval {
	if x != nil {
		return x.Delta
	}
	return nil
}

// Response message for the UpsertForecastDataDelta RPC
type UpsertForecastDataDeltaRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delta that was stored.
	Delta *CallDataByInterval `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *UpsertForecastDataDeltaRes) Reset() {
	*x = UpsertForecastDataDeltaRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertForecastDataDeltaRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertForecastDataDeltaRes) ProtoMessage() {}

func (x *UpsertForecastDataDeltaRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertForecastDataDeltaRes.ProtoReflect.Descriptor instead.
func (*UpsertForecastDataDeltaRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{89}
}

func (x *UpsertForecastDataDeltaRes) GetDelta() *CallDataByInterval {
	if x != nil {
		return x.Delta
	}
	return nil
}

// Request message for the UpsertForecastDataDeltas RPC
type UpsertForecastDataDeltasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deltas to store
	// The @start_datetime, @is_delta, and @skill_profile_category fields DO NOT need to be set.
	Deltas []*CallDataByInterval `protobuf:"bytes,1,rep,name=deltas,proto3" json:"deltas,omitempty"`
}

func (x *UpsertForecastDataDeltasReq) Reset() {
	*x = UpsertForecastDataDeltasReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertForecastDataDeltasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertForecastDataDeltasReq) ProtoMessage() {}

func (x *UpsertForecastDataDeltasReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertForecastDataDeltasReq.ProtoReflect.Descriptor instead.
func (*UpsertForecastDataDeltasReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{90}
}

func (x *UpsertForecastDataDeltasReq) GetDeltas() []*CallDataByInterval {
	if x != nil {
		return x.Deltas
	}
	return nil
}

// Response message for the UpsertForecastDataDeltas RPC
type UpsertForecastDataDeltasRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpsertForecastDataDeltasRes) Reset() {
	*x = UpsertForecastDataDeltasRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertForecastDataDeltasRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertForecastDataDeltasRes) ProtoMessage() {}

func (x *UpsertForecastDataDeltasRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertForecastDataDeltasRes.ProtoReflect.Descriptor instead.
func (*UpsertForecastDataDeltasRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{91}
}

// Request message for the DeleteForecastIntervals RPC
type DeleteForecastIntervalsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DeleteParam:
	//
	//	*DeleteForecastIntervalsReq_SkillProfileSid
	//	*DeleteForecastIntervalsReq_ForecastIntervalSids
	//	*DeleteForecastIntervalsReq_SkillProfileCategory
	DeleteParam isDeleteForecastIntervalsReq_DeleteParam `protobuf_oneof:"delete_param"`
	// Type of interval to delete
	ForecastIntervalDeleteType DeleteForecastIntervalsReq_ForecastIntervalDeleteType `protobuf:"varint,3,opt,name=forecast_interval_delete_type,json=forecastIntervalDeleteType,proto3,enum=api.v1alpha1.wfm.DeleteForecastIntervalsReq_ForecastIntervalDeleteType" json:"forecast_interval_delete_type,omitempty"`
}

func (x *DeleteForecastIntervalsReq) Reset() {
	*x = DeleteForecastIntervalsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteForecastIntervalsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteForecastIntervalsReq) ProtoMessage() {}

func (x *DeleteForecastIntervalsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteForecastIntervalsReq.ProtoReflect.Descriptor instead.
func (*DeleteForecastIntervalsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{92}
}

func (m *DeleteForecastIntervalsReq) GetDeleteParam() isDeleteForecastIntervalsReq_DeleteParam {
	if m != nil {
		return m.DeleteParam
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *DeleteForecastIntervalsReq) GetSkillProfileSid() int64 {
	if x, ok := x.GetDeleteParam().(*DeleteForecastIntervalsReq_SkillProfileSid); ok {
		return x.SkillProfileSid
	}
	return 0
}

func (x *DeleteForecastIntervalsReq) GetForecastIntervalSids() *DeleteForecastIntervalsReq_IntervalSids {
	if x, ok := x.GetDeleteParam().(*DeleteForecastIntervalsReq_ForecastIntervalSids); ok {
		return x.ForecastIntervalSids
	}
	return nil
}

func (x *DeleteForecastIntervalsReq) GetSkillProfileCategory() *commons.SkillProfileCategory {
	if x, ok := x.GetDeleteParam().(*DeleteForecastIntervalsReq_SkillProfileCategory); ok {
		return x.SkillProfileCategory
	}
	return nil
}

func (x *DeleteForecastIntervalsReq) GetForecastIntervalDeleteType() DeleteForecastIntervalsReq_ForecastIntervalDeleteType {
	if x != nil {
		return x.ForecastIntervalDeleteType
	}
	return DeleteForecastIntervalsReq_INTERVALS_AND_DELTAS
}

type isDeleteForecastIntervalsReq_DeleteParam interface {
	isDeleteForecastIntervalsReq_DeleteParam()
}

type DeleteForecastIntervalsReq_SkillProfileSid struct {
	// ID of the skill profile of which to delete the intervas/deltas.
	// Deprecated as of Sep/13/2023: use skill_profile_category instead.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3,oneof"`
}

type DeleteForecastIntervalsReq_ForecastIntervalSids struct {
	// Wrapper for SIDs of intervals to be deleted
	ForecastIntervalSids *DeleteForecastIntervalsReq_IntervalSids `protobuf:"bytes,2,opt,name=forecast_interval_sids,json=forecastIntervalSids,proto3,oneof"`
}

type DeleteForecastIntervalsReq_SkillProfileCategory struct {
	// Skill profile category of which to delete the intervals/deltas.
	SkillProfileCategory *commons.SkillProfileCategory `protobuf:"bytes,4,opt,name=skill_profile_category,json=skillProfileCategory,proto3,oneof"`
}

func (*DeleteForecastIntervalsReq_SkillProfileSid) isDeleteForecastIntervalsReq_DeleteParam() {}

func (*DeleteForecastIntervalsReq_ForecastIntervalSids) isDeleteForecastIntervalsReq_DeleteParam() {}

func (*DeleteForecastIntervalsReq_SkillProfileCategory) isDeleteForecastIntervalsReq_DeleteParam() {}

// Response message for the DeleteForecastIntervals RPC
type DeleteForecastIntervalsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteForecastIntervalsRes) Reset() {
	*x = DeleteForecastIntervalsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteForecastIntervalsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteForecastIntervalsRes) ProtoMessage() {}

func (x *DeleteForecastIntervalsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteForecastIntervalsRes.ProtoReflect.Descriptor instead.
func (*DeleteForecastIntervalsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{93}
}

// Request message for the ListHistoricalDataForAllSkillProfiles RPC
type ListHistoricalDataForAllSkillProfilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListHistoricalDataForAllSkillProfilesReq) Reset() {
	*x = ListHistoricalDataForAllSkillProfilesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHistoricalDataForAllSkillProfilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoricalDataForAllSkillProfilesReq) ProtoMessage() {}

func (x *ListHistoricalDataForAllSkillProfilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoricalDataForAllSkillProfilesReq.ProtoReflect.Descriptor instead.
func (*ListHistoricalDataForAllSkillProfilesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{94}
}

// Response message for the ListHistoricalDataForAllSkillProfiles RPC
type ListHistoricalDataForAllSkillProfilesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// History intervals sorted by @start_datetime.
	History []*HistoricalDataInterval `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *ListHistoricalDataForAllSkillProfilesRes) Reset() {
	*x = ListHistoricalDataForAllSkillProfilesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHistoricalDataForAllSkillProfilesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoricalDataForAllSkillProfilesRes) ProtoMessage() {}

func (x *ListHistoricalDataForAllSkillProfilesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoricalDataForAllSkillProfilesRes.ProtoReflect.Descriptor instead.
func (*ListHistoricalDataForAllSkillProfilesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{95}
}

func (x *ListHistoricalDataForAllSkillProfilesRes) GetHistory() []*HistoricalDataInterval {
	if x != nil {
		return x.History
	}
	return nil
}

// Request message for the BuildDOWAndMOYProfiles RPC
type BuildDOWAndMOYProfilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProfileTOD to use to build the ProfileDOW and ProfileMOY
	ProfileTod *commons.ProfileTOD `protobuf:"bytes,1,opt,name=profile_tod,json=profileTod,proto3" json:"profile_tod,omitempty"`
	// ProfileWOMS to use to build the ProfileDOW and ProfileMOY
	ProfileWoms *commons.ProfileWOMS `protobuf:"bytes,2,opt,name=profile_woms,json=profileWoms,proto3" json:"profile_woms,omitempty"`
	// Indicates if the @profile_tod and @profile_woms belongs to the average fields of a call profile template.
	IsAverageProfile bool `protobuf:"varint,3,opt,name=is_average_profile,json=isAverageProfile,proto3" json:"is_average_profile,omitempty"`
}

func (x *BuildDOWAndMOYProfilesReq) Reset() {
	*x = BuildDOWAndMOYProfilesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildDOWAndMOYProfilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildDOWAndMOYProfilesReq) ProtoMessage() {}

func (x *BuildDOWAndMOYProfilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildDOWAndMOYProfilesReq.ProtoReflect.Descriptor instead.
func (*BuildDOWAndMOYProfilesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{96}
}

func (x *BuildDOWAndMOYProfilesReq) GetProfileTod() *commons.ProfileTOD {
	if x != nil {
		return x.ProfileTod
	}
	return nil
}

func (x *BuildDOWAndMOYProfilesReq) GetProfileWoms() *commons.ProfileWOMS {
	if x != nil {
		return x.ProfileWoms
	}
	return nil
}

func (x *BuildDOWAndMOYProfilesReq) GetIsAverageProfile() bool {
	if x != nil {
		return x.IsAverageProfile
	}
	return false
}

// Response message for the BuildDOWAndMOYProfiles RPC
type BuildDOWAndMOYProfilesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generated ProfileDOW from the request parameters.
	ProfileDow *commons.ProfileDOW `protobuf:"bytes,1,opt,name=profile_dow,json=profileDow,proto3" json:"profile_dow,omitempty"`
	// Generated ProfileMOY from the request parameters.
	ProfileMoy *commons.ProfileMOY `protobuf:"bytes,2,opt,name=profile_moy,json=profileMoy,proto3" json:"profile_moy,omitempty"`
}

func (x *BuildDOWAndMOYProfilesRes) Reset() {
	*x = BuildDOWAndMOYProfilesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildDOWAndMOYProfilesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildDOWAndMOYProfilesRes) ProtoMessage() {}

func (x *BuildDOWAndMOYProfilesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildDOWAndMOYProfilesRes.ProtoReflect.Descriptor instead.
func (*BuildDOWAndMOYProfilesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{97}
}

func (x *BuildDOWAndMOYProfilesRes) GetProfileDow() *commons.ProfileDOW {
	if x != nil {
		return x.ProfileDow
	}
	return nil
}

func (x *BuildDOWAndMOYProfilesRes) GetProfileMoy() *commons.ProfileMOY {
	if x != nil {
		return x.ProfileMoy
	}
	return nil
}

// Request message for the CalculateTrainingDataAveragesForSkillProfile RPC
type CalculateTrainingDataAveragesForSkillProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The training data used to calculate the averages will belong to this skill profile.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
}

func (x *CalculateTrainingDataAveragesForSkillProfileReq) Reset() {
	*x = CalculateTrainingDataAveragesForSkillProfileReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateTrainingDataAveragesForSkillProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTrainingDataAveragesForSkillProfileReq) ProtoMessage() {}

func (x *CalculateTrainingDataAveragesForSkillProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTrainingDataAveragesForSkillProfileReq.ProtoReflect.Descriptor instead.
func (*CalculateTrainingDataAveragesForSkillProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{98}
}

func (x *CalculateTrainingDataAveragesForSkillProfileReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

// Response message for the CalculateTrainingDataAveragesForSkillProfile RPC
type CalculateTrainingDataAveragesForSkillProfileRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// averages found in the training data set.
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,1,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	AverageHandleTimeInSeconds    float32 `protobuf:"fixed32,2,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,3,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	AverageTimeToAbortInSeconds   float32 `protobuf:"fixed32,4,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
}

func (x *CalculateTrainingDataAveragesForSkillProfileRes) Reset() {
	*x = CalculateTrainingDataAveragesForSkillProfileRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateTrainingDataAveragesForSkillProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTrainingDataAveragesForSkillProfileRes) ProtoMessage() {}

func (x *CalculateTrainingDataAveragesForSkillProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTrainingDataAveragesForSkillProfileRes.ProtoReflect.Descriptor instead.
func (*CalculateTrainingDataAveragesForSkillProfileRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{99}
}

func (x *CalculateTrainingDataAveragesForSkillProfileRes) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *CalculateTrainingDataAveragesForSkillProfileRes) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *CalculateTrainingDataAveragesForSkillProfileRes) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *CalculateTrainingDataAveragesForSkillProfileRes) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

// Request message for the UpdateSkillProfileAveragesUsingHistoricalData RPC
type UpdateSkillProfileAveragesUsingHistoricalDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the skill profiles to calculate the averages of, if none are sent it calculates it for all skill profiles the org has.
	SkillProfileSids []int64 `protobuf:"varint,1,rep,packed,name=skill_profile_sids,json=skillProfileSids,proto3" json:"skill_profile_sids,omitempty"`
	// The datetime range of the training data to use to calculate the averages, if a nil range is given the following range is used:
	// @training_data_range_end_datetime - @averages_calculation_range_in_months to the @training_data_range_end_datetime from the forecasting parameters.
	// If @averages_calculation_range_in_months is 0, it will use the @training_data_range_start_datetime as the start datetime of the range.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,2,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// If true, it will exclude skill profiles that have manual averages in them from the calculation (even if those skill profiles are in @skill_profile_sids).
	// Otherwise they will be included in the calculation.
	ExcludeSkillProfilesWithManualAverages bool `protobuf:"varint,3,opt,name=exclude_skill_profiles_with_manual_averages,json=excludeSkillProfilesWithManualAverages,proto3" json:"exclude_skill_profiles_with_manual_averages,omitempty"`
	// IDs of the skill profile groups to calculate the averages of, if none are sent it calculates it for all skill profile groups that the org has.
	SkillProfileGroupSids []int64 `protobuf:"varint,4,rep,packed,name=skill_profile_group_sids,json=skillProfileGroupSids,proto3" json:"skill_profile_group_sids,omitempty"`
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataReq) Reset() {
	*x = UpdateSkillProfileAveragesUsingHistoricalDataReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileAveragesUsingHistoricalDataReq) ProtoMessage() {}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileAveragesUsingHistoricalDataReq.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileAveragesUsingHistoricalDataReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{100}
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataReq) GetSkillProfileSids() []int64 {
	if x != nil {
		return x.SkillProfileSids
	}
	return nil
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataReq) GetExcludeSkillProfilesWithManualAverages() bool {
	if x != nil {
		return x.ExcludeSkillProfilesWithManualAverages
	}
	return false
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataReq) GetSkillProfileGroupSids() []int64 {
	if x != nil {
		return x.SkillProfileGroupSids
	}
	return nil
}

// Response message for the UpdateSkillProfileAveragesUsingHistoricalData RPC
type UpdateSkillProfileAveragesUsingHistoricalDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataRes) Reset() {
	*x = UpdateSkillProfileAveragesUsingHistoricalDataRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileAveragesUsingHistoricalDataRes) ProtoMessage() {}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileAveragesUsingHistoricalDataRes.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileAveragesUsingHistoricalDataRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{101}
}

// UserCapability represents the rules that apply to the current user for the applicable entity.
type UserCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UI can display element for this user
	CanDisplay bool `protobuf:"varint,1,opt,name=can_display,json=canDisplay,proto3" json:"can_display,omitempty"`
	// UI can edit element
	CanEdit bool `protobuf:"varint,2,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	// User can move a valid node B to this node A, making B a child of A
	IsMoveTarget bool `protobuf:"varint,3,opt,name=is_move_target,json=isMoveTarget,proto3" json:"is_move_target,omitempty"`
	// User can move this node A to a valid node B, making A a child of B
	// where node B has the is_move_target flag set
	CanMove bool `protobuf:"varint,4,opt,name=can_move,json=canMove,proto3" json:"can_move,omitempty"`
	// User can mark this element as deleted
	CanDelete bool `protobuf:"varint,5,opt,name=can_delete,json=canDelete,proto3" json:"can_delete,omitempty"`
	// User can mark this element as undeleted
	CanUndelete bool `protobuf:"varint,6,opt,name=can_undelete,json=canUndelete,proto3" json:"can_undelete,omitempty"`
	// User can add a valid child to this node
	CanAddChild bool `protobuf:"varint,7,opt,name=can_add_child,json=canAddChild,proto3" json:"can_add_child,omitempty"`
}

func (x *UserCapability) Reset() {
	*x = UserCapability{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCapability) ProtoMessage() {}

func (x *UserCapability) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCapability.ProtoReflect.Descriptor instead.
func (*UserCapability) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{102}
}

func (x *UserCapability) GetCanDisplay() bool {
	if x != nil {
		return x.CanDisplay
	}
	return false
}

func (x *UserCapability) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *UserCapability) GetIsMoveTarget() bool {
	if x != nil {
		return x.IsMoveTarget
	}
	return false
}

func (x *UserCapability) GetCanMove() bool {
	if x != nil {
		return x.CanMove
	}
	return false
}

func (x *UserCapability) GetCanDelete() bool {
	if x != nil {
		return x.CanDelete
	}
	return false
}

func (x *UserCapability) GetCanUndelete() bool {
	if x != nil {
		return x.CanUndelete
	}
	return false
}

func (x *UserCapability) GetCanAddChild() bool {
	if x != nil {
		return x.CanAddChild
	}
	return false
}

// Call Center node
type CallCenterNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node unique id (genereated on the backend when sent for creation).
	CallCenterNodeSid int64 `protobuf:"varint,1,opt,name=call_center_node_sid,json=callCenterNodeSid,proto3" json:"call_center_node_sid,omitempty"`
	// Node name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Node description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Datetime that the node was set to inactive, if not set then the node is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// Call Center TimeZone
	TimeZoneVal commons.TimeZone `protobuf:"varint,5,opt,name=time_zone_val,json=timeZoneVal,proto3,enum=api.commons.TimeZone" json:"time_zone_val,omitempty"`
	// ID of the schedule scenario that the call center node belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,6,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// client nodes that are children of call center node
	MemberClientNodes []*ClientNode `protobuf:"bytes,7,rep,name=member_client_nodes,json=memberClientNodes,proto3" json:"member_client_nodes,omitempty"`
	// non skill activities that are children of call center node
	MemberNonSkillActivities []*NonSkillActivity `protobuf:"bytes,8,rep,name=member_non_skill_activities,json=memberNonSkillActivities,proto3" json:"member_non_skill_activities,omitempty"`
	// open times patterns that are children of call center node
	MemberOpenTimesPatterns []*OpenTimesPattern `protobuf:"bytes,9,rep,name=member_open_times_patterns,json=memberOpenTimesPatterns,proto3" json:"member_open_times_patterns,omitempty"`
	// agent availability patterns that are children of call center node
	MemberAgentAvailabilityPatterns []*AgentAvailabilityPattern `protobuf:"bytes,10,rep,name=member_agent_availability_patterns,json=memberAgentAvailabilityPatterns,proto3" json:"member_agent_availability_patterns,omitempty"`
	// constraint rules that are children of call center node
	MemberConstraintRules []*ConstraintRule `protobuf:"bytes,11,rep,name=member_constraint_rules,json=memberConstraintRules,proto3" json:"member_constraint_rules,omitempty"`
	// agent groups that are children of call center node
	MemberAgentGroups []*AgentGroup `protobuf:"bytes,12,rep,name=member_agent_groups,json=memberAgentGroups,proto3" json:"member_agent_groups,omitempty"`
	// ID of the original Call Center Node that this node was copied from.
	// If this node is the original, field will be set as nil.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	OriginSid *wrapperspb.Int64Value `protobuf:"bytes,13,opt,name=origin_sid,json=originSid,proto3" json:"origin_sid,omitempty"`
	// the shrinkage percentage [0.0, 100.0]. 0.0 = no shrinkage,  100 = no agents
	Shrinkage *wrapperspb.FloatValue `protobuf:"bytes,14,opt,name=shrinkage,proto3" json:"shrinkage,omitempty"`
}

func (x *CallCenterNode) Reset() {
	*x = CallCenterNode{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallCenterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallCenterNode) ProtoMessage() {}

func (x *CallCenterNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallCenterNode.ProtoReflect.Descriptor instead.
func (*CallCenterNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{103}
}

func (x *CallCenterNode) GetCallCenterNodeSid() int64 {
	if x != nil {
		return x.CallCenterNodeSid
	}
	return 0
}

func (x *CallCenterNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CallCenterNode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CallCenterNode) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *CallCenterNode) GetTimeZoneVal() commons.TimeZone {
	if x != nil {
		return x.TimeZoneVal
	}
	return commons.TimeZone(0)
}

func (x *CallCenterNode) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *CallCenterNode) GetMemberClientNodes() []*ClientNode {
	if x != nil {
		return x.MemberClientNodes
	}
	return nil
}

func (x *CallCenterNode) GetMemberNonSkillActivities() []*NonSkillActivity {
	if x != nil {
		return x.MemberNonSkillActivities
	}
	return nil
}

func (x *CallCenterNode) GetMemberOpenTimesPatterns() []*OpenTimesPattern {
	if x != nil {
		return x.MemberOpenTimesPatterns
	}
	return nil
}

func (x *CallCenterNode) GetMemberAgentAvailabilityPatterns() []*AgentAvailabilityPattern {
	if x != nil {
		return x.MemberAgentAvailabilityPatterns
	}
	return nil
}

func (x *CallCenterNode) GetMemberConstraintRules() []*ConstraintRule {
	if x != nil {
		return x.MemberConstraintRules
	}
	return nil
}

func (x *CallCenterNode) GetMemberAgentGroups() []*AgentGroup {
	if x != nil {
		return x.MemberAgentGroups
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *CallCenterNode) GetOriginSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.OriginSid
	}
	return nil
}

func (x *CallCenterNode) GetShrinkage() *wrapperspb.FloatValue {
	if x != nil {
		return x.Shrinkage
	}
	return nil
}

// Request message for the UpdateCallCenterNode RPC
type UpdateCallCenterNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node entity that will be updated with the values provided.
	// If no change is desired for a given field in @node, then the current value must be set.
	Node *CallCenterNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *UpdateCallCenterNodeReq) Reset() {
	*x = UpdateCallCenterNodeReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCallCenterNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCallCenterNodeReq) ProtoMessage() {}

func (x *UpdateCallCenterNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCallCenterNodeReq.ProtoReflect.Descriptor instead.
func (*UpdateCallCenterNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{104}
}

func (x *UpdateCallCenterNodeReq) GetNode() *CallCenterNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Response message for the UpdateCallCenterNode RPC
type UpdateCallCenterNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCallCenterNodeRes) Reset() {
	*x = UpdateCallCenterNodeRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCallCenterNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCallCenterNodeRes) ProtoMessage() {}

func (x *UpdateCallCenterNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCallCenterNodeRes.ProtoReflect.Descriptor instead.
func (*UpdateCallCenterNodeRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{105}
}

// Client node
type ClientNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node unique id
	ClientNodeSid int64 `protobuf:"varint,1,opt,name=client_node_sid,json=clientNodeSid,proto3" json:"client_node_sid,omitempty"`
	// Node name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Node description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Parent node id -- should only have CallCenter nodes as parents
	ParentSid int64 `protobuf:"varint,4,opt,name=parent_sid,json=parentSid,proto3" json:"parent_sid,omitempty"`
	// Datetime that the node was set to inactive, if not set then the node is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// Client TimeZone
	TimeZoneVal commons.TimeZone `protobuf:"varint,6,opt,name=time_zone_val,json=timeZoneVal,proto3,enum=api.commons.TimeZone" json:"time_zone_val,omitempty"`
	// ID of the schedule scenario that the client node belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,7,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Location Nodes associated with @program_node_sid.
	MemberLocationNodes []*LocationNode `protobuf:"bytes,8,rep,name=member_location_nodes,json=memberLocationNodes,proto3" json:"member_location_nodes,omitempty"`
	// Non Skill Activities associated with @program_node_sid.
	MemberNonSkillActivities []*NonSkillActivity `protobuf:"bytes,9,rep,name=member_non_skill_activities,json=memberNonSkillActivities,proto3" json:"member_non_skill_activities,omitempty"`
	// Open Times Patterns associated with @program_node_sid.
	MemberOpenTimesPatterns []*OpenTimesPattern `protobuf:"bytes,10,rep,name=member_open_times_patterns,json=memberOpenTimesPatterns,proto3" json:"member_open_times_patterns,omitempty"`
	// Agent Availability Patterns associated with @program_node_sid.
	MemberAgentAvailabilityPatterns []*AgentAvailabilityPattern `protobuf:"bytes,11,rep,name=member_agent_availability_patterns,json=memberAgentAvailabilityPatterns,proto3" json:"member_agent_availability_patterns,omitempty"`
	// Constraint Rules associated with @program_node_sid.
	MemberConstraintRules []*ConstraintRule `protobuf:"bytes,12,rep,name=member_constraint_rules,json=memberConstraintRules,proto3" json:"member_constraint_rules,omitempty"`
	// Agent Groups associated with @program_node_sid.
	MemberAgentGroups []*AgentGroup `protobuf:"bytes,13,rep,name=member_agent_groups,json=memberAgentGroups,proto3" json:"member_agent_groups,omitempty"`
	// ID of the original Client Node that this node was copied from.
	// If this node is the original, field will be set as nil.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	OriginSid *wrapperspb.Int64Value `protobuf:"bytes,14,opt,name=origin_sid,json=originSid,proto3" json:"origin_sid,omitempty"`
	// the shrinkage percentage [0.0, 100.0]. 0.0 = no shrinkage,  100 = no agents
	Shrinkage *wrapperspb.FloatValue `protobuf:"bytes,15,opt,name=shrinkage,proto3" json:"shrinkage,omitempty"`
}

func (x *ClientNode) Reset() {
	*x = ClientNode{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientNode) ProtoMessage() {}

func (x *ClientNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientNode.ProtoReflect.Descriptor instead.
func (*ClientNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{106}
}

func (x *ClientNode) GetClientNodeSid() int64 {
	if x != nil {
		return x.ClientNodeSid
	}
	return 0
}

func (x *ClientNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientNode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClientNode) GetParentSid() int64 {
	if x != nil {
		return x.ParentSid
	}
	return 0
}

func (x *ClientNode) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *ClientNode) GetTimeZoneVal() commons.TimeZone {
	if x != nil {
		return x.TimeZoneVal
	}
	return commons.TimeZone(0)
}

func (x *ClientNode) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *ClientNode) GetMemberLocationNodes() []*LocationNode {
	if x != nil {
		return x.MemberLocationNodes
	}
	return nil
}

func (x *ClientNode) GetMemberNonSkillActivities() []*NonSkillActivity {
	if x != nil {
		return x.MemberNonSkillActivities
	}
	return nil
}

func (x *ClientNode) GetMemberOpenTimesPatterns() []*OpenTimesPattern {
	if x != nil {
		return x.MemberOpenTimesPatterns
	}
	return nil
}

func (x *ClientNode) GetMemberAgentAvailabilityPatterns() []*AgentAvailabilityPattern {
	if x != nil {
		return x.MemberAgentAvailabilityPatterns
	}
	return nil
}

func (x *ClientNode) GetMemberConstraintRules() []*ConstraintRule {
	if x != nil {
		return x.MemberConstraintRules
	}
	return nil
}

func (x *ClientNode) GetMemberAgentGroups() []*AgentGroup {
	if x != nil {
		return x.MemberAgentGroups
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *ClientNode) GetOriginSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.OriginSid
	}
	return nil
}

func (x *ClientNode) GetShrinkage() *wrapperspb.FloatValue {
	if x != nil {
		return x.Shrinkage
	}
	return nil
}

// Request message for the CreateClientNode RPC
type CreateClientNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node to create, the @client_node_sid doesn't need to be set since it won't be used.
	Node *ClientNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *CreateClientNodeReq) Reset() {
	*x = CreateClientNodeReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClientNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientNodeReq) ProtoMessage() {}

func (x *CreateClientNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientNodeReq.ProtoReflect.Descriptor instead.
func (*CreateClientNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{107}
}

func (x *CreateClientNodeReq) GetNode() *ClientNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Response message for the CreateClientNode RPC
type CreateClientNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created client node
	ClientNodeSid int64 `protobuf:"varint,1,opt,name=client_node_sid,json=clientNodeSid,proto3" json:"client_node_sid,omitempty"`
}

func (x *CreateClientNodeRes) Reset() {
	*x = CreateClientNodeRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClientNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientNodeRes) ProtoMessage() {}

func (x *CreateClientNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientNodeRes.ProtoReflect.Descriptor instead.
func (*CreateClientNodeRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{108}
}

func (x *CreateClientNodeRes) GetClientNodeSid() int64 {
	if x != nil {
		return x.ClientNodeSid
	}
	return 0
}

// Request message for the UpdateClientNode RPC
type UpdateClientNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client Node to update
	Node *ClientNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *UpdateClientNodeReq) Reset() {
	*x = UpdateClientNodeReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClientNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientNodeReq) ProtoMessage() {}

func (x *UpdateClientNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientNodeReq.ProtoReflect.Descriptor instead.
func (*UpdateClientNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{109}
}

func (x *UpdateClientNodeReq) GetNode() *ClientNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Response message for the UpdateClientNode RPC
type UpdateClientNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateClientNodeRes) Reset() {
	*x = UpdateClientNodeRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClientNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientNodeRes) ProtoMessage() {}

func (x *UpdateClientNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientNodeRes.ProtoReflect.Descriptor instead.
func (*UpdateClientNodeRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{110}
}

// Location node
type LocationNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node unique id
	LocationNodeSid int64 `protobuf:"varint,1,opt,name=location_node_sid,json=locationNodeSid,proto3" json:"location_node_sid,omitempty"`
	// Node name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Node description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ID of the parent client node.
	ClientNodeSid int64 `protobuf:"varint,4,opt,name=client_node_sid,json=clientNodeSid,proto3" json:"client_node_sid,omitempty"`
	// Datetime that the node was set to inactive, if not set then the node is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// Timezone of this node.
	TimeZoneVal commons.TimeZone `protobuf:"varint,6,opt,name=time_zone_val,json=timeZoneVal,proto3,enum=api.commons.TimeZone" json:"time_zone_val,omitempty"`
	// Indicates whether on not the @shrinkage_value is a percentage (true=percentage, false=agents).
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	ShrinkageIsPercentage bool `protobuf:"varint,7,opt,name=shrinkage_is_percentage,json=shrinkageIsPercentage,proto3" json:"shrinkage_is_percentage,omitempty"`
	// Value of the shrinkage.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	ShrinkageValue int32 `protobuf:"varint,8,opt,name=shrinkage_value,json=shrinkageValue,proto3" json:"shrinkage_value,omitempty"`
	// ID of the schedule scenario that the location node belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,9,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Program Nodes associated with @location_node_sid.
	MemberProgramNodes []*ProgramNode `protobuf:"bytes,10,rep,name=member_program_nodes,json=memberProgramNodes,proto3" json:"member_program_nodes,omitempty"`
	// Non Skill Activities associated with @location_node_sid.
	MemberNonSkillActivities []*NonSkillActivity `protobuf:"bytes,11,rep,name=member_non_skill_activities,json=memberNonSkillActivities,proto3" json:"member_non_skill_activities,omitempty"`
	// Open Times Patterns associated with @location_node_sid.
	MemberOpenTimesPatterns []*OpenTimesPattern `protobuf:"bytes,12,rep,name=member_open_times_patterns,json=memberOpenTimesPatterns,proto3" json:"member_open_times_patterns,omitempty"`
	// Agent Availability Patterns associated with @location_node_sid.
	MemberAgentAvailabilityPatterns []*AgentAvailabilityPattern `protobuf:"bytes,13,rep,name=member_agent_availability_patterns,json=memberAgentAvailabilityPatterns,proto3" json:"member_agent_availability_patterns,omitempty"`
	// Constraint Rules associated with @location_node_sid.
	MemberConstraintRules []*ConstraintRule `protobuf:"bytes,14,rep,name=member_constraint_rules,json=memberConstraintRules,proto3" json:"member_constraint_rules,omitempty"`
	// Agent Groups associated with @location_node_sid.
	MemberAgentGroups []*AgentGroup `protobuf:"bytes,15,rep,name=member_agent_groups,json=memberAgentGroups,proto3" json:"member_agent_groups,omitempty"`
	// ID of the original Location Node that this node was copied from.
	// If this node is the original, field will be set as nil.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	OriginSid *wrapperspb.Int64Value `protobuf:"bytes,16,opt,name=origin_sid,json=originSid,proto3" json:"origin_sid,omitempty"`
	// the shrinkage percentage [0.0, 100.0]. 0.0 = no shrinkage,  100 = no agents
	Shrinkage *wrapperspb.FloatValue `protobuf:"bytes,17,opt,name=shrinkage,proto3" json:"shrinkage,omitempty"`
}

func (x *LocationNode) Reset() {
	*x = LocationNode{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationNode) ProtoMessage() {}

func (x *LocationNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationNode.ProtoReflect.Descriptor instead.
func (*LocationNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{111}
}

func (x *LocationNode) GetLocationNodeSid() int64 {
	if x != nil {
		return x.LocationNodeSid
	}
	return 0
}

func (x *LocationNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocationNode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LocationNode) GetClientNodeSid() int64 {
	if x != nil {
		return x.ClientNodeSid
	}
	return 0
}

func (x *LocationNode) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *LocationNode) GetTimeZoneVal() commons.TimeZone {
	if x != nil {
		return x.TimeZoneVal
	}
	return commons.TimeZone(0)
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *LocationNode) GetShrinkageIsPercentage() bool {
	if x != nil {
		return x.ShrinkageIsPercentage
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *LocationNode) GetShrinkageValue() int32 {
	if x != nil {
		return x.ShrinkageValue
	}
	return 0
}

func (x *LocationNode) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *LocationNode) GetMemberProgramNodes() []*ProgramNode {
	if x != nil {
		return x.MemberProgramNodes
	}
	return nil
}

func (x *LocationNode) GetMemberNonSkillActivities() []*NonSkillActivity {
	if x != nil {
		return x.MemberNonSkillActivities
	}
	return nil
}

func (x *LocationNode) GetMemberOpenTimesPatterns() []*OpenTimesPattern {
	if x != nil {
		return x.MemberOpenTimesPatterns
	}
	return nil
}

func (x *LocationNode) GetMemberAgentAvailabilityPatterns() []*AgentAvailabilityPattern {
	if x != nil {
		return x.MemberAgentAvailabilityPatterns
	}
	return nil
}

func (x *LocationNode) GetMemberConstraintRules() []*ConstraintRule {
	if x != nil {
		return x.MemberConstraintRules
	}
	return nil
}

func (x *LocationNode) GetMemberAgentGroups() []*AgentGroup {
	if x != nil {
		return x.MemberAgentGroups
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *LocationNode) GetOriginSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.OriginSid
	}
	return nil
}

func (x *LocationNode) GetShrinkage() *wrapperspb.FloatValue {
	if x != nil {
		return x.Shrinkage
	}
	return nil
}

// Request message for the CreateLocationNode RPC
type CreateLocationNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node to create, the @location_node_sid doesn't need to be set since it won't be used.
	Node *LocationNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *CreateLocationNodeReq) Reset() {
	*x = CreateLocationNodeReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLocationNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLocationNodeReq) ProtoMessage() {}

func (x *CreateLocationNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLocationNodeReq.ProtoReflect.Descriptor instead.
func (*CreateLocationNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{112}
}

func (x *CreateLocationNodeReq) GetNode() *LocationNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Response message for the CreateLocationNode RPC
type CreateLocationNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created location node.
	LocationNodeSid int64 `protobuf:"varint,1,opt,name=location_node_sid,json=locationNodeSid,proto3" json:"location_node_sid,omitempty"`
}

func (x *CreateLocationNodeRes) Reset() {
	*x = CreateLocationNodeRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLocationNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLocationNodeRes) ProtoMessage() {}

func (x *CreateLocationNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLocationNodeRes.ProtoReflect.Descriptor instead.
func (*CreateLocationNodeRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{113}
}

func (x *CreateLocationNodeRes) GetLocationNodeSid() int64 {
	if x != nil {
		return x.LocationNodeSid
	}
	return 0
}

// Request message for the UpdateLocationNode RPC
type UpdateLocationNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location node to update
	LocationNode *LocationNode `protobuf:"bytes,1,opt,name=location_node,json=locationNode,proto3" json:"location_node,omitempty"`
}

func (x *UpdateLocationNodeReq) Reset() {
	*x = UpdateLocationNodeReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLocationNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocationNodeReq) ProtoMessage() {}

func (x *UpdateLocationNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocationNodeReq.ProtoReflect.Descriptor instead.
func (*UpdateLocationNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{114}
}

func (x *UpdateLocationNodeReq) GetLocationNode() *LocationNode {
	if x != nil {
		return x.LocationNode
	}
	return nil
}

// Response message for the UpdateLocationNode RPC
type UpdateLocationNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateLocationNodeRes) Reset() {
	*x = UpdateLocationNodeRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLocationNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocationNodeRes) ProtoMessage() {}

func (x *UpdateLocationNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocationNodeRes.ProtoReflect.Descriptor instead.
func (*UpdateLocationNodeRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{115}
}

// Program node
type ProgramNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node unique id
	ProgramNodeSid int64 `protobuf:"varint,1,opt,name=program_node_sid,json=programNodeSid,proto3" json:"program_node_sid,omitempty"`
	// Node name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Node description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ID of the parent location node.
	LocationNodeSid int64 `protobuf:"varint,4,opt,name=location_node_sid,json=locationNodeSid,proto3" json:"location_node_sid,omitempty"`
	// Datetime that the node was set to inactive, if not set then the node is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// Indicates whether on not the @shrinkage_value is a percentage (true=percentage, false=agents).
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	ShrinkageIsPercentage bool `protobuf:"varint,6,opt,name=shrinkage_is_percentage,json=shrinkageIsPercentage,proto3" json:"shrinkage_is_percentage,omitempty"`
	// Value of the shrinkage. Either 0-100 if @shrinkage_is_percentage is true, or a value greater than 0 otherwise.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	ShrinkageValue int32 `protobuf:"varint,7,opt,name=shrinkage_value,json=shrinkageValue,proto3" json:"shrinkage_value,omitempty"`
	// ID of the schedule scenario that the program node belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,8,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Any shift templates associated with @program_node_sid.
	MemberShiftTemplates []*ShiftTemplate `protobuf:"bytes,9,rep,name=member_shift_templates,json=memberShiftTemplates,proto3" json:"member_shift_templates,omitempty"`
	// Any non skill activities associated with @program_node_sid.
	MemberNonSkillActivities []*NonSkillActivity `protobuf:"bytes,10,rep,name=member_non_skill_activities,json=memberNonSkillActivities,proto3" json:"member_non_skill_activities,omitempty"`
	// Any open times patterns associated with @program_node_sid.
	MemberOpenTimesPatterns []*OpenTimesPattern `protobuf:"bytes,11,rep,name=member_open_times_patterns,json=memberOpenTimesPatterns,proto3" json:"member_open_times_patterns,omitempty"`
	// Any agent availability patterns associated with @program_node_sid.
	MemberAgentAvailabilityPatterns []*AgentAvailabilityPattern `protobuf:"bytes,12,rep,name=member_agent_availability_patterns,json=memberAgentAvailabilityPatterns,proto3" json:"member_agent_availability_patterns,omitempty"`
	// Any constraint rules associated with @program_node_sid.
	MemberConstraintRules []*ConstraintRule `protobuf:"bytes,13,rep,name=member_constraint_rules,json=memberConstraintRules,proto3" json:"member_constraint_rules,omitempty"`
	// Any agent groups associated with @program_node_sid.
	MemberAgentGroups []*AgentGroup `protobuf:"bytes,14,rep,name=member_agent_groups,json=memberAgentGroups,proto3" json:"member_agent_groups,omitempty"`
	// Any skill proficiencies associated with @program_node_sid.
	MemberSkillProficiencies []*SkillProficiency `protobuf:"bytes,15,rep,name=member_skill_proficiencies,json=memberSkillProficiencies,proto3" json:"member_skill_proficiencies,omitempty"`
	// ID of the original Program Node that this node was copied from.
	// If this node is the original, field will be set as nil.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	OriginSid *wrapperspb.Int64Value `protobuf:"bytes,16,opt,name=origin_sid,json=originSid,proto3" json:"origin_sid,omitempty"`
	// The predicted calls of this skill profile category will be used when scheduling.
	SkillProfileCategory *commons.SkillProfileCategory `protobuf:"bytes,17,opt,name=skill_profile_category,json=skillProfileCategory,proto3" json:"skill_profile_category,omitempty"`
	// the shrinkage percentage [0.0, 100.0]. 0.0 = no shrinkage,  100 = no agents
	Shrinkage *wrapperspb.FloatValue `protobuf:"bytes,18,opt,name=shrinkage,proto3" json:"shrinkage,omitempty"`
}

func (x *ProgramNode) Reset() {
	*x = ProgramNode{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProgramNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgramNode) ProtoMessage() {}

func (x *ProgramNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgramNode.ProtoReflect.Descriptor instead.
func (*ProgramNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{116}
}

func (x *ProgramNode) GetProgramNodeSid() int64 {
	if x != nil {
		return x.ProgramNodeSid
	}
	return 0
}

func (x *ProgramNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProgramNode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProgramNode) GetLocationNodeSid() int64 {
	if x != nil {
		return x.LocationNodeSid
	}
	return 0
}

func (x *ProgramNode) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *ProgramNode) GetShrinkageIsPercentage() bool {
	if x != nil {
		return x.ShrinkageIsPercentage
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *ProgramNode) GetShrinkageValue() int32 {
	if x != nil {
		return x.ShrinkageValue
	}
	return 0
}

func (x *ProgramNode) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *ProgramNode) GetMemberShiftTemplates() []*ShiftTemplate {
	if x != nil {
		return x.MemberShiftTemplates
	}
	return nil
}

func (x *ProgramNode) GetMemberNonSkillActivities() []*NonSkillActivity {
	if x != nil {
		return x.MemberNonSkillActivities
	}
	return nil
}

func (x *ProgramNode) GetMemberOpenTimesPatterns() []*OpenTimesPattern {
	if x != nil {
		return x.MemberOpenTimesPatterns
	}
	return nil
}

func (x *ProgramNode) GetMemberAgentAvailabilityPatterns() []*AgentAvailabilityPattern {
	if x != nil {
		return x.MemberAgentAvailabilityPatterns
	}
	return nil
}

func (x *ProgramNode) GetMemberConstraintRules() []*ConstraintRule {
	if x != nil {
		return x.MemberConstraintRules
	}
	return nil
}

func (x *ProgramNode) GetMemberAgentGroups() []*AgentGroup {
	if x != nil {
		return x.MemberAgentGroups
	}
	return nil
}

func (x *ProgramNode) GetMemberSkillProficiencies() []*SkillProficiency {
	if x != nil {
		return x.MemberSkillProficiencies
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *ProgramNode) GetOriginSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.OriginSid
	}
	return nil
}

func (x *ProgramNode) GetSkillProfileCategory() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillProfileCategory
	}
	return nil
}

func (x *ProgramNode) GetShrinkage() *wrapperspb.FloatValue {
	if x != nil {
		return x.Shrinkage
	}
	return nil
}

// Request message for the CreateProgramNode RPC
type CreateProgramNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node to create, the @program_node_sid doesn't need to be set since it won't be used.
	Node *ProgramNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *CreateProgramNodeReq) Reset() {
	*x = CreateProgramNodeReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProgramNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProgramNodeReq) ProtoMessage() {}

func (x *CreateProgramNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProgramNodeReq.ProtoReflect.Descriptor instead.
func (*CreateProgramNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{117}
}

func (x *CreateProgramNodeReq) GetNode() *ProgramNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Response message for the CreateProgramNode RPC
type CreateProgramNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created program node.
	ProgramNodeSid int64 `protobuf:"varint,1,opt,name=program_node_sid,json=programNodeSid,proto3" json:"program_node_sid,omitempty"`
}

func (x *CreateProgramNodeRes) Reset() {
	*x = CreateProgramNodeRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProgramNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProgramNodeRes) ProtoMessage() {}

func (x *CreateProgramNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProgramNodeRes.ProtoReflect.Descriptor instead.
func (*CreateProgramNodeRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{118}
}

func (x *CreateProgramNodeRes) GetProgramNodeSid() int64 {
	if x != nil {
		return x.ProgramNodeSid
	}
	return 0
}

// Request message for the UpdateProgramNode RPC
type UpdateProgramNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Program node to update.
	ProgramNode *ProgramNode `protobuf:"bytes,1,opt,name=program_node,json=programNode,proto3" json:"program_node,omitempty"`
}

func (x *UpdateProgramNodeReq) Reset() {
	*x = UpdateProgramNodeReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProgramNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProgramNodeReq) ProtoMessage() {}

func (x *UpdateProgramNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProgramNodeReq.ProtoReflect.Descriptor instead.
func (*UpdateProgramNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{119}
}

func (x *UpdateProgramNodeReq) GetProgramNode() *ProgramNode {
	if x != nil {
		return x.ProgramNode
	}
	return nil
}

// Response messsage for the UpdateProgramNode RPC
type UpdateProgramNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateProgramNodeRes) Reset() {
	*x = UpdateProgramNodeRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProgramNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProgramNodeRes) ProtoMessage() {}

func (x *UpdateProgramNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProgramNodeRes.ProtoReflect.Descriptor instead.
func (*UpdateProgramNodeRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{120}
}

// Request message for the ListProgramNodesBySid RPC
type ListProgramNodesBySidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the program nodes to list.
	ProgramNodeSids []int64 `protobuf:"varint,1,rep,packed,name=program_node_sids,json=programNodeSids,proto3" json:"program_node_sids,omitempty"`
}

func (x *ListProgramNodesBySidReq) Reset() {
	*x = ListProgramNodesBySidReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProgramNodesBySidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProgramNodesBySidReq) ProtoMessage() {}

func (x *ListProgramNodesBySidReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProgramNodesBySidReq.ProtoReflect.Descriptor instead.
func (*ListProgramNodesBySidReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{121}
}

func (x *ListProgramNodesBySidReq) GetProgramNodeSids() []int64 {
	if x != nil {
		return x.ProgramNodeSids
	}
	return nil
}

// Response message for the ListProgramNodesBySid RPC
type ListProgramNodesBySidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The program nodes matching the given @program_node_sids.
	ProgramNodes []*ProgramNode `protobuf:"bytes,1,rep,name=program_nodes,json=programNodes,proto3" json:"program_nodes,omitempty"`
}

func (x *ListProgramNodesBySidRes) Reset() {
	*x = ListProgramNodesBySidRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProgramNodesBySidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProgramNodesBySidRes) ProtoMessage() {}

func (x *ListProgramNodesBySidRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProgramNodesBySidRes.ProtoReflect.Descriptor instead.
func (*ListProgramNodesBySidRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{122}
}

func (x *ListProgramNodesBySidRes) GetProgramNodes() []*ProgramNode {
	if x != nil {
		return x.ProgramNodes
	}
	return nil
}

type ParentEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a parent entity
	ParentSid int64 `protobuf:"varint,1,opt,name=parent_sid,json=parentSid,proto3" json:"parent_sid,omitempty"`
	// Type of entity that the @parent_sid will reference.
	ParentType commons.ConfigEntityType `protobuf:"varint,2,opt,name=parent_type,json=parentType,proto3,enum=api.commons.ConfigEntityType" json:"parent_type,omitempty"`
}

func (x *ParentEntity) Reset() {
	*x = ParentEntity{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParentEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentEntity) ProtoMessage() {}

func (x *ParentEntity) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentEntity.ProtoReflect.Descriptor instead.
func (*ParentEntity) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{123}
}

func (x *ParentEntity) GetParentSid() int64 {
	if x != nil {
		return x.ParentSid
	}
	return 0
}

func (x *ParentEntity) GetParentType() commons.ConfigEntityType {
	if x != nil {
		return x.ParentType
	}
	return commons.ConfigEntityType(0)
}

type ConstraintRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this constraint rule
	ConstraintRuleSid int64 `protobuf:"varint,1,opt,name=constraint_rule_sid,json=constraintRuleSid,proto3" json:"constraint_rule_sid,omitempty"`
	// Parent entity that the rule will be applied to.
	ParentEntity *ParentEntity `protobuf:"bytes,2,opt,name=parent_entity,json=parentEntity,proto3" json:"parent_entity,omitempty"`
	// Name of the constraint rule
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the constraint rule.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Ammount of time that the rule will be applied for.
	ValCount int32 `protobuf:"varint,5,opt,name=val_count,json=valCount,proto3" json:"val_count,omitempty"`
	// Measuring unit to be used by @val_count.
	ValUnit commons.ConstraintTimeUnit `protobuf:"varint,6,opt,name=val_unit,json=valUnit,proto3,enum=api.commons.ConstraintTimeUnit" json:"val_unit,omitempty"`
	// Specifies often @val_count will be repeated.
	PerCount int32 `protobuf:"varint,7,opt,name=per_count,json=perCount,proto3" json:"per_count,omitempty"`
	// Measuring unit to be used by @per_count.
	PerUnit commons.ConstraintTimeUnit `protobuf:"varint,8,opt,name=per_unit,json=perUnit,proto3,enum=api.commons.ConstraintTimeUnit" json:"per_unit,omitempty"`
	// Priority value, higher value means higher priority.
	Priority int32 `protobuf:"varint,9,opt,name=priority,proto3" json:"priority,omitempty"`
	// Whether or not the rule has infinite priority
	IsPriorityInfinite bool `protobuf:"varint,10,opt,name=is_priority_infinite,json=isPriorityInfinite,proto3" json:"is_priority_infinite,omitempty"`
	// The type that this rule whill be.
	RuleType commons.ConstraintRuleType `protobuf:"varint,11,opt,name=rule_type,json=ruleType,proto3,enum=api.commons.ConstraintRuleType" json:"rule_type,omitempty"`
	// Refers to a skill_proficiency_sid if @rule_type is MIN_SKILL_LEVEL, and otherwise refers to a scheduling_activity.
	TargetSid int64 `protobuf:"varint,12,opt,name=target_sid,json=targetSid,proto3" json:"target_sid,omitempty"`
	// ID of the schedule scenario that the constraint rule belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,13,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Entity associated with @target_sid.
	//
	// Types that are assignable to MemberTargetEntity:
	//
	//	*ConstraintRule_SchedulingActivity
	//	*ConstraintRule_SkillProficiency
	MemberTargetEntity isConstraintRule_MemberTargetEntity `protobuf_oneof:"member_target_entity"`
}

func (x *ConstraintRule) Reset() {
	*x = ConstraintRule{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstraintRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintRule) ProtoMessage() {}

func (x *ConstraintRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintRule.ProtoReflect.Descriptor instead.
func (*ConstraintRule) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{124}
}

func (x *ConstraintRule) GetConstraintRuleSid() int64 {
	if x != nil {
		return x.ConstraintRuleSid
	}
	return 0
}

func (x *ConstraintRule) GetParentEntity() *ParentEntity {
	if x != nil {
		return x.ParentEntity
	}
	return nil
}

func (x *ConstraintRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConstraintRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConstraintRule) GetValCount() int32 {
	if x != nil {
		return x.ValCount
	}
	return 0
}

func (x *ConstraintRule) GetValUnit() commons.ConstraintTimeUnit {
	if x != nil {
		return x.ValUnit
	}
	return commons.ConstraintTimeUnit(0)
}

func (x *ConstraintRule) GetPerCount() int32 {
	if x != nil {
		return x.PerCount
	}
	return 0
}

func (x *ConstraintRule) GetPerUnit() commons.ConstraintTimeUnit {
	if x != nil {
		return x.PerUnit
	}
	return commons.ConstraintTimeUnit(0)
}

func (x *ConstraintRule) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ConstraintRule) GetIsPriorityInfinite() bool {
	if x != nil {
		return x.IsPriorityInfinite
	}
	return false
}

func (x *ConstraintRule) GetRuleType() commons.ConstraintRuleType {
	if x != nil {
		return x.RuleType
	}
	return commons.ConstraintRuleType(0)
}

func (x *ConstraintRule) GetTargetSid() int64 {
	if x != nil {
		return x.TargetSid
	}
	return 0
}

func (x *ConstraintRule) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (m *ConstraintRule) GetMemberTargetEntity() isConstraintRule_MemberTargetEntity {
	if m != nil {
		return m.MemberTargetEntity
	}
	return nil
}

func (x *ConstraintRule) GetSchedulingActivity() *SchedulingActivity {
	if x, ok := x.GetMemberTargetEntity().(*ConstraintRule_SchedulingActivity); ok {
		return x.SchedulingActivity
	}
	return nil
}

func (x *ConstraintRule) GetSkillProficiency() *SkillProficiency {
	if x, ok := x.GetMemberTargetEntity().(*ConstraintRule_SkillProficiency); ok {
		return x.SkillProficiency
	}
	return nil
}

type isConstraintRule_MemberTargetEntity interface {
	isConstraintRule_MemberTargetEntity()
}

type ConstraintRule_SchedulingActivity struct {
	// The scheduling_activity associated with @target_sid.
	SchedulingActivity *SchedulingActivity `protobuf:"bytes,14,opt,name=scheduling_activity,json=schedulingActivity,proto3,oneof"`
}

type ConstraintRule_SkillProficiency struct {
	// The skill_proficienct associated with @target_sid.
	SkillProficiency *SkillProficiency `protobuf:"bytes,15,opt,name=skill_proficiency,json=skillProficiency,proto3,oneof"`
}

func (*ConstraintRule_SchedulingActivity) isConstraintRule_MemberTargetEntity() {}

func (*ConstraintRule_SkillProficiency) isConstraintRule_MemberTargetEntity() {}

// Request message for the CreateConstraintRule RPC
type CreateConstraintRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rule to create, the @constraint_rule_sid doesn't need to be set since it won't be used.
	ConstraintRule *ConstraintRule `protobuf:"bytes,1,opt,name=constraint_rule,json=constraintRule,proto3" json:"constraint_rule,omitempty"`
}

func (x *CreateConstraintRuleReq) Reset() {
	*x = CreateConstraintRuleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConstraintRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConstraintRuleReq) ProtoMessage() {}

func (x *CreateConstraintRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConstraintRuleReq.ProtoReflect.Descriptor instead.
func (*CreateConstraintRuleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{125}
}

func (x *CreateConstraintRuleReq) GetConstraintRule() *ConstraintRule {
	if x != nil {
		return x.ConstraintRule
	}
	return nil
}

// Response message for the CreateConstraintRule RPC
type CreateConstraintRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created constraint rule.
	ConstraintRuleSid int64 `protobuf:"varint,1,opt,name=constraint_rule_sid,json=constraintRuleSid,proto3" json:"constraint_rule_sid,omitempty"`
	// ID of the newly created skill proficiency (will be 0 if rule was a non skill one).
	SkillProficiencySid int64 `protobuf:"varint,2,opt,name=skill_proficiency_sid,json=skillProficiencySid,proto3" json:"skill_proficiency_sid,omitempty"`
}

func (x *CreateConstraintRuleRes) Reset() {
	*x = CreateConstraintRuleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConstraintRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConstraintRuleRes) ProtoMessage() {}

func (x *CreateConstraintRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConstraintRuleRes.ProtoReflect.Descriptor instead.
func (*CreateConstraintRuleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{126}
}

func (x *CreateConstraintRuleRes) GetConstraintRuleSid() int64 {
	if x != nil {
		return x.ConstraintRuleSid
	}
	return 0
}

func (x *CreateConstraintRuleRes) GetSkillProficiencySid() int64 {
	if x != nil {
		return x.SkillProficiencySid
	}
	return 0
}

// Request message for the UpdateConstraintRule RPC
type UpdateConstraintRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Constraint rule to update
	ConstraintRule *ConstraintRule `protobuf:"bytes,1,opt,name=constraint_rule,json=constraintRule,proto3" json:"constraint_rule,omitempty"`
}

func (x *UpdateConstraintRuleReq) Reset() {
	*x = UpdateConstraintRuleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConstraintRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConstraintRuleReq) ProtoMessage() {}

func (x *UpdateConstraintRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConstraintRuleReq.ProtoReflect.Descriptor instead.
func (*UpdateConstraintRuleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{127}
}

func (x *UpdateConstraintRuleReq) GetConstraintRule() *ConstraintRule {
	if x != nil {
		return x.ConstraintRule
	}
	return nil
}

// Response message for the UpdateConstraintRule RPC
type UpdateConstraintRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateConstraintRuleRes) Reset() {
	*x = UpdateConstraintRuleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConstraintRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConstraintRuleRes) ProtoMessage() {}

func (x *UpdateConstraintRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConstraintRuleRes.ProtoReflect.Descriptor instead.
func (*UpdateConstraintRuleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{128}
}

// Request message for the DeleteConstraintRule RPC
type DeleteConstraintRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the constraint rule to delete.
	ConstraintRuleSid int64 `protobuf:"varint,1,opt,name=constraint_rule_sid,json=constraintRuleSid,proto3" json:"constraint_rule_sid,omitempty"`
}

func (x *DeleteConstraintRuleReq) Reset() {
	*x = DeleteConstraintRuleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConstraintRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConstraintRuleReq) ProtoMessage() {}

func (x *DeleteConstraintRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConstraintRuleReq.ProtoReflect.Descriptor instead.
func (*DeleteConstraintRuleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{129}
}

func (x *DeleteConstraintRuleReq) GetConstraintRuleSid() int64 {
	if x != nil {
		return x.ConstraintRuleSid
	}
	return 0
}

// Response message for the DeleteConstraintRule RPC
type DeleteConstraintRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteConstraintRuleRes) Reset() {
	*x = DeleteConstraintRuleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConstraintRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConstraintRuleRes) ProtoMessage() {}

func (x *DeleteConstraintRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConstraintRuleRes.ProtoReflect.Descriptor instead.
func (*DeleteConstraintRuleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{130}
}

// Represents Agent activity not related to any SkillProfile or
// handling a call/email/sms/etc.
type NonSkillActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this activity
	NonSkillActivitySid int64 `protobuf:"varint,1,opt,name=non_skill_activity_sid,json=nonSkillActivitySid,proto3" json:"non_skill_activity_sid,omitempty"`
	// Activity name (e.g., 'lunch', 'break', 'meeting', etc.)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Activity description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Datetime that the activity was set to inactive, if not set then the activity is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// Display color for this activity
	// Red value
	Red int32 `protobuf:"varint,5,opt,name=red,proto3" json:"red,omitempty"`
	// Green value
	Green int32 `protobuf:"varint,6,opt,name=green,proto3" json:"green,omitempty"`
	// Blue value
	Blue int32 `protobuf:"varint,7,opt,name=blue,proto3" json:"blue,omitempty"`
	// Transparency value (between 0.0 and 1.0)
	Transparency float32 `protobuf:"fixed32,8,opt,name=transparency,proto3" json:"transparency,omitempty"`
	// The highest parent node on the tree that this activity is associated with.
	InheritedFromEntity *ParentEntity `protobuf:"bytes,9,opt,name=inherited_from_entity,json=inheritedFromEntity,proto3" json:"inherited_from_entity,omitempty"`
}

func (x *NonSkillActivity) Reset() {
	*x = NonSkillActivity{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NonSkillActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonSkillActivity) ProtoMessage() {}

func (x *NonSkillActivity) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonSkillActivity.ProtoReflect.Descriptor instead.
func (*NonSkillActivity) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{131}
}

func (x *NonSkillActivity) GetNonSkillActivitySid() int64 {
	if x != nil {
		return x.NonSkillActivitySid
	}
	return 0
}

func (x *NonSkillActivity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NonSkillActivity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NonSkillActivity) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *NonSkillActivity) GetRed() int32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *NonSkillActivity) GetGreen() int32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *NonSkillActivity) GetBlue() int32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

func (x *NonSkillActivity) GetTransparency() float32 {
	if x != nil {
		return x.Transparency
	}
	return 0
}

func (x *NonSkillActivity) GetInheritedFromEntity() *ParentEntity {
	if x != nil {
		return x.InheritedFromEntity
	}
	return nil
}

// Request message for the CreateNonSkillActivity RPC
type CreateNonSkillActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Non skill activity to create, the @non_skill_activity_sid doesn't need to be set since it won't be used.
	NonSkillActivity *NonSkillActivity `protobuf:"bytes,1,opt,name=non_skill_activity,json=nonSkillActivity,proto3" json:"non_skill_activity,omitempty"`
}

func (x *CreateNonSkillActivityReq) Reset() {
	*x = CreateNonSkillActivityReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNonSkillActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNonSkillActivityReq) ProtoMessage() {}

func (x *CreateNonSkillActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNonSkillActivityReq.ProtoReflect.Descriptor instead.
func (*CreateNonSkillActivityReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{132}
}

func (x *CreateNonSkillActivityReq) GetNonSkillActivity() *NonSkillActivity {
	if x != nil {
		return x.NonSkillActivity
	}
	return nil
}

// Response message for the CreateNonSkillActivity RPC
type CreateNonSkillActivityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created non skill activity.
	NonSkillActivitySid int64 `protobuf:"varint,1,opt,name=non_skill_activity_sid,json=nonSkillActivitySid,proto3" json:"non_skill_activity_sid,omitempty"`
	// ID of the newly created scheduling activity wrapper for @non_skill_activity.
	SchedulingActivitySid int64 `protobuf:"varint,2,opt,name=scheduling_activity_sid,json=schedulingActivitySid,proto3" json:"scheduling_activity_sid,omitempty"`
}

func (x *CreateNonSkillActivityRes) Reset() {
	*x = CreateNonSkillActivityRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNonSkillActivityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNonSkillActivityRes) ProtoMessage() {}

func (x *CreateNonSkillActivityRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNonSkillActivityRes.ProtoReflect.Descriptor instead.
func (*CreateNonSkillActivityRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{133}
}

func (x *CreateNonSkillActivityRes) GetNonSkillActivitySid() int64 {
	if x != nil {
		return x.NonSkillActivitySid
	}
	return 0
}

func (x *CreateNonSkillActivityRes) GetSchedulingActivitySid() int64 {
	if x != nil {
		return x.SchedulingActivitySid
	}
	return 0
}

// Request message for the UpdateNonSkillActivity RPC
type UpdateNonSkillActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Non skill activity to update.
	NonSkillActivity *NonSkillActivity `protobuf:"bytes,1,opt,name=non_skill_activity,json=nonSkillActivity,proto3" json:"non_skill_activity,omitempty"`
}

func (x *UpdateNonSkillActivityReq) Reset() {
	*x = UpdateNonSkillActivityReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNonSkillActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNonSkillActivityReq) ProtoMessage() {}

func (x *UpdateNonSkillActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNonSkillActivityReq.ProtoReflect.Descriptor instead.
func (*UpdateNonSkillActivityReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{134}
}

func (x *UpdateNonSkillActivityReq) GetNonSkillActivity() *NonSkillActivity {
	if x != nil {
		return x.NonSkillActivity
	}
	return nil
}

// Response message for the UpdateNonSkillActivity RPC
type UpdateNonSkillActivityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNonSkillActivityRes) Reset() {
	*x = UpdateNonSkillActivityRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNonSkillActivityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNonSkillActivityRes) ProtoMessage() {}

func (x *UpdateNonSkillActivityRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNonSkillActivityRes.ProtoReflect.Descriptor instead.
func (*UpdateNonSkillActivityRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{135}
}

// Request message for the ListNonSkillActivities RPC
type ListNonSkillActivitiesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListNonSkillActivitiesReq) Reset() {
	*x = ListNonSkillActivitiesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNonSkillActivitiesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNonSkillActivitiesReq) ProtoMessage() {}

func (x *ListNonSkillActivitiesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNonSkillActivitiesReq.ProtoReflect.Descriptor instead.
func (*ListNonSkillActivitiesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{136}
}

// Response message for the ListNonSkillActivities RPC
type ListNonSkillActivitiesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the non skill activities found to belong to the org sending the request
	NonSkillActivities []*NonSkillActivity `protobuf:"bytes,1,rep,name=non_skill_activities,json=nonSkillActivities,proto3" json:"non_skill_activities,omitempty"`
}

func (x *ListNonSkillActivitiesRes) Reset() {
	*x = ListNonSkillActivitiesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNonSkillActivitiesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNonSkillActivitiesRes) ProtoMessage() {}

func (x *ListNonSkillActivitiesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNonSkillActivitiesRes.ProtoReflect.Descriptor instead.
func (*ListNonSkillActivitiesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{137}
}

func (x *ListNonSkillActivitiesRes) GetNonSkillActivities() []*NonSkillActivity {
	if x != nil {
		return x.NonSkillActivities
	}
	return nil
}

// Request message for the ListNonSkillActivityAssociations RPC
type ListNonSkillActivityAssociationsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entity to check for relationships with the non skill activities.
	AssociatedEntity *ParentEntity `protobuf:"bytes,1,opt,name=associated_entity,json=associatedEntity,proto3" json:"associated_entity,omitempty"`
	// Type of relationship between non skill activity and the @associated_entity.
	RelationshipType commons.ConfigRelationshipType `protobuf:"varint,2,opt,name=relationship_type,json=relationshipType,proto3,enum=api.commons.ConfigRelationshipType" json:"relationship_type,omitempty"`
}

func (x *ListNonSkillActivityAssociationsReq) Reset() {
	*x = ListNonSkillActivityAssociationsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNonSkillActivityAssociationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNonSkillActivityAssociationsReq) ProtoMessage() {}

func (x *ListNonSkillActivityAssociationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNonSkillActivityAssociationsReq.ProtoReflect.Descriptor instead.
func (*ListNonSkillActivityAssociationsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{138}
}

func (x *ListNonSkillActivityAssociationsReq) GetAssociatedEntity() *ParentEntity {
	if x != nil {
		return x.AssociatedEntity
	}
	return nil
}

func (x *ListNonSkillActivityAssociationsReq) GetRelationshipType() commons.ConfigRelationshipType {
	if x != nil {
		return x.RelationshipType
	}
	return commons.ConfigRelationshipType(0)
}

// Response message for the ListNonSkillActivityAssociations RPC
type ListNonSkillActivityAssociationsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the non skill activities found to have the @relationship_type with the @associated_entity in the request.
	NonSkillActivitySids []int64 `protobuf:"varint,1,rep,packed,name=non_skill_activity_sids,json=nonSkillActivitySids,proto3" json:"non_skill_activity_sids,omitempty"`
}

func (x *ListNonSkillActivityAssociationsRes) Reset() {
	*x = ListNonSkillActivityAssociationsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNonSkillActivityAssociationsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNonSkillActivityAssociationsRes) ProtoMessage() {}

func (x *ListNonSkillActivityAssociationsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNonSkillActivityAssociationsRes.ProtoReflect.Descriptor instead.
func (*ListNonSkillActivityAssociationsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{139}
}

func (x *ListNonSkillActivityAssociationsRes) GetNonSkillActivitySids() []int64 {
	if x != nil {
		return x.NonSkillActivitySids
	}
	return nil
}

// Scheduling activity
type SchedulingActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this scheduling activity.
	SchedulingActivitySid int64 `protobuf:"varint,1,opt,name=scheduling_activity_sid,json=schedulingActivitySid,proto3" json:"scheduling_activity_sid,omitempty"`
	// If false, the @idActivity refers to the id for a non-skill activity, if true then @activity_sid refers to all calls for any skill.
	IsSkillActivity bool `protobuf:"varint,2,opt,name=is_skill_activity,json=isSkillActivity,proto3" json:"is_skill_activity,omitempty"`
	// ID for non-skill activity if @is_skill_activity is false, or for a skill activity if @is_skill_activity is true.
	// This is nil by default, meaning the scheduling_activity refers to a call.
	ActivitySid *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=activity_sid,json=activitySid,proto3" json:"activity_sid,omitempty"`
	// The non skill activity associated with @activity_sid if @is_skill_activity is false.
	MemberNonSkillActivity *NonSkillActivity `protobuf:"bytes,4,opt,name=member_non_skill_activity,json=memberNonSkillActivity,proto3" json:"member_non_skill_activity,omitempty"`
	// Distinguishes if this is a special scheduling activity.
	ActivityClassification commons.SchedulingActivityClassification `protobuf:"varint,5,opt,name=activity_classification,json=activityClassification,proto3,enum=api.commons.SchedulingActivityClassification" json:"activity_classification,omitempty"`
	// List of all the pause codes that this activity allows.
	PauseCodes []string `protobuf:"bytes,6,rep,name=pause_codes,json=pauseCodes,proto3" json:"pause_codes,omitempty"`
}

func (x *SchedulingActivity) Reset() {
	*x = SchedulingActivity{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchedulingActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulingActivity) ProtoMessage() {}

func (x *SchedulingActivity) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulingActivity.ProtoReflect.Descriptor instead.
func (*SchedulingActivity) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{140}
}

func (x *SchedulingActivity) GetSchedulingActivitySid() int64 {
	if x != nil {
		return x.SchedulingActivitySid
	}
	return 0
}

func (x *SchedulingActivity) GetIsSkillActivity() bool {
	if x != nil {
		return x.IsSkillActivity
	}
	return false
}

func (x *SchedulingActivity) GetActivitySid() *wrapperspb.Int64Value {
	if x != nil {
		return x.ActivitySid
	}
	return nil
}

func (x *SchedulingActivity) GetMemberNonSkillActivity() *NonSkillActivity {
	if x != nil {
		return x.MemberNonSkillActivity
	}
	return nil
}

func (x *SchedulingActivity) GetActivityClassification() commons.SchedulingActivityClassification {
	if x != nil {
		return x.ActivityClassification
	}
	return commons.SchedulingActivityClassification(0)
}

func (x *SchedulingActivity) GetPauseCodes() []string {
	if x != nil {
		return x.PauseCodes
	}
	return nil
}

// Request message for the ListCandidateSchedulingActivitiesReq RPC
type ListCandidateSchedulingActivitiesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent who the rule will inherit candidate scheduling activities from.
	// May be any node, an agent_group, or shift template.
	// To get candidate scheduling activities for rules belonging to a wfm agent, @parent_of_rule should be the agent group the wfm agent belongs to.
	ParentOfRule *ParentEntity `protobuf:"bytes,1,opt,name=parent_of_rule,json=parentOfRule,proto3" json:"parent_of_rule,omitempty"`
	// ID of the schedule scenario that this activity belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *ListCandidateSchedulingActivitiesReq) Reset() {
	*x = ListCandidateSchedulingActivitiesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCandidateSchedulingActivitiesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCandidateSchedulingActivitiesReq) ProtoMessage() {}

func (x *ListCandidateSchedulingActivitiesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCandidateSchedulingActivitiesReq.ProtoReflect.Descriptor instead.
func (*ListCandidateSchedulingActivitiesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{141}
}

func (x *ListCandidateSchedulingActivitiesReq) GetParentOfRule() *ParentEntity {
	if x != nil {
		return x.ParentOfRule
	}
	return nil
}

func (x *ListCandidateSchedulingActivitiesReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the ListCandidateSchedulingActivitiesRes RPC
type ListCandidateSchedulingActivitiesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulingActivities []*SchedulingActivity `protobuf:"bytes,1,rep,name=scheduling_activities,json=schedulingActivities,proto3" json:"scheduling_activities,omitempty"`
}

func (x *ListCandidateSchedulingActivitiesRes) Reset() {
	*x = ListCandidateSchedulingActivitiesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCandidateSchedulingActivitiesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCandidateSchedulingActivitiesRes) ProtoMessage() {}

func (x *ListCandidateSchedulingActivitiesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCandidateSchedulingActivitiesRes.ProtoReflect.Descriptor instead.
func (*ListCandidateSchedulingActivitiesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{142}
}

func (x *ListCandidateSchedulingActivitiesRes) GetSchedulingActivities() []*SchedulingActivity {
	if x != nil {
		return x.SchedulingActivities
	}
	return nil
}

// Request message for the ListSchedulingActivities RPC
type ListSchedulingActivitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSchedulingActivitiesRequest) Reset() {
	*x = ListSchedulingActivitiesRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSchedulingActivitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchedulingActivitiesRequest) ProtoMessage() {}

func (x *ListSchedulingActivitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchedulingActivitiesRequest.ProtoReflect.Descriptor instead.
func (*ListSchedulingActivitiesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{143}
}

// Response message for the ListCandidateSchedulingActivities RPC
type ListSchedulingActivitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of scheduling activities for the org sending the request.
	SchedulingActivities []*SchedulingActivity `protobuf:"bytes,1,rep,name=scheduling_activities,json=schedulingActivities,proto3" json:"scheduling_activities,omitempty"`
}

func (x *ListSchedulingActivitiesResponse) Reset() {
	*x = ListSchedulingActivitiesResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSchedulingActivitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchedulingActivitiesResponse) ProtoMessage() {}

func (x *ListSchedulingActivitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchedulingActivitiesResponse.ProtoReflect.Descriptor instead.
func (*ListSchedulingActivitiesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{144}
}

func (x *ListSchedulingActivitiesResponse) GetSchedulingActivities() []*SchedulingActivity {
	if x != nil {
		return x.SchedulingActivities
	}
	return nil
}

// Request message for the GetOnCallSchedulingActivity RPC
type GetOnCallSchedulingActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetOnCallSchedulingActivityReq) Reset() {
	*x = GetOnCallSchedulingActivityReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOnCallSchedulingActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnCallSchedulingActivityReq) ProtoMessage() {}

func (x *GetOnCallSchedulingActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnCallSchedulingActivityReq.ProtoReflect.Descriptor instead.
func (*GetOnCallSchedulingActivityReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{145}
}

type GetOnCallSchedulingActivityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The on call scheduling activity
	OnCallSchedulingActivity *SchedulingActivity `protobuf:"bytes,1,opt,name=on_call_scheduling_activity,json=onCallSchedulingActivity,proto3" json:"on_call_scheduling_activity,omitempty"`
}

func (x *GetOnCallSchedulingActivityRes) Reset() {
	*x = GetOnCallSchedulingActivityRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOnCallSchedulingActivityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnCallSchedulingActivityRes) ProtoMessage() {}

func (x *GetOnCallSchedulingActivityRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnCallSchedulingActivityRes.ProtoReflect.Descriptor instead.
func (*GetOnCallSchedulingActivityRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{146}
}

func (x *GetOnCallSchedulingActivityRes) GetOnCallSchedulingActivity() *SchedulingActivity {
	if x != nil {
		return x.OnCallSchedulingActivity
	}
	return nil
}

// Request message for the CreateSchedulingActivityPauseCodes RPC
type CreateSchedulingActivityPauseCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the scheduling activity to add the pause codes to.
	SchedulingActivitySid int64 `protobuf:"varint,1,opt,name=scheduling_activity_sid,json=schedulingActivitySid,proto3" json:"scheduling_activity_sid,omitempty"`
	// Pause codes to add to the scheduling activity.
	PauseCodes []string `protobuf:"bytes,2,rep,name=pause_codes,json=pauseCodes,proto3" json:"pause_codes,omitempty"`
}

func (x *CreateSchedulingActivityPauseCodesRequest) Reset() {
	*x = CreateSchedulingActivityPauseCodesRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSchedulingActivityPauseCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchedulingActivityPauseCodesRequest) ProtoMessage() {}

func (x *CreateSchedulingActivityPauseCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchedulingActivityPauseCodesRequest.ProtoReflect.Descriptor instead.
func (*CreateSchedulingActivityPauseCodesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{147}
}

func (x *CreateSchedulingActivityPauseCodesRequest) GetSchedulingActivitySid() int64 {
	if x != nil {
		return x.SchedulingActivitySid
	}
	return 0
}

func (x *CreateSchedulingActivityPauseCodesRequest) GetPauseCodes() []string {
	if x != nil {
		return x.PauseCodes
	}
	return nil
}

type CreateSchedulingActivityPauseCodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSchedulingActivityPauseCodesResponse) Reset() {
	*x = CreateSchedulingActivityPauseCodesResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSchedulingActivityPauseCodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchedulingActivityPauseCodesResponse) ProtoMessage() {}

func (x *CreateSchedulingActivityPauseCodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchedulingActivityPauseCodesResponse.ProtoReflect.Descriptor instead.
func (*CreateSchedulingActivityPauseCodesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{148}
}

// Request message for the DeleteSchedulingActivityPauseCodes RPC
type DeleteSchedulingActivityPauseCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the scheduling activity to remove the pause codes from.
	SchedulingActivitySid int64 `protobuf:"varint,1,opt,name=scheduling_activity_sid,json=schedulingActivitySid,proto3" json:"scheduling_activity_sid,omitempty"`
	// Pause codes to remove to the scheduling activity.
	PauseCodes []string `protobuf:"bytes,2,rep,name=pause_codes,json=pauseCodes,proto3" json:"pause_codes,omitempty"`
}

func (x *DeleteSchedulingActivityPauseCodesRequest) Reset() {
	*x = DeleteSchedulingActivityPauseCodesRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSchedulingActivityPauseCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchedulingActivityPauseCodesRequest) ProtoMessage() {}

func (x *DeleteSchedulingActivityPauseCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchedulingActivityPauseCodesRequest.ProtoReflect.Descriptor instead.
func (*DeleteSchedulingActivityPauseCodesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{149}
}

func (x *DeleteSchedulingActivityPauseCodesRequest) GetSchedulingActivitySid() int64 {
	if x != nil {
		return x.SchedulingActivitySid
	}
	return 0
}

func (x *DeleteSchedulingActivityPauseCodesRequest) GetPauseCodes() []string {
	if x != nil {
		return x.PauseCodes
	}
	return nil
}

type DeleteSchedulingActivityPauseCodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSchedulingActivityPauseCodesResponse) Reset() {
	*x = DeleteSchedulingActivityPauseCodesResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSchedulingActivityPauseCodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchedulingActivityPauseCodesResponse) ProtoMessage() {}

func (x *DeleteSchedulingActivityPauseCodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchedulingActivityPauseCodesResponse.ProtoReflect.Descriptor instead.
func (*DeleteSchedulingActivityPauseCodesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{150}
}

// Request message for the ListPatternsForSchedulingActivityClassifications RPC
type ListPatternsForSchedulingActivityClassificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entity to list the the patterns for.
	ParentEntity *ParentEntity `protobuf:"bytes,1,opt,name=parent_entity,json=parentEntity,proto3" json:"parent_entity,omitempty"`
	// Scheduling Activity Classifications to get patterns for.
	SchedulingActivityClassifications []commons.SchedulingActivityClassification `protobuf:"varint,2,rep,packed,name=scheduling_activity_classifications,json=schedulingActivityClassifications,proto3,enum=api.commons.SchedulingActivityClassification" json:"scheduling_activity_classifications,omitempty"`
}

func (x *ListPatternsForSchedulingActivityClassificationsRequest) Reset() {
	*x = ListPatternsForSchedulingActivityClassificationsRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPatternsForSchedulingActivityClassificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPatternsForSchedulingActivityClassificationsRequest) ProtoMessage() {}

func (x *ListPatternsForSchedulingActivityClassificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPatternsForSchedulingActivityClassificationsRequest.ProtoReflect.Descriptor instead.
func (*ListPatternsForSchedulingActivityClassificationsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{151}
}

func (x *ListPatternsForSchedulingActivityClassificationsRequest) GetParentEntity() *ParentEntity {
	if x != nil {
		return x.ParentEntity
	}
	return nil
}

func (x *ListPatternsForSchedulingActivityClassificationsRequest) GetSchedulingActivityClassifications() []commons.SchedulingActivityClassification {
	if x != nil {
		return x.SchedulingActivityClassifications
	}
	return nil
}

type ListPatternsForSchedulingActivityClassificationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested open times patterns.
	OpenTimesPatterns []*OpenTimesPattern `protobuf:"bytes,1,rep,name=open_times_patterns,json=openTimesPatterns,proto3" json:"open_times_patterns,omitempty"`
	// The requested agent availability patterns.
	AgentAvailabilityPatterns []*AgentAvailabilityPattern `protobuf:"bytes,2,rep,name=agent_availability_patterns,json=agentAvailabilityPatterns,proto3" json:"agent_availability_patterns,omitempty"`
}

func (x *ListPatternsForSchedulingActivityClassificationsResponse) Reset() {
	*x = ListPatternsForSchedulingActivityClassificationsResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPatternsForSchedulingActivityClassificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPatternsForSchedulingActivityClassificationsResponse) ProtoMessage() {}

func (x *ListPatternsForSchedulingActivityClassificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPatternsForSchedulingActivityClassificationsResponse.ProtoReflect.Descriptor instead.
func (*ListPatternsForSchedulingActivityClassificationsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{152}
}

func (x *ListPatternsForSchedulingActivityClassificationsResponse) GetOpenTimesPatterns() []*OpenTimesPattern {
	if x != nil {
		return x.OpenTimesPatterns
	}
	return nil
}

func (x *ListPatternsForSchedulingActivityClassificationsResponse) GetAgentAvailabilityPatterns() []*AgentAvailabilityPattern {
	if x != nil {
		return x.AgentAvailabilityPatterns
	}
	return nil
}

// Request message for the GetTimeOffSchedulingActivity RPC
type GetTimeOffSchedulingActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTimeOffSchedulingActivityRequest) Reset() {
	*x = GetTimeOffSchedulingActivityRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTimeOffSchedulingActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeOffSchedulingActivityRequest) ProtoMessage() {}

func (x *GetTimeOffSchedulingActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeOffSchedulingActivityRequest.ProtoReflect.Descriptor instead.
func (*GetTimeOffSchedulingActivityRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{153}
}

// Response message for the GetTimeOffSchedulingActivity RPC
type GetTimeOffSchedulingActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time off scheduling activity
	SchedulingActivity *SchedulingActivity `protobuf:"bytes,1,opt,name=scheduling_activity,json=schedulingActivity,proto3" json:"scheduling_activity,omitempty"`
}

func (x *GetTimeOffSchedulingActivityResponse) Reset() {
	*x = GetTimeOffSchedulingActivityResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTimeOffSchedulingActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeOffSchedulingActivityResponse) ProtoMessage() {}

func (x *GetTimeOffSchedulingActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeOffSchedulingActivityResponse.ProtoReflect.Descriptor instead.
func (*GetTimeOffSchedulingActivityResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{154}
}

func (x *GetTimeOffSchedulingActivityResponse) GetSchedulingActivity() *SchedulingActivity {
	if x != nil {
		return x.SchedulingActivity
	}
	return nil
}

// Represents a group of agents that have the same parent and other common properties.
type AgentGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this agent group
	AgentGroupSid int64 `protobuf:"varint,1,opt,name=agent_group_sid,json=agentGroupSid,proto3" json:"agent_group_sid,omitempty"`
	// Parent entity of the agent group
	ParentEntity *ParentEntity `protobuf:"bytes,2,opt,name=parent_entity,json=parentEntity,proto3" json:"parent_entity,omitempty"`
	// Agent group name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Agent group description.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Datetime that the agent group was set to inactive, if not set then the agent group is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// ID of the schedule scenario that the agent group belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,6,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// List of constraint rule that apply to this agent group.
	MemberConstraintRules []*ConstraintRule `protobuf:"bytes,7,rep,name=member_constraint_rules,json=memberConstraintRules,proto3" json:"member_constraint_rules,omitempty"`
	// List of WFM agents that are members of this agent group.
	MemberWfmAgents []*WFMAgent `protobuf:"bytes,8,rep,name=member_wfm_agents,json=memberWfmAgents,proto3" json:"member_wfm_agents,omitempty"`
	// List of skill proficiencies associated with this agent group.
	MemberSkillProficiencies []*SkillProficiency `protobuf:"bytes,9,rep,name=member_skill_proficiencies,json=memberSkillProficiencies,proto3" json:"member_skill_proficiencies,omitempty"`
	// List of agent availability patterns associated with this agent group.
	MemberAgentAvailabilityPatterns []*AgentAvailabilityPattern `protobuf:"bytes,10,rep,name=member_agent_availability_patterns,json=memberAgentAvailabilityPatterns,proto3" json:"member_agent_availability_patterns,omitempty"`
}

func (x *AgentGroup) Reset() {
	*x = AgentGroup{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGroup) ProtoMessage() {}

func (x *AgentGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGroup.ProtoReflect.Descriptor instead.
func (*AgentGroup) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{155}
}

func (x *AgentGroup) GetAgentGroupSid() int64 {
	if x != nil {
		return x.AgentGroupSid
	}
	return 0
}

func (x *AgentGroup) GetParentEntity() *ParentEntity {
	if x != nil {
		return x.ParentEntity
	}
	return nil
}

func (x *AgentGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AgentGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AgentGroup) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *AgentGroup) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *AgentGroup) GetMemberConstraintRules() []*ConstraintRule {
	if x != nil {
		return x.MemberConstraintRules
	}
	return nil
}

func (x *AgentGroup) GetMemberWfmAgents() []*WFMAgent {
	if x != nil {
		return x.MemberWfmAgents
	}
	return nil
}

func (x *AgentGroup) GetMemberSkillProficiencies() []*SkillProficiency {
	if x != nil {
		return x.MemberSkillProficiencies
	}
	return nil
}

func (x *AgentGroup) GetMemberAgentAvailabilityPatterns() []*AgentAvailabilityPattern {
	if x != nil {
		return x.MemberAgentAvailabilityPatterns
	}
	return nil
}

// Request message for the CreateAgentGroup RPC
type CreateAgentGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AgentGroup to create, the @agent_group_sid doesn't need to be set since it won't be used.
	AgentGroup *AgentGroup `protobuf:"bytes,1,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *CreateAgentGroupReq) Reset() {
	*x = CreateAgentGroupReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAgentGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentGroupReq) ProtoMessage() {}

func (x *CreateAgentGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentGroupReq.ProtoReflect.Descriptor instead.
func (*CreateAgentGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{156}
}

func (x *CreateAgentGroupReq) GetAgentGroup() *AgentGroup {
	if x != nil {
		return x.AgentGroup
	}
	return nil
}

// Response message for the CreateAgentGroup RPC
type CreateAgentGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created agent group
	AgentGroupSid int64 `protobuf:"varint,1,opt,name=agent_group_sid,json=agentGroupSid,proto3" json:"agent_group_sid,omitempty"`
}

func (x *CreateAgentGroupRes) Reset() {
	*x = CreateAgentGroupRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAgentGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentGroupRes) ProtoMessage() {}

func (x *CreateAgentGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentGroupRes.ProtoReflect.Descriptor instead.
func (*CreateAgentGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{157}
}

func (x *CreateAgentGroupRes) GetAgentGroupSid() int64 {
	if x != nil {
		return x.AgentGroupSid
	}
	return 0
}

// Request message for ListAgentScheduleGroups.
type ListAgentScheduleGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Any node or shift template that the agent groups belong to.
	Entity *ParentEntity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
}

func (x *ListAgentScheduleGroupsRequest) Reset() {
	*x = ListAgentScheduleGroupsRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentScheduleGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentScheduleGroupsRequest) ProtoMessage() {}

func (x *ListAgentScheduleGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentScheduleGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListAgentScheduleGroupsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{158}
}

func (x *ListAgentScheduleGroupsRequest) GetEntity() *ParentEntity {
	if x != nil {
		return x.Entity
	}
	return nil
}

// Response message for ListAgentScheduleGroups.
type ListAgentScheduleGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The agent_groups found. They will be filled with member_wfm_agents only.
	AgentGroups []*AgentGroup `protobuf:"bytes,1,rep,name=agent_groups,json=agentGroups,proto3" json:"agent_groups,omitempty"`
}

func (x *ListAgentScheduleGroupsResponse) Reset() {
	*x = ListAgentScheduleGroupsResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentScheduleGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentScheduleGroupsResponse) ProtoMessage() {}

func (x *ListAgentScheduleGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentScheduleGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListAgentScheduleGroupsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{159}
}

func (x *ListAgentScheduleGroupsResponse) GetAgentGroups() []*AgentGroup {
	if x != nil {
		return x.AgentGroups
	}
	return nil
}

// Request message for the UpdateAgentGroup RPC
type UpdateAgentGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AgentGroup to update
	AgentGroup *AgentGroup `protobuf:"bytes,1,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *UpdateAgentGroupReq) Reset() {
	*x = UpdateAgentGroupReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentGroupReq) ProtoMessage() {}

func (x *UpdateAgentGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentGroupReq.ProtoReflect.Descriptor instead.
func (*UpdateAgentGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{160}
}

func (x *UpdateAgentGroupReq) GetAgentGroup() *AgentGroup {
	if x != nil {
		return x.AgentGroup
	}
	return nil
}

// Response message for the UpdateAgentGroup RPC
type UpdateAgentGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAgentGroupRes) Reset() {
	*x = UpdateAgentGroupRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentGroupRes) ProtoMessage() {}

func (x *UpdateAgentGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentGroupRes.ProtoReflect.Descriptor instead.
func (*UpdateAgentGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{161}
}

// Represents a wfm agent object refering to an agent in the TCN system.
type WFMAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID for this object.
	WfmAgentSid int64 `protobuf:"varint,1,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// Reference to the affiliated tcn agent.
	// If set to nil, that means that this WFM Agent is not assigned to a TCN agent.
	TcnAgentSid *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=tcn_agent_sid,json=tcnAgentSid,proto3" json:"tcn_agent_sid,omitempty"`
	// Name for WFM Agent.
	// If it's for a TCN agent this value will always match that TCN agent's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Null by default, indicates date which agent was removed or deactivated.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// The constraint rules associated with @wfm_agent_sid.
	MemberConstraintRules []*ConstraintRule `protobuf:"bytes,5,rep,name=member_constraint_rules,json=memberConstraintRules,proto3" json:"member_constraint_rules,omitempty"`
	// List of skill proficiencies associated with @wfm_agent_sid.
	MemberSkillProficiencies []*SkillProficiency `protobuf:"bytes,6,rep,name=member_skill_proficiencies,json=memberSkillProficiencies,proto3" json:"member_skill_proficiencies,omitempty"`
	// List of agent availability patterns associated with this wfm agent.
	MemberAgentAvailabilityPatterns []*AgentAvailabilityPattern `protobuf:"bytes,7,rep,name=member_agent_availability_patterns,json=memberAgentAvailabilityPatterns,proto3" json:"member_agent_availability_patterns,omitempty"`
	// Date of creation of the agent.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// If this WFM agent is for a TCN agent, it indicates whether or not this TCN Agent is enabled or not.
	// Field is read only and cannot be modified.
	TcnAgentIsEnabled bool `protobuf:"varint,9,opt,name=tcn_agent_is_enabled,json=tcnAgentIsEnabled,proto3" json:"tcn_agent_is_enabled,omitempty"`
}

func (x *WFMAgent) Reset() {
	*x = WFMAgent{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WFMAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WFMAgent) ProtoMessage() {}

func (x *WFMAgent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WFMAgent.ProtoReflect.Descriptor instead.
func (*WFMAgent) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{162}
}

func (x *WFMAgent) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

func (x *WFMAgent) GetTcnAgentSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.TcnAgentSid
	}
	return nil
}

func (x *WFMAgent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WFMAgent) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *WFMAgent) GetMemberConstraintRules() []*ConstraintRule {
	if x != nil {
		return x.MemberConstraintRules
	}
	return nil
}

func (x *WFMAgent) GetMemberSkillProficiencies() []*SkillProficiency {
	if x != nil {
		return x.MemberSkillProficiencies
	}
	return nil
}

func (x *WFMAgent) GetMemberAgentAvailabilityPatterns() []*AgentAvailabilityPattern {
	if x != nil {
		return x.MemberAgentAvailabilityPatterns
	}
	return nil
}

func (x *WFMAgent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WFMAgent) GetTcnAgentIsEnabled() bool {
	if x != nil {
		return x.TcnAgentIsEnabled
	}
	return false
}

// Request message for the CreateUnassignedWFMAgent RPC
type CreateUnassignedWFMAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agent to copy the agent group associations onto the new agent.
	WfmAgentSidToCopyAgentGroupAssociations *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=wfm_agent_sid_to_copy_agent_group_associations,json=wfmAgentSidToCopyAgentGroupAssociations,proto3" json:"wfm_agent_sid_to_copy_agent_group_associations,omitempty"`
	// Optional: name to give the agent, it will always have the following random string postfixed to it:
	// ' - <random_upper_letter><random_upper_letter><random_number_from_100_to_999>'.
	// If left blank, the name will have 'Unassigned Agent' as its prefix.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateUnassignedWFMAgentRequest) Reset() {
	*x = CreateUnassignedWFMAgentRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUnassignedWFMAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUnassignedWFMAgentRequest) ProtoMessage() {}

func (x *CreateUnassignedWFMAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUnassignedWFMAgentRequest.ProtoReflect.Descriptor instead.
func (*CreateUnassignedWFMAgentRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{163}
}

func (x *CreateUnassignedWFMAgentRequest) GetWfmAgentSidToCopyAgentGroupAssociations() *wrapperspb.Int64Value {
	if x != nil {
		return x.WfmAgentSidToCopyAgentGroupAssociations
	}
	return nil
}

func (x *CreateUnassignedWFMAgentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response message for CreateUnassignedWFMAgent RPC
type CreateUnassignedWFMAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created agent.
	WfmAgentSid int64 `protobuf:"varint,1,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
}

func (x *CreateUnassignedWFMAgentResponse) Reset() {
	*x = CreateUnassignedWFMAgentResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUnassignedWFMAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUnassignedWFMAgentResponse) ProtoMessage() {}

func (x *CreateUnassignedWFMAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUnassignedWFMAgentResponse.ProtoReflect.Descriptor instead.
func (*CreateUnassignedWFMAgentResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{164}
}

func (x *CreateUnassignedWFMAgentResponse) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

// Request message for the UpdateWFMAgent RPC
type UpdateWFMAgentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Wfm agent to update.
	WfmAgent *WFMAgent `protobuf:"bytes,1,opt,name=wfm_agent,json=wfmAgent,proto3" json:"wfm_agent,omitempty"`
}

func (x *UpdateWFMAgentReq) Reset() {
	*x = UpdateWFMAgentReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWFMAgentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWFMAgentReq) ProtoMessage() {}

func (x *UpdateWFMAgentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWFMAgentReq.ProtoReflect.Descriptor instead.
func (*UpdateWFMAgentReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{165}
}

func (x *UpdateWFMAgentReq) GetWfmAgent() *WFMAgent {
	if x != nil {
		return x.WfmAgent
	}
	return nil
}

// Response message for the UpdateWFMAgent RPC
type UpdateWFMAgentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateWFMAgentRes) Reset() {
	*x = UpdateWFMAgentRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWFMAgentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWFMAgentRes) ProtoMessage() {}

func (x *UpdateWFMAgentRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWFMAgentRes.ProtoReflect.Descriptor instead.
func (*UpdateWFMAgentRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{166}
}

// Request message for the ListAllWFMAgents RPC
type ListAllWFMAgentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates if the result should include the inactive wfm agents.
	IncludeInactive bool `protobuf:"varint,1,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	// Indicates if the resulting WFM agents should include skill proficiencies.
	IncludeSkillProficiencies bool `protobuf:"varint,2,opt,name=include_skill_proficiencies,json=includeSkillProficiencies,proto3" json:"include_skill_proficiencies,omitempty"`
	// Indicates if the resulting WFM agents should include the groups that they are members of.
	IncludeAgentGroups bool `protobuf:"varint,3,opt,name=include_agent_groups,json=includeAgentGroups,proto3" json:"include_agent_groups,omitempty"`
	// Indicates the schedule scenario that returned @agent_groups belong to.
	// If set to zero, the agent groups will not be filtered by schedule scenario.
	// Does not effect which @wfm_agents are returned.
	AgentGroupScheduleScenarioSid int64 `protobuf:"varint,4,opt,name=agent_group_schedule_scenario_sid,json=agentGroupScheduleScenarioSid,proto3" json:"agent_group_schedule_scenario_sid,omitempty"`
}

func (x *ListAllWFMAgentsReq) Reset() {
	*x = ListAllWFMAgentsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAllWFMAgentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllWFMAgentsReq) ProtoMessage() {}

func (x *ListAllWFMAgentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllWFMAgentsReq.ProtoReflect.Descriptor instead.
func (*ListAllWFMAgentsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{167}
}

func (x *ListAllWFMAgentsReq) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *ListAllWFMAgentsReq) GetIncludeSkillProficiencies() bool {
	if x != nil {
		return x.IncludeSkillProficiencies
	}
	return false
}

func (x *ListAllWFMAgentsReq) GetIncludeAgentGroups() bool {
	if x != nil {
		return x.IncludeAgentGroups
	}
	return false
}

func (x *ListAllWFMAgentsReq) GetAgentGroupScheduleScenarioSid() int64 {
	if x != nil {
		return x.AgentGroupScheduleScenarioSid
	}
	return 0
}

// Response message for the ListAllWFMAgents RPC
type ListAllWFMAgentsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all wfm agents that belong to the org sending the request.
	WfmAgents []*WFMAgent `protobuf:"bytes,1,rep,name=wfm_agents,json=wfmAgents,proto3" json:"wfm_agents,omitempty"`
	// Correlating list of agent groups that the agent with the same index is a member of.
	// Agents with no agent groups will index to an empty slice.
	AgentGroupsByAgent []*ListAllWFMAgentsRes_AgentGroupsByAgent `protobuf:"bytes,2,rep,name=agent_groups_by_agent,json=agentGroupsByAgent,proto3" json:"agent_groups_by_agent,omitempty"`
}

func (x *ListAllWFMAgentsRes) Reset() {
	*x = ListAllWFMAgentsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAllWFMAgentsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllWFMAgentsRes) ProtoMessage() {}

func (x *ListAllWFMAgentsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllWFMAgentsRes.ProtoReflect.Descriptor instead.
func (*ListAllWFMAgentsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{168}
}

func (x *ListAllWFMAgentsRes) GetWfmAgents() []*WFMAgent {
	if x != nil {
		return x.WfmAgents
	}
	return nil
}

func (x *ListAllWFMAgentsRes) GetAgentGroupsByAgent() []*ListAllWFMAgentsRes_AgentGroupsByAgent {
	if x != nil {
		return x.AgentGroupsByAgent
	}
	return nil
}

// Request message for the ListCandidateWFMAgents RPC
type ListCandidateWFMAgentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the agent group to find candidate wfm agents for.
	AgentGroupSid int64 `protobuf:"varint,1,opt,name=agent_group_sid,json=agentGroupSid,proto3" json:"agent_group_sid,omitempty"`
}

func (x *ListCandidateWFMAgentsReq) Reset() {
	*x = ListCandidateWFMAgentsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCandidateWFMAgentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCandidateWFMAgentsReq) ProtoMessage() {}

func (x *ListCandidateWFMAgentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCandidateWFMAgentsReq.ProtoReflect.Descriptor instead.
func (*ListCandidateWFMAgentsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{169}
}

func (x *ListCandidateWFMAgentsReq) GetAgentGroupSid() int64 {
	if x != nil {
		return x.AgentGroupSid
	}
	return 0
}

// Response message for the ListCandidateWFMAgents RPC
type ListCandidateWFMAgentsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all wfm agents who are candidates for the given @agent_group_sid.
	WfmAgents []*WFMAgent `protobuf:"bytes,1,rep,name=wfm_agents,json=wfmAgents,proto3" json:"wfm_agents,omitempty"`
}

func (x *ListCandidateWFMAgentsRes) Reset() {
	*x = ListCandidateWFMAgentsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCandidateWFMAgentsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCandidateWFMAgentsRes) ProtoMessage() {}

func (x *ListCandidateWFMAgentsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCandidateWFMAgentsRes.ProtoReflect.Descriptor instead.
func (*ListCandidateWFMAgentsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{170}
}

func (x *ListCandidateWFMAgentsRes) GetWfmAgents() []*WFMAgent {
	if x != nil {
		return x.WfmAgents
	}
	return nil
}

// Request message for the ListUngroupedWFMAgents RPC
type ListUngroupedWFMAgentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional, ID of the schedule scenario of agent groups to check for unnasigned wfm agents.
	// If not set, it will check for unnasigned agents for all agent groups.
	ScheduleScenarioSid int64 `protobuf:"varint,1,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Ungrouped agents created after this date will be returned.
	CreatedAfterDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_after_datetime,json=createdAfterDatetime,proto3" json:"created_after_datetime,omitempty"`
	// Indicates if the resulting WFM agents should include skill proficiencies.
	IncludeSkillProficiencies bool `protobuf:"varint,3,opt,name=include_skill_proficiencies,json=includeSkillProficiencies,proto3" json:"include_skill_proficiencies,omitempty"`
}

func (x *ListUngroupedWFMAgentsReq) Reset() {
	*x = ListUngroupedWFMAgentsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUngroupedWFMAgentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUngroupedWFMAgentsReq) ProtoMessage() {}

func (x *ListUngroupedWFMAgentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUngroupedWFMAgentsReq.ProtoReflect.Descriptor instead.
func (*ListUngroupedWFMAgentsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{171}
}

func (x *ListUngroupedWFMAgentsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *ListUngroupedWFMAgentsReq) GetCreatedAfterDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAfterDatetime
	}
	return nil
}

func (x *ListUngroupedWFMAgentsReq) GetIncludeSkillProficiencies() bool {
	if x != nil {
		return x.IncludeSkillProficiencies
	}
	return false
}

// Response message for the ListUngroupedWFMAgents RPC
type ListUngroupedWFMAgentsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all unnasigned wfm agents for the given @schedule_scenario_sid.
	WfmAgents []*WFMAgent `protobuf:"bytes,1,rep,name=wfm_agents,json=wfmAgents,proto3" json:"wfm_agents,omitempty"`
}

func (x *ListUngroupedWFMAgentsRes) Reset() {
	*x = ListUngroupedWFMAgentsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUngroupedWFMAgentsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUngroupedWFMAgentsRes) ProtoMessage() {}

func (x *ListUngroupedWFMAgentsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUngroupedWFMAgentsRes.ProtoReflect.Descriptor instead.
func (*ListUngroupedWFMAgentsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{172}
}

func (x *ListUngroupedWFMAgentsRes) GetWfmAgents() []*WFMAgent {
	if x != nil {
		return x.WfmAgents
	}
	return nil
}

// Request message for the ListWFMAgentSids RPC
type ListWFMAgentSidsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the agents to get the related wfm_agent_sid for.
	TcnAgentSids []int64 `protobuf:"varint,1,rep,packed,name=tcn_agent_sids,json=tcnAgentSids,proto3" json:"tcn_agent_sids,omitempty"`
}

func (x *ListWFMAgentSidsReq) Reset() {
	*x = ListWFMAgentSidsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWFMAgentSidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWFMAgentSidsReq) ProtoMessage() {}

func (x *ListWFMAgentSidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWFMAgentSidsReq.ProtoReflect.Descriptor instead.
func (*ListWFMAgentSidsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{173}
}

func (x *ListWFMAgentSidsReq) GetTcnAgentSids() []int64 {
	if x != nil {
		return x.TcnAgentSids
	}
	return nil
}

// Response message for the ListWFMAgentSids RPC
type ListWFMAgentSidsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of WFM agents found.
	// Key: tcn_agent_sid - Value: wfm_agent_sid.
	Sids map[int64]int64 `protobuf:"bytes,1,rep,name=sids,proto3" json:"sids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ListWFMAgentSidsRes) Reset() {
	*x = ListWFMAgentSidsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWFMAgentSidsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWFMAgentSidsRes) ProtoMessage() {}

func (x *ListWFMAgentSidsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWFMAgentSidsRes.ProtoReflect.Descriptor instead.
func (*ListWFMAgentSidsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{174}
}

func (x *ListWFMAgentSidsRes) GetSids() map[int64]int64 {
	if x != nil {
		return x.Sids
	}
	return nil
}

// Request message for the ListUnassignedWFMAgents RPC
type ListUnassignedWFMAgentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListUnassignedWFMAgentsRequest) Reset() {
	*x = ListUnassignedWFMAgentsRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUnassignedWFMAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnassignedWFMAgentsRequest) ProtoMessage() {}

func (x *ListUnassignedWFMAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnassignedWFMAgentsRequest.ProtoReflect.Descriptor instead.
func (*ListUnassignedWFMAgentsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{175}
}

// Response message for the ListUnassignedWFMAgents RPC
type ListUnassignedWFMAgentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of found wfm agents.
	WfmAgents []*WFMAgent `protobuf:"bytes,1,rep,name=wfm_agents,json=wfmAgents,proto3" json:"wfm_agents,omitempty"`
}

func (x *ListUnassignedWFMAgentsResponse) Reset() {
	*x = ListUnassignedWFMAgentsResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUnassignedWFMAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnassignedWFMAgentsResponse) ProtoMessage() {}

func (x *ListUnassignedWFMAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnassignedWFMAgentsResponse.ProtoReflect.Descriptor instead.
func (*ListUnassignedWFMAgentsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{176}
}

func (x *ListUnassignedWFMAgentsResponse) GetWfmAgents() []*WFMAgent {
	if x != nil {
		return x.WfmAgents
	}
	return nil
}

// Request message for the ListWFMAgentsAssociatedWithAgentGroup RPC
type ListWFMAgentsAssociatedWithAgentGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the agent group that the wfm agents have a membership with.
	AgentGroupSid int64 `protobuf:"varint,1,opt,name=agent_group_sid,json=agentGroupSid,proto3" json:"agent_group_sid,omitempty"`
}

func (x *ListWFMAgentsAssociatedWithAgentGroupReq) Reset() {
	*x = ListWFMAgentsAssociatedWithAgentGroupReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWFMAgentsAssociatedWithAgentGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWFMAgentsAssociatedWithAgentGroupReq) ProtoMessage() {}

func (x *ListWFMAgentsAssociatedWithAgentGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWFMAgentsAssociatedWithAgentGroupReq.ProtoReflect.Descriptor instead.
func (*ListWFMAgentsAssociatedWithAgentGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{177}
}

func (x *ListWFMAgentsAssociatedWithAgentGroupReq) GetAgentGroupSid() int64 {
	if x != nil {
		return x.AgentGroupSid
	}
	return 0
}

// Response message for the ListWFMAgentsAssociatedWithAgentGroup RPC
type ListWFMAgentsAssociatedWithAgentGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agents found to have a relationship with the @agent_group_sid in the request.
	WfmAgentSids []int64 `protobuf:"varint,1,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
}

func (x *ListWFMAgentsAssociatedWithAgentGroupRes) Reset() {
	*x = ListWFMAgentsAssociatedWithAgentGroupRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWFMAgentsAssociatedWithAgentGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWFMAgentsAssociatedWithAgentGroupRes) ProtoMessage() {}

func (x *ListWFMAgentsAssociatedWithAgentGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWFMAgentsAssociatedWithAgentGroupRes.ProtoReflect.Descriptor instead.
func (*ListWFMAgentsAssociatedWithAgentGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{178}
}

func (x *ListWFMAgentsAssociatedWithAgentGroupRes) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

// Request message for the BuildAgentDiagnostics RPC
type BuildAgentDiagnosticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agent to build diagnostics for.
	WfmAgentSid int64 `protobuf:"varint,1,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// ID of the schedule scenario that the wfm agent belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// ID of the agent_group to build diagnostics for.
	// If this field is set, the diagnostics will be built for every wfm agent in that agent group, and the @wfm-agent_sid field in this req will be ignored.
	AgentGroupSid int64 `protobuf:"varint,3,opt,name=agent_group_sid,json=agentGroupSid,proto3" json:"agent_group_sid,omitempty"`
}

func (x *BuildAgentDiagnosticsReq) Reset() {
	*x = BuildAgentDiagnosticsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildAgentDiagnosticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildAgentDiagnosticsReq) ProtoMessage() {}

func (x *BuildAgentDiagnosticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildAgentDiagnosticsReq.ProtoReflect.Descriptor instead.
func (*BuildAgentDiagnosticsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{179}
}

func (x *BuildAgentDiagnosticsReq) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

func (x *BuildAgentDiagnosticsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *BuildAgentDiagnosticsReq) GetAgentGroupSid() int64 {
	if x != nil {
		return x.AgentGroupSid
	}
	return 0
}

// Response message for the BuildAgentDiagnostics RPC
type BuildAgentDiagnosticsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Diagnostics built for the given req.
	// Will only contain one element if build for a single @wfm_agent_sid.
	// Will contain one element for each WFM agent if build for an @agent_group_sid.a
	Diagnostics []*Diagnostics `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *BuildAgentDiagnosticsRes) Reset() {
	*x = BuildAgentDiagnosticsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildAgentDiagnosticsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildAgentDiagnosticsRes) ProtoMessage() {}

func (x *BuildAgentDiagnosticsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildAgentDiagnosticsRes.ProtoReflect.Descriptor instead.
func (*BuildAgentDiagnosticsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{180}
}

func (x *BuildAgentDiagnosticsRes) GetDiagnostics() []*Diagnostics {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the CreateWFMAgentMemberships RPC
type CreateWFMAgentMembershipsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agents to create the association of.
	WfmAgentSids []int64 `protobuf:"varint,1,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
	// ID of the agent group to that the agents associate with.
	AgentGroupSid int64 `protobuf:"varint,2,opt,name=agent_group_sid,json=agentGroupSid,proto3" json:"agent_group_sid,omitempty"`
	// ID of the schedule scenario that the sids belong to.
	ScheduleScenarioSid int64 `protobuf:"varint,3,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *CreateWFMAgentMembershipsReq) Reset() {
	*x = CreateWFMAgentMembershipsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWFMAgentMembershipsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWFMAgentMembershipsReq) ProtoMessage() {}

func (x *CreateWFMAgentMembershipsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWFMAgentMembershipsReq.ProtoReflect.Descriptor instead.
func (*CreateWFMAgentMembershipsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{181}
}

func (x *CreateWFMAgentMembershipsReq) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

func (x *CreateWFMAgentMembershipsReq) GetAgentGroupSid() int64 {
	if x != nil {
		return x.AgentGroupSid
	}
	return 0
}

func (x *CreateWFMAgentMembershipsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for CreateWFMAgentMemberships RPC
type CreateWFMAgentMembershipsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateWFMAgentMembershipsRes) Reset() {
	*x = CreateWFMAgentMembershipsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWFMAgentMembershipsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWFMAgentMembershipsRes) ProtoMessage() {}

func (x *CreateWFMAgentMembershipsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWFMAgentMembershipsRes.ProtoReflect.Descriptor instead.
func (*CreateWFMAgentMembershipsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{182}
}

// Request message for the CopyWFMAgentMemberships RPC
type CopyWFMAgentMembershipsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agent to copy the associations from.
	OriginatingWfmAgentSid int64 `protobuf:"varint,1,opt,name=originating_wfm_agent_sid,json=originatingWfmAgentSid,proto3" json:"originating_wfm_agent_sid,omitempty"`
	// ID of the wfm agent to copy the associations to.
	TargetWfmAgentSid int64 `protobuf:"varint,2,opt,name=target_wfm_agent_sid,json=targetWfmAgentSid,proto3" json:"target_wfm_agent_sid,omitempty"`
}

func (x *CopyWFMAgentMembershipsRequest) Reset() {
	*x = CopyWFMAgentMembershipsRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyWFMAgentMembershipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyWFMAgentMembershipsRequest) ProtoMessage() {}

func (x *CopyWFMAgentMembershipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyWFMAgentMembershipsRequest.ProtoReflect.Descriptor instead.
func (*CopyWFMAgentMembershipsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{183}
}

func (x *CopyWFMAgentMembershipsRequest) GetOriginatingWfmAgentSid() int64 {
	if x != nil {
		return x.OriginatingWfmAgentSid
	}
	return 0
}

func (x *CopyWFMAgentMembershipsRequest) GetTargetWfmAgentSid() int64 {
	if x != nil {
		return x.TargetWfmAgentSid
	}
	return 0
}

// Response message for CopyWFMAgentMemberships RPC
type CopyWFMAgentMembershipsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CopyWFMAgentMembershipsResponse) Reset() {
	*x = CopyWFMAgentMembershipsResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyWFMAgentMembershipsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyWFMAgentMembershipsResponse) ProtoMessage() {}

func (x *CopyWFMAgentMembershipsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyWFMAgentMembershipsResponse.ProtoReflect.Descriptor instead.
func (*CopyWFMAgentMembershipsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{184}
}

// Request message for the DeleteWFMAgentMemberships RPC
type DeleteWFMAgentMembershipsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agents to delete the association of.
	WfmAgentSids []int64 `protobuf:"varint,1,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
	// ID of the agent group to that the agents associate with.
	AgentGroupSid int64 `protobuf:"varint,2,opt,name=agent_group_sid,json=agentGroupSid,proto3" json:"agent_group_sid,omitempty"`
}

func (x *DeleteWFMAgentMembershipsReq) Reset() {
	*x = DeleteWFMAgentMembershipsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWFMAgentMembershipsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWFMAgentMembershipsReq) ProtoMessage() {}

func (x *DeleteWFMAgentMembershipsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWFMAgentMembershipsReq.ProtoReflect.Descriptor instead.
func (*DeleteWFMAgentMembershipsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{185}
}

func (x *DeleteWFMAgentMembershipsReq) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

func (x *DeleteWFMAgentMembershipsReq) GetAgentGroupSid() int64 {
	if x != nil {
		return x.AgentGroupSid
	}
	return 0
}

// Response message for DeleteWFMAgentMemberships RPC
type DeleteWFMAgentMembershipsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteWFMAgentMembershipsRes) Reset() {
	*x = DeleteWFMAgentMembershipsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWFMAgentMembershipsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWFMAgentMembershipsRes) ProtoMessage() {}

func (x *DeleteWFMAgentMembershipsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWFMAgentMembershipsRes.ProtoReflect.Descriptor instead.
func (*DeleteWFMAgentMembershipsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{186}
}

// Request message for the DeleteWFMAgentsMemberships RPC
type DeleteWFMAgentsMembershipsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agents to delete the association of.
	WfmAgentSids []int64 `protobuf:"varint,1,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
	// ID of the agent groups that the agents associate with.
	AgentGroupSids []int64 `protobuf:"varint,2,rep,packed,name=agent_group_sids,json=agentGroupSids,proto3" json:"agent_group_sids,omitempty"`
}

func (x *DeleteWFMAgentsMembershipsReq) Reset() {
	*x = DeleteWFMAgentsMembershipsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWFMAgentsMembershipsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWFMAgentsMembershipsReq) ProtoMessage() {}

func (x *DeleteWFMAgentsMembershipsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWFMAgentsMembershipsReq.ProtoReflect.Descriptor instead.
func (*DeleteWFMAgentsMembershipsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{187}
}

func (x *DeleteWFMAgentsMembershipsReq) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

func (x *DeleteWFMAgentsMembershipsReq) GetAgentGroupSids() []int64 {
	if x != nil {
		return x.AgentGroupSids
	}
	return nil
}

// Response message for DeleteWFMAgentsMemberships RPC
type DeleteWFMAgentsMembershipsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteWFMAgentsMembershipsRes) Reset() {
	*x = DeleteWFMAgentsMembershipsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWFMAgentsMembershipsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWFMAgentsMembershipsRes) ProtoMessage() {}

func (x *DeleteWFMAgentsMembershipsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWFMAgentsMembershipsRes.ProtoReflect.Descriptor instead.
func (*DeleteWFMAgentsMembershipsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{188}
}

// Request message for the RemoveAgentFromFutureShifts RPC
type RemoveAgentFromFutureShiftsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agent sid to remove from the future schedules.
	WfmAgentSidToRemove int64 `protobuf:"varint,1,opt,name=wfm_agent_sid_to_remove,json=wfmAgentSidToRemove,proto3" json:"wfm_agent_sid_to_remove,omitempty"`
	// If set to true, a new unassigned agent will be created and it will be assigned to the shifts and agent groups from @wfm_agent_sid_to_remove.
	// If set to false, the shifts will just be deleted.
	ReplaceWithNewUnassignedAgent bool `protobuf:"varint,2,opt,name=replace_with_new_unassigned_agent,json=replaceWithNewUnassignedAgent,proto3" json:"replace_with_new_unassigned_agent,omitempty"`
}

func (x *RemoveAgentFromFutureShiftsRequest) Reset() {
	*x = RemoveAgentFromFutureShiftsRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveAgentFromFutureShiftsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAgentFromFutureShiftsRequest) ProtoMessage() {}

func (x *RemoveAgentFromFutureShiftsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAgentFromFutureShiftsRequest.ProtoReflect.Descriptor instead.
func (*RemoveAgentFromFutureShiftsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{189}
}

func (x *RemoveAgentFromFutureShiftsRequest) GetWfmAgentSidToRemove() int64 {
	if x != nil {
		return x.WfmAgentSidToRemove
	}
	return 0
}

func (x *RemoveAgentFromFutureShiftsRequest) GetReplaceWithNewUnassignedAgent() bool {
	if x != nil {
		return x.ReplaceWithNewUnassignedAgent
	}
	return false
}

// Response message for the RemoveAgentFromFutureShifts RPC
type RemoveAgentFromFutureShiftsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the new unassigned agent if @replace_with_new_unassigned_agent was set to true.
	UnassignedAgentSid *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=unassigned_agent_sid,json=unassignedAgentSid,proto3" json:"unassigned_agent_sid,omitempty"`
}

func (x *RemoveAgentFromFutureShiftsResponse) Reset() {
	*x = RemoveAgentFromFutureShiftsResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveAgentFromFutureShiftsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAgentFromFutureShiftsResponse) ProtoMessage() {}

func (x *RemoveAgentFromFutureShiftsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAgentFromFutureShiftsResponse.ProtoReflect.Descriptor instead.
func (*RemoveAgentFromFutureShiftsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{190}
}

func (x *RemoveAgentFromFutureShiftsResponse) GetUnassignedAgentSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.UnassignedAgentSid
	}
	return nil
}

// DOW Placement
type DOWPlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minute in the day for the placement to start.
	StartMinute int32 `protobuf:"varint,1,opt,name=start_minute,json=startMinute,proto3" json:"start_minute,omitempty"`
	// Minute in the day for the placement to end.
	EndMinute int32 `protobuf:"varint,2,opt,name=end_minute,json=endMinute,proto3" json:"end_minute,omitempty"`
	// The type of placement.
	PlacementType commons.DOWPlacementType `protobuf:"varint,3,opt,name=placement_type,json=placementType,proto3,enum=api.commons.DOWPlacementType" json:"placement_type,omitempty"`
	// The day of the week that the placement belongs to.
	// Each week always starts on Sunday.
	DayOfWeek commons.DayOfWeek `protobuf:"varint,4,opt,name=day_of_week,json=dayOfWeek,proto3,enum=api.commons.DayOfWeek" json:"day_of_week,omitempty"`
	// The week number, specifying which week of the template the placement belongs to.
	// The first week should be set to 0.
	WeekNumber int32 `protobuf:"varint,5,opt,name=week_number,json=weekNumber,proto3" json:"week_number,omitempty"`
}

func (x *DOWPlacement) Reset() {
	*x = DOWPlacement{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DOWPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DOWPlacement) ProtoMessage() {}

func (x *DOWPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DOWPlacement.ProtoReflect.Descriptor instead.
func (*DOWPlacement) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{191}
}

func (x *DOWPlacement) GetStartMinute() int32 {
	if x != nil {
		return x.StartMinute
	}
	return 0
}

func (x *DOWPlacement) GetEndMinute() int32 {
	if x != nil {
		return x.EndMinute
	}
	return 0
}

func (x *DOWPlacement) GetPlacementType() commons.DOWPlacementType {
	if x != nil {
		return x.PlacementType
	}
	return commons.DOWPlacementType(0)
}

func (x *DOWPlacement) GetDayOfWeek() commons.DayOfWeek {
	if x != nil {
		return x.DayOfWeek
	}
	return commons.DayOfWeek(0)
}

func (x *DOWPlacement) GetWeekNumber() int32 {
	if x != nil {
		return x.WeekNumber
	}
	return 0
}

// Shift Template
type ShiftTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this shift template.
	ShiftTemplateSid int64 `protobuf:"varint,1,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
	// Parent node id -- parent will only be a program nodes
	ProgramNodeSid int64 `protobuf:"varint,2,opt,name=program_node_sid,json=programNodeSid,proto3" json:"program_node_sid,omitempty"`
	// Template name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Template description
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Datetime that the template was set to inactive, if not set then the template is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// Type of Shift Template (true=tour shift, false=dynamic shift)
	IsTourshift bool `protobuf:"varint,6,opt,name=is_tourshift,json=isTourshift,proto3" json:"is_tourshift,omitempty"`
	// Min shift width (minutes)
	MinShiftWidth int32 `protobuf:"varint,7,opt,name=min_shift_width,json=minShiftWidth,proto3" json:"min_shift_width,omitempty"`
	// Max shift width (minutes)
	MaxShiftWidth int32 `protobuf:"varint,8,opt,name=max_shift_width,json=maxShiftWidth,proto3" json:"max_shift_width,omitempty"`
	// Min number of agent shifts for shift template
	MinAgents int32 `protobuf:"varint,9,opt,name=min_agents,json=minAgents,proto3" json:"min_agents,omitempty"`
	// Max number of agent shifts for shift template
	MaxAgents int32 `protobuf:"varint,10,opt,name=max_agents,json=maxAgents,proto3" json:"max_agents,omitempty"`
	// Intervals upon which shifts may start (minutes)
	ShiftStartBoundaryMinutes int32 `protobuf:"varint,11,opt,name=shift_start_boundary_minutes,json=shiftStartBoundaryMinutes,proto3" json:"shift_start_boundary_minutes,omitempty"`
	// Whether or not shifts in this shift template must start at the same time each day of the week
	SameTimeEach_DOW bool `protobuf:"varint,12,opt,name=same_time_each_DOW,json=sameTimeEachDOW,proto3" json:"same_time_each_DOW,omitempty"`
	// Whether or not all of an Agent's shifts in this shift template will be the same length
	SameLengthPerAgent bool `protobuf:"varint,13,opt,name=same_length_per_agent,json=sameLengthPerAgent,proto3" json:"same_length_per_agent,omitempty"`
	// ID of the schedule scenario that the shift template belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,14,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// The placement rules associated with @shift_template_sid.
	MemberPlacementRules []*PlacementRule `protobuf:"bytes,15,rep,name=member_placement_rules,json=memberPlacementRules,proto3" json:"member_placement_rules,omitempty"`
	// The DOW_placements set the placement days for the shift template.
	// The length of the list must be divisible by seven to represent days of the week.
	// May include more sets of seven days to represent another sequential week (ie, 21 placements for 3 weeks).
	// The DOWPlacements represents sequential days of the week, always starting on Sunday.
	DOWPlacements []*DOWPlacement `protobuf:"bytes,16,rep,name=DOW_placements,json=DOWPlacements,proto3" json:"DOW_placements,omitempty"`
	// agent groups that are children of call center node
	MemberAgentGroups []*AgentGroup `protobuf:"bytes,17,rep,name=member_agent_groups,json=memberAgentGroups,proto3" json:"member_agent_groups,omitempty"`
}

func (x *ShiftTemplate) Reset() {
	*x = ShiftTemplate{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShiftTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftTemplate) ProtoMessage() {}

func (x *ShiftTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftTemplate.ProtoReflect.Descriptor instead.
func (*ShiftTemplate) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{192}
}

func (x *ShiftTemplate) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

func (x *ShiftTemplate) GetProgramNodeSid() int64 {
	if x != nil {
		return x.ProgramNodeSid
	}
	return 0
}

func (x *ShiftTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShiftTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ShiftTemplate) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *ShiftTemplate) GetIsTourshift() bool {
	if x != nil {
		return x.IsTourshift
	}
	return false
}

func (x *ShiftTemplate) GetMinShiftWidth() int32 {
	if x != nil {
		return x.MinShiftWidth
	}
	return 0
}

func (x *ShiftTemplate) GetMaxShiftWidth() int32 {
	if x != nil {
		return x.MaxShiftWidth
	}
	return 0
}

func (x *ShiftTemplate) GetMinAgents() int32 {
	if x != nil {
		return x.MinAgents
	}
	return 0
}

func (x *ShiftTemplate) GetMaxAgents() int32 {
	if x != nil {
		return x.MaxAgents
	}
	return 0
}

func (x *ShiftTemplate) GetShiftStartBoundaryMinutes() int32 {
	if x != nil {
		return x.ShiftStartBoundaryMinutes
	}
	return 0
}

func (x *ShiftTemplate) GetSameTimeEach_DOW() bool {
	if x != nil {
		return x.SameTimeEach_DOW
	}
	return false
}

func (x *ShiftTemplate) GetSameLengthPerAgent() bool {
	if x != nil {
		return x.SameLengthPerAgent
	}
	return false
}

func (x *ShiftTemplate) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *ShiftTemplate) GetMemberPlacementRules() []*PlacementRule {
	if x != nil {
		return x.MemberPlacementRules
	}
	return nil
}

func (x *ShiftTemplate) GetDOWPlacements() []*DOWPlacement {
	if x != nil {
		return x.DOWPlacements
	}
	return nil
}

func (x *ShiftTemplate) GetMemberAgentGroups() []*AgentGroup {
	if x != nil {
		return x.MemberAgentGroups
	}
	return nil
}

// Request message for the CreateShiftTemplate RPC
type CreateShiftTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shift template to create, the @shift_template_sid doesn't need to be set since it won't be used
	ShiftTemplate *ShiftTemplate `protobuf:"bytes,1,opt,name=shift_template,json=shiftTemplate,proto3" json:"shift_template,omitempty"`
}

func (x *CreateShiftTemplateReq) Reset() {
	*x = CreateShiftTemplateReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShiftTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftTemplateReq) ProtoMessage() {}

func (x *CreateShiftTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateShiftTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{193}
}

func (x *CreateShiftTemplateReq) GetShiftTemplate() *ShiftTemplate {
	if x != nil {
		return x.ShiftTemplate
	}
	return nil
}

// Response message for the CreateShiftTemplate RPC
type CreateShiftTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created shift template
	ShiftTemplateSid int64 `protobuf:"varint,1,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
}

func (x *CreateShiftTemplateRes) Reset() {
	*x = CreateShiftTemplateRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShiftTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftTemplateRes) ProtoMessage() {}

func (x *CreateShiftTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftTemplateRes.ProtoReflect.Descriptor instead.
func (*CreateShiftTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{194}
}

func (x *CreateShiftTemplateRes) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

// Request message for the UpdateShiftTemplate RPC
type UpdateShiftTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shift template to update
	ShiftTemplate *ShiftTemplate `protobuf:"bytes,1,opt,name=shift_template,json=shiftTemplate,proto3" json:"shift_template,omitempty"`
}

func (x *UpdateShiftTemplateReq) Reset() {
	*x = UpdateShiftTemplateReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShiftTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShiftTemplateReq) ProtoMessage() {}

func (x *UpdateShiftTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShiftTemplateReq.ProtoReflect.Descriptor instead.
func (*UpdateShiftTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{195}
}

func (x *UpdateShiftTemplateReq) GetShiftTemplate() *ShiftTemplate {
	if x != nil {
		return x.ShiftTemplate
	}
	return nil
}

// Response message for the UpdateShiftTemplate RPC
type UpdateShiftTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateShiftTemplateRes) Reset() {
	*x = UpdateShiftTemplateRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShiftTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShiftTemplateRes) ProtoMessage() {}

func (x *UpdateShiftTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShiftTemplateRes.ProtoReflect.Descriptor instead.
func (*UpdateShiftTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{196}
}

// Request message for the ListShiftTemplatesBySids RPC
type ListShiftTemplatesBySidsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the shift templates to list.
	ShiftTemplateSids []int64 `protobuf:"varint,1,rep,packed,name=shift_template_sids,json=shiftTemplateSids,proto3" json:"shift_template_sids,omitempty"`
	// Indicates whether the @shift_templates in the response should include member placement rules.
	IncludePlacementRules bool `protobuf:"varint,2,opt,name=include_placement_rules,json=includePlacementRules,proto3" json:"include_placement_rules,omitempty"`
}

func (x *ListShiftTemplatesBySidsReq) Reset() {
	*x = ListShiftTemplatesBySidsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShiftTemplatesBySidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftTemplatesBySidsReq) ProtoMessage() {}

func (x *ListShiftTemplatesBySidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftTemplatesBySidsReq.ProtoReflect.Descriptor instead.
func (*ListShiftTemplatesBySidsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197}
}

func (x *ListShiftTemplatesBySidsReq) GetShiftTemplateSids() []int64 {
	if x != nil {
		return x.ShiftTemplateSids
	}
	return nil
}

func (x *ListShiftTemplatesBySidsReq) GetIncludePlacementRules() bool {
	if x != nil {
		return x.IncludePlacementRules
	}
	return false
}

// Response message for the ListShiftTemplatesBySids RPC
type ListShiftTemplatesBySidsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested shift templates.
	ShiftTemplates []*ShiftTemplate `protobuf:"bytes,1,rep,name=shift_templates,json=shiftTemplates,proto3" json:"shift_templates,omitempty"`
}

func (x *ListShiftTemplatesBySidsRes) Reset() {
	*x = ListShiftTemplatesBySidsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShiftTemplatesBySidsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftTemplatesBySidsRes) ProtoMessage() {}

func (x *ListShiftTemplatesBySidsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftTemplatesBySidsRes.ProtoReflect.Descriptor instead.
func (*ListShiftTemplatesBySidsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{198}
}

func (x *ListShiftTemplatesBySidsRes) GetShiftTemplates() []*ShiftTemplate {
	if x != nil {
		return x.ShiftTemplates
	}
	return nil
}

// Request message for BuildShiftTemplateDiagnostics RPC
type BuildShiftTemplateDiagnosticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the shift template to build diagnostics for.
	ShiftTemplateSid int64 `protobuf:"varint,1,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
	// ID of the schedule scenario that the shift template belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *BuildShiftTemplateDiagnosticsReq) Reset() {
	*x = BuildShiftTemplateDiagnosticsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildShiftTemplateDiagnosticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildShiftTemplateDiagnosticsReq) ProtoMessage() {}

func (x *BuildShiftTemplateDiagnosticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildShiftTemplateDiagnosticsReq.ProtoReflect.Descriptor instead.
func (*BuildShiftTemplateDiagnosticsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{199}
}

func (x *BuildShiftTemplateDiagnosticsReq) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

func (x *BuildShiftTemplateDiagnosticsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for BuildShiftTemplateDiagnostics RPC
type BuildShiftTemplateDiagnosticsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Diagnostic reports for the shift template associated with @shift_template_sid.
	Diagnostics []*Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *BuildShiftTemplateDiagnosticsRes) Reset() {
	*x = BuildShiftTemplateDiagnosticsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildShiftTemplateDiagnosticsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildShiftTemplateDiagnosticsRes) ProtoMessage() {}

func (x *BuildShiftTemplateDiagnosticsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildShiftTemplateDiagnosticsRes.ProtoReflect.Descriptor instead.
func (*BuildShiftTemplateDiagnosticsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{200}
}

func (x *BuildShiftTemplateDiagnosticsRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Represents rules that describe how shifts are placed in a schedule
type PlacementRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this placement rule
	PlacementRuleSid int64 `protobuf:"varint,1,opt,name=placement_rule_sid,json=placementRuleSid,proto3" json:"placement_rule_sid,omitempty"`
	// ID of the parent shift this rule is associated with
	ShiftTemplateSid int64 `protobuf:"varint,2,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
	// Ordinal that indicates order of rule within ShiftTemplate (1 = first, 2 = second, etc.)
	ActivityOrder int32 `protobuf:"varint,3,opt,name=activity_order,json=activityOrder,proto3" json:"activity_order,omitempty"`
	// Minimum activity length in minutes
	MinDurationMinutes int32 `protobuf:"varint,4,opt,name=min_duration_minutes,json=minDurationMinutes,proto3" json:"min_duration_minutes,omitempty"`
	// Maximum activity length in minutes
	MaxDurationMinutes int32 `protobuf:"varint,5,opt,name=max_duration_minutes,json=maxDurationMinutes,proto3" json:"max_duration_minutes,omitempty"`
	// ID of the scheduling activity this rule is associated with
	SchedulingActivitySid int64 `protobuf:"varint,6,opt,name=scheduling_activity_sid,json=schedulingActivitySid,proto3" json:"scheduling_activity_sid,omitempty"`
	// ID of the schedule scenario that the placement rule belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,7,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// The scheduling activity associated with the @scheduling_activity_sid
	MemberSchedulingActivity *SchedulingActivity `protobuf:"bytes,8,opt,name=member_scheduling_activity,json=memberSchedulingActivity,proto3" json:"member_scheduling_activity,omitempty"`
}

func (x *PlacementRule) Reset() {
	*x = PlacementRule{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlacementRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementRule) ProtoMessage() {}

func (x *PlacementRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementRule.ProtoReflect.Descriptor instead.
func (*PlacementRule) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{201}
}

func (x *PlacementRule) GetPlacementRuleSid() int64 {
	if x != nil {
		return x.PlacementRuleSid
	}
	return 0
}

func (x *PlacementRule) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

func (x *PlacementRule) GetActivityOrder() int32 {
	if x != nil {
		return x.ActivityOrder
	}
	return 0
}

func (x *PlacementRule) GetMinDurationMinutes() int32 {
	if x != nil {
		return x.MinDurationMinutes
	}
	return 0
}

func (x *PlacementRule) GetMaxDurationMinutes() int32 {
	if x != nil {
		return x.MaxDurationMinutes
	}
	return 0
}

func (x *PlacementRule) GetSchedulingActivitySid() int64 {
	if x != nil {
		return x.SchedulingActivitySid
	}
	return 0
}

func (x *PlacementRule) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *PlacementRule) GetMemberSchedulingActivity() *SchedulingActivity {
	if x != nil {
		return x.MemberSchedulingActivity
	}
	return nil
}

// Request message for the CreatePlacementRule RPC
type CreatePlacementRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Placement rule to create, the @placement_rule_sid doesn't need to be set since it won't be used
	PlacementRule *PlacementRule `protobuf:"bytes,1,opt,name=placement_rule,json=placementRule,proto3" json:"placement_rule,omitempty"`
}

func (x *CreatePlacementRuleReq) Reset() {
	*x = CreatePlacementRuleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlacementRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlacementRuleReq) ProtoMessage() {}

func (x *CreatePlacementRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlacementRuleReq.ProtoReflect.Descriptor instead.
func (*CreatePlacementRuleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{202}
}

func (x *CreatePlacementRuleReq) GetPlacementRule() *PlacementRule {
	if x != nil {
		return x.PlacementRule
	}
	return nil
}

// Response message for the CreatePlacementRule RPC
type CreatePlacementRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created placement rule
	PlacementRuleSid int64 `protobuf:"varint,1,opt,name=placement_rule_sid,json=placementRuleSid,proto3" json:"placement_rule_sid,omitempty"`
}

func (x *CreatePlacementRuleRes) Reset() {
	*x = CreatePlacementRuleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlacementRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlacementRuleRes) ProtoMessage() {}

func (x *CreatePlacementRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlacementRuleRes.ProtoReflect.Descriptor instead.
func (*CreatePlacementRuleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{203}
}

func (x *CreatePlacementRuleRes) GetPlacementRuleSid() int64 {
	if x != nil {
		return x.PlacementRuleSid
	}
	return 0
}

// Request message for the UpdatePlacementRule RPC
type UpdatePlacementRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Placement rule to update.
	PlacementRule *PlacementRule `protobuf:"bytes,1,opt,name=placement_rule,json=placementRule,proto3" json:"placement_rule,omitempty"`
}

func (x *UpdatePlacementRuleReq) Reset() {
	*x = UpdatePlacementRuleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePlacementRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlacementRuleReq) ProtoMessage() {}

func (x *UpdatePlacementRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlacementRuleReq.ProtoReflect.Descriptor instead.
func (*UpdatePlacementRuleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{204}
}

func (x *UpdatePlacementRuleReq) GetPlacementRule() *PlacementRule {
	if x != nil {
		return x.PlacementRule
	}
	return nil
}

// Response message for the UpdatePlacementRule RPC
type UpdatePlacementRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePlacementRuleRes) Reset() {
	*x = UpdatePlacementRuleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePlacementRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlacementRuleRes) ProtoMessage() {}

func (x *UpdatePlacementRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlacementRuleRes.ProtoReflect.Descriptor instead.
func (*UpdatePlacementRuleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{205}
}

// Request message for the DeletePlacementRule RPC
type DeletePlacementRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the placement rule to delete.
	PlacementRuleSid int64 `protobuf:"varint,1,opt,name=placement_rule_sid,json=placementRuleSid,proto3" json:"placement_rule_sid,omitempty"`
}

func (x *DeletePlacementRuleReq) Reset() {
	*x = DeletePlacementRuleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePlacementRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlacementRuleReq) ProtoMessage() {}

func (x *DeletePlacementRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlacementRuleReq.ProtoReflect.Descriptor instead.
func (*DeletePlacementRuleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{206}
}

func (x *DeletePlacementRuleReq) GetPlacementRuleSid() int64 {
	if x != nil {
		return x.PlacementRuleSid
	}
	return 0
}

// Response message for the DeletePlacementRule RPC
type DeletePlacementRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePlacementRuleRes) Reset() {
	*x = DeletePlacementRuleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePlacementRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlacementRuleRes) ProtoMessage() {}

func (x *DeletePlacementRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlacementRuleRes.ProtoReflect.Descriptor instead.
func (*DeletePlacementRuleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{207}
}

// Represents a datetime pattern that can be used for open times or agent availability
type DatetimePattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All week maps that the pattern has.
	WeekMaps []*DatetimePattern_WeekMap `protobuf:"bytes,1,rep,name=week_maps,json=weekMaps,proto3" json:"week_maps,omitempty"`
	// All calendar items that the pattern has.
	CalendarItems []*DatetimePattern_CalendarItem `protobuf:"bytes,2,rep,name=calendar_items,json=calendarItems,proto3" json:"calendar_items,omitempty"`
}

func (x *DatetimePattern) Reset() {
	*x = DatetimePattern{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatetimePattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimePattern) ProtoMessage() {}

func (x *DatetimePattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimePattern.ProtoReflect.Descriptor instead.
func (*DatetimePattern) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{208}
}

func (x *DatetimePattern) GetWeekMaps() []*DatetimePattern_WeekMap {
	if x != nil {
		return x.WeekMaps
	}
	return nil
}

func (x *DatetimePattern) GetCalendarItems() []*DatetimePattern_CalendarItem {
	if x != nil {
		return x.CalendarItems
	}
	return nil
}

// Represents an open times pattern
type OpenTimesPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this pattern.
	OpenTimesPatternSid int64 `protobuf:"varint,1,opt,name=open_times_pattern_sid,json=openTimesPatternSid,proto3" json:"open_times_pattern_sid,omitempty"`
	// Parent entity of the pattern.
	ParentEntity *ParentEntity `protobuf:"bytes,2,opt,name=parent_entity,json=parentEntity,proto3" json:"parent_entity,omitempty"`
	// Datetime pattern that represents this open times pattern.
	DatetimePattern *DatetimePattern `protobuf:"bytes,3,opt,name=datetime_pattern,json=datetimePattern,proto3" json:"datetime_pattern,omitempty"`
	// ID of the schedule scenario that the open times pattern belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,4,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// An optional value to relate the open times pattern to a specific type of scheduling activity, such as time off.
	// If left as nil, this will be treated as a standard open times pattern.
	SchedulingActivitySid *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=scheduling_activity_sid,json=schedulingActivitySid,proto3" json:"scheduling_activity_sid,omitempty"`
}

func (x *OpenTimesPattern) Reset() {
	*x = OpenTimesPattern{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenTimesPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenTimesPattern) ProtoMessage() {}

func (x *OpenTimesPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenTimesPattern.ProtoReflect.Descriptor instead.
func (*OpenTimesPattern) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{209}
}

func (x *OpenTimesPattern) GetOpenTimesPatternSid() int64 {
	if x != nil {
		return x.OpenTimesPatternSid
	}
	return 0
}

func (x *OpenTimesPattern) GetParentEntity() *ParentEntity {
	if x != nil {
		return x.ParentEntity
	}
	return nil
}

func (x *OpenTimesPattern) GetDatetimePattern() *DatetimePattern {
	if x != nil {
		return x.DatetimePattern
	}
	return nil
}

func (x *OpenTimesPattern) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *OpenTimesPattern) GetSchedulingActivitySid() *wrapperspb.Int64Value {
	if x != nil {
		return x.SchedulingActivitySid
	}
	return nil
}

// Request message for the CreateOpenTimesPattern RPC
type CreateOpenTimesPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Open times pattern to create, the @open_times_pattern_sid doesn't need to be set since it won't be used.
	OpenTimesPattern *OpenTimesPattern `protobuf:"bytes,1,opt,name=open_times_pattern,json=openTimesPattern,proto3" json:"open_times_pattern,omitempty"`
}

func (x *CreateOpenTimesPatternReq) Reset() {
	*x = CreateOpenTimesPatternReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOpenTimesPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpenTimesPatternReq) ProtoMessage() {}

func (x *CreateOpenTimesPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpenTimesPatternReq.ProtoReflect.Descriptor instead.
func (*CreateOpenTimesPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{210}
}

func (x *CreateOpenTimesPatternReq) GetOpenTimesPattern() *OpenTimesPattern {
	if x != nil {
		return x.OpenTimesPattern
	}
	return nil
}

// Response message for the CreateOpenTimesPattern RPC
type CreateOpenTimesPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created open times pattern.
	OpenTimesPatternSid int64 `protobuf:"varint,1,opt,name=open_times_pattern_sid,json=openTimesPatternSid,proto3" json:"open_times_pattern_sid,omitempty"`
}

func (x *CreateOpenTimesPatternRes) Reset() {
	*x = CreateOpenTimesPatternRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOpenTimesPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpenTimesPatternRes) ProtoMessage() {}

func (x *CreateOpenTimesPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpenTimesPatternRes.ProtoReflect.Descriptor instead.
func (*CreateOpenTimesPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{211}
}

func (x *CreateOpenTimesPatternRes) GetOpenTimesPatternSid() int64 {
	if x != nil {
		return x.OpenTimesPatternSid
	}
	return 0
}

// Request message for the UpdateOpenTimesPattern RPC
type UpdateOpenTimesPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Open times pattern to update.
	OpenTimesPattern *OpenTimesPattern `protobuf:"bytes,1,opt,name=open_times_pattern,json=openTimesPattern,proto3" json:"open_times_pattern,omitempty"`
}

func (x *UpdateOpenTimesPatternReq) Reset() {
	*x = UpdateOpenTimesPatternReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOpenTimesPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOpenTimesPatternReq) ProtoMessage() {}

func (x *UpdateOpenTimesPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOpenTimesPatternReq.ProtoReflect.Descriptor instead.
func (*UpdateOpenTimesPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{212}
}

func (x *UpdateOpenTimesPatternReq) GetOpenTimesPattern() *OpenTimesPattern {
	if x != nil {
		return x.OpenTimesPattern
	}
	return nil
}

// Response message for the UpdateOpenTimesPattern RPC
type UpdateOpenTimesPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOpenTimesPatternRes) Reset() {
	*x = UpdateOpenTimesPatternRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOpenTimesPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOpenTimesPatternRes) ProtoMessage() {}

func (x *UpdateOpenTimesPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOpenTimesPatternRes.ProtoReflect.Descriptor instead.
func (*UpdateOpenTimesPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{213}
}

// Request message for the DeleteOpenTimesPattern RPC
type DeleteOpenTimesPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the open times pattern to delete.
	OpenTimesPatternSid int64 `protobuf:"varint,1,opt,name=open_times_pattern_sid,json=openTimesPatternSid,proto3" json:"open_times_pattern_sid,omitempty"`
}

func (x *DeleteOpenTimesPatternReq) Reset() {
	*x = DeleteOpenTimesPatternReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOpenTimesPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOpenTimesPatternReq) ProtoMessage() {}

func (x *DeleteOpenTimesPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOpenTimesPatternReq.ProtoReflect.Descriptor instead.
func (*DeleteOpenTimesPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{214}
}

func (x *DeleteOpenTimesPatternReq) GetOpenTimesPatternSid() int64 {
	if x != nil {
		return x.OpenTimesPatternSid
	}
	return 0
}

// Response message for the DeleteOpenTimesPattern RPC
type DeleteOpenTimesPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteOpenTimesPatternRes) Reset() {
	*x = DeleteOpenTimesPatternRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOpenTimesPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOpenTimesPatternRes) ProtoMessage() {}

func (x *DeleteOpenTimesPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOpenTimesPatternRes.ProtoReflect.Descriptor instead.
func (*DeleteOpenTimesPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{215}
}

// Request message for the GetOpenTimesBitmaps RPC
type GetOpenTimesBitmapsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node that @own_bitmap and @resulting_bitmap will be associated with.
	NodeToCheck *ParentEntity `protobuf:"bytes,1,opt,name=node_to_check,json=nodeToCheck,proto3" json:"node_to_check,omitempty"`
	// ID of the schedule scenario that @node_to_check belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Whether or not to include inactive nodes. Will need to be set to true if @node_to_check or any of it's parents are inactive.
	IncludeInactive bool `protobuf:"varint,3,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	// Datetime range that bitmaps will cover when generated for @node_to_check.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,4,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Indicates the type of bitmaps to generate.
	BitmapType commons.BitmapType `protobuf:"varint,5,opt,name=bitmap_type,json=bitmapType,proto3,enum=api.commons.BitmapType" json:"bitmap_type,omitempty"`
}

func (x *GetOpenTimesBitmapsReq) Reset() {
	*x = GetOpenTimesBitmapsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOpenTimesBitmapsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenTimesBitmapsReq) ProtoMessage() {}

func (x *GetOpenTimesBitmapsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenTimesBitmapsReq.ProtoReflect.Descriptor instead.
func (*GetOpenTimesBitmapsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{216}
}

func (x *GetOpenTimesBitmapsReq) GetNodeToCheck() *ParentEntity {
	if x != nil {
		return x.NodeToCheck
	}
	return nil
}

func (x *GetOpenTimesBitmapsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *GetOpenTimesBitmapsReq) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *GetOpenTimesBitmapsReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *GetOpenTimesBitmapsReq) GetBitmapType() commons.BitmapType {
	if x != nil {
		return x.BitmapType
	}
	return commons.BitmapType(0)
}

// Response message for the GetOpenTimesBitmaps RPC
type GetOpenTimesBitmapsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of open times options inherited from parent nodes.
	InheritedBitmap []commons.OpenTimesOption `protobuf:"varint,1,rep,packed,name=inherited_bitmap,json=inheritedBitmap,proto3,enum=api.commons.OpenTimesOption" json:"inherited_bitmap,omitempty"`
	// Map of open times options belonging to the node being checked.
	OwnBitmap []commons.OpenTimesOption `protobuf:"varint,2,rep,packed,name=own_bitmap,json=ownBitmap,proto3,enum=api.commons.OpenTimesOption" json:"own_bitmap,omitempty"`
	// Map of open times options resulting from combining the inherited and own bitmap.
	ResultingBitmap []commons.OpenTimesOption `protobuf:"varint,3,rep,packed,name=resulting_bitmap,json=resultingBitmap,proto3,enum=api.commons.OpenTimesOption" json:"resulting_bitmap,omitempty"`
}

func (x *GetOpenTimesBitmapsRes) Reset() {
	*x = GetOpenTimesBitmapsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOpenTimesBitmapsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenTimesBitmapsRes) ProtoMessage() {}

func (x *GetOpenTimesBitmapsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenTimesBitmapsRes.ProtoReflect.Descriptor instead.
func (*GetOpenTimesBitmapsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{217}
}

func (x *GetOpenTimesBitmapsRes) GetInheritedBitmap() []commons.OpenTimesOption {
	if x != nil {
		return x.InheritedBitmap
	}
	return nil
}

func (x *GetOpenTimesBitmapsRes) GetOwnBitmap() []commons.OpenTimesOption {
	if x != nil {
		return x.OwnBitmap
	}
	return nil
}

func (x *GetOpenTimesBitmapsRes) GetResultingBitmap() []commons.OpenTimesOption {
	if x != nil {
		return x.ResultingBitmap
	}
	return nil
}

// Request message for the ListOpenDateRangesForNodeOpenTimesBitmaps RPC
type ListOpenDateRangesForNodeOpenTimesBitmapsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime range that the @open_close_ranges will cover for @node_selector.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// The node that @open_close_ranges will be associated with.
	NodeSelector *ParentEntity `protobuf:"bytes,2,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// ID of the scenario that @node_selector belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,3,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *ListOpenDateRangesForNodeOpenTimesBitmapsRequest) Reset() {
	*x = ListOpenDateRangesForNodeOpenTimesBitmapsRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOpenDateRangesForNodeOpenTimesBitmapsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpenDateRangesForNodeOpenTimesBitmapsRequest) ProtoMessage() {}

func (x *ListOpenDateRangesForNodeOpenTimesBitmapsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpenDateRangesForNodeOpenTimesBitmapsRequest.ProtoReflect.Descriptor instead.
func (*ListOpenDateRangesForNodeOpenTimesBitmapsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{218}
}

func (x *ListOpenDateRangesForNodeOpenTimesBitmapsRequest) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *ListOpenDateRangesForNodeOpenTimesBitmapsRequest) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *ListOpenDateRangesForNodeOpenTimesBitmapsRequest) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Request message for the ListOpenDateRangesForNodeOpenTimesBitmaps RPC
type ListOpenDateRangesForNodeOpenTimesBitmapsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime ranges over which the @node_selector is open throughout @datetime_range.
	OpenCloseRanges []*commons.DatetimeRange `protobuf:"bytes,1,rep,name=open_close_ranges,json=openCloseRanges,proto3" json:"open_close_ranges,omitempty"`
}

func (x *ListOpenDateRangesForNodeOpenTimesBitmapsResponse) Reset() {
	*x = ListOpenDateRangesForNodeOpenTimesBitmapsResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[219]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOpenDateRangesForNodeOpenTimesBitmapsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpenDateRangesForNodeOpenTimesBitmapsResponse) ProtoMessage() {}

func (x *ListOpenDateRangesForNodeOpenTimesBitmapsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[219]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpenDateRangesForNodeOpenTimesBitmapsResponse.ProtoReflect.Descriptor instead.
func (*ListOpenDateRangesForNodeOpenTimesBitmapsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{219}
}

func (x *ListOpenDateRangesForNodeOpenTimesBitmapsResponse) GetOpenCloseRanges() []*commons.DatetimeRange {
	if x != nil {
		return x.OpenCloseRanges
	}
	return nil
}

// Represents and Agent Availability Pattern
type AgentAvailabilityPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this pattern.
	AgentAvailabilityPatternSid int64 `protobuf:"varint,1,opt,name=agent_availability_pattern_sid,json=agentAvailabilityPatternSid,proto3" json:"agent_availability_pattern_sid,omitempty"`
	// Parent entity of this pattern.
	ParentEntity *ParentEntity `protobuf:"bytes,2,opt,name=parent_entity,json=parentEntity,proto3" json:"parent_entity,omitempty"`
	// Datetime pattern that represents this agent availability pattern.
	DatetimePattern *DatetimePattern `protobuf:"bytes,3,opt,name=datetime_pattern,json=datetimePattern,proto3" json:"datetime_pattern,omitempty"`
	// ID of the schedule scenario that this agent availability pattern belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,4,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// An optional value to relate the availability pattern to a specific type of scheduling activity, such as time off.
	// If left as nil, this will be treated as a standard agent availability pattern.
	SchedulingActivitySid *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=scheduling_activity_sid,json=schedulingActivitySid,proto3" json:"scheduling_activity_sid,omitempty"`
}

func (x *AgentAvailabilityPattern) Reset() {
	*x = AgentAvailabilityPattern{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[220]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentAvailabilityPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentAvailabilityPattern) ProtoMessage() {}

func (x *AgentAvailabilityPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[220]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentAvailabilityPattern.ProtoReflect.Descriptor instead.
func (*AgentAvailabilityPattern) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{220}
}

func (x *AgentAvailabilityPattern) GetAgentAvailabilityPatternSid() int64 {
	if x != nil {
		return x.AgentAvailabilityPatternSid
	}
	return 0
}

func (x *AgentAvailabilityPattern) GetParentEntity() *ParentEntity {
	if x != nil {
		return x.ParentEntity
	}
	return nil
}

func (x *AgentAvailabilityPattern) GetDatetimePattern() *DatetimePattern {
	if x != nil {
		return x.DatetimePattern
	}
	return nil
}

func (x *AgentAvailabilityPattern) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *AgentAvailabilityPattern) GetSchedulingActivitySid() *wrapperspb.Int64Value {
	if x != nil {
		return x.SchedulingActivitySid
	}
	return nil
}

// Request message for the AgentAvailabilityPattern RPC
type CreateAgentAvailabilityPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AgentAvailabilityPattern to be created, the @agent_availability_pattern_sid doesn't need to be set since it won't be used.
	AgentAvailabilityPattern *AgentAvailabilityPattern `protobuf:"bytes,1,opt,name=agent_availability_pattern,json=agentAvailabilityPattern,proto3" json:"agent_availability_pattern,omitempty"`
}

func (x *CreateAgentAvailabilityPatternReq) Reset() {
	*x = CreateAgentAvailabilityPatternReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[221]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAgentAvailabilityPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentAvailabilityPatternReq) ProtoMessage() {}

func (x *CreateAgentAvailabilityPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[221]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentAvailabilityPatternReq.ProtoReflect.Descriptor instead.
func (*CreateAgentAvailabilityPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{221}
}

func (x *CreateAgentAvailabilityPatternReq) GetAgentAvailabilityPattern() *AgentAvailabilityPattern {
	if x != nil {
		return x.AgentAvailabilityPattern
	}
	return nil
}

// Response message for the AgentAvailabilityPattern RPC
type CreateAgentAvailabilityPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly create agent availability pattern.
	AgentAvailabilityPatternSid int64 `protobuf:"varint,1,opt,name=agent_availability_pattern_sid,json=agentAvailabilityPatternSid,proto3" json:"agent_availability_pattern_sid,omitempty"`
}

func (x *CreateAgentAvailabilityPatternRes) Reset() {
	*x = CreateAgentAvailabilityPatternRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[222]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAgentAvailabilityPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentAvailabilityPatternRes) ProtoMessage() {}

func (x *CreateAgentAvailabilityPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[222]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentAvailabilityPatternRes.ProtoReflect.Descriptor instead.
func (*CreateAgentAvailabilityPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{222}
}

func (x *CreateAgentAvailabilityPatternRes) GetAgentAvailabilityPatternSid() int64 {
	if x != nil {
		return x.AgentAvailabilityPatternSid
	}
	return 0
}

// Request message for the UpdateAgentAvailabilityPattern RPC
type UpdateAgentAvailabilityPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent availability pattern to update.
	AgentAvailabilityPattern *AgentAvailabilityPattern `protobuf:"bytes,1,opt,name=agent_availability_pattern,json=agentAvailabilityPattern,proto3" json:"agent_availability_pattern,omitempty"`
}

func (x *UpdateAgentAvailabilityPatternReq) Reset() {
	*x = UpdateAgentAvailabilityPatternReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[223]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentAvailabilityPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentAvailabilityPatternReq) ProtoMessage() {}

func (x *UpdateAgentAvailabilityPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[223]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentAvailabilityPatternReq.ProtoReflect.Descriptor instead.
func (*UpdateAgentAvailabilityPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{223}
}

func (x *UpdateAgentAvailabilityPatternReq) GetAgentAvailabilityPattern() *AgentAvailabilityPattern {
	if x != nil {
		return x.AgentAvailabilityPattern
	}
	return nil
}

// Response message for the UpdateAgentAvailabilityPattern RPC
type UpdateAgentAvailabilityPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAgentAvailabilityPatternRes) Reset() {
	*x = UpdateAgentAvailabilityPatternRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[224]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentAvailabilityPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentAvailabilityPatternRes) ProtoMessage() {}

func (x *UpdateAgentAvailabilityPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[224]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentAvailabilityPatternRes.ProtoReflect.Descriptor instead.
func (*UpdateAgentAvailabilityPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{224}
}

// Request message for the DeleteAgentAvailabilityPattern RPC
type DeleteAgentAvailabilityPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the agent availability pattern to delete.
	AgentAvailabilityPatternSid int64 `protobuf:"varint,1,opt,name=agent_availability_pattern_sid,json=agentAvailabilityPatternSid,proto3" json:"agent_availability_pattern_sid,omitempty"`
}

func (x *DeleteAgentAvailabilityPatternReq) Reset() {
	*x = DeleteAgentAvailabilityPatternReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[225]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAgentAvailabilityPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentAvailabilityPatternReq) ProtoMessage() {}

func (x *DeleteAgentAvailabilityPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[225]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentAvailabilityPatternReq.ProtoReflect.Descriptor instead.
func (*DeleteAgentAvailabilityPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{225}
}

func (x *DeleteAgentAvailabilityPatternReq) GetAgentAvailabilityPatternSid() int64 {
	if x != nil {
		return x.AgentAvailabilityPatternSid
	}
	return 0
}

// Response message for the DeleteAgentAvailabilityPattern RPC
type DeleteAgentAvailabilityPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAgentAvailabilityPatternRes) Reset() {
	*x = DeleteAgentAvailabilityPatternRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[226]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAgentAvailabilityPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentAvailabilityPatternRes) ProtoMessage() {}

func (x *DeleteAgentAvailabilityPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[226]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentAvailabilityPatternRes.ProtoReflect.Descriptor instead.
func (*DeleteAgentAvailabilityPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{226}
}

// Contains a set of bitmaps for an entity.
type AvailabilityBitmapSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of availability options belonging to the node being checked.
	OwnBitmap []commons.AvailabilityOption `protobuf:"varint,1,rep,packed,name=own_bitmap,json=ownBitmap,proto3,enum=api.commons.AvailabilityOption" json:"own_bitmap,omitempty"`
	// Map of availability options inherited from parent nodes.
	InheritedBitmap []commons.AvailabilityOption `protobuf:"varint,2,rep,packed,name=inherited_bitmap,json=inheritedBitmap,proto3,enum=api.commons.AvailabilityOption" json:"inherited_bitmap,omitempty"`
	// Map of availability options resulting from combining the inherited and own bitmap.
	ResultingBitmap []commons.AvailabilityOption `protobuf:"varint,3,rep,packed,name=resulting_bitmap,json=resultingBitmap,proto3,enum=api.commons.AvailabilityOption" json:"resulting_bitmap,omitempty"`
	// Entity that the bitmaps belong to.
	ParentEntity *ParentEntity `protobuf:"bytes,4,opt,name=parent_entity,json=parentEntity,proto3" json:"parent_entity,omitempty"`
}

func (x *AvailabilityBitmapSet) Reset() {
	*x = AvailabilityBitmapSet{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[227]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvailabilityBitmapSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityBitmapSet) ProtoMessage() {}

func (x *AvailabilityBitmapSet) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[227]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityBitmapSet.ProtoReflect.Descriptor instead.
func (*AvailabilityBitmapSet) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{227}
}

func (x *AvailabilityBitmapSet) GetOwnBitmap() []commons.AvailabilityOption {
	if x != nil {
		return x.OwnBitmap
	}
	return nil
}

func (x *AvailabilityBitmapSet) GetInheritedBitmap() []commons.AvailabilityOption {
	if x != nil {
		return x.InheritedBitmap
	}
	return nil
}

func (x *AvailabilityBitmapSet) GetResultingBitmap() []commons.AvailabilityOption {
	if x != nil {
		return x.ResultingBitmap
	}
	return nil
}

func (x *AvailabilityBitmapSet) GetParentEntity() *ParentEntity {
	if x != nil {
		return x.ParentEntity
	}
	return nil
}

// Request message for the GetAvailabilityBitmaps RPC
type GetAvailabilityBitmapsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The entities that @bitmaps will be associated with.
	// Must be nodes, wfm agents, and agent groups only. For agent groups, bitmaps will be returned for each of the groups member agents,
	EntitiesToCheck []*ParentEntity `protobuf:"bytes,1,rep,name=entities_to_check,json=entitiesToCheck,proto3" json:"entities_to_check,omitempty"`
	// ID of the schedule scenario that @entities_to_check belong to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Whether or not to include inactive nodes. Will need to be set to true if @entities_to_check or any of it's parents are inactive.
	IncludeInactive bool `protobuf:"varint,3,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	// Datetime range that bitmaps will cover when generated for @entities_to_check.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,4,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Indicates the type of bitmaps to generate.
	BitmapType commons.BitmapType `protobuf:"varint,5,opt,name=bitmap_type,json=bitmapType,proto3,enum=api.commons.BitmapType" json:"bitmap_type,omitempty"`
}

func (x *GetAvailabilityBitmapsReq) Reset() {
	*x = GetAvailabilityBitmapsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[228]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailabilityBitmapsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailabilityBitmapsReq) ProtoMessage() {}

func (x *GetAvailabilityBitmapsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[228]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailabilityBitmapsReq.ProtoReflect.Descriptor instead.
func (*GetAvailabilityBitmapsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{228}
}

func (x *GetAvailabilityBitmapsReq) GetEntitiesToCheck() []*ParentEntity {
	if x != nil {
		return x.EntitiesToCheck
	}
	return nil
}

func (x *GetAvailabilityBitmapsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *GetAvailabilityBitmapsReq) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *GetAvailabilityBitmapsReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *GetAvailabilityBitmapsReq) GetBitmapType() commons.BitmapType {
	if x != nil {
		return x.BitmapType
	}
	return commons.BitmapType(0)
}

// Response message for the GetAvailabilityBitmaps RPC
type GetAvailabilityBitmapsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested bitmaps, with a pointer to the entity that the bitmaps belong.
	Bitmaps []*AvailabilityBitmapSet `protobuf:"bytes,1,rep,name=bitmaps,proto3" json:"bitmaps,omitempty"`
}

func (x *GetAvailabilityBitmapsRes) Reset() {
	*x = GetAvailabilityBitmapsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[229]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailabilityBitmapsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailabilityBitmapsRes) ProtoMessage() {}

func (x *GetAvailabilityBitmapsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[229]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailabilityBitmapsRes.ProtoReflect.Descriptor instead.
func (*GetAvailabilityBitmapsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{229}
}

func (x *GetAvailabilityBitmapsRes) GetBitmaps() []*AvailabilityBitmapSet {
	if x != nil {
		return x.Bitmaps
	}
	return nil
}

// Request message for the UpsertNonSkillActivityAssociation RPC
type UpsertNonSkillActivityAssociationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the non skill activity to upsert the association of.
	NonSkillActivitySid int64 `protobuf:"varint,1,opt,name=non_skill_activity_sid,json=nonSkillActivitySid,proto3" json:"non_skill_activity_sid,omitempty"`
	// Node that the non skill activity will be associated with.
	Node *ParentEntity `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	// Type of association that the non skill activity will have with the @node.
	AssociationType commons.ConfigRelationshipType `protobuf:"varint,3,opt,name=association_type,json=associationType,proto3,enum=api.commons.ConfigRelationshipType" json:"association_type,omitempty"`
	// ID of the schedule scenario that this non skill activity belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,4,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *UpsertNonSkillActivityAssociationReq) Reset() {
	*x = UpsertNonSkillActivityAssociationReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[230]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertNonSkillActivityAssociationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertNonSkillActivityAssociationReq) ProtoMessage() {}

func (x *UpsertNonSkillActivityAssociationReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[230]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertNonSkillActivityAssociationReq.ProtoReflect.Descriptor instead.
func (*UpsertNonSkillActivityAssociationReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{230}
}

func (x *UpsertNonSkillActivityAssociationReq) GetNonSkillActivitySid() int64 {
	if x != nil {
		return x.NonSkillActivitySid
	}
	return 0
}

func (x *UpsertNonSkillActivityAssociationReq) GetNode() *ParentEntity {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *UpsertNonSkillActivityAssociationReq) GetAssociationType() commons.ConfigRelationshipType {
	if x != nil {
		return x.AssociationType
	}
	return commons.ConfigRelationshipType(0)
}

func (x *UpsertNonSkillActivityAssociationReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the UpsertNonSkillActivityAssociation RPC
type UpsertNonSkillActivityAssociationRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether the upsert took effect if true, or that there are conflicting entities which would be affected, that must be updated/removed first if false.
	UpsertSucceeded bool `protobuf:"varint,1,opt,name=upsert_succeeded,json=upsertSucceeded,proto3" json:"upsert_succeeded,omitempty"`
	// Nodes that will effectively lose the non skill activity as a candidate, through inheritance.
	NodesAffected []*ParentEntity `protobuf:"bytes,2,rep,name=nodes_affected,json=nodesAffected,proto3" json:"nodes_affected,omitempty"`
	// Set of entities that are currently referencing the @non_skill_activity_sid.
	// The @right_entity will be the placement rule or constraint rule in conflict, and their parent entity will be the @left_entity
	RulesUsingActivity []*UpsertNonSkillActivityAssociationRes_EntityMapping `protobuf:"bytes,3,rep,name=rules_using_activity,json=rulesUsingActivity,proto3" json:"rules_using_activity,omitempty"`
}

func (x *UpsertNonSkillActivityAssociationRes) Reset() {
	*x = UpsertNonSkillActivityAssociationRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[231]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertNonSkillActivityAssociationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertNonSkillActivityAssociationRes) ProtoMessage() {}

func (x *UpsertNonSkillActivityAssociationRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[231]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertNonSkillActivityAssociationRes.ProtoReflect.Descriptor instead.
func (*UpsertNonSkillActivityAssociationRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{231}
}

func (x *UpsertNonSkillActivityAssociationRes) GetUpsertSucceeded() bool {
	if x != nil {
		return x.UpsertSucceeded
	}
	return false
}

func (x *UpsertNonSkillActivityAssociationRes) GetNodesAffected() []*ParentEntity {
	if x != nil {
		return x.NodesAffected
	}
	return nil
}

func (x *UpsertNonSkillActivityAssociationRes) GetRulesUsingActivity() []*UpsertNonSkillActivityAssociationRes_EntityMapping {
	if x != nil {
		return x.RulesUsingActivity
	}
	return nil
}

// Represents a skill proficiency
type SkillProficiency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill proficiency.
	SkillProficiencySid int64 `protobuf:"varint,1,opt,name=skill_proficiency_sid,json=skillProficiencySid,proto3" json:"skill_proficiency_sid,omitempty"`
	// ID of the skill that this proficiency belongs to.
	SkillSid int64 `protobuf:"varint,2,opt,name=skill_sid,json=skillSid,proto3" json:"skill_sid,omitempty"`
	// ID of the skill profile that contains the @skill_sid.
	// If not set to NULL, then the proficiency value of the @skill_sid for that skill profile should be used,
	// otherwise the @manual_proficiency_value is the preferred proficiency to use for the @skill_sid.
	PreferredSkillProfileSid *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=preferred_skill_profile_sid,json=preferredSkillProfileSid,proto3" json:"preferred_skill_profile_sid,omitempty"`
	// Manual proficiency value (from 1 to 100), it will be used when @preferred_skill_profile_sid is NULL.
	ManualProficiencyValue int32 `protobuf:"varint,4,opt,name=manual_proficiency_value,json=manualProficiencyValue,proto3" json:"manual_proficiency_value,omitempty"`
	// Parent entity of the proficiency.
	ParentEntity *ParentEntity `protobuf:"bytes,5,opt,name=parent_entity,json=parentEntity,proto3" json:"parent_entity,omitempty"`
	// The following fields are only used in the return of List requests of the entity.
	// Name of the skill with @skill_sid.
	SkillName string `protobuf:"bytes,7,opt,name=skill_name,json=skillName,proto3" json:"skill_name,omitempty"`
	// Name of the skill profile with @preferred_skill_profile_sid, will be blank if said field is NULL.
	SkillProfileName string `protobuf:"bytes,8,opt,name=skill_profile_name,json=skillProfileName,proto3" json:"skill_profile_name,omitempty"`
	// Proficiency value that @preferred_skill_profile_sid has for the given @skill_sid, it will be 0 if @preferred_skill_profile_sid is NULL.
	SkillProfileProficiencyValue int32 `protobuf:"varint,9,opt,name=skill_profile_proficiency_value,json=skillProfileProficiencyValue,proto3" json:"skill_profile_proficiency_value,omitempty"`
}

func (x *SkillProficiency) Reset() {
	*x = SkillProficiency{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[232]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkillProficiency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillProficiency) ProtoMessage() {}

func (x *SkillProficiency) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[232]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillProficiency.ProtoReflect.Descriptor instead.
func (*SkillProficiency) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{232}
}

func (x *SkillProficiency) GetSkillProficiencySid() int64 {
	if x != nil {
		return x.SkillProficiencySid
	}
	return 0
}

func (x *SkillProficiency) GetSkillSid() int64 {
	if x != nil {
		return x.SkillSid
	}
	return 0
}

func (x *SkillProficiency) GetPreferredSkillProfileSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.PreferredSkillProfileSid
	}
	return nil
}

func (x *SkillProficiency) GetManualProficiencyValue() int32 {
	if x != nil {
		return x.ManualProficiencyValue
	}
	return 0
}

func (x *SkillProficiency) GetParentEntity() *ParentEntity {
	if x != nil {
		return x.ParentEntity
	}
	return nil
}

func (x *SkillProficiency) GetSkillName() string {
	if x != nil {
		return x.SkillName
	}
	return ""
}

func (x *SkillProficiency) GetSkillProfileName() string {
	if x != nil {
		return x.SkillProfileName
	}
	return ""
}

func (x *SkillProficiency) GetSkillProfileProficiencyValue() int32 {
	if x != nil {
		return x.SkillProfileProficiencyValue
	}
	return 0
}

// Request message for the CreateSkillProficiencies RPC
type CreateSkillProficienciesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skill proficiencies to create, the @skill_proficiency_sid's don't need to be set since they won't be used.
	Proficiencies []*SkillProficiency `protobuf:"bytes,1,rep,name=proficiencies,proto3" json:"proficiencies,omitempty"`
	// ID of the schedule scenario that the @parent_entity in each @proficiency belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *CreateSkillProficienciesReq) Reset() {
	*x = CreateSkillProficienciesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[233]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSkillProficienciesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSkillProficienciesReq) ProtoMessage() {}

func (x *CreateSkillProficienciesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[233]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSkillProficienciesReq.ProtoReflect.Descriptor instead.
func (*CreateSkillProficienciesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{233}
}

func (x *CreateSkillProficienciesReq) GetProficiencies() []*SkillProficiency {
	if x != nil {
		return x.Proficiencies
	}
	return nil
}

func (x *CreateSkillProficienciesReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the CreateSkillProficiencies RPC
type CreateSkillProficienciesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSkillProficienciesRes) Reset() {
	*x = CreateSkillProficienciesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[234]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSkillProficienciesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSkillProficienciesRes) ProtoMessage() {}

func (x *CreateSkillProficienciesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[234]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSkillProficienciesRes.ProtoReflect.Descriptor instead.
func (*CreateSkillProficienciesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{234}
}

// Request message for the UpdateSkillProficiencies RPC
type UpdateSkillProficienciesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skill proficiencies to update.
	SkillProficiencies []*SkillProficiency `protobuf:"bytes,1,rep,name=skill_proficiencies,json=skillProficiencies,proto3" json:"skill_proficiencies,omitempty"`
}

func (x *UpdateSkillProficienciesReq) Reset() {
	*x = UpdateSkillProficienciesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[235]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkillProficienciesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProficienciesReq) ProtoMessage() {}

func (x *UpdateSkillProficienciesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[235]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProficienciesReq.ProtoReflect.Descriptor instead.
func (*UpdateSkillProficienciesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{235}
}

func (x *UpdateSkillProficienciesReq) GetSkillProficiencies() []*SkillProficiency {
	if x != nil {
		return x.SkillProficiencies
	}
	return nil
}

// Response message for the UpdateSkillProficiencies RPC
type UpdateSkillProficienciesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSkillProficienciesRes) Reset() {
	*x = UpdateSkillProficienciesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[236]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkillProficienciesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProficienciesRes) ProtoMessage() {}

func (x *UpdateSkillProficienciesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[236]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProficienciesRes.ProtoReflect.Descriptor instead.
func (*UpdateSkillProficienciesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{236}
}

// Request message for the DeleteSkillProficiency RPC
type DeleteSkillProficiencyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of skill proficiency to delete.
	SkillProficiencySid int64 `protobuf:"varint,1,opt,name=skill_proficiency_sid,json=skillProficiencySid,proto3" json:"skill_proficiency_sid,omitempty"`
}

func (x *DeleteSkillProficiencyReq) Reset() {
	*x = DeleteSkillProficiencyReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[237]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSkillProficiencyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSkillProficiencyReq) ProtoMessage() {}

func (x *DeleteSkillProficiencyReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[237]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSkillProficiencyReq.ProtoReflect.Descriptor instead.
func (*DeleteSkillProficiencyReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{237}
}

func (x *DeleteSkillProficiencyReq) GetSkillProficiencySid() int64 {
	if x != nil {
		return x.SkillProficiencySid
	}
	return 0
}

// Response message for the DeleteSkillProficiency RPC
type DeleteSkillProficiencyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSkillProficiencyRes) Reset() {
	*x = DeleteSkillProficiencyRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[238]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSkillProficiencyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSkillProficiencyRes) ProtoMessage() {}

func (x *DeleteSkillProficiencyRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[238]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSkillProficiencyRes.ProtoReflect.Descriptor instead.
func (*DeleteSkillProficiencyRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{238}
}

// Represents the data encapsulated by a schedule scenario.
type ScheduleScenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the schedule scenario.
	ScheduleScenarioSid int64 `protobuf:"varint,1,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Name of the schedule scenario.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the schedule scenario.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Datetime that the scenario was created.
	CreationDatetime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_datetime,json=creationDatetime,proto3" json:"creation_datetime,omitempty"`
	// ID of User/Agent in the TCN system that created the scenario.
	// Field is ignored in all update requests.
	CreatedByUserId string `protobuf:"bytes,5,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	// Whether this scenario was the last scenario built/used for scheduling.
	IsDefault bool `protobuf:"varint,6,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	// ID of scenario that this scenario was copied from (if applicable).
	CopiedFromScenarioSid *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=copied_from_scenario_sid,json=copiedFromScenarioSid,proto3" json:"copied_from_scenario_sid,omitempty"`
	// Datetime range that schedules will cover when built using this schedule scenario.
	ScheduleRange *commons.DatetimeRange `protobuf:"bytes,8,opt,name=schedule_range,json=scheduleRange,proto3" json:"schedule_range,omitempty"`
	// Datetime that the sceneario was set to inactive.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// Indicates whether or not the scenario is active.
	IsActive bool `protobuf:"varint,10,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *ScheduleScenario) Reset() {
	*x = ScheduleScenario{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[239]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleScenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleScenario) ProtoMessage() {}

func (x *ScheduleScenario) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[239]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleScenario.ProtoReflect.Descriptor instead.
func (*ScheduleScenario) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{239}
}

func (x *ScheduleScenario) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *ScheduleScenario) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduleScenario) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScheduleScenario) GetCreationDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDatetime
	}
	return nil
}

func (x *ScheduleScenario) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *ScheduleScenario) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *ScheduleScenario) GetCopiedFromScenarioSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.CopiedFromScenarioSid
	}
	return nil
}

func (x *ScheduleScenario) GetScheduleRange() *commons.DatetimeRange {
	if x != nil {
		return x.ScheduleRange
	}
	return nil
}

func (x *ScheduleScenario) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *ScheduleScenario) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

// Request message for the CopyScenario RPC
type CopyScenarioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the scenario that we are going to copy from.
	ScenarioSidToCopy int64 `protobuf:"varint,1,opt,name=scenario_sid_to_copy,json=scenarioSidToCopy,proto3" json:"scenario_sid_to_copy,omitempty"`
	// If the new scenario should include the inactive entities associated with the scenario_sid_to_copy.
	IncludeInactive bool `protobuf:"varint,2,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	// If no input is given, this should be "Copy of: copied_scenario.name", otherwise use the given input.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// If no input is given, use copied_scenario.description, otherwise use the given input.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Datetime range that the schedules for the new scenario will cover when built using the copied schedule scenario.
	ScheduleRange *commons.DatetimeRange `protobuf:"bytes,5,opt,name=schedule_range,json=scheduleRange,proto3" json:"schedule_range,omitempty"`
}

func (x *CopyScenarioReq) Reset() {
	*x = CopyScenarioReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[240]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyScenarioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyScenarioReq) ProtoMessage() {}

func (x *CopyScenarioReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[240]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyScenarioReq.ProtoReflect.Descriptor instead.
func (*CopyScenarioReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{240}
}

func (x *CopyScenarioReq) GetScenarioSidToCopy() int64 {
	if x != nil {
		return x.ScenarioSidToCopy
	}
	return 0
}

func (x *CopyScenarioReq) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *CopyScenarioReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CopyScenarioReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CopyScenarioReq) GetScheduleRange() *commons.DatetimeRange {
	if x != nil {
		return x.ScheduleRange
	}
	return nil
}

// Response message for the CopyScenario RPC
type CopyScenarioRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the new scenario
	ScheduleScenarioSid int64 `protobuf:"varint,1,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *CopyScenarioRes) Reset() {
	*x = CopyScenarioRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[241]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyScenarioRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyScenarioRes) ProtoMessage() {}

func (x *CopyScenarioRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[241]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyScenarioRes.ProtoReflect.Descriptor instead.
func (*CopyScenarioRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{241}
}

func (x *CopyScenarioRes) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Request message for the CreateScheduleScenarioWithNodes RPC
type CreateScheduleScenarioWithNodesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ScheduleScenario to be stored in the db.
	ScheduleScenario *ScheduleScenario `protobuf:"bytes,1,opt,name=schedule_scenario,json=scheduleScenario,proto3" json:"schedule_scenario,omitempty"`
	// Name for the created call center node.
	CallCenterNodeName string `protobuf:"bytes,2,opt,name=call_center_node_name,json=callCenterNodeName,proto3" json:"call_center_node_name,omitempty"`
	// Description for the created call center node.
	CallCenterNodeDescription string `protobuf:"bytes,3,opt,name=call_center_node_description,json=callCenterNodeDescription,proto3" json:"call_center_node_description,omitempty"`
	// Name for the created client node.
	ClientNodeName string `protobuf:"bytes,4,opt,name=client_node_name,json=clientNodeName,proto3" json:"client_node_name,omitempty"`
	// Description for the created client node.
	ClientNodeDescription string `protobuf:"bytes,5,opt,name=client_node_description,json=clientNodeDescription,proto3" json:"client_node_description,omitempty"`
	// Name for the created location node.
	LocationNodeName string `protobuf:"bytes,6,opt,name=location_node_name,json=locationNodeName,proto3" json:"location_node_name,omitempty"`
	// Description for the location center node.
	LocationNodeDescription string `protobuf:"bytes,7,opt,name=location_node_description,json=locationNodeDescription,proto3" json:"location_node_description,omitempty"`
	// Name for the created program node.
	ProgramNodeName string `protobuf:"bytes,8,opt,name=program_node_name,json=programNodeName,proto3" json:"program_node_name,omitempty"`
	// Description for the created program node.
	ProgramNodeDescription string `protobuf:"bytes,9,opt,name=program_node_description,json=programNodeDescription,proto3" json:"program_node_description,omitempty"`
	// TimeZoneVal is the desired timezone for the created nodes.
	TimeZoneVal commons.TimeZone `protobuf:"varint,10,opt,name=time_zone_val,json=timeZoneVal,proto3,enum=api.commons.TimeZone" json:"time_zone_val,omitempty"`
	// Skill Profile Category to associate with the program node to create.
	// The predicted calls of this skill profile category will be used when scheduling.
	SkillProfileCategory *commons.SkillProfileCategory `protobuf:"bytes,11,opt,name=skill_profile_category,json=skillProfileCategory,proto3" json:"skill_profile_category,omitempty"`
}

func (x *CreateScheduleScenarioWithNodesReq) Reset() {
	*x = CreateScheduleScenarioWithNodesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[242]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateScheduleScenarioWithNodesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScheduleScenarioWithNodesReq) ProtoMessage() {}

func (x *CreateScheduleScenarioWithNodesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[242]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScheduleScenarioWithNodesReq.ProtoReflect.Descriptor instead.
func (*CreateScheduleScenarioWithNodesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{242}
}

func (x *CreateScheduleScenarioWithNodesReq) GetScheduleScenario() *ScheduleScenario {
	if x != nil {
		return x.ScheduleScenario
	}
	return nil
}

func (x *CreateScheduleScenarioWithNodesReq) GetCallCenterNodeName() string {
	if x != nil {
		return x.CallCenterNodeName
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetCallCenterNodeDescription() string {
	if x != nil {
		return x.CallCenterNodeDescription
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetClientNodeName() string {
	if x != nil {
		return x.ClientNodeName
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetClientNodeDescription() string {
	if x != nil {
		return x.ClientNodeDescription
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetLocationNodeName() string {
	if x != nil {
		return x.LocationNodeName
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetLocationNodeDescription() string {
	if x != nil {
		return x.LocationNodeDescription
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetProgramNodeName() string {
	if x != nil {
		return x.ProgramNodeName
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetProgramNodeDescription() string {
	if x != nil {
		return x.ProgramNodeDescription
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetTimeZoneVal() commons.TimeZone {
	if x != nil {
		return x.TimeZoneVal
	}
	return commons.TimeZone(0)
}

func (x *CreateScheduleScenarioWithNodesReq) GetSkillProfileCategory() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillProfileCategory
	}
	return nil
}

// Response message for the CreateScheduleScenarioWithNodes RPC
type CreateScheduleScenarioWithNodesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the scenario just created.
	ScheduleScenarioSid int64 `protobuf:"varint,1,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *CreateScheduleScenarioWithNodesRes) Reset() {
	*x = CreateScheduleScenarioWithNodesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[243]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateScheduleScenarioWithNodesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScheduleScenarioWithNodesRes) ProtoMessage() {}

func (x *CreateScheduleScenarioWithNodesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[243]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScheduleScenarioWithNodesRes.ProtoReflect.Descriptor instead.
func (*CreateScheduleScenarioWithNodesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{243}
}

func (x *CreateScheduleScenarioWithNodesRes) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Request message for the UpdateScheduleScenario RPC
type UpdateScheduleScenarioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleScenario *ScheduleScenario `protobuf:"bytes,1,opt,name=scheduleScenario,proto3" json:"scheduleScenario,omitempty"`
}

func (x *UpdateScheduleScenarioReq) Reset() {
	*x = UpdateScheduleScenarioReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[244]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheduleScenarioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduleScenarioReq) ProtoMessage() {}

func (x *UpdateScheduleScenarioReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[244]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduleScenarioReq.ProtoReflect.Descriptor instead.
func (*UpdateScheduleScenarioReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{244}
}

func (x *UpdateScheduleScenarioReq) GetScheduleScenario() *ScheduleScenario {
	if x != nil {
		return x.ScheduleScenario
	}
	return nil
}

// Request message for the UpdateScheduleScenario RPC
type UpdateScheduleScenarioRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateScheduleScenarioRes) Reset() {
	*x = UpdateScheduleScenarioRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[245]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScheduleScenarioRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduleScenarioRes) ProtoMessage() {}

func (x *UpdateScheduleScenarioRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[245]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduleScenarioRes.ProtoReflect.Descriptor instead.
func (*UpdateScheduleScenarioRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{245}
}

// Request message for the ListConfigEntities RPC
type ListConfigEntitiesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entity type of the entities to retrieve.
	EntityType commons.ConfigEntityType `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3,enum=api.commons.ConfigEntityType" json:"entity_type,omitempty"`
	// Entity that the entities to return will belong to.
	BelongsToEntity *ParentEntity `protobuf:"bytes,2,opt,name=belongs_to_entity,json=belongsToEntity,proto3" json:"belongs_to_entity,omitempty"`
	// Indicates whether or not to retrieve inactive entities (true=active and inactive, false=active only).
	IncludeInactive bool `protobuf:"varint,3,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	// Depth to go down the config tree for children and member entities.
	// e.g: a value of 0 will only get the entities requested with no children/member.
	//
	//	a value of 1 will get the entities with children/member entities included 1 level down.
	MemberDepth int32 `protobuf:"varint,4,opt,name=member_depth,json=memberDepth,proto3" json:"member_depth,omitempty"`
	// ID of the scenario that the entities desired belong to, must match the scenario of @belongs_to_entity.
	ScheduleScenarioSid int64 `protobuf:"varint,5,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *ListConfigEntitiesReq) Reset() {
	*x = ListConfigEntitiesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[246]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesReq) ProtoMessage() {}

func (x *ListConfigEntitiesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[246]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesReq.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{246}
}

func (x *ListConfigEntitiesReq) GetEntityType() commons.ConfigEntityType {
	if x != nil {
		return x.EntityType
	}
	return commons.ConfigEntityType(0)
}

func (x *ListConfigEntitiesReq) GetBelongsToEntity() *ParentEntity {
	if x != nil {
		return x.BelongsToEntity
	}
	return nil
}

func (x *ListConfigEntitiesReq) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *ListConfigEntitiesReq) GetMemberDepth() int32 {
	if x != nil {
		return x.MemberDepth
	}
	return 0
}

func (x *ListConfigEntitiesReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the ListConfigEntities RPC
type ListConfigEntitiesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entities:
	//
	//	*ListConfigEntitiesRes_CallCenterNode
	//	*ListConfigEntitiesRes_ClientNodes
	//	*ListConfigEntitiesRes_LocationNodes
	//	*ListConfigEntitiesRes_ProgramNodes
	//	*ListConfigEntitiesRes_AgentGroups
	//	*ListConfigEntitiesRes_ShiftTemplates
	//	*ListConfigEntitiesRes_WfmAgents
	//	*ListConfigEntitiesRes_PlacementRules
	//	*ListConfigEntitiesRes_ConstraintRules
	//	*ListConfigEntitiesRes_NonSkillActivities
	//	*ListConfigEntitiesRes_AgentAvailabilityPatterns
	//	*ListConfigEntitiesRes_OpenTimesPatterns
	//	*ListConfigEntitiesRes_SchedulingActivity
	//	*ListConfigEntitiesRes_SkillProficiencies
	//	*ListConfigEntitiesRes_ScheduleScenarios
	Entities isListConfigEntitiesRes_Entities `protobuf_oneof:"entities"`
}

func (x *ListConfigEntitiesRes) Reset() {
	*x = ListConfigEntitiesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[247]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes) ProtoMessage() {}

func (x *ListConfigEntitiesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[247]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247}
}

func (m *ListConfigEntitiesRes) GetEntities() isListConfigEntitiesRes_Entities {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetCallCenterNode() *CallCenterNode {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_CallCenterNode); ok {
		return x.CallCenterNode
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetClientNodes() *ListConfigEntitiesRes_ClientNodeEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_ClientNodes); ok {
		return x.ClientNodes
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetLocationNodes() *ListConfigEntitiesRes_LocationNodeEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_LocationNodes); ok {
		return x.LocationNodes
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetProgramNodes() *ListConfigEntitiesRes_ProgramNodeEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_ProgramNodes); ok {
		return x.ProgramNodes
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetAgentGroups() *ListConfigEntitiesRes_AgentGroupEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_AgentGroups); ok {
		return x.AgentGroups
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetShiftTemplates() *ListConfigEntitiesRes_ShiftTemplateEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_ShiftTemplates); ok {
		return x.ShiftTemplates
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetWfmAgents() *ListConfigEntitiesRes_WFMAgentEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_WfmAgents); ok {
		return x.WfmAgents
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetPlacementRules() *ListConfigEntitiesRes_PlacementRuleEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_PlacementRules); ok {
		return x.PlacementRules
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetConstraintRules() *ListConfigEntitiesRes_ConstraintRuleEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_ConstraintRules); ok {
		return x.ConstraintRules
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetNonSkillActivities() *ListConfigEntitiesRes_NonSkillActivityEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_NonSkillActivities); ok {
		return x.NonSkillActivities
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetAgentAvailabilityPatterns() *ListConfigEntitiesRes_AgentAvailabilityPatternEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_AgentAvailabilityPatterns); ok {
		return x.AgentAvailabilityPatterns
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetOpenTimesPatterns() *ListConfigEntitiesRes_OpenTimesPatternEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_OpenTimesPatterns); ok {
		return x.OpenTimesPatterns
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetSchedulingActivity() *SchedulingActivity {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_SchedulingActivity); ok {
		return x.SchedulingActivity
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetSkillProficiencies() *ListConfigEntitiesRes_SkillProficiencyEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_SkillProficiencies); ok {
		return x.SkillProficiencies
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetScheduleScenarios() *ListConfigEntitiesRes_ScheduleScenarioEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_ScheduleScenarios); ok {
		return x.ScheduleScenarios
	}
	return nil
}

type isListConfigEntitiesRes_Entities interface {
	isListConfigEntitiesRes_Entities()
}

type ListConfigEntitiesRes_CallCenterNode struct {
	// Call Center Node entity retrieved when @entity_type in the request is CallCenterNode.
	// When this entity is requested, the @belongs_to_entity.type will be ignored and assumed as if were ScheduleScenario.
	CallCenterNode *CallCenterNode `protobuf:"bytes,1,opt,name=call_center_node,json=callCenterNode,proto3,oneof"`
}

type ListConfigEntitiesRes_ClientNodes struct {
	// Client Node entities retrieved when @entity_type in the request is ClientNode.
	// When this entity is requested, the @belongs_to_entity.type will be ignored and assumed as if were CallCenterNode.
	ClientNodes *ListConfigEntitiesRes_ClientNodeEntities `protobuf:"bytes,2,opt,name=client_nodes,json=clientNodes,proto3,oneof"`
}

type ListConfigEntitiesRes_LocationNodes struct {
	// Location Node entities retrieved when @entity_type in the request is LocationNode.
	// When this entity is requested, the @belongs_to_entity.type will be ignored and assumed as if were ClientNode.
	LocationNodes *ListConfigEntitiesRes_LocationNodeEntities `protobuf:"bytes,3,opt,name=location_nodes,json=locationNodes,proto3,oneof"`
}

type ListConfigEntitiesRes_ProgramNodes struct {
	// Program Node entities retrieved when @entity_type in the request is ProgramNode.
	// When this entity is requested, the @belongs_to_entity.type will be ignored and assumed as if were LocationNode.
	ProgramNodes *ListConfigEntitiesRes_ProgramNodeEntities `protobuf:"bytes,4,opt,name=program_nodes,json=programNodes,proto3,oneof"`
}

type ListConfigEntitiesRes_AgentGroups struct {
	// Agent Group entities retrieved when @entity_type in the request is AgentGroup.
	// Member WFM Agents returned will only include agents that have a not nil @tcn_agent_sid.
	AgentGroups *ListConfigEntitiesRes_AgentGroupEntities `protobuf:"bytes,5,opt,name=agent_groups,json=agentGroups,proto3,oneof"`
}

type ListConfigEntitiesRes_ShiftTemplates struct {
	// Shift Template entities retrieved when @entity_type in the request is ShiftTemplate.
	// When this entity is requested, the @belongs_to_entity.type will be ignored and assumed as if were ProgramNode.
	ShiftTemplates *ListConfigEntitiesRes_ShiftTemplateEntities `protobuf:"bytes,6,opt,name=shift_templates,json=shiftTemplates,proto3,oneof"`
}

type ListConfigEntitiesRes_WfmAgents struct {
	// WFM Agent entities retrieved when @entity_type in the request is WFMAgent.
	// When this entity is requested, the @belongs_to_entity.type will be ignored and assumed as if were AgentGroup.
	WfmAgents *ListConfigEntitiesRes_WFMAgentEntities `protobuf:"bytes,7,opt,name=wfm_agents,json=wfmAgents,proto3,oneof"`
}

type ListConfigEntitiesRes_PlacementRules struct {
	// Placement Rules entities retrieved when @entity_type in the request is PlacementRule.
	PlacementRules *ListConfigEntitiesRes_PlacementRuleEntities `protobuf:"bytes,8,opt,name=placement_rules,json=placementRules,proto3,oneof"`
}

type ListConfigEntitiesRes_ConstraintRules struct {
	// Constraint Rule entities retrieved when @entity_type in the request is ConstraintRule.
	ConstraintRules *ListConfigEntitiesRes_ConstraintRuleEntities `protobuf:"bytes,9,opt,name=constraint_rules,json=constraintRules,proto3,oneof"`
}

type ListConfigEntitiesRes_NonSkillActivities struct {
	// Non Skill Activity entities retrieved when @entity_type in the request is NonSkillActivity.
	// This entity supports a @belongs_to_entity.type of ScheduleScenario, and will return all non skill activities in the specified scenario.
	NonSkillActivities *ListConfigEntitiesRes_NonSkillActivityEntities `protobuf:"bytes,10,opt,name=non_skill_activities,json=nonSkillActivities,proto3,oneof"`
}

type ListConfigEntitiesRes_AgentAvailabilityPatterns struct {
	// Agent Availability entities retrieved when @entity_type in the request is AgentAvailabilityPattern.
	AgentAvailabilityPatterns *ListConfigEntitiesRes_AgentAvailabilityPatternEntities `protobuf:"bytes,11,opt,name=agent_availability_patterns,json=agentAvailabilityPatterns,proto3,oneof"`
}

type ListConfigEntitiesRes_OpenTimesPatterns struct {
	// Open Times Pattern entities retrieved when @entity_type in the request is OpenTimesPattern.
	OpenTimesPatterns *ListConfigEntitiesRes_OpenTimesPatternEntities `protobuf:"bytes,12,opt,name=open_times_patterns,json=openTimesPatterns,proto3,oneof"`
}

type ListConfigEntitiesRes_SchedulingActivity struct {
	// Scheduling Activity retrieved when @entity_type in the request is SchedulingActivity.
	SchedulingActivity *SchedulingActivity `protobuf:"bytes,13,opt,name=scheduling_activity,json=schedulingActivity,proto3,oneof"`
}

type ListConfigEntitiesRes_SkillProficiencies struct {
	// Skill Proficiency entities retrieved when @entity_type in the request is SkillProficiency.
	SkillProficiencies *ListConfigEntitiesRes_SkillProficiencyEntities `protobuf:"bytes,14,opt,name=skill_proficiencies,json=skillProficiencies,proto3,oneof"`
}

type ListConfigEntitiesRes_ScheduleScenarios struct {
	// Schedule Scenario entities retrieved when @entity_type in the request is ScheduleScenario.
	// When this entity is requested, no children will be returned regardless of the @member_depth.
	ScheduleScenarios *ListConfigEntitiesRes_ScheduleScenarioEntities `protobuf:"bytes,15,opt,name=schedule_scenarios,json=scheduleScenarios,proto3,oneof"`
}

func (*ListConfigEntitiesRes_CallCenterNode) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_ClientNodes) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_LocationNodes) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_ProgramNodes) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_AgentGroups) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_ShiftTemplates) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_WfmAgents) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_PlacementRules) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_ConstraintRules) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_NonSkillActivities) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_AgentAvailabilityPatterns) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_OpenTimesPatterns) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_SchedulingActivity) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_SkillProficiencies) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_ScheduleScenarios) isListConfigEntitiesRes_Entities() {}

// Message type specifying the parameters of a diagnostic
type Diagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The diagnostic level describes the class of the diagnostic message.
	Level commons.DiagnosticLevel `protobuf:"varint,1,opt,name=level,proto3,enum=api.commons.DiagnosticLevel" json:"level,omitempty"`
	// A code to describe the diagnostic when possible. Default value of General when a more specific code is not available.
	Code commons.DiagnosticCode `protobuf:"varint,2,opt,name=code,proto3,enum=api.commons.DiagnosticCode" json:"code,omitempty"`
	// The message detailing the diagnostic.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// The entity that the diagnostic was built in reference to.
	SourceEntity *ParentEntity `protobuf:"bytes,4,opt,name=source_entity,json=sourceEntity,proto3" json:"source_entity,omitempty"`
}

func (x *Diagnostic) Reset() {
	*x = Diagnostic{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[248]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Diagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostic) ProtoMessage() {}

func (x *Diagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[248]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostic.ProtoReflect.Descriptor instead.
func (*Diagnostic) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{248}
}

func (x *Diagnostic) GetLevel() commons.DiagnosticLevel {
	if x != nil {
		return x.Level
	}
	return commons.DiagnosticLevel(0)
}

func (x *Diagnostic) GetCode() commons.DiagnosticCode {
	if x != nil {
		return x.Code
	}
	return commons.DiagnosticCode(0)
}

func (x *Diagnostic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Diagnostic) GetSourceEntity() *ParentEntity {
	if x != nil {
		return x.SourceEntity
	}
	return nil
}

// Represents a group of diagnostics for a single entity
type Diagnostics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The entity that the diagnostics built reference.
	SourceEntity *ParentEntity `protobuf:"bytes,1,opt,name=source_entity,json=sourceEntity,proto3" json:"source_entity,omitempty"`
	// Diagnostics generated for the @source_entity
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *Diagnostics) Reset() {
	*x = Diagnostics{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[249]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Diagnostics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostics) ProtoMessage() {}

func (x *Diagnostics) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[249]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostics.ProtoReflect.Descriptor instead.
func (*Diagnostics) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{249}
}

func (x *Diagnostics) GetSourceEntity() *ParentEntity {
	if x != nil {
		return x.SourceEntity
	}
	return nil
}

func (x *Diagnostics) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the DeleteShiftInstances RPC
type DeleteShiftInstancesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of shift instances to delete.
	ShiftInstanceSids []int64 `protobuf:"varint,1,rep,packed,name=shift_instance_sids,json=shiftInstanceSids,proto3" json:"shift_instance_sids,omitempty"`
}

func (x *DeleteShiftInstancesReq) Reset() {
	*x = DeleteShiftInstancesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[250]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteShiftInstancesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShiftInstancesReq) ProtoMessage() {}

func (x *DeleteShiftInstancesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[250]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShiftInstancesReq.ProtoReflect.Descriptor instead.
func (*DeleteShiftInstancesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{250}
}

func (x *DeleteShiftInstancesReq) GetShiftInstanceSids() []int64 {
	if x != nil {
		return x.ShiftInstanceSids
	}
	return nil
}

// Response message for the DeleteShiftInstances RPC
type DeleteShiftInstancesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteShiftInstancesRes) Reset() {
	*x = DeleteShiftInstancesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[251]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteShiftInstancesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShiftInstancesRes) ProtoMessage() {}

func (x *DeleteShiftInstancesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[251]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShiftInstancesRes.ProtoReflect.Descriptor instead.
func (*DeleteShiftInstancesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{251}
}

// Request message for the BuildNodeDiagnostics RPC
type BuildNodeDiagnosticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node that @diagnostics will be associated with.
	NodeToCheck *ParentEntity `protobuf:"bytes,1,opt,name=node_to_check,json=nodeToCheck,proto3" json:"node_to_check,omitempty"`
	// ID of the schedule scenario that @node_to_check belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *BuildNodeDiagnosticsReq) Reset() {
	*x = BuildNodeDiagnosticsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[252]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildNodeDiagnosticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildNodeDiagnosticsReq) ProtoMessage() {}

func (x *BuildNodeDiagnosticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[252]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildNodeDiagnosticsReq.ProtoReflect.Descriptor instead.
func (*BuildNodeDiagnosticsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{252}
}

func (x *BuildNodeDiagnosticsReq) GetNodeToCheck() *ParentEntity {
	if x != nil {
		return x.NodeToCheck
	}
	return nil
}

func (x *BuildNodeDiagnosticsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the BuildNodeDiagnostics RPC
type BuildNodeDiagnosticsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of diagnostic reports for the given @node_to_check.
	Diagnostics []*Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	// Set of all nodes checked during the diagnostics.
	NodesChecked []*ParentEntity `protobuf:"bytes,2,rep,name=nodes_checked,json=nodesChecked,proto3" json:"nodes_checked,omitempty"`
}

func (x *BuildNodeDiagnosticsRes) Reset() {
	*x = BuildNodeDiagnosticsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[253]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildNodeDiagnosticsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildNodeDiagnosticsRes) ProtoMessage() {}

func (x *BuildNodeDiagnosticsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[253]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildNodeDiagnosticsRes.ProtoReflect.Descriptor instead.
func (*BuildNodeDiagnosticsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{253}
}

func (x *BuildNodeDiagnosticsRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *BuildNodeDiagnosticsRes) GetNodesChecked() []*ParentEntity {
	if x != nil {
		return x.NodesChecked
	}
	return nil
}

// Request message for the BuildGlobalDiagnostics RPC
type BuildGlobalDiagnosticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the schedule scenario to get diagnostics for.
	ScheduleScenarioSid int64 `protobuf:"varint,1,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *BuildGlobalDiagnosticsReq) Reset() {
	*x = BuildGlobalDiagnosticsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[254]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildGlobalDiagnosticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildGlobalDiagnosticsReq) ProtoMessage() {}

func (x *BuildGlobalDiagnosticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[254]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildGlobalDiagnosticsReq.ProtoReflect.Descriptor instead.
func (*BuildGlobalDiagnosticsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{254}
}

func (x *BuildGlobalDiagnosticsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the BuildGlobalDiagnostics RPC
type BuildGlobalDiagnosticsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of diagnostic reports for the given @schedule_scenario_sid.
	Diagnostics []*Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	// Set of all nodes checked during the diagnostics.
	NodesChecked []*ParentEntity `protobuf:"bytes,2,rep,name=nodes_checked,json=nodesChecked,proto3" json:"nodes_checked,omitempty"`
}

func (x *BuildGlobalDiagnosticsRes) Reset() {
	*x = BuildGlobalDiagnosticsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[255]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildGlobalDiagnosticsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildGlobalDiagnosticsRes) ProtoMessage() {}

func (x *BuildGlobalDiagnosticsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[255]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildGlobalDiagnosticsRes.ProtoReflect.Descriptor instead.
func (*BuildGlobalDiagnosticsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{255}
}

func (x *BuildGlobalDiagnosticsRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *BuildGlobalDiagnosticsRes) GetNodesChecked() []*ParentEntity {
	if x != nil {
		return x.NodesChecked
	}
	return nil
}

type PublishedSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this published schedule.
	PublishedScheduleSid int64 `protobuf:"varint,1,opt,name=published_schedule_sid,json=publishedScheduleSid,proto3" json:"published_schedule_sid,omitempty"`
	// Datetime of creation.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Datetime of last update.
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	// Shifts that this schedule has.
	ShiftInstances []*ShiftInstance `protobuf:"bytes,4,rep,name=shift_instances,json=shiftInstances,proto3" json:"shift_instances,omitempty"`
	// Deprecated. Performance metrics that this schedule has.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	PerformanceMetrics []*PerformanceMetric `protobuf:"bytes,5,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
	// Performance metrics that this schedule has.
	PerformanceMetricsV2 []*PerformanceMetricV2 `protobuf:"bytes,6,rep,name=performance_metrics_v2,json=performanceMetricsV2,proto3" json:"performance_metrics_v2,omitempty"`
}

func (x *PublishedSchedule) Reset() {
	*x = PublishedSchedule{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[256]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedSchedule) ProtoMessage() {}

func (x *PublishedSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[256]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedSchedule.ProtoReflect.Descriptor instead.
func (*PublishedSchedule) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{256}
}

func (x *PublishedSchedule) GetPublishedScheduleSid() int64 {
	if x != nil {
		return x.PublishedScheduleSid
	}
	return 0
}

func (x *PublishedSchedule) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PublishedSchedule) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *PublishedSchedule) GetShiftInstances() []*ShiftInstance {
	if x != nil {
		return x.ShiftInstances
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *PublishedSchedule) GetPerformanceMetrics() []*PerformanceMetric {
	if x != nil {
		return x.PerformanceMetrics
	}
	return nil
}

func (x *PublishedSchedule) GetPerformanceMetricsV2() []*PerformanceMetricV2 {
	if x != nil {
		return x.PerformanceMetricsV2
	}
	return nil
}

// Represents a draft schedule
type DraftSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// Time that this the schedule was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Time that this schedule was last updated.
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	// Name of the draft schedule.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// A description of the draft schedule.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Datetime range over which this draft schedule spans.
	// Is the range used when copying shifts from published schedule.
	// Also used when publishing shifts from the draft to the published schedule.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,6,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// ID of the user who originally drafted the schedule.
	CreatedByUserId string `protobuf:"bytes,7,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	// The following field is only return of List requests of the entity.
	// Shifts that this schedule has.
	ShiftInstances []*ShiftInstance `protobuf:"bytes,8,rep,name=shift_instances,json=shiftInstances,proto3" json:"shift_instances,omitempty"`
	// Deprecated. Performance metrics that this schedule has.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	PerformanceMetrics []*PerformanceMetric `protobuf:"bytes,9,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
	// Schedule Scenario of the draft schedule.
	ScheduleScenarioSid int64 `protobuf:"varint,10,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Performance metrics that this schedule has.
	PerformanceMetricsV2 []*PerformanceMetricV2 `protobuf:"bytes,11,rep,name=performance_metrics_v2,json=performanceMetricsV2,proto3" json:"performance_metrics_v2,omitempty"`
}

func (x *DraftSchedule) Reset() {
	*x = DraftSchedule{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[257]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DraftSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DraftSchedule) ProtoMessage() {}

func (x *DraftSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[257]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DraftSchedule.ProtoReflect.Descriptor instead.
func (*DraftSchedule) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{257}
}

func (x *DraftSchedule) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *DraftSchedule) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DraftSchedule) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *DraftSchedule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DraftSchedule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DraftSchedule) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *DraftSchedule) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *DraftSchedule) GetShiftInstances() []*ShiftInstance {
	if x != nil {
		return x.ShiftInstances
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *DraftSchedule) GetPerformanceMetrics() []*PerformanceMetric {
	if x != nil {
		return x.PerformanceMetrics
	}
	return nil
}

func (x *DraftSchedule) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *DraftSchedule) GetPerformanceMetricsV2() []*PerformanceMetricV2 {
	if x != nil {
		return x.PerformanceMetricsV2
	}
	return nil
}

// Deprecated.
// PerformanceMetricForSkillCollection.
// Not a top-level entity:
// * No primary-key field.
// * No org_id field.
// * No rpc endpoints, part of PerformanceMetric only.
//
// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
type PerformanceMetricForSkillCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime range over which the metrics were determined.
	DateRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// The total calls required over the @date_range, as determined by the forecast.
	TotalCallsRequired int32 `protobuf:"varint,2,opt,name=total_calls_required,json=totalCallsRequired,proto3" json:"total_calls_required,omitempty"`
	// The total calls the the schedule is likely to address with the current shift instances.
	TotalFtesAchieved int32 `protobuf:"varint,3,opt,name=total_ftes_achieved,json=totalFtesAchieved,proto3" json:"total_ftes_achieved,omitempty"`
	// The number of intervals with required calls.
	NumIntervalsWithRequiredCalls int32 `protobuf:"varint,4,opt,name=num_intervals_with_required_calls,json=numIntervalsWithRequiredCalls,proto3" json:"num_intervals_with_required_calls,omitempty"`
	// The number of intervals with FTE's but no schedules.
	NumIntervalsWithFtesButNoSchedules int32 `protobuf:"varint,5,opt,name=num_intervals_with_ftes_but_no_schedules,json=numIntervalsWithFtesButNoSchedules,proto3" json:"num_intervals_with_ftes_but_no_schedules,omitempty"`
	// the number of intervals with FTE's but no forecasted calls.
	NumIntervalsWithFtesButNoForecastedCalls int32 `protobuf:"varint,6,opt,name=num_intervals_with_ftes_but_no_forecasted_calls,json=numIntervalsWithFtesButNoForecastedCalls,proto3" json:"num_intervals_with_ftes_but_no_forecasted_calls,omitempty"`
	// The total calls forecsted where there are no FTE's scheduled.
	TotalUnscheduledCalls int32 `protobuf:"varint,7,opt,name=total_unscheduled_calls,json=totalUnscheduledCalls,proto3" json:"total_unscheduled_calls,omitempty"`
	// The total number of FTE's scheduled where there were no forecasted calls.
	TotalUnnecessaryFtes int32 `protobuf:"varint,8,opt,name=total_unnecessary_ftes,json=totalUnnecessaryFtes,proto3" json:"total_unnecessary_ftes,omitempty"`
	// Width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,9,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// The type of metric being reported.
	MetricType commons.PerformanceMetricType `protobuf:"varint,10,opt,name=metric_type,json=metricType,proto3,enum=api.commons.PerformanceMetricType" json:"metric_type,omitempty"`
	// One value will be set between @fte_intervals and @service_level_intervals, depending on @metric_type.
	// If @metric_type is FTE_REQUIRED_VS_ACHIEVED_SIMPLE then the intervals will be stored in @fte_intervals
	// If @metric_type is SERVICE_LEVEL_ANALYSIS then the intervals will be stored in @service_level_intervals
	// Interval set comparing the number of FTE required to the number achieved.
	FteIntervals []*FTERequiredVsAchievedInterval `protobuf:"bytes,11,rep,name=fte_intervals,json=fteIntervals,proto3" json:"fte_intervals,omitempty"`
	// Interval set checking the service level achieved as a percentage.
	ServiceLevelIntervals []*ServiceLevelInterval `protobuf:"bytes,12,rep,name=service_level_intervals,json=serviceLevelIntervals,proto3" json:"service_level_intervals,omitempty"`
	// Pointer to skill collection.
	SkillCollection *commons.SkillProfileCategory `protobuf:"bytes,13,opt,name=skill_collection,json=skillCollection,proto3" json:"skill_collection,omitempty"`
}

func (x *PerformanceMetricForSkillCollection) Reset() {
	*x = PerformanceMetricForSkillCollection{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[258]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceMetricForSkillCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMetricForSkillCollection) ProtoMessage() {}

func (x *PerformanceMetricForSkillCollection) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[258]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMetricForSkillCollection.ProtoReflect.Descriptor instead.
func (*PerformanceMetricForSkillCollection) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{258}
}

func (x *PerformanceMetricForSkillCollection) GetDateRange() *commons.DatetimeRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *PerformanceMetricForSkillCollection) GetTotalCallsRequired() int32 {
	if x != nil {
		return x.TotalCallsRequired
	}
	return 0
}

func (x *PerformanceMetricForSkillCollection) GetTotalFtesAchieved() int32 {
	if x != nil {
		return x.TotalFtesAchieved
	}
	return 0
}

func (x *PerformanceMetricForSkillCollection) GetNumIntervalsWithRequiredCalls() int32 {
	if x != nil {
		return x.NumIntervalsWithRequiredCalls
	}
	return 0
}

func (x *PerformanceMetricForSkillCollection) GetNumIntervalsWithFtesButNoSchedules() int32 {
	if x != nil {
		return x.NumIntervalsWithFtesButNoSchedules
	}
	return 0
}

func (x *PerformanceMetricForSkillCollection) GetNumIntervalsWithFtesButNoForecastedCalls() int32 {
	if x != nil {
		return x.NumIntervalsWithFtesButNoForecastedCalls
	}
	return 0
}

func (x *PerformanceMetricForSkillCollection) GetTotalUnscheduledCalls() int32 {
	if x != nil {
		return x.TotalUnscheduledCalls
	}
	return 0
}

func (x *PerformanceMetricForSkillCollection) GetTotalUnnecessaryFtes() int32 {
	if x != nil {
		return x.TotalUnnecessaryFtes
	}
	return 0
}

func (x *PerformanceMetricForSkillCollection) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *PerformanceMetricForSkillCollection) GetMetricType() commons.PerformanceMetricType {
	if x != nil {
		return x.MetricType
	}
	return commons.PerformanceMetricType(0)
}

func (x *PerformanceMetricForSkillCollection) GetFteIntervals() []*FTERequiredVsAchievedInterval {
	if x != nil {
		return x.FteIntervals
	}
	return nil
}

func (x *PerformanceMetricForSkillCollection) GetServiceLevelIntervals() []*ServiceLevelInterval {
	if x != nil {
		return x.ServiceLevelIntervals
	}
	return nil
}

func (x *PerformanceMetricForSkillCollection) GetSkillCollection() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillCollection
	}
	return nil
}

// Deprecated.
// Represents a performance metric
//
// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
type PerformanceMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime range over which the metrics were determined.
	DateRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// The total calls required over the @date_range, as determined by the forecast.
	TotalCallsRequired int32 `protobuf:"varint,2,opt,name=total_calls_required,json=totalCallsRequired,proto3" json:"total_calls_required,omitempty"`
	// The total calls the the schedule is likely to address with the current shift instances.
	TotalFtesAchieved int32 `protobuf:"varint,3,opt,name=total_ftes_achieved,json=totalFtesAchieved,proto3" json:"total_ftes_achieved,omitempty"`
	// The number of intervals with required calls.
	NumIntervalsWithRequiredCalls int32 `protobuf:"varint,4,opt,name=num_intervals_with_required_calls,json=numIntervalsWithRequiredCalls,proto3" json:"num_intervals_with_required_calls,omitempty"`
	// The number of intervals with FTE's but no schedules.
	NumIntervalsWithFtesButNoSchedules int32 `protobuf:"varint,5,opt,name=num_intervals_with_ftes_but_no_schedules,json=numIntervalsWithFtesButNoSchedules,proto3" json:"num_intervals_with_ftes_but_no_schedules,omitempty"`
	// the number of intervals with FTE's but no forecasted calls.
	NumIntervalsWithFtesButNoForecastedCalls int32 `protobuf:"varint,6,opt,name=num_intervals_with_ftes_but_no_forecasted_calls,json=numIntervalsWithFtesButNoForecastedCalls,proto3" json:"num_intervals_with_ftes_but_no_forecasted_calls,omitempty"`
	// The total calls forecsted where there are no FTE's scheduled.
	TotalUnscheduledCalls int32 `protobuf:"varint,7,opt,name=total_unscheduled_calls,json=totalUnscheduledCalls,proto3" json:"total_unscheduled_calls,omitempty"`
	// The total number of FTE's scheduled where there were no forecasted calls.
	TotalUnnecessaryFtes int32 `protobuf:"varint,8,opt,name=total_unnecessary_ftes,json=totalUnnecessaryFtes,proto3" json:"total_unnecessary_ftes,omitempty"`
	// Width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,9,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// The type of metric being reported.
	MetricType commons.PerformanceMetricType `protobuf:"varint,10,opt,name=metric_type,json=metricType,proto3,enum=api.commons.PerformanceMetricType" json:"metric_type,omitempty"`
	// One value will be set between @fte_intervals and @service_level_intervals, depending on @metric_type.
	// If @metric_type is FTE_REQUIRED_VS_ACHIEVED_SIMPLE then the intervals will be stored in @fte_intervals
	// If @metric_type is SERVICE_LEVEL_ANALYSIS then the intervals will be stored in @service_level_intervals
	// Interval set comparing the number of FTE required to the number achieved.
	FteIntervals []*FTERequiredVsAchievedInterval `protobuf:"bytes,11,rep,name=fte_intervals,json=fteIntervals,proto3" json:"fte_intervals,omitempty"`
	// Interval set checking the service level achieved as a percentage.
	ServiceLevelIntervals []*ServiceLevelInterval `protobuf:"bytes,12,rep,name=service_level_intervals,json=serviceLevelIntervals,proto3" json:"service_level_intervals,omitempty"`
	// Per-skill metrics.
	MetricsBySkillCollection []*PerformanceMetricForSkillCollection `protobuf:"bytes,13,rep,name=metrics_by_skill_collection,json=metricsBySkillCollection,proto3" json:"metrics_by_skill_collection,omitempty"`
}

func (x *PerformanceMetric) Reset() {
	*x = PerformanceMetric{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[259]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMetric) ProtoMessage() {}

func (x *PerformanceMetric) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[259]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMetric.ProtoReflect.Descriptor instead.
func (*PerformanceMetric) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{259}
}

func (x *PerformanceMetric) GetDateRange() *commons.DatetimeRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *PerformanceMetric) GetTotalCallsRequired() int32 {
	if x != nil {
		return x.TotalCallsRequired
	}
	return 0
}

func (x *PerformanceMetric) GetTotalFtesAchieved() int32 {
	if x != nil {
		return x.TotalFtesAchieved
	}
	return 0
}

func (x *PerformanceMetric) GetNumIntervalsWithRequiredCalls() int32 {
	if x != nil {
		return x.NumIntervalsWithRequiredCalls
	}
	return 0
}

func (x *PerformanceMetric) GetNumIntervalsWithFtesButNoSchedules() int32 {
	if x != nil {
		return x.NumIntervalsWithFtesButNoSchedules
	}
	return 0
}

func (x *PerformanceMetric) GetNumIntervalsWithFtesButNoForecastedCalls() int32 {
	if x != nil {
		return x.NumIntervalsWithFtesButNoForecastedCalls
	}
	return 0
}

func (x *PerformanceMetric) GetTotalUnscheduledCalls() int32 {
	if x != nil {
		return x.TotalUnscheduledCalls
	}
	return 0
}

func (x *PerformanceMetric) GetTotalUnnecessaryFtes() int32 {
	if x != nil {
		return x.TotalUnnecessaryFtes
	}
	return 0
}

func (x *PerformanceMetric) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *PerformanceMetric) GetMetricType() commons.PerformanceMetricType {
	if x != nil {
		return x.MetricType
	}
	return commons.PerformanceMetricType(0)
}

func (x *PerformanceMetric) GetFteIntervals() []*FTERequiredVsAchievedInterval {
	if x != nil {
		return x.FteIntervals
	}
	return nil
}

func (x *PerformanceMetric) GetServiceLevelIntervals() []*ServiceLevelInterval {
	if x != nil {
		return x.ServiceLevelIntervals
	}
	return nil
}

func (x *PerformanceMetric) GetMetricsBySkillCollection() []*PerformanceMetricForSkillCollection {
	if x != nil {
		return x.MetricsBySkillCollection
	}
	return nil
}

// PerformanceMetricForSkillCollectionV2.
// Not a top-level entity:
// * No primary-key field.
// * No org_id field.
// * No rpc endpoints, part of PerformanceMetricV2 only.
type PerformanceMetricForSkillCollectionV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime range over which the metrics were determined.
	DateRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	TotalFteIntervalsRequired float32 `protobuf:"fixed32,2,opt,name=total_fte_intervals_required,json=totalFteIntervalsRequired,proto3" json:"total_fte_intervals_required,omitempty"`
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	TotalFteIntervalsAchieved           float32 `protobuf:"fixed32,3,opt,name=total_fte_intervals_achieved,json=totalFteIntervalsAchieved,proto3" json:"total_fte_intervals_achieved,omitempty"`
	NumIntervalsWithCallFtes            int32   `protobuf:"varint,4,opt,name=num_intervals_with_call_ftes,json=numIntervalsWithCallFtes,proto3" json:"num_intervals_with_call_ftes,omitempty"`
	NumIntervalsWithShiftFtes           int32   `protobuf:"varint,5,opt,name=num_intervals_with_shift_ftes,json=numIntervalsWithShiftFtes,proto3" json:"num_intervals_with_shift_ftes,omitempty"`
	NumIntervalsWithCallFtesButNoShifts int32   `protobuf:"varint,6,opt,name=num_intervals_with_call_ftes_but_no_shifts,json=numIntervalsWithCallFtesButNoShifts,proto3" json:"num_intervals_with_call_ftes_but_no_shifts,omitempty"`
	NumIntervalsWithShiftsButNoCallFtes int32   `protobuf:"varint,7,opt,name=num_intervals_with_shifts_but_no_call_ftes,json=numIntervalsWithShiftsButNoCallFtes,proto3" json:"num_intervals_with_shifts_but_no_call_ftes,omitempty"`
	TotalUnderscheduledCallFtes         float32 `protobuf:"fixed32,8,opt,name=total_underscheduled_call_ftes,json=totalUnderscheduledCallFtes,proto3" json:"total_underscheduled_call_ftes,omitempty"`
	TotalOverscheduledCallFtes          float32 `protobuf:"fixed32,9,opt,name=total_overscheduled_call_ftes,json=totalOverscheduledCallFtes,proto3" json:"total_overscheduled_call_ftes,omitempty"`
	// Width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,10,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// The type of metric being reported.
	MetricType commons.PerformanceMetricType `protobuf:"varint,11,opt,name=metric_type,json=metricType,proto3,enum=api.commons.PerformanceMetricType" json:"metric_type,omitempty"`
	// One value will be set between @fte_occupancy_intervals and @service_level_intervals, depending on @metric_type.
	// If @metric_type is FTE_REQUIRED_VS_ACHIEVED_SIMPLE then the intervals will be stored in @fte_occupancy_intervals
	// If @metric_type is SERVICE_LEVEL_ANALYSIS then the intervals will be stored in @service_level_intervals
	// Interval set comparing the number of FTE required to the number achieved.
	FteOccupancyIntervals []*FTERequiredVsAchievedOccupancyInterval `protobuf:"bytes,12,rep,name=fte_occupancy_intervals,json=fteOccupancyIntervals,proto3" json:"fte_occupancy_intervals,omitempty"`
	// Interval set checking the service level achieved as a percentage.
	ServiceLevelIntervals []*ServiceLevelInterval `protobuf:"bytes,13,rep,name=service_level_intervals,json=serviceLevelIntervals,proto3" json:"service_level_intervals,omitempty"`
	// Pointer to skill collection.
	SkillCollection *commons.SkillProfileCategory `protobuf:"bytes,14,opt,name=skill_collection,json=skillCollection,proto3" json:"skill_collection,omitempty"`
	// The total FTE required over the @date_range, as determined by the forecast.
	TotalRequiredFte float32 `protobuf:"fixed32,15,opt,name=total_required_fte,json=totalRequiredFte,proto3" json:"total_required_fte,omitempty"`
	// The total FTE the the schedule is likely to address with the current shift instances.
	TotalAchievedFte float32 `protobuf:"fixed32,16,opt,name=total_achieved_fte,json=totalAchievedFte,proto3" json:"total_achieved_fte,omitempty"`
	// Total count of FTE scheduled to be on the phone / productive for a specific interval / duration of time.
	TotalProductiveFte float32 `protobuf:"fixed32,17,opt,name=total_productive_fte,json=totalProductiveFte,proto3" json:"total_productive_fte,omitempty"`
	// The total FTE, minus shrinkage, the the schedule is likely to address with the current shift instances.
	TotalAchievedFteWithShrinkageApplied float32 `protobuf:"fixed32,18,opt,name=total_achieved_fte_with_shrinkage_applied,json=totalAchievedFteWithShrinkageApplied,proto3" json:"total_achieved_fte_with_shrinkage_applied,omitempty"`
	// Total count of FTE, minus shrinkage, scheduled to be on the phone / productive / duration of time.
	TotalProductiveFteWithShrinkageApplied float32 `protobuf:"fixed32,19,opt,name=total_productive_fte_with_shrinkage_applied,json=totalProductiveFteWithShrinkageApplied,proto3" json:"total_productive_fte_with_shrinkage_applied,omitempty"`
}

func (x *PerformanceMetricForSkillCollectionV2) Reset() {
	*x = PerformanceMetricForSkillCollectionV2{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[260]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceMetricForSkillCollectionV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMetricForSkillCollectionV2) ProtoMessage() {}

func (x *PerformanceMetricForSkillCollectionV2) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[260]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMetricForSkillCollectionV2.ProtoReflect.Descriptor instead.
func (*PerformanceMetricForSkillCollectionV2) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{260}
}

func (x *PerformanceMetricForSkillCollectionV2) GetDateRange() *commons.DatetimeRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *PerformanceMetricForSkillCollectionV2) GetTotalFteIntervalsRequired() float32 {
	if x != nil {
		return x.TotalFteIntervalsRequired
	}
	return 0
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *PerformanceMetricForSkillCollectionV2) GetTotalFteIntervalsAchieved() float32 {
	if x != nil {
		return x.TotalFteIntervalsAchieved
	}
	return 0
}

func (x *PerformanceMetricForSkillCollectionV2) GetNumIntervalsWithCallFtes() int32 {
	if x != nil {
		return x.NumIntervalsWithCallFtes
	}
	return 0
}

func (x *PerformanceMetricForSkillCollectionV2) GetNumIntervalsWithShiftFtes() int32 {
	if x != nil {
		return x.NumIntervalsWithShiftFtes
	}
	return 0
}

func (x *PerformanceMetricForSkillCollectionV2) GetNumIntervalsWithCallFtesButNoShifts() int32 {
	if x != nil {
		return x.NumIntervalsWithCallFtesButNoShifts
	}
	return 0
}

func (x *PerformanceMetricForSkillCollectionV2) GetNumIntervalsWithShiftsButNoCallFtes() int32 {
	if x != nil {
		return x.NumIntervalsWithShiftsButNoCallFtes
	}
	return 0
}

func (x *PerformanceMetricForSkillCollectionV2) GetTotalUnderscheduledCallFtes() float32 {
	if x != nil {
		return x.TotalUnderscheduledCallFtes
	}
	return 0
}

func (x *PerformanceMetricForSkillCollectionV2) GetTotalOverscheduledCallFtes() float32 {
	if x != nil {
		return x.TotalOverscheduledCallFtes
	}
	return 0
}

func (x *PerformanceMetricForSkillCollectionV2) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *PerformanceMetricForSkillCollectionV2) GetMetricType() commons.PerformanceMetricType {
	if x != nil {
		return x.MetricType
	}
	return commons.PerformanceMetricType(0)
}

func (x *PerformanceMetricForSkillCollectionV2) GetFteOccupancyIntervals() []*FTERequiredVsAchievedOccupancyInterval {
	if x != nil {
		return x.FteOccupancyIntervals
	}
	return nil
}

func (x *PerformanceMetricForSkillCollectionV2) GetServiceLevelIntervals() []*ServiceLevelInterval {
	if x != nil {
		return x.ServiceLevelIntervals
	}
	return nil
}

func (x *PerformanceMetricForSkillCollectionV2) GetSkillCollection() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillCollection
	}
	return nil
}

func (x *PerformanceMetricForSkillCollectionV2) GetTotalRequiredFte() float32 {
	if x != nil {
		return x.TotalRequiredFte
	}
	return 0
}

func (x *PerformanceMetricForSkillCollectionV2) GetTotalAchievedFte() float32 {
	if x != nil {
		return x.TotalAchievedFte
	}
	return 0
}

func (x *PerformanceMetricForSkillCollectionV2) GetTotalProductiveFte() float32 {
	if x != nil {
		return x.TotalProductiveFte
	}
	return 0
}

func (x *PerformanceMetricForSkillCollectionV2) GetTotalAchievedFteWithShrinkageApplied() float32 {
	if x != nil {
		return x.TotalAchievedFteWithShrinkageApplied
	}
	return 0
}

func (x *PerformanceMetricForSkillCollectionV2) GetTotalProductiveFteWithShrinkageApplied() float32 {
	if x != nil {
		return x.TotalProductiveFteWithShrinkageApplied
	}
	return 0
}

// PerformanceMetricV2.
type PerformanceMetricV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime range over which the metrics were determined.
	DateRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	TotalFteIntervalsRequired float32 `protobuf:"fixed32,2,opt,name=total_fte_intervals_required,json=totalFteIntervalsRequired,proto3" json:"total_fte_intervals_required,omitempty"`
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	TotalFteIntervalsAchieved           float32 `protobuf:"fixed32,3,opt,name=total_fte_intervals_achieved,json=totalFteIntervalsAchieved,proto3" json:"total_fte_intervals_achieved,omitempty"`
	NumIntervalsWithCallFtes            int32   `protobuf:"varint,4,opt,name=num_intervals_with_call_ftes,json=numIntervalsWithCallFtes,proto3" json:"num_intervals_with_call_ftes,omitempty"`
	NumIntervalsWithShiftFtes           int32   `protobuf:"varint,5,opt,name=num_intervals_with_shift_ftes,json=numIntervalsWithShiftFtes,proto3" json:"num_intervals_with_shift_ftes,omitempty"`
	NumIntervalsWithCallFtesButNoShifts int32   `protobuf:"varint,6,opt,name=num_intervals_with_call_ftes_but_no_shifts,json=numIntervalsWithCallFtesButNoShifts,proto3" json:"num_intervals_with_call_ftes_but_no_shifts,omitempty"`
	NumIntervalsWithShiftsButNoCallFtes int32   `protobuf:"varint,7,opt,name=num_intervals_with_shifts_but_no_call_ftes,json=numIntervalsWithShiftsButNoCallFtes,proto3" json:"num_intervals_with_shifts_but_no_call_ftes,omitempty"`
	TotalUnderscheduledCallFtes         float32 `protobuf:"fixed32,8,opt,name=total_underscheduled_call_ftes,json=totalUnderscheduledCallFtes,proto3" json:"total_underscheduled_call_ftes,omitempty"`
	TotalOverscheduledCallFtes          float32 `protobuf:"fixed32,9,opt,name=total_overscheduled_call_ftes,json=totalOverscheduledCallFtes,proto3" json:"total_overscheduled_call_ftes,omitempty"`
	// Width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,10,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// The type of metric being reported.
	MetricType commons.PerformanceMetricType `protobuf:"varint,11,opt,name=metric_type,json=metricType,proto3,enum=api.commons.PerformanceMetricType" json:"metric_type,omitempty"`
	// One value will be set between @fte_occupancy_intervals and @service_level_intervals, depending on @metric_type.
	// If @metric_type is FTE_REQUIRED_VS_ACHIEVED_SIMPLE then the intervals will be stored in @fte_occupancy_intervals
	// If @metric_type is SERVICE_LEVEL_ANALYSIS then the intervals will be stored in @service_level_intervals
	// Interval set comparing the number of FTE required to the number achieved.
	FteOccupancyIntervals []*FTERequiredVsAchievedOccupancyInterval `protobuf:"bytes,12,rep,name=fte_occupancy_intervals,json=fteOccupancyIntervals,proto3" json:"fte_occupancy_intervals,omitempty"`
	// Interval set checking the service level achieved as a percentage.
	ServiceLevelIntervals []*ServiceLevelInterval `protobuf:"bytes,13,rep,name=service_level_intervals,json=serviceLevelIntervals,proto3" json:"service_level_intervals,omitempty"`
	// Per-skill metrics.
	MetricsBySkillCollection []*PerformanceMetricForSkillCollectionV2 `protobuf:"bytes,14,rep,name=metrics_by_skill_collection,json=metricsBySkillCollection,proto3" json:"metrics_by_skill_collection,omitempty"`
	// The total FTE required over the @date_range, as determined by the forecast.
	TotalRequiredFte float32 `protobuf:"fixed32,15,opt,name=total_required_fte,json=totalRequiredFte,proto3" json:"total_required_fte,omitempty"`
	// The total FTE the the schedule is likely to address with the current shift instances.
	TotalAchievedFte float32 `protobuf:"fixed32,16,opt,name=total_achieved_fte,json=totalAchievedFte,proto3" json:"total_achieved_fte,omitempty"`
	// Total count of FTE scheduled to be on the phone / productive for a specific interval / duration of time.
	TotalProductiveFte float32 `protobuf:"fixed32,17,opt,name=total_productive_fte,json=totalProductiveFte,proto3" json:"total_productive_fte,omitempty"`
	// The total FTE, minus shrinkage, the the schedule is likely to address with the current shift instances.
	TotalAchievedFteWithShrinkageApplied float32 `protobuf:"fixed32,18,opt,name=total_achieved_fte_with_shrinkage_applied,json=totalAchievedFteWithShrinkageApplied,proto3" json:"total_achieved_fte_with_shrinkage_applied,omitempty"`
	// Total count of FTE, minus shrinkage, scheduled to be on the phone / productive / duration of time.
	TotalProductiveFteWithShrinkageApplied float32 `protobuf:"fixed32,19,opt,name=total_productive_fte_with_shrinkage_applied,json=totalProductiveFteWithShrinkageApplied,proto3" json:"total_productive_fte_with_shrinkage_applied,omitempty"`
}

func (x *PerformanceMetricV2) Reset() {
	*x = PerformanceMetricV2{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[261]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceMetricV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMetricV2) ProtoMessage() {}

func (x *PerformanceMetricV2) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[261]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMetricV2.ProtoReflect.Descriptor instead.
func (*PerformanceMetricV2) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{261}
}

func (x *PerformanceMetricV2) GetDateRange() *commons.DatetimeRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *PerformanceMetricV2) GetTotalFteIntervalsRequired() float32 {
	if x != nil {
		return x.TotalFteIntervalsRequired
	}
	return 0
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *PerformanceMetricV2) GetTotalFteIntervalsAchieved() float32 {
	if x != nil {
		return x.TotalFteIntervalsAchieved
	}
	return 0
}

func (x *PerformanceMetricV2) GetNumIntervalsWithCallFtes() int32 {
	if x != nil {
		return x.NumIntervalsWithCallFtes
	}
	return 0
}

func (x *PerformanceMetricV2) GetNumIntervalsWithShiftFtes() int32 {
	if x != nil {
		return x.NumIntervalsWithShiftFtes
	}
	return 0
}

func (x *PerformanceMetricV2) GetNumIntervalsWithCallFtesButNoShifts() int32 {
	if x != nil {
		return x.NumIntervalsWithCallFtesButNoShifts
	}
	return 0
}

func (x *PerformanceMetricV2) GetNumIntervalsWithShiftsButNoCallFtes() int32 {
	if x != nil {
		return x.NumIntervalsWithShiftsButNoCallFtes
	}
	return 0
}

func (x *PerformanceMetricV2) GetTotalUnderscheduledCallFtes() float32 {
	if x != nil {
		return x.TotalUnderscheduledCallFtes
	}
	return 0
}

func (x *PerformanceMetricV2) GetTotalOverscheduledCallFtes() float32 {
	if x != nil {
		return x.TotalOverscheduledCallFtes
	}
	return 0
}

func (x *PerformanceMetricV2) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *PerformanceMetricV2) GetMetricType() commons.PerformanceMetricType {
	if x != nil {
		return x.MetricType
	}
	return commons.PerformanceMetricType(0)
}

func (x *PerformanceMetricV2) GetFteOccupancyIntervals() []*FTERequiredVsAchievedOccupancyInterval {
	if x != nil {
		return x.FteOccupancyIntervals
	}
	return nil
}

func (x *PerformanceMetricV2) GetServiceLevelIntervals() []*ServiceLevelInterval {
	if x != nil {
		return x.ServiceLevelIntervals
	}
	return nil
}

func (x *PerformanceMetricV2) GetMetricsBySkillCollection() []*PerformanceMetricForSkillCollectionV2 {
	if x != nil {
		return x.MetricsBySkillCollection
	}
	return nil
}

func (x *PerformanceMetricV2) GetTotalRequiredFte() float32 {
	if x != nil {
		return x.TotalRequiredFte
	}
	return 0
}

func (x *PerformanceMetricV2) GetTotalAchievedFte() float32 {
	if x != nil {
		return x.TotalAchievedFte
	}
	return 0
}

func (x *PerformanceMetricV2) GetTotalProductiveFte() float32 {
	if x != nil {
		return x.TotalProductiveFte
	}
	return 0
}

func (x *PerformanceMetricV2) GetTotalAchievedFteWithShrinkageApplied() float32 {
	if x != nil {
		return x.TotalAchievedFteWithShrinkageApplied
	}
	return 0
}

func (x *PerformanceMetricV2) GetTotalProductiveFteWithShrinkageApplied() float32 {
	if x != nil {
		return x.TotalProductiveFteWithShrinkageApplied
	}
	return 0
}

type PerformanceMetricV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Performance Metrics for all skill collections over the measured datetime range.
	MetricsAllSkills *Basic_PerformanceMetricV3 `protobuf:"bytes,1,opt,name=metrics_all_skills,json=metricsAllSkills,proto3" json:"metrics_all_skills,omitempty"`
	// Performance Metrics sorted by skill collection over the measured datetime range.
	MetricsBySkillCollection []*PerformanceMetricV3_MetricByCollection `protobuf:"bytes,2,rep,name=metrics_by_skill_collection,json=metricsBySkillCollection,proto3" json:"metrics_by_skill_collection,omitempty"`
}

func (x *PerformanceMetricV3) Reset() {
	*x = PerformanceMetricV3{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[262]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceMetricV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMetricV3) ProtoMessage() {}

func (x *PerformanceMetricV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[262]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMetricV3.ProtoReflect.Descriptor instead.
func (*PerformanceMetricV3) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{262}
}

func (x *PerformanceMetricV3) GetMetricsAllSkills() *Basic_PerformanceMetricV3 {
	if x != nil {
		return x.MetricsAllSkills
	}
	return nil
}

func (x *PerformanceMetricV3) GetMetricsBySkillCollection() []*PerformanceMetricV3_MetricByCollection {
	if x != nil {
		return x.MetricsBySkillCollection
	}
	return nil
}

// Defines a class that contains a Performance Metric for skill collections with a set of metric by interval
type Basic_PerformanceMetricV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime range over which the metrics were determined.
	DateRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// Width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,2,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// The total FTE required over the @date_range, as determined by the forecast.
	TotalRequiredFte float32 `protobuf:"fixed32,3,opt,name=total_required_fte,json=totalRequiredFte,proto3" json:"total_required_fte,omitempty"`
	// The total FTE the the schedule is likely to address with the current shift instances.
	TotalAchievedFte float32 `protobuf:"fixed32,4,opt,name=total_achieved_fte,json=totalAchievedFte,proto3" json:"total_achieved_fte,omitempty"`
	// Total count of FTE scheduled to be on the phone / productive for a specific interval / duration of time.
	TotalProductiveFte float32 `protobuf:"fixed32,5,opt,name=total_productive_fte,json=totalProductiveFte,proto3" json:"total_productive_fte,omitempty"`
	// The total FTE, minus shrinkage, the the schedule is likely to address with the current shift instances.
	TotalAchievedFteWithShrinkageApplied float32 `protobuf:"fixed32,6,opt,name=total_achieved_fte_with_shrinkage_applied,json=totalAchievedFteWithShrinkageApplied,proto3" json:"total_achieved_fte_with_shrinkage_applied,omitempty"`
	// Total count of FTE, minus shrinkage, scheduled to be on the phone / productive / duration of time.
	TotalProductiveFteWithShrinkageApplied float32 `protobuf:"fixed32,7,opt,name=total_productive_fte_with_shrinkage_applied,json=totalProductiveFteWithShrinkageApplied,proto3" json:"total_productive_fte_with_shrinkage_applied,omitempty"`
	// Number of intervals in the @date_range with predicted calls.
	NumIntervalsWithCallFtes int32 `protobuf:"varint,8,opt,name=num_intervals_with_call_ftes,json=numIntervalsWithCallFtes,proto3" json:"num_intervals_with_call_ftes,omitempty"`
	// Number of intervals in the @date_range with scheduled shifts.
	NumIntervalsWithShiftFtes int32 `protobuf:"varint,9,opt,name=num_intervals_with_shift_ftes,json=numIntervalsWithShiftFtes,proto3" json:"num_intervals_with_shift_ftes,omitempty"`
	// Number of intervals in @date_range with predicted calls but no scheduled shifts.
	NumIntervalsWithCallFtesButNoShifts int32 `protobuf:"varint,10,opt,name=num_intervals_with_call_ftes_but_no_shifts,json=numIntervalsWithCallFtesButNoShifts,proto3" json:"num_intervals_with_call_ftes_but_no_shifts,omitempty"`
	// Number of intervals in @date_range with scheduled shifts but no predicted calls.
	NumIntervalsWithShiftsButNoCallFtes int32 `protobuf:"varint,11,opt,name=num_intervals_with_shifts_but_no_call_ftes,json=numIntervalsWithShiftsButNoCallFtes,proto3" json:"num_intervals_with_shifts_but_no_call_ftes,omitempty"`
	// Total intervals with not enough scheduled FTE's to meet predicted calls.
	TotalUnderscheduledCallFtes float32 `protobuf:"fixed32,12,opt,name=total_underscheduled_call_ftes,json=totalUnderscheduledCallFtes,proto3" json:"total_underscheduled_call_ftes,omitempty"`
	// Total intervals with more scheduled FTE's than required to meet predicted calls.
	TotalOverscheduledCallFtes float32 `protobuf:"fixed32,13,opt,name=total_overscheduled_call_ftes,json=totalOverscheduledCallFtes,proto3" json:"total_overscheduled_call_ftes,omitempty"`
	// Percent of of calls where the service level is achieved.
	ServiceLevelAchievedPercentCalls float32 `protobuf:"fixed32,14,opt,name=service_level_achieved_percent_calls,json=serviceLevelAchievedPercentCalls,proto3" json:"service_level_achieved_percent_calls,omitempty"`
	// The target seconds required to achieve the service level.
	ServiceLevelAchievedTargetSeconds int32 `protobuf:"varint,15,opt,name=service_level_achieved_target_seconds,json=serviceLevelAchievedTargetSeconds,proto3" json:"service_level_achieved_target_seconds,omitempty"`
	// Estimated number of agents required to meet the target service level.
	EstimatedTotalAgentShortfallForServiceLevel int32 `protobuf:"varint,16,opt,name=estimated_total_agent_shortfall_for_service_level,json=estimatedTotalAgentShortfallForServiceLevel,proto3" json:"estimated_total_agent_shortfall_for_service_level,omitempty"`
	// A list of metric intervals spanning @date_range.
	MetricIntervals []*V3_MetricIntervalStat `protobuf:"bytes,17,rep,name=metric_intervals,json=metricIntervals,proto3" json:"metric_intervals,omitempty"`
}

func (x *Basic_PerformanceMetricV3) Reset() {
	*x = Basic_PerformanceMetricV3{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[263]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Basic_PerformanceMetricV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Basic_PerformanceMetricV3) ProtoMessage() {}

func (x *Basic_PerformanceMetricV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[263]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Basic_PerformanceMetricV3.ProtoReflect.Descriptor instead.
func (*Basic_PerformanceMetricV3) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{263}
}

func (x *Basic_PerformanceMetricV3) GetDateRange() *commons.DatetimeRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *Basic_PerformanceMetricV3) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetTotalRequiredFte() float32 {
	if x != nil {
		return x.TotalRequiredFte
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetTotalAchievedFte() float32 {
	if x != nil {
		return x.TotalAchievedFte
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetTotalProductiveFte() float32 {
	if x != nil {
		return x.TotalProductiveFte
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetTotalAchievedFteWithShrinkageApplied() float32 {
	if x != nil {
		return x.TotalAchievedFteWithShrinkageApplied
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetTotalProductiveFteWithShrinkageApplied() float32 {
	if x != nil {
		return x.TotalProductiveFteWithShrinkageApplied
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetNumIntervalsWithCallFtes() int32 {
	if x != nil {
		return x.NumIntervalsWithCallFtes
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetNumIntervalsWithShiftFtes() int32 {
	if x != nil {
		return x.NumIntervalsWithShiftFtes
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetNumIntervalsWithCallFtesButNoShifts() int32 {
	if x != nil {
		return x.NumIntervalsWithCallFtesButNoShifts
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetNumIntervalsWithShiftsButNoCallFtes() int32 {
	if x != nil {
		return x.NumIntervalsWithShiftsButNoCallFtes
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetTotalUnderscheduledCallFtes() float32 {
	if x != nil {
		return x.TotalUnderscheduledCallFtes
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetTotalOverscheduledCallFtes() float32 {
	if x != nil {
		return x.TotalOverscheduledCallFtes
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetServiceLevelAchievedPercentCalls() float32 {
	if x != nil {
		return x.ServiceLevelAchievedPercentCalls
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetServiceLevelAchievedTargetSeconds() int32 {
	if x != nil {
		return x.ServiceLevelAchievedTargetSeconds
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetEstimatedTotalAgentShortfallForServiceLevel() int32 {
	if x != nil {
		return x.EstimatedTotalAgentShortfallForServiceLevel
	}
	return 0
}

func (x *Basic_PerformanceMetricV3) GetMetricIntervals() []*V3_MetricIntervalStat {
	if x != nil {
		return x.MetricIntervals
	}
	return nil
}

type V3_MetricIntervalStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start time of the interval.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// Required FTEs for the interval.
	RequiredFte float32 `protobuf:"fixed32,2,opt,name=required_fte,json=requiredFte,proto3" json:"required_fte,omitempty"`
	// Achieved FTEs for the interval.
	AchievedFte float32 `protobuf:"fixed32,3,opt,name=achieved_fte,json=achievedFte,proto3" json:"achieved_fte,omitempty"`
	// Achieved FTEs for the interval after shrinkage is applied.
	AchievedFteWithShrinkageApplied float32 `protobuf:"fixed32,4,opt,name=achieved_fte_with_shrinkage_applied,json=achievedFteWithShrinkageApplied,proto3" json:"achieved_fte_with_shrinkage_applied,omitempty"`
	// Number for Productive FTEs achieved during the interval.
	ProductiveFte float32 `protobuf:"fixed32,5,opt,name=productive_fte,json=productiveFte,proto3" json:"productive_fte,omitempty"`
	// Productive FTEs achieved after shrinkage is applied.
	ProductiveFteWithShrinkageApplied float32 `protobuf:"fixed32,6,opt,name=productive_fte_with_shrinkage_applied,json=productiveFteWithShrinkageApplied,proto3" json:"productive_fte_with_shrinkage_applied,omitempty"`
	// The achieved service level percent for the interval.
	AchievedServiceLevelPercent float32 `protobuf:"fixed32,7,opt,name=achieved_service_level_percent,json=achievedServiceLevelPercent,proto3" json:"achieved_service_level_percent,omitempty"`
	// Estimated number of additional agents required to achieve the target service level.
	EstimatedAgentShortfallForTargetServiceLevel float32 `protobuf:"fixed32,8,opt,name=estimated_agent_shortfall_for_target_service_level,json=estimatedAgentShortfallForTargetServiceLevel,proto3" json:"estimated_agent_shortfall_for_target_service_level,omitempty"`
	// Number of calls predicted for the interval.
	NumCalls int32 `protobuf:"varint,9,opt,name=num_calls,json=numCalls,proto3" json:"num_calls,omitempty"`
	// Number of agents scheduled to work during the interval.
	NumAgents int32 `protobuf:"varint,10,opt,name=num_agents,json=numAgents,proto3" json:"num_agents,omitempty"`
	// Number of agents required via erlang calculation.
	ErlangRequiredAgents int32 `protobuf:"varint,11,opt,name=erlang_required_agents,json=erlangRequiredAgents,proto3" json:"erlang_required_agents,omitempty"`
}

func (x *V3_MetricIntervalStat) Reset() {
	*x = V3_MetricIntervalStat{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[264]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *V3_MetricIntervalStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V3_MetricIntervalStat) ProtoMessage() {}

func (x *V3_MetricIntervalStat) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[264]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V3_MetricIntervalStat.ProtoReflect.Descriptor instead.
func (*V3_MetricIntervalStat) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{264}
}

func (x *V3_MetricIntervalStat) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *V3_MetricIntervalStat) GetRequiredFte() float32 {
	if x != nil {
		return x.RequiredFte
	}
	return 0
}

func (x *V3_MetricIntervalStat) GetAchievedFte() float32 {
	if x != nil {
		return x.AchievedFte
	}
	return 0
}

func (x *V3_MetricIntervalStat) GetAchievedFteWithShrinkageApplied() float32 {
	if x != nil {
		return x.AchievedFteWithShrinkageApplied
	}
	return 0
}

func (x *V3_MetricIntervalStat) GetProductiveFte() float32 {
	if x != nil {
		return x.ProductiveFte
	}
	return 0
}

func (x *V3_MetricIntervalStat) GetProductiveFteWithShrinkageApplied() float32 {
	if x != nil {
		return x.ProductiveFteWithShrinkageApplied
	}
	return 0
}

func (x *V3_MetricIntervalStat) GetAchievedServiceLevelPercent() float32 {
	if x != nil {
		return x.AchievedServiceLevelPercent
	}
	return 0
}

func (x *V3_MetricIntervalStat) GetEstimatedAgentShortfallForTargetServiceLevel() float32 {
	if x != nil {
		return x.EstimatedAgentShortfallForTargetServiceLevel
	}
	return 0
}

func (x *V3_MetricIntervalStat) GetNumCalls() int32 {
	if x != nil {
		return x.NumCalls
	}
	return 0
}

func (x *V3_MetricIntervalStat) GetNumAgents() int32 {
	if x != nil {
		return x.NumAgents
	}
	return 0
}

func (x *V3_MetricIntervalStat) GetErlangRequiredAgents() int32 {
	if x != nil {
		return x.ErlangRequiredAgents
	}
	return 0
}

// Represents a service level interval.
type ServiceLevelInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start time of the interval.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// The service level achieved as a percent value, ranging from 0.0 to 1.0
	ServiceLevelAchieved float32 `protobuf:"fixed32,2,opt,name=service_level_achieved,json=serviceLevelAchieved,proto3" json:"service_level_achieved,omitempty"`
}

func (x *ServiceLevelInterval) Reset() {
	*x = ServiceLevelInterval{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[265]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceLevelInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLevelInterval) ProtoMessage() {}

func (x *ServiceLevelInterval) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[265]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLevelInterval.ProtoReflect.Descriptor instead.
func (*ServiceLevelInterval) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{265}
}

func (x *ServiceLevelInterval) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *ServiceLevelInterval) GetServiceLevelAchieved() float32 {
	if x != nil {
		return x.ServiceLevelAchieved
	}
	return 0
}

// Deprecated.
// Represents an fte required vs achieved interval.
//
// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
type FTERequiredVsAchievedInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start time of the interval.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// Number of required calls in the interval.
	RequiredCalls int32 `protobuf:"varint,2,opt,name=required_calls,json=requiredCalls,proto3" json:"required_calls,omitempty"`
	// Number of achieved FTE's in the interval.
	AchievedFtes int32 `protobuf:"varint,3,opt,name=achieved_ftes,json=achievedFtes,proto3" json:"achieved_ftes,omitempty"`
}

func (x *FTERequiredVsAchievedInterval) Reset() {
	*x = FTERequiredVsAchievedInterval{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[266]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FTERequiredVsAchievedInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FTERequiredVsAchievedInterval) ProtoMessage() {}

func (x *FTERequiredVsAchievedInterval) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[266]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FTERequiredVsAchievedInterval.ProtoReflect.Descriptor instead.
func (*FTERequiredVsAchievedInterval) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{266}
}

func (x *FTERequiredVsAchievedInterval) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *FTERequiredVsAchievedInterval) GetRequiredCalls() int32 {
	if x != nil {
		return x.RequiredCalls
	}
	return 0
}

func (x *FTERequiredVsAchievedInterval) GetAchievedFtes() int32 {
	if x != nil {
		return x.AchievedFtes
	}
	return 0
}

type FTERequiredVsAchievedOccupancyInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	RequiredFteOccupancy float32 `protobuf:"fixed32,2,opt,name=required_fte_occupancy,json=requiredFteOccupancy,proto3" json:"required_fte_occupancy,omitempty"`
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	AchievedFteOccupancy float32 `protobuf:"fixed32,3,opt,name=achieved_fte_occupancy,json=achievedFteOccupancy,proto3" json:"achieved_fte_occupancy,omitempty"`
	// Number of required FTE in the interval.
	RequiredFte float32 `protobuf:"fixed32,4,opt,name=required_fte,json=requiredFte,proto3" json:"required_fte,omitempty"`
	// Number of achieved FTE's in the interval.
	AchievedFte float32 `protobuf:"fixed32,5,opt,name=achieved_fte,json=achievedFte,proto3" json:"achieved_fte,omitempty"`
	// Count of FTE scheduled to be on the phone / productive for a specific interval / duration of time.
	ProductiveFte float32 `protobuf:"fixed32,6,opt,name=productive_fte,json=productiveFte,proto3" json:"productive_fte,omitempty"`
	// Number of achieved FTE's, minus shrinkage, in the interval.
	AchievedFteWithShrinkageApplied float32 `protobuf:"fixed32,7,opt,name=achieved_fte_with_shrinkage_applied,json=achievedFteWithShrinkageApplied,proto3" json:"achieved_fte_with_shrinkage_applied,omitempty"`
	// Count of FTE, minus shrinkage, scheduled to be on the phone / productive / duration of time.
	ProductiveFteWithShrinkageApplied float32 `protobuf:"fixed32,8,opt,name=productive_fte_with_shrinkage_applied,json=productiveFteWithShrinkageApplied,proto3" json:"productive_fte_with_shrinkage_applied,omitempty"`
}

func (x *FTERequiredVsAchievedOccupancyInterval) Reset() {
	*x = FTERequiredVsAchievedOccupancyInterval{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[267]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FTERequiredVsAchievedOccupancyInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FTERequiredVsAchievedOccupancyInterval) ProtoMessage() {}

func (x *FTERequiredVsAchievedOccupancyInterval) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[267]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FTERequiredVsAchievedOccupancyInterval.ProtoReflect.Descriptor instead.
func (*FTERequiredVsAchievedOccupancyInterval) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{267}
}

func (x *FTERequiredVsAchievedOccupancyInterval) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *FTERequiredVsAchievedOccupancyInterval) GetRequiredFteOccupancy() float32 {
	if x != nil {
		return x.RequiredFteOccupancy
	}
	return 0
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *FTERequiredVsAchievedOccupancyInterval) GetAchievedFteOccupancy() float32 {
	if x != nil {
		return x.AchievedFteOccupancy
	}
	return 0
}

func (x *FTERequiredVsAchievedOccupancyInterval) GetRequiredFte() float32 {
	if x != nil {
		return x.RequiredFte
	}
	return 0
}

func (x *FTERequiredVsAchievedOccupancyInterval) GetAchievedFte() float32 {
	if x != nil {
		return x.AchievedFte
	}
	return 0
}

func (x *FTERequiredVsAchievedOccupancyInterval) GetProductiveFte() float32 {
	if x != nil {
		return x.ProductiveFte
	}
	return 0
}

func (x *FTERequiredVsAchievedOccupancyInterval) GetAchievedFteWithShrinkageApplied() float32 {
	if x != nil {
		return x.AchievedFteWithShrinkageApplied
	}
	return 0
}

func (x *FTERequiredVsAchievedOccupancyInterval) GetProductiveFteWithShrinkageApplied() float32 {
	if x != nil {
		return x.ProductiveFteWithShrinkageApplied
	}
	return 0
}

// Represents fte required
// Used in GetPublishedScheduleRequiredCallsRes and GetDraftScheduleRequiredCallsRes.
type RequiredCallsInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start time of the interval.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// Number of required calls in the interval.
	RequiredCalls int32 `protobuf:"varint,2,opt,name=required_calls,json=requiredCalls,proto3" json:"required_calls,omitempty"`
}

func (x *RequiredCallsInterval) Reset() {
	*x = RequiredCallsInterval{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[268]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequiredCallsInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredCallsInterval) ProtoMessage() {}

func (x *RequiredCallsInterval) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[268]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredCallsInterval.ProtoReflect.Descriptor instead.
func (*RequiredCallsInterval) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{268}
}

func (x *RequiredCallsInterval) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *RequiredCallsInterval) GetRequiredCalls() int32 {
	if x != nil {
		return x.RequiredCalls
	}
	return 0
}

// Represents a shift instance
type ShiftInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the shift instance.
	ShiftInstanceSid int64 `protobuf:"varint,1,opt,name=shift_instance_sid,json=shiftInstanceSid,proto3" json:"shift_instance_sid,omitempty"`
	// The start time for this shift instance
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// Tells the scheduler to leave this instance in tact when performing 'build schedule'.
	// If set to false, the instance will not be locked and may be lost when a new schedule is built.
	IsLocked bool `protobuf:"varint,3,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	// The duration of this shift instance in minutes.
	WidthInMinutes int32 `protobuf:"varint,4,opt,name=width_in_minutes,json=widthInMinutes,proto3" json:"width_in_minutes,omitempty"`
	// ID of shift template that this shift instance belongs to.
	ShiftTemplateSid int64 `protobuf:"varint,5,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
	// ID of the program node that the shift instance belongs to, which may be different that the one that the @parent_shift_template_sid belongs to.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	OriginatingProgramNodeSid int64 `protobuf:"varint,6,opt,name=originating_program_node_sid,json=originatingProgramNodeSid,proto3" json:"originating_program_node_sid,omitempty"`
	// ID of the schedule that this shift instance belongs to.
	// May either point to a published or draft schedule.
	ScheduleSid int64 `protobuf:"varint,7,opt,name=schedule_sid,json=scheduleSid,proto3" json:"schedule_sid,omitempty"`
	// ID for the wfm agent that is scheduled to this shift.
	WfmAgentSid int64 `protobuf:"varint,8,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// Type of schedule that this shift instance belongs to.
	ScheduleType commons.ScheduleType `protobuf:"varint,9,opt,name=schedule_type,json=scheduleType,proto3,enum=api.commons.ScheduleType" json:"schedule_type,omitempty"`
	// The following field is only returned in List requests of the entity.
	// The ordered set of shift segments for this shift instance.
	ShiftSegments []*ShiftSegment `protobuf:"bytes,10,rep,name=shift_segments,json=shiftSegments,proto3" json:"shift_segments,omitempty"`
	// The shift template used to create this shift instance.
	ShiftTemplate *ShiftTemplate `protobuf:"bytes,11,opt,name=shift_template,json=shiftTemplate,proto3" json:"shift_template,omitempty"`
	// the percentage shrinkage expected for this shift [0.0, 100.0]. 0.0 = no shrinkage,  100 = no agents
	PlannedShrinkagePercent float32 `protobuf:"fixed32,12,opt,name=planned_shrinkage_percent,json=plannedShrinkagePercent,proto3" json:"planned_shrinkage_percent,omitempty"`
}

func (x *ShiftInstance) Reset() {
	*x = ShiftInstance{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[269]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShiftInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftInstance) ProtoMessage() {}

func (x *ShiftInstance) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[269]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftInstance.ProtoReflect.Descriptor instead.
func (*ShiftInstance) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{269}
}

func (x *ShiftInstance) GetShiftInstanceSid() int64 {
	if x != nil {
		return x.ShiftInstanceSid
	}
	return 0
}

func (x *ShiftInstance) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *ShiftInstance) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *ShiftInstance) GetWidthInMinutes() int32 {
	if x != nil {
		return x.WidthInMinutes
	}
	return 0
}

func (x *ShiftInstance) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *ShiftInstance) GetOriginatingProgramNodeSid() int64 {
	if x != nil {
		return x.OriginatingProgramNodeSid
	}
	return 0
}

func (x *ShiftInstance) GetScheduleSid() int64 {
	if x != nil {
		return x.ScheduleSid
	}
	return 0
}

func (x *ShiftInstance) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

func (x *ShiftInstance) GetScheduleType() commons.ScheduleType {
	if x != nil {
		return x.ScheduleType
	}
	return commons.ScheduleType(0)
}

func (x *ShiftInstance) GetShiftSegments() []*ShiftSegment {
	if x != nil {
		return x.ShiftSegments
	}
	return nil
}

func (x *ShiftInstance) GetShiftTemplate() *ShiftTemplate {
	if x != nil {
		return x.ShiftTemplate
	}
	return nil
}

func (x *ShiftInstance) GetPlannedShrinkagePercent() float32 {
	if x != nil {
		return x.PlannedShrinkagePercent
	}
	return 0
}

// ShiftSegmentCallStat.
// Not a top-level entity:
// * No primary-key field.
// * No org_id field.
// * No rpc endpoints, part of ShiftSegment only.
type ShiftSegmentCallStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of predicted calls.
	// A float to account for predicted calls that would extend past end of shift_segment.
	NumCalls float32 `protobuf:"fixed32,1,opt,name=num_calls,json=numCalls,proto3" json:"num_calls,omitempty"`
	// The percentage fit
	// 0.0 through 1.0, for 0% through 100%.
	PercentFit float32 `protobuf:"fixed32,2,opt,name=percent_fit,json=percentFit,proto3" json:"percent_fit,omitempty"`
	// Pointer to skill_collection.
	SkillCollection *commons.SkillProfileCategory `protobuf:"bytes,3,opt,name=skill_collection,json=skillCollection,proto3" json:"skill_collection,omitempty"`
}

func (x *ShiftSegmentCallStat) Reset() {
	*x = ShiftSegmentCallStat{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[270]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShiftSegmentCallStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftSegmentCallStat) ProtoMessage() {}

func (x *ShiftSegmentCallStat) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[270]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftSegmentCallStat.ProtoReflect.Descriptor instead.
func (*ShiftSegmentCallStat) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{270}
}

func (x *ShiftSegmentCallStat) GetNumCalls() float32 {
	if x != nil {
		return x.NumCalls
	}
	return 0
}

func (x *ShiftSegmentCallStat) GetPercentFit() float32 {
	if x != nil {
		return x.PercentFit
	}
	return 0
}

func (x *ShiftSegmentCallStat) GetSkillCollection() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillCollection
	}
	return nil
}

// Represents a shift segment
type ShiftSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this shift segment.
	ShiftSegmentSid int64 `protobuf:"varint,1,opt,name=shift_segment_sid,json=shiftSegmentSid,proto3" json:"shift_segment_sid,omitempty"`
	// ID of the shift instance that this segment belongs to.
	ShiftInstanceSid int64 `protobuf:"varint,2,opt,name=shift_instance_sid,json=shiftInstanceSid,proto3" json:"shift_instance_sid,omitempty"`
	// Order that this segment has in it's parent shift instance.
	OrderInShiftInstance int32 `protobuf:"varint,3,opt,name=order_in_shift_instance,json=orderInShiftInstance,proto3" json:"order_in_shift_instance,omitempty"`
	// Width of this shift segment in minutes.
	WidthInMinutes int32 `protobuf:"varint,4,opt,name=width_in_minutes,json=widthInMinutes,proto3" json:"width_in_minutes,omitempty"`
	// How long after the shift instance start time, the segment to begin.
	StartMinuteInShift int32 `protobuf:"varint,5,opt,name=start_minute_in_shift,json=startMinuteInShift,proto3" json:"start_minute_in_shift,omitempty"`
	// Scheduling activity sid of this shift segment.
	SchedulingActivitySid int64 `protobuf:"varint,7,opt,name=scheduling_activity_sid,json=schedulingActivitySid,proto3" json:"scheduling_activity_sid,omitempty"`
	// The following field is only returned in List requests of the entity.
	// The scheduling activity referred to by @scheduling_activity_sid
	SchedulingActivity *SchedulingActivity `protobuf:"bytes,8,opt,name=scheduling_activity,json=schedulingActivity,proto3" json:"scheduling_activity,omitempty"`
	// Per-skill call stats.
	CallStatsBySkillCollection []*ShiftSegmentCallStat `protobuf:"bytes,9,rep,name=call_stats_by_skill_collection,json=callStatsBySkillCollection,proto3" json:"call_stats_by_skill_collection,omitempty"`
}

func (x *ShiftSegment) Reset() {
	*x = ShiftSegment{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[271]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShiftSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftSegment) ProtoMessage() {}

func (x *ShiftSegment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[271]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftSegment.ProtoReflect.Descriptor instead.
func (*ShiftSegment) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{271}
}

func (x *ShiftSegment) GetShiftSegmentSid() int64 {
	if x != nil {
		return x.ShiftSegmentSid
	}
	return 0
}

func (x *ShiftSegment) GetShiftInstanceSid() int64 {
	if x != nil {
		return x.ShiftInstanceSid
	}
	return 0
}

func (x *ShiftSegment) GetOrderInShiftInstance() int32 {
	if x != nil {
		return x.OrderInShiftInstance
	}
	return 0
}

func (x *ShiftSegment) GetWidthInMinutes() int32 {
	if x != nil {
		return x.WidthInMinutes
	}
	return 0
}

func (x *ShiftSegment) GetStartMinuteInShift() int32 {
	if x != nil {
		return x.StartMinuteInShift
	}
	return 0
}

func (x *ShiftSegment) GetSchedulingActivitySid() int64 {
	if x != nil {
		return x.SchedulingActivitySid
	}
	return 0
}

func (x *ShiftSegment) GetSchedulingActivity() *SchedulingActivity {
	if x != nil {
		return x.SchedulingActivity
	}
	return nil
}

func (x *ShiftSegment) GetCallStatsBySkillCollection() []*ShiftSegmentCallStat {
	if x != nil {
		return x.CallStatsBySkillCollection
	}
	return nil
}

// Request message for the GetPublishedSchedule RPC
type GetPublishedScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date range to of the published to return.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Set to true to include shift instances.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeShiftInstances bool `protobuf:"varint,2,opt,name=include_shift_instances,json=includeShiftInstances,proto3" json:"include_shift_instances,omitempty"`
	// Set to true to include shift template in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeShiftTemplate bool `protobuf:"varint,3,opt,name=include_shift_template,json=includeShiftTemplate,proto3" json:"include_shift_template,omitempty"`
	// Set to true to include shift segments in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeShiftSegments bool `protobuf:"varint,4,opt,name=include_shift_segments,json=includeShiftSegments,proto3" json:"include_shift_segments,omitempty"`
	// Set to true to include scheduling activity in each of the returned shift segments.
	// Only effective when include_shift_instances and include_shift_segments are also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeSchedulingActivity bool `protobuf:"varint,5,opt,name=include_scheduling_activity,json=includeSchedulingActivity,proto3" json:"include_scheduling_activity,omitempty"`
	// Set to true to include non skill activity in each of the returned scheduling activities.
	// Only effective when include_scheduling_activity, include_shift_segments and include_shift_instances are also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeActivity bool `protobuf:"varint,6,opt,name=include_activity,json=includeActivity,proto3" json:"include_activity,omitempty"`
	// Optional field, if left nil all matching the given parameters will be included.
	NodeSelector *ParentEntity `protobuf:"bytes,7,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
}

func (x *GetPublishedScheduleReq) Reset() {
	*x = GetPublishedScheduleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[272]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublishedScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishedScheduleReq) ProtoMessage() {}

func (x *GetPublishedScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[272]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishedScheduleReq.ProtoReflect.Descriptor instead.
func (*GetPublishedScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{272}
}

func (x *GetPublishedScheduleReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *GetPublishedScheduleReq) GetIncludeShiftInstances() bool {
	if x != nil {
		return x.IncludeShiftInstances
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *GetPublishedScheduleReq) GetIncludeShiftTemplate() bool {
	if x != nil {
		return x.IncludeShiftTemplate
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *GetPublishedScheduleReq) GetIncludeShiftSegments() bool {
	if x != nil {
		return x.IncludeShiftSegments
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *GetPublishedScheduleReq) GetIncludeSchedulingActivity() bool {
	if x != nil {
		return x.IncludeSchedulingActivity
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *GetPublishedScheduleReq) GetIncludeActivity() bool {
	if x != nil {
		return x.IncludeActivity
	}
	return false
}

func (x *GetPublishedScheduleReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

// Response message for the GetPublishedSchedule RPC
type GetPublishedScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Published schedule found.
	PublishedSchedule *PublishedSchedule `protobuf:"bytes,1,opt,name=published_schedule,json=publishedSchedule,proto3" json:"published_schedule,omitempty"`
}

func (x *GetPublishedScheduleRes) Reset() {
	*x = GetPublishedScheduleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[273]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublishedScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishedScheduleRes) ProtoMessage() {}

func (x *GetPublishedScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[273]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishedScheduleRes.ProtoReflect.Descriptor instead.
func (*GetPublishedScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{273}
}

func (x *GetPublishedScheduleRes) GetPublishedSchedule() *PublishedSchedule {
	if x != nil {
		return x.PublishedSchedule
	}
	return nil
}

// Request message for the GetPublishedScheduleRequiredCalls RPC
type GetPublishedScheduleRequiredCallsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date range to return.
	ViewingRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=viewing_range,json=viewingRange,proto3" json:"viewing_range,omitempty"`
	// Width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,2,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
}

func (x *GetPublishedScheduleRequiredCallsReq) Reset() {
	*x = GetPublishedScheduleRequiredCallsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[274]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublishedScheduleRequiredCallsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishedScheduleRequiredCallsReq) ProtoMessage() {}

func (x *GetPublishedScheduleRequiredCallsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[274]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishedScheduleRequiredCallsReq.ProtoReflect.Descriptor instead.
func (*GetPublishedScheduleRequiredCallsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{274}
}

func (x *GetPublishedScheduleRequiredCallsReq) GetViewingRange() *commons.DatetimeRange {
	if x != nil {
		return x.ViewingRange
	}
	return nil
}

func (x *GetPublishedScheduleRequiredCallsReq) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

// Response message for the GetPublishedScheduleRequiredCalls RPC
type GetPublishedScheduleRequiredCallsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,1,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// Required-calls intervals for the published schedule.
	RequiredCallsIntervals []*RequiredCallsInterval `protobuf:"bytes,2,rep,name=required_calls_intervals,json=requiredCallsIntervals,proto3" json:"required_calls_intervals,omitempty"`
}

func (x *GetPublishedScheduleRequiredCallsRes) Reset() {
	*x = GetPublishedScheduleRequiredCallsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[275]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublishedScheduleRequiredCallsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishedScheduleRequiredCallsRes) ProtoMessage() {}

func (x *GetPublishedScheduleRequiredCallsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[275]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishedScheduleRequiredCallsRes.ProtoReflect.Descriptor instead.
func (*GetPublishedScheduleRequiredCallsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{275}
}

func (x *GetPublishedScheduleRequiredCallsRes) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *GetPublishedScheduleRequiredCallsRes) GetRequiredCallsIntervals() []*RequiredCallsInterval {
	if x != nil {
		return x.RequiredCallsIntervals
	}
	return nil
}

// Request message for the GetDraftScheduleRequiredCalls RPC
type GetDraftScheduleRequiredCallsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the draft schedule.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// Date range to return.
	ViewingRange *commons.DatetimeRange `protobuf:"bytes,2,opt,name=viewing_range,json=viewingRange,proto3" json:"viewing_range,omitempty"`
	// Width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,3,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
}

func (x *GetDraftScheduleRequiredCallsReq) Reset() {
	*x = GetDraftScheduleRequiredCallsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[276]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDraftScheduleRequiredCallsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDraftScheduleRequiredCallsReq) ProtoMessage() {}

func (x *GetDraftScheduleRequiredCallsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[276]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDraftScheduleRequiredCallsReq.ProtoReflect.Descriptor instead.
func (*GetDraftScheduleRequiredCallsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{276}
}

func (x *GetDraftScheduleRequiredCallsReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *GetDraftScheduleRequiredCallsReq) GetViewingRange() *commons.DatetimeRange {
	if x != nil {
		return x.ViewingRange
	}
	return nil
}

func (x *GetDraftScheduleRequiredCallsReq) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

// Response message for the GetDraftScheduleRequiredCalls RPC
type GetDraftScheduleRequiredCallsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,1,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// Required-calls intervals for the published schedule.
	RequiredCallsIntervals []*RequiredCallsInterval `protobuf:"bytes,2,rep,name=required_calls_intervals,json=requiredCallsIntervals,proto3" json:"required_calls_intervals,omitempty"`
}

func (x *GetDraftScheduleRequiredCallsRes) Reset() {
	*x = GetDraftScheduleRequiredCallsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[277]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDraftScheduleRequiredCallsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDraftScheduleRequiredCallsRes) ProtoMessage() {}

func (x *GetDraftScheduleRequiredCallsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[277]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDraftScheduleRequiredCallsRes.ProtoReflect.Descriptor instead.
func (*GetDraftScheduleRequiredCallsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{277}
}

func (x *GetDraftScheduleRequiredCallsRes) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *GetDraftScheduleRequiredCallsRes) GetRequiredCallsIntervals() []*RequiredCallsInterval {
	if x != nil {
		return x.RequiredCallsIntervals
	}
	return nil
}

// Request message for the CreateDraftSchedule RPC
type CreateDraftScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the draft schedule.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the draft schedule.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Range to retrieve shift instances and segments from the published schedule to use for this draft schedule.
	SchedulingRange *commons.DatetimeRange `protobuf:"bytes,3,opt,name=scheduling_range,json=schedulingRange,proto3" json:"scheduling_range,omitempty"`
	// ID of the schedule scenario that the draft schedule will be associated with.
	ScheduleScenarioSid int64 `protobuf:"varint,4,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *CreateDraftScheduleReq) Reset() {
	*x = CreateDraftScheduleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[278]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDraftScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDraftScheduleReq) ProtoMessage() {}

func (x *CreateDraftScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[278]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDraftScheduleReq.ProtoReflect.Descriptor instead.
func (*CreateDraftScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{278}
}

func (x *CreateDraftScheduleReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDraftScheduleReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateDraftScheduleReq) GetSchedulingRange() *commons.DatetimeRange {
	if x != nil {
		return x.SchedulingRange
	}
	return nil
}

func (x *CreateDraftScheduleReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the CreateDraftSchedule RPC
type CreateDraftScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created draft schedule.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
}

func (x *CreateDraftScheduleRes) Reset() {
	*x = CreateDraftScheduleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[279]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDraftScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDraftScheduleRes) ProtoMessage() {}

func (x *CreateDraftScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[279]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDraftScheduleRes.ProtoReflect.Descriptor instead.
func (*CreateDraftScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{279}
}

func (x *CreateDraftScheduleRes) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

// Request message for the UpdateDraftSchedule RPC.
type UpdateDraftScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule to be updated.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// Name of the draft schedule.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the draft schedule.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Range to retrieve shift instances and segments from the published schedule to use for this draft schedule.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,4,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Set to true to delete any shift instances belonging to the draft schedule, which are outside of the new @datetime_range.
	// If false, instances outside of the new @datetime_range will be retained, for use if the datetime range is expanded to cover the instances in the future.
	DeleteShiftsNotInRange bool `protobuf:"varint,5,opt,name=delete_shifts_not_in_range,json=deleteShiftsNotInRange,proto3" json:"delete_shifts_not_in_range,omitempty"`
	// Set to true to copy shift instances from the published schedule into regions of the schedule with no shift instances.
	CopyShiftsIntoNewRange bool `protobuf:"varint,6,opt,name=copy_shifts_into_new_range,json=copyShiftsIntoNewRange,proto3" json:"copy_shifts_into_new_range,omitempty"`
	// Set to true to get the draft schedule with the updated schedule range, shift instances, and shift segments
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	GetUpdatedShifts bool `protobuf:"varint,7,opt,name=get_updated_shifts,json=getUpdatedShifts,proto3" json:"get_updated_shifts,omitempty"`
}

func (x *UpdateDraftScheduleReq) Reset() {
	*x = UpdateDraftScheduleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[280]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDraftScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDraftScheduleReq) ProtoMessage() {}

func (x *UpdateDraftScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[280]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDraftScheduleReq.ProtoReflect.Descriptor instead.
func (*UpdateDraftScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{280}
}

func (x *UpdateDraftScheduleReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *UpdateDraftScheduleReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDraftScheduleReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateDraftScheduleReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *UpdateDraftScheduleReq) GetDeleteShiftsNotInRange() bool {
	if x != nil {
		return x.DeleteShiftsNotInRange
	}
	return false
}

func (x *UpdateDraftScheduleReq) GetCopyShiftsIntoNewRange() bool {
	if x != nil {
		return x.CopyShiftsIntoNewRange
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *UpdateDraftScheduleReq) GetGetUpdatedShifts() bool {
	if x != nil {
		return x.GetUpdatedShifts
	}
	return false
}

// Response message for the UpdateDraftSchedule RPC.
type UpdateDraftScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly updated draft schedule.
	DraftSchedule *DraftSchedule `protobuf:"bytes,1,opt,name=draft_schedule,json=draftSchedule,proto3" json:"draft_schedule,omitempty"`
}

func (x *UpdateDraftScheduleRes) Reset() {
	*x = UpdateDraftScheduleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[281]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDraftScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDraftScheduleRes) ProtoMessage() {}

func (x *UpdateDraftScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[281]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDraftScheduleRes.ProtoReflect.Descriptor instead.
func (*UpdateDraftScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{281}
}

func (x *UpdateDraftScheduleRes) GetDraftSchedule() *DraftSchedule {
	if x != nil {
		return x.DraftSchedule
	}
	return nil
}

// Request message for the BuildDraftSchedule RPC.
type BuildDraftScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// ID of the node's schedule scenario sid.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Datetime range to set for the schedule scenario used to make the draft schedule.
	// If left blank, the current scheduling range for the scenario will be used
	ScheduleScenarioSchedulingRange *commons.DatetimeRange `protobuf:"bytes,3,opt,name=schedule_scenario_scheduling_range,json=scheduleScenarioSchedulingRange,proto3" json:"schedule_scenario_scheduling_range,omitempty"`
	// The node that the shifts should be associated with.
	NodeSelector *ParentEntity `protobuf:"bytes,4,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// Set to true to include shift instances.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeShiftInstances bool `protobuf:"varint,5,opt,name=include_shift_instances,json=includeShiftInstances,proto3" json:"include_shift_instances,omitempty"`
	// Set to true to include shift template in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeShiftTemplate bool `protobuf:"varint,6,opt,name=include_shift_template,json=includeShiftTemplate,proto3" json:"include_shift_template,omitempty"`
	// Set to true to include shift segments in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeShiftSegments bool `protobuf:"varint,7,opt,name=include_shift_segments,json=includeShiftSegments,proto3" json:"include_shift_segments,omitempty"`
	// Set to true to include scheduling activity in each of the returned shift segments.
	// Only effective when include_shift_instances and include_shift_segments are also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeSchedulingActivity bool `protobuf:"varint,8,opt,name=include_scheduling_activity,json=includeSchedulingActivity,proto3" json:"include_scheduling_activity,omitempty"`
	// Set to true to include non skill activity in each of the returned scheduling activities.
	// Only effective when include_scheduling_activity, include_shift_segments and include_shift_instances are also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeActivity bool `protobuf:"varint,9,opt,name=include_activity,json=includeActivity,proto3" json:"include_activity,omitempty"`
	// Set to true to automatically generate agents to meet the requirements of the shift templates min and max agents.
	// Otherwise, no agents will be generated to meet these requirements.
	AutoGenerateAgents bool `protobuf:"varint,10,opt,name=auto_generate_agents,json=autoGenerateAgents,proto3" json:"auto_generate_agents,omitempty"`
	// The scheduling target. Not used. If given, it is still ignored.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	SchedulingTarget *SchedulingTarget `protobuf:"bytes,11,opt,name=scheduling_target,json=schedulingTarget,proto3" json:"scheduling_target,omitempty"`
}

func (x *BuildDraftScheduleReq) Reset() {
	*x = BuildDraftScheduleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[282]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildDraftScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildDraftScheduleReq) ProtoMessage() {}

func (x *BuildDraftScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[282]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildDraftScheduleReq.ProtoReflect.Descriptor instead.
func (*BuildDraftScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{282}
}

func (x *BuildDraftScheduleReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *BuildDraftScheduleReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *BuildDraftScheduleReq) GetScheduleScenarioSchedulingRange() *commons.DatetimeRange {
	if x != nil {
		return x.ScheduleScenarioSchedulingRange
	}
	return nil
}

func (x *BuildDraftScheduleReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *BuildDraftScheduleReq) GetIncludeShiftInstances() bool {
	if x != nil {
		return x.IncludeShiftInstances
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *BuildDraftScheduleReq) GetIncludeShiftTemplate() bool {
	if x != nil {
		return x.IncludeShiftTemplate
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *BuildDraftScheduleReq) GetIncludeShiftSegments() bool {
	if x != nil {
		return x.IncludeShiftSegments
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *BuildDraftScheduleReq) GetIncludeSchedulingActivity() bool {
	if x != nil {
		return x.IncludeSchedulingActivity
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *BuildDraftScheduleReq) GetIncludeActivity() bool {
	if x != nil {
		return x.IncludeActivity
	}
	return false
}

func (x *BuildDraftScheduleReq) GetAutoGenerateAgents() bool {
	if x != nil {
		return x.AutoGenerateAgents
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *BuildDraftScheduleReq) GetSchedulingTarget() *SchedulingTarget {
	if x != nil {
		return x.SchedulingTarget
	}
	return nil
}

// Response message for the BuildDraftSchedule RPC
type BuildDraftScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The built draft schedule.
	DraftSchedule *DraftSchedule `protobuf:"bytes,1,opt,name=draft_schedule,json=draftSchedule,proto3" json:"draft_schedule,omitempty"`
	// Set of diagnostic reports for the given @draft_schedule_sid.
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	// The scheduling result metric for the built schedule range.
	SchedulingResultMetric *commons.SchedulingResultMetric `protobuf:"bytes,3,opt,name=scheduling_result_metric,json=schedulingResultMetric,proto3" json:"scheduling_result_metric,omitempty"`
}

func (x *BuildDraftScheduleRes) Reset() {
	*x = BuildDraftScheduleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[283]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildDraftScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildDraftScheduleRes) ProtoMessage() {}

func (x *BuildDraftScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[283]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildDraftScheduleRes.ProtoReflect.Descriptor instead.
func (*BuildDraftScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{283}
}

func (x *BuildDraftScheduleRes) GetDraftSchedule() *DraftSchedule {
	if x != nil {
		return x.DraftSchedule
	}
	return nil
}

func (x *BuildDraftScheduleRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *BuildDraftScheduleRes) GetSchedulingResultMetric() *commons.SchedulingResultMetric {
	if x != nil {
		return x.SchedulingResultMetric
	}
	return nil
}

// Request message for PollBuildInProgress RPC
type PollBuildInProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft to check for a build in progress.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
}

func (x *PollBuildInProgressRequest) Reset() {
	*x = PollBuildInProgressRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[284]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollBuildInProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollBuildInProgressRequest) ProtoMessage() {}

func (x *PollBuildInProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[284]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollBuildInProgressRequest.ProtoReflect.Descriptor instead.
func (*PollBuildInProgressRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{284}
}

func (x *PollBuildInProgressRequest) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

// Response message for PollBuildInProgress RPC
type PollBuildInProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start time of the build in progress, if @build_in_progress is true.
	BuildStartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=build_start_datetime,json=buildStartDatetime,proto3" json:"build_start_datetime,omitempty"`
	// If True: A build is currently in progress for the draft.
	// If False: There is no build in progress for the draft.
	BuildInProgress bool `protobuf:"varint,2,opt,name=build_in_progress,json=buildInProgress,proto3" json:"build_in_progress,omitempty"`
	// The end time of the most recent build session.
	// Will be set to None if the most recent build attempt is still in progress.
	BuildEndDatetime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=build_end_datetime,json=buildEndDatetime,proto3" json:"build_end_datetime,omitempty"`
	// Status of the most recent build.
	BuildStatus commons.BuildDraftStatus `protobuf:"varint,4,opt,name=build_status,json=buildStatus,proto3,enum=api.commons.BuildDraftStatus" json:"build_status,omitempty"`
	// Any diagnostics encountered.
	// Errors encountered will be returned in the form of
	// INTERNAL_ERROR level diagnostics.
	Diagnostics []*Diagnostic `protobuf:"bytes,5,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *PollBuildInProgressResponse) Reset() {
	*x = PollBuildInProgressResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[285]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollBuildInProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollBuildInProgressResponse) ProtoMessage() {}

func (x *PollBuildInProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[285]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollBuildInProgressResponse.ProtoReflect.Descriptor instead.
func (*PollBuildInProgressResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{285}
}

func (x *PollBuildInProgressResponse) GetBuildStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.BuildStartDatetime
	}
	return nil
}

func (x *PollBuildInProgressResponse) GetBuildInProgress() bool {
	if x != nil {
		return x.BuildInProgress
	}
	return false
}

func (x *PollBuildInProgressResponse) GetBuildEndDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.BuildEndDatetime
	}
	return nil
}

func (x *PollBuildInProgressResponse) GetBuildStatus() commons.BuildDraftStatus {
	if x != nil {
		return x.BuildStatus
	}
	return commons.BuildDraftStatus(0)
}

func (x *PollBuildInProgressResponse) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for CancelBuildInProgress RPC
type CancelBuildInProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft to cancel the build for.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
}

func (x *CancelBuildInProgressRequest) Reset() {
	*x = CancelBuildInProgressRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[286]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelBuildInProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBuildInProgressRequest) ProtoMessage() {}

func (x *CancelBuildInProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[286]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBuildInProgressRequest.ProtoReflect.Descriptor instead.
func (*CancelBuildInProgressRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{286}
}

func (x *CancelBuildInProgressRequest) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

// Response message for CancelBuildInProgress RPC
type CancelBuildInProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if a build was cancelled.
	// False if there was not a build to cancel.
	CanceledBuild bool `protobuf:"varint,1,opt,name=canceled_build,json=canceledBuild,proto3" json:"canceled_build,omitempty"`
}

func (x *CancelBuildInProgressResponse) Reset() {
	*x = CancelBuildInProgressResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[287]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelBuildInProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBuildInProgressResponse) ProtoMessage() {}

func (x *CancelBuildInProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[287]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBuildInProgressResponse.ProtoReflect.Descriptor instead.
func (*CancelBuildInProgressResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{287}
}

func (x *CancelBuildInProgressResponse) GetCanceledBuild() bool {
	if x != nil {
		return x.CanceledBuild
	}
	return false
}

// Request message for the PublishDraftSchedule RPC
type PublishDraftScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule being published.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// Node that the shift instances will belong to.
	NodeSelector *ParentEntity `protobuf:"bytes,2,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// Date range to of the drafts to publish.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,3,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Include fields determine what the returned published schedule will include
	// Set to true to include shift instances.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeShiftInstances bool `protobuf:"varint,4,opt,name=include_shift_instances,json=includeShiftInstances,proto3" json:"include_shift_instances,omitempty"`
	// Set to true to include shift template in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeShiftTemplate bool `protobuf:"varint,5,opt,name=include_shift_template,json=includeShiftTemplate,proto3" json:"include_shift_template,omitempty"`
	// Set to true to include shift segments in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeShiftSegments bool `protobuf:"varint,6,opt,name=include_shift_segments,json=includeShiftSegments,proto3" json:"include_shift_segments,omitempty"`
	// Set to true to include scheduling activity in each of the returned shift segments.
	// Only effective when include_shift_instances and include_shift_segments are also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeSchedulingActivity bool `protobuf:"varint,7,opt,name=include_scheduling_activity,json=includeSchedulingActivity,proto3" json:"include_scheduling_activity,omitempty"`
	// Set to true to include non skill activity in each of the returned scheduling activities.
	// Only effective when include_scheduling_activity, include_shift_segments and include_shift_instances are also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeActivity bool `protobuf:"varint,8,opt,name=include_activity,json=includeActivity,proto3" json:"include_activity,omitempty"`
	// If set to true, it will publish the schedule regardless of any diagnostics errors,
	// otherwise it will return those diagnostic errors and not publish the schedule
	IgnoreDiagnosticsErrors bool `protobuf:"varint,9,opt,name=ignore_diagnostics_errors,json=ignoreDiagnosticsErrors,proto3" json:"ignore_diagnostics_errors,omitempty"`
}

func (x *PublishDraftScheduleReq) Reset() {
	*x = PublishDraftScheduleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[288]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishDraftScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDraftScheduleReq) ProtoMessage() {}

func (x *PublishDraftScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[288]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDraftScheduleReq.ProtoReflect.Descriptor instead.
func (*PublishDraftScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{288}
}

func (x *PublishDraftScheduleReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *PublishDraftScheduleReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *PublishDraftScheduleReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *PublishDraftScheduleReq) GetIncludeShiftInstances() bool {
	if x != nil {
		return x.IncludeShiftInstances
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *PublishDraftScheduleReq) GetIncludeShiftTemplate() bool {
	if x != nil {
		return x.IncludeShiftTemplate
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *PublishDraftScheduleReq) GetIncludeShiftSegments() bool {
	if x != nil {
		return x.IncludeShiftSegments
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *PublishDraftScheduleReq) GetIncludeSchedulingActivity() bool {
	if x != nil {
		return x.IncludeSchedulingActivity
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *PublishDraftScheduleReq) GetIncludeActivity() bool {
	if x != nil {
		return x.IncludeActivity
	}
	return false
}

func (x *PublishDraftScheduleReq) GetIgnoreDiagnosticsErrors() bool {
	if x != nil {
		return x.IgnoreDiagnosticsErrors
	}
	return false
}

// Response message for the PublishDraftSchedule RPC
type PublishDraftScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resulting Published schedule.
	PublishedSchedule *PublishedSchedule `protobuf:"bytes,1,opt,name=published_schedule,json=publishedSchedule,proto3" json:"published_schedule,omitempty"`
	// Any diagnostics that were produced while publishing the schedule
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *PublishDraftScheduleRes) Reset() {
	*x = PublishDraftScheduleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[289]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishDraftScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDraftScheduleRes) ProtoMessage() {}

func (x *PublishDraftScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[289]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDraftScheduleRes.ProtoReflect.Descriptor instead.
func (*PublishDraftScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{289}
}

func (x *PublishDraftScheduleRes) GetPublishedSchedule() *PublishedSchedule {
	if x != nil {
		return x.PublishedSchedule
	}
	return nil
}

func (x *PublishDraftScheduleRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the ResetDraftSchedule RPC
type ResetDraftScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule to reset.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// Date range to of the draft to reset.
	// If left blank, the full range for the draft schedule will be used by default.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,2,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Set to true to only delete unlocked shifts from @draft_schedule_sid.
	UnlockedOnly bool `protobuf:"varint,3,opt,name=unlocked_only,json=unlockedOnly,proto3" json:"unlocked_only,omitempty"`
}

func (x *ResetDraftScheduleReq) Reset() {
	*x = ResetDraftScheduleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[290]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetDraftScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetDraftScheduleReq) ProtoMessage() {}

func (x *ResetDraftScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[290]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetDraftScheduleReq.ProtoReflect.Descriptor instead.
func (*ResetDraftScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{290}
}

func (x *ResetDraftScheduleReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *ResetDraftScheduleReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *ResetDraftScheduleReq) GetUnlockedOnly() bool {
	if x != nil {
		return x.UnlockedOnly
	}
	return false
}

// Response message for the ResetDraftSchedule RPC
type ResetDraftScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of diagnostic reports for any newly created overlap conflicts..
	Diagnostics []*Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *ResetDraftScheduleRes) Reset() {
	*x = ResetDraftScheduleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[291]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetDraftScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetDraftScheduleRes) ProtoMessage() {}

func (x *ResetDraftScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[291]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetDraftScheduleRes.ProtoReflect.Descriptor instead.
func (*ResetDraftScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{291}
}

func (x *ResetDraftScheduleRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the GetDraftSchedule RPC
type GetDraftScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule to return.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// Datetime range to set for the schedule scenario used to make the draft schedule.
	// If left blank, the current scheduling range for the scenario will be used
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,2,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Set to true to include shift instances.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeShiftInstances bool `protobuf:"varint,3,opt,name=include_shift_instances,json=includeShiftInstances,proto3" json:"include_shift_instances,omitempty"`
	// Set to true to include shift template in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeShiftTemplate bool `protobuf:"varint,4,opt,name=include_shift_template,json=includeShiftTemplate,proto3" json:"include_shift_template,omitempty"`
	// Set to true to include shift segments in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeShiftSegments bool `protobuf:"varint,5,opt,name=include_shift_segments,json=includeShiftSegments,proto3" json:"include_shift_segments,omitempty"`
	// Set to true to include scheduling activity in each of the returned shift segments.
	// Only effective when include_shift_instances and include_shift_segments are also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeSchedulingActivity bool `protobuf:"varint,6,opt,name=include_scheduling_activity,json=includeSchedulingActivity,proto3" json:"include_scheduling_activity,omitempty"`
	// Set to true to include non skill activity in each of the returned scheduling activities.
	// Only effective when include_scheduling_activity, include_shift_segments and include_shift_instances are also set to true.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	IncludeActivity bool `protobuf:"varint,7,opt,name=include_activity,json=includeActivity,proto3" json:"include_activity,omitempty"`
	// Optional field, if left nil all matching the given parameters will be included.
	NodeSelector *ParentEntity `protobuf:"bytes,8,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
}

func (x *GetDraftScheduleReq) Reset() {
	*x = GetDraftScheduleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[292]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDraftScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDraftScheduleReq) ProtoMessage() {}

func (x *GetDraftScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[292]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDraftScheduleReq.ProtoReflect.Descriptor instead.
func (*GetDraftScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{292}
}

func (x *GetDraftScheduleReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *GetDraftScheduleReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *GetDraftScheduleReq) GetIncludeShiftInstances() bool {
	if x != nil {
		return x.IncludeShiftInstances
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *GetDraftScheduleReq) GetIncludeShiftTemplate() bool {
	if x != nil {
		return x.IncludeShiftTemplate
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *GetDraftScheduleReq) GetIncludeShiftSegments() bool {
	if x != nil {
		return x.IncludeShiftSegments
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *GetDraftScheduleReq) GetIncludeSchedulingActivity() bool {
	if x != nil {
		return x.IncludeSchedulingActivity
	}
	return false
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *GetDraftScheduleReq) GetIncludeActivity() bool {
	if x != nil {
		return x.IncludeActivity
	}
	return false
}

func (x *GetDraftScheduleReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

// Response message for the GetDraftSchedule RPC
type GetDraftScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Draft schedule found.
	DraftSchedule *DraftSchedule `protobuf:"bytes,1,opt,name=draft_schedule,json=draftSchedule,proto3" json:"draft_schedule,omitempty"`
}

func (x *GetDraftScheduleRes) Reset() {
	*x = GetDraftScheduleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[293]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDraftScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDraftScheduleRes) ProtoMessage() {}

func (x *GetDraftScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[293]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDraftScheduleRes.ProtoReflect.Descriptor instead.
func (*GetDraftScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{293}
}

func (x *GetDraftScheduleRes) GetDraftSchedule() *DraftSchedule {
	if x != nil {
		return x.DraftSchedule
	}
	return nil
}

// Request message for the ListDraftSchedules RPC
type ListDraftSchedulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date range to of the drafts to return.
	// If left blank, then all draft schedules for the org will be returned.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
}

func (x *ListDraftSchedulesReq) Reset() {
	*x = ListDraftSchedulesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[294]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDraftSchedulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDraftSchedulesReq) ProtoMessage() {}

func (x *ListDraftSchedulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[294]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDraftSchedulesReq.ProtoReflect.Descriptor instead.
func (*ListDraftSchedulesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{294}
}

func (x *ListDraftSchedulesReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

// Response message for the ListDraftSchedules RPC
type ListDraftSchedulesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Draft schedules found.
	DraftSchedules []*DraftSchedule `protobuf:"bytes,1,rep,name=draft_schedules,json=draftSchedules,proto3" json:"draft_schedules,omitempty"`
}

func (x *ListDraftSchedulesRes) Reset() {
	*x = ListDraftSchedulesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[295]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDraftSchedulesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDraftSchedulesRes) ProtoMessage() {}

func (x *ListDraftSchedulesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[295]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDraftSchedulesRes.ProtoReflect.Descriptor instead.
func (*ListDraftSchedulesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{295}
}

func (x *ListDraftSchedulesRes) GetDraftSchedules() []*DraftSchedule {
	if x != nil {
		return x.DraftSchedules
	}
	return nil
}

// Request message for the ClearSchedule RPC
type ClearScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The schedule to be cleared.
	ScheduleSelector *commons.ScheduleSelector `protobuf:"bytes,1,opt,name=schedule_selector,json=scheduleSelector,proto3" json:"schedule_selector,omitempty"`
	// If set, node the shifts to be delete will all be related to.
	// Otherwise, deleted shifts will not be filtered based on the node they are related to.
	NodeSelector *ParentEntity `protobuf:"bytes,2,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// If set, acts as a range to clear all shifts from.
	// Otherwise, all shifts belonging to @schedule_selector are considered within range to be cleared.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,3,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Set to delete all shifts starting before or ending after the given @datetime range.
	// Otherwise shifts overlapping the @datetime_range will be deleted.
	// Cannot be set to true if no datetime range is provided.
	InvertDatetimeRange bool `protobuf:"varint,4,opt,name=invert_datetime_range,json=invertDatetimeRange,proto3" json:"invert_datetime_range,omitempty"`
	// If set to true, only checks the start datetime of shifts when checking the @datetime_range.
	// Otherwise, any shifts that overlap the @datetime_range will be cleared.
	// If @invert_datetime_range is true, any shifts that start before or start after the @datetime_range will be deleted.
	// Cannot be set to true if no datetime range is provided.
	StartDatetimesOnly bool `protobuf:"varint,5,opt,name=start_datetimes_only,json=startDatetimesOnly,proto3" json:"start_datetimes_only,omitempty"`
	// Set to true to delete locked and unlocked shifts in the range to be cleared.
	// Otherwise, only shift instances with is_locked set to false will be deleted.
	DeleteLocked bool `protobuf:"varint,6,opt,name=delete_locked,json=deleteLocked,proto3" json:"delete_locked,omitempty"`
}

func (x *ClearScheduleReq) Reset() {
	*x = ClearScheduleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[296]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearScheduleReq) ProtoMessage() {}

func (x *ClearScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[296]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearScheduleReq.ProtoReflect.Descriptor instead.
func (*ClearScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{296}
}

func (x *ClearScheduleReq) GetScheduleSelector() *commons.ScheduleSelector {
	if x != nil {
		return x.ScheduleSelector
	}
	return nil
}

func (x *ClearScheduleReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *ClearScheduleReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *ClearScheduleReq) GetInvertDatetimeRange() bool {
	if x != nil {
		return x.InvertDatetimeRange
	}
	return false
}

func (x *ClearScheduleReq) GetStartDatetimesOnly() bool {
	if x != nil {
		return x.StartDatetimesOnly
	}
	return false
}

func (x *ClearScheduleReq) GetDeleteLocked() bool {
	if x != nil {
		return x.DeleteLocked
	}
	return false
}

// Response message for the ClearSchedule RPC
type ClearScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of diagnostic reports for the any issues encountered.
	Diagnostics []*Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *ClearScheduleRes) Reset() {
	*x = ClearScheduleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[297]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearScheduleRes) ProtoMessage() {}

func (x *ClearScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[297]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearScheduleRes.ProtoReflect.Descriptor instead.
func (*ClearScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{297}
}

func (x *ClearScheduleRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the DeleteDraftSchedule RPC
type DeleteDraftScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of draft schedule to delete.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
}

func (x *DeleteDraftScheduleReq) Reset() {
	*x = DeleteDraftScheduleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[298]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDraftScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDraftScheduleReq) ProtoMessage() {}

func (x *DeleteDraftScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[298]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDraftScheduleReq.ProtoReflect.Descriptor instead.
func (*DeleteDraftScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{298}
}

func (x *DeleteDraftScheduleReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

// Response message for the DeleteDraftSchedule RPC
type DeleteDraftScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDraftScheduleRes) Reset() {
	*x = DeleteDraftScheduleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[299]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDraftScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDraftScheduleRes) ProtoMessage() {}

func (x *DeleteDraftScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[299]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDraftScheduleRes.ProtoReflect.Descriptor instead.
func (*DeleteDraftScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{299}
}

// Request message for the ListShiftInstancesBySid RPC
type ListShiftInstancesBySidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the shift instances to list.
	ShiftInstanceSids []int64 `protobuf:"varint,1,rep,packed,name=shift_instance_sids,json=shiftInstanceSids,proto3" json:"shift_instance_sids,omitempty"`
	// If true, the shift segments will be included in the returned shift instances.
	// If false, the instances will be returned without any shift segments.
	IncludeShiftSegments bool `protobuf:"varint,2,opt,name=include_shift_segments,json=includeShiftSegments,proto3" json:"include_shift_segments,omitempty"`
	// Set to true to include shift template in the returned shift instance.
	IncludeShiftTemplate bool `protobuf:"varint,3,opt,name=include_shift_template,json=includeShiftTemplate,proto3" json:"include_shift_template,omitempty"`
	// Set to true to include scheduling activity in each of the returned shift segments.
	// Only effective when include_shift_segments is also set to true.
	IncludeSchedulingActivity bool `protobuf:"varint,4,opt,name=include_scheduling_activity,json=includeSchedulingActivity,proto3" json:"include_scheduling_activity,omitempty"`
	// Set to true to include non skill activity in each of the returned scheduling activities.
	// Only effective when include_scheduling_activity and include_shift_segments are also set to true.
	IncludeActivity bool `protobuf:"varint,5,opt,name=include_activity,json=includeActivity,proto3" json:"include_activity,omitempty"`
	// Set to true to include shift segment call stats in each of the returned shift segments.
	// Only effective when @include_shift_segments is also set to true.
	IncludeShiftSegmentCallStats bool `protobuf:"varint,6,opt,name=include_shift_segment_call_stats,json=includeShiftSegmentCallStats,proto3" json:"include_shift_segment_call_stats,omitempty"`
}

func (x *ListShiftInstancesBySidReq) Reset() {
	*x = ListShiftInstancesBySidReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[300]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShiftInstancesBySidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftInstancesBySidReq) ProtoMessage() {}

func (x *ListShiftInstancesBySidReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[300]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftInstancesBySidReq.ProtoReflect.Descriptor instead.
func (*ListShiftInstancesBySidReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{300}
}

func (x *ListShiftInstancesBySidReq) GetShiftInstanceSids() []int64 {
	if x != nil {
		return x.ShiftInstanceSids
	}
	return nil
}

func (x *ListShiftInstancesBySidReq) GetIncludeShiftSegments() bool {
	if x != nil {
		return x.IncludeShiftSegments
	}
	return false
}

func (x *ListShiftInstancesBySidReq) GetIncludeShiftTemplate() bool {
	if x != nil {
		return x.IncludeShiftTemplate
	}
	return false
}

func (x *ListShiftInstancesBySidReq) GetIncludeSchedulingActivity() bool {
	if x != nil {
		return x.IncludeSchedulingActivity
	}
	return false
}

func (x *ListShiftInstancesBySidReq) GetIncludeActivity() bool {
	if x != nil {
		return x.IncludeActivity
	}
	return false
}

func (x *ListShiftInstancesBySidReq) GetIncludeShiftSegmentCallStats() bool {
	if x != nil {
		return x.IncludeShiftSegmentCallStats
	}
	return false
}

// Response message for the ListShiftInstancesBySid RPC
type ListShiftInstancesBySidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The shift instances that match the given @shift_instance_sids.
	ShiftInstances []*ShiftInstance `protobuf:"bytes,1,rep,name=shift_instances,json=shiftInstances,proto3" json:"shift_instances,omitempty"`
}

func (x *ListShiftInstancesBySidRes) Reset() {
	*x = ListShiftInstancesBySidRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[301]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShiftInstancesBySidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftInstancesBySidRes) ProtoMessage() {}

func (x *ListShiftInstancesBySidRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[301]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftInstancesBySidRes.ProtoReflect.Descriptor instead.
func (*ListShiftInstancesBySidRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{301}
}

func (x *ListShiftInstancesBySidRes) GetShiftInstances() []*ShiftInstance {
	if x != nil {
		return x.ShiftInstances
	}
	return nil
}

// Request message for the CopyScheduleToSchedule RPC
type CopyScheduleToScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The schedule that shifts will be copied from.
	SourceScheduleSelector *commons.ScheduleSelector `protobuf:"bytes,1,opt,name=source_schedule_selector,json=sourceScheduleSelector,proto3" json:"source_schedule_selector,omitempty"`
	// The schedule that the shifts will be copied to.
	DestinationScheduleSelector *commons.ScheduleSelector `protobuf:"bytes,2,opt,name=destination_schedule_selector,json=destinationScheduleSelector,proto3" json:"destination_schedule_selector,omitempty"`
	// The node that the shifts to copy should be associated with.
	NodeSelector *ParentEntity `protobuf:"bytes,3,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// The datetime range over which to get the shift instance sids.
	// If no range is provided, the scheduling range for the @destination_schedule_selector will be used if it is a draft schedule, otherwise the range of the @source_schedule_selector will be used.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,4,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Set to true to copy shifts that start within the range being copied, otherwise any shift that overlaps the range will be copied.
	StartDatetimesOnly bool `protobuf:"varint,5,opt,name=start_datetimes_only,json=startDatetimesOnly,proto3" json:"start_datetimes_only,omitempty"`
	// Set to true to allow the shifts to be copied when there is a resulting overlap conflict for an agents shifts, with diagnostic warnings being returned after.
	// Otherwise, overlap conflicts will return diagnostic errors and cause no shifts to be copied.
	OverlapAsWarning bool `protobuf:"varint,6,opt,name=overlap_as_warning,json=overlapAsWarning,proto3" json:"overlap_as_warning,omitempty"`
}

func (x *CopyScheduleToScheduleReq) Reset() {
	*x = CopyScheduleToScheduleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[302]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyScheduleToScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyScheduleToScheduleReq) ProtoMessage() {}

func (x *CopyScheduleToScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[302]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyScheduleToScheduleReq.ProtoReflect.Descriptor instead.
func (*CopyScheduleToScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{302}
}

func (x *CopyScheduleToScheduleReq) GetSourceScheduleSelector() *commons.ScheduleSelector {
	if x != nil {
		return x.SourceScheduleSelector
	}
	return nil
}

func (x *CopyScheduleToScheduleReq) GetDestinationScheduleSelector() *commons.ScheduleSelector {
	if x != nil {
		return x.DestinationScheduleSelector
	}
	return nil
}

func (x *CopyScheduleToScheduleReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *CopyScheduleToScheduleReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *CopyScheduleToScheduleReq) GetStartDatetimesOnly() bool {
	if x != nil {
		return x.StartDatetimesOnly
	}
	return false
}

func (x *CopyScheduleToScheduleReq) GetOverlapAsWarning() bool {
	if x != nil {
		return x.OverlapAsWarning
	}
	return false
}

// Response message for the CopyScheduleToScheduleRes RPC
type CopyScheduleToScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of diagnostics for any errors encountered, which prevented the copy.
	// If @overlap_as_warning is set to true, warning diagnostics for overlaps may be returned after a sucessful copy.
	Diagnostics []*Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *CopyScheduleToScheduleRes) Reset() {
	*x = CopyScheduleToScheduleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[303]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyScheduleToScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyScheduleToScheduleRes) ProtoMessage() {}

func (x *CopyScheduleToScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[303]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyScheduleToScheduleRes.ProtoReflect.Descriptor instead.
func (*CopyScheduleToScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{303}
}

func (x *CopyScheduleToScheduleRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the CreateShiftInstance RPC
// Method is Unimplimented. Use CreateShiftInstanceV2 instead.
type CreateShiftInstanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule for the shift instance.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// ID of the shift template for the shift instance.
	ShiftTemplateSid int64 `protobuf:"varint,2,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
	// Start datetime of the shift instance.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// Width in minutes of the shift instance.
	WidthInMinutes int32 `protobuf:"varint,4,opt,name=width_in_minutes,json=widthInMinutes,proto3" json:"width_in_minutes,omitempty"`
	// Indicates whether the shift instance is locked.
	IsLocked bool `protobuf:"varint,5,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	// ID of the wfm agent for the shift instance. If null it will
	// create a new unassigned WfmAgent for the shift instance.
	WfmAgentSid *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// Metric types for the shift instance.
	MetricTypes []commons.PerformanceMetricType `protobuf:"varint,7,rep,packed,name=metric_types,json=metricTypes,proto3,enum=api.commons.PerformanceMetricType" json:"metric_types,omitempty"`
}

func (x *CreateShiftInstanceReq) Reset() {
	*x = CreateShiftInstanceReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[304]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShiftInstanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftInstanceReq) ProtoMessage() {}

func (x *CreateShiftInstanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[304]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftInstanceReq.ProtoReflect.Descriptor instead.
func (*CreateShiftInstanceReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{304}
}

func (x *CreateShiftInstanceReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *CreateShiftInstanceReq) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

func (x *CreateShiftInstanceReq) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *CreateShiftInstanceReq) GetWidthInMinutes() int32 {
	if x != nil {
		return x.WidthInMinutes
	}
	return 0
}

func (x *CreateShiftInstanceReq) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *CreateShiftInstanceReq) GetWfmAgentSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.WfmAgentSid
	}
	return nil
}

func (x *CreateShiftInstanceReq) GetMetricTypes() []commons.PerformanceMetricType {
	if x != nil {
		return x.MetricTypes
	}
	return nil
}

// Response message for the CreateShiftInstance RPC
type CreateShiftInstanceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shift instance that was created.
	ShiftInstance *ShiftInstance `protobuf:"bytes,1,opt,name=shift_instance,json=shiftInstance,proto3" json:"shift_instance,omitempty"`
	// Deprecated. Performance metrics that this shift instance has.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	PerformanceMetrics []*PerformanceMetric `protobuf:"bytes,2,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
	// Performance metrics that this shift instance has.
	PerformanceMetricsV2 []*PerformanceMetricV2 `protobuf:"bytes,3,rep,name=performance_metrics_v2,json=performanceMetricsV2,proto3" json:"performance_metrics_v2,omitempty"`
}

func (x *CreateShiftInstanceRes) Reset() {
	*x = CreateShiftInstanceRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[305]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShiftInstanceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftInstanceRes) ProtoMessage() {}

func (x *CreateShiftInstanceRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[305]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftInstanceRes.ProtoReflect.Descriptor instead.
func (*CreateShiftInstanceRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{305}
}

func (x *CreateShiftInstanceRes) GetShiftInstance() *ShiftInstance {
	if x != nil {
		return x.ShiftInstance
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *CreateShiftInstanceRes) GetPerformanceMetrics() []*PerformanceMetric {
	if x != nil {
		return x.PerformanceMetrics
	}
	return nil
}

func (x *CreateShiftInstanceRes) GetPerformanceMetricsV2() []*PerformanceMetricV2 {
	if x != nil {
		return x.PerformanceMetricsV2
	}
	return nil
}

// Request message for the CreateShiftInstanceV2 RPC
type CreateShiftInstanceV2Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule for the shift instance.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// ID of the shift template for the shift instance.
	ShiftTemplateSid int64 `protobuf:"varint,2,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
	// Start datetime of the shift instance.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// Indicates whether the shift instance is locked.
	IsLocked bool `protobuf:"varint,4,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	// ID of the wfm agents for the shift instance.
	// If empty it will create a new unassigned WfmAgent for the shift instance.
	// If given more than one sid, then a copy of the instance will be created for each agent.
	WfmAgentSids []int64 `protobuf:"varint,5,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
}

func (x *CreateShiftInstanceV2Req) Reset() {
	*x = CreateShiftInstanceV2Req{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[306]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShiftInstanceV2Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftInstanceV2Req) ProtoMessage() {}

func (x *CreateShiftInstanceV2Req) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[306]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftInstanceV2Req.ProtoReflect.Descriptor instead.
func (*CreateShiftInstanceV2Req) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{306}
}

func (x *CreateShiftInstanceV2Req) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *CreateShiftInstanceV2Req) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

func (x *CreateShiftInstanceV2Req) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *CreateShiftInstanceV2Req) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *CreateShiftInstanceV2Req) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

// Response message for the CreateShiftInstanceV2 RPC
type CreateShiftInstanceV2Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Any shift instances that were created.
	ShiftInstances []*ShiftInstance `protobuf:"bytes,1,rep,name=shift_instances,json=shiftInstances,proto3" json:"shift_instances,omitempty"`
	// Diagnostics to report cause if shift instances fail to build.
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *CreateShiftInstanceV2Res) Reset() {
	*x = CreateShiftInstanceV2Res{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[307]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShiftInstanceV2Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftInstanceV2Res) ProtoMessage() {}

func (x *CreateShiftInstanceV2Res) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[307]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftInstanceV2Res.ProtoReflect.Descriptor instead.
func (*CreateShiftInstanceV2Res) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{307}
}

func (x *CreateShiftInstanceV2Res) GetShiftInstances() []*ShiftInstance {
	if x != nil {
		return x.ShiftInstances
	}
	return nil
}

func (x *CreateShiftInstanceV2Res) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the CreateShiftInstanceWithSegments RPC.
type CreateShiftInstanceWithSegmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shift instance with any member shift segments and shift segment call stats to create.
	ShiftInstance *ShiftInstance `protobuf:"bytes,1,opt,name=shift_instance,json=shiftInstance,proto3" json:"shift_instance,omitempty"`
	// If set to true, it will create the shift regardless of any diagnostics errors,
	// otherwise it will return those diagnostic errors and not create the shift.
	IgnoreDiagnosticsErrors bool `protobuf:"varint,2,opt,name=ignore_diagnostics_errors,json=ignoreDiagnosticsErrors,proto3" json:"ignore_diagnostics_errors,omitempty"`
}

func (x *CreateShiftInstanceWithSegmentsRequest) Reset() {
	*x = CreateShiftInstanceWithSegmentsRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[308]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShiftInstanceWithSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftInstanceWithSegmentsRequest) ProtoMessage() {}

func (x *CreateShiftInstanceWithSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[308]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftInstanceWithSegmentsRequest.ProtoReflect.Descriptor instead.
func (*CreateShiftInstanceWithSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{308}
}

func (x *CreateShiftInstanceWithSegmentsRequest) GetShiftInstance() *ShiftInstance {
	if x != nil {
		return x.ShiftInstance
	}
	return nil
}

func (x *CreateShiftInstanceWithSegmentsRequest) GetIgnoreDiagnosticsErrors() bool {
	if x != nil {
		return x.IgnoreDiagnosticsErrors
	}
	return false
}

// Response message for the CreateShiftInstanceWitSegments RPC.
type CreateShiftInstanceWithSegmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly created shift instance and any created shift instances and shift segment call stats.
	ShiftInstance *ShiftInstance `protobuf:"bytes,1,opt,name=shift_instance,json=shiftInstance,proto3" json:"shift_instance,omitempty"`
	// Any diagnostics encountered when creating @shift_instance.
	// If ignore_diagnostics_errors is true, then any diagnostic errors will be returned as warnings.
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *CreateShiftInstanceWithSegmentsResponse) Reset() {
	*x = CreateShiftInstanceWithSegmentsResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[309]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateShiftInstanceWithSegmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftInstanceWithSegmentsResponse) ProtoMessage() {}

func (x *CreateShiftInstanceWithSegmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[309]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftInstanceWithSegmentsResponse.ProtoReflect.Descriptor instead.
func (*CreateShiftInstanceWithSegmentsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{309}
}

func (x *CreateShiftInstanceWithSegmentsResponse) GetShiftInstance() *ShiftInstance {
	if x != nil {
		return x.ShiftInstance
	}
	return nil
}

func (x *CreateShiftInstanceWithSegmentsResponse) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the SplitShiftInstance RPC
type SplitShiftInstanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the shift instance to split.
	ShiftInstanceSid int64 `protobuf:"varint,1,opt,name=shift_instance_sid,json=shiftInstanceSid,proto3" json:"shift_instance_sid,omitempty"`
	// The datetime at which to split the @shift_instance_sid.
	TimeToSplit *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_to_split,json=timeToSplit,proto3" json:"time_to_split,omitempty"`
}

func (x *SplitShiftInstanceReq) Reset() {
	*x = SplitShiftInstanceReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[310]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitShiftInstanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitShiftInstanceReq) ProtoMessage() {}

func (x *SplitShiftInstanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[310]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitShiftInstanceReq.ProtoReflect.Descriptor instead.
func (*SplitShiftInstanceReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{310}
}

func (x *SplitShiftInstanceReq) GetShiftInstanceSid() int64 {
	if x != nil {
		return x.ShiftInstanceSid
	}
	return 0
}

func (x *SplitShiftInstanceReq) GetTimeToSplit() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeToSplit
	}
	return nil
}

// Response message for the SplitShiftInstance RPC
type SplitShiftInstanceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly split shift instances and their shift segments.
	ShiftInstances []*ShiftInstance `protobuf:"bytes,1,rep,name=shift_instances,json=shiftInstances,proto3" json:"shift_instances,omitempty"`
	// Diagnostics to report if shift templates specify a larger minimum shift length than resulting shifts have.
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *SplitShiftInstanceRes) Reset() {
	*x = SplitShiftInstanceRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[311]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitShiftInstanceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitShiftInstanceRes) ProtoMessage() {}

func (x *SplitShiftInstanceRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[311]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitShiftInstanceRes.ProtoReflect.Descriptor instead.
func (*SplitShiftInstanceRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{311}
}

func (x *SplitShiftInstanceRes) GetShiftInstances() []*ShiftInstance {
	if x != nil {
		return x.ShiftInstances
	}
	return nil
}

func (x *SplitShiftInstanceRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the SwapShiftInstances RPC
type SwapShiftInstancesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agent that will swap instances with @wfm_agent_sid2.
	WfmAgentSid1 int64 `protobuf:"varint,1,opt,name=wfm_agent_sid1,json=wfmAgentSid1,proto3" json:"wfm_agent_sid1,omitempty"`
	// ID of the wfm agent that will swap instances with @wfm_agent_sid1.
	WfmAgentSid2 int64 `protobuf:"varint,2,opt,name=wfm_agent_sid2,json=wfmAgentSid2,proto3" json:"wfm_agent_sid2,omitempty"`
	// IDs of the shift instances that will be swapped.
	ShiftInstanceSids []int64 `protobuf:"varint,3,rep,packed,name=shift_instance_sids,json=shiftInstanceSids,proto3" json:"shift_instance_sids,omitempty"`
}

func (x *SwapShiftInstancesReq) Reset() {
	*x = SwapShiftInstancesReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[312]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapShiftInstancesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapShiftInstancesReq) ProtoMessage() {}

func (x *SwapShiftInstancesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[312]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapShiftInstancesReq.ProtoReflect.Descriptor instead.
func (*SwapShiftInstancesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{312}
}

func (x *SwapShiftInstancesReq) GetWfmAgentSid1() int64 {
	if x != nil {
		return x.WfmAgentSid1
	}
	return 0
}

func (x *SwapShiftInstancesReq) GetWfmAgentSid2() int64 {
	if x != nil {
		return x.WfmAgentSid2
	}
	return 0
}

func (x *SwapShiftInstancesReq) GetShiftInstanceSids() []int64 {
	if x != nil {
		return x.ShiftInstanceSids
	}
	return nil
}

// Response message for the SwapShiftInstances RPC
type SwapShiftInstancesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shift instances that were swapped.
	ShiftInstances []*ShiftInstance `protobuf:"bytes,1,rep,name=shift_instances,json=shiftInstances,proto3" json:"shift_instances,omitempty"`
	// Diagnostics for any overlapping shift instances.
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *SwapShiftInstancesRes) Reset() {
	*x = SwapShiftInstancesRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[313]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapShiftInstancesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapShiftInstancesRes) ProtoMessage() {}

func (x *SwapShiftInstancesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[313]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapShiftInstancesRes.ProtoReflect.Descriptor instead.
func (*SwapShiftInstancesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{313}
}

func (x *SwapShiftInstancesRes) GetShiftInstances() []*ShiftInstance {
	if x != nil {
		return x.ShiftInstances
	}
	return nil
}

func (x *SwapShiftInstancesRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the UpdateShiftInstance RPC
type UpdateShiftInstanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the shift instance.
	ShiftInstanceSid int64 `protobuf:"varint,1,opt,name=shift_instance_sid,json=shiftInstanceSid,proto3" json:"shift_instance_sid,omitempty"`
	// The start time for this shift instance
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// Tells the scheduler to leave this instance in tact when performing 'build schedule'.
	// If set to false, the instance will not be locked and may be lost when a new schedule is built.
	IsLocked bool `protobuf:"varint,3,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	// The duration of this shift instance in minutes.
	WidthInMinutes int32 `protobuf:"varint,4,opt,name=width_in_minutes,json=widthInMinutes,proto3" json:"width_in_minutes,omitempty"`
	// ID of the wfm agent for the shift instance. If null it will
	// create a new unassigned WfmAgent for the shift instance.
	WfmAgentSid *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// Types of metrics.
	MetricTypes []commons.PerformanceMetricType `protobuf:"varint,6,rep,packed,name=metric_types,json=metricTypes,proto3,enum=api.commons.PerformanceMetricType" json:"metric_types,omitempty"`
}

func (x *UpdateShiftInstanceReq) Reset() {
	*x = UpdateShiftInstanceReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[314]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShiftInstanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShiftInstanceReq) ProtoMessage() {}

func (x *UpdateShiftInstanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[314]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShiftInstanceReq.ProtoReflect.Descriptor instead.
func (*UpdateShiftInstanceReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{314}
}

func (x *UpdateShiftInstanceReq) GetShiftInstanceSid() int64 {
	if x != nil {
		return x.ShiftInstanceSid
	}
	return 0
}

func (x *UpdateShiftInstanceReq) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *UpdateShiftInstanceReq) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *UpdateShiftInstanceReq) GetWidthInMinutes() int32 {
	if x != nil {
		return x.WidthInMinutes
	}
	return 0
}

func (x *UpdateShiftInstanceReq) GetWfmAgentSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.WfmAgentSid
	}
	return nil
}

func (x *UpdateShiftInstanceReq) GetMetricTypes() []commons.PerformanceMetricType {
	if x != nil {
		return x.MetricTypes
	}
	return nil
}

// Response message for the UpdateShiftInstance RPC
type UpdateShiftInstanceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shift instance that was updated.
	ShiftInstance *ShiftInstance `protobuf:"bytes,1,opt,name=shift_instance,json=shiftInstance,proto3" json:"shift_instance,omitempty"`
	// Deprecated. Performance metrics that this shift instance has.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	PerformanceMetrics []*PerformanceMetric `protobuf:"bytes,2,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
	// Performance metrics that this shift instance has.
	PerformanceMetricsV2 []*PerformanceMetricV2 `protobuf:"bytes,3,rep,name=performance_metrics_v2,json=performanceMetricsV2,proto3" json:"performance_metrics_v2,omitempty"`
}

func (x *UpdateShiftInstanceRes) Reset() {
	*x = UpdateShiftInstanceRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[315]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShiftInstanceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShiftInstanceRes) ProtoMessage() {}

func (x *UpdateShiftInstanceRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[315]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShiftInstanceRes.ProtoReflect.Descriptor instead.
func (*UpdateShiftInstanceRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{315}
}

func (x *UpdateShiftInstanceRes) GetShiftInstance() *ShiftInstance {
	if x != nil {
		return x.ShiftInstance
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *UpdateShiftInstanceRes) GetPerformanceMetrics() []*PerformanceMetric {
	if x != nil {
		return x.PerformanceMetrics
	}
	return nil
}

func (x *UpdateShiftInstanceRes) GetPerformanceMetricsV2() []*PerformanceMetricV2 {
	if x != nil {
		return x.PerformanceMetricsV2
	}
	return nil
}

// Request message for the UpdateShiftInstanceV2 RPC
type UpdateShiftInstanceV2Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the shift instance to update.
	ShiftInstanceSid int64 `protobuf:"varint,1,opt,name=shift_instance_sid,json=shiftInstanceSid,proto3" json:"shift_instance_sid,omitempty"`
	// The new start time for the updated shift instance.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// The width of the updated shift instance
	WidthInMinutes int32 `protobuf:"varint,3,opt,name=width_in_minutes,json=widthInMinutes,proto3" json:"width_in_minutes,omitempty"`
	// The updated wfm agent to be assigned to @shift_segment_sid.
	WfmAgentSid int64 `protobuf:"varint,4,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// If true, locks @shift_instance_sid, so that it may not be updated again without being unlocked.
	// if true and the shift instance already is locked, the instance will not have any fields updated.
	// If false, will unlock a currently locked shift instance and allow it to be updated.
	IsLocked bool `protobuf:"varint,5,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	// the percentage shrinkage expected for this shift [0.0, 100.0]. 0.0 = no shrinkage,  100 = no agents
	PlannedShrinkagePercent float32 `protobuf:"fixed32,6,opt,name=planned_shrinkage_percent,json=plannedShrinkagePercent,proto3" json:"planned_shrinkage_percent,omitempty"`
}

func (x *UpdateShiftInstanceV2Req) Reset() {
	*x = UpdateShiftInstanceV2Req{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[316]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShiftInstanceV2Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShiftInstanceV2Req) ProtoMessage() {}

func (x *UpdateShiftInstanceV2Req) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[316]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShiftInstanceV2Req.ProtoReflect.Descriptor instead.
func (*UpdateShiftInstanceV2Req) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{316}
}

func (x *UpdateShiftInstanceV2Req) GetShiftInstanceSid() int64 {
	if x != nil {
		return x.ShiftInstanceSid
	}
	return 0
}

func (x *UpdateShiftInstanceV2Req) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *UpdateShiftInstanceV2Req) GetWidthInMinutes() int32 {
	if x != nil {
		return x.WidthInMinutes
	}
	return 0
}

func (x *UpdateShiftInstanceV2Req) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

func (x *UpdateShiftInstanceV2Req) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *UpdateShiftInstanceV2Req) GetPlannedShrinkagePercent() float32 {
	if x != nil {
		return x.PlannedShrinkagePercent
	}
	return 0
}

// Response message for the UpdateShiftInstanceV2 RPC
type UpdateShiftInstanceV2Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated shift instance.
	ShiftInstance *ShiftInstance `protobuf:"bytes,1,opt,name=shift_instance,json=shiftInstance,proto3" json:"shift_instance,omitempty"`
	// A list of diagnostics for any errors encountered, which prevented the update.
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *UpdateShiftInstanceV2Res) Reset() {
	*x = UpdateShiftInstanceV2Res{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[317]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShiftInstanceV2Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShiftInstanceV2Res) ProtoMessage() {}

func (x *UpdateShiftInstanceV2Res) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[317]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShiftInstanceV2Res.ProtoReflect.Descriptor instead.
func (*UpdateShiftInstanceV2Res) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{317}
}

func (x *UpdateShiftInstanceV2Res) GetShiftInstance() *ShiftInstance {
	if x != nil {
		return x.ShiftInstance
	}
	return nil
}

func (x *UpdateShiftInstanceV2Res) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the UpdateShiftInstanceWithSegments RPC.
type UpdateShiftInstanceWithSegmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instance to update with member shift segments to replace.
	// Any existing shift segments belonging to the instances will be deleted.
	ShiftInstance *ShiftInstance `protobuf:"bytes,1,opt,name=shift_instance,json=shiftInstance,proto3" json:"shift_instance,omitempty"`
	// If set to true, it will update the shift instance regardless of any diagnostics errors,
	// otherwise it will return those diagnostic errors and not do the update.
	IgnoreDiagnosticsErrors bool `protobuf:"varint,2,opt,name=ignore_diagnostics_errors,json=ignoreDiagnosticsErrors,proto3" json:"ignore_diagnostics_errors,omitempty"`
}

func (x *UpdateShiftInstanceWithSegmentsRequest) Reset() {
	*x = UpdateShiftInstanceWithSegmentsRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[318]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShiftInstanceWithSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShiftInstanceWithSegmentsRequest) ProtoMessage() {}

func (x *UpdateShiftInstanceWithSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[318]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShiftInstanceWithSegmentsRequest.ProtoReflect.Descriptor instead.
func (*UpdateShiftInstanceWithSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{318}
}

func (x *UpdateShiftInstanceWithSegmentsRequest) GetShiftInstance() *ShiftInstance {
	if x != nil {
		return x.ShiftInstance
	}
	return nil
}

func (x *UpdateShiftInstanceWithSegmentsRequest) GetIgnoreDiagnosticsErrors() bool {
	if x != nil {
		return x.IgnoreDiagnosticsErrors
	}
	return false
}

// Reponse message for the UpdateShiftInstanceWithSegments RPC.
type UpdateShiftInstanceWithSegmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instance that was updated, with member shift segments and call stats.
	ShiftInstance *ShiftInstance `protobuf:"bytes,1,opt,name=shift_instance,json=shiftInstance,proto3" json:"shift_instance,omitempty"`
	// A list of diagnostics for any errors encountered with the shift instance in the request.
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *UpdateShiftInstanceWithSegmentsResponse) Reset() {
	*x = UpdateShiftInstanceWithSegmentsResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[319]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShiftInstanceWithSegmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShiftInstanceWithSegmentsResponse) ProtoMessage() {}

func (x *UpdateShiftInstanceWithSegmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[319]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShiftInstanceWithSegmentsResponse.ProtoReflect.Descriptor instead.
func (*UpdateShiftInstanceWithSegmentsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{319}
}

func (x *UpdateShiftInstanceWithSegmentsResponse) GetShiftInstance() *ShiftInstance {
	if x != nil {
		return x.ShiftInstance
	}
	return nil
}

func (x *UpdateShiftInstanceWithSegmentsResponse) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the CopyShiftInstancesToSchedule RPC
type CopyShiftInstancesToScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schedule that the @shift_instance_sids will be copied into.
	DestinationSchedule *commons.ScheduleSelector `protobuf:"bytes,1,opt,name=destination_schedule,json=destinationSchedule,proto3" json:"destination_schedule,omitempty"`
	// IDs of the shift instances to copy into @destination_schedule.
	ShiftInstanceSids []int64 `protobuf:"varint,2,rep,packed,name=shift_instance_sids,json=shiftInstanceSids,proto3" json:"shift_instance_sids,omitempty"`
	// If set to true, overlapping shifts will be permitted, and return a warning diagnostic after persisting.
	// Otherwise, any overlapping shifts for agents in the @destination_schedule will return an error diagnostic and no shifts will be copied.
	OverlapAsWarning bool `protobuf:"varint,3,opt,name=overlap_as_warning,json=overlapAsWarning,proto3" json:"overlap_as_warning,omitempty"`
}

func (x *CopyShiftInstancesToScheduleReq) Reset() {
	*x = CopyShiftInstancesToScheduleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[320]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyShiftInstancesToScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyShiftInstancesToScheduleReq) ProtoMessage() {}

func (x *CopyShiftInstancesToScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[320]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyShiftInstancesToScheduleReq.ProtoReflect.Descriptor instead.
func (*CopyShiftInstancesToScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{320}
}

func (x *CopyShiftInstancesToScheduleReq) GetDestinationSchedule() *commons.ScheduleSelector {
	if x != nil {
		return x.DestinationSchedule
	}
	return nil
}

func (x *CopyShiftInstancesToScheduleReq) GetShiftInstanceSids() []int64 {
	if x != nil {
		return x.ShiftInstanceSids
	}
	return nil
}

func (x *CopyShiftInstancesToScheduleReq) GetOverlapAsWarning() bool {
	if x != nil {
		return x.OverlapAsWarning
	}
	return false
}

// Response message for the CopyShiftInstancesToSchedule RPC
type CopyShiftInstancesToScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of diagnostics for any errors encountered, which prevented the copy.
	// If @overlap_as_warning is set to true, warning diagnostics for overlaps may be returned after a sucessful copy.
	Diagnostics []*Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *CopyShiftInstancesToScheduleRes) Reset() {
	*x = CopyShiftInstancesToScheduleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[321]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyShiftInstancesToScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyShiftInstancesToScheduleRes) ProtoMessage() {}

func (x *CopyShiftInstancesToScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[321]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyShiftInstancesToScheduleRes.ProtoReflect.Descriptor instead.
func (*CopyShiftInstancesToScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{321}
}

func (x *CopyShiftInstancesToScheduleRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the ListShiftInstanceSidsForAgent RPC
type ListShiftInstanceSidsForAgentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schedule to get the shift instance sids from.
	ScheduleSelector *commons.ScheduleSelector `protobuf:"bytes,1,opt,name=schedule_selector,json=scheduleSelector,proto3" json:"schedule_selector,omitempty"`
	// The datetime range over which to get the shift instance sids.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,2,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// wfm agent to get shifts for.
	WfmAgentSid int64 `protobuf:"varint,3,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
}

func (x *ListShiftInstanceSidsForAgentReq) Reset() {
	*x = ListShiftInstanceSidsForAgentReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[322]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShiftInstanceSidsForAgentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftInstanceSidsForAgentReq) ProtoMessage() {}

func (x *ListShiftInstanceSidsForAgentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[322]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftInstanceSidsForAgentReq.ProtoReflect.Descriptor instead.
func (*ListShiftInstanceSidsForAgentReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{322}
}

func (x *ListShiftInstanceSidsForAgentReq) GetScheduleSelector() *commons.ScheduleSelector {
	if x != nil {
		return x.ScheduleSelector
	}
	return nil
}

func (x *ListShiftInstanceSidsForAgentReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *ListShiftInstanceSidsForAgentReq) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

// ListShiftInstanceSidsForAgent response RPC.
type ListShiftInstanceSidsForAgentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested shift instance sids.
	ShiftInstanceSids []int64 `protobuf:"varint,1,rep,packed,name=shift_instance_sids,json=shiftInstanceSids,proto3" json:"shift_instance_sids,omitempty"`
}

func (x *ListShiftInstanceSidsForAgentRes) Reset() {
	*x = ListShiftInstanceSidsForAgentRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[323]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShiftInstanceSidsForAgentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftInstanceSidsForAgentRes) ProtoMessage() {}

func (x *ListShiftInstanceSidsForAgentRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[323]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftInstanceSidsForAgentRes.ProtoReflect.Descriptor instead.
func (*ListShiftInstanceSidsForAgentRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{323}
}

func (x *ListShiftInstanceSidsForAgentRes) GetShiftInstanceSids() []int64 {
	if x != nil {
		return x.ShiftInstanceSids
	}
	return nil
}

// Request message for the ListShiftInstanceSidsForSchedule RPC
type ListShiftInstanceSidsForScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schedule to get the shift instance sids from.
	ScheduleSelector *commons.ScheduleSelector `protobuf:"bytes,1,opt,name=schedule_selector,json=scheduleSelector,proto3" json:"schedule_selector,omitempty"`
	// The datetime range over which to get the shift instance sids.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,2,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Optional field, if left nil all shift sids matching the given parameters will be included.
	NodeSelector *ParentEntity `protobuf:"bytes,3,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// Only required if @node_selector is not nil.
	ScheduleScenarioSid int64 `protobuf:"varint,4,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *ListShiftInstanceSidsForScheduleRequest) Reset() {
	*x = ListShiftInstanceSidsForScheduleRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[324]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShiftInstanceSidsForScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftInstanceSidsForScheduleRequest) ProtoMessage() {}

func (x *ListShiftInstanceSidsForScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[324]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftInstanceSidsForScheduleRequest.ProtoReflect.Descriptor instead.
func (*ListShiftInstanceSidsForScheduleRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{324}
}

func (x *ListShiftInstanceSidsForScheduleRequest) GetScheduleSelector() *commons.ScheduleSelector {
	if x != nil {
		return x.ScheduleSelector
	}
	return nil
}

func (x *ListShiftInstanceSidsForScheduleRequest) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *ListShiftInstanceSidsForScheduleRequest) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *ListShiftInstanceSidsForScheduleRequest) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// ListShiftInstanceSidsForSchedule response RPC.
type ListShiftInstanceSidsForScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested shift instance sids.
	ShiftInstanceSids []int64 `protobuf:"varint,1,rep,packed,name=shift_instance_sids,json=shiftInstanceSids,proto3" json:"shift_instance_sids,omitempty"`
}

func (x *ListShiftInstanceSidsForScheduleResponse) Reset() {
	*x = ListShiftInstanceSidsForScheduleResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[325]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShiftInstanceSidsForScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftInstanceSidsForScheduleResponse) ProtoMessage() {}

func (x *ListShiftInstanceSidsForScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[325]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftInstanceSidsForScheduleResponse.ProtoReflect.Descriptor instead.
func (*ListShiftInstanceSidsForScheduleResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{325}
}

func (x *ListShiftInstanceSidsForScheduleResponse) GetShiftInstanceSids() []int64 {
	if x != nil {
		return x.ShiftInstanceSids
	}
	return nil
}

// ListShiftSegmentsByShiftInstanceSids request.
type ListShiftSegmentsByShiftInstanceSidsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of shift instances referenced by requested shift segments.
	ShiftInstanceSids []int64 `protobuf:"varint,1,rep,packed,name=shift_instance_sids,json=shiftInstanceSids,proto3" json:"shift_instance_sids,omitempty"`
	// Set to true to include the scheduling activity in each of the returned shift segments.
	IncludeSchedulingActivity bool `protobuf:"varint,2,opt,name=include_scheduling_activity,json=includeSchedulingActivity,proto3" json:"include_scheduling_activity,omitempty"`
	// Set to true to include the non skill activity for the scheduling activities returned (if those are set to be included).
	IncludeActivity bool `protobuf:"varint,3,opt,name=include_activity,json=includeActivity,proto3" json:"include_activity,omitempty"`
}

func (x *ListShiftSegmentsByShiftInstanceSidsReq) Reset() {
	*x = ListShiftSegmentsByShiftInstanceSidsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[326]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShiftSegmentsByShiftInstanceSidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftSegmentsByShiftInstanceSidsReq) ProtoMessage() {}

func (x *ListShiftSegmentsByShiftInstanceSidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[326]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftSegmentsByShiftInstanceSidsReq.ProtoReflect.Descriptor instead.
func (*ListShiftSegmentsByShiftInstanceSidsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{326}
}

func (x *ListShiftSegmentsByShiftInstanceSidsReq) GetShiftInstanceSids() []int64 {
	if x != nil {
		return x.ShiftInstanceSids
	}
	return nil
}

func (x *ListShiftSegmentsByShiftInstanceSidsReq) GetIncludeSchedulingActivity() bool {
	if x != nil {
		return x.IncludeSchedulingActivity
	}
	return false
}

func (x *ListShiftSegmentsByShiftInstanceSidsReq) GetIncludeActivity() bool {
	if x != nil {
		return x.IncludeActivity
	}
	return false
}

// ListShiftSegmentsByShiftInstanceSids response.
type ListShiftSegmentsByShiftInstanceSidsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested shift segments.
	ShiftSegments []*ShiftSegment `protobuf:"bytes,1,rep,name=shift_segments,json=shiftSegments,proto3" json:"shift_segments,omitempty"`
}

func (x *ListShiftSegmentsByShiftInstanceSidsRes) Reset() {
	*x = ListShiftSegmentsByShiftInstanceSidsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[327]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShiftSegmentsByShiftInstanceSidsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftSegmentsByShiftInstanceSidsRes) ProtoMessage() {}

func (x *ListShiftSegmentsByShiftInstanceSidsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[327]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftSegmentsByShiftInstanceSidsRes.ProtoReflect.Descriptor instead.
func (*ListShiftSegmentsByShiftInstanceSidsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{327}
}

func (x *ListShiftSegmentsByShiftInstanceSidsRes) GetShiftSegments() []*ShiftSegment {
	if x != nil {
		return x.ShiftSegments
	}
	return nil
}

// Represents a Performance Metric Parameter.
type PerformanceMetricParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of metric.
	MetricType commons.PerformanceMetricType `protobuf:"varint,1,opt,name=metric_type,json=metricType,proto3,enum=api.commons.PerformanceMetricType" json:"metric_type,omitempty"`
	// Number of seconds allowed to answer a call if the @metric_type is set to SERVICE_LEVEL_ANALYSIS.
	// If @metric_type is not SERVICE_LEVEL_ANALYSIS then this field must be set to nil.
	ServiceLevelTargetDurationSeconds *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=service_level_target_duration_seconds,json=serviceLevelTargetDurationSeconds,proto3" json:"service_level_target_duration_seconds,omitempty"`
}

func (x *PerformanceMetricParameter) Reset() {
	*x = PerformanceMetricParameter{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[328]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceMetricParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMetricParameter) ProtoMessage() {}

func (x *PerformanceMetricParameter) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[328]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMetricParameter.ProtoReflect.Descriptor instead.
func (*PerformanceMetricParameter) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{328}
}

func (x *PerformanceMetricParameter) GetMetricType() commons.PerformanceMetricType {
	if x != nil {
		return x.MetricType
	}
	return commons.PerformanceMetricType(0)
}

func (x *PerformanceMetricParameter) GetServiceLevelTargetDurationSeconds() *wrapperspb.Int64Value {
	if x != nil {
		return x.ServiceLevelTargetDurationSeconds
	}
	return nil
}

// Request message for the GetPerformanceMetrics RPC.
type GetPerformanceMetricsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The schedule that the performance metric should be associated with.
	ScheduleSelector *commons.ScheduleSelector `protobuf:"bytes,1,opt,name=schedule_selector,json=scheduleSelector,proto3" json:"schedule_selector,omitempty"`
	// The node that the performance metrics should be associated with.
	NodeSelector *ParentEntity `protobuf:"bytes,2,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// The datetime range over which the metrics will be collected.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,3,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Parameters to get metrics for.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	MetricParams []*PerformanceMetricParameter `protobuf:"bytes,4,rep,name=metric_params,json=metricParams,proto3" json:"metric_params,omitempty"`
	// The number of minutes to consolidate each metric interval into.
	// Must be a multiple of 5.
	IntervalWidthInMinutes int32 `protobuf:"varint,5,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// If set to true, the call stats will be recalculated for any changes made to the shift instances or segments on the schedule.
	//
	//	Requires that @node_selector be set to a call center node, as resync effects the entire schedule.
	//
	// If set to false, this step will be skipped.
	ResyncCallStats bool `protobuf:"varint,6,opt,name=resync_call_stats,json=resyncCallStats,proto3" json:"resync_call_stats,omitempty"`
	// Target service level percentage to perform calculations around [0 to 100].
	ServiceLevelTargetPercentage int32 `protobuf:"varint,7,opt,name=service_level_target_percentage,json=serviceLevelTargetPercentage,proto3" json:"service_level_target_percentage,omitempty"`
	// Target service level duration to perform calculations around.
	ServiceLevelTargetDurationSeconds int32 `protobuf:"varint,8,opt,name=service_level_target_duration_seconds,json=serviceLevelTargetDurationSeconds,proto3" json:"service_level_target_duration_seconds,omitempty"`
}

func (x *GetPerformanceMetricsReq) Reset() {
	*x = GetPerformanceMetricsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[329]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPerformanceMetricsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceMetricsReq) ProtoMessage() {}

func (x *GetPerformanceMetricsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[329]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceMetricsReq.ProtoReflect.Descriptor instead.
func (*GetPerformanceMetricsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{329}
}

func (x *GetPerformanceMetricsReq) GetScheduleSelector() *commons.ScheduleSelector {
	if x != nil {
		return x.ScheduleSelector
	}
	return nil
}

func (x *GetPerformanceMetricsReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *GetPerformanceMetricsReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *GetPerformanceMetricsReq) GetMetricParams() []*PerformanceMetricParameter {
	if x != nil {
		return x.MetricParams
	}
	return nil
}

func (x *GetPerformanceMetricsReq) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *GetPerformanceMetricsReq) GetResyncCallStats() bool {
	if x != nil {
		return x.ResyncCallStats
	}
	return false
}

func (x *GetPerformanceMetricsReq) GetServiceLevelTargetPercentage() int32 {
	if x != nil {
		return x.ServiceLevelTargetPercentage
	}
	return 0
}

func (x *GetPerformanceMetricsReq) GetServiceLevelTargetDurationSeconds() int32 {
	if x != nil {
		return x.ServiceLevelTargetDurationSeconds
	}
	return 0
}

// Response message for the GetPerformanceMetrics RPC.
type GetPerformanceMetricsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated. Requested set of performance metrics.
	//
	// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
	PerformanceMetrics []*PerformanceMetric `protobuf:"bytes,1,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
	// Requested set of performance metrics.
	// These metrics will be deprecated once V3 metrics are fully integrated.
	PerformanceMetricsV2 []*PerformanceMetricV2 `protobuf:"bytes,2,rep,name=performance_metrics_v2,json=performanceMetricsV2,proto3" json:"performance_metrics_v2,omitempty"`
	// Requested performance metrics.
	PerformanceMetricsV3 *PerformanceMetricV3 `protobuf:"bytes,3,opt,name=performance_metrics_v3,json=performanceMetricsV3,proto3" json:"performance_metrics_v3,omitempty"`
	// Any diagnostics encountered while generating the metrics.
	Diagnostics []*Diagnostic `protobuf:"bytes,4,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *GetPerformanceMetricsRes) Reset() {
	*x = GetPerformanceMetricsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[330]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPerformanceMetricsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceMetricsRes) ProtoMessage() {}

func (x *GetPerformanceMetricsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[330]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceMetricsRes.ProtoReflect.Descriptor instead.
func (*GetPerformanceMetricsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{330}
}

// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
func (x *GetPerformanceMetricsRes) GetPerformanceMetrics() []*PerformanceMetric {
	if x != nil {
		return x.PerformanceMetrics
	}
	return nil
}

func (x *GetPerformanceMetricsRes) GetPerformanceMetricsV2() []*PerformanceMetricV2 {
	if x != nil {
		return x.PerformanceMetricsV2
	}
	return nil
}

func (x *GetPerformanceMetricsRes) GetPerformanceMetricsV3() *PerformanceMetricV3 {
	if x != nil {
		return x.PerformanceMetricsV3
	}
	return nil
}

func (x *GetPerformanceMetricsRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type SchedulingTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the scheduling target.
	SchedulingTargetSid int64 `protobuf:"varint,1,opt,name=scheduling_target_sid,json=schedulingTargetSid,proto3" json:"scheduling_target_sid,omitempty"`
	// Target type for the @node to override the inherited value.
	SchedulingTargetType commons.SchedulingTargetType `protobuf:"varint,2,opt,name=scheduling_target_type,json=schedulingTargetType,proto3,enum=api.commons.SchedulingTargetType" json:"scheduling_target_type,omitempty"`
	// Target percentage for scheduling.
	SchedulingTargetPercentage float32 `protobuf:"fixed32,3,opt,name=scheduling_target_percentage,json=schedulingTargetPercentage,proto3" json:"scheduling_target_percentage,omitempty"`
	// Number of seconds allowed to answer call for the scheduling if @scheduling_target_type is set to SERVICE_LEVEL.
	// If @scheduling_target_type is not SERVICE_LEVEL then this field must be set to nil
	ServiceLevelTargetDurationSeconds *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=service_level_target_duration_seconds,json=serviceLevelTargetDurationSeconds,proto3" json:"service_level_target_duration_seconds,omitempty"`
	// The node that the scheduling target if used by.
	// May be set to nil if associated with the master scheduling target.
	NodeEntity *ParentEntity `protobuf:"bytes,5,opt,name=node_entity,json=nodeEntity,proto3" json:"node_entity,omitempty"`
}

func (x *SchedulingTarget) Reset() {
	*x = SchedulingTarget{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[331]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchedulingTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulingTarget) ProtoMessage() {}

func (x *SchedulingTarget) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[331]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulingTarget.ProtoReflect.Descriptor instead.
func (*SchedulingTarget) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{331}
}

func (x *SchedulingTarget) GetSchedulingTargetSid() int64 {
	if x != nil {
		return x.SchedulingTargetSid
	}
	return 0
}

func (x *SchedulingTarget) GetSchedulingTargetType() commons.SchedulingTargetType {
	if x != nil {
		return x.SchedulingTargetType
	}
	return commons.SchedulingTargetType(0)
}

func (x *SchedulingTarget) GetSchedulingTargetPercentage() float32 {
	if x != nil {
		return x.SchedulingTargetPercentage
	}
	return 0
}

func (x *SchedulingTarget) GetServiceLevelTargetDurationSeconds() *wrapperspb.Int64Value {
	if x != nil {
		return x.ServiceLevelTargetDurationSeconds
	}
	return nil
}

func (x *SchedulingTarget) GetNodeEntity() *ParentEntity {
	if x != nil {
		return x.NodeEntity
	}
	return nil
}

// SetSchedulingTarget request.
type SetSchedulingTargetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scheduling target to create.
	SchedulingTarget *SchedulingTarget `protobuf:"bytes,1,opt,name=scheduling_target,json=schedulingTarget,proto3" json:"scheduling_target,omitempty"`
	// ID of the schedule scenario that the @node_entity belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *SetSchedulingTargetReq) Reset() {
	*x = SetSchedulingTargetReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[332]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSchedulingTargetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSchedulingTargetReq) ProtoMessage() {}

func (x *SetSchedulingTargetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[332]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSchedulingTargetReq.ProtoReflect.Descriptor instead.
func (*SetSchedulingTargetReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{332}
}

func (x *SetSchedulingTargetReq) GetSchedulingTarget() *SchedulingTarget {
	if x != nil {
		return x.SchedulingTarget
	}
	return nil
}

func (x *SetSchedulingTargetReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// SetSchedulingTarget reponse.
type SetSchedulingTargetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created scheduling target.
	SchedulingTargetSid int64 `protobuf:"varint,1,opt,name=scheduling_target_sid,json=schedulingTargetSid,proto3" json:"scheduling_target_sid,omitempty"`
}

func (x *SetSchedulingTargetRes) Reset() {
	*x = SetSchedulingTargetRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[333]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSchedulingTargetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSchedulingTargetRes) ProtoMessage() {}

func (x *SetSchedulingTargetRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[333]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSchedulingTargetRes.ProtoReflect.Descriptor instead.
func (*SetSchedulingTargetRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{333}
}

func (x *SetSchedulingTargetRes) GetSchedulingTargetSid() int64 {
	if x != nil {
		return x.SchedulingTargetSid
	}
	return 0
}

// GetSchedulingTarget request.
type GetSchedulingTargetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node to get the scheduling target from.
	NodeSelector *ParentEntity `protobuf:"bytes,1,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
}

func (x *GetSchedulingTargetReq) Reset() {
	*x = GetSchedulingTargetReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[334]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchedulingTargetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulingTargetReq) ProtoMessage() {}

func (x *GetSchedulingTargetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[334]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulingTargetReq.ProtoReflect.Descriptor instead.
func (*GetSchedulingTargetReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{334}
}

func (x *GetSchedulingTargetReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

// GetSchedulingTarget reponse.
type GetSchedulingTargetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scheduling target that the node is inheriting from a parent.
	InheritedSchedulingTarget *SchedulingTarget `protobuf:"bytes,1,opt,name=inherited_scheduling_target,json=inheritedSchedulingTarget,proto3" json:"inherited_scheduling_target,omitempty"`
	// The node's own scheduling target.
	OwnSchedulingTarget *SchedulingTarget `protobuf:"bytes,2,opt,name=own_scheduling_target,json=ownSchedulingTarget,proto3" json:"own_scheduling_target,omitempty"`
	// The resulting scheduling target for the node.
	// If there is no value for @inherited_scheduling_target or @own_scheduling_target the system default value will be used.
	ResultingSchedulingTarget *SchedulingTarget `protobuf:"bytes,3,opt,name=resulting_scheduling_target,json=resultingSchedulingTarget,proto3" json:"resulting_scheduling_target,omitempty"`
}

func (x *GetSchedulingTargetRes) Reset() {
	*x = GetSchedulingTargetRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[335]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchedulingTargetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulingTargetRes) ProtoMessage() {}

func (x *GetSchedulingTargetRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[335]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulingTargetRes.ProtoReflect.Descriptor instead.
func (*GetSchedulingTargetRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{335}
}

func (x *GetSchedulingTargetRes) GetInheritedSchedulingTarget() *SchedulingTarget {
	if x != nil {
		return x.InheritedSchedulingTarget
	}
	return nil
}

func (x *GetSchedulingTargetRes) GetOwnSchedulingTarget() *SchedulingTarget {
	if x != nil {
		return x.OwnSchedulingTarget
	}
	return nil
}

func (x *GetSchedulingTargetRes) GetResultingSchedulingTarget() *SchedulingTarget {
	if x != nil {
		return x.ResultingSchedulingTarget
	}
	return nil
}

// DeleteSchedulingTarget request.
type DeleteSchedulingTargetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node to delete the scheduling target for.
	NodeSelector *ParentEntity `protobuf:"bytes,1,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
}

func (x *DeleteSchedulingTargetReq) Reset() {
	*x = DeleteSchedulingTargetReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[336]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSchedulingTargetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchedulingTargetReq) ProtoMessage() {}

func (x *DeleteSchedulingTargetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[336]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchedulingTargetReq.ProtoReflect.Descriptor instead.
func (*DeleteSchedulingTargetReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{336}
}

func (x *DeleteSchedulingTargetReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

// DeleteSchedulingTarget response.
type DeleteSchedulingTargetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSchedulingTargetRes) Reset() {
	*x = DeleteSchedulingTargetRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[337]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSchedulingTargetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchedulingTargetRes) ProtoMessage() {}

func (x *DeleteSchedulingTargetRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[337]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchedulingTargetRes.ProtoReflect.Descriptor instead.
func (*DeleteSchedulingTargetRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{337}
}

// GetDefaultSchedulingTargetReq is a request mesage.
type GetDefaultSchedulingTargetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDefaultSchedulingTargetReq) Reset() {
	*x = GetDefaultSchedulingTargetReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[338]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDefaultSchedulingTargetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultSchedulingTargetReq) ProtoMessage() {}

func (x *GetDefaultSchedulingTargetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[338]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultSchedulingTargetReq.ProtoReflect.Descriptor instead.
func (*GetDefaultSchedulingTargetReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{338}
}

// GetDefaultSchedulingTargetRes is a response mesage.
type GetDefaultSchedulingTargetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulingTarget *SchedulingTarget `protobuf:"bytes,1,opt,name=scheduling_target,json=schedulingTarget,proto3" json:"scheduling_target,omitempty"`
}

func (x *GetDefaultSchedulingTargetRes) Reset() {
	*x = GetDefaultSchedulingTargetRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[339]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDefaultSchedulingTargetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultSchedulingTargetRes) ProtoMessage() {}

func (x *GetDefaultSchedulingTargetRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[339]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultSchedulingTargetRes.ProtoReflect.Descriptor instead.
func (*GetDefaultSchedulingTargetRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{339}
}

func (x *GetDefaultSchedulingTargetRes) GetSchedulingTarget() *SchedulingTarget {
	if x != nil {
		return x.SchedulingTarget
	}
	return nil
}

// SetDefaultSchedulingTargetReq is a request mesage.
type SetDefaultSchedulingTargetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulingTarget *SchedulingTarget `protobuf:"bytes,1,opt,name=scheduling_target,json=schedulingTarget,proto3" json:"scheduling_target,omitempty"`
}

func (x *SetDefaultSchedulingTargetReq) Reset() {
	*x = SetDefaultSchedulingTargetReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[340]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDefaultSchedulingTargetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultSchedulingTargetReq) ProtoMessage() {}

func (x *SetDefaultSchedulingTargetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[340]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultSchedulingTargetReq.ProtoReflect.Descriptor instead.
func (*SetDefaultSchedulingTargetReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{340}
}

func (x *SetDefaultSchedulingTargetReq) GetSchedulingTarget() *SchedulingTarget {
	if x != nil {
		return x.SchedulingTarget
	}
	return nil
}

// SetDefaultSchedulingTargetRes is a response mesage.
type SetDefaultSchedulingTargetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetDefaultSchedulingTargetRes) Reset() {
	*x = SetDefaultSchedulingTargetRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[341]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDefaultSchedulingTargetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultSchedulingTargetRes) ProtoMessage() {}

func (x *SetDefaultSchedulingTargetRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[341]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultSchedulingTargetRes.ProtoReflect.Descriptor instead.
func (*SetDefaultSchedulingTargetRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{341}
}

// Request message for the ListRequiredCallsIntervals RPC.
type ListRequiredCallsIntervalsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The that the required call intervals will be associated with.
	NodeSelector *ParentEntity `protobuf:"bytes,1,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// The datetime range across which required call intervals will be collected.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,2,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// The number of minutes to consolidate each metric interval into.
	// Must be a multiple of 5.
	IntervalWidthInMinutes int32 `protobuf:"varint,3,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
}

func (x *ListRequiredCallsIntervalsReq) Reset() {
	*x = ListRequiredCallsIntervalsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[342]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequiredCallsIntervalsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequiredCallsIntervalsReq) ProtoMessage() {}

func (x *ListRequiredCallsIntervalsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[342]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequiredCallsIntervalsReq.ProtoReflect.Descriptor instead.
func (*ListRequiredCallsIntervalsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{342}
}

func (x *ListRequiredCallsIntervalsReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *ListRequiredCallsIntervalsReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *ListRequiredCallsIntervalsReq) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

// Response message for the ListRequiredCallsIntervals RPC.
type ListRequiredCallsIntervalsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,1,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// Requested required call intervals.
	RequiredCallsIntervals []*RequiredCallsInterval `protobuf:"bytes,2,rep,name=required_calls_intervals,json=requiredCallsIntervals,proto3" json:"required_calls_intervals,omitempty"`
}

func (x *ListRequiredCallsIntervalsRes) Reset() {
	*x = ListRequiredCallsIntervalsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[343]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequiredCallsIntervalsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequiredCallsIntervalsRes) ProtoMessage() {}

func (x *ListRequiredCallsIntervalsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[343]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequiredCallsIntervalsRes.ProtoReflect.Descriptor instead.
func (*ListRequiredCallsIntervalsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{343}
}

func (x *ListRequiredCallsIntervalsRes) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *ListRequiredCallsIntervalsRes) GetRequiredCallsIntervals() []*RequiredCallsInterval {
	if x != nil {
		return x.RequiredCallsIntervals
	}
	return nil
}

// Represents a TourShiftSegmentConfig
type TourShiftSegmentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the tour shift segment config.
	TourShiftSegmentConfigSid int64 `protobuf:"varint,1,opt,name=tour_shift_segment_config_sid,json=tourShiftSegmentConfigSid,proto3" json:"tour_shift_segment_config_sid,omitempty"`
	// The ID of the parent tour shift instance config
	TourShiftInstanceConfigSid int64 `protobuf:"varint,2,opt,name=tour_shift_instance_config_sid,json=tourShiftInstanceConfigSid,proto3" json:"tour_shift_instance_config_sid,omitempty"`
	// The minute within the shift instance config where the shift segment config starts.
	StartMinuteInShift int32 `protobuf:"varint,3,opt,name=start_minute_in_shift,json=startMinuteInShift,proto3" json:"start_minute_in_shift,omitempty"`
	// The number of minutes wide that the segment covers.
	WidthInMinutes int32 `protobuf:"varint,4,opt,name=width_in_minutes,json=widthInMinutes,proto3" json:"width_in_minutes,omitempty"`
	// The ID of the scheduling activity that the segment will schedule.
	SchedulingActivitySid int64 `protobuf:"varint,5,opt,name=scheduling_activity_sid,json=schedulingActivitySid,proto3" json:"scheduling_activity_sid,omitempty"`
}

func (x *TourShiftSegmentConfig) Reset() {
	*x = TourShiftSegmentConfig{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[344]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TourShiftSegmentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourShiftSegmentConfig) ProtoMessage() {}

func (x *TourShiftSegmentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[344]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourShiftSegmentConfig.ProtoReflect.Descriptor instead.
func (*TourShiftSegmentConfig) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{344}
}

func (x *TourShiftSegmentConfig) GetTourShiftSegmentConfigSid() int64 {
	if x != nil {
		return x.TourShiftSegmentConfigSid
	}
	return 0
}

func (x *TourShiftSegmentConfig) GetTourShiftInstanceConfigSid() int64 {
	if x != nil {
		return x.TourShiftInstanceConfigSid
	}
	return 0
}

func (x *TourShiftSegmentConfig) GetStartMinuteInShift() int32 {
	if x != nil {
		return x.StartMinuteInShift
	}
	return 0
}

func (x *TourShiftSegmentConfig) GetWidthInMinutes() int32 {
	if x != nil {
		return x.WidthInMinutes
	}
	return 0
}

func (x *TourShiftSegmentConfig) GetSchedulingActivitySid() int64 {
	if x != nil {
		return x.SchedulingActivitySid
	}
	return 0
}

// Represents a TourShiftInstanceConfig
type TourShiftInstanceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the tour shift instance config.
	TourShiftInstanceConfigSid int64 `protobuf:"varint,1,opt,name=tour_shift_instance_config_sid,json=tourShiftInstanceConfigSid,proto3" json:"tour_shift_instance_config_sid,omitempty"`
	// The ID of the tour week pattern that the tour shift instance config belongs to.
	TourWeekPatternSid int64 `protobuf:"varint,2,opt,name=tour_week_pattern_sid,json=tourWeekPatternSid,proto3" json:"tour_week_pattern_sid,omitempty"`
	// The number of minutes after the start of week UTC for the shift instance config to start.
	// May not be greater than 10080, as that would begin during the next week.
	StartMinuteInWeek int32 `protobuf:"varint,3,opt,name=start_minute_in_week,json=startMinuteInWeek,proto3" json:"start_minute_in_week,omitempty"`
	// The number of minutes wide that the tour shift instance config covers.
	WidthInMinutes int32 `protobuf:"varint,4,opt,name=width_in_minutes,json=widthInMinutes,proto3" json:"width_in_minutes,omitempty"`
	// The tour shift segment configs that are associated with @tour_shift_instance_config_sid.
	MemberTourShiftSegmentConfigs []*TourShiftSegmentConfig `protobuf:"bytes,5,rep,name=member_tour_shift_segment_configs,json=memberTourShiftSegmentConfigs,proto3" json:"member_tour_shift_segment_configs,omitempty"`
}

func (x *TourShiftInstanceConfig) Reset() {
	*x = TourShiftInstanceConfig{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[345]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TourShiftInstanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourShiftInstanceConfig) ProtoMessage() {}

func (x *TourShiftInstanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[345]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourShiftInstanceConfig.ProtoReflect.Descriptor instead.
func (*TourShiftInstanceConfig) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{345}
}

func (x *TourShiftInstanceConfig) GetTourShiftInstanceConfigSid() int64 {
	if x != nil {
		return x.TourShiftInstanceConfigSid
	}
	return 0
}

func (x *TourShiftInstanceConfig) GetTourWeekPatternSid() int64 {
	if x != nil {
		return x.TourWeekPatternSid
	}
	return 0
}

func (x *TourShiftInstanceConfig) GetStartMinuteInWeek() int32 {
	if x != nil {
		return x.StartMinuteInWeek
	}
	return 0
}

func (x *TourShiftInstanceConfig) GetWidthInMinutes() int32 {
	if x != nil {
		return x.WidthInMinutes
	}
	return 0
}

func (x *TourShiftInstanceConfig) GetMemberTourShiftSegmentConfigs() []*TourShiftSegmentConfig {
	if x != nil {
		return x.MemberTourShiftSegmentConfigs
	}
	return nil
}

// Represents a TourWeekPattern
type TourWeekPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the tour week pattern.
	TourWeekPatternSid int64 `protobuf:"varint,1,opt,name=tour_week_pattern_sid,json=tourWeekPatternSid,proto3" json:"tour_week_pattern_sid,omitempty"`
	// The ID of the tour pattern that the tour week pattern belongs to.
	TourPatternSid int64 `protobuf:"varint,2,opt,name=tour_pattern_sid,json=tourPatternSid,proto3" json:"tour_pattern_sid,omitempty"`
	// The tour week patterns place within the sequence of tour week patterns that belong to @tour_pattern_sid.
	WeekPatternNumber int32 `protobuf:"varint,3,opt,name=week_pattern_number,json=weekPatternNumber,proto3" json:"week_pattern_number,omitempty"`
	// The tour shift instance configs associated with @tour_week_pattern_sid.
	MemberTourShiftInstanceConfigs []*TourShiftInstanceConfig `protobuf:"bytes,4,rep,name=member_tour_shift_instance_configs,json=memberTourShiftInstanceConfigs,proto3" json:"member_tour_shift_instance_configs,omitempty"`
}

func (x *TourWeekPattern) Reset() {
	*x = TourWeekPattern{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[346]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TourWeekPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourWeekPattern) ProtoMessage() {}

func (x *TourWeekPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[346]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourWeekPattern.ProtoReflect.Descriptor instead.
func (*TourWeekPattern) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{346}
}

func (x *TourWeekPattern) GetTourWeekPatternSid() int64 {
	if x != nil {
		return x.TourWeekPatternSid
	}
	return 0
}

func (x *TourWeekPattern) GetTourPatternSid() int64 {
	if x != nil {
		return x.TourPatternSid
	}
	return 0
}

func (x *TourWeekPattern) GetWeekPatternNumber() int32 {
	if x != nil {
		return x.WeekPatternNumber
	}
	return 0
}

func (x *TourWeekPattern) GetMemberTourShiftInstanceConfigs() []*TourShiftInstanceConfig {
	if x != nil {
		return x.MemberTourShiftInstanceConfigs
	}
	return nil
}

// Represents a TourAgentCollection
type TourAgentCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of this tour agent collection sid.
	TourAgentCollectionSid int64 `protobuf:"varint,1,opt,name=tour_agent_collection_sid,json=tourAgentCollectionSid,proto3" json:"tour_agent_collection_sid,omitempty"`
	// The ID of the tour pattern that the tour agent collection is associated with.
	TourPatternSid int64 `protobuf:"varint,2,opt,name=tour_pattern_sid,json=tourPatternSid,proto3" json:"tour_pattern_sid,omitempty"`
	// The minimum number of agents that are required to be scheduled using this collection.
	MinAgentsToSchedule int32 `protobuf:"varint,3,opt,name=min_agents_to_schedule,json=minAgentsToSchedule,proto3" json:"min_agents_to_schedule,omitempty"`
	// The maximum number of agents that are allowed to be scheduled using this collection.
	MaxAgentsToSchedule int32 `protobuf:"varint,4,opt,name=max_agents_to_schedule,json=maxAgentsToSchedule,proto3" json:"max_agents_to_schedule,omitempty"`
	// The week pattern number to start scheduling this collection with.
	// Each the next week pattern number in sequence will be scheduled, starting with the @first_week_pattern_number.
	FirstWeekPatternNumber int32 `protobuf:"varint,5,opt,name=first_week_pattern_number,json=firstWeekPatternNumber,proto3" json:"first_week_pattern_number,omitempty"`
	// The name used to describe this tour agent collection to the user.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// The IDs of any wfm agents associated with @tour_collection_sid.
	WfmAgentSids []int64 `protobuf:"varint,7,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
}

func (x *TourAgentCollection) Reset() {
	*x = TourAgentCollection{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[347]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TourAgentCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourAgentCollection) ProtoMessage() {}

func (x *TourAgentCollection) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[347]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourAgentCollection.ProtoReflect.Descriptor instead.
func (*TourAgentCollection) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{347}
}

func (x *TourAgentCollection) GetTourAgentCollectionSid() int64 {
	if x != nil {
		return x.TourAgentCollectionSid
	}
	return 0
}

func (x *TourAgentCollection) GetTourPatternSid() int64 {
	if x != nil {
		return x.TourPatternSid
	}
	return 0
}

func (x *TourAgentCollection) GetMinAgentsToSchedule() int32 {
	if x != nil {
		return x.MinAgentsToSchedule
	}
	return 0
}

func (x *TourAgentCollection) GetMaxAgentsToSchedule() int32 {
	if x != nil {
		return x.MaxAgentsToSchedule
	}
	return 0
}

func (x *TourAgentCollection) GetFirstWeekPatternNumber() int32 {
	if x != nil {
		return x.FirstWeekPatternNumber
	}
	return 0
}

func (x *TourAgentCollection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TourAgentCollection) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

// Represents a TourPattern
type TourPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of this tour pattern sid.
	TourPatternSid int64 `protobuf:"varint,1,opt,name=tour_pattern_sid,json=tourPatternSid,proto3" json:"tour_pattern_sid,omitempty"`
	// The ID of the shift template that the tour pattern belongs to.
	ShiftTemplateSid int64 `protobuf:"varint,2,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
	// The tour week patterns associated with @tour_pattern_sid.
	MemberTourWeekPatterns []*TourWeekPattern `protobuf:"bytes,3,rep,name=member_tour_week_patterns,json=memberTourWeekPatterns,proto3" json:"member_tour_week_patterns,omitempty"`
	// The tour agent collection associated with @tour_pattern_sid.
	MemberTourAgentCollections []*TourAgentCollection `protobuf:"bytes,4,rep,name=member_tour_agent_collections,json=memberTourAgentCollections,proto3" json:"member_tour_agent_collections,omitempty"`
}

func (x *TourPattern) Reset() {
	*x = TourPattern{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[348]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TourPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourPattern) ProtoMessage() {}

func (x *TourPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[348]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourPattern.ProtoReflect.Descriptor instead.
func (*TourPattern) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{348}
}

func (x *TourPattern) GetTourPatternSid() int64 {
	if x != nil {
		return x.TourPatternSid
	}
	return 0
}

func (x *TourPattern) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

func (x *TourPattern) GetMemberTourWeekPatterns() []*TourWeekPattern {
	if x != nil {
		return x.MemberTourWeekPatterns
	}
	return nil
}

func (x *TourPattern) GetMemberTourAgentCollections() []*TourAgentCollection {
	if x != nil {
		return x.MemberTourAgentCollections
	}
	return nil
}

// Request message for the CreateTourPattern RPC.
type CreateTourPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the Shift Template to create the Tour Pattern for.
	ShiftTemplateSid int64 `protobuf:"varint,1,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
}

func (x *CreateTourPatternReq) Reset() {
	*x = CreateTourPatternReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[349]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTourPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourPatternReq) ProtoMessage() {}

func (x *CreateTourPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[349]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourPatternReq.ProtoReflect.Descriptor instead.
func (*CreateTourPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{349}
}

func (x *CreateTourPatternReq) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

// Response message for the CreateTourPattern RPC.
type CreateTourPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created Tour Pattern
	TourPatternSid int64 `protobuf:"varint,1,opt,name=tour_pattern_sid,json=tourPatternSid,proto3" json:"tour_pattern_sid,omitempty"`
}

func (x *CreateTourPatternRes) Reset() {
	*x = CreateTourPatternRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[350]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTourPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourPatternRes) ProtoMessage() {}

func (x *CreateTourPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[350]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourPatternRes.ProtoReflect.Descriptor instead.
func (*CreateTourPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{350}
}

func (x *CreateTourPatternRes) GetTourPatternSid() int64 {
	if x != nil {
		return x.TourPatternSid
	}
	return 0
}

// Request message for the GetTourPatternDiagnostics RPC.
type GetTourPatternDiagnosticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tour pattern and members to validate.
	TourPattern *TourPattern `protobuf:"bytes,1,opt,name=tour_pattern,json=tourPattern,proto3" json:"tour_pattern,omitempty"`
}

func (x *GetTourPatternDiagnosticsReq) Reset() {
	*x = GetTourPatternDiagnosticsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[351]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTourPatternDiagnosticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTourPatternDiagnosticsReq) ProtoMessage() {}

func (x *GetTourPatternDiagnosticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[351]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTourPatternDiagnosticsReq.ProtoReflect.Descriptor instead.
func (*GetTourPatternDiagnosticsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{351}
}

func (x *GetTourPatternDiagnosticsReq) GetTourPattern() *TourPattern {
	if x != nil {
		return x.TourPattern
	}
	return nil
}

// Response message for the GetTourPatternDiagnostics RPC.
type GetTourPatternDiagnosticsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Diagnostics for any issues encountered with the fields on the given @tour_pattern, or an OK diagnostic if there are no issues.
	Diagnostics []*Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *GetTourPatternDiagnosticsRes) Reset() {
	*x = GetTourPatternDiagnosticsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[352]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTourPatternDiagnosticsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTourPatternDiagnosticsRes) ProtoMessage() {}

func (x *GetTourPatternDiagnosticsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[352]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTourPatternDiagnosticsRes.ProtoReflect.Descriptor instead.
func (*GetTourPatternDiagnosticsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{352}
}

func (x *GetTourPatternDiagnosticsRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the UpsertTourPatternWithMembers RPC.
type UpsertTourPatternWithMembersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tour pattern to upsert, including any members.
	// Must include at least one Tour Week Pattern and one Tour Agent Collection.
	// Will replace the existing Tour Pattern and all members in database for @tour_pattern.shift_template_sid.
	TourPattern *TourPattern `protobuf:"bytes,1,opt,name=tour_pattern,json=tourPattern,proto3" json:"tour_pattern,omitempty"`
}

func (x *UpsertTourPatternWithMembersReq) Reset() {
	*x = UpsertTourPatternWithMembersReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[353]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertTourPatternWithMembersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertTourPatternWithMembersReq) ProtoMessage() {}

func (x *UpsertTourPatternWithMembersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[353]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertTourPatternWithMembersReq.ProtoReflect.Descriptor instead.
func (*UpsertTourPatternWithMembersReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{353}
}

func (x *UpsertTourPatternWithMembersReq) GetTourPattern() *TourPattern {
	if x != nil {
		return x.TourPattern
	}
	return nil
}

// Response message for the UpsertTourPatternWithMembers RPC.
type UpsertTourPatternWithMembersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly created tour pattern, returned with new SIDs and week pattern numbers.
	TourPattern *TourPattern `protobuf:"bytes,1,opt,name=tour_pattern,json=tourPattern,proto3" json:"tour_pattern,omitempty"`
	// Diagnostics for any issues encountered with the fields on the given @tour_pattern.
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *UpsertTourPatternWithMembersRes) Reset() {
	*x = UpsertTourPatternWithMembersRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[354]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertTourPatternWithMembersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertTourPatternWithMembersRes) ProtoMessage() {}

func (x *UpsertTourPatternWithMembersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[354]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertTourPatternWithMembersRes.ProtoReflect.Descriptor instead.
func (*UpsertTourPatternWithMembersRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{354}
}

func (x *UpsertTourPatternWithMembersRes) GetTourPattern() *TourPattern {
	if x != nil {
		return x.TourPattern
	}
	return nil
}

func (x *UpsertTourPatternWithMembersRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the GetTourPattern RPC.
type GetTourPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the Shift Template to get the Tour Pattern for.
	ShiftTemplateSid int64 `protobuf:"varint,1,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
}

func (x *GetTourPatternReq) Reset() {
	*x = GetTourPatternReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[355]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTourPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTourPatternReq) ProtoMessage() {}

func (x *GetTourPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[355]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTourPatternReq.ProtoReflect.Descriptor instead.
func (*GetTourPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{355}
}

func (x *GetTourPatternReq) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

// Request message for the GetTourPattern RPC.
type GetTourPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested Tour Pattern
	TourPattern *TourPattern `protobuf:"bytes,1,opt,name=tour_pattern,json=tourPattern,proto3" json:"tour_pattern,omitempty"`
}

func (x *GetTourPatternRes) Reset() {
	*x = GetTourPatternRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[356]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTourPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTourPatternRes) ProtoMessage() {}

func (x *GetTourPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[356]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTourPatternRes.ProtoReflect.Descriptor instead.
func (*GetTourPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{356}
}

func (x *GetTourPatternRes) GetTourPattern() *TourPattern {
	if x != nil {
		return x.TourPattern
	}
	return nil
}

// Request message for the GetTourPatternWithMembers RPC.
type GetTourPatternWithMembersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the Shift Template to get the Tour Pattern for.
	ShiftTemplateSid int64 `protobuf:"varint,1,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
}

func (x *GetTourPatternWithMembersReq) Reset() {
	*x = GetTourPatternWithMembersReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[357]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTourPatternWithMembersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTourPatternWithMembersReq) ProtoMessage() {}

func (x *GetTourPatternWithMembersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[357]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTourPatternWithMembersReq.ProtoReflect.Descriptor instead.
func (*GetTourPatternWithMembersReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{357}
}

func (x *GetTourPatternWithMembersReq) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

// Request message for the GetTourPatternWithMembers RPC.
type GetTourPatternWithMembersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested Tour Pattern with all member entities.
	TourPattern *TourPattern `protobuf:"bytes,1,opt,name=tour_pattern,json=tourPattern,proto3" json:"tour_pattern,omitempty"`
}

func (x *GetTourPatternWithMembersRes) Reset() {
	*x = GetTourPatternWithMembersRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[358]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTourPatternWithMembersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTourPatternWithMembersRes) ProtoMessage() {}

func (x *GetTourPatternWithMembersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[358]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTourPatternWithMembersRes.ProtoReflect.Descriptor instead.
func (*GetTourPatternWithMembersRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{358}
}

func (x *GetTourPatternWithMembersRes) GetTourPattern() *TourPattern {
	if x != nil {
		return x.TourPattern
	}
	return nil
}

// Request message for the DeleteTourPattern RPC.
type DeleteTourPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the tour pattern to delete.
	// If any entities belong to @tour_pattern_sid they will be deleted too.
	TourPatternSid int64 `protobuf:"varint,1,opt,name=tour_pattern_sid,json=tourPatternSid,proto3" json:"tour_pattern_sid,omitempty"`
}

func (x *DeleteTourPatternReq) Reset() {
	*x = DeleteTourPatternReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[359]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTourPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTourPatternReq) ProtoMessage() {}

func (x *DeleteTourPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[359]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTourPatternReq.ProtoReflect.Descriptor instead.
func (*DeleteTourPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{359}
}

func (x *DeleteTourPatternReq) GetTourPatternSid() int64 {
	if x != nil {
		return x.TourPatternSid
	}
	return 0
}

// Request message for the DeleteTourPattern RPC.
type DeleteTourPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTourPatternRes) Reset() {
	*x = DeleteTourPatternRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[360]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTourPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTourPatternRes) ProtoMessage() {}

func (x *DeleteTourPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[360]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTourPatternRes.ProtoReflect.Descriptor instead.
func (*DeleteTourPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{360}
}

// Request message for the CreateTourWeekPattern RPC.
type CreateTourWeekPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the Tour Pattern to create the tour week pattern for.
	TourPatternSid int64 `protobuf:"varint,1,opt,name=tour_pattern_sid,json=tourPatternSid,proto3" json:"tour_pattern_sid,omitempty"`
}

func (x *CreateTourWeekPatternReq) Reset() {
	*x = CreateTourWeekPatternReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[361]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTourWeekPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourWeekPatternReq) ProtoMessage() {}

func (x *CreateTourWeekPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[361]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourWeekPatternReq.ProtoReflect.Descriptor instead.
func (*CreateTourWeekPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{361}
}

func (x *CreateTourWeekPatternReq) GetTourPatternSid() int64 {
	if x != nil {
		return x.TourPatternSid
	}
	return 0
}

// Response message for the CreateTourWeekPattern RPC.
type CreateTourWeekPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created Tour Pattern.
	TourWeekPatternSid int64 `protobuf:"varint,1,opt,name=tour_week_pattern_sid,json=tourWeekPatternSid,proto3" json:"tour_week_pattern_sid,omitempty"`
}

func (x *CreateTourWeekPatternRes) Reset() {
	*x = CreateTourWeekPatternRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[362]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTourWeekPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourWeekPatternRes) ProtoMessage() {}

func (x *CreateTourWeekPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[362]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourWeekPatternRes.ProtoReflect.Descriptor instead.
func (*CreateTourWeekPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{362}
}

func (x *CreateTourWeekPatternRes) GetTourWeekPatternSid() int64 {
	if x != nil {
		return x.TourWeekPatternSid
	}
	return 0
}

// Request message for the ListTourWeekPatterns RPC.
type ListTourWeekPatternsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the tour pattern that the @tour_week_patterns to retrieve belong to.
	TourPatternSid int64 `protobuf:"varint,1,opt,name=tour_pattern_sid,json=tourPatternSid,proto3" json:"tour_pattern_sid,omitempty"`
}

func (x *ListTourWeekPatternsReq) Reset() {
	*x = ListTourWeekPatternsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[363]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTourWeekPatternsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTourWeekPatternsReq) ProtoMessage() {}

func (x *ListTourWeekPatternsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[363]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTourWeekPatternsReq.ProtoReflect.Descriptor instead.
func (*ListTourWeekPatternsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{363}
}

func (x *ListTourWeekPatternsReq) GetTourPatternSid() int64 {
	if x != nil {
		return x.TourPatternSid
	}
	return 0
}

// Response message for the ListTourWeekPatterns RPC.
type ListTourWeekPatternsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested Tour Week Patterns.
	TourWeekPatterns []*TourWeekPattern `protobuf:"bytes,1,rep,name=tour_week_patterns,json=tourWeekPatterns,proto3" json:"tour_week_patterns,omitempty"`
}

func (x *ListTourWeekPatternsRes) Reset() {
	*x = ListTourWeekPatternsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[364]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTourWeekPatternsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTourWeekPatternsRes) ProtoMessage() {}

func (x *ListTourWeekPatternsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[364]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTourWeekPatternsRes.ProtoReflect.Descriptor instead.
func (*ListTourWeekPatternsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{364}
}

func (x *ListTourWeekPatternsRes) GetTourWeekPatterns() []*TourWeekPattern {
	if x != nil {
		return x.TourWeekPatterns
	}
	return nil
}

// Request message for the DeleteTourWeekPatterns RPC.
type DeleteTourWeekPatternsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the tour week patterns to be deleted.
	// Any member Configs will be deletes as well.
	// If any Tour Agent Collections are using the @tour_week_pattern_sids, they must be deleted first.
	TourWeekPatternSids []int64 `protobuf:"varint,1,rep,packed,name=tour_week_pattern_sids,json=tourWeekPatternSids,proto3" json:"tour_week_pattern_sids,omitempty"`
}

func (x *DeleteTourWeekPatternsReq) Reset() {
	*x = DeleteTourWeekPatternsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[365]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTourWeekPatternsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTourWeekPatternsReq) ProtoMessage() {}

func (x *DeleteTourWeekPatternsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[365]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTourWeekPatternsReq.ProtoReflect.Descriptor instead.
func (*DeleteTourWeekPatternsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{365}
}

func (x *DeleteTourWeekPatternsReq) GetTourWeekPatternSids() []int64 {
	if x != nil {
		return x.TourWeekPatternSids
	}
	return nil
}

// Response message for the DeleteTourWeekPatterns RPC.
type DeleteTourWeekPatternsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTourWeekPatternsRes) Reset() {
	*x = DeleteTourWeekPatternsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[366]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTourWeekPatternsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTourWeekPatternsRes) ProtoMessage() {}

func (x *DeleteTourWeekPatternsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[366]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTourWeekPatternsRes.ProtoReflect.Descriptor instead.
func (*DeleteTourWeekPatternsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{366}
}

// Request message for the CreateTourShiftInstanceConfig RPC.
type CreateTourShiftInstanceConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Tour Shift Instance Config to create.
	TourShiftInstanceConfig *TourShiftInstanceConfig `protobuf:"bytes,1,opt,name=tour_shift_instance_config,json=tourShiftInstanceConfig,proto3" json:"tour_shift_instance_config,omitempty"`
}

func (x *CreateTourShiftInstanceConfigReq) Reset() {
	*x = CreateTourShiftInstanceConfigReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[367]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTourShiftInstanceConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourShiftInstanceConfigReq) ProtoMessage() {}

func (x *CreateTourShiftInstanceConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[367]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourShiftInstanceConfigReq.ProtoReflect.Descriptor instead.
func (*CreateTourShiftInstanceConfigReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{367}
}

func (x *CreateTourShiftInstanceConfigReq) GetTourShiftInstanceConfig() *TourShiftInstanceConfig {
	if x != nil {
		return x.TourShiftInstanceConfig
	}
	return nil
}

// Response message for the CreateTourShiftInstanceConfig RPC.
type CreateTourShiftInstanceConfigRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created Tour Shift Instance Config.
	TourShiftInstanceConfigSid int64 `protobuf:"varint,1,opt,name=tour_shift_instance_config_sid,json=tourShiftInstanceConfigSid,proto3" json:"tour_shift_instance_config_sid,omitempty"`
}

func (x *CreateTourShiftInstanceConfigRes) Reset() {
	*x = CreateTourShiftInstanceConfigRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[368]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTourShiftInstanceConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourShiftInstanceConfigRes) ProtoMessage() {}

func (x *CreateTourShiftInstanceConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[368]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourShiftInstanceConfigRes.ProtoReflect.Descriptor instead.
func (*CreateTourShiftInstanceConfigRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{368}
}

func (x *CreateTourShiftInstanceConfigRes) GetTourShiftInstanceConfigSid() int64 {
	if x != nil {
		return x.TourShiftInstanceConfigSid
	}
	return 0
}

// Request message for the UpdateTourShiftInstanceConfig RPC.
type UpdateTourShiftInstanceConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Tour Shift Instance Config to update.
	TourShiftInstanceConfig *TourShiftInstanceConfig `protobuf:"bytes,1,opt,name=tour_shift_instance_config,json=tourShiftInstanceConfig,proto3" json:"tour_shift_instance_config,omitempty"`
}

func (x *UpdateTourShiftInstanceConfigReq) Reset() {
	*x = UpdateTourShiftInstanceConfigReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[369]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTourShiftInstanceConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTourShiftInstanceConfigReq) ProtoMessage() {}

func (x *UpdateTourShiftInstanceConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[369]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTourShiftInstanceConfigReq.ProtoReflect.Descriptor instead.
func (*UpdateTourShiftInstanceConfigReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{369}
}

func (x *UpdateTourShiftInstanceConfigReq) GetTourShiftInstanceConfig() *TourShiftInstanceConfig {
	if x != nil {
		return x.TourShiftInstanceConfig
	}
	return nil
}

// Response message for the UpdateTourShiftInstanceConfig RPC.
type UpdateTourShiftInstanceConfigRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTourShiftInstanceConfigRes) Reset() {
	*x = UpdateTourShiftInstanceConfigRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[370]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTourShiftInstanceConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTourShiftInstanceConfigRes) ProtoMessage() {}

func (x *UpdateTourShiftInstanceConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[370]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTourShiftInstanceConfigRes.ProtoReflect.Descriptor instead.
func (*UpdateTourShiftInstanceConfigRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{370}
}

// Request message for the ListTourShiftInstanceConfigs RPC.
type ListTourShiftInstanceConfigsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the tour week patterns to get the child Tour Shift Instance Configs for.
	TourWeekPatternSids []int64 `protobuf:"varint,1,rep,packed,name=tour_week_pattern_sids,json=tourWeekPatternSids,proto3" json:"tour_week_pattern_sids,omitempty"`
}

func (x *ListTourShiftInstanceConfigsReq) Reset() {
	*x = ListTourShiftInstanceConfigsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[371]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTourShiftInstanceConfigsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTourShiftInstanceConfigsReq) ProtoMessage() {}

func (x *ListTourShiftInstanceConfigsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[371]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTourShiftInstanceConfigsReq.ProtoReflect.Descriptor instead.
func (*ListTourShiftInstanceConfigsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{371}
}

func (x *ListTourShiftInstanceConfigsReq) GetTourWeekPatternSids() []int64 {
	if x != nil {
		return x.TourWeekPatternSids
	}
	return nil
}

// Response message for the ListTourShiftInstanceConfigs RPC.
type ListTourShiftInstanceConfigsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested Tour Shift Instance Configs.
	TourShiftInstanceConfigs []*TourShiftInstanceConfig `protobuf:"bytes,1,rep,name=tour_shift_instance_configs,json=tourShiftInstanceConfigs,proto3" json:"tour_shift_instance_configs,omitempty"`
}

func (x *ListTourShiftInstanceConfigsRes) Reset() {
	*x = ListTourShiftInstanceConfigsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[372]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTourShiftInstanceConfigsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTourShiftInstanceConfigsRes) ProtoMessage() {}

func (x *ListTourShiftInstanceConfigsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[372]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTourShiftInstanceConfigsRes.ProtoReflect.Descriptor instead.
func (*ListTourShiftInstanceConfigsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{372}
}

func (x *ListTourShiftInstanceConfigsRes) GetTourShiftInstanceConfigs() []*TourShiftInstanceConfig {
	if x != nil {
		return x.TourShiftInstanceConfigs
	}
	return nil
}

// Request message for the DeleteTourShiftInstanceConfigs RPC.
type DeleteTourShiftInstanceConfigsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the Tour Shift Instance Configs to be deleted.
	TourShiftInstanceConfigSids []int64 `protobuf:"varint,1,rep,packed,name=tour_shift_instance_config_sids,json=tourShiftInstanceConfigSids,proto3" json:"tour_shift_instance_config_sids,omitempty"`
}

func (x *DeleteTourShiftInstanceConfigsReq) Reset() {
	*x = DeleteTourShiftInstanceConfigsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[373]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTourShiftInstanceConfigsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTourShiftInstanceConfigsReq) ProtoMessage() {}

func (x *DeleteTourShiftInstanceConfigsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[373]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTourShiftInstanceConfigsReq.ProtoReflect.Descriptor instead.
func (*DeleteTourShiftInstanceConfigsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{373}
}

func (x *DeleteTourShiftInstanceConfigsReq) GetTourShiftInstanceConfigSids() []int64 {
	if x != nil {
		return x.TourShiftInstanceConfigSids
	}
	return nil
}

// Response message for the DeleteTourShiftInstanceConfigs RPC.
type DeleteTourShiftInstanceConfigsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTourShiftInstanceConfigsRes) Reset() {
	*x = DeleteTourShiftInstanceConfigsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[374]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTourShiftInstanceConfigsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTourShiftInstanceConfigsRes) ProtoMessage() {}

func (x *DeleteTourShiftInstanceConfigsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[374]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTourShiftInstanceConfigsRes.ProtoReflect.Descriptor instead.
func (*DeleteTourShiftInstanceConfigsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{374}
}

// Request message for the CreateTourShiftSegmentConfig RPC.
type CreateTourShiftSegmentConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tour Shift Segment Config to Create.
	TourShiftSegmentConfig *TourShiftSegmentConfig `protobuf:"bytes,1,opt,name=tour_shift_segment_config,json=tourShiftSegmentConfig,proto3" json:"tour_shift_segment_config,omitempty"`
}

func (x *CreateTourShiftSegmentConfigReq) Reset() {
	*x = CreateTourShiftSegmentConfigReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[375]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTourShiftSegmentConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourShiftSegmentConfigReq) ProtoMessage() {}

func (x *CreateTourShiftSegmentConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[375]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourShiftSegmentConfigReq.ProtoReflect.Descriptor instead.
func (*CreateTourShiftSegmentConfigReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{375}
}

func (x *CreateTourShiftSegmentConfigReq) GetTourShiftSegmentConfig() *TourShiftSegmentConfig {
	if x != nil {
		return x.TourShiftSegmentConfig
	}
	return nil
}

// Response message for the CreateTourPattern RPC.
type CreateTourShiftSegmentConfigRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created Tour shift Segment Config.
	TourShiftSegmentConfigSid int64 `protobuf:"varint,1,opt,name=tour_shift_segment_config_sid,json=tourShiftSegmentConfigSid,proto3" json:"tour_shift_segment_config_sid,omitempty"`
}

func (x *CreateTourShiftSegmentConfigRes) Reset() {
	*x = CreateTourShiftSegmentConfigRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[376]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTourShiftSegmentConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourShiftSegmentConfigRes) ProtoMessage() {}

func (x *CreateTourShiftSegmentConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[376]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourShiftSegmentConfigRes.ProtoReflect.Descriptor instead.
func (*CreateTourShiftSegmentConfigRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{376}
}

func (x *CreateTourShiftSegmentConfigRes) GetTourShiftSegmentConfigSid() int64 {
	if x != nil {
		return x.TourShiftSegmentConfigSid
	}
	return 0
}

// Request message for the UpdateTourShiftSegmentConfig RPC.
type UpdateTourShiftSegmentConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Tour Shift Segment Config to update.
	TourShiftSegmentConfig *TourShiftSegmentConfig `protobuf:"bytes,1,opt,name=tour_shift_segment_config,json=tourShiftSegmentConfig,proto3" json:"tour_shift_segment_config,omitempty"`
}

func (x *UpdateTourShiftSegmentConfigReq) Reset() {
	*x = UpdateTourShiftSegmentConfigReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[377]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTourShiftSegmentConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTourShiftSegmentConfigReq) ProtoMessage() {}

func (x *UpdateTourShiftSegmentConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[377]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTourShiftSegmentConfigReq.ProtoReflect.Descriptor instead.
func (*UpdateTourShiftSegmentConfigReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{377}
}

func (x *UpdateTourShiftSegmentConfigReq) GetTourShiftSegmentConfig() *TourShiftSegmentConfig {
	if x != nil {
		return x.TourShiftSegmentConfig
	}
	return nil
}

// Response message for the CreateTourPattern RPC.
type UpdateTourShiftSegmentConfigRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTourShiftSegmentConfigRes) Reset() {
	*x = UpdateTourShiftSegmentConfigRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[378]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTourShiftSegmentConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTourShiftSegmentConfigRes) ProtoMessage() {}

func (x *UpdateTourShiftSegmentConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[378]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTourShiftSegmentConfigRes.ProtoReflect.Descriptor instead.
func (*UpdateTourShiftSegmentConfigRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{378}
}

// Request message for the ListTourShiftSegmentConfigs RPC.
type ListTourShiftSegmentConfigsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the Tour Shift Instance Configs to get the child Tour Shift Segment Configs for.
	TourShiftInstanceConfigSids []int64 `protobuf:"varint,1,rep,packed,name=tour_shift_instance_config_sids,json=tourShiftInstanceConfigSids,proto3" json:"tour_shift_instance_config_sids,omitempty"`
}

func (x *ListTourShiftSegmentConfigsReq) Reset() {
	*x = ListTourShiftSegmentConfigsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[379]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTourShiftSegmentConfigsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTourShiftSegmentConfigsReq) ProtoMessage() {}

func (x *ListTourShiftSegmentConfigsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[379]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTourShiftSegmentConfigsReq.ProtoReflect.Descriptor instead.
func (*ListTourShiftSegmentConfigsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{379}
}

func (x *ListTourShiftSegmentConfigsReq) GetTourShiftInstanceConfigSids() []int64 {
	if x != nil {
		return x.TourShiftInstanceConfigSids
	}
	return nil
}

// Response message for the ListTourShiftSegmentConfigs RPC.
type ListTourShiftSegmentConfigsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested Tour Shift Segment Configs.
	TourShiftSegmentConfigs []*TourShiftSegmentConfig `protobuf:"bytes,1,rep,name=tour_shift_segment_configs,json=tourShiftSegmentConfigs,proto3" json:"tour_shift_segment_configs,omitempty"`
}

func (x *ListTourShiftSegmentConfigsRes) Reset() {
	*x = ListTourShiftSegmentConfigsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[380]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTourShiftSegmentConfigsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTourShiftSegmentConfigsRes) ProtoMessage() {}

func (x *ListTourShiftSegmentConfigsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[380]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTourShiftSegmentConfigsRes.ProtoReflect.Descriptor instead.
func (*ListTourShiftSegmentConfigsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{380}
}

func (x *ListTourShiftSegmentConfigsRes) GetTourShiftSegmentConfigs() []*TourShiftSegmentConfig {
	if x != nil {
		return x.TourShiftSegmentConfigs
	}
	return nil
}

// Request message for the DeleteTourShiftSegmentConfigs RPC.
type DeleteTourShiftSegmentConfigsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the Tour Shift Segment Configs to delete.
	TourShiftSegmentConfigSids []int64 `protobuf:"varint,1,rep,packed,name=tour_shift_segment_config_sids,json=tourShiftSegmentConfigSids,proto3" json:"tour_shift_segment_config_sids,omitempty"`
}

func (x *DeleteTourShiftSegmentConfigsReq) Reset() {
	*x = DeleteTourShiftSegmentConfigsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[381]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTourShiftSegmentConfigsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTourShiftSegmentConfigsReq) ProtoMessage() {}

func (x *DeleteTourShiftSegmentConfigsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[381]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTourShiftSegmentConfigsReq.ProtoReflect.Descriptor instead.
func (*DeleteTourShiftSegmentConfigsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{381}
}

func (x *DeleteTourShiftSegmentConfigsReq) GetTourShiftSegmentConfigSids() []int64 {
	if x != nil {
		return x.TourShiftSegmentConfigSids
	}
	return nil
}

// Response message for the DeleteTourShiftSegmentConfigs RPC.
type DeleteTourShiftSegmentConfigsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTourShiftSegmentConfigsRes) Reset() {
	*x = DeleteTourShiftSegmentConfigsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[382]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTourShiftSegmentConfigsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTourShiftSegmentConfigsRes) ProtoMessage() {}

func (x *DeleteTourShiftSegmentConfigsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[382]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTourShiftSegmentConfigsRes.ProtoReflect.Descriptor instead.
func (*DeleteTourShiftSegmentConfigsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{382}
}

// Request message for the CreateTourAgentCollection RPC.
type CreateTourAgentCollectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Tour Agent Collection to create.
	TourAgentCollection *TourAgentCollection `protobuf:"bytes,1,opt,name=tour_agent_collection,json=tourAgentCollection,proto3" json:"tour_agent_collection,omitempty"`
}

func (x *CreateTourAgentCollectionReq) Reset() {
	*x = CreateTourAgentCollectionReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[383]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTourAgentCollectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourAgentCollectionReq) ProtoMessage() {}

func (x *CreateTourAgentCollectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[383]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourAgentCollectionReq.ProtoReflect.Descriptor instead.
func (*CreateTourAgentCollectionReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{383}
}

func (x *CreateTourAgentCollectionReq) GetTourAgentCollection() *TourAgentCollection {
	if x != nil {
		return x.TourAgentCollection
	}
	return nil
}

// Response message for the CreateTourAgentCollection RPC.
type CreateTourAgentCollectionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created Tour Agent Collection.
	TourAgentCollectionSid int64 `protobuf:"varint,1,opt,name=tour_agent_collection_sid,json=tourAgentCollectionSid,proto3" json:"tour_agent_collection_sid,omitempty"`
}

func (x *CreateTourAgentCollectionRes) Reset() {
	*x = CreateTourAgentCollectionRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[384]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTourAgentCollectionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourAgentCollectionRes) ProtoMessage() {}

func (x *CreateTourAgentCollectionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[384]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourAgentCollectionRes.ProtoReflect.Descriptor instead.
func (*CreateTourAgentCollectionRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{384}
}

func (x *CreateTourAgentCollectionRes) GetTourAgentCollectionSid() int64 {
	if x != nil {
		return x.TourAgentCollectionSid
	}
	return 0
}

// Request message for the UpdateTourAgentCollection RPC.
type UpdateTourAgentCollectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Tour Agent Collection to update.
	TourAgentCollection *TourAgentCollection `protobuf:"bytes,1,opt,name=tour_agent_collection,json=tourAgentCollection,proto3" json:"tour_agent_collection,omitempty"`
}

func (x *UpdateTourAgentCollectionReq) Reset() {
	*x = UpdateTourAgentCollectionReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[385]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTourAgentCollectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTourAgentCollectionReq) ProtoMessage() {}

func (x *UpdateTourAgentCollectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[385]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTourAgentCollectionReq.ProtoReflect.Descriptor instead.
func (*UpdateTourAgentCollectionReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{385}
}

func (x *UpdateTourAgentCollectionReq) GetTourAgentCollection() *TourAgentCollection {
	if x != nil {
		return x.TourAgentCollection
	}
	return nil
}

// Response message for the UpdateTourAgentCollection RPC.
type UpdateTourAgentCollectionRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTourAgentCollectionRes) Reset() {
	*x = UpdateTourAgentCollectionRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[386]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTourAgentCollectionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTourAgentCollectionRes) ProtoMessage() {}

func (x *UpdateTourAgentCollectionRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[386]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTourAgentCollectionRes.ProtoReflect.Descriptor instead.
func (*UpdateTourAgentCollectionRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{386}
}

// Request message for the ListTourAgentCollections RPC.
type ListTourAgentCollectionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the tour pattern to get the child Tour Agent Collections for.
	TourPatternSid int64 `protobuf:"varint,1,opt,name=tour_pattern_sid,json=tourPatternSid,proto3" json:"tour_pattern_sid,omitempty"`
}

func (x *ListTourAgentCollectionsReq) Reset() {
	*x = ListTourAgentCollectionsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[387]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTourAgentCollectionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTourAgentCollectionsReq) ProtoMessage() {}

func (x *ListTourAgentCollectionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[387]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTourAgentCollectionsReq.ProtoReflect.Descriptor instead.
func (*ListTourAgentCollectionsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{387}
}

func (x *ListTourAgentCollectionsReq) GetTourPatternSid() int64 {
	if x != nil {
		return x.TourPatternSid
	}
	return 0
}

// Response message for the ListTourAgentCollections RPC.
type ListTourAgentCollectionsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested Tour Agent Collections.
	TourAgentCollections []*TourAgentCollection `protobuf:"bytes,1,rep,name=tour_agent_collections,json=tourAgentCollections,proto3" json:"tour_agent_collections,omitempty"`
}

func (x *ListTourAgentCollectionsRes) Reset() {
	*x = ListTourAgentCollectionsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[388]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTourAgentCollectionsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTourAgentCollectionsRes) ProtoMessage() {}

func (x *ListTourAgentCollectionsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[388]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTourAgentCollectionsRes.ProtoReflect.Descriptor instead.
func (*ListTourAgentCollectionsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{388}
}

func (x *ListTourAgentCollectionsRes) GetTourAgentCollections() []*TourAgentCollection {
	if x != nil {
		return x.TourAgentCollections
	}
	return nil
}

// Request message for the DeleteTourAgentCollections RPC.
type DeleteTourAgentCollectionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the Tour Agent Collections to be deleted.
	// Any associations with WFM Agent SIDS for these Collections will also be deleted.
	TourAgentCollectionSids []int64 `protobuf:"varint,1,rep,packed,name=tour_agent_collection_sids,json=tourAgentCollectionSids,proto3" json:"tour_agent_collection_sids,omitempty"`
}

func (x *DeleteTourAgentCollectionsReq) Reset() {
	*x = DeleteTourAgentCollectionsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[389]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTourAgentCollectionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTourAgentCollectionsReq) ProtoMessage() {}

func (x *DeleteTourAgentCollectionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[389]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTourAgentCollectionsReq.ProtoReflect.Descriptor instead.
func (*DeleteTourAgentCollectionsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{389}
}

func (x *DeleteTourAgentCollectionsReq) GetTourAgentCollectionSids() []int64 {
	if x != nil {
		return x.TourAgentCollectionSids
	}
	return nil
}

// Response message for the DeleteTourAgentCollections RPC.
type DeleteTourAgentCollectionsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTourAgentCollectionsRes) Reset() {
	*x = DeleteTourAgentCollectionsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[390]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTourAgentCollectionsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTourAgentCollectionsRes) ProtoMessage() {}

func (x *DeleteTourAgentCollectionsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[390]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTourAgentCollectionsRes.ProtoReflect.Descriptor instead.
func (*DeleteTourAgentCollectionsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{390}
}

// Request message for the CreateTourAgentCollectionWFMAgents RPC.
type CreateTourAgentCollectionWFMAgentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agents to add to @tour_agent_collection_sid.
	WfmAgentSids []int64 `protobuf:"varint,1,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
	// ID of the Tour Agent Collection that the @wfm_agent_sids will belong to.
	TourAgentCollectionSid int64 `protobuf:"varint,2,opt,name=tour_agent_collection_sid,json=tourAgentCollectionSid,proto3" json:"tour_agent_collection_sid,omitempty"`
}

func (x *CreateTourAgentCollectionWFMAgentsReq) Reset() {
	*x = CreateTourAgentCollectionWFMAgentsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[391]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTourAgentCollectionWFMAgentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourAgentCollectionWFMAgentsReq) ProtoMessage() {}

func (x *CreateTourAgentCollectionWFMAgentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[391]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourAgentCollectionWFMAgentsReq.ProtoReflect.Descriptor instead.
func (*CreateTourAgentCollectionWFMAgentsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{391}
}

func (x *CreateTourAgentCollectionWFMAgentsReq) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

func (x *CreateTourAgentCollectionWFMAgentsReq) GetTourAgentCollectionSid() int64 {
	if x != nil {
		return x.TourAgentCollectionSid
	}
	return 0
}

// Response message for the CreateTourAgentCollectionWFMAgents RPC.
type CreateTourAgentCollectionWFMAgentsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTourAgentCollectionWFMAgentsRes) Reset() {
	*x = CreateTourAgentCollectionWFMAgentsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[392]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTourAgentCollectionWFMAgentsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTourAgentCollectionWFMAgentsRes) ProtoMessage() {}

func (x *CreateTourAgentCollectionWFMAgentsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[392]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTourAgentCollectionWFMAgentsRes.ProtoReflect.Descriptor instead.
func (*CreateTourAgentCollectionWFMAgentsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{392}
}

// Request message for the ListTourAgentCollectionWFMAgents RPC.
type ListTourAgentCollectionWFMAgentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the Tour Agent Collections to get the @wfm_agent_pairings for.
	TourAgentCollectionSids []int64 `protobuf:"varint,1,rep,packed,name=tour_agent_collection_sids,json=tourAgentCollectionSids,proto3" json:"tour_agent_collection_sids,omitempty"`
}

func (x *ListTourAgentCollectionWFMAgentsReq) Reset() {
	*x = ListTourAgentCollectionWFMAgentsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[393]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTourAgentCollectionWFMAgentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTourAgentCollectionWFMAgentsReq) ProtoMessage() {}

func (x *ListTourAgentCollectionWFMAgentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[393]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTourAgentCollectionWFMAgentsReq.ProtoReflect.Descriptor instead.
func (*ListTourAgentCollectionWFMAgentsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{393}
}

func (x *ListTourAgentCollectionWFMAgentsReq) GetTourAgentCollectionSids() []int64 {
	if x != nil {
		return x.TourAgentCollectionSids
	}
	return nil
}

// Response message for the ListTourAgentCollectionWFMAgents RPC.
type ListTourAgentCollectionWFMAgentsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested WFM Agent SIDs.
	WfmAgentPairings []*ListTourAgentCollectionWFMAgentsRes_SidMapping `protobuf:"bytes,1,rep,name=wfm_agent_pairings,json=wfmAgentPairings,proto3" json:"wfm_agent_pairings,omitempty"`
}

func (x *ListTourAgentCollectionWFMAgentsRes) Reset() {
	*x = ListTourAgentCollectionWFMAgentsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[394]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTourAgentCollectionWFMAgentsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTourAgentCollectionWFMAgentsRes) ProtoMessage() {}

func (x *ListTourAgentCollectionWFMAgentsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[394]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTourAgentCollectionWFMAgentsRes.ProtoReflect.Descriptor instead.
func (*ListTourAgentCollectionWFMAgentsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{394}
}

func (x *ListTourAgentCollectionWFMAgentsRes) GetWfmAgentPairings() []*ListTourAgentCollectionWFMAgentsRes_SidMapping {
	if x != nil {
		return x.WfmAgentPairings
	}
	return nil
}

// Request message for the DeleteTourAgentCollectionWFMAgents RPC.
type DeleteTourAgentCollectionWFMAgentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the WFM Agents to delete from @tour_agent_collection_sid.
	// If no wfm_angent_sids are provided, all will be removed for @tour_agent_collection_sid.
	WfmAgentSids []int64 `protobuf:"varint,1,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
	// ID of the tour agent collection that the @wfm_agent_sids will be deleted from.
	TourAgentCollectionSid int64 `protobuf:"varint,2,opt,name=tour_agent_collection_sid,json=tourAgentCollectionSid,proto3" json:"tour_agent_collection_sid,omitempty"`
}

func (x *DeleteTourAgentCollectionWFMAgentsReq) Reset() {
	*x = DeleteTourAgentCollectionWFMAgentsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[395]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTourAgentCollectionWFMAgentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTourAgentCollectionWFMAgentsReq) ProtoMessage() {}

func (x *DeleteTourAgentCollectionWFMAgentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[395]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTourAgentCollectionWFMAgentsReq.ProtoReflect.Descriptor instead.
func (*DeleteTourAgentCollectionWFMAgentsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{395}
}

func (x *DeleteTourAgentCollectionWFMAgentsReq) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

func (x *DeleteTourAgentCollectionWFMAgentsReq) GetTourAgentCollectionSid() int64 {
	if x != nil {
		return x.TourAgentCollectionSid
	}
	return 0
}

// Response message for the DeleteTourAgentCollectionWFMAgents RPC.
type DeleteTourAgentCollectionWFMAgentsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTourAgentCollectionWFMAgentsRes) Reset() {
	*x = DeleteTourAgentCollectionWFMAgentsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[396]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTourAgentCollectionWFMAgentsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTourAgentCollectionWFMAgentsRes) ProtoMessage() {}

func (x *DeleteTourAgentCollectionWFMAgentsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[396]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTourAgentCollectionWFMAgentsRes.ProtoReflect.Descriptor instead.
func (*DeleteTourAgentCollectionWFMAgentsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{396}
}

// Request message for the GenerateTourWeekPatterns RPC.
type GenerateTourWeekPatternsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the shift template to create the tour week patterns for.
	TargetShiftTemplateSid int64 `protobuf:"varint,1,opt,name=target_shift_template_sid,json=targetShiftTemplateSid,proto3" json:"target_shift_template_sid,omitempty"`
	// The number of week patterns to be generated.
	NumWeeksInTour int32 `protobuf:"varint,2,opt,name=num_weeks_in_tour,json=numWeeksInTour,proto3" json:"num_weeks_in_tour,omitempty"`
	// ID of the schedule scenario that @target_shift_template_sid belong to.
	ScheduleScenarioSid int64 `protobuf:"varint,3,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *GenerateTourWeekPatternsReq) Reset() {
	*x = GenerateTourWeekPatternsReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[397]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTourWeekPatternsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTourWeekPatternsReq) ProtoMessage() {}

func (x *GenerateTourWeekPatternsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[397]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTourWeekPatternsReq.ProtoReflect.Descriptor instead.
func (*GenerateTourWeekPatternsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{397}
}

func (x *GenerateTourWeekPatternsReq) GetTargetShiftTemplateSid() int64 {
	if x != nil {
		return x.TargetShiftTemplateSid
	}
	return 0
}

func (x *GenerateTourWeekPatternsReq) GetNumWeeksInTour() int32 {
	if x != nil {
		return x.NumWeeksInTour
	}
	return 0
}

func (x *GenerateTourWeekPatternsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the GenerateTourWeekPatterns RPC.
type GenerateTourWeekPatternsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of tour week patterns containing the newly generated tour pattern weeks in the member field.
	TourWeekPatterns []*TourWeekPattern `protobuf:"bytes,1,rep,name=tour_week_patterns,json=tourWeekPatterns,proto3" json:"tour_week_patterns,omitempty"`
	// Reports any errors preventing @tour_pattern from being generated.
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *GenerateTourWeekPatternsRes) Reset() {
	*x = GenerateTourWeekPatternsRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[398]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTourWeekPatternsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTourWeekPatternsRes) ProtoMessage() {}

func (x *GenerateTourWeekPatternsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[398]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTourWeekPatternsRes.ProtoReflect.Descriptor instead.
func (*GenerateTourWeekPatternsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{398}
}

func (x *GenerateTourWeekPatternsRes) GetTourWeekPatterns() []*TourWeekPattern {
	if x != nil {
		return x.TourWeekPatterns
	}
	return nil
}

func (x *GenerateTourWeekPatternsRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the RemoveAgentFromSchedule RPC.
type RemoveAgentFromScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime range over which the agent should be removed.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// ID of the agent to be removed.
	WfmAgentSid int64 `protobuf:"varint,2,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// The schedule containing shifts for @wfm_agent_sid to be removed from.
	ScheduleSelector *commons.ScheduleSelector `protobuf:"bytes,3,opt,name=schedule_selector,json=scheduleSelector,proto3" json:"schedule_selector,omitempty"`
	// The node that the shifts to be removed are associated with.
	// If left blank, the agent may be removed from shifts associated with the entire scenario.
	NodeSelector *ParentEntity `protobuf:"bytes,4,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// The schedule_scenario_sid that @node_selector and @wfm_agent_sid is associated with.
	ScheduleScenarioSid int64 `protobuf:"varint,5,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *RemoveAgentFromScheduleRequest) Reset() {
	*x = RemoveAgentFromScheduleRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[399]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveAgentFromScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAgentFromScheduleRequest) ProtoMessage() {}

func (x *RemoveAgentFromScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[399]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAgentFromScheduleRequest.ProtoReflect.Descriptor instead.
func (*RemoveAgentFromScheduleRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{399}
}

func (x *RemoveAgentFromScheduleRequest) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *RemoveAgentFromScheduleRequest) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

func (x *RemoveAgentFromScheduleRequest) GetScheduleSelector() *commons.ScheduleSelector {
	if x != nil {
		return x.ScheduleSelector
	}
	return nil
}

func (x *RemoveAgentFromScheduleRequest) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *RemoveAgentFromScheduleRequest) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the RemoveAgentFromSchedule RPC.
type RemoveAgentFromScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created unassigned WFM agent.
	UnassignedWfmAgentSid int64 `protobuf:"varint,1,opt,name=unassigned_wfm_agent_sid,json=unassignedWfmAgentSid,proto3" json:"unassigned_wfm_agent_sid,omitempty"`
	// All shifts updated by the method, now assigned to @unassigned_wfm_agent_sid.
	UpdatedShifts []*ShiftInstance `protobuf:"bytes,2,rep,name=updated_shifts,json=updatedShifts,proto3" json:"updated_shifts,omitempty"`
}

func (x *RemoveAgentFromScheduleResponse) Reset() {
	*x = RemoveAgentFromScheduleResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[400]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveAgentFromScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAgentFromScheduleResponse) ProtoMessage() {}

func (x *RemoveAgentFromScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[400]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAgentFromScheduleResponse.ProtoReflect.Descriptor instead.
func (*RemoveAgentFromScheduleResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{400}
}

func (x *RemoveAgentFromScheduleResponse) GetUnassignedWfmAgentSid() int64 {
	if x != nil {
		return x.UnassignedWfmAgentSid
	}
	return 0
}

func (x *RemoveAgentFromScheduleResponse) GetUpdatedShifts() []*ShiftInstance {
	if x != nil {
		return x.UpdatedShifts
	}
	return nil
}

// Request message for the ListValidAgentsForReplacement RPC.
type ListValidAgentsForReplacementReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the schedule scenario to check for WFM agents.
	ScheduleScenarioSid int64 `protobuf:"varint,1,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// An optional field used to limit the datetime range of the shifts being checked.
	// If left blank, the full schedule range will be updated.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,2,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Indicates the schedule to be updated.
	ScheduleSelector *commons.ScheduleSelector `protobuf:"bytes,3,opt,name=schedule_selector,json=scheduleSelector,proto3" json:"schedule_selector,omitempty"`
	// An optional field indicating the node to get shifts from.
	// Otherwise shifts will be checked for all nodes on the @schedule_selector.
	NodeSelector *ParentEntity `protobuf:"bytes,4,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// ID of the WFM Agent to be replaced.
	WfmAgentSidToReplace int64 `protobuf:"varint,5,opt,name=wfm_agent_sid_to_replace,json=wfmAgentSidToReplace,proto3" json:"wfm_agent_sid_to_replace,omitempty"`
	// Indicates whether the step to sort agents by skill proficiency should be skipped.
	// If left as False, the @wfm_agent_sids will be returned in descending order from most qualified to least qualified.
	SkipSkillProficiencySort bool `protobuf:"varint,6,opt,name=skip_skill_proficiency_sort,json=skipSkillProficiencySort,proto3" json:"skip_skill_proficiency_sort,omitempty"`
	// Indicated whether agent sids should still be returned, even if they do not have a skill proficiency for all of the required skills.
	// If left as False, only agents with a skill proficiency for all the updted shifts will be returned.
	// Under no conditions are constraint rule requirements enforced by this endpoint.
	IncludeSkillMismatches bool `protobuf:"varint,7,opt,name=include_skill_mismatches,json=includeSkillMismatches,proto3" json:"include_skill_mismatches,omitempty"`
	// Indicated whether to skip the check for must be members of all of the same agent groups as @
	SkipForceSameAgentGroups bool `protobuf:"varint,8,opt,name=skip_force_same_agent_groups,json=skipForceSameAgentGroups,proto3" json:"skip_force_same_agent_groups,omitempty"`
}

func (x *ListValidAgentsForReplacementReq) Reset() {
	*x = ListValidAgentsForReplacementReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[401]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListValidAgentsForReplacementReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListValidAgentsForReplacementReq) ProtoMessage() {}

func (x *ListValidAgentsForReplacementReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[401]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListValidAgentsForReplacementReq.ProtoReflect.Descriptor instead.
func (*ListValidAgentsForReplacementReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{401}
}

func (x *ListValidAgentsForReplacementReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *ListValidAgentsForReplacementReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *ListValidAgentsForReplacementReq) GetScheduleSelector() *commons.ScheduleSelector {
	if x != nil {
		return x.ScheduleSelector
	}
	return nil
}

func (x *ListValidAgentsForReplacementReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *ListValidAgentsForReplacementReq) GetWfmAgentSidToReplace() int64 {
	if x != nil {
		return x.WfmAgentSidToReplace
	}
	return 0
}

func (x *ListValidAgentsForReplacementReq) GetSkipSkillProficiencySort() bool {
	if x != nil {
		return x.SkipSkillProficiencySort
	}
	return false
}

func (x *ListValidAgentsForReplacementReq) GetIncludeSkillMismatches() bool {
	if x != nil {
		return x.IncludeSkillMismatches
	}
	return false
}

func (x *ListValidAgentsForReplacementReq) GetSkipForceSameAgentGroups() bool {
	if x != nil {
		return x.SkipForceSameAgentGroups
	}
	return false
}

// Response message for the ListValidAgentsForReplacement RPC.
type ListValidAgentsForReplacementRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of valid WFM agent sids. In order of highest related skill proficiency to lowest, if not @skip_skill_proficiency_sort.
	WfmAgentSids []int64 `protobuf:"varint,1,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
}

func (x *ListValidAgentsForReplacementRes) Reset() {
	*x = ListValidAgentsForReplacementRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[402]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListValidAgentsForReplacementRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListValidAgentsForReplacementRes) ProtoMessage() {}

func (x *ListValidAgentsForReplacementRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[402]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListValidAgentsForReplacementRes.ProtoReflect.Descriptor instead.
func (*ListValidAgentsForReplacementRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{402}
}

func (x *ListValidAgentsForReplacementRes) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

// Request message for the ReplaceAgentOnSchedule RPC.
type ReplaceAgentOnScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional field used to limit the datetime range of the shifts being updated.
	// If left blank, the full schedule range will be updated.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Indicates the schedule to be updated.
	ScheduleSelector *commons.ScheduleSelector `protobuf:"bytes,2,opt,name=schedule_selector,json=scheduleSelector,proto3" json:"schedule_selector,omitempty"`
	// An optional field indicating the node to get shifts from.
	// Otherwise shifts will be updated for all nodes on the @schedule_selector.
	NodeSelector *ParentEntity `protobuf:"bytes,3,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// ID of the WFM agent to remove from the schedule.
	WfmAgentSidToRemove int64 `protobuf:"varint,4,opt,name=wfm_agent_sid_to_remove,json=wfmAgentSidToRemove,proto3" json:"wfm_agent_sid_to_remove,omitempty"`
	// ID of the WFM agent to add to the schedule, in place of @wfm_agent_sid_to_remove.
	WfmAgentSidToAdd int64 `protobuf:"varint,5,opt,name=wfm_agent_sid_to_add,json=wfmAgentSidToAdd,proto3" json:"wfm_agent_sid_to_add,omitempty"`
	// If set to true, any overlapping shift conflicts will be skipped.
	// Otherwise, any overlap conflicts will raise a diagnostic and prevent any shifts from being updated.
	SkipOverlappingShifts bool `protobuf:"varint,6,opt,name=skip_overlapping_shifts,json=skipOverlappingShifts,proto3" json:"skip_overlapping_shifts,omitempty"`
}

func (x *ReplaceAgentOnScheduleReq) Reset() {
	*x = ReplaceAgentOnScheduleReq{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[403]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceAgentOnScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceAgentOnScheduleReq) ProtoMessage() {}

func (x *ReplaceAgentOnScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[403]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceAgentOnScheduleReq.ProtoReflect.Descriptor instead.
func (*ReplaceAgentOnScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{403}
}

func (x *ReplaceAgentOnScheduleReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *ReplaceAgentOnScheduleReq) GetScheduleSelector() *commons.ScheduleSelector {
	if x != nil {
		return x.ScheduleSelector
	}
	return nil
}

func (x *ReplaceAgentOnScheduleReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *ReplaceAgentOnScheduleReq) GetWfmAgentSidToRemove() int64 {
	if x != nil {
		return x.WfmAgentSidToRemove
	}
	return 0
}

func (x *ReplaceAgentOnScheduleReq) GetWfmAgentSidToAdd() int64 {
	if x != nil {
		return x.WfmAgentSidToAdd
	}
	return 0
}

func (x *ReplaceAgentOnScheduleReq) GetSkipOverlappingShifts() bool {
	if x != nil {
		return x.SkipOverlappingShifts
	}
	return false
}

// Response message for the ReplaceAgentOnSchedule RPC.
type ReplaceAgentOnScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated shift instances which were transfered to @wfm_agent_sid_to_add.
	UpdatedShiftInstances []*ShiftInstance `protobuf:"bytes,1,rep,name=updated_shift_instances,json=updatedShiftInstances,proto3" json:"updated_shift_instances,omitempty"`
	// Any diagnostics raised due to overlap conflicts.
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *ReplaceAgentOnScheduleRes) Reset() {
	*x = ReplaceAgentOnScheduleRes{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[404]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceAgentOnScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceAgentOnScheduleRes) ProtoMessage() {}

func (x *ReplaceAgentOnScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[404]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceAgentOnScheduleRes.ProtoReflect.Descriptor instead.
func (*ReplaceAgentOnScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{404}
}

func (x *ReplaceAgentOnScheduleRes) GetUpdatedShiftInstances() []*ShiftInstance {
	if x != nil {
		return x.UpdatedShiftInstances
	}
	return nil
}

func (x *ReplaceAgentOnScheduleRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// An rgba color.
type RgbaColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Red   float32 `protobuf:"fixed32,1,opt,name=red,proto3" json:"red,omitempty"`     // [0.0, 1.0]
	Green float32 `protobuf:"fixed32,2,opt,name=green,proto3" json:"green,omitempty"` // [0.0, 1.0]
	Blue  float32 `protobuf:"fixed32,3,opt,name=blue,proto3" json:"blue,omitempty"`   // [0.0, 1.0]
	Alpha float32 `protobuf:"fixed32,4,opt,name=alpha,proto3" json:"alpha,omitempty"` // [0.0, 1.0]
	Name  string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the rgba color.
	RgbaColorId int64 `protobuf:"varint,6,opt,name=rgba_color_id,json=rgbaColorId,proto3" json:"rgba_color_id,omitempty"`
}

func (x *RgbaColor) Reset() {
	*x = RgbaColor{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[405]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RgbaColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RgbaColor) ProtoMessage() {}

func (x *RgbaColor) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[405]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RgbaColor.ProtoReflect.Descriptor instead.
func (*RgbaColor) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{405}
}

func (x *RgbaColor) GetRed() float32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *RgbaColor) GetGreen() float32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *RgbaColor) GetBlue() float32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

func (x *RgbaColor) GetAlpha() float32 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *RgbaColor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RgbaColor) GetRgbaColorId() int64 {
	if x != nil {
		return x.RgbaColorId
	}
	return 0
}

// Request message for the HelloWorldWFMAdherence RPC.
type HelloWorldWFMAdherenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HelloWorldWFMAdherenceRequest) Reset() {
	*x = HelloWorldWFMAdherenceRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[406]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloWorldWFMAdherenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloWorldWFMAdherenceRequest) ProtoMessage() {}

func (x *HelloWorldWFMAdherenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[406]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloWorldWFMAdherenceRequest.ProtoReflect.Descriptor instead.
func (*HelloWorldWFMAdherenceRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{406}
}

// Response message for the HelloWorldWFMAdherence RPC.
type HelloWorldWFMAdherenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string containing the hello world message
	HelloMessage string `protobuf:"bytes,1,opt,name=hello_message,json=helloMessage,proto3" json:"hello_message,omitempty"`
}

func (x *HelloWorldWFMAdherenceResponse) Reset() {
	*x = HelloWorldWFMAdherenceResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[407]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloWorldWFMAdherenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloWorldWFMAdherenceResponse) ProtoMessage() {}

func (x *HelloWorldWFMAdherenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[407]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloWorldWFMAdherenceResponse.ProtoReflect.Descriptor instead.
func (*HelloWorldWFMAdherenceResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{407}
}

func (x *HelloWorldWFMAdherenceResponse) GetHelloMessage() string {
	if x != nil {
		return x.HelloMessage
	}
	return ""
}

// Request message for the ListAgentStatesForDay RPC.
//
// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
type ListAgentStatesForDayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The datetime to start getting agent states from.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// An optional parameter.
	// If set, all agent states will be retrieved for the given datetime range.
	// If not set, all agent states will be retrieved for either a 24 hour period or until the current time, whichever is shorter.
	EndDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_datetime,json=endDatetime,proto3" json:"end_datetime,omitempty"`
}

func (x *ListAgentStatesForDayRequest) Reset() {
	*x = ListAgentStatesForDayRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[408]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentStatesForDayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentStatesForDayRequest) ProtoMessage() {}

func (x *ListAgentStatesForDayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[408]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentStatesForDayRequest.ProtoReflect.Descriptor instead.
func (*ListAgentStatesForDayRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{408}
}

func (x *ListAgentStatesForDayRequest) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *ListAgentStatesForDayRequest) GetEndDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDatetime
	}
	return nil
}

// Response message for the ListAgentStatesForDay RPC.
//
// Deprecated: Marked as deprecated in api/v1alpha1/wfm/wfm.proto.
type ListAgentStatesForDayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of requested agent states.
	AgentStates []*commons.AgentStateSequence `protobuf:"bytes,1,rep,name=agent_states,json=agentStates,proto3" json:"agent_states,omitempty"`
}

func (x *ListAgentStatesForDayResponse) Reset() {
	*x = ListAgentStatesForDayResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[409]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentStatesForDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentStatesForDayResponse) ProtoMessage() {}

func (x *ListAgentStatesForDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[409]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentStatesForDayResponse.ProtoReflect.Descriptor instead.
func (*ListAgentStatesForDayResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{409}
}

func (x *ListAgentStatesForDayResponse) GetAgentStates() []*commons.AgentStateSequence {
	if x != nil {
		return x.AgentStates
	}
	return nil
}

// Request message for ListRealTimeManagementStates.
type ListRealTimeManagementStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRealTimeManagementStatesRequest) Reset() {
	*x = ListRealTimeManagementStatesRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[410]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRealTimeManagementStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRealTimeManagementStatesRequest) ProtoMessage() {}

func (x *ListRealTimeManagementStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[410]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRealTimeManagementStatesRequest.ProtoReflect.Descriptor instead.
func (*ListRealTimeManagementStatesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{410}
}

// Response message for ListRealTimeManagementStates.
type ListRealTimeManagementStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The states.
	States []commons.RealTimeManagementState `protobuf:"varint,1,rep,packed,name=states,proto3,enum=api.commons.RealTimeManagementState" json:"states,omitempty"`
}

func (x *ListRealTimeManagementStatesResponse) Reset() {
	*x = ListRealTimeManagementStatesResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[411]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRealTimeManagementStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRealTimeManagementStatesResponse) ProtoMessage() {}

func (x *ListRealTimeManagementStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[411]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRealTimeManagementStatesResponse.ProtoReflect.Descriptor instead.
func (*ListRealTimeManagementStatesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{411}
}

func (x *ListRealTimeManagementStatesResponse) GetStates() []commons.RealTimeManagementState {
	if x != nil {
		return x.States
	}
	return nil
}

// Request message for the ListAdherenceAgentStates RPC.
type ListAdherenceAgentStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agents to get the agent states for.
	// All IDs must be for TCN agents.
	WfmAgentSids []int64 `protobuf:"varint,1,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
	// The datetime to start getting agent states from - not inclusive.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// An optional parameter - inclusive.
	// If set, all agent states will be retrieved until the given @end_datetime.
	// If not set, they will be retrieved until the current time.
	EndDatetime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_datetime,json=endDatetime,proto3" json:"end_datetime,omitempty"`
}

func (x *ListAdherenceAgentStatesRequest) Reset() {
	*x = ListAdherenceAgentStatesRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[412]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdherenceAgentStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdherenceAgentStatesRequest) ProtoMessage() {}

func (x *ListAdherenceAgentStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[412]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdherenceAgentStatesRequest.ProtoReflect.Descriptor instead.
func (*ListAdherenceAgentStatesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{412}
}

func (x *ListAdherenceAgentStatesRequest) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

func (x *ListAdherenceAgentStatesRequest) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *ListAdherenceAgentStatesRequest) GetEndDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDatetime
	}
	return nil
}

// Response message for the ListAdherenceAgentStates RPC.
type ListAdherenceAgentStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The found agent states, grouped by wfm_agent_sid and ordered in ascending order by start_datetime.
	// Key: @wfm_agent_sid - Value: List of agent states that the agent has.
	AgentStates map[int64]*commons.AdherenceAgentStates `protobuf:"bytes,1,rep,name=agent_states,json=agentStates,proto3" json:"agent_states,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Lastest datetime found amongst all the returned states.
	// If no agent states are returned, this date will be set to the @start_datetime from the request.
	// This value should be used as input to this function whenever the next set of agent states is desired.
	LatestAgentStateDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=latest_agent_state_datetime,json=latestAgentStateDatetime,proto3" json:"latest_agent_state_datetime,omitempty"`
}

func (x *ListAdherenceAgentStatesResponse) Reset() {
	*x = ListAdherenceAgentStatesResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[413]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdherenceAgentStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdherenceAgentStatesResponse) ProtoMessage() {}

func (x *ListAdherenceAgentStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[413]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdherenceAgentStatesResponse.ProtoReflect.Descriptor instead.
func (*ListAdherenceAgentStatesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{413}
}

func (x *ListAdherenceAgentStatesResponse) GetAgentStates() map[int64]*commons.AdherenceAgentStates {
	if x != nil {
		return x.AgentStates
	}
	return nil
}

func (x *ListAdherenceAgentStatesResponse) GetLatestAgentStateDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestAgentStateDatetime
	}
	return nil
}

// Combines RealTimeManagementState and RgbaColor.
type RealTimeManagementStateColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state.
	State commons.RealTimeManagementState `protobuf:"varint,1,opt,name=state,proto3,enum=api.commons.RealTimeManagementState" json:"state,omitempty"`
	// The color.
	Color *RgbaColor `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *RealTimeManagementStateColor) Reset() {
	*x = RealTimeManagementStateColor{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[414]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealTimeManagementStateColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeManagementStateColor) ProtoMessage() {}

func (x *RealTimeManagementStateColor) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[414]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeManagementStateColor.ProtoReflect.Descriptor instead.
func (*RealTimeManagementStateColor) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{414}
}

func (x *RealTimeManagementStateColor) GetState() commons.RealTimeManagementState {
	if x != nil {
		return x.State
	}
	return commons.RealTimeManagementState(0)
}

func (x *RealTimeManagementStateColor) GetColor() *RgbaColor {
	if x != nil {
		return x.Color
	}
	return nil
}

// Request message for UpsertRealTimeManagementStateColor
type UpsertRealTimeManagementStateColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state to associate with @rgba_color_id.
	State commons.RealTimeManagementState `protobuf:"varint,1,opt,name=state,proto3,enum=api.commons.RealTimeManagementState" json:"state,omitempty"`
	// The rgba_color_id to create a state color association with.
	RgbaColorId int64 `protobuf:"varint,2,opt,name=rgba_color_id,json=rgbaColorId,proto3" json:"rgba_color_id,omitempty"`
}

func (x *UpsertRealTimeManagementStateColorRequest) Reset() {
	*x = UpsertRealTimeManagementStateColorRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[415]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertRealTimeManagementStateColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRealTimeManagementStateColorRequest) ProtoMessage() {}

func (x *UpsertRealTimeManagementStateColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[415]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRealTimeManagementStateColorRequest.ProtoReflect.Descriptor instead.
func (*UpsertRealTimeManagementStateColorRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{415}
}

func (x *UpsertRealTimeManagementStateColorRequest) GetState() commons.RealTimeManagementState {
	if x != nil {
		return x.State
	}
	return commons.RealTimeManagementState(0)
}

func (x *UpsertRealTimeManagementStateColorRequest) GetRgbaColorId() int64 {
	if x != nil {
		return x.RgbaColorId
	}
	return 0
}

// Response message for UpsertRealTimeManagementStateColor
type UpsertRealTimeManagementStateColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resulting real time management state color.
	StateColor *RealTimeManagementStateColor `protobuf:"bytes,1,opt,name=state_color,json=stateColor,proto3" json:"state_color,omitempty"`
}

func (x *UpsertRealTimeManagementStateColorResponse) Reset() {
	*x = UpsertRealTimeManagementStateColorResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[416]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertRealTimeManagementStateColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRealTimeManagementStateColorResponse) ProtoMessage() {}

func (x *UpsertRealTimeManagementStateColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[416]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRealTimeManagementStateColorResponse.ProtoReflect.Descriptor instead.
func (*UpsertRealTimeManagementStateColorResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{416}
}

func (x *UpsertRealTimeManagementStateColorResponse) GetStateColor() *RealTimeManagementStateColor {
	if x != nil {
		return x.StateColor
	}
	return nil
}

// Request message for ListRealTimeManagementStateColors.
type ListRealTimeManagementStateColorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRealTimeManagementStateColorsRequest) Reset() {
	*x = ListRealTimeManagementStateColorsRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[417]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRealTimeManagementStateColorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRealTimeManagementStateColorsRequest) ProtoMessage() {}

func (x *ListRealTimeManagementStateColorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[417]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRealTimeManagementStateColorsRequest.ProtoReflect.Descriptor instead.
func (*ListRealTimeManagementStateColorsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{417}
}

// Response message for ListRealTimeManagementStateColors.
type ListRealTimeManagementStateColorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The states and their associated colors.
	StateColors []*RealTimeManagementStateColor `protobuf:"bytes,1,rep,name=state_colors,json=stateColors,proto3" json:"state_colors,omitempty"`
}

func (x *ListRealTimeManagementStateColorsResponse) Reset() {
	*x = ListRealTimeManagementStateColorsResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[418]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRealTimeManagementStateColorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRealTimeManagementStateColorsResponse) ProtoMessage() {}

func (x *ListRealTimeManagementStateColorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[418]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRealTimeManagementStateColorsResponse.ProtoReflect.Descriptor instead.
func (*ListRealTimeManagementStateColorsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{418}
}

func (x *ListRealTimeManagementStateColorsResponse) GetStateColors() []*RealTimeManagementStateColor {
	if x != nil {
		return x.StateColors
	}
	return nil
}

// Request message for DeleteRealTimeManagementStateColor.
type DeleteRealTimeManagementStateColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State to delete the state color association for.
	// State will be associated with the system default color instead.
	State commons.RealTimeManagementState `protobuf:"varint,1,opt,name=state,proto3,enum=api.commons.RealTimeManagementState" json:"state,omitempty"`
}

func (x *DeleteRealTimeManagementStateColorRequest) Reset() {
	*x = DeleteRealTimeManagementStateColorRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[419]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRealTimeManagementStateColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRealTimeManagementStateColorRequest) ProtoMessage() {}

func (x *DeleteRealTimeManagementStateColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[419]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRealTimeManagementStateColorRequest.ProtoReflect.Descriptor instead.
func (*DeleteRealTimeManagementStateColorRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{419}
}

func (x *DeleteRealTimeManagementStateColorRequest) GetState() commons.RealTimeManagementState {
	if x != nil {
		return x.State
	}
	return commons.RealTimeManagementState(0)
}

// Response message for DeleteRealTimeManagementStateColor.
type DeleteRealTimeManagementStateColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRealTimeManagementStateColorResponse) Reset() {
	*x = DeleteRealTimeManagementStateColorResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[420]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRealTimeManagementStateColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRealTimeManagementStateColorResponse) ProtoMessage() {}

func (x *DeleteRealTimeManagementStateColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[420]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRealTimeManagementStateColorResponse.ProtoReflect.Descriptor instead.
func (*DeleteRealTimeManagementStateColorResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{420}
}

// Request message for CreateAgentLeavePetition.
type CreateAgentLeavePetitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All datetime ranges being requested for the time off.
	// No overlap is allowed between the datetime ranges.
	RequestedDatetimeRanges []*commons.DatetimeRange `protobuf:"bytes,1,rep,name=requested_datetime_ranges,json=requestedDatetimeRanges,proto3" json:"requested_datetime_ranges,omitempty"`
	// A comment describing the reason for the time off request.
	PetitionComment string `protobuf:"bytes,2,opt,name=petition_comment,json=petitionComment,proto3" json:"petition_comment,omitempty"`
	// The wfm agent requesting the time off.
	WfmAgentSid int64 `protobuf:"varint,3,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// The number of working hours requested off.
	// This does not need to relate directly to the datetime range being requested off,
	// For example in the case where a 14 hour schedulable range is being taken off but 8 hours of work will be paid out with PTO.
	RequestedHoursOff float32 `protobuf:"fixed32,4,opt,name=requested_hours_off,json=requestedHoursOff,proto3" json:"requested_hours_off,omitempty"`
}

func (x *CreateAgentLeavePetitionRequest) Reset() {
	*x = CreateAgentLeavePetitionRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[421]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAgentLeavePetitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentLeavePetitionRequest) ProtoMessage() {}

func (x *CreateAgentLeavePetitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[421]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentLeavePetitionRequest.ProtoReflect.Descriptor instead.
func (*CreateAgentLeavePetitionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{421}
}

func (x *CreateAgentLeavePetitionRequest) GetRequestedDatetimeRanges() []*commons.DatetimeRange {
	if x != nil {
		return x.RequestedDatetimeRanges
	}
	return nil
}

func (x *CreateAgentLeavePetitionRequest) GetPetitionComment() string {
	if x != nil {
		return x.PetitionComment
	}
	return ""
}

func (x *CreateAgentLeavePetitionRequest) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

func (x *CreateAgentLeavePetitionRequest) GetRequestedHoursOff() float32 {
	if x != nil {
		return x.RequestedHoursOff
	}
	return 0
}

// Response message for CreateAgentLeavePetition.
type CreateAgentLeavePetitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly created agent leave petition.
	AgentLeavePetition *commons.AgentLeavePetition `protobuf:"bytes,1,opt,name=agent_leave_petition,json=agentLeavePetition,proto3" json:"agent_leave_petition,omitempty"`
}

func (x *CreateAgentLeavePetitionResponse) Reset() {
	*x = CreateAgentLeavePetitionResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[422]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAgentLeavePetitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentLeavePetitionResponse) ProtoMessage() {}

func (x *CreateAgentLeavePetitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[422]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentLeavePetitionResponse.ProtoReflect.Descriptor instead.
func (*CreateAgentLeavePetitionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{422}
}

func (x *CreateAgentLeavePetitionResponse) GetAgentLeavePetition() *commons.AgentLeavePetition {
	if x != nil {
		return x.AgentLeavePetition
	}
	return nil
}

// Request message for ListAgentLeavePetitions.
type ListAgentLeavePetitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wfm agents to list agent leave petitions for.
	// If no SIDs are provided, all agent leave petitions within the @datetime_range will be returned.
	WfmAgentSids []int64 `protobuf:"varint,1,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
	// Datetime range over which agent leave petitions should be retrieved.
	// Any agent leave petitions overlapping the datetime range may be returned.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,2,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// If true, archived agent leave petitions will be included in the response.
	// Otherwise, no archived requests will be included in the response.
	IncludeArchived bool `protobuf:"varint,3,opt,name=include_archived,json=includeArchived,proto3" json:"include_archived,omitempty"`
}

func (x *ListAgentLeavePetitionsRequest) Reset() {
	*x = ListAgentLeavePetitionsRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[423]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentLeavePetitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentLeavePetitionsRequest) ProtoMessage() {}

func (x *ListAgentLeavePetitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[423]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentLeavePetitionsRequest.ProtoReflect.Descriptor instead.
func (*ListAgentLeavePetitionsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{423}
}

func (x *ListAgentLeavePetitionsRequest) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

func (x *ListAgentLeavePetitionsRequest) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *ListAgentLeavePetitionsRequest) GetIncludeArchived() bool {
	if x != nil {
		return x.IncludeArchived
	}
	return false
}

// Response message for ListAgentLeavePetitions.
type ListAgentLeavePetitionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All agent leave petitions requests matching the parameters in the request.
	AgentLeavePetitions []*commons.AgentLeavePetition `protobuf:"bytes,1,rep,name=agent_leave_petitions,json=agentLeavePetitions,proto3" json:"agent_leave_petitions,omitempty"`
}

func (x *ListAgentLeavePetitionsResponse) Reset() {
	*x = ListAgentLeavePetitionsResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[424]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAgentLeavePetitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentLeavePetitionsResponse) ProtoMessage() {}

func (x *ListAgentLeavePetitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[424]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentLeavePetitionsResponse.ProtoReflect.Descriptor instead.
func (*ListAgentLeavePetitionsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{424}
}

func (x *ListAgentLeavePetitionsResponse) GetAgentLeavePetitions() []*commons.AgentLeavePetition {
	if x != nil {
		return x.AgentLeavePetitions
	}
	return nil
}

// Request message for the ArchiveAgentLeavePetition.
type ArchiveAgentLeavePetitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the agent leave petition to archive.
	AgentLeavePetitionId int64 `protobuf:"varint,1,opt,name=agent_leave_petition_id,json=agentLeavePetitionId,proto3" json:"agent_leave_petition_id,omitempty"`
}

func (x *ArchiveAgentLeavePetitionRequest) Reset() {
	*x = ArchiveAgentLeavePetitionRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[425]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveAgentLeavePetitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveAgentLeavePetitionRequest) ProtoMessage() {}

func (x *ArchiveAgentLeavePetitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[425]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveAgentLeavePetitionRequest.ProtoReflect.Descriptor instead.
func (*ArchiveAgentLeavePetitionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{425}
}

func (x *ArchiveAgentLeavePetitionRequest) GetAgentLeavePetitionId() int64 {
	if x != nil {
		return x.AgentLeavePetitionId
	}
	return 0
}

// Response message for the ArchiveAgentLeavePetition.
type ArchiveAgentLeavePetitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The archived Agent Leave Petition.
	AgentLeavePetition *commons.AgentLeavePetition `protobuf:"bytes,1,opt,name=agent_leave_petition,json=agentLeavePetition,proto3" json:"agent_leave_petition,omitempty"`
}

func (x *ArchiveAgentLeavePetitionResponse) Reset() {
	*x = ArchiveAgentLeavePetitionResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[426]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveAgentLeavePetitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveAgentLeavePetitionResponse) ProtoMessage() {}

func (x *ArchiveAgentLeavePetitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[426]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveAgentLeavePetitionResponse.ProtoReflect.Descriptor instead.
func (*ArchiveAgentLeavePetitionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{426}
}

func (x *ArchiveAgentLeavePetitionResponse) GetAgentLeavePetition() *commons.AgentLeavePetition {
	if x != nil {
		return x.AgentLeavePetition
	}
	return nil
}

// Request message for the ResolveAgentLeavePetition.
type ResolveAgentLeavePetitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the agent leave petition to approve or deny.
	AgentLeavePetitionId int64 `protobuf:"varint,1,opt,name=agent_leave_petition_id,json=agentLeavePetitionId,proto3" json:"agent_leave_petition_id,omitempty"`
	// The status to resolve the petition to.
	PetitionStatus commons.AgentLeavePetitionStatus `protobuf:"varint,2,opt,name=petition_status,json=petitionStatus,proto3,enum=api.commons.AgentLeavePetitionStatus" json:"petition_status,omitempty"`
	// An optional comment to explain the approval or denial of the leave petition.
	ResponseComment string `protobuf:"bytes,3,opt,name=response_comment,json=responseComment,proto3" json:"response_comment,omitempty"`
	// If true, partial shifts overlapping the requested_datetime_ranges will have the remaining portion of the shift retained
	//
	//	if the remaining portion is at least 30 minutes wide.
	//
	// If false, the entirety of shifts overlapping the requested_datetime_ranges will be deleted or transfered, depending on @replace_with_unassigned_agent.
	RetainPartialShifts bool `protobuf:"varint,4,opt,name=retain_partial_shifts,json=retainPartialShifts,proto3" json:"retain_partial_shifts,omitempty"`
	// If @replace_with_unassigned_agent is true, an unassigned agent sid will be assigned to the shifts instead of deleting them.
	// If @retain_partial_shifts is also true, only the portion of the shift in the requested datetime ranges will be transfered.
	// if @retain_partial_shifts is false, the entirety of any overlapping shifts will be transfered.
	ReplaceWithUnassignedAgent bool `protobuf:"varint,5,opt,name=replace_with_unassigned_agent,json=replaceWithUnassignedAgent,proto3" json:"replace_with_unassigned_agent,omitempty"`
}

func (x *ResolveAgentLeavePetitionRequest) Reset() {
	*x = ResolveAgentLeavePetitionRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[427]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveAgentLeavePetitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveAgentLeavePetitionRequest) ProtoMessage() {}

func (x *ResolveAgentLeavePetitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[427]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveAgentLeavePetitionRequest.ProtoReflect.Descriptor instead.
func (*ResolveAgentLeavePetitionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{427}
}

func (x *ResolveAgentLeavePetitionRequest) GetAgentLeavePetitionId() int64 {
	if x != nil {
		return x.AgentLeavePetitionId
	}
	return 0
}

func (x *ResolveAgentLeavePetitionRequest) GetPetitionStatus() commons.AgentLeavePetitionStatus {
	if x != nil {
		return x.PetitionStatus
	}
	return commons.AgentLeavePetitionStatus(0)
}

func (x *ResolveAgentLeavePetitionRequest) GetResponseComment() string {
	if x != nil {
		return x.ResponseComment
	}
	return ""
}

func (x *ResolveAgentLeavePetitionRequest) GetRetainPartialShifts() bool {
	if x != nil {
		return x.RetainPartialShifts
	}
	return false
}

func (x *ResolveAgentLeavePetitionRequest) GetReplaceWithUnassignedAgent() bool {
	if x != nil {
		return x.ReplaceWithUnassignedAgent
	}
	return false
}

// Response message for the ResolveAgentLeavePetition.
type ResolveAgentLeavePetitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resolved Agent Leave Petition.
	AgentLeavePetition *commons.AgentLeavePetition `protobuf:"bytes,1,opt,name=agent_leave_petition,json=agentLeavePetition,proto3" json:"agent_leave_petition,omitempty"`
}

func (x *ResolveAgentLeavePetitionResponse) Reset() {
	*x = ResolveAgentLeavePetitionResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[428]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveAgentLeavePetitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveAgentLeavePetitionResponse) ProtoMessage() {}

func (x *ResolveAgentLeavePetitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[428]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveAgentLeavePetitionResponse.ProtoReflect.Descriptor instead.
func (*ResolveAgentLeavePetitionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{428}
}

func (x *ResolveAgentLeavePetitionResponse) GetAgentLeavePetition() *commons.AgentLeavePetition {
	if x != nil {
		return x.AgentLeavePetition
	}
	return nil
}

// Request message for the CancelAgentLeavePetition.
type CancelAgentLeavePetitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the agent leave petition to cancel.
	AgentLeavePetitionId int64 `protobuf:"varint,1,opt,name=agent_leave_petition_id,json=agentLeavePetitionId,proto3" json:"agent_leave_petition_id,omitempty"`
}

func (x *CancelAgentLeavePetitionRequest) Reset() {
	*x = CancelAgentLeavePetitionRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[429]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelAgentLeavePetitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAgentLeavePetitionRequest) ProtoMessage() {}

func (x *CancelAgentLeavePetitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[429]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAgentLeavePetitionRequest.ProtoReflect.Descriptor instead.
func (*CancelAgentLeavePetitionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{429}
}

func (x *CancelAgentLeavePetitionRequest) GetAgentLeavePetitionId() int64 {
	if x != nil {
		return x.AgentLeavePetitionId
	}
	return 0
}

// Response message for the CancelAgentLeavePetition.
type CancelAgentLeavePetitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The canceled Agent Leave Petition.
	AgentLeavePetition *commons.AgentLeavePetition `protobuf:"bytes,1,opt,name=agent_leave_petition,json=agentLeavePetition,proto3" json:"agent_leave_petition,omitempty"`
}

func (x *CancelAgentLeavePetitionResponse) Reset() {
	*x = CancelAgentLeavePetitionResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[430]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelAgentLeavePetitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAgentLeavePetitionResponse) ProtoMessage() {}

func (x *CancelAgentLeavePetitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[430]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAgentLeavePetitionResponse.ProtoReflect.Descriptor instead.
func (*CancelAgentLeavePetitionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{430}
}

func (x *CancelAgentLeavePetitionResponse) GetAgentLeavePetition() *commons.AgentLeavePetition {
	if x != nil {
		return x.AgentLeavePetition
	}
	return nil
}

// Request message for CreateRgbaColor.
type CreateRgbaColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RGBA color to create.
	Color *RgbaColor `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *CreateRgbaColorRequest) Reset() {
	*x = CreateRgbaColorRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[431]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRgbaColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRgbaColorRequest) ProtoMessage() {}

func (x *CreateRgbaColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[431]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRgbaColorRequest.ProtoReflect.Descriptor instead.
func (*CreateRgbaColorRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{431}
}

func (x *CreateRgbaColorRequest) GetColor() *RgbaColor {
	if x != nil {
		return x.Color
	}
	return nil
}

// Response message for CreateRgbaColor.
type CreateRgbaColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created rgba color
	RgbaColorId int64 `protobuf:"varint,1,opt,name=rgba_color_id,json=rgbaColorId,proto3" json:"rgba_color_id,omitempty"`
}

func (x *CreateRgbaColorResponse) Reset() {
	*x = CreateRgbaColorResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[432]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRgbaColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRgbaColorResponse) ProtoMessage() {}

func (x *CreateRgbaColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[432]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRgbaColorResponse.ProtoReflect.Descriptor instead.
func (*CreateRgbaColorResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{432}
}

func (x *CreateRgbaColorResponse) GetRgbaColorId() int64 {
	if x != nil {
		return x.RgbaColorId
	}
	return 0
}

// Request message for ListRgbaColors.
type ListRgbaColorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRgbaColorsRequest) Reset() {
	*x = ListRgbaColorsRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[433]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRgbaColorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRgbaColorsRequest) ProtoMessage() {}

func (x *ListRgbaColorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[433]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRgbaColorsRequest.ProtoReflect.Descriptor instead.
func (*ListRgbaColorsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{433}
}

// Response message for ListRgbaColors.
type ListRgbaColorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rgba colors for the org sending the request.
	Colors []*RgbaColor `protobuf:"bytes,1,rep,name=colors,proto3" json:"colors,omitempty"`
}

func (x *ListRgbaColorsResponse) Reset() {
	*x = ListRgbaColorsResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[434]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRgbaColorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRgbaColorsResponse) ProtoMessage() {}

func (x *ListRgbaColorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[434]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRgbaColorsResponse.ProtoReflect.Descriptor instead.
func (*ListRgbaColorsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{434}
}

func (x *ListRgbaColorsResponse) GetColors() []*RgbaColor {
	if x != nil {
		return x.Colors
	}
	return nil
}

// Request message for UpdateRgbaColor.
type UpdateRgbaColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rgba color to update.
	Color *RgbaColor `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *UpdateRgbaColorRequest) Reset() {
	*x = UpdateRgbaColorRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[435]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRgbaColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRgbaColorRequest) ProtoMessage() {}

func (x *UpdateRgbaColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[435]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRgbaColorRequest.ProtoReflect.Descriptor instead.
func (*UpdateRgbaColorRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{435}
}

func (x *UpdateRgbaColorRequest) GetColor() *RgbaColor {
	if x != nil {
		return x.Color
	}
	return nil
}

// Response message for UpdateRgbaColor.
type UpdateRgbaColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated rgba color.
	Color *RgbaColor `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *UpdateRgbaColorResponse) Reset() {
	*x = UpdateRgbaColorResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[436]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRgbaColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRgbaColorResponse) ProtoMessage() {}

func (x *UpdateRgbaColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[436]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRgbaColorResponse.ProtoReflect.Descriptor instead.
func (*UpdateRgbaColorResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{436}
}

func (x *UpdateRgbaColorResponse) GetColor() *RgbaColor {
	if x != nil {
		return x.Color
	}
	return nil
}

// Request message for DeleteRgbaColor.
type DeleteRgbaColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the rgba color to delete.
	RgbaColorId int64 `protobuf:"varint,1,opt,name=rgba_color_id,json=rgbaColorId,proto3" json:"rgba_color_id,omitempty"`
}

func (x *DeleteRgbaColorRequest) Reset() {
	*x = DeleteRgbaColorRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[437]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRgbaColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRgbaColorRequest) ProtoMessage() {}

func (x *DeleteRgbaColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[437]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRgbaColorRequest.ProtoReflect.Descriptor instead.
func (*DeleteRgbaColorRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{437}
}

func (x *DeleteRgbaColorRequest) GetRgbaColorId() int64 {
	if x != nil {
		return x.RgbaColorId
	}
	return 0
}

// Request message for DeleteRgbaColor.
type DeleteRgbaColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRgbaColorResponse) Reset() {
	*x = DeleteRgbaColorResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[438]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRgbaColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRgbaColorResponse) ProtoMessage() {}

func (x *DeleteRgbaColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[438]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRgbaColorResponse.ProtoReflect.Descriptor instead.
func (*DeleteRgbaColorResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{438}
}

// Request message for CreateAdherenceRuleNotificationConfig.
type CreateAdherenceRuleNotificationConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Notification config to create for the org sending the request.
	NotificationConfig *commons.AdherenceRuleNotificationConfig `protobuf:"bytes,1,opt,name=notification_config,json=notificationConfig,proto3" json:"notification_config,omitempty"`
}

func (x *CreateAdherenceRuleNotificationConfigRequest) Reset() {
	*x = CreateAdherenceRuleNotificationConfigRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[439]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdherenceRuleNotificationConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdherenceRuleNotificationConfigRequest) ProtoMessage() {}

func (x *CreateAdherenceRuleNotificationConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[439]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdherenceRuleNotificationConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateAdherenceRuleNotificationConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{439}
}

func (x *CreateAdherenceRuleNotificationConfigRequest) GetNotificationConfig() *commons.AdherenceRuleNotificationConfig {
	if x != nil {
		return x.NotificationConfig
	}
	return nil
}

// Response message for CreateAdherenceRuleNotificationConfig.
type CreateAdherenceRuleNotificationConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the created notification config.
	AdherenceRuleNotificationConfigId int64 `protobuf:"varint,1,opt,name=adherence_rule_notification_config_id,json=adherenceRuleNotificationConfigId,proto3" json:"adherence_rule_notification_config_id,omitempty"`
}

func (x *CreateAdherenceRuleNotificationConfigResponse) Reset() {
	*x = CreateAdherenceRuleNotificationConfigResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[440]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdherenceRuleNotificationConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdherenceRuleNotificationConfigResponse) ProtoMessage() {}

func (x *CreateAdherenceRuleNotificationConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[440]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdherenceRuleNotificationConfigResponse.ProtoReflect.Descriptor instead.
func (*CreateAdherenceRuleNotificationConfigResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{440}
}

func (x *CreateAdherenceRuleNotificationConfigResponse) GetAdherenceRuleNotificationConfigId() int64 {
	if x != nil {
		return x.AdherenceRuleNotificationConfigId
	}
	return 0
}

// Request message for UpdateAdherenceRuleNotificationConfig.
type UpdateAdherenceRuleNotificationConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Notification config to update.
	NotificationConfig *commons.AdherenceRuleNotificationConfig `protobuf:"bytes,1,opt,name=notification_config,json=notificationConfig,proto3" json:"notification_config,omitempty"`
}

func (x *UpdateAdherenceRuleNotificationConfigRequest) Reset() {
	*x = UpdateAdherenceRuleNotificationConfigRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[441]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdherenceRuleNotificationConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdherenceRuleNotificationConfigRequest) ProtoMessage() {}

func (x *UpdateAdherenceRuleNotificationConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[441]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdherenceRuleNotificationConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdherenceRuleNotificationConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{441}
}

func (x *UpdateAdherenceRuleNotificationConfigRequest) GetNotificationConfig() *commons.AdherenceRuleNotificationConfig {
	if x != nil {
		return x.NotificationConfig
	}
	return nil
}

// Response message for UpdateAdherenceRuleNotificationConfig.
type UpdateAdherenceRuleNotificationConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAdherenceRuleNotificationConfigResponse) Reset() {
	*x = UpdateAdherenceRuleNotificationConfigResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[442]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdherenceRuleNotificationConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdherenceRuleNotificationConfigResponse) ProtoMessage() {}

func (x *UpdateAdherenceRuleNotificationConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[442]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdherenceRuleNotificationConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateAdherenceRuleNotificationConfigResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{442}
}

// Request message for CreateAdherenceRuleNotificationConfigEntry.
type CreateAdherenceRuleNotificationConfigEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Notification config entry to create for the org sending the request.
	NotificationConfigEntry *commons.AdherenceRuleNotificationConfigEntry `protobuf:"bytes,1,opt,name=notification_config_entry,json=notificationConfigEntry,proto3" json:"notification_config_entry,omitempty"`
}

func (x *CreateAdherenceRuleNotificationConfigEntryRequest) Reset() {
	*x = CreateAdherenceRuleNotificationConfigEntryRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[443]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdherenceRuleNotificationConfigEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdherenceRuleNotificationConfigEntryRequest) ProtoMessage() {}

func (x *CreateAdherenceRuleNotificationConfigEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[443]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdherenceRuleNotificationConfigEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateAdherenceRuleNotificationConfigEntryRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{443}
}

func (x *CreateAdherenceRuleNotificationConfigEntryRequest) GetNotificationConfigEntry() *commons.AdherenceRuleNotificationConfigEntry {
	if x != nil {
		return x.NotificationConfigEntry
	}
	return nil
}

// Response message for CreateAdherenceRuleNotificationConfigEntry.
type CreateAdherenceRuleNotificationConfigEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the created notification config entry.
	AdherenceRuleNotificationConfigEntryId int64 `protobuf:"varint,1,opt,name=adherence_rule_notification_config_entry_id,json=adherenceRuleNotificationConfigEntryId,proto3" json:"adherence_rule_notification_config_entry_id,omitempty"`
}

func (x *CreateAdherenceRuleNotificationConfigEntryResponse) Reset() {
	*x = CreateAdherenceRuleNotificationConfigEntryResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[444]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdherenceRuleNotificationConfigEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdherenceRuleNotificationConfigEntryResponse) ProtoMessage() {}

func (x *CreateAdherenceRuleNotificationConfigEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[444]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdherenceRuleNotificationConfigEntryResponse.ProtoReflect.Descriptor instead.
func (*CreateAdherenceRuleNotificationConfigEntryResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{444}
}

func (x *CreateAdherenceRuleNotificationConfigEntryResponse) GetAdherenceRuleNotificationConfigEntryId() int64 {
	if x != nil {
		return x.AdherenceRuleNotificationConfigEntryId
	}
	return 0
}

// Request message for UpdateAdherenceRuleNotificationConfigEntry.
type UpdateAdherenceRuleNotificationConfigEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Notification config entry to update.
	NotificationConfigEntry *commons.AdherenceRuleNotificationConfigEntry `protobuf:"bytes,1,opt,name=notification_config_entry,json=notificationConfigEntry,proto3" json:"notification_config_entry,omitempty"`
}

func (x *UpdateAdherenceRuleNotificationConfigEntryRequest) Reset() {
	*x = UpdateAdherenceRuleNotificationConfigEntryRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[445]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdherenceRuleNotificationConfigEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdherenceRuleNotificationConfigEntryRequest) ProtoMessage() {}

func (x *UpdateAdherenceRuleNotificationConfigEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[445]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdherenceRuleNotificationConfigEntryRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdherenceRuleNotificationConfigEntryRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{445}
}

func (x *UpdateAdherenceRuleNotificationConfigEntryRequest) GetNotificationConfigEntry() *commons.AdherenceRuleNotificationConfigEntry {
	if x != nil {
		return x.NotificationConfigEntry
	}
	return nil
}

// Response message for UpdateAdherenceRuleNotificationConfigEntry.
type UpdateAdherenceRuleNotificationConfigEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAdherenceRuleNotificationConfigEntryResponse) Reset() {
	*x = UpdateAdherenceRuleNotificationConfigEntryResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[446]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdherenceRuleNotificationConfigEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdherenceRuleNotificationConfigEntryResponse) ProtoMessage() {}

func (x *UpdateAdherenceRuleNotificationConfigEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[446]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdherenceRuleNotificationConfigEntryResponse.ProtoReflect.Descriptor instead.
func (*UpdateAdherenceRuleNotificationConfigEntryResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{446}
}

// Request message for DeleteAdherenceRuleNotificationConfigEntry.
type DeleteAdherenceRuleNotificationConfigEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the notification config entry to delete.
	AdherenceRuleNotificationConfigEntryId int64 `protobuf:"varint,1,opt,name=adherence_rule_notification_config_entry_id,json=adherenceRuleNotificationConfigEntryId,proto3" json:"adherence_rule_notification_config_entry_id,omitempty"`
}

func (x *DeleteAdherenceRuleNotificationConfigEntryRequest) Reset() {
	*x = DeleteAdherenceRuleNotificationConfigEntryRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[447]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAdherenceRuleNotificationConfigEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdherenceRuleNotificationConfigEntryRequest) ProtoMessage() {}

func (x *DeleteAdherenceRuleNotificationConfigEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[447]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdherenceRuleNotificationConfigEntryRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdherenceRuleNotificationConfigEntryRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{447}
}

func (x *DeleteAdherenceRuleNotificationConfigEntryRequest) GetAdherenceRuleNotificationConfigEntryId() int64 {
	if x != nil {
		return x.AdherenceRuleNotificationConfigEntryId
	}
	return 0
}

// Response message for DeleteAdherenceRuleNotificationConfigEntry.
type DeleteAdherenceRuleNotificationConfigEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAdherenceRuleNotificationConfigEntryResponse) Reset() {
	*x = DeleteAdherenceRuleNotificationConfigEntryResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[448]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAdherenceRuleNotificationConfigEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdherenceRuleNotificationConfigEntryResponse) ProtoMessage() {}

func (x *DeleteAdherenceRuleNotificationConfigEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[448]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdherenceRuleNotificationConfigEntryResponse.ProtoReflect.Descriptor instead.
func (*DeleteAdherenceRuleNotificationConfigEntryResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{448}
}

// Request message for ListAdherenceRuleNotificationConfigs.
type ListAdherenceRuleNotificationConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAdherenceRuleNotificationConfigsRequest) Reset() {
	*x = ListAdherenceRuleNotificationConfigsRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[449]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdherenceRuleNotificationConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdherenceRuleNotificationConfigsRequest) ProtoMessage() {}

func (x *ListAdherenceRuleNotificationConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[449]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdherenceRuleNotificationConfigsRequest.ProtoReflect.Descriptor instead.
func (*ListAdherenceRuleNotificationConfigsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{449}
}

// Response message for ListAdherenceRuleNotificationConfigs.
type ListAdherenceRuleNotificationConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Notification configs found for the org sending the request.
	NotificationConfigs []*commons.AdherenceRuleNotificationConfig `protobuf:"bytes,1,rep,name=notification_configs,json=notificationConfigs,proto3" json:"notification_configs,omitempty"`
}

func (x *ListAdherenceRuleNotificationConfigsResponse) Reset() {
	*x = ListAdherenceRuleNotificationConfigsResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[450]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdherenceRuleNotificationConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdherenceRuleNotificationConfigsResponse) ProtoMessage() {}

func (x *ListAdherenceRuleNotificationConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[450]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdherenceRuleNotificationConfigsResponse.ProtoReflect.Descriptor instead.
func (*ListAdherenceRuleNotificationConfigsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{450}
}

func (x *ListAdherenceRuleNotificationConfigsResponse) GetNotificationConfigs() []*commons.AdherenceRuleNotificationConfig {
	if x != nil {
		return x.NotificationConfigs
	}
	return nil
}

// Request message for CreateAdherenceDepartmentalRule.
type CreateAdherenceDepartmentalRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Departmental rule to create for the org sending the request.
	Rule *commons.AdherenceDepartmentalRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *CreateAdherenceDepartmentalRuleRequest) Reset() {
	*x = CreateAdherenceDepartmentalRuleRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[451]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdherenceDepartmentalRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdherenceDepartmentalRuleRequest) ProtoMessage() {}

func (x *CreateAdherenceDepartmentalRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[451]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdherenceDepartmentalRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateAdherenceDepartmentalRuleRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{451}
}

func (x *CreateAdherenceDepartmentalRuleRequest) GetRule() *commons.AdherenceDepartmentalRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

// Response message for CreateAdherenceDepartmentalRule.
type CreateAdherenceDepartmentalRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the created departmental rule.
	AdherenceDepartmentalRuleId int64 `protobuf:"varint,1,opt,name=adherence_departmental_rule_id,json=adherenceDepartmentalRuleId,proto3" json:"adherence_departmental_rule_id,omitempty"`
}

func (x *CreateAdherenceDepartmentalRuleResponse) Reset() {
	*x = CreateAdherenceDepartmentalRuleResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[452]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdherenceDepartmentalRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdherenceDepartmentalRuleResponse) ProtoMessage() {}

func (x *CreateAdherenceDepartmentalRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[452]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdherenceDepartmentalRuleResponse.ProtoReflect.Descriptor instead.
func (*CreateAdherenceDepartmentalRuleResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{452}
}

func (x *CreateAdherenceDepartmentalRuleResponse) GetAdherenceDepartmentalRuleId() int64 {
	if x != nil {
		return x.AdherenceDepartmentalRuleId
	}
	return 0
}

// Request message for UpdateAdherenceDepartmentalRule.
type UpdateAdherenceDepartmentalRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Departmental rule to update.
	Rule *commons.AdherenceDepartmentalRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *UpdateAdherenceDepartmentalRuleRequest) Reset() {
	*x = UpdateAdherenceDepartmentalRuleRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[453]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdherenceDepartmentalRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdherenceDepartmentalRuleRequest) ProtoMessage() {}

func (x *UpdateAdherenceDepartmentalRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[453]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdherenceDepartmentalRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdherenceDepartmentalRuleRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{453}
}

func (x *UpdateAdherenceDepartmentalRuleRequest) GetRule() *commons.AdherenceDepartmentalRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

// Response message for UpdateAdherenceDepartmentalRule.
type UpdateAdherenceDepartmentalRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAdherenceDepartmentalRuleResponse) Reset() {
	*x = UpdateAdherenceDepartmentalRuleResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[454]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdherenceDepartmentalRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdherenceDepartmentalRuleResponse) ProtoMessage() {}

func (x *UpdateAdherenceDepartmentalRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[454]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdherenceDepartmentalRuleResponse.ProtoReflect.Descriptor instead.
func (*UpdateAdherenceDepartmentalRuleResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{454}
}

// Request message for CreateAdherenceDepartmentalRuleClause.
type CreateAdherenceDepartmentalRuleClauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Departmental rule clause to create for the org sending the request.
	Clause *commons.AdherenceDepartmentalRuleClause `protobuf:"bytes,1,opt,name=clause,proto3" json:"clause,omitempty"`
}

func (x *CreateAdherenceDepartmentalRuleClauseRequest) Reset() {
	*x = CreateAdherenceDepartmentalRuleClauseRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[455]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdherenceDepartmentalRuleClauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdherenceDepartmentalRuleClauseRequest) ProtoMessage() {}

func (x *CreateAdherenceDepartmentalRuleClauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[455]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdherenceDepartmentalRuleClauseRequest.ProtoReflect.Descriptor instead.
func (*CreateAdherenceDepartmentalRuleClauseRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{455}
}

func (x *CreateAdherenceDepartmentalRuleClauseRequest) GetClause() *commons.AdherenceDepartmentalRuleClause {
	if x != nil {
		return x.Clause
	}
	return nil
}

// Response message for CreateAdherenceDepartmentalRuleClause.
type CreateAdherenceDepartmentalRuleClauseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the created departmental rule clause.
	AdherenceDepartmentalRuleClauseId int64 `protobuf:"varint,1,opt,name=adherence_departmental_rule_clause_id,json=adherenceDepartmentalRuleClauseId,proto3" json:"adherence_departmental_rule_clause_id,omitempty"`
}

func (x *CreateAdherenceDepartmentalRuleClauseResponse) Reset() {
	*x = CreateAdherenceDepartmentalRuleClauseResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[456]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdherenceDepartmentalRuleClauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdherenceDepartmentalRuleClauseResponse) ProtoMessage() {}

func (x *CreateAdherenceDepartmentalRuleClauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[456]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdherenceDepartmentalRuleClauseResponse.ProtoReflect.Descriptor instead.
func (*CreateAdherenceDepartmentalRuleClauseResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{456}
}

func (x *CreateAdherenceDepartmentalRuleClauseResponse) GetAdherenceDepartmentalRuleClauseId() int64 {
	if x != nil {
		return x.AdherenceDepartmentalRuleClauseId
	}
	return 0
}

// Request message for UpdateAdherenceDepartmentalRuleClause.
type UpdateAdherenceDepartmentalRuleClauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Departmental rule clause to update.
	Clause *commons.AdherenceDepartmentalRuleClause `protobuf:"bytes,1,opt,name=clause,proto3" json:"clause,omitempty"`
}

func (x *UpdateAdherenceDepartmentalRuleClauseRequest) Reset() {
	*x = UpdateAdherenceDepartmentalRuleClauseRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[457]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdherenceDepartmentalRuleClauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdherenceDepartmentalRuleClauseRequest) ProtoMessage() {}

func (x *UpdateAdherenceDepartmentalRuleClauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[457]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdherenceDepartmentalRuleClauseRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdherenceDepartmentalRuleClauseRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{457}
}

func (x *UpdateAdherenceDepartmentalRuleClauseRequest) GetClause() *commons.AdherenceDepartmentalRuleClause {
	if x != nil {
		return x.Clause
	}
	return nil
}

// Response message for UpdateAdherenceDepartmentalRuleClause.
type UpdateAdherenceDepartmentalRuleClauseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAdherenceDepartmentalRuleClauseResponse) Reset() {
	*x = UpdateAdherenceDepartmentalRuleClauseResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[458]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdherenceDepartmentalRuleClauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdherenceDepartmentalRuleClauseResponse) ProtoMessage() {}

func (x *UpdateAdherenceDepartmentalRuleClauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[458]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdherenceDepartmentalRuleClauseResponse.ProtoReflect.Descriptor instead.
func (*UpdateAdherenceDepartmentalRuleClauseResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{458}
}

// Request message for DeleteAdherenceDepartmentalRuleClause.
type DeleteAdherenceDepartmentalRuleClauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the departmental rule clause to delete.
	AdherenceDepartmentalRuleClauseId int64 `protobuf:"varint,1,opt,name=adherence_departmental_rule_clause_id,json=adherenceDepartmentalRuleClauseId,proto3" json:"adherence_departmental_rule_clause_id,omitempty"`
}

func (x *DeleteAdherenceDepartmentalRuleClauseRequest) Reset() {
	*x = DeleteAdherenceDepartmentalRuleClauseRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[459]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAdherenceDepartmentalRuleClauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdherenceDepartmentalRuleClauseRequest) ProtoMessage() {}

func (x *DeleteAdherenceDepartmentalRuleClauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[459]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdherenceDepartmentalRuleClauseRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdherenceDepartmentalRuleClauseRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{459}
}

func (x *DeleteAdherenceDepartmentalRuleClauseRequest) GetAdherenceDepartmentalRuleClauseId() int64 {
	if x != nil {
		return x.AdherenceDepartmentalRuleClauseId
	}
	return 0
}

// Response message for DeleteAdherenceDepartmentalRuleClause.
type DeleteAdherenceDepartmentalRuleClauseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAdherenceDepartmentalRuleClauseResponse) Reset() {
	*x = DeleteAdherenceDepartmentalRuleClauseResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[460]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAdherenceDepartmentalRuleClauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdherenceDepartmentalRuleClauseResponse) ProtoMessage() {}

func (x *DeleteAdherenceDepartmentalRuleClauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[460]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdherenceDepartmentalRuleClauseResponse.ProtoReflect.Descriptor instead.
func (*DeleteAdherenceDepartmentalRuleClauseResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{460}
}

// Request message for ListAdherenceDepartmentalRules.
type ListAdherenceDepartmentalRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAdherenceDepartmentalRulesRequest) Reset() {
	*x = ListAdherenceDepartmentalRulesRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[461]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdherenceDepartmentalRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdherenceDepartmentalRulesRequest) ProtoMessage() {}

func (x *ListAdherenceDepartmentalRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[461]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdherenceDepartmentalRulesRequest.ProtoReflect.Descriptor instead.
func (*ListAdherenceDepartmentalRulesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{461}
}

// Response message for ListAdherenceDepartmentalRules.
type ListAdherenceDepartmentalRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Departmental rules found for the org sending the request.
	Rules []*commons.AdherenceDepartmentalRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ListAdherenceDepartmentalRulesResponse) Reset() {
	*x = ListAdherenceDepartmentalRulesResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[462]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdherenceDepartmentalRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdherenceDepartmentalRulesResponse) ProtoMessage() {}

func (x *ListAdherenceDepartmentalRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[462]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdherenceDepartmentalRulesResponse.ProtoReflect.Descriptor instead.
func (*ListAdherenceDepartmentalRulesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{462}
}

func (x *ListAdherenceDepartmentalRulesResponse) GetRules() []*commons.AdherenceDepartmentalRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// Request message for CreateAdherenceAgentRule.
type CreateAdherenceAgentRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent rule to create for the org sending the request.
	Rule *commons.AdherenceAgentRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *CreateAdherenceAgentRuleRequest) Reset() {
	*x = CreateAdherenceAgentRuleRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[463]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdherenceAgentRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdherenceAgentRuleRequest) ProtoMessage() {}

func (x *CreateAdherenceAgentRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[463]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdherenceAgentRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateAdherenceAgentRuleRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{463}
}

func (x *CreateAdherenceAgentRuleRequest) GetRule() *commons.AdherenceAgentRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

// Response message for CreateAdherenceAgentRule.
type CreateAdherenceAgentRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the created agent rule.
	AdherenceAgentRuleId int64 `protobuf:"varint,1,opt,name=adherence_agent_rule_id,json=adherenceAgentRuleId,proto3" json:"adherence_agent_rule_id,omitempty"`
}

func (x *CreateAdherenceAgentRuleResponse) Reset() {
	*x = CreateAdherenceAgentRuleResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[464]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdherenceAgentRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdherenceAgentRuleResponse) ProtoMessage() {}

func (x *CreateAdherenceAgentRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[464]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdherenceAgentRuleResponse.ProtoReflect.Descriptor instead.
func (*CreateAdherenceAgentRuleResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{464}
}

func (x *CreateAdherenceAgentRuleResponse) GetAdherenceAgentRuleId() int64 {
	if x != nil {
		return x.AdherenceAgentRuleId
	}
	return 0
}

// Request message for UpdateAdherenceAgentRule.
type UpdateAdherenceAgentRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent rule to update.
	Rule *commons.AdherenceAgentRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *UpdateAdherenceAgentRuleRequest) Reset() {
	*x = UpdateAdherenceAgentRuleRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[465]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdherenceAgentRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdherenceAgentRuleRequest) ProtoMessage() {}

func (x *UpdateAdherenceAgentRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[465]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdherenceAgentRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdherenceAgentRuleRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{465}
}

func (x *UpdateAdherenceAgentRuleRequest) GetRule() *commons.AdherenceAgentRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

// Response message for UpdateAdherenceAgentRule.
type UpdateAdherenceAgentRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAdherenceAgentRuleResponse) Reset() {
	*x = UpdateAdherenceAgentRuleResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[466]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdherenceAgentRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdherenceAgentRuleResponse) ProtoMessage() {}

func (x *UpdateAdherenceAgentRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[466]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdherenceAgentRuleResponse.ProtoReflect.Descriptor instead.
func (*UpdateAdherenceAgentRuleResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{466}
}

// Request message for CreateAdherenceAgentRuleClause.
type CreateAdherenceAgentRuleClauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent rule clause to create for the org sending the request.
	Clause *commons.AdherenceAgentRuleClause `protobuf:"bytes,1,opt,name=clause,proto3" json:"clause,omitempty"`
}

func (x *CreateAdherenceAgentRuleClauseRequest) Reset() {
	*x = CreateAdherenceAgentRuleClauseRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[467]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdherenceAgentRuleClauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdherenceAgentRuleClauseRequest) ProtoMessage() {}

func (x *CreateAdherenceAgentRuleClauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[467]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdherenceAgentRuleClauseRequest.ProtoReflect.Descriptor instead.
func (*CreateAdherenceAgentRuleClauseRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{467}
}

func (x *CreateAdherenceAgentRuleClauseRequest) GetClause() *commons.AdherenceAgentRuleClause {
	if x != nil {
		return x.Clause
	}
	return nil
}

// Response message for CreateAdherenceAgentRuleClause.
type CreateAdherenceAgentRuleClauseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the created agent rule clause.
	AdherenceAgentRuleClauseId int64 `protobuf:"varint,1,opt,name=adherence_agent_rule_clause_id,json=adherenceAgentRuleClauseId,proto3" json:"adherence_agent_rule_clause_id,omitempty"`
}

func (x *CreateAdherenceAgentRuleClauseResponse) Reset() {
	*x = CreateAdherenceAgentRuleClauseResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[468]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAdherenceAgentRuleClauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdherenceAgentRuleClauseResponse) ProtoMessage() {}

func (x *CreateAdherenceAgentRuleClauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[468]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdherenceAgentRuleClauseResponse.ProtoReflect.Descriptor instead.
func (*CreateAdherenceAgentRuleClauseResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{468}
}

func (x *CreateAdherenceAgentRuleClauseResponse) GetAdherenceAgentRuleClauseId() int64 {
	if x != nil {
		return x.AdherenceAgentRuleClauseId
	}
	return 0
}

// Request message for UpdateAdherenceAgentRuleClause.
type UpdateAdherenceAgentRuleClauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent rule clause to update.
	Clause *commons.AdherenceAgentRuleClause `protobuf:"bytes,1,opt,name=clause,proto3" json:"clause,omitempty"`
}

func (x *UpdateAdherenceAgentRuleClauseRequest) Reset() {
	*x = UpdateAdherenceAgentRuleClauseRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[469]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdherenceAgentRuleClauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdherenceAgentRuleClauseRequest) ProtoMessage() {}

func (x *UpdateAdherenceAgentRuleClauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[469]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdherenceAgentRuleClauseRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdherenceAgentRuleClauseRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{469}
}

func (x *UpdateAdherenceAgentRuleClauseRequest) GetClause() *commons.AdherenceAgentRuleClause {
	if x != nil {
		return x.Clause
	}
	return nil
}

// Response message for UpdateAdherenceAgentRuleClause.
type UpdateAdherenceAgentRuleClauseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAdherenceAgentRuleClauseResponse) Reset() {
	*x = UpdateAdherenceAgentRuleClauseResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[470]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAdherenceAgentRuleClauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdherenceAgentRuleClauseResponse) ProtoMessage() {}

func (x *UpdateAdherenceAgentRuleClauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[470]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdherenceAgentRuleClauseResponse.ProtoReflect.Descriptor instead.
func (*UpdateAdherenceAgentRuleClauseResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{470}
}

// Request message for DeleteAdherenceAgentRuleClause.
type DeleteAdherenceAgentRuleClauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the agent rule clause to delete.
	AdherenceAgentRuleClauseId int64 `protobuf:"varint,1,opt,name=adherence_agent_rule_clause_id,json=adherenceAgentRuleClauseId,proto3" json:"adherence_agent_rule_clause_id,omitempty"`
}

func (x *DeleteAdherenceAgentRuleClauseRequest) Reset() {
	*x = DeleteAdherenceAgentRuleClauseRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[471]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAdherenceAgentRuleClauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdherenceAgentRuleClauseRequest) ProtoMessage() {}

func (x *DeleteAdherenceAgentRuleClauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[471]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdherenceAgentRuleClauseRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdherenceAgentRuleClauseRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{471}
}

func (x *DeleteAdherenceAgentRuleClauseRequest) GetAdherenceAgentRuleClauseId() int64 {
	if x != nil {
		return x.AdherenceAgentRuleClauseId
	}
	return 0
}

// Response message for DeleteAdherenceAgentRuleClause.
type DeleteAdherenceAgentRuleClauseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAdherenceAgentRuleClauseResponse) Reset() {
	*x = DeleteAdherenceAgentRuleClauseResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[472]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAdherenceAgentRuleClauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdherenceAgentRuleClauseResponse) ProtoMessage() {}

func (x *DeleteAdherenceAgentRuleClauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[472]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdherenceAgentRuleClauseResponse.ProtoReflect.Descriptor instead.
func (*DeleteAdherenceAgentRuleClauseResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{472}
}

// Request message for ListAdherenceAgentRules.
type ListAdherenceAgentRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAdherenceAgentRulesRequest) Reset() {
	*x = ListAdherenceAgentRulesRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[473]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdherenceAgentRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdherenceAgentRulesRequest) ProtoMessage() {}

func (x *ListAdherenceAgentRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[473]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdherenceAgentRulesRequest.ProtoReflect.Descriptor instead.
func (*ListAdherenceAgentRulesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{473}
}

// Response message for ListAdherenceAgentRules.
type ListAdherenceAgentRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent rules found for the org sending the request.
	Rules []*commons.AdherenceAgentRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ListAdherenceAgentRulesResponse) Reset() {
	*x = ListAdherenceAgentRulesResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[474]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdherenceAgentRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdherenceAgentRulesResponse) ProtoMessage() {}

func (x *ListAdherenceAgentRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[474]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdherenceAgentRulesResponse.ProtoReflect.Descriptor instead.
func (*ListAdherenceAgentRulesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{474}
}

func (x *ListAdherenceAgentRulesResponse) GetRules() []*commons.AdherenceAgentRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// Request message for AgentGetSchedule.
type AgentGetScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime over which to get shifts.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
}

func (x *AgentGetScheduleRequest) Reset() {
	*x = AgentGetScheduleRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[475]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentGetScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGetScheduleRequest) ProtoMessage() {}

func (x *AgentGetScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[475]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGetScheduleRequest.ProtoReflect.Descriptor instead.
func (*AgentGetScheduleRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{475}
}

func (x *AgentGetScheduleRequest) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

// Response message for AgentGetSchedule.
type AgentGetScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested shift instances, with member activities.
	ShiftInstances []*ShiftInstance `protobuf:"bytes,1,rep,name=shift_instances,json=shiftInstances,proto3" json:"shift_instances,omitempty"`
}

func (x *AgentGetScheduleResponse) Reset() {
	*x = AgentGetScheduleResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[476]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentGetScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGetScheduleResponse) ProtoMessage() {}

func (x *AgentGetScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[476]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGetScheduleResponse.ProtoReflect.Descriptor instead.
func (*AgentGetScheduleResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{476}
}

func (x *AgentGetScheduleResponse) GetShiftInstances() []*ShiftInstance {
	if x != nil {
		return x.ShiftInstances
	}
	return nil
}

// Request message for AgentListLeavePetitions.
type AgentListLeavePetitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime range over which agent leave petitions should be retrieved.
	// Any agent leave petitions overlapping the datetime range may be returned.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// If true, archived agent leave petitions will be included in the response.
	// Otherwise, no archived requests will be included in the response.
	IncludeArchived bool `protobuf:"varint,2,opt,name=include_archived,json=includeArchived,proto3" json:"include_archived,omitempty"`
}

func (x *AgentListLeavePetitionsRequest) Reset() {
	*x = AgentListLeavePetitionsRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[477]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentListLeavePetitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentListLeavePetitionsRequest) ProtoMessage() {}

func (x *AgentListLeavePetitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[477]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentListLeavePetitionsRequest.ProtoReflect.Descriptor instead.
func (*AgentListLeavePetitionsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{477}
}

func (x *AgentListLeavePetitionsRequest) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *AgentListLeavePetitionsRequest) GetIncludeArchived() bool {
	if x != nil {
		return x.IncludeArchived
	}
	return false
}

// Response message for AgentListLeavePetitions.
type AgentListLeavePetitionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All agent leave petitions requests matching the parameters in the request.
	AgentLeavePetitions []*commons.AgentLeavePetition `protobuf:"bytes,1,rep,name=agent_leave_petitions,json=agentLeavePetitions,proto3" json:"agent_leave_petitions,omitempty"`
}

func (x *AgentListLeavePetitionsResponse) Reset() {
	*x = AgentListLeavePetitionsResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[478]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentListLeavePetitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentListLeavePetitionsResponse) ProtoMessage() {}

func (x *AgentListLeavePetitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[478]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentListLeavePetitionsResponse.ProtoReflect.Descriptor instead.
func (*AgentListLeavePetitionsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{478}
}

func (x *AgentListLeavePetitionsResponse) GetAgentLeavePetitions() []*commons.AgentLeavePetition {
	if x != nil {
		return x.AgentLeavePetitions
	}
	return nil
}

// Request message for AgentCreateLeavePetition.
type AgentCreateLeavePetitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All datetime ranges being requested for the time off.
	// No overlap is allowed between the datetime ranges.
	RequestedDatetimeRanges []*commons.DatetimeRange `protobuf:"bytes,1,rep,name=requested_datetime_ranges,json=requestedDatetimeRanges,proto3" json:"requested_datetime_ranges,omitempty"`
	// A comment describing the reason for the time off request.
	PetitionComment string `protobuf:"bytes,2,opt,name=petition_comment,json=petitionComment,proto3" json:"petition_comment,omitempty"`
	// The number of working hours requested off.
	// This does not need to relate directly to the datetime range being requested off,
	// For example in the case where a 14 hour schedulable range is being taken off but 8 hours of work will be paid out with PTO.
	RequestedHoursOff float32 `protobuf:"fixed32,3,opt,name=requested_hours_off,json=requestedHoursOff,proto3" json:"requested_hours_off,omitempty"`
}

func (x *AgentCreateLeavePetitionRequest) Reset() {
	*x = AgentCreateLeavePetitionRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[479]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentCreateLeavePetitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentCreateLeavePetitionRequest) ProtoMessage() {}

func (x *AgentCreateLeavePetitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[479]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentCreateLeavePetitionRequest.ProtoReflect.Descriptor instead.
func (*AgentCreateLeavePetitionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{479}
}

func (x *AgentCreateLeavePetitionRequest) GetRequestedDatetimeRanges() []*commons.DatetimeRange {
	if x != nil {
		return x.RequestedDatetimeRanges
	}
	return nil
}

func (x *AgentCreateLeavePetitionRequest) GetPetitionComment() string {
	if x != nil {
		return x.PetitionComment
	}
	return ""
}

func (x *AgentCreateLeavePetitionRequest) GetRequestedHoursOff() float32 {
	if x != nil {
		return x.RequestedHoursOff
	}
	return 0
}

// Response message for AgentCreateLeavePetition.
type AgentCreateLeavePetitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentLeavePetition *commons.AgentLeavePetition `protobuf:"bytes,1,opt,name=agent_leave_petition,json=agentLeavePetition,proto3" json:"agent_leave_petition,omitempty"`
}

func (x *AgentCreateLeavePetitionResponse) Reset() {
	*x = AgentCreateLeavePetitionResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[480]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentCreateLeavePetitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentCreateLeavePetitionResponse) ProtoMessage() {}

func (x *AgentCreateLeavePetitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[480]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentCreateLeavePetitionResponse.ProtoReflect.Descriptor instead.
func (*AgentCreateLeavePetitionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{480}
}

func (x *AgentCreateLeavePetitionResponse) GetAgentLeavePetition() *commons.AgentLeavePetition {
	if x != nil {
		return x.AgentLeavePetition
	}
	return nil
}

// Request message for AgentCancelLeavePetition.
type AgentCancelLeavePetitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the agent leave petition to cancel.
	AgentLeavePetitionId int64 `protobuf:"varint,1,opt,name=agent_leave_petition_id,json=agentLeavePetitionId,proto3" json:"agent_leave_petition_id,omitempty"`
}

func (x *AgentCancelLeavePetitionRequest) Reset() {
	*x = AgentCancelLeavePetitionRequest{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[481]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentCancelLeavePetitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentCancelLeavePetitionRequest) ProtoMessage() {}

func (x *AgentCancelLeavePetitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[481]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentCancelLeavePetitionRequest.ProtoReflect.Descriptor instead.
func (*AgentCancelLeavePetitionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{481}
}

func (x *AgentCancelLeavePetitionRequest) GetAgentLeavePetitionId() int64 {
	if x != nil {
		return x.AgentLeavePetitionId
	}
	return 0
}

// Response message for AgentCancelLeavePetition.
type AgentCancelLeavePetitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The canceled Agent Leave Petition.
	AgentLeavePetition *commons.AgentLeavePetition `protobuf:"bytes,1,opt,name=agent_leave_petition,json=agentLeavePetition,proto3" json:"agent_leave_petition,omitempty"`
}

func (x *AgentCancelLeavePetitionResponse) Reset() {
	*x = AgentCancelLeavePetitionResponse{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[482]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentCancelLeavePetitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentCancelLeavePetitionResponse) ProtoMessage() {}

func (x *AgentCancelLeavePetitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[482]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentCancelLeavePetitionResponse.ProtoReflect.Descriptor instead.
func (*AgentCancelLeavePetitionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{482}
}

func (x *AgentCancelLeavePetitionResponse) GetAgentLeavePetition() *commons.AgentLeavePetition {
	if x != nil {
		return x.AgentLeavePetition
	}
	return nil
}

type UpdateSkillProfileProficienciesReq_Proficiency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile that contains the @skill_sid.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// ID of the skill profile skill to update the proficiency.
	SkillSid int64 `protobuf:"varint,2,opt,name=skill_sid,json=skillSid,proto3" json:"skill_sid,omitempty"`
	// Updated value to give the proficiency.
	Proficiency int32 `protobuf:"varint,3,opt,name=proficiency,proto3" json:"proficiency,omitempty"`
}

func (x *UpdateSkillProfileProficienciesReq_Proficiency) Reset() {
	*x = UpdateSkillProfileProficienciesReq_Proficiency{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[483]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSkillProfileProficienciesReq_Proficiency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileProficienciesReq_Proficiency) ProtoMessage() {}

func (x *UpdateSkillProfileProficienciesReq_Proficiency) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[483]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileProficienciesReq_Proficiency.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileProficienciesReq_Proficiency) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{11, 0}
}

func (x *UpdateSkillProfileProficienciesReq_Proficiency) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *UpdateSkillProfileProficienciesReq_Proficiency) GetSkillSid() int64 {
	if x != nil {
		return x.SkillSid
	}
	return 0
}

func (x *UpdateSkillProfileProficienciesReq_Proficiency) GetProficiency() int32 {
	if x != nil {
		return x.Proficiency
	}
	return 0
}

type GetSkillProfileRes_Mapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile mapped to the requested skill profile.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// Name of the skill profile mapped to the requested skill profile.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSkillProfileRes_Mapping) Reset() {
	*x = GetSkillProfileRes_Mapping{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[484]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSkillProfileRes_Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkillProfileRes_Mapping) ProtoMessage() {}

func (x *GetSkillProfileRes_Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[484]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkillProfileRes_Mapping.ProtoReflect.Descriptor instead.
func (*GetSkillProfileRes_Mapping) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{14, 0}
}

func (x *GetSkillProfileRes_Mapping) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *GetSkillProfileRes_Mapping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Can't use "repeated" in a "oneof" so this field is nested in its own message
type DeleteForecastIntervalsReq_IntervalSids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sids of the intervals/deltas to be deleted
	Sids []int64 `protobuf:"varint,1,rep,packed,name=sids,proto3" json:"sids,omitempty"`
}

func (x *DeleteForecastIntervalsReq_IntervalSids) Reset() {
	*x = DeleteForecastIntervalsReq_IntervalSids{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[485]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteForecastIntervalsReq_IntervalSids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteForecastIntervalsReq_IntervalSids) ProtoMessage() {}

func (x *DeleteForecastIntervalsReq_IntervalSids) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[485]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteForecastIntervalsReq_IntervalSids.ProtoReflect.Descriptor instead.
func (*DeleteForecastIntervalsReq_IntervalSids) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{92, 0}
}

func (x *DeleteForecastIntervalsReq_IntervalSids) GetSids() []int64 {
	if x != nil {
		return x.Sids
	}
	return nil
}

// Represents a list of agent groups which are associated with an agent.
type ListAllWFMAgentsRes_AgentGroupsByAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentGroups []*AgentGroup `protobuf:"bytes,1,rep,name=agent_groups,json=agentGroups,proto3" json:"agent_groups,omitempty"`
}

func (x *ListAllWFMAgentsRes_AgentGroupsByAgent) Reset() {
	*x = ListAllWFMAgentsRes_AgentGroupsByAgent{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[486]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAllWFMAgentsRes_AgentGroupsByAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllWFMAgentsRes_AgentGroupsByAgent) ProtoMessage() {}

func (x *ListAllWFMAgentsRes_AgentGroupsByAgent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[486]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllWFMAgentsRes_AgentGroupsByAgent.ProtoReflect.Descriptor instead.
func (*ListAllWFMAgentsRes_AgentGroupsByAgent) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{168, 0}
}

func (x *ListAllWFMAgentsRes_AgentGroupsByAgent) GetAgentGroups() []*AgentGroup {
	if x != nil {
		return x.AgentGroups
	}
	return nil
}

type DatetimePattern_WeekMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime range of the week map.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Days of the week that the week map has.
	DayMaps []*DatetimePattern_WeekMap_WeekMapDOW `protobuf:"bytes,2,rep,name=day_maps,json=dayMaps,proto3" json:"day_maps,omitempty"`
}

func (x *DatetimePattern_WeekMap) Reset() {
	*x = DatetimePattern_WeekMap{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[488]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatetimePattern_WeekMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimePattern_WeekMap) ProtoMessage() {}

func (x *DatetimePattern_WeekMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[488]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimePattern_WeekMap.ProtoReflect.Descriptor instead.
func (*DatetimePattern_WeekMap) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{208, 0}
}

func (x *DatetimePattern_WeekMap) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *DatetimePattern_WeekMap) GetDayMaps() []*DatetimePattern_WeekMap_WeekMapDOW {
	if x != nil {
		return x.DayMaps
	}
	return nil
}

type DatetimePattern_CalendarItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime range of the calendar item.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Value that this calendar item has.
	Value *commons.OptionTypes `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DatetimePattern_CalendarItem) Reset() {
	*x = DatetimePattern_CalendarItem{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[489]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatetimePattern_CalendarItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimePattern_CalendarItem) ProtoMessage() {}

func (x *DatetimePattern_CalendarItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[489]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimePattern_CalendarItem.ProtoReflect.Descriptor instead.
func (*DatetimePattern_CalendarItem) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{208, 1}
}

func (x *DatetimePattern_CalendarItem) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *DatetimePattern_CalendarItem) GetValue() *commons.OptionTypes {
	if x != nil {
		return x.Value
	}
	return nil
}

type DatetimePattern_WeekMap_WeekMapDOW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which day of the week the entity represents.
	DayOfWeek commons.DayOfWeek `protobuf:"varint,1,opt,name=day_of_week,json=dayOfWeek,proto3,enum=api.commons.DayOfWeek" json:"day_of_week,omitempty"`
	// Which minute the entity starts at.
	StartMinuteInDay int32 `protobuf:"varint,2,opt,name=start_minute_in_day,json=startMinuteInDay,proto3" json:"start_minute_in_day,omitempty"`
	// Which minute the entity ends at.
	EndMinuteInDay int32 `protobuf:"varint,3,opt,name=end_minute_in_day,json=endMinuteInDay,proto3" json:"end_minute_in_day,omitempty"`
	// Value that this day of the week has.
	Value *commons.OptionTypes `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DatetimePattern_WeekMap_WeekMapDOW) Reset() {
	*x = DatetimePattern_WeekMap_WeekMapDOW{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[490]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatetimePattern_WeekMap_WeekMapDOW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimePattern_WeekMap_WeekMapDOW) ProtoMessage() {}

func (x *DatetimePattern_WeekMap_WeekMapDOW) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[490]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimePattern_WeekMap_WeekMapDOW.ProtoReflect.Descriptor instead.
func (*DatetimePattern_WeekMap_WeekMapDOW) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{208, 0, 0}
}

func (x *DatetimePattern_WeekMap_WeekMapDOW) GetDayOfWeek() commons.DayOfWeek {
	if x != nil {
		return x.DayOfWeek
	}
	return commons.DayOfWeek(0)
}

func (x *DatetimePattern_WeekMap_WeekMapDOW) GetStartMinuteInDay() int32 {
	if x != nil {
		return x.StartMinuteInDay
	}
	return 0
}

func (x *DatetimePattern_WeekMap_WeekMapDOW) GetEndMinuteInDay() int32 {
	if x != nil {
		return x.EndMinuteInDay
	}
	return 0
}

func (x *DatetimePattern_WeekMap_WeekMapDOW) GetValue() *commons.OptionTypes {
	if x != nil {
		return x.Value
	}
	return nil
}

// Pair of parent entities, used to relate two entities.
type UpsertNonSkillActivityAssociationRes_EntityMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When possible, the parent entity of the pair.
	LeftEntity *ParentEntity `protobuf:"bytes,1,opt,name=left_entity,json=leftEntity,proto3" json:"left_entity,omitempty"`
	// When possible, the child or member entity of the pair.
	RightEntity *ParentEntity `protobuf:"bytes,2,opt,name=right_entity,json=rightEntity,proto3" json:"right_entity,omitempty"`
}

func (x *UpsertNonSkillActivityAssociationRes_EntityMapping) Reset() {
	*x = UpsertNonSkillActivityAssociationRes_EntityMapping{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[491]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertNonSkillActivityAssociationRes_EntityMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertNonSkillActivityAssociationRes_EntityMapping) ProtoMessage() {}

func (x *UpsertNonSkillActivityAssociationRes_EntityMapping) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[491]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertNonSkillActivityAssociationRes_EntityMapping.ProtoReflect.Descriptor instead.
func (*UpsertNonSkillActivityAssociationRes_EntityMapping) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{231, 0}
}

func (x *UpsertNonSkillActivityAssociationRes_EntityMapping) GetLeftEntity() *ParentEntity {
	if x != nil {
		return x.LeftEntity
	}
	return nil
}

func (x *UpsertNonSkillActivityAssociationRes_EntityMapping) GetRightEntity() *ParentEntity {
	if x != nil {
		return x.RightEntity
	}
	return nil
}

// Group containing Client Nodes.
type ListConfigEntitiesRes_ClientNodeEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client Nodes.
	Entities []*ClientNode `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_ClientNodeEntities) Reset() {
	*x = ListConfigEntitiesRes_ClientNodeEntities{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[492]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesRes_ClientNodeEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_ClientNodeEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_ClientNodeEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[492]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_ClientNodeEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_ClientNodeEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247, 0}
}

func (x *ListConfigEntitiesRes_ClientNodeEntities) GetEntities() []*ClientNode {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group containing Location Nodes.
type ListConfigEntitiesRes_LocationNodeEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location Nodes.
	Entities []*LocationNode `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_LocationNodeEntities) Reset() {
	*x = ListConfigEntitiesRes_LocationNodeEntities{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[493]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesRes_LocationNodeEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_LocationNodeEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_LocationNodeEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[493]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_LocationNodeEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_LocationNodeEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247, 1}
}

func (x *ListConfigEntitiesRes_LocationNodeEntities) GetEntities() []*LocationNode {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group containing Program Nodes.
type ListConfigEntitiesRes_ProgramNodeEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Program Nodes.
	Entities []*ProgramNode `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_ProgramNodeEntities) Reset() {
	*x = ListConfigEntitiesRes_ProgramNodeEntities{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[494]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesRes_ProgramNodeEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_ProgramNodeEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_ProgramNodeEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[494]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_ProgramNodeEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_ProgramNodeEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247, 2}
}

func (x *ListConfigEntitiesRes_ProgramNodeEntities) GetEntities() []*ProgramNode {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group of Agent Groups.
type ListConfigEntitiesRes_AgentGroupEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent Groups.
	Entities []*AgentGroup `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_AgentGroupEntities) Reset() {
	*x = ListConfigEntitiesRes_AgentGroupEntities{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[495]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesRes_AgentGroupEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_AgentGroupEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_AgentGroupEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[495]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_AgentGroupEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_AgentGroupEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247, 3}
}

func (x *ListConfigEntitiesRes_AgentGroupEntities) GetEntities() []*AgentGroup {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group containing Shift Templates.
type ListConfigEntitiesRes_ShiftTemplateEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shift Templates.
	Entities []*ShiftTemplate `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_ShiftTemplateEntities) Reset() {
	*x = ListConfigEntitiesRes_ShiftTemplateEntities{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[496]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesRes_ShiftTemplateEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_ShiftTemplateEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_ShiftTemplateEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[496]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_ShiftTemplateEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_ShiftTemplateEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247, 4}
}

func (x *ListConfigEntitiesRes_ShiftTemplateEntities) GetEntities() []*ShiftTemplate {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group of WFM Agents.
type ListConfigEntitiesRes_WFMAgentEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WFM Agents.
	Entities []*WFMAgent `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_WFMAgentEntities) Reset() {
	*x = ListConfigEntitiesRes_WFMAgentEntities{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[497]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesRes_WFMAgentEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_WFMAgentEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_WFMAgentEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[497]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_WFMAgentEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_WFMAgentEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247, 5}
}

func (x *ListConfigEntitiesRes_WFMAgentEntities) GetEntities() []*WFMAgent {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group containing Placement Rules.
type ListConfigEntitiesRes_PlacementRuleEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Placement Rules.
	Entities []*PlacementRule `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_PlacementRuleEntities) Reset() {
	*x = ListConfigEntitiesRes_PlacementRuleEntities{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[498]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesRes_PlacementRuleEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_PlacementRuleEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_PlacementRuleEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[498]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_PlacementRuleEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_PlacementRuleEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247, 6}
}

func (x *ListConfigEntitiesRes_PlacementRuleEntities) GetEntities() []*PlacementRule {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group containing Constraint Rules.
type ListConfigEntitiesRes_ConstraintRuleEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Constraint Rules.
	Entities []*ConstraintRule `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_ConstraintRuleEntities) Reset() {
	*x = ListConfigEntitiesRes_ConstraintRuleEntities{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[499]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesRes_ConstraintRuleEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_ConstraintRuleEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_ConstraintRuleEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[499]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_ConstraintRuleEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_ConstraintRuleEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247, 7}
}

func (x *ListConfigEntitiesRes_ConstraintRuleEntities) GetEntities() []*ConstraintRule {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group of Non Skill Activities.
type ListConfigEntitiesRes_NonSkillActivityEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Non Skill Activities.
	Entities []*NonSkillActivity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_NonSkillActivityEntities) Reset() {
	*x = ListConfigEntitiesRes_NonSkillActivityEntities{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[500]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesRes_NonSkillActivityEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_NonSkillActivityEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_NonSkillActivityEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[500]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_NonSkillActivityEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_NonSkillActivityEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247, 8}
}

func (x *ListConfigEntitiesRes_NonSkillActivityEntities) GetEntities() []*NonSkillActivity {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group of AgentAvailabilityPatterns.
type ListConfigEntitiesRes_AgentAvailabilityPatternEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent Availability Patterns.
	Entities []*AgentAvailabilityPattern `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_AgentAvailabilityPatternEntities) Reset() {
	*x = ListConfigEntitiesRes_AgentAvailabilityPatternEntities{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[501]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesRes_AgentAvailabilityPatternEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_AgentAvailabilityPatternEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_AgentAvailabilityPatternEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[501]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_AgentAvailabilityPatternEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_AgentAvailabilityPatternEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247, 9}
}

func (x *ListConfigEntitiesRes_AgentAvailabilityPatternEntities) GetEntities() []*AgentAvailabilityPattern {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group of OpenTimesPatterns.
type ListConfigEntitiesRes_OpenTimesPatternEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Open Times Patterns.
	Entities []*OpenTimesPattern `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_OpenTimesPatternEntities) Reset() {
	*x = ListConfigEntitiesRes_OpenTimesPatternEntities{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[502]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesRes_OpenTimesPatternEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_OpenTimesPatternEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_OpenTimesPatternEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[502]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_OpenTimesPatternEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_OpenTimesPatternEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247, 10}
}

func (x *ListConfigEntitiesRes_OpenTimesPatternEntities) GetEntities() []*OpenTimesPattern {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group of Skill Proficiencies.
type ListConfigEntitiesRes_SkillProficiencyEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skill Proficiencies.
	Entities []*SkillProficiency `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_SkillProficiencyEntities) Reset() {
	*x = ListConfigEntitiesRes_SkillProficiencyEntities{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[503]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesRes_SkillProficiencyEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_SkillProficiencyEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_SkillProficiencyEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[503]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_SkillProficiencyEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_SkillProficiencyEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247, 11}
}

func (x *ListConfigEntitiesRes_SkillProficiencyEntities) GetEntities() []*SkillProficiency {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group of Schedule Scenarios.
type ListConfigEntitiesRes_ScheduleScenarioEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schedule Scenarios.
	Entities []*ScheduleScenario `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_ScheduleScenarioEntities) Reset() {
	*x = ListConfigEntitiesRes_ScheduleScenarioEntities{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[504]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigEntitiesRes_ScheduleScenarioEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_ScheduleScenarioEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_ScheduleScenarioEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[504]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_ScheduleScenarioEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_ScheduleScenarioEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247, 12}
}

func (x *ListConfigEntitiesRes_ScheduleScenarioEntities) GetEntities() []*ScheduleScenario {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Pairs the skill collection to a v3 performance metric.
type PerformanceMetricV3_MetricByCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skill collections that metrics were calculated for.
	SkillCollection *commons.SkillProfileCategory `protobuf:"bytes,1,opt,name=skill_collection,json=skillCollection,proto3" json:"skill_collection,omitempty"`
	// The metric for the @skill_collection.
	Metric *Basic_PerformanceMetricV3 `protobuf:"bytes,2,opt,name=metric,proto3" json:"metric,omitempty"`
}

func (x *PerformanceMetricV3_MetricByCollection) Reset() {
	*x = PerformanceMetricV3_MetricByCollection{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[505]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceMetricV3_MetricByCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMetricV3_MetricByCollection) ProtoMessage() {}

func (x *PerformanceMetricV3_MetricByCollection) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[505]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMetricV3_MetricByCollection.ProtoReflect.Descriptor instead.
func (*PerformanceMetricV3_MetricByCollection) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{262, 0}
}

func (x *PerformanceMetricV3_MetricByCollection) GetSkillCollection() *commons.SkillProfileCategory {
	if x != nil {
		return x.SkillCollection
	}
	return nil
}

func (x *PerformanceMetricV3_MetricByCollection) GetMetric() *Basic_PerformanceMetricV3 {
	if x != nil {
		return x.Metric
	}
	return nil
}

// Pair of IDs, to relate a Tour Agent Collection and a WFM Agent.
type ListTourAgentCollectionWFMAgentsRes_SidMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the Tour Agent Collection that the @wfm_agent_sid is associated with.
	AgentCollectionSid int64 `protobuf:"varint,1,opt,name=agent_collection_sid,json=agentCollectionSid,proto3" json:"agent_collection_sid,omitempty"`
	// ID of the WFM Agent that the agent_collection_sid is associated with.
	WfmAgentSids []int64 `protobuf:"varint,2,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
}

func (x *ListTourAgentCollectionWFMAgentsRes_SidMapping) Reset() {
	*x = ListTourAgentCollectionWFMAgentsRes_SidMapping{}
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[506]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTourAgentCollectionWFMAgentsRes_SidMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTourAgentCollectionWFMAgentsRes_SidMapping) ProtoMessage() {}

func (x *ListTourAgentCollectionWFMAgentsRes_SidMapping) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[506]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTourAgentCollectionWFMAgentsRes_SidMapping.ProtoReflect.Descriptor instead.
func (*ListTourAgentCollectionWFMAgentsRes_SidMapping) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{394, 0}
}

func (x *ListTourAgentCollectionWFMAgentsRes_SidMapping) GetAgentCollectionSid() int64 {
	if x != nil {
		return x.AgentCollectionSid
	}
	return 0
}

func (x *ListTourAgentCollectionWFMAgentsRes_SidMapping) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

var File_api_v1alpha1_wfm_wfm_proto protoreflect.FileDescriptor

var file_api_v1alpha1_wfm_wfm_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x77, 0x66, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x1a, 0x17,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x77, 0x66, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x22, 0x0a, 0x20, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x21, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x0c, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x44, 0x65, 0x6d, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6d, 0x6f, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a,
	0x02, 0x0a, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xd7, 0x05, 0x0a, 0x0c,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x6e,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4f, 0x66,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x42, 0x0a, 0x1e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x45,
	0x0a, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x61, 0x72, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x22, 0x95, 0x05, 0x0a, 0x11, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x17, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x14, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72,
	0x65, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x72, 0x65, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x73, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x58, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x74,
	0x68, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x63, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x45, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xca, 0x03, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x65,
	0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x72, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x66, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x1a, 0x78, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x24, 0x0a, 0x22, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x48, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x49, 0x0a, 0x07, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x46,
	0x0a, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x55, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x73, 0x22, 0x22, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x22, 0x5f, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61,
	0x74, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x59, 0x0a, 0x16, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x20, 0x0a, 0x1e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x1d,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x22, 0x78, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x16,
	0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x15, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xb9, 0x0a, 0x0a, 0x16, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x66, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x5f, 0x0a,
	0x1e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x66,
	0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x62, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x77, 0x0a, 0x2b, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x25, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x70, 0x0a, 0x27, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x22, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x77, 0x0a, 0x2b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x25, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x73,
	0x0a, 0x29, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x23,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x57, 0x0a, 0x16, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x14, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0x22, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x66, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x02, 0x18, 0x01, 0x22,
	0xa0, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x16, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x14, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x22, 0x7d, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x19, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x17, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x22, 0x5e, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x12, 0x3e, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x22, 0x5e, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x22, 0x61, 0x0a, 0x1d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x40, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x73, 0x52, 0x65, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x22, 0x40, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x9e, 0x08, 0x0a, 0x13, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x19, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x16, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x52, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x65, 0x0a, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x1a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x1f, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x76, 0x67, 0x73, 0x52, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x67, 0x73, 0x52, 0x18, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x1f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x67,
	0x73, 0x52, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x63,
	0x0a, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x67, 0x73, 0x52, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x1d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x12, 0x3c, 0x0a, 0x1b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x12, 0x4a, 0x0a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x79, 0x0a, 0x2a, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x3a, 0x02, 0x18, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x2a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3a, 0x02,
	0x18, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x57, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x78, 0x0a, 0x1b, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x13, 0x63,
	0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x1a, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x17, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x64, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x2a, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x3a, 0x02, 0x18,
	0x01, 0x22, 0x2f, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x22, 0x7d, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x22, 0x6b, 0x0a, 0x28, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a,
	0x1a, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x17, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x2e,
	0x0a, 0x28, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x71,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x53, 0x0a, 0x13,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x57, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x17, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x53, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x1c, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x18, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x15, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x22, 0x72, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x12, 0x55,
	0x0a, 0x14, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x39, 0x0a, 0x17, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x64, 0x73, 0x54, 0x6f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x12, 0x4a, 0x0a, 0x22, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1e, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x73, 0x54,
	0x6f, 0x44, 0x69, 0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x22, 0x28, 0x0a,
	0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0d,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x1a, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x22, 0x30, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbf, 0x02, 0x0a, 0x21,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xe9, 0x05,
	0x0a, 0x12, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x66, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x57, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xc8, 0x02, 0x0a, 0x2a, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x13,
	0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x11, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x16, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x14,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x22, 0xd6, 0x01, 0x0a, 0x2a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0xb6, 0x02,
	0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x57, 0x0a,
	0x16, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x14, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x22, 0x79, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x1e, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x59, 0x0a,
	0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a,
	0x19, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0xfe, 0x04, 0x0a, 0x12, 0x52, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x1d, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x6e, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x6f, 0x72, 0x4e, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x73, 0x5f, 0x61, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6d, 0x70,
	0x68, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75,
	0x6d, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x41, 0x67, 0x6f, 0x54, 0x6f, 0x45, 0x6d, 0x70, 0x68, 0x61,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x1f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x65, 0x0a, 0x14,
	0x61, 0x76, 0x67, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x67,
	0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x12, 0x61, 0x76, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x22, 0x74, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x55, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x72, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22,
	0x1d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x55,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x22, 0x75, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x57, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x13, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0xe2, 0x03, 0x0a, 0x24, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a,
	0x1e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x20,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x1a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x64, 0x73, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x22, 0xeb,
	0x03, 0x0a, 0x2d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x55, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x1a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x64, 0x73, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x22, 0x80, 0x04, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6d, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x6d, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x6d,
	0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x41, 0x54, 0x41, 0x42, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x72, 0x6d, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x54, 0x41, 0x42,
	0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6d, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x41, 0x53,
	0x41, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x6d, 0x73, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x41, 0x53, 0x41, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6d, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x41, 0x43, 0x57, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x6d, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x43, 0x57, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6d, 0x73, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x41, 0x48, 0x54, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x72, 0x6d, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x48, 0x54, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xd9, 0x01, 0x0a, 0x2d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x1d, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x7a, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x16, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x46,
	0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x3a, 0x02, 0x18,
	0x01, 0x22, 0x73, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x57, 0x0a,
	0x16, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x14, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x79, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x56,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x14, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x22, 0x65, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xd9, 0x03, 0x0a, 0x1b, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x55, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x72, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49,
	0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x42, 0x0a, 0x1e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x73, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x1a, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x12, 0x3a, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x58, 0x0a,
	0x1a, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73,
	0x52, 0x65, 0x73, 0x22, 0xa1, 0x04, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x64, 0x12, 0x71, 0x0a, 0x16, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x69, 0x64, 0x73, 0x48,
	0x00, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x69, 0x64, 0x73, 0x12, 0x59, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x14, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x8a, 0x01, 0x0a, 0x1d, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x1a, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x69, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x1a, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x53, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4c, 0x54, 0x41, 0x53, 0x10, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x41, 0x6c,
	0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x22, 0x6e, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0xc0, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x4f, 0x57, 0x41, 0x6e,
	0x64, 0x4d, 0x4f, 0x59, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x38, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x4f, 0x44, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x77, 0x6f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x57, 0x4f, 0x4d, 0x53, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x57, 0x6f, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x4f,
	0x57, 0x41, 0x6e, 0x64, 0x4d, 0x4f, 0x59, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x4f, 0x57,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x12, 0x38, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x4f, 0x59, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x79, 0x22, 0x5d, 0x0a, 0x2f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0xd2, 0x02, 0x0a, 0x2f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x30, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x73, 0x12, 0x41, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x5b, 0x0a, 0x2b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a,
	0x18, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x15, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x22, 0x32, 0x0a, 0x30, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0xf3,
	0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x22, 0xe9, 0x07, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x18, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53,
	0x69, 0x64, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x61, 0x0a, 0x1b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x17, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x1f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x58, 0x0a,
	0x17, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65,
	0x22, 0x4f, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0x81, 0x08, 0x0a,
	0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x15,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x61, 0x0a, 0x1b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x17, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x1f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x58, 0x0a,
	0x17, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65,
	0x22, 0x47, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x3d, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0xf6, 0x08, 0x0a, 0x0c, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x15, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x54, 0x6f,
	0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x56, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x17, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x2b, 0x0a, 0x0f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x73, 0x68,
	0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64,
	0x12, 0x4f, 0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x61, 0x0a, 0x1b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x17, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x1f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x58,
	0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67,
	0x65, 0x22, 0x4b, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x43,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0xfd, 0x09, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x74, 0x54, 0x6f, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x73,
	0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x15, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x73, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x68, 0x72, 0x69, 0x6e,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x16, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x14, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x61, 0x0a, 0x1b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x5f, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x17, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x1f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x17,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x60, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x18, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x39, 0x0a, 0x09, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x49, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x40, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x40, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64,
	0x65, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x53,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64,
	0x73, 0x22, 0x5e, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x6d, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64,
	0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x90, 0x06, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x76,
	0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x07,
	0x76, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x70, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x12, 0x3c,
	0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12,
	0x57, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x64, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x49,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x7d, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x19,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x86, 0x03, 0x0a, 0x10, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x52, 0x0a, 0x15, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x13, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x6d, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x50, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x88, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53,
	0x69, 0x64, 0x22, 0x6d, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x50, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e,
	0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x10, 0x6e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0x1b,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x71, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x14, 0x6e, 0x6f, 0x6e, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xc4,
	0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17,
	0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x6e,
	0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53,
	0x69, 0x64, 0x73, 0x22, 0xa0, 0x03, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53,
	0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3e,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12, 0x5d,
	0x0a, 0x19, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x16, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x6e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x66, 0x0a,
	0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x44, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f,
	0x66, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x24, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x21, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x7d, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22,
	0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x22, 0x85, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x1b, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x18, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x29, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84,
	0x01, 0x0a, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x2c, 0x0a, 0x2a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x37, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x7d, 0x0a, 0x23, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x21, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x38, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x1b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x19, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73,
	0x22, 0x25, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x4f, 0x66, 0x66, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0xb5, 0x05, 0x0a, 0x0a, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x43, 0x0a,
	0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69,
	0x64, 0x12, 0x58, 0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x66, 0x6d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x18, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x1f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x22, 0x54,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x3d, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x62, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x54, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0xf9,
	0x04, 0x0a, 0x08, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x77,
	0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x0d, 0x74, 0x63, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x63, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x15, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x54,
	0x6f, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x58, 0x0a, 0x17, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x15, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x18, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x1f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x63, 0x6e,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x63, 0x6e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x1f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57,
	0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7c,
	0x0a, 0x2e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x27, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64,
	0x54, 0x6f, 0x43, 0x6f, 0x70, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x46, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x66, 0x6d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a,
	0x09, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x77, 0x66,
	0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3e,
	0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x48, 0x0a, 0x21, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0x94, 0x02, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6b, 0x0a,
	0x15, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x62, 0x79,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42,
	0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x55, 0x0a, 0x12, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x43, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x46, 0x4d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe1,
	0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
	0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64,
	0x12, 0x50, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x22, 0x56, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x65, 0x64, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x63, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x63, 0x6e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x53, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x20, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57,
	0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x5c, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0a,
	0x28, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69,
	0x64, 0x22, 0x50, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x64, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x18, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x22, 0x0a, 0x0d, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64,
	0x22, 0x5b, 0x0a, 0x18, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xa0, 0x01,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24,
	0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64,
	0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x70, 0x79, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x57, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x2f,
	0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x57, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x22,
	0x21, 0x0a, 0x1f, 0x43, 0x6f, 0x70, 0x79, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x6c, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64,
	0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x6f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64,
	0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x77, 0x66, 0x6d,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x77, 0x66, 0x6d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x48, 0x0a, 0x21, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x23, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x14, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x75, 0x6e, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x22,
	0xef, 0x01, 0x0a, 0x0c, 0x44, 0x4f, 0x57, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x4f, 0x57, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f,
	0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x79, 0x4f,
	0x66, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xe4, 0x06, 0x0a, 0x0d, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x15, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x75,
	0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x54, 0x6f, 0x75, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x69, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x44, 0x4f, 0x57, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x61,
	0x63, 0x68, 0x44, 0x4f, 0x57, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x50, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x16,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x14, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x44, 0x4f, 0x57, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44,
	0x4f, 0x57, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x44, 0x4f, 0x57,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x60, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x64, 0x22, 0x60, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x0e,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x84, 0x01, 0x0a, 0x20, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x20, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xc6, 0x03, 0x0a, 0x0d, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d,
	0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12,
	0x62, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x22, 0x60, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x46, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0x60, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x22,
	0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x69,
	0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0xa5, 0x05, 0x0a, 0x0f,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x46, 0x0a, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x4d, 0x61, 0x70, 0x52, 0x08, 0x77,
	0x65, 0x65, 0x6b, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0d, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xee,
	0x02, 0x0a, 0x07, 0x57, 0x65, 0x65, 0x6b, 0x4d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4f, 0x0a,
	0x08, 0x64, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x4d, 0x61, 0x70, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x4d,
	0x61, 0x70, 0x44, 0x4f, 0x57, 0x52, 0x07, 0x64, 0x61, 0x79, 0x4d, 0x61, 0x70, 0x73, 0x1a, 0xce,
	0x01, 0x0a, 0x0a, 0x57, 0x65, 0x65, 0x6b, 0x4d, 0x61, 0x70, 0x44, 0x4f, 0x57, 0x12, 0x36, 0x0a,
	0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f,
	0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x49,
	0x6e, 0x44, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x81, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x43, 0x0a,
	0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x4c, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52,
	0x0f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x53, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x50, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x50, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x50, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x42, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xe7, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x69,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x70, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x22, 0xee, 0x01, 0x0a, 0x30, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x31, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xfb, 0x02, 0x0a, 0x18, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x4c, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69,
	0x64, 0x12, 0x53, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x68, 0x0a, 0x1a,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x18, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x68, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64,
	0x22, 0x8d, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x68, 0x0a, 0x1a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x22, 0x23, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x22,
	0x23, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x65, 0x73, 0x22, 0xb4, 0x02, 0x0a, 0x15, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x12, 0x3e,
	0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x4a,
	0x0a, 0x10, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x68, 0x65, 0x72,
	0x69, 0x74, 0x65, 0x64, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x4a, 0x0a, 0x10, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xc3, 0x02, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x4a, 0x0a, 0x11, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x6f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x69, 0x74, 0x6d, 0x61,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x5e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x07, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x52, 0x07, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x73, 0x22, 0x93, 0x02, 0x0a, 0x24, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x6f,
	0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x6f, 0x6e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12,
	0x32, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0xa6, 0x03, 0x0a, 0x24, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x76, 0x0a, 0x14, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x55, 0x73, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x93, 0x01, 0x0a, 0x0d, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0b,
	0x6c, 0x65, 0x66, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a,
	0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x22, 0xd2, 0x03, 0x0a, 0x10, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x1b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0d,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45,
	0x0a, 0x1f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x53, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x72, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x53, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x22, 0x9c, 0x04, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x18, 0x63, 0x6f, 0x70, 0x69, 0x65,
	0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69,
	0x64, 0x54, 0x6f, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x0f, 0x43,
	0x6f, 0x70, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53,
	0x69, 0x64, 0x22, 0xaf, 0x05, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x1c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x57, 0x0a, 0x16, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x14,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x22, 0x58, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0x6b,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x4e, 0x0a, 0x10, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x22, 0xa5, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x62,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64,
	0x22, 0xc4, 0x15, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x62, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x68, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x59, 0x0a, 0x0a, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x57, 0x46, 0x4d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x09, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x68, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x74, 0x0a, 0x14, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x1b, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x19, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x12, 0x72, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x73, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x1a, 0x4e, 0x0a, 0x12, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x14, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x50, 0x0a,
	0x13, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0x4e, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0x54, 0x0a, 0x15, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x10, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57,
	0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x1a, 0x54, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0x5a, 0x0a, 0x18, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x6a, 0x0a, 0x20, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x46, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x18, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0x5a, 0x0a, 0x18, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22,
	0x49, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x42, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x6f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x17, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x4f, 0x0a, 0x19, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x19,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xc9,
	0x03, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5b, 0x0a,
	0x16, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x56, 0x32, 0x52, 0x14, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x32, 0x22, 0x97, 0x05, 0x0a, 0x0d, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x48, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x76,
	0x32, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x32, 0x52, 0x14,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x56, 0x32, 0x22, 0xbb, 0x07, 0x0a, 0x23, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x74, 0x65,
	0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x6e, 0x75, 0x6d,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x28, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x5f, 0x62,
	0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x74, 0x65, 0x73, 0x42, 0x75, 0x74, 0x4e, 0x6f,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x2f, 0x6e, 0x75, 0x6d,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x66, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x28, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x46, 0x74, 0x65, 0x73, 0x42, 0x75, 0x74, 0x4e, 0x6f, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e,
	0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x6e, 0x65, 0x63,
	0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x46, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x66, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x46, 0x54, 0x45, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x56, 0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x0c, 0x66, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x12, 0x5e, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x12, 0x4c, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x02,
	0x18, 0x01, 0x22, 0xd1, 0x07, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66,
	0x74, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x74, 0x65, 0x73, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1d, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x54, 0x0a, 0x28, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x5f, 0x6e,
	0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x22, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x46, 0x74, 0x65, 0x73, 0x42, 0x75, 0x74, 0x4e, 0x6f, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x2f, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x74, 0x65, 0x73,
	0x5f, 0x62, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28,
	0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x74, 0x65, 0x73, 0x42, 0x75, 0x74, 0x4e, 0x6f, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x6e, 0x65, 0x63, 0x65,
	0x73, 0x73, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61,
	0x72, 0x79, 0x46, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x43, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x66, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x46, 0x54, 0x45, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x73, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0c,
	0x66, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x17,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x74, 0x0a, 0x1b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x42, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x8c, 0x0b, 0x0a, 0x25, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32,
	0x12, 0x39, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x1c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x43, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x46, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x66, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6e, 0x75, 0x6d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x6c,
	0x6c, 0x46, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6e, 0x75,
	0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x46, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x2a, 0x6e, 0x75, 0x6d, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x6e, 0x75, 0x6d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x6c,
	0x6c, 0x46, 0x74, 0x65, 0x73, 0x42, 0x75, 0x74, 0x4e, 0x6f, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73,
	0x12, 0x57, 0x0a, 0x2a, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x5f, 0x62, 0x75,
	0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x42, 0x75, 0x74, 0x4e,
	0x6f, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x74, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x74, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x70, 0x0a, 0x17, 0x66, 0x74, 0x65, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e,
	0x63, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x46, 0x54, 0x45, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x56, 0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x61, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x15, 0x66, 0x74,
	0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x15, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x66, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x64, 0x5f, 0x66, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x46, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x66, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x74, 0x65, 0x12,
	0x57, 0x0a, 0x29, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x64, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x24, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x64, 0x46, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x2b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x74, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x26, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x22, 0xa4, 0x0b, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x32, 0x12, 0x39, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x43, 0x0a,
	0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x74,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x66,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x46, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x2a, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x66, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x74,
	0x65, 0x73, 0x42, 0x75, 0x74, 0x4e, 0x6f, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x57, 0x0a,
	0x2a, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x5f, 0x6e,
	0x6f, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x23, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x42, 0x75, 0x74, 0x4e, 0x6f, 0x43, 0x61,
	0x6c, 0x6c, 0x46, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x74, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x70,
	0x0a, 0x17, 0x66, 0x74, 0x65, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x46, 0x54, 0x45, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x73,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x15, 0x66, 0x74, 0x65, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x12, 0x5e, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x12, 0x76, 0x0a, 0x1b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x18,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x74, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x46, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x64, 0x46, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x46, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x29, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x24, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x46, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12,
	0x5b, 0x0a, 0x2b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x72,
	0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x26, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x72, 0x69,
	0x6e, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x22, 0x93, 0x03, 0x0a,
	0x13, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x56, 0x33, 0x12, 0x59, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x33, 0x52, 0x10, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x41, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x77, 0x0a, 0x1b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa7, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x33, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x22, 0xef, 0x09, 0x0a, 0x19, 0x42, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x33,
	0x12, 0x39, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x46, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x46,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x46, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x29, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x24, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x46, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x72,
	0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x5b, 0x0a,
	0x2b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x26, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x46, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x6e, 0x75,
	0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x18, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x6e, 0x75,
	0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x46, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x2a,
	0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x74,
	0x5f, 0x6e, 0x6f, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x23, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x74, 0x65, 0x73, 0x42, 0x75, 0x74, 0x4e, 0x6f, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x2a, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x66,
	0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x6e, 0x75, 0x6d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x73, 0x42, 0x75, 0x74, 0x4e, 0x6f, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x74, 0x65, 0x73, 0x12, 0x43,
	0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x46,
	0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x66, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x46, 0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x25, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x66, 0x0a, 0x31, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x66, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x2b, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x66, 0x61, 0x6c,
	0x6c, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x52, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x56, 0x33,
	0x5f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x22, 0x88, 0x05, 0x0a, 0x15, 0x56, 0x33, 0x5f, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x12, 0x41,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x46, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64,
	0x5f, 0x66, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x64, 0x46, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x64, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x72,
	0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x46, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x66, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x25,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x21, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68,
	0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x43,
	0x0a, 0x1e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x32, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x66, 0x61, 0x6c, 0x6c,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x2c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x66, 0x61, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6e, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75,
	0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6e, 0x75, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x72, 0x6c,
	0x61, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x65, 0x72, 0x6c, 0x61, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x8f, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x64, 0x22, 0xb2, 0x01, 0x0a, 0x1d, 0x46, 0x54, 0x45, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x56, 0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x46, 0x74,
	0x65, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xec, 0x03, 0x0a, 0x26, 0x46, 0x54, 0x45, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x66, 0x74, 0x65, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x46, 0x74, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x38,
	0x0a, 0x16, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x14, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x46, 0x74, 0x65, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x46, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x46, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x64, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x46, 0x74, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x21, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0x8c, 0x05, 0x0a, 0x0d, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x64, 0x12, 0x43, 0x0a, 0x1c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x19, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x66, 0x6d,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x3e, 0x0a,
	0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a,
	0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x19,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x17, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x14, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x74, 0x12,
	0x4c, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x03,
	0x0a, 0x0c, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x36, 0x0a, 0x17,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x1e, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x52, 0x1a, 0x63, 0x61, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x03, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x16,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x10, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x6d,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xa2, 0x01,
	0x0a, 0x24, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0d,
	0x76, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0c, 0x76, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a,
	0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f,
	0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49,
	0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f,
	0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49,
	0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x10,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x22,
	0xe9, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x1a, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x6f, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x63, 0x6f, 0x70, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x49, 0x6e, 0x74,
	0x6f, 0x4e, 0x65, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x12, 0x67, 0x65, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x67, 0x65, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x22, 0x60, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0d,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xd1, 0x05,
	0x0a, 0x15, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x22, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x1f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x10, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x11,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x22, 0xfe, 0x01, 0x0a, 0x15, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x5d, 0x0a, 0x18, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x22, 0x4a, 0x0a, 0x1a, 0x50, 0x6f, 0x6c, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0xe3,
	0x02, 0x0a, 0x1b, 0x50, 0x6f, 0x6c, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x14, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x22, 0x4c, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53,
	0x69, 0x64, 0x22, 0x46, 0x0a, 0x1d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x22, 0xae, 0x04, 0x0a, 0x17, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x17,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x1b,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x2d, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x3a, 0x0a, 0x19, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x17,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x15,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x57, 0x0a, 0x15, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x22, 0xee, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x16, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a,
	0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x2d, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x5d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x22, 0x5a, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0x61, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x0e, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x22, 0xf1, 0x02, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x46, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0xeb, 0x02,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x66, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0xbf, 0x03, 0x0a, 0x19, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x57, 0x0a, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x61, 0x0a, 0x1d, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x1b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x5f, 0x61, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x41, 0x73, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x5b, 0x0a, 0x19, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x22, 0x86, 0x03, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a,
	0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x58,
	0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5b, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x76, 0x32, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x32, 0x52,
	0x14, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x56, 0x32, 0x22, 0xfc, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x52,
	0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x64, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x52, 0x65,
	0x73, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x26,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x19, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x27, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x15, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x6f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x12, 0x48, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x53,
	0x77, 0x61, 0x70, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x69, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x66,
	0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x31, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66,
	0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x32,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73,
	0x22, 0xa1, 0x01, 0x0a, 0x15, 0x53, 0x77, 0x61, 0x70, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x77, 0x66, 0x6d, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x66, 0x6d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22,
	0x97, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5b, 0x0a, 0x16,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x56, 0x32, 0x52, 0x14, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x32, 0x22, 0xb2, 0x02, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x56, 0x32, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x68,
	0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x68,
	0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xa2,
	0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x70, 0x79, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x50, 0x0a, 0x14, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x61, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x70, 0x41, 0x73, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x61, 0x0a, 0x1f, 0x43, 0x6f,
	0x70, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x54, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xd5, 0x01,
	0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41,
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x46, 0x6f,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x27, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x69, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0x5a, 0x0a,
	0x28, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x27, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x69, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x22, 0x70, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x25, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x21, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xc5, 0x04, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43,
	0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x39, 0x0a,
	0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f,
	0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49,
	0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xee, 0x02,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x5b, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x32, 0x52, 0x14, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56,
	0x32, 0x12, 0x5b, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x33, 0x52, 0x14, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x33, 0x12, 0x3e,
	0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x91,
	0x03, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x40, 0x0a, 0x1c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x6d, 0x0a, 0x25, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x22, 0x9d, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a,
	0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x10, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53,
	0x69, 0x64, 0x22, 0x4c, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x64,
	0x22, 0x5d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0xb8, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x1b, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x19, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x56,
	0x0a, 0x15, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x13, 0x6f, 0x77, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x62, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x19, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x60, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x1b, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x22, 0x70, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x70, 0x0a, 0x1d,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a,
	0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x10, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x1f,
	0x0a, 0x1d, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22,
	0xe2, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x61, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x16, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x16, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x44, 0x0a, 0x1d, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x19, 0x74, 0x6f, 0x75, 0x72,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x1a, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53,
	0x69, 0x64, 0x22, 0xe7, 0x02, 0x0a, 0x17, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46,
	0x0a, 0x1e, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x1a, 0x74, 0x6f, 0x75, 0x72,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x15, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x77,
	0x65, 0x65, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x57,
	0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x2f, 0x0a,
	0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x28,
	0x0a, 0x10, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x49,
	0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x21, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x1d, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x9d, 0x02, 0x0a,
	0x0f, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x35, 0x0a, 0x15, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x77, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x1e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xe1, 0x02, 0x0a,
	0x13, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x19, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x16, 0x74, 0x6f, 0x75,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69,
	0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66,
	0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73,
	0x22, 0xb1, 0x02, 0x0a, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x2c, 0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0e,
	0x74, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x19,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x16, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65,
	0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x1d, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64,
	0x22, 0x60, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x40, 0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x22, 0x5e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x22, 0x63, 0x0a, 0x1f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x74,
	0x6f, 0x75, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x3e, 0x0a,
	0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x41, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64,
	0x22, 0x55, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x4c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x44, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x2c, 0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0e, 0x74,
	0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x16, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x2c, 0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x0e, 0x74, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x22,
	0x51, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65,
	0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x15, 0x74,
	0x6f, 0x75, 0x72, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x12,
	0x74, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53,
	0x69, 0x64, 0x22, 0x47, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65,
	0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a,
	0x10, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x75,
	0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x6a, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x77,
	0x65, 0x65, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x22, 0x54, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x16, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x75, 0x72, 0x57, 0x65,
	0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x73, 0x22, 0x1b, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x20, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x66, 0x0a, 0x1a, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x17,
	0x74, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x6a, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x74,
	0x6f, 0x75, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x1a, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x69, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x66, 0x0a, 0x1a, 0x74, 0x6f, 0x75, 0x72,
	0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x17, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x22, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x16, 0x74, 0x6f, 0x75, 0x72, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x75,
	0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x73,
	0x22, 0x8b, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x1b, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x18, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x6d,
	0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x1b, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x69, 0x64, 0x73, 0x22, 0x23, 0x0a,
	0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x63, 0x0a, 0x19, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x16, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x67, 0x0a, 0x1f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x1d, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x19, 0x74, 0x6f, 0x75, 0x72, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x69, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x63, 0x0a, 0x19, 0x74, 0x6f, 0x75, 0x72,
	0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x16, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x21, 0x0a,
	0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x22, 0x6a, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x1b, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x69, 0x64, 0x73, 0x22, 0x87, 0x01, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x65, 0x0a, 0x1a, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x17, 0x74,
	0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x6a, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x1a, 0x74, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x69,
	0x64, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x59, 0x0a, 0x15, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x6f,
	0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5d, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x19, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x16, 0x74, 0x6f, 0x75, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64,
	0x22, 0x79, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x59, 0x0a, 0x15, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x10, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x16, 0x74, 0x6f, 0x75, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x74, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x60, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x1a, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x17, 0x74,
	0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x64, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x19, 0x74, 0x6f, 0x75, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x16,
	0x74, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x66, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x1a, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x17,
	0x74, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x6e, 0x0a, 0x12, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x2e, 0x53, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x77,
	0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x1a,
	0x68, 0x0a, 0x0a, 0x53, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a,
	0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x25, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x19, 0x74, 0x6f, 0x75,
	0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x16, 0x74, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x22, 0xb7, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x11,
	0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x75,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x57, 0x65, 0x65, 0x6b,
	0x73, 0x49, 0x6e, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x12, 0x74,
	0x6f, 0x75, 0x72, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x57,
	0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x10, 0x74, 0x6f, 0x75, 0x72,
	0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xcc, 0x02, 0x0a,
	0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x66, 0x6d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x1f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x18, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x66,
	0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x66, 0x6d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73,
	0x22, 0x9b, 0x04, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x11,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a,
	0x18, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x54, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x6b, 0x69, 0x70,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3e,
	0x0a, 0x1c, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x61, 0x6d,
	0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53,
	0x61, 0x6d, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x48,
	0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x22, 0x8d, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x17, 0x77, 0x66,
	0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x77, 0x66, 0x6d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x2e, 0x0a, 0x14, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69,
	0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x54, 0x6f, 0x41, 0x64, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22,
	0x99, 0x01, 0x0a, 0x09, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x67, 0x62, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b,
	0x72, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x57, 0x46, 0x4d, 0x41, 0x64, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x1e,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x57, 0x46, 0x4d, 0x41, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x67, 0x0a, 0x1d, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x3a,
	0x02, 0x18, 0x01, 0x22, 0x25, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x24, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x22, 0xc9, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x66,
	0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x02, 0x0a,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x66, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x1b, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x18, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x1a, 0x61, 0x0a, 0x10, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x29, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x67, 0x62, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x72, 0x67,
	0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x2a, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x2a, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x7e, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x22, 0x67, 0x0a, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52,
	0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2c, 0x0a,
	0x2a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x56, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x17,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x66, 0x6d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x4f, 0x66, 0x66, 0x22, 0x75, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01,
	0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x22, 0x76, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5d, 0x0a, 0x20,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x21, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x51, 0x0a, 0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xcf, 0x02, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x14, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x76, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a,
	0x1f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x20, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x67, 0x62, 0x61,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52,
	0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22,
	0x41, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x67,
	0x62, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x72, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x22, 0x4b, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x4c, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x40, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0d, 0x72, 0x67, 0x62, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x72, 0x67, 0x62, 0x61,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41,
	0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x2d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x25, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x21, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x2c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x13, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2f, 0x0a, 0x2d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x31,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x6d, 0x0a, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0x95, 0x01, 0x0a, 0x32, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x2b, 0x61, 0x64, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x26, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x31, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6d,
	0x0a, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x34, 0x0a,
	0x32, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64,
	0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x2b, 0x61, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x26, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x32, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2d, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x8f, 0x01, 0x0a, 0x2c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5f, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x22, 0x64, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x72, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x1e, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x1b,
	0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x26, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c,
	0x65, 0x22, 0x29, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x0a, 0x2c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x06,
	0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x2d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x25, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x21, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x2c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x22, 0x2f, 0x0a, 0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x84, 0x01, 0x0a, 0x2c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x54, 0x0a, 0x25, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x21, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x2d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x25, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x66, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x1f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x22, 0x5d, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x17, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x14, 0x61, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x56, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a,
	0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x06, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x1e, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x1a, 0x61, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41,
	0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22,
	0x28, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x25, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x1e, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x1a,
	0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x26, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x22, 0x5c, 0x0a, 0x17, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x64,
	0x0a, 0x18, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x1e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x22, 0x76, 0x0a, 0x1f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd4, 0x01,
	0x0a, 0x1f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x4f, 0x66, 0x66, 0x22, 0x75, 0x0a, 0x20, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x1f, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x20, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a,
	0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0xf9, 0xcc, 0x02, 0x0a, 0x03, 0x57, 0x46, 0x4d, 0x12, 0xcb, 0x01, 0x0a, 0x19, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x45, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0,
	0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x65, 0x74, 0x75, 0x70, 0x12, 0xce, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6d, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6d, 0x6f, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65,
	0x6d, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x64, 0x65, 0x6d, 0x6f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d,
	0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xa6, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a,
	0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xda, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x4b, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a,
	0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x0a,
	0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x67, 0x65, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0xaa, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x79,
	0x6e, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8,
	0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xd2, 0x01,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x49, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01,
	0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x61, 0x73, 0x74, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x64, 0x61,
	0x74, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x42, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22,
	0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x48, 0xba, 0xb8, 0x91, 0x02, 0x0a,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30,
	0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x63, 0x61, 0x63, 0x68, 0x65, 0x69, 0x6e, 0x66, 0x6f,
	0x88, 0x02, 0x01, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01,
	0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x64, 0x61,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0xc1, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x64, 0x61, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x36, 0xba, 0xb8,
	0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0xf8, 0x01, 0x0a, 0x27, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x3c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x51, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x3a, 0x01,
	0x2a, 0x22, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x66, 0x6f, 0x72,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x88, 0x02, 0x01, 0x12,
	0xb9, 0x01, 0x0a, 0x18, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22,
	0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xe0, 0x01, 0x0a, 0x21,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x22, 0x4b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x88, 0x02, 0x01, 0x12, 0x81,
	0x02, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x3f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x51, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x41, 0x3a, 0x01, 0x2a, 0x22, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0xf0, 0x01, 0x0a, 0x25, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x22, 0x4f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x88, 0x02, 0x01, 0x12, 0xba, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x43, 0xba,
	0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0xba, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x43, 0xba, 0xb8, 0x91, 0x02,
	0x0a, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0xb6, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x42, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xea, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x38, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x4f, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x3a, 0x01, 0x2a, 0x22, 0x35,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x73, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x64,
	0x61, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x6f, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x74, 0x6f, 0x70, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x67, 0x65, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xc4, 0x01, 0x0a, 0x1e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0x45, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x62, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x30, 0x01, 0x12, 0xf7, 0x01, 0x0a,
	0x27, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x4e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x3a, 0x01, 0x2a, 0x22, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x62, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x77, 0x69, 0x74, 0x68, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x30, 0x01, 0x12, 0xad, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a,
	0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xb5,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x22, 0x4e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x22, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x66, 0x6f,
	0x72, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x88, 0x02, 0x01,
	0x30, 0x01, 0x12, 0xa9, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x3c,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c,
	0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x30, 0x01, 0x12, 0xbe,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x56, 0x32, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x76, 0x32, 0x12,
	0xcd, 0x01, 0x0a, 0x21, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0x48, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x62, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x30, 0x01, 0x12,
	0x83, 0x02, 0x0a, 0x2a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x51, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x41, 0x3a, 0x01, 0x2a, 0x22, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x62, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x77, 0x69, 0x74, 0x68, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x30, 0x01, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x61, 0x6c,
	0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x2d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01,
	0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x72, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0xb5, 0x01,
	0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x66,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x73, 0x12, 0xb5, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x2c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0xed, 0x01, 0x0a, 0x25, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x4c, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a,
	0x22, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x61, 0x6c, 0x6c, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x44, 0x4f, 0x57, 0x41, 0x6e, 0x64, 0x4d, 0x4f, 0x59, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x4f, 0x57,
	0x41, 0x6e, 0x64, 0x4d, 0x4f, 0x59, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x4f, 0x57, 0x41, 0x6e, 0x64,
	0x4d, 0x4f, 0x59, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x64, 0x6f, 0x77, 0x61,
	0x6e, 0x64, 0x6d, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x8e, 0x02,
	0x0a, 0x2c, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x41,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x41, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x58, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x3a, 0x01, 0x2a, 0x22, 0x3e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x64, 0x61, 0x74, 0x61, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x66,
	0x6f, 0x72, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x92,
	0x02, 0x0a, 0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x55, 0x73, 0x69,
	0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x42, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x55, 0x73,
	0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x1a, 0x42, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x59, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x3a,
	0x01, 0x2a, 0x22, 0x3f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x64,
	0x61, 0x74, 0x61, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x99, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0x37,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x27,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x9d, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0x38, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x9c, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xac,
	0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69, 0x64, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x62, 0x79, 0x73, 0x69, 0x64, 0x12, 0xa9, 0x01,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01,
	0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x72, 0x75, 0x6c, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x72, 0x75, 0x6c, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x72, 0x75, 0x6c,
	0x65, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x6e, 0x6f, 0x6e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22,
	0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x6e, 0x6f, 0x6e, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0xb6, 0x01, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x42,
	0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xdd, 0x0b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x6e, 0x6f, 0x6e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x35,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x6e, 0x6f, 0x6e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xdd,
	0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x36, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x48, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0xc2,
	0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0xca, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xdd, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01,
	0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x6f, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0xea, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x49, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x70, 0x61, 0x75, 0x73, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0xea, 0x01,
	0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x49, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0xa2, 0x02, 0x0a, 0x30, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x49, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x46,
	0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01, 0x2a, 0x22, 0x42, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0xd2, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x4f, 0x66, 0x66, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x43, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x66, 0x66, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0xbe, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x30, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xc2, 0x01,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x46,
	0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x46, 0x4d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x35, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x77, 0x66,
	0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x46, 0x4d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x46,
	0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x77, 0x66, 0x6d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x65, 0x64, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x57,
	0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a,
	0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65,
	0x64, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x12,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x46,
	0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a,
	0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x69, 0x64, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x77, 0x66,
	0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xed, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x3a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x4c, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22, 0x37,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x77, 0x69, 0x74, 0x68, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x70, 0x79,
	0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x57, 0x46, 0x4d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x57, 0x46, 0x4d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x63, 0x6f, 0x70, 0x79, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0xce, 0x01, 0x0a,
	0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x66, 0x72, 0x6f,
	0x6d, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0xad, 0x01,
	0x0a, 0x15, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0xa5, 0x01,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xb9, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69, 0x64, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x42, 0x79, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x42,
	0x79, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x68, 0x69, 0x66, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x62, 0x79, 0x73, 0x69, 0x64, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x1d, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6c,
	0x65, 0x12, 0xa4, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a,
	0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6c, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6c, 0x65,
	0x12, 0xb1, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a,
	0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xa5, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x67, 0x65, 0x74, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x62, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x73, 0x12, 0x86, 0x02, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x70, 0x73, 0x12, 0x42, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x3a, 0x01, 0x2a,
	0x22, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x6f, 0x70, 0x65,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x12, 0xd1, 0x01,
	0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x45, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22,
	0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0xd1, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x45,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35,
	0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xd1, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52,
	0x65, 0x73, 0x22, 0x45, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x12, 0xdd, 0x01,
	0x0a, 0x21, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x6e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x36, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x22, 0x48, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x6e, 0x6f, 0x6e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb9, 0x01,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22,
	0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x43, 0x6f,
	0x70, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73,
	0x22, 0x33, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0xd5, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x46, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x77, 0x69, 0x74, 0x68, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0xb1, 0x01,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52,
	0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22,
	0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x6f,
	0x64, 0x65, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0xb1, 0x01,
	0x0a, 0x16, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0xdd, 0x01,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x36, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x48, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0xcd, 0x01,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x67, 0x65, 0x74, 0x64, 0x72, 0x61, 0x66, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0xa5, 0x01,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x72, 0x61, 0x66, 0x74, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0xa1, 0x01,
	0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x64, 0x72, 0x61, 0x66, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0xae, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x6f, 0x6c,
	0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x70,
	0x6f, 0x6c, 0x6c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0xb6, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a,
	0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x14,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22,
	0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x64, 0x72, 0x61, 0x66, 0x74, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x27,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x37,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x64, 0x72, 0x61, 0x66, 0x74, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x27,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0d,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x34, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x72, 0x61, 0x66, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69, 0x64, 0x12,
	0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69, 0x64, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a,
	0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x62, 0x79, 0x73, 0x69, 0x64, 0x12, 0xb1, 0x01, 0x0a, 0x16,
	0x43, 0x6f, 0x70, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x74, 0x6f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0xa5, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a,
	0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56,
	0x32, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x76, 0x32, 0x12, 0xde, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x46, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x77, 0x69, 0x74, 0x68,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xa1, 0x01, 0x0a,
	0x12, 0x53, 0x77, 0x61, 0x70, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x53, 0x77, 0x61, 0x70, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x73, 0x77,
	0x61, 0x70, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0xa5, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01,
	0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x56, 0x32, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x52, 0x65, 0x71, 0x1a, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22,
	0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x76, 0x32, 0x12, 0xde, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x46, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x77, 0x69, 0x74,
	0x68, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x1c, 0x43, 0x6f,
	0x70, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x54, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x54, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x43, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x46,
	0x6f, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x69, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x44, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x69, 0x64, 0x73, 0x66, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0xe2, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x46,
	0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x69, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x46, 0x6f,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x69, 0x64, 0x73, 0x66,
	0x6f, 0x72, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0xe9, 0x01, 0x0a, 0x24, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x69, 0x64, 0x73, 0x12, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x39,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x42, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22, 0x4b, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x22, 0x36,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x62, 0x79, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x69, 0x64, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x73, 0x65, 0x74, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0xa5,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22,
	0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a,
	0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0xc1, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a,
	0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0xc1,
	0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x41, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x73, 0x65, 0x74, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0xad, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x38, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01,
	0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x43, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a,
	0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x74, 0x6f, 0x75, 0x72,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x77, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22,
	0x35, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x77, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x38, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01,
	0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74, 0x6f, 0x75, 0x72, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xad, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65,
	0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x75, 0x72, 0x77, 0x65, 0x65, 0x6b, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12,
	0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x74, 0x6f, 0x75, 0x72, 0x77, 0x65, 0x65, 0x6b, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74, 0x6f, 0x75, 0x72, 0x77, 0x65, 0x65, 0x6b, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74,
	0x6f, 0x75, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xce, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x22, 0x45, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x6f, 0x75, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x43,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33,
	0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x74, 0x6f, 0x75, 0x72, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0xd1, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x45, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74,
	0x6f, 0x75, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x22, 0x43,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33,
	0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x75,
	0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xc9, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x22, 0x43, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22,
	0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0xc5, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12,
	0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x42, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x74, 0x6f, 0x75, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x74, 0x6f, 0x75, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x75, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x75, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x74,
	0x6f, 0x75, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x74, 0x6f, 0x75, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xe1, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x49, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74,
	0x6f, 0x75, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x20,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x47,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37,
	0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x74, 0x6f, 0x75, 0x72, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x77, 0x66,
	0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xe1, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x49, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74,
	0x6f, 0x75, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x75, 0x72, 0x77, 0x65, 0x65, 0x6b, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x66, 0x6f, 0x72, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xb4, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x1a,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01,
	0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x6f, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x88, 0x02, 0x01, 0x12, 0xb5,
	0x01, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x31, 0x12, 0x2b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6f, 0x6e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x76, 0x31, 0x12, 0xc5, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x66, 0x72, 0x6f, 0x6d, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xc2,
	0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xbe, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc6, 0x01, 0x0a, 0x19, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a,
	0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc6, 0x01,
	0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc2, 0x01, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22,
	0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6c, 0x65,
	0x61, 0x76, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc4, 0x01, 0x0a, 0x16,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x57, 0x46, 0x4d, 0x41, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x57, 0x46, 0x4d, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x57, 0x46, 0x4d, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x0f,
	0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x66, 0x6d, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0xc3, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x61, 0x79, 0x12, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0xba,
	0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03,
	0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x66,
	0x6f, 0x72, 0x64, 0x61, 0x79, 0x88, 0x02, 0x01, 0x12, 0xdc, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a,
	0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0xcc, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0xba, 0xb8, 0x91,
	0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0xf4, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a,
	0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xf0, 0x01,
	0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x73, 0x12, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0xba, 0xb8,
	0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08,
	0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73,
	0x12, 0xf4, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x53, 0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03,
	0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01,
	0x2a, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xa8, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf,
	0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22,
	0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x67, 0x62, 0x61, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0xa4, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x67, 0x62, 0x61, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x67, 0x62,
	0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a,
	0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x72,
	0x67, 0x62, 0x61, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03,
	0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01,
	0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x67, 0x62, 0x61, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0xa8, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x67, 0x62, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x67, 0x62, 0x61,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0xba,
	0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03,
	0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x67, 0x62, 0x61, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x80, 0x02, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0xba, 0xb8, 0x91, 0x02,
	0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x75, 0x6c, 0x65,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x80, 0x02, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0xba,
	0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03,
	0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22, 0x37, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x75, 0x6c, 0x65, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x94, 0x02, 0x0a, 0x2a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x43, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5b, 0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b,
	0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x01, 0x2a, 0x22, 0x3c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x72, 0x75, 0x6c, 0x65, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x94, 0x02, 0x0a,
	0x2a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x43, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x44, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08,
	0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x41, 0x3a, 0x01, 0x2a, 0x22, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61,
	0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x94, 0x02, 0x0a, 0x2a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64,
	0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x43, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0xba,
	0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03,
	0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x01, 0x2a, 0x22, 0x3c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x75, 0x6c, 0x65, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0xfc, 0x01, 0x0a, 0x24, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x55, 0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03,
	0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01,
	0x2a, 0x22, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xe8, 0x01, 0x0a, 0x1f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x50, 0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03,
	0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01,
	0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x64, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x72, 0x75, 0x6c, 0x65, 0x12, 0xe8, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0xba,
	0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03,
	0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x72, 0x75, 0x6c, 0x65, 0x12,
	0x80, 0x02, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0xba, 0xb8, 0x91, 0x02,
	0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x72, 0x75, 0x6c, 0x65, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x80, 0x02, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0xba,
	0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03,
	0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22, 0x37, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x72, 0x75, 0x6c, 0x65, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x80, 0x02, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x3e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x56, 0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf,
	0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22,
	0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x72, 0x75,
	0x6c, 0x65, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0xe4, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f,
	0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a,
	0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0xcc, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x49, 0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a,
	0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a,
	0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x64, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6c, 0x65, 0x12, 0xcc,
	0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x49, 0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03,
	0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01,
	0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x64, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6c, 0x65, 0x12, 0xe4, 0x01,
	0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4f, 0xba, 0xb8, 0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a,
	0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a,
	0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x64, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6c, 0x65, 0x63, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0xe4, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0xba, 0xb8, 0x91, 0x02,
	0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08, 0xe0, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x72, 0x75, 0x6c, 0x65, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0xba, 0xb8,
	0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08,
	0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xe4, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0xba, 0xb8,
	0x91, 0x02, 0x0f, 0x0a, 0x03, 0x08, 0xde, 0x0b, 0x0a, 0x03, 0x08, 0xdf, 0x0b, 0x0a, 0x03, 0x08,
	0xe0, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x72, 0x75, 0x6c, 0x65, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0xa2, 0x01,
	0x0a, 0x10, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdd, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x65, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x17, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdd, 0x0b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x6c, 0x69, 0x73, 0x74, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x18, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdd, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc2, 0x01, 0x0a, 0x18, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdd, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01,
	0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xaf, 0x01,
	0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x42, 0x08, 0x57, 0x66, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0xa2,
	0x02, 0x03, 0x41, 0x56, 0x57, 0xaa, 0x02, 0x10, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x66, 0x6d, 0xca, 0x02, 0x10, 0x41, 0x70, 0x69, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x57, 0x66, 0x6d, 0xe2, 0x02, 0x1c, 0x41, 0x70,
	0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x57, 0x66, 0x6d, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x41, 0x70, 0x69,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3a, 0x3a, 0x57, 0x66, 0x6d, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1alpha1_wfm_wfm_proto_rawDescOnce sync.Once
	file_api_v1alpha1_wfm_wfm_proto_rawDescData = file_api_v1alpha1_wfm_wfm_proto_rawDesc
)

func file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_wfm_wfm_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_wfm_wfm_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1alpha1_wfm_wfm_proto_rawDescData)
	})
	return file_api_v1alpha1_wfm_wfm_proto_rawDescData
}

var file_api_v1alpha1_wfm_wfm_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1alpha1_wfm_wfm_proto_msgTypes = make([]protoimpl.MessageInfo, 508)
var file_api_v1alpha1_wfm_wfm_proto_goTypes = []any{
	(DeleteForecastIntervalsReq_ForecastIntervalDeleteType)(0), // 0: api.v1alpha1.wfm.DeleteForecastIntervalsReq.ForecastIntervalDeleteType
	(*PerformInitialClientSetupRequest)(nil),                   // 1: api.v1alpha1.wfm.PerformInitialClientSetupRequest
	(*PerformInitialClientSetupResponse)(nil),                  // 2: api.v1alpha1.wfm.PerformInitialClientSetupResponse
	(*CreateInitialDemoActivitiesRequest)(nil),                 // 3: api.v1alpha1.wfm.CreateInitialDemoActivitiesRequest
	(*CreateInitialDemoActivitiesResponse)(nil),                // 4: api.v1alpha1.wfm.CreateInitialDemoActivitiesResponse
	(*Skill)(nil),                                                    // 5: api.v1alpha1.wfm.Skill
	(*SkillProfile)(nil),                                             // 6: api.v1alpha1.wfm.SkillProfile
	(*SkillProfileGroup)(nil),                                        // 7: api.v1alpha1.wfm.SkillProfileGroup
	(*ListSkillProfilesReq)(nil),                                     // 8: api.v1alpha1.wfm.ListSkillProfilesReq
	(*ListSkillProfilesRes)(nil),                                     // 9: api.v1alpha1.wfm.ListSkillProfilesRes
	(*UpdateSkillProfileReq)(nil),                                    // 10: api.v1alpha1.wfm.UpdateSkillProfileReq
	(*UpdateSkillProfileRes)(nil),                                    // 11: api.v1alpha1.wfm.UpdateSkillProfileRes
	(*UpdateSkillProfileProficienciesReq)(nil),                       // 12: api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq
	(*UpdateSkillProfileProficienciesRes)(nil),                       // 13: api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes
	(*GetSkillProfileReq)(nil),                                       // 14: api.v1alpha1.wfm.GetSkillProfileReq
	(*GetSkillProfileRes)(nil),                                       // 15: api.v1alpha1.wfm.GetSkillProfileRes
	(*ResyncSkillProfilesReq)(nil),                                   // 16: api.v1alpha1.wfm.ResyncSkillProfilesReq
	(*ResyncSkillProfilesRes)(nil),                                   // 17: api.v1alpha1.wfm.ResyncSkillProfilesRes
	(*GetLastSkillProfileResyncDateReq)(nil),                         // 18: api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq
	(*GetLastSkillProfileResyncDateRes)(nil),                         // 19: api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes
	(*UpsertForecastingParametersReq)(nil),                           // 20: api.v1alpha1.wfm.UpsertForecastingParametersReq
	(*UpsertForecastingParametersRes)(nil),                           // 21: api.v1alpha1.wfm.UpsertForecastingParametersRes
	(*GetForecastingParametersReq)(nil),                              // 22: api.v1alpha1.wfm.GetForecastingParametersReq
	(*GetForecastingParametersRes)(nil),                              // 23: api.v1alpha1.wfm.GetForecastingParametersRes
	(*HistoricalDataInterval)(nil),                                   // 24: api.v1alpha1.wfm.HistoricalDataInterval
	(*GetClientHistoryCacheInfoReq)(nil),                             // 25: api.v1alpha1.wfm.GetClientHistoryCacheInfoReq
	(*GetClientHistoryCacheInfoRes)(nil),                             // 26: api.v1alpha1.wfm.GetClientHistoryCacheInfoRes
	(*ListHistoricalDataReq)(nil),                                    // 27: api.v1alpha1.wfm.ListHistoricalDataReq
	(*ListHistoricalDataRes)(nil),                                    // 28: api.v1alpha1.wfm.ListHistoricalDataRes
	(*UpsertHistoricalDataDeltaReq)(nil),                             // 29: api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq
	(*UpsertHistoricalDataDeltaRes)(nil),                             // 30: api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes
	(*UpsertHistoricalDataDeltasReq)(nil),                            // 31: api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq
	(*UpsertHistoricalDataDeltasRes)(nil),                            // 32: api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes
	(*ListSkillsReq)(nil),                                            // 33: api.v1alpha1.wfm.ListSkillsReq
	(*ListSkillsRes)(nil),                                            // 34: api.v1alpha1.wfm.ListSkillsRes
	(*CallProfileTemplate)(nil),                                      // 35: api.v1alpha1.wfm.CallProfileTemplate
	(*BuildCallProfileTemplateForSkillProfileReq)(nil),               // 36: api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq
	(*BuildCallProfileTemplateForSkillProfileRes)(nil),               // 37: api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes
	(*BuildCallProfileTemplateReq)(nil),                              // 38: api.v1alpha1.wfm.BuildCallProfileTemplateReq
	(*BuildCallProfileTemplateRes)(nil),                              // 39: api.v1alpha1.wfm.BuildCallProfileTemplateRes
	(*CreateInactiveSkillProfileMappingReq)(nil),                     // 40: api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq
	(*CreateInactiveSkillProfileMappingRes)(nil),                     // 41: api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes
	(*GetAvailableRegressionForecasterModelTypesReq)(nil),            // 42: api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq
	(*GetAvailableRegressionForecasterModelTypesRes)(nil),            // 43: api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes
	(*DisconnectInactiveSkillProfileMappingReq)(nil),                 // 44: api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq
	(*DisconnectInactiveSkillProfileMappingRes)(nil),                 // 45: api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes
	(*CreateSkillProfileGroupReq)(nil),                               // 46: api.v1alpha1.wfm.CreateSkillProfileGroupReq
	(*CreateSkillProfileGroupRes)(nil),                               // 47: api.v1alpha1.wfm.CreateSkillProfileGroupRes
	(*UpdateSkillProfileGroupReq)(nil),                               // 48: api.v1alpha1.wfm.UpdateSkillProfileGroupReq
	(*UpdateSkillProfileGroupRes)(nil),                               // 49: api.v1alpha1.wfm.UpdateSkillProfileGroupRes
	(*ListSkillProfileGroupsReq)(nil),                                // 50: api.v1alpha1.wfm.ListSkillProfileGroupsReq
	(*ListSkillProfileGroupsRes)(nil),                                // 51: api.v1alpha1.wfm.ListSkillProfileGroupsRes
	(*UpdateSkillProfileGroupAssociationsReq)(nil),                   // 52: api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsReq
	(*UpdateSkillProfileGroupAssociationsRes)(nil),                   // 53: api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsRes
	(*DeleteHistoricalDataDeltasReq)(nil),                            // 54: api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq
	(*DeleteHistoricalDataDeltasRes)(nil),                            // 55: api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes
	(*ListTopSkillProfilesReq)(nil),                                  // 56: api.v1alpha1.wfm.ListTopSkillProfilesReq
	(*ListTopSkillProfilesRes)(nil),                                  // 57: api.v1alpha1.wfm.ListTopSkillProfilesRes
	(*GetSkillProfilesCountReq)(nil),                                 // 58: api.v1alpha1.wfm.GetSkillProfilesCountReq
	(*GetSkillProfilesCountRes)(nil),                                 // 59: api.v1alpha1.wfm.GetSkillProfilesCountRes
	(*BuildProfileForecastByIntervalReq)(nil),                        // 60: api.v1alpha1.wfm.BuildProfileForecastByIntervalReq
	(*CallDataByInterval)(nil),                                       // 61: api.v1alpha1.wfm.CallDataByInterval
	(*BuildProfileForecastByIntervalWithStatsReq)(nil),               // 62: api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq
	(*BuildProfileForecastByIntervalWithStatsRes)(nil),               // 63: api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes
	(*UpsertProfileForecastReq)(nil),                                 // 64: api.v1alpha1.wfm.UpsertProfileForecastReq
	(*UpsertProfileForecastRes)(nil),                                 // 65: api.v1alpha1.wfm.UpsertProfileForecastRes
	(*CreateCallProfileTemplateReq)(nil),                             // 66: api.v1alpha1.wfm.CreateCallProfileTemplateReq
	(*CreateCallProfileTemplateRes)(nil),                             // 67: api.v1alpha1.wfm.CreateCallProfileTemplateRes
	(*DeleteCallProfileTemplateReq)(nil),                             // 68: api.v1alpha1.wfm.DeleteCallProfileTemplateReq
	(*DeleteCallProfileTemplateRes)(nil),                             // 69: api.v1alpha1.wfm.DeleteCallProfileTemplateRes
	(*RegressionTemplate)(nil),                                       // 70: api.v1alpha1.wfm.RegressionTemplate
	(*CreateRegressionTemplateReq)(nil),                              // 71: api.v1alpha1.wfm.CreateRegressionTemplateReq
	(*CreateRegressionTemplateRes)(nil),                              // 72: api.v1alpha1.wfm.CreateRegressionTemplateRes
	(*DeleteRegressionTemplateReq)(nil),                              // 73: api.v1alpha1.wfm.DeleteRegressionTemplateReq
	(*DeleteRegressionTemplateRes)(nil),                              // 74: api.v1alpha1.wfm.DeleteRegressionTemplateRes
	(*ListRegressionTemplatesReq)(nil),                               // 75: api.v1alpha1.wfm.ListRegressionTemplatesReq
	(*ListRegressionTemplatesRes)(nil),                               // 76: api.v1alpha1.wfm.ListRegressionTemplatesRes
	(*BuildRegressionForecastByIntervalReq)(nil),                     // 77: api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq
	(*BuildRegressionForecastByIntervalWithStatsReq)(nil),            // 78: api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq
	(*GetForecastStatisticsRes)(nil),                                 // 79: api.v1alpha1.wfm.GetForecastStatisticsRes
	(*BuildRegressionForecastByIntervalWithStatsRes)(nil),            // 80: api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes
	(*ListCallProfileTemplatesReq)(nil),                              // 81: api.v1alpha1.wfm.ListCallProfileTemplatesReq
	(*ListCallProfileTemplatesRes)(nil),                              // 82: api.v1alpha1.wfm.ListCallProfileTemplatesRes
	(*ListForecastIntervalsForSkillProfileReq)(nil),                  // 83: api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq
	(*ListForecastIntervalsReq)(nil),                                 // 84: api.v1alpha1.wfm.ListForecastIntervalsReq
	(*ListForecastIntervalsV2Request)(nil),                           // 85: api.v1alpha1.wfm.ListForecastIntervalsV2Request
	(*ListForecastIntervalsV2Response)(nil),                          // 86: api.v1alpha1.wfm.ListForecastIntervalsV2Response
	(*UpsertRegressionForecastReq)(nil),                              // 87: api.v1alpha1.wfm.UpsertRegressionForecastReq
	(*UpsertRegressionForecastRes)(nil),                              // 88: api.v1alpha1.wfm.UpsertRegressionForecastRes
	(*UpsertForecastDataDeltaReq)(nil),                               // 89: api.v1alpha1.wfm.UpsertForecastDataDeltaReq
	(*UpsertForecastDataDeltaRes)(nil),                               // 90: api.v1alpha1.wfm.UpsertForecastDataDeltaRes
	(*UpsertForecastDataDeltasReq)(nil),                              // 91: api.v1alpha1.wfm.UpsertForecastDataDeltasReq
	(*UpsertForecastDataDeltasRes)(nil),                              // 92: api.v1alpha1.wfm.UpsertForecastDataDeltasRes
	(*DeleteForecastIntervalsReq)(nil),                               // 93: api.v1alpha1.wfm.DeleteForecastIntervalsReq
	(*DeleteForecastIntervalsRes)(nil),                               // 94: api.v1alpha1.wfm.DeleteForecastIntervalsRes
	(*ListHistoricalDataForAllSkillProfilesReq)(nil),                 // 95: api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq
	(*ListHistoricalDataForAllSkillProfilesRes)(nil),                 // 96: api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes
	(*BuildDOWAndMOYProfilesReq)(nil),                                // 97: api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq
	(*BuildDOWAndMOYProfilesRes)(nil),                                // 98: api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes
	(*CalculateTrainingDataAveragesForSkillProfileReq)(nil),          // 99: api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq
	(*CalculateTrainingDataAveragesForSkillProfileRes)(nil),          // 100: api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes
	(*UpdateSkillProfileAveragesUsingHistoricalDataReq)(nil),         // 101: api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq
	(*UpdateSkillProfileAveragesUsingHistoricalDataRes)(nil),         // 102: api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes
	(*UserCapability)(nil),                                           // 103: api.v1alpha1.wfm.UserCapability
	(*CallCenterNode)(nil),                                           // 104: api.v1alpha1.wfm.CallCenterNode
	(*UpdateCallCenterNodeReq)(nil),                                  // 105: api.v1alpha1.wfm.UpdateCallCenterNodeReq
	(*UpdateCallCenterNodeRes)(nil),                                  // 106: api.v1alpha1.wfm.UpdateCallCenterNodeRes
	(*ClientNode)(nil),                                               // 107: api.v1alpha1.wfm.ClientNode
	(*CreateClientNodeReq)(nil),                                      // 108: api.v1alpha1.wfm.CreateClientNodeReq
	(*CreateClientNodeRes)(nil),                                      // 109: api.v1alpha1.wfm.CreateClientNodeRes
	(*UpdateClientNodeReq)(nil),                                      // 110: api.v1alpha1.wfm.UpdateClientNodeReq
	(*UpdateClientNodeRes)(nil),                                      // 111: api.v1alpha1.wfm.UpdateClientNodeRes
	(*LocationNode)(nil),                                             // 112: api.v1alpha1.wfm.LocationNode
	(*CreateLocationNodeReq)(nil),                                    // 113: api.v1alpha1.wfm.CreateLocationNodeReq
	(*CreateLocationNodeRes)(nil),                                    // 114: api.v1alpha1.wfm.CreateLocationNodeRes
	(*UpdateLocationNodeReq)(nil),                                    // 115: api.v1alpha1.wfm.UpdateLocationNodeReq
	(*UpdateLocationNodeRes)(nil),                                    // 116: api.v1alpha1.wfm.UpdateLocationNodeRes
	(*ProgramNode)(nil),                                              // 117: api.v1alpha1.wfm.ProgramNode
	(*CreateProgramNodeReq)(nil),                                     // 118: api.v1alpha1.wfm.CreateProgramNodeReq
	(*CreateProgramNodeRes)(nil),                                     // 119: api.v1alpha1.wfm.CreateProgramNodeRes
	(*UpdateProgramNodeReq)(nil),                                     // 120: api.v1alpha1.wfm.UpdateProgramNodeReq
	(*UpdateProgramNodeRes)(nil),                                     // 121: api.v1alpha1.wfm.UpdateProgramNodeRes
	(*ListProgramNodesBySidReq)(nil),                                 // 122: api.v1alpha1.wfm.ListProgramNodesBySidReq
	(*ListProgramNodesBySidRes)(nil),                                 // 123: api.v1alpha1.wfm.ListProgramNodesBySidRes
	(*ParentEntity)(nil),                                             // 124: api.v1alpha1.wfm.ParentEntity
	(*ConstraintRule)(nil),                                           // 125: api.v1alpha1.wfm.ConstraintRule
	(*CreateConstraintRuleReq)(nil),                                  // 126: api.v1alpha1.wfm.CreateConstraintRuleReq
	(*CreateConstraintRuleRes)(nil),                                  // 127: api.v1alpha1.wfm.CreateConstraintRuleRes
	(*UpdateConstraintRuleReq)(nil),                                  // 128: api.v1alpha1.wfm.UpdateConstraintRuleReq
	(*UpdateConstraintRuleRes)(nil),                                  // 129: api.v1alpha1.wfm.UpdateConstraintRuleRes
	(*DeleteConstraintRuleReq)(nil),                                  // 130: api.v1alpha1.wfm.DeleteConstraintRuleReq
	(*DeleteConstraintRuleRes)(nil),                                  // 131: api.v1alpha1.wfm.DeleteConstraintRuleRes
	(*NonSkillActivity)(nil),                                         // 132: api.v1alpha1.wfm.NonSkillActivity
	(*CreateNonSkillActivityReq)(nil),                                // 133: api.v1alpha1.wfm.CreateNonSkillActivityReq
	(*CreateNonSkillActivityRes)(nil),                                // 134: api.v1alpha1.wfm.CreateNonSkillActivityRes
	(*UpdateNonSkillActivityReq)(nil),                                // 135: api.v1alpha1.wfm.UpdateNonSkillActivityReq
	(*UpdateNonSkillActivityRes)(nil),                                // 136: api.v1alpha1.wfm.UpdateNonSkillActivityRes
	(*ListNonSkillActivitiesReq)(nil),                                // 137: api.v1alpha1.wfm.ListNonSkillActivitiesReq
	(*ListNonSkillActivitiesRes)(nil),                                // 138: api.v1alpha1.wfm.ListNonSkillActivitiesRes
	(*ListNonSkillActivityAssociationsReq)(nil),                      // 139: api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq
	(*ListNonSkillActivityAssociationsRes)(nil),                      // 140: api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes
	(*SchedulingActivity)(nil),                                       // 141: api.v1alpha1.wfm.SchedulingActivity
	(*ListCandidateSchedulingActivitiesReq)(nil),                     // 142: api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq
	(*ListCandidateSchedulingActivitiesRes)(nil),                     // 143: api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes
	(*ListSchedulingActivitiesRequest)(nil),                          // 144: api.v1alpha1.wfm.ListSchedulingActivitiesRequest
	(*ListSchedulingActivitiesResponse)(nil),                         // 145: api.v1alpha1.wfm.ListSchedulingActivitiesResponse
	(*GetOnCallSchedulingActivityReq)(nil),                           // 146: api.v1alpha1.wfm.GetOnCallSchedulingActivityReq
	(*GetOnCallSchedulingActivityRes)(nil),                           // 147: api.v1alpha1.wfm.GetOnCallSchedulingActivityRes
	(*CreateSchedulingActivityPauseCodesRequest)(nil),                // 148: api.v1alpha1.wfm.CreateSchedulingActivityPauseCodesRequest
	(*CreateSchedulingActivityPauseCodesResponse)(nil),               // 149: api.v1alpha1.wfm.CreateSchedulingActivityPauseCodesResponse
	(*DeleteSchedulingActivityPauseCodesRequest)(nil),                // 150: api.v1alpha1.wfm.DeleteSchedulingActivityPauseCodesRequest
	(*DeleteSchedulingActivityPauseCodesResponse)(nil),               // 151: api.v1alpha1.wfm.DeleteSchedulingActivityPauseCodesResponse
	(*ListPatternsForSchedulingActivityClassificationsRequest)(nil),  // 152: api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest
	(*ListPatternsForSchedulingActivityClassificationsResponse)(nil), // 153: api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse
	(*GetTimeOffSchedulingActivityRequest)(nil),                      // 154: api.v1alpha1.wfm.GetTimeOffSchedulingActivityRequest
	(*GetTimeOffSchedulingActivityResponse)(nil),                     // 155: api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse
	(*AgentGroup)(nil),                                               // 156: api.v1alpha1.wfm.AgentGroup
	(*CreateAgentGroupReq)(nil),                                      // 157: api.v1alpha1.wfm.CreateAgentGroupReq
	(*CreateAgentGroupRes)(nil),                                      // 158: api.v1alpha1.wfm.CreateAgentGroupRes
	(*ListAgentScheduleGroupsRequest)(nil),                           // 159: api.v1alpha1.wfm.ListAgentScheduleGroupsRequest
	(*ListAgentScheduleGroupsResponse)(nil),                          // 160: api.v1alpha1.wfm.ListAgentScheduleGroupsResponse
	(*UpdateAgentGroupReq)(nil),                                      // 161: api.v1alpha1.wfm.UpdateAgentGroupReq
	(*UpdateAgentGroupRes)(nil),                                      // 162: api.v1alpha1.wfm.UpdateAgentGroupRes
	(*WFMAgent)(nil),                                                 // 163: api.v1alpha1.wfm.WFMAgent
	(*CreateUnassignedWFMAgentRequest)(nil),                          // 164: api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest
	(*CreateUnassignedWFMAgentResponse)(nil),                         // 165: api.v1alpha1.wfm.CreateUnassignedWFMAgentResponse
	(*UpdateWFMAgentReq)(nil),                                        // 166: api.v1alpha1.wfm.UpdateWFMAgentReq
	(*UpdateWFMAgentRes)(nil),                                        // 167: api.v1alpha1.wfm.UpdateWFMAgentRes
	(*ListAllWFMAgentsReq)(nil),                                      // 168: api.v1alpha1.wfm.ListAllWFMAgentsReq
	(*ListAllWFMAgentsRes)(nil),                                      // 169: api.v1alpha1.wfm.ListAllWFMAgentsRes
	(*ListCandidateWFMAgentsReq)(nil),                                // 170: api.v1alpha1.wfm.ListCandidateWFMAgentsReq
	(*ListCandidateWFMAgentsRes)(nil),                                // 171: api.v1alpha1.wfm.ListCandidateWFMAgentsRes
	(*ListUngroupedWFMAgentsReq)(nil),                                // 172: api.v1alpha1.wfm.ListUngroupedWFMAgentsReq
	(*ListUngroupedWFMAgentsRes)(nil),                                // 173: api.v1alpha1.wfm.ListUngroupedWFMAgentsRes
	(*ListWFMAgentSidsReq)(nil),                                      // 174: api.v1alpha1.wfm.ListWFMAgentSidsReq
	(*ListWFMAgentSidsRes)(nil),                                      // 175: api.v1alpha1.wfm.ListWFMAgentSidsRes
	(*ListUnassignedWFMAgentsRequest)(nil),                           // 176: api.v1alpha1.wfm.ListUnassignedWFMAgentsRequest
	(*ListUnassignedWFMAgentsResponse)(nil),                          // 177: api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse
	(*ListWFMAgentsAssociatedWithAgentGroupReq)(nil),                 // 178: api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq
	(*ListWFMAgentsAssociatedWithAgentGroupRes)(nil),                 // 179: api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes
	(*BuildAgentDiagnosticsReq)(nil),                                 // 180: api.v1alpha1.wfm.BuildAgentDiagnosticsReq
	(*BuildAgentDiagnosticsRes)(nil),                                 // 181: api.v1alpha1.wfm.BuildAgentDiagnosticsRes
	(*CreateWFMAgentMembershipsReq)(nil),                             // 182: api.v1alpha1.wfm.CreateWFMAgentMembershipsReq
	(*CreateWFMAgentMembershipsRes)(nil),                             // 183: api.v1alpha1.wfm.CreateWFMAgentMembershipsRes
	(*CopyWFMAgentMembershipsRequest)(nil),                           // 184: api.v1alpha1.wfm.CopyWFMAgentMembershipsRequest
	(*CopyWFMAgentMembershipsResponse)(nil),                          // 185: api.v1alpha1.wfm.CopyWFMAgentMembershipsResponse
	(*DeleteWFMAgentMembershipsReq)(nil),                             // 186: api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq
	(*DeleteWFMAgentMembershipsRes)(nil),                             // 187: api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes
	(*DeleteWFMAgentsMembershipsReq)(nil),                            // 188: api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq
	(*DeleteWFMAgentsMembershipsRes)(nil),                            // 189: api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes
	(*RemoveAgentFromFutureShiftsRequest)(nil),                       // 190: api.v1alpha1.wfm.RemoveAgentFromFutureShiftsRequest
	(*RemoveAgentFromFutureShiftsResponse)(nil),                      // 191: api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse
	(*DOWPlacement)(nil),                                             // 192: api.v1alpha1.wfm.DOWPlacement
	(*ShiftTemplate)(nil),                                            // 193: api.v1alpha1.wfm.ShiftTemplate
	(*CreateShiftTemplateReq)(nil),                                   // 194: api.v1alpha1.wfm.CreateShiftTemplateReq
	(*CreateShiftTemplateRes)(nil),                                   // 195: api.v1alpha1.wfm.CreateShiftTemplateRes
	(*UpdateShiftTemplateReq)(nil),                                   // 196: api.v1alpha1.wfm.UpdateShiftTemplateReq
	(*UpdateShiftTemplateRes)(nil),                                   // 197: api.v1alpha1.wfm.UpdateShiftTemplateRes
	(*ListShiftTemplatesBySidsReq)(nil),                              // 198: api.v1alpha1.wfm.ListShiftTemplatesBySidsReq
	(*ListShiftTemplatesBySidsRes)(nil),                              // 199: api.v1alpha1.wfm.ListShiftTemplatesBySidsRes
	(*BuildShiftTemplateDiagnosticsReq)(nil),                         // 200: api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq
	(*BuildShiftTemplateDiagnosticsRes)(nil),                         // 201: api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes
	(*PlacementRule)(nil),                                            // 202: api.v1alpha1.wfm.PlacementRule
	(*CreatePlacementRuleReq)(nil),                                   // 203: api.v1alpha1.wfm.CreatePlacementRuleReq
	(*CreatePlacementRuleRes)(nil),                                   // 204: api.v1alpha1.wfm.CreatePlacementRuleRes
	(*UpdatePlacementRuleReq)(nil),                                   // 205: api.v1alpha1.wfm.UpdatePlacementRuleReq
	(*UpdatePlacementRuleRes)(nil),                                   // 206: api.v1alpha1.wfm.UpdatePlacementRuleRes
	(*DeletePlacementRuleReq)(nil),                                   // 207: api.v1alpha1.wfm.DeletePlacementRuleReq
	(*DeletePlacementRuleRes)(nil),                                   // 208: api.v1alpha1.wfm.DeletePlacementRuleRes
	(*DatetimePattern)(nil),                                          // 209: api.v1alpha1.wfm.DatetimePattern
	(*OpenTimesPattern)(nil),                                         // 210: api.v1alpha1.wfm.OpenTimesPattern
	(*CreateOpenTimesPatternReq)(nil),                                // 211: api.v1alpha1.wfm.CreateOpenTimesPatternReq
	(*CreateOpenTimesPatternRes)(nil),                                // 212: api.v1alpha1.wfm.CreateOpenTimesPatternRes
	(*UpdateOpenTimesPatternReq)(nil),                                // 213: api.v1alpha1.wfm.UpdateOpenTimesPatternReq
	(*UpdateOpenTimesPatternRes)(nil),                                // 214: api.v1alpha1.wfm.UpdateOpenTimesPatternRes
	(*DeleteOpenTimesPatternReq)(nil),                                // 215: api.v1alpha1.wfm.DeleteOpenTimesPatternReq
	(*DeleteOpenTimesPatternRes)(nil),                                // 216: api.v1alpha1.wfm.DeleteOpenTimesPatternRes
	(*GetOpenTimesBitmapsReq)(nil),                                   // 217: api.v1alpha1.wfm.GetOpenTimesBitmapsReq
	(*GetOpenTimesBitmapsRes)(nil),                                   // 218: api.v1alpha1.wfm.GetOpenTimesBitmapsRes
	(*ListOpenDateRangesForNodeOpenTimesBitmapsRequest)(nil),         // 219: api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest
	(*ListOpenDateRangesForNodeOpenTimesBitmapsResponse)(nil),        // 220: api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse
	(*AgentAvailabilityPattern)(nil),                                 // 221: api.v1alpha1.wfm.AgentAvailabilityPattern
	(*CreateAgentAvailabilityPatternReq)(nil),                        // 222: api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq
	(*CreateAgentAvailabilityPatternRes)(nil),                        // 223: api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes
	(*UpdateAgentAvailabilityPatternReq)(nil),                        // 224: api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq
	(*UpdateAgentAvailabilityPatternRes)(nil),                        // 225: api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes
	(*DeleteAgentAvailabilityPatternReq)(nil),                        // 226: api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq
	(*DeleteAgentAvailabilityPatternRes)(nil),                        // 227: api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes
	(*AvailabilityBitmapSet)(nil),                                    // 228: api.v1alpha1.wfm.AvailabilityBitmapSet
	(*GetAvailabilityBitmapsReq)(nil),                                // 229: api.v1alpha1.wfm.GetAvailabilityBitmapsReq
	(*GetAvailabilityBitmapsRes)(nil),                                // 230: api.v1alpha1.wfm.GetAvailabilityBitmapsRes
	(*UpsertNonSkillActivityAssociationReq)(nil),                     // 231: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq
	(*UpsertNonSkillActivityAssociationRes)(nil),                     // 232: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes
	(*SkillProficiency)(nil),                                         // 233: api.v1alpha1.wfm.SkillProficiency
	(*CreateSkillProficienciesReq)(nil),                              // 234: api.v1alpha1.wfm.CreateSkillProficienciesReq
	(*CreateSkillProficienciesRes)(nil),                              // 235: api.v1alpha1.wfm.CreateSkillProficienciesRes
	(*UpdateSkillProficienciesReq)(nil),                              // 236: api.v1alpha1.wfm.UpdateSkillProficienciesReq
	(*UpdateSkillProficienciesRes)(nil),                              // 237: api.v1alpha1.wfm.UpdateSkillProficienciesRes
	(*DeleteSkillProficiencyReq)(nil),                                // 238: api.v1alpha1.wfm.DeleteSkillProficiencyReq
	(*DeleteSkillProficiencyRes)(nil),                                // 239: api.v1alpha1.wfm.DeleteSkillProficiencyRes
	(*ScheduleScenario)(nil),                                         // 240: api.v1alpha1.wfm.ScheduleScenario
	(*CopyScenarioReq)(nil),                                          // 241: api.v1alpha1.wfm.CopyScenarioReq
	(*CopyScenarioRes)(nil),                                          // 242: api.v1alpha1.wfm.CopyScenarioRes
	(*CreateScheduleScenarioWithNodesReq)(nil),                       // 243: api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq
	(*CreateScheduleScenarioWithNodesRes)(nil),                       // 244: api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes
	(*UpdateScheduleScenarioReq)(nil),                                // 245: api.v1alpha1.wfm.UpdateScheduleScenarioReq
	(*UpdateScheduleScenarioRes)(nil),                                // 246: api.v1alpha1.wfm.UpdateScheduleScenarioRes
	(*ListConfigEntitiesReq)(nil),                                    // 247: api.v1alpha1.wfm.ListConfigEntitiesReq
	(*ListConfigEntitiesRes)(nil),                                    // 248: api.v1alpha1.wfm.ListConfigEntitiesRes
	(*Diagnostic)(nil),                                               // 249: api.v1alpha1.wfm.Diagnostic
	(*Diagnostics)(nil),                                              // 250: api.v1alpha1.wfm.Diagnostics
	(*DeleteShiftInstancesReq)(nil),                                  // 251: api.v1alpha1.wfm.DeleteShiftInstancesReq
	(*DeleteShiftInstancesRes)(nil),                                  // 252: api.v1alpha1.wfm.DeleteShiftInstancesRes
	(*BuildNodeDiagnosticsReq)(nil),                                  // 253: api.v1alpha1.wfm.BuildNodeDiagnosticsReq
	(*BuildNodeDiagnosticsRes)(nil),                                  // 254: api.v1alpha1.wfm.BuildNodeDiagnosticsRes
	(*BuildGlobalDiagnosticsReq)(nil),                                // 255: api.v1alpha1.wfm.BuildGlobalDiagnosticsReq
	(*BuildGlobalDiagnosticsRes)(nil),                                // 256: api.v1alpha1.wfm.BuildGlobalDiagnosticsRes
	(*PublishedSchedule)(nil),                                        // 257: api.v1alpha1.wfm.PublishedSchedule
	(*DraftSchedule)(nil),                                            // 258: api.v1alpha1.wfm.DraftSchedule
	(*PerformanceMetricForSkillCollection)(nil),                      // 259: api.v1alpha1.wfm.PerformanceMetricForSkillCollection
	(*PerformanceMetric)(nil),                                        // 260: api.v1alpha1.wfm.PerformanceMetric
	(*PerformanceMetricForSkillCollectionV2)(nil),                    // 261: api.v1alpha1.wfm.PerformanceMetricForSkillCollectionV2
	(*PerformanceMetricV2)(nil),                                      // 262: api.v1alpha1.wfm.PerformanceMetricV2
	(*PerformanceMetricV3)(nil),                                      // 263: api.v1alpha1.wfm.PerformanceMetricV3
	(*Basic_PerformanceMetricV3)(nil),                                // 264: api.v1alpha1.wfm.Basic_PerformanceMetricV3
	(*V3_MetricIntervalStat)(nil),                                    // 265: api.v1alpha1.wfm.V3_MetricIntervalStat
	(*ServiceLevelInterval)(nil),                                     // 266: api.v1alpha1.wfm.ServiceLevelInterval
	(*FTERequiredVsAchievedInterval)(nil),                            // 267: api.v1alpha1.wfm.FTERequiredVsAchievedInterval
	(*FTERequiredVsAchievedOccupancyInterval)(nil),                   // 268: api.v1alpha1.wfm.FTERequiredVsAchievedOccupancyInterval
	(*RequiredCallsInterval)(nil),                                    // 269: api.v1alpha1.wfm.RequiredCallsInterval
	(*ShiftInstance)(nil),                                            // 270: api.v1alpha1.wfm.ShiftInstance
	(*ShiftSegmentCallStat)(nil),                                     // 271: api.v1alpha1.wfm.ShiftSegmentCallStat
	(*ShiftSegment)(nil),                                             // 272: api.v1alpha1.wfm.ShiftSegment
	(*GetPublishedScheduleReq)(nil),                                  // 273: api.v1alpha1.wfm.GetPublishedScheduleReq
	(*GetPublishedScheduleRes)(nil),                                  // 274: api.v1alpha1.wfm.GetPublishedScheduleRes
	(*GetPublishedScheduleRequiredCallsReq)(nil),                     // 275: api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq
	(*GetPublishedScheduleRequiredCallsRes)(nil),                     // 276: api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes
	(*GetDraftScheduleRequiredCallsReq)(nil),                         // 277: api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq
	(*GetDraftScheduleRequiredCallsRes)(nil),                         // 278: api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes
	(*CreateDraftScheduleReq)(nil),                                   // 279: api.v1alpha1.wfm.CreateDraftScheduleReq
	(*CreateDraftScheduleRes)(nil),                                   // 280: api.v1alpha1.wfm.CreateDraftScheduleRes
	(*UpdateDraftScheduleReq)(nil),                                   // 281: api.v1alpha1.wfm.UpdateDraftScheduleReq
	(*UpdateDraftScheduleRes)(nil),                                   // 282: api.v1alpha1.wfm.UpdateDraftScheduleRes
	(*BuildDraftScheduleReq)(nil),                                    // 283: api.v1alpha1.wfm.BuildDraftScheduleReq
	(*BuildDraftScheduleRes)(nil),                                    // 284: api.v1alpha1.wfm.BuildDraftScheduleRes
	(*PollBuildInProgressRequest)(nil),                               // 285: api.v1alpha1.wfm.PollBuildInProgressRequest
	(*PollBuildInProgressResponse)(nil),                              // 286: api.v1alpha1.wfm.PollBuildInProgressResponse
	(*CancelBuildInProgressRequest)(nil),                             // 287: api.v1alpha1.wfm.CancelBuildInProgressRequest
	(*CancelBuildInProgressResponse)(nil),                            // 288: api.v1alpha1.wfm.CancelBuildInProgressResponse
	(*PublishDraftScheduleReq)(nil),                                  // 289: api.v1alpha1.wfm.PublishDraftScheduleReq
	(*PublishDraftScheduleRes)(nil),                                  // 290: api.v1alpha1.wfm.PublishDraftScheduleRes
	(*ResetDraftScheduleReq)(nil),                                    // 291: api.v1alpha1.wfm.ResetDraftScheduleReq
	(*ResetDraftScheduleRes)(nil),                                    // 292: api.v1alpha1.wfm.ResetDraftScheduleRes
	(*GetDraftScheduleReq)(nil),                                      // 293: api.v1alpha1.wfm.GetDraftScheduleReq
	(*GetDraftScheduleRes)(nil),                                      // 294: api.v1alpha1.wfm.GetDraftScheduleRes
	(*ListDraftSchedulesReq)(nil),                                    // 295: api.v1alpha1.wfm.ListDraftSchedulesReq
	(*ListDraftSchedulesRes)(nil),                                    // 296: api.v1alpha1.wfm.ListDraftSchedulesRes
	(*ClearScheduleReq)(nil),                                         // 297: api.v1alpha1.wfm.ClearScheduleReq
	(*ClearScheduleRes)(nil),                                         // 298: api.v1alpha1.wfm.ClearScheduleRes
	(*DeleteDraftScheduleReq)(nil),                                   // 299: api.v1alpha1.wfm.DeleteDraftScheduleReq
	(*DeleteDraftScheduleRes)(nil),                                   // 300: api.v1alpha1.wfm.DeleteDraftScheduleRes
	(*ListShiftInstancesBySidReq)(nil),                               // 301: api.v1alpha1.wfm.ListShiftInstancesBySidReq
	(*ListShiftInstancesBySidRes)(nil),                               // 302: api.v1alpha1.wfm.ListShiftInstancesBySidRes
	(*CopyScheduleToScheduleReq)(nil),                                // 303: api.v1alpha1.wfm.CopyScheduleToScheduleReq
	(*CopyScheduleToScheduleRes)(nil),                                // 304: api.v1alpha1.wfm.CopyScheduleToScheduleRes
	(*CreateShiftInstanceReq)(nil),                                   // 305: api.v1alpha1.wfm.CreateShiftInstanceReq
	(*CreateShiftInstanceRes)(nil),                                   // 306: api.v1alpha1.wfm.CreateShiftInstanceRes
	(*CreateShiftInstanceV2Req)(nil),                                 // 307: api.v1alpha1.wfm.CreateShiftInstanceV2Req
	(*CreateShiftInstanceV2Res)(nil),                                 // 308: api.v1alpha1.wfm.CreateShiftInstanceV2Res
	(*CreateShiftInstanceWithSegmentsRequest)(nil),                   // 309: api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest
	(*CreateShiftInstanceWithSegmentsResponse)(nil),                  // 310: api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse
	(*SplitShiftInstanceReq)(nil),                                    // 311: api.v1alpha1.wfm.SplitShiftInstanceReq
	(*SplitShiftInstanceRes)(nil),                                    // 312: api.v1alpha1.wfm.SplitShiftInstanceRes
	(*SwapShiftInstancesReq)(nil),                                    // 313: api.v1alpha1.wfm.SwapShiftInstancesReq
	(*SwapShiftInstancesRes)(nil),                                    // 314: api.v1alpha1.wfm.SwapShiftInstancesRes
	(*UpdateShiftInstanceReq)(nil),                                   // 315: api.v1alpha1.wfm.UpdateShiftInstanceReq
	(*UpdateShiftInstanceRes)(nil),                                   // 316: api.v1alpha1.wfm.UpdateShiftInstanceRes
	(*UpdateShiftInstanceV2Req)(nil),                                 // 317: api.v1alpha1.wfm.UpdateShiftInstanceV2Req
	(*UpdateShiftInstanceV2Res)(nil),                                 // 318: api.v1alpha1.wfm.UpdateShiftInstanceV2Res
	(*UpdateShiftInstanceWithSegmentsRequest)(nil),                   // 319: api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest
	(*UpdateShiftInstanceWithSegmentsResponse)(nil),                  // 320: api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse
	(*CopyShiftInstancesToScheduleReq)(nil),                          // 321: api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq
	(*CopyShiftInstancesToScheduleRes)(nil),                          // 322: api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes
	(*ListShiftInstanceSidsForAgentReq)(nil),                         // 323: api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq
	(*ListShiftInstanceSidsForAgentRes)(nil),                         // 324: api.v1alpha1.wfm.ListShiftInstanceSidsForAgentRes
	(*ListShiftInstanceSidsForScheduleRequest)(nil),                  // 325: api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest
	(*ListShiftInstanceSidsForScheduleResponse)(nil),                 // 326: api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleResponse
	(*ListShiftSegmentsByShiftInstanceSidsReq)(nil),                  // 327: api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq
	(*ListShiftSegmentsByShiftInstanceSidsRes)(nil),                  // 328: api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes
	(*PerformanceMetricParameter)(nil),                               // 329: api.v1alpha1.wfm.PerformanceMetricParameter
	(*GetPerformanceMetricsReq)(nil),                                 // 330: api.v1alpha1.wfm.GetPerformanceMetricsReq
	(*GetPerformanceMetricsRes)(nil),                                 // 331: api.v1alpha1.wfm.GetPerformanceMetricsRes
	(*SchedulingTarget)(nil),                                         // 332: api.v1alpha1.wfm.SchedulingTarget
	(*SetSchedulingTargetReq)(nil),                                   // 333: api.v1alpha1.wfm.SetSchedulingTargetReq
	(*SetSchedulingTargetRes)(nil),                                   // 334: api.v1alpha1.wfm.SetSchedulingTargetRes
	(*GetSchedulingTargetReq)(nil),                                   // 335: api.v1alpha1.wfm.GetSchedulingTargetReq
	(*GetSchedulingTargetRes)(nil),                                   // 336: api.v1alpha1.wfm.GetSchedulingTargetRes
	(*DeleteSchedulingTargetReq)(nil),                                // 337: api.v1alpha1.wfm.DeleteSchedulingTargetReq
	(*DeleteSchedulingTargetRes)(nil),                                // 338: api.v1alpha1.wfm.DeleteSchedulingTargetRes
	(*GetDefaultSchedulingTargetReq)(nil),                            // 339: api.v1alpha1.wfm.GetDefaultSchedulingTargetReq
	(*GetDefaultSchedulingTargetRes)(nil),                            // 340: api.v1alpha1.wfm.GetDefaultSchedulingTargetRes
	(*SetDefaultSchedulingTargetReq)(nil),                            // 341: api.v1alpha1.wfm.SetDefaultSchedulingTargetReq
	(*SetDefaultSchedulingTargetRes)(nil),                            // 342: api.v1alpha1.wfm.SetDefaultSchedulingTargetRes
	(*ListRequiredCallsIntervalsReq)(nil),                            // 343: api.v1alpha1.wfm.ListRequiredCallsIntervalsReq
	(*ListRequiredCallsIntervalsRes)(nil),                            // 344: api.v1alpha1.wfm.ListRequiredCallsIntervalsRes
	(*TourShiftSegmentConfig)(nil),                                   // 345: api.v1alpha1.wfm.TourShiftSegmentConfig
	(*TourShiftInstanceConfig)(nil),                                  // 346: api.v1alpha1.wfm.TourShiftInstanceConfig
	(*TourWeekPattern)(nil),                                          // 347: api.v1alpha1.wfm.TourWeekPattern
	(*TourAgentCollection)(nil),                                      // 348: api.v1alpha1.wfm.TourAgentCollection
	(*TourPattern)(nil),                                              // 349: api.v1alpha1.wfm.TourPattern
	(*CreateTourPatternReq)(nil),                                     // 350: api.v1alpha1.wfm.CreateTourPatternReq
	(*CreateTourPatternRes)(nil),                                     // 351: api.v1alpha1.wfm.CreateTourPatternRes
	(*GetTourPatternDiagnosticsReq)(nil),                             // 352: api.v1alpha1.wfm.GetTourPatternDiagnosticsReq
	(*GetTourPatternDiagnosticsRes)(nil),                             // 353: api.v1alpha1.wfm.GetTourPatternDiagnosticsRes
	(*UpsertTourPatternWithMembersReq)(nil),                          // 354: api.v1alpha1.wfm.UpsertTourPatternWithMembersReq
	(*UpsertTourPatternWithMembersRes)(nil),                          // 355: api.v1alpha1.wfm.UpsertTourPatternWithMembersRes
	(*GetTourPatternReq)(nil),                                        // 356: api.v1alpha1.wfm.GetTourPatternReq
	(*GetTourPatternRes)(nil),                                        // 357: api.v1alpha1.wfm.GetTourPatternRes
	(*GetTourPatternWithMembersReq)(nil),                             // 358: api.v1alpha1.wfm.GetTourPatternWithMembersReq
	(*GetTourPatternWithMembersRes)(nil),                             // 359: api.v1alpha1.wfm.GetTourPatternWithMembersRes
	(*DeleteTourPatternReq)(nil),                                     // 360: api.v1alpha1.wfm.DeleteTourPatternReq
	(*DeleteTourPatternRes)(nil),                                     // 361: api.v1alpha1.wfm.DeleteTourPatternRes
	(*CreateTourWeekPatternReq)(nil),                                 // 362: api.v1alpha1.wfm.CreateTourWeekPatternReq
	(*CreateTourWeekPatternRes)(nil),                                 // 363: api.v1alpha1.wfm.CreateTourWeekPatternRes
	(*ListTourWeekPatternsReq)(nil),                                  // 364: api.v1alpha1.wfm.ListTourWeekPatternsReq
	(*ListTourWeekPatternsRes)(nil),                                  // 365: api.v1alpha1.wfm.ListTourWeekPatternsRes
	(*DeleteTourWeekPatternsReq)(nil),                                // 366: api.v1alpha1.wfm.DeleteTourWeekPatternsReq
	(*DeleteTourWeekPatternsRes)(nil),                                // 367: api.v1alpha1.wfm.DeleteTourWeekPatternsRes
	(*CreateTourShiftInstanceConfigReq)(nil),                         // 368: api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq
	(*CreateTourShiftInstanceConfigRes)(nil),                         // 369: api.v1alpha1.wfm.CreateTourShiftInstanceConfigRes
	(*UpdateTourShiftInstanceConfigReq)(nil),                         // 370: api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq
	(*UpdateTourShiftInstanceConfigRes)(nil),                         // 371: api.v1alpha1.wfm.UpdateTourShiftInstanceConfigRes
	(*ListTourShiftInstanceConfigsReq)(nil),                          // 372: api.v1alpha1.wfm.ListTourShiftInstanceConfigsReq
	(*ListTourShiftInstanceConfigsRes)(nil),                          // 373: api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes
	(*DeleteTourShiftInstanceConfigsReq)(nil),                        // 374: api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsReq
	(*DeleteTourShiftInstanceConfigsRes)(nil),                        // 375: api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsRes
	(*CreateTourShiftSegmentConfigReq)(nil),                          // 376: api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq
	(*CreateTourShiftSegmentConfigRes)(nil),                          // 377: api.v1alpha1.wfm.CreateTourShiftSegmentConfigRes
	(*UpdateTourShiftSegmentConfigReq)(nil),                          // 378: api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq
	(*UpdateTourShiftSegmentConfigRes)(nil),                          // 379: api.v1alpha1.wfm.UpdateTourShiftSegmentConfigRes
	(*ListTourShiftSegmentConfigsReq)(nil),                           // 380: api.v1alpha1.wfm.ListTourShiftSegmentConfigsReq
	(*ListTourShiftSegmentConfigsRes)(nil),                           // 381: api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes
	(*DeleteTourShiftSegmentConfigsReq)(nil),                         // 382: api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsReq
	(*DeleteTourShiftSegmentConfigsRes)(nil),                         // 383: api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsRes
	(*CreateTourAgentCollectionReq)(nil),                             // 384: api.v1alpha1.wfm.CreateTourAgentCollectionReq
	(*CreateTourAgentCollectionRes)(nil),                             // 385: api.v1alpha1.wfm.CreateTourAgentCollectionRes
	(*UpdateTourAgentCollectionReq)(nil),                             // 386: api.v1alpha1.wfm.UpdateTourAgentCollectionReq
	(*UpdateTourAgentCollectionRes)(nil),                             // 387: api.v1alpha1.wfm.UpdateTourAgentCollectionRes
	(*ListTourAgentCollectionsReq)(nil),                              // 388: api.v1alpha1.wfm.ListTourAgentCollectionsReq
	(*ListTourAgentCollectionsRes)(nil),                              // 389: api.v1alpha1.wfm.ListTourAgentCollectionsRes
	(*DeleteTourAgentCollectionsReq)(nil),                            // 390: api.v1alpha1.wfm.DeleteTourAgentCollectionsReq
	(*DeleteTourAgentCollectionsRes)(nil),                            // 391: api.v1alpha1.wfm.DeleteTourAgentCollectionsRes
	(*CreateTourAgentCollectionWFMAgentsReq)(nil),                    // 392: api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsReq
	(*CreateTourAgentCollectionWFMAgentsRes)(nil),                    // 393: api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsRes
	(*ListTourAgentCollectionWFMAgentsReq)(nil),                      // 394: api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsReq
	(*ListTourAgentCollectionWFMAgentsRes)(nil),                      // 395: api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes
	(*DeleteTourAgentCollectionWFMAgentsReq)(nil),                    // 396: api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsReq
	(*DeleteTourAgentCollectionWFMAgentsRes)(nil),                    // 397: api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsRes
	(*GenerateTourWeekPatternsReq)(nil),                              // 398: api.v1alpha1.wfm.GenerateTourWeekPatternsReq
	(*GenerateTourWeekPatternsRes)(nil),                              // 399: api.v1alpha1.wfm.GenerateTourWeekPatternsRes
	(*RemoveAgentFromScheduleRequest)(nil),                           // 400: api.v1alpha1.wfm.RemoveAgentFromScheduleRequest
	(*RemoveAgentFromScheduleResponse)(nil),                          // 401: api.v1alpha1.wfm.RemoveAgentFromScheduleResponse
	(*ListValidAgentsForReplacementReq)(nil),                         // 402: api.v1alpha1.wfm.ListValidAgentsForReplacementReq
	(*ListValidAgentsForReplacementRes)(nil),                         // 403: api.v1alpha1.wfm.ListValidAgentsForReplacementRes
	(*ReplaceAgentOnScheduleReq)(nil),                                // 404: api.v1alpha1.wfm.ReplaceAgentOnScheduleReq
	(*ReplaceAgentOnScheduleRes)(nil),                                // 405: api.v1alpha1.wfm.ReplaceAgentOnScheduleRes
	(*RgbaColor)(nil),                                                // 406: api.v1alpha1.wfm.RgbaColor
	(*HelloWorldWFMAdherenceRequest)(nil),                            // 407: api.v1alpha1.wfm.HelloWorldWFMAdherenceRequest
	(*HelloWorldWFMAdherenceResponse)(nil),                           // 408: api.v1alpha1.wfm.HelloWorldWFMAdherenceResponse
	(*ListAgentStatesForDayRequest)(nil),                             // 409: api.v1alpha1.wfm.ListAgentStatesForDayRequest
	(*ListAgentStatesForDayResponse)(nil),                            // 410: api.v1alpha1.wfm.ListAgentStatesForDayResponse
	(*ListRealTimeManagementStatesRequest)(nil),                      // 411: api.v1alpha1.wfm.ListRealTimeManagementStatesRequest
	(*ListRealTimeManagementStatesResponse)(nil),                     // 412: api.v1alpha1.wfm.ListRealTimeManagementStatesResponse
	(*ListAdherenceAgentStatesRequest)(nil),                          // 413: api.v1alpha1.wfm.ListAdherenceAgentStatesRequest
	(*ListAdherenceAgentStatesResponse)(nil),                         // 414: api.v1alpha1.wfm.ListAdherenceAgentStatesResponse
	(*RealTimeManagementStateColor)(nil),                             // 415: api.v1alpha1.wfm.RealTimeManagementStateColor
	(*UpsertRealTimeManagementStateColorRequest)(nil),                // 416: api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest
	(*UpsertRealTimeManagementStateColorResponse)(nil),               // 417: api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse
	(*ListRealTimeManagementStateColorsRequest)(nil),                 // 418: api.v1alpha1.wfm.ListRealTimeManagementStateColorsRequest
	(*ListRealTimeManagementStateColorsResponse)(nil),                // 419: api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse
	(*DeleteRealTimeManagementStateColorRequest)(nil),                // 420: api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest
	(*DeleteRealTimeManagementStateColorResponse)(nil),               // 421: api.v1alpha1.wfm.DeleteRealTimeManagementStateColorResponse
	(*CreateAgentLeavePetitionRequest)(nil),                          // 422: api.v1alpha1.wfm.CreateAgentLeavePetitionRequest
	(*CreateAgentLeavePetitionResponse)(nil),                         // 423: api.v1alpha1.wfm.CreateAgentLeavePetitionResponse
	(*ListAgentLeavePetitionsRequest)(nil),                           // 424: api.v1alpha1.wfm.ListAgentLeavePetitionsRequest
	(*ListAgentLeavePetitionsResponse)(nil),                          // 425: api.v1alpha1.wfm.ListAgentLeavePetitionsResponse
	(*ArchiveAgentLeavePetitionRequest)(nil),                         // 426: api.v1alpha1.wfm.ArchiveAgentLeavePetitionRequest
	(*ArchiveAgentLeavePetitionResponse)(nil),                        // 427: api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse
	(*ResolveAgentLeavePetitionRequest)(nil),                         // 428: api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest
	(*ResolveAgentLeavePetitionResponse)(nil),                        // 429: api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse
	(*CancelAgentLeavePetitionRequest)(nil),                          // 430: api.v1alpha1.wfm.CancelAgentLeavePetitionRequest
	(*CancelAgentLeavePetitionResponse)(nil),                         // 431: api.v1alpha1.wfm.CancelAgentLeavePetitionResponse
	(*CreateRgbaColorRequest)(nil),                                   // 432: api.v1alpha1.wfm.CreateRgbaColorRequest
	(*CreateRgbaColorResponse)(nil),                                  // 433: api.v1alpha1.wfm.CreateRgbaColorResponse
	(*ListRgbaColorsRequest)(nil),                                    // 434: api.v1alpha1.wfm.ListRgbaColorsRequest
	(*ListRgbaColorsResponse)(nil),                                   // 435: api.v1alpha1.wfm.ListRgbaColorsResponse
	(*UpdateRgbaColorRequest)(nil),                                   // 436: api.v1alpha1.wfm.UpdateRgbaColorRequest
	(*UpdateRgbaColorResponse)(nil),                                  // 437: api.v1alpha1.wfm.UpdateRgbaColorResponse
	(*DeleteRgbaColorRequest)(nil),                                   // 438: api.v1alpha1.wfm.DeleteRgbaColorRequest
	(*DeleteRgbaColorResponse)(nil),                                  // 439: api.v1alpha1.wfm.DeleteRgbaColorResponse
	(*CreateAdherenceRuleNotificationConfigRequest)(nil),             // 440: api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest
	(*CreateAdherenceRuleNotificationConfigResponse)(nil),            // 441: api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigResponse
	(*UpdateAdherenceRuleNotificationConfigRequest)(nil),             // 442: api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest
	(*UpdateAdherenceRuleNotificationConfigResponse)(nil),            // 443: api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigResponse
	(*CreateAdherenceRuleNotificationConfigEntryRequest)(nil),        // 444: api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest
	(*CreateAdherenceRuleNotificationConfigEntryResponse)(nil),       // 445: api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryResponse
	(*UpdateAdherenceRuleNotificationConfigEntryRequest)(nil),        // 446: api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest
	(*UpdateAdherenceRuleNotificationConfigEntryResponse)(nil),       // 447: api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryResponse
	(*DeleteAdherenceRuleNotificationConfigEntryRequest)(nil),        // 448: api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryRequest
	(*DeleteAdherenceRuleNotificationConfigEntryResponse)(nil),       // 449: api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryResponse
	(*ListAdherenceRuleNotificationConfigsRequest)(nil),              // 450: api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsRequest
	(*ListAdherenceRuleNotificationConfigsResponse)(nil),             // 451: api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse
	(*CreateAdherenceDepartmentalRuleRequest)(nil),                   // 452: api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest
	(*CreateAdherenceDepartmentalRuleResponse)(nil),                  // 453: api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleResponse
	(*UpdateAdherenceDepartmentalRuleRequest)(nil),                   // 454: api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest
	(*UpdateAdherenceDepartmentalRuleResponse)(nil),                  // 455: api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleResponse
	(*CreateAdherenceDepartmentalRuleClauseRequest)(nil),             // 456: api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest
	(*CreateAdherenceDepartmentalRuleClauseResponse)(nil),            // 457: api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseResponse
	(*UpdateAdherenceDepartmentalRuleClauseRequest)(nil),             // 458: api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest
	(*UpdateAdherenceDepartmentalRuleClauseResponse)(nil),            // 459: api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseResponse
	(*DeleteAdherenceDepartmentalRuleClauseRequest)(nil),             // 460: api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseRequest
	(*DeleteAdherenceDepartmentalRuleClauseResponse)(nil),            // 461: api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseResponse
	(*ListAdherenceDepartmentalRulesRequest)(nil),                    // 462: api.v1alpha1.wfm.ListAdherenceDepartmentalRulesRequest
	(*ListAdherenceDepartmentalRulesResponse)(nil),                   // 463: api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse
	(*CreateAdherenceAgentRuleRequest)(nil),                          // 464: api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest
	(*CreateAdherenceAgentRuleResponse)(nil),                         // 465: api.v1alpha1.wfm.CreateAdherenceAgentRuleResponse
	(*UpdateAdherenceAgentRuleRequest)(nil),                          // 466: api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest
	(*UpdateAdherenceAgentRuleResponse)(nil),                         // 467: api.v1alpha1.wfm.UpdateAdherenceAgentRuleResponse
	(*CreateAdherenceAgentRuleClauseRequest)(nil),                    // 468: api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest
	(*CreateAdherenceAgentRuleClauseResponse)(nil),                   // 469: api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseResponse
	(*UpdateAdherenceAgentRuleClauseRequest)(nil),                    // 470: api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest
	(*UpdateAdherenceAgentRuleClauseResponse)(nil),                   // 471: api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseResponse
	(*DeleteAdherenceAgentRuleClauseRequest)(nil),                    // 472: api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseRequest
	(*DeleteAdherenceAgentRuleClauseResponse)(nil),                   // 473: api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseResponse
	(*ListAdherenceAgentRulesRequest)(nil),                           // 474: api.v1alpha1.wfm.ListAdherenceAgentRulesRequest
	(*ListAdherenceAgentRulesResponse)(nil),                          // 475: api.v1alpha1.wfm.ListAdherenceAgentRulesResponse
	(*AgentGetScheduleRequest)(nil),                                  // 476: api.v1alpha1.wfm.AgentGetScheduleRequest
	(*AgentGetScheduleResponse)(nil),                                 // 477: api.v1alpha1.wfm.AgentGetScheduleResponse
	(*AgentListLeavePetitionsRequest)(nil),                           // 478: api.v1alpha1.wfm.AgentListLeavePetitionsRequest
	(*AgentListLeavePetitionsResponse)(nil),                          // 479: api.v1alpha1.wfm.AgentListLeavePetitionsResponse
	(*AgentCreateLeavePetitionRequest)(nil),                          // 480: api.v1alpha1.wfm.AgentCreateLeavePetitionRequest
	(*AgentCreateLeavePetitionResponse)(nil),                         // 481: api.v1alpha1.wfm.AgentCreateLeavePetitionResponse
	(*AgentCancelLeavePetitionRequest)(nil),                          // 482: api.v1alpha1.wfm.AgentCancelLeavePetitionRequest
	(*AgentCancelLeavePetitionResponse)(nil),                         // 483: api.v1alpha1.wfm.AgentCancelLeavePetitionResponse
	(*UpdateSkillProfileProficienciesReq_Proficiency)(nil),           // 484: api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq.Proficiency
	(*GetSkillProfileRes_Mapping)(nil),                               // 485: api.v1alpha1.wfm.GetSkillProfileRes.Mapping
	(*DeleteForecastIntervalsReq_IntervalSids)(nil),                  // 486: api.v1alpha1.wfm.DeleteForecastIntervalsReq.IntervalSids
	(*ListAllWFMAgentsRes_AgentGroupsByAgent)(nil),                   // 487: api.v1alpha1.wfm.ListAllWFMAgentsRes.AgentGroupsByAgent
	nil,                                  // 488: api.v1alpha1.wfm.ListWFMAgentSidsRes.SidsEntry
	(*DatetimePattern_WeekMap)(nil),      // 489: api.v1alpha1.wfm.DatetimePattern.WeekMap
	(*DatetimePattern_CalendarItem)(nil), // 490: api.v1alpha1.wfm.DatetimePattern.CalendarItem
	(*DatetimePattern_WeekMap_WeekMapDOW)(nil),                     // 491: api.v1alpha1.wfm.DatetimePattern.WeekMap.WeekMapDOW
	(*UpsertNonSkillActivityAssociationRes_EntityMapping)(nil),     // 492: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes.EntityMapping
	(*ListConfigEntitiesRes_ClientNodeEntities)(nil),               // 493: api.v1alpha1.wfm.ListConfigEntitiesRes.ClientNodeEntities
	(*ListConfigEntitiesRes_LocationNodeEntities)(nil),             // 494: api.v1alpha1.wfm.ListConfigEntitiesRes.LocationNodeEntities
	(*ListConfigEntitiesRes_ProgramNodeEntities)(nil),              // 495: api.v1alpha1.wfm.ListConfigEntitiesRes.ProgramNodeEntities
	(*ListConfigEntitiesRes_AgentGroupEntities)(nil),               // 496: api.v1alpha1.wfm.ListConfigEntitiesRes.AgentGroupEntities
	(*ListConfigEntitiesRes_ShiftTemplateEntities)(nil),            // 497: api.v1alpha1.wfm.ListConfigEntitiesRes.ShiftTemplateEntities
	(*ListConfigEntitiesRes_WFMAgentEntities)(nil),                 // 498: api.v1alpha1.wfm.ListConfigEntitiesRes.WFMAgentEntities
	(*ListConfigEntitiesRes_PlacementRuleEntities)(nil),            // 499: api.v1alpha1.wfm.ListConfigEntitiesRes.PlacementRuleEntities
	(*ListConfigEntitiesRes_ConstraintRuleEntities)(nil),           // 500: api.v1alpha1.wfm.ListConfigEntitiesRes.ConstraintRuleEntities
	(*ListConfigEntitiesRes_NonSkillActivityEntities)(nil),         // 501: api.v1alpha1.wfm.ListConfigEntitiesRes.NonSkillActivityEntities
	(*ListConfigEntitiesRes_AgentAvailabilityPatternEntities)(nil), // 502: api.v1alpha1.wfm.ListConfigEntitiesRes.AgentAvailabilityPatternEntities
	(*ListConfigEntitiesRes_OpenTimesPatternEntities)(nil),         // 503: api.v1alpha1.wfm.ListConfigEntitiesRes.OpenTimesPatternEntities
	(*ListConfigEntitiesRes_SkillProficiencyEntities)(nil),         // 504: api.v1alpha1.wfm.ListConfigEntitiesRes.SkillProficiencyEntities
	(*ListConfigEntitiesRes_ScheduleScenarioEntities)(nil),         // 505: api.v1alpha1.wfm.ListConfigEntitiesRes.ScheduleScenarioEntities
	(*PerformanceMetricV3_MetricByCollection)(nil),                 // 506: api.v1alpha1.wfm.PerformanceMetricV3.MetricByCollection
	(*ListTourAgentCollectionWFMAgentsRes_SidMapping)(nil),         // 507: api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes.SidMapping
	nil,                                                  // 508: api.v1alpha1.wfm.ListAdherenceAgentStatesResponse.AgentStatesEntry
	(*commons.InitialSetupStatus)(nil),                   // 509: api.commons.InitialSetupStatus
	(commons.SkillType_Enum)(0),                          // 510: api.commons.SkillType.Enum
	(*timestamppb.Timestamp)(nil),                        // 511: google.protobuf.Timestamp
	(*commons.ForecastingParameters)(nil),                // 512: api.commons.ForecastingParameters
	(*wrapperspb.FloatValue)(nil),                        // 513: google.protobuf.FloatValue
	(*commons.SkillProfileCategory)(nil),                 // 514: api.commons.SkillProfileCategory
	(*commons.ClientHistoryCacheInfo)(nil),               // 515: api.commons.ClientHistoryCacheInfo
	(*commons.CallProfileGroupCalls)(nil),                // 516: api.commons.CallProfileGroupCalls
	(*commons.CallProfileGroupAvgs)(nil),                 // 517: api.commons.CallProfileGroupAvgs
	(commons.RegressionForecasterModelTypes)(0),          // 518: api.commons.RegressionForecasterModelTypes
	(commons.RegressionForecasterAvgsProcessingType)(0),  // 519: api.commons.RegressionForecasterAvgsProcessingType
	(*commons.ProfileTOD)(nil),                           // 520: api.commons.ProfileTOD
	(*commons.ProfileWOMS)(nil),                          // 521: api.commons.ProfileWOMS
	(*commons.ProfileDOW)(nil),                           // 522: api.commons.ProfileDOW
	(*commons.ProfileMOY)(nil),                           // 523: api.commons.ProfileMOY
	(*commons.DatetimeRange)(nil),                        // 524: api.commons.DatetimeRange
	(commons.TimeZone)(0),                                // 525: api.commons.TimeZone
	(*wrapperspb.Int64Value)(nil),                        // 526: google.protobuf.Int64Value
	(commons.ConfigEntityType)(0),                        // 527: api.commons.ConfigEntityType
	(commons.ConstraintTimeUnit)(0),                      // 528: api.commons.ConstraintTimeUnit
	(commons.ConstraintRuleType)(0),                      // 529: api.commons.ConstraintRuleType
	(commons.ConfigRelationshipType)(0),                  // 530: api.commons.ConfigRelationshipType
	(commons.SchedulingActivityClassification)(0),        // 531: api.commons.SchedulingActivityClassification
	(commons.DOWPlacementType)(0),                        // 532: api.commons.DOWPlacementType
	(commons.DayOfWeek)(0),                               // 533: api.commons.DayOfWeek
	(commons.BitmapType)(0),                              // 534: api.commons.BitmapType
	(commons.OpenTimesOption)(0),                         // 535: api.commons.OpenTimesOption
	(commons.AvailabilityOption)(0),                      // 536: api.commons.AvailabilityOption
	(commons.DiagnosticLevel)(0),                         // 537: api.commons.DiagnosticLevel
	(commons.DiagnosticCode)(0),                          // 538: api.commons.DiagnosticCode
	(commons.PerformanceMetricType)(0),                   // 539: api.commons.PerformanceMetricType
	(commons.ScheduleType)(0),                            // 540: api.commons.ScheduleType
	(*commons.SchedulingResultMetric)(nil),               // 541: api.commons.SchedulingResultMetric
	(commons.BuildDraftStatus)(0),                        // 542: api.commons.BuildDraftStatus
	(*commons.ScheduleSelector)(nil),                     // 543: api.commons.ScheduleSelector
	(commons.SchedulingTargetType)(0),                    // 544: api.commons.SchedulingTargetType
	(*commons.AgentStateSequence)(nil),                   // 545: api.commons.AgentStateSequence
	(commons.RealTimeManagementState)(0),                 // 546: api.commons.RealTimeManagementState
	(*commons.AgentLeavePetition)(nil),                   // 547: api.commons.AgentLeavePetition
	(commons.AgentLeavePetitionStatus)(0),                // 548: api.commons.AgentLeavePetitionStatus
	(*commons.AdherenceRuleNotificationConfig)(nil),      // 549: api.commons.AdherenceRuleNotificationConfig
	(*commons.AdherenceRuleNotificationConfigEntry)(nil), // 550: api.commons.AdherenceRuleNotificationConfigEntry
	(*commons.AdherenceDepartmentalRule)(nil),            // 551: api.commons.AdherenceDepartmentalRule
	(*commons.AdherenceDepartmentalRuleClause)(nil),      // 552: api.commons.AdherenceDepartmentalRuleClause
	(*commons.AdherenceAgentRule)(nil),                   // 553: api.commons.AdherenceAgentRule
	(*commons.AdherenceAgentRuleClause)(nil),             // 554: api.commons.AdherenceAgentRuleClause
	(*commons.OptionTypes)(nil),                          // 555: api.commons.OptionTypes
	(*commons.AdherenceAgentStates)(nil),                 // 556: api.commons.AdherenceAgentStates
}
var file_api_v1alpha1_wfm_wfm_proto_depIdxs = []int32{
	509, // 0: api.v1alpha1.wfm.PerformInitialClientSetupResponse.setup_status:type_name -> api.commons.InitialSetupStatus
	510, // 1: api.v1alpha1.wfm.Skill.client_skill_type:type_name -> api.commons.SkillType.Enum
	511, // 2: api.v1alpha1.wfm.Skill.delete_date:type_name -> google.protobuf.Timestamp
	511, // 3: api.v1alpha1.wfm.SkillProfile.create_date:type_name -> google.protobuf.Timestamp
	511, // 4: api.v1alpha1.wfm.SkillProfile.inactive_as_of_date:type_name -> google.protobuf.Timestamp
	5,   // 5: api.v1alpha1.wfm.SkillProfile.skills:type_name -> api.v1alpha1.wfm.Skill
	511, // 6: api.v1alpha1.wfm.SkillProfileGroup.create_time:type_name -> google.protobuf.Timestamp
	511, // 7: api.v1alpha1.wfm.SkillProfileGroup.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	6,   // 8: api.v1alpha1.wfm.ListSkillProfilesRes.skill_profiles:type_name -> api.v1alpha1.wfm.SkillProfile
	484, // 9: api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq.proficiencies:type_name -> api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq.Proficiency
	6,   // 10: api.v1alpha1.wfm.GetSkillProfileRes.skill_profile:type_name -> api.v1alpha1.wfm.SkillProfile
	485, // 11: api.v1alpha1.wfm.GetSkillProfileRes.mappings:type_name -> api.v1alpha1.wfm.GetSkillProfileRes.Mapping
	511, // 12: api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes.resync_date:type_name -> google.protobuf.Timestamp
	512, // 13: api.v1alpha1.wfm.UpsertForecastingParametersReq.forecasting_parameters:type_name -> api.commons.ForecastingParameters
	512, // 14: api.v1alpha1.wfm.GetForecastingParametersRes.forecasting_parameters:type_name -> api.commons.ForecastingParameters
	511, // 15: api.v1alpha1.wfm.HistoricalDataInterval.start_datetime:type_name -> google.protobuf.Timestamp
	513, // 16: api.v1alpha1.wfm.HistoricalDataInterval.average_speed_of_answer_in_seconds:type_name -> google.protobuf.FloatValue
	513, // 17: api.v1alpha1.wfm.HistoricalDataInterval.average_handle_time_in_seconds:type_name -> google.protobuf.FloatValue
	513, // 18: api.v1alpha1.wfm.HistoricalDataInterval.average_after_call_work_in_seconds:type_name -> google.protobuf.FloatValue
	513, // 19: api.v1alpha1.wfm.HistoricalDataInterval.average_time_to_abort_in_seconds:type_name -> google.protobuf.FloatValue
	513, // 20: api.v1alpha1.wfm.HistoricalDataInterval.original_average_speed_of_answer_in_seconds:type_name -> google.protobuf.FloatValue
	513, // 21: api.v1alpha1.wfm.HistoricalDataInterval.original_average_handle_time_in_seconds:type_name -> google.protobuf.FloatValue
	513, // 22: api.v1alpha1.wfm.HistoricalDataInterval.original_average_after_call_work_in_seconds:type_name -> google.protobuf.FloatValue
	513, // 23: api.v1alpha1.wfm.HistoricalDataInterval.original_average_time_to_abort_in_seconds:type_name -> google.protobuf.FloatValue
	514, // 24: api.v1alpha1.wfm.HistoricalDataInterval.skill_profile_category:type_name -> api.commons.SkillProfileCategory
	515, // 25: api.v1alpha1.wfm.GetClientHistoryCacheInfoRes.cache_info:type_name -> api.commons.ClientHistoryCacheInfo
	514, // 26: api.v1alpha1.wfm.ListHistoricalDataReq.skill_profile_category:type_name -> api.commons.SkillProfileCategory
	24,  // 27: api.v1alpha1.wfm.ListHistoricalDataRes.historical_data_intervals:type_name -> api.v1alpha1.wfm.HistoricalDataInterval
	24,  // 28: api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq.delta:type_name -> api.v1alpha1.wfm.HistoricalDataInterval
	24,  // 29: api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes.delta:type_name -> api.v1alpha1.wfm.HistoricalDataInterval
	24,  // 30: api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq.deltas:type_name -> api.v1alpha1.wfm.HistoricalDataInterval
	5,   // 31: api.v1alpha1.wfm.ListSkillsRes.skills:type_name -> api.v1alpha1.wfm.Skill
	516, // 32: api.v1alpha1.wfm.CallProfileTemplate.total_calls_profile:type_name -> api.commons.CallProfileGroupCalls
	516, // 33: api.v1alpha1.wfm.CallProfileTemplate.total_abandoned_calls_profile:type_name -> api.commons.CallProfileGroupCalls
	517, // 34: api.v1alpha1.wfm.CallProfileTemplate.average_speed_of_answer_profile:type_name -> api.commons.CallProfileGroupAvgs
	517, // 35: api.v1alpha1.wfm.CallProfileTemplate.average_handle_time_profile:type_name -> api.commons.CallProfileGroupAvgs
	517, // 36: api.v1alpha1.wfm.CallProfileTemplate.average_after_call_work_profile:type_name -> api.commons.CallProfileGroupAvgs
	517, // 37: api.v1alpha1.wfm.CallProfileTemplate.average_time_to_abort_profile:type_name -> api.commons.CallProfileGroupAvgs
	35,  // 38: api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes.call_profile_template:type_name -> api.v1alpha1.wfm.CallProfileTemplate
	514, // 39: api.v1alpha1.wfm.BuildCallProfileTemplateReq.skill_profile_category:type_name -> api.commons.SkillProfileCategory
	35,  // 40: api.v1alpha1.wfm.BuildCallProfileTemplateRes.call_profile_template:type_name -> api.v1alpha1.wfm.CallProfileTemplate
	518, // 41: api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes.model_types:type_name -> api.commons.RegressionForecasterModelTypes
	7,   // 42: api.v1alpha1.wfm.CreateSkillProfileGroupReq.skill_profile_group:type_name -> api.v1alpha1.wfm.SkillProfileGroup
	7,   // 43: api.v1alpha1.wfm.UpdateSkillProfileGroupReq.skill_profile_group:type_name -> api.v1alpha1.wfm.SkillProfileGroup
	7,   // 44: api.v1alpha1.wfm.ListSkillProfileGroupsRes.skill_profile_groups:type_name -> api.v1alpha1.wfm.SkillProfileGroup
	511, // 45: api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq.start_datetimes:type_name -> google.protobuf.Timestamp
	6,   // 46: api.v1alpha1.wfm.ListTopSkillProfilesRes.skill_profiles:type_name -> api.v1alpha1.wfm.SkillProfile
	35,  // 47: api.v1alpha1.wfm.BuildProfileForecastByIntervalReq.call_profile_template:type_name -> api.v1alpha1.wfm.CallProfileTemplate
	514, // 48: api.v1alpha1.wfm.BuildProfileForecastByIntervalReq.skill_profile_category:type_name -> api.commons.SkillProfileCategory
	511, // 49: api.v1alpha1.wfm.CallDataByInterval.start_datetime:type_name -> google.protobuf.Timestamp
	514, // 50: api.v1alpha1.wfm.CallDataByInterval.skill_profile_category:type_name -> api.commons.SkillProfileCategory
	35,  // 51: api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq.call_profile_template:type_name -> api.v1alpha1.wfm.CallProfileTemplate
	514, // 52: api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq.skill_profile_category:type_name -> api.commons.SkillProfileCategory
	61,  // 53: api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes.call_data:type_name -> api.v1alpha1.wfm.CallDataByInterval
	79,  // 54: api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes.forecast_stats:type_name -> api.v1alpha1.wfm.GetForecastStatisticsRes
	35,  // 55: api.v1alpha1.wfm.UpsertProfileForecastReq.call_profile_template:type_name -> api.v1alpha1.wfm.CallProfileTemplate
	514, // 56: api.v1alpha1.wfm.UpsertProfileForecastReq.skill_profile_category:type_name -> api.commons.SkillProfileCategory
	35,  // 57: api.v1alpha1.wfm.CreateCallProfileTemplateReq.call_profile_template:type_name -> api.v1alpha1.wfm.CallProfileTemplate
	518, // 58: api.v1alpha1.wfm.RegressionTemplate.model_type:type_name -> api.commons.RegressionForecasterModelTypes
	519, // 59: api.v1alpha1.wfm.RegressionTemplate.avgs_processing_type:type_name -> api.commons.RegressionForecasterAvgsProcessingType
	70,  // 60: api.v1alpha1.wfm.CreateRegressionTemplateReq.regression_template:type_name -> api.v1alpha1.wfm.RegressionTemplate
	70,  // 61: api.v1alpha1.wfm.ListRegressionTemplatesRes.regression_templates:type_name -> api.v1alpha1.wfm.RegressionTemplate
	70,  // 62: api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq.regression_template:type_name -> api.v1alpha1.wfm.RegressionTemplate
	70,  // 63: api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq.regression_template:type_name -> api.v1alpha1.wfm.RegressionTemplate
	61,  // 64: api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes.call_data:type_name -> api.v1alpha1.wfm.CallDataByInterval
	79,  // 65: api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes.forecast_stats:type_name -> api.v1alpha1.wfm.GetForecastStatisticsRes
	35,  // 66: api.v1alpha1.wfm.ListCallProfileTemplatesRes.call_profile_templates:type_name -> api.v1alpha1.wfm.CallProfileTemplate
	514, // 67: api.v1alpha1.wfm.ListForecastIntervalsReq.skill_profile_category:type_name -> api.commons.SkillProfileCategory
	514, // 68: api.v1alpha1.wfm.ListForecastIntervalsV2Request.skill_profile_category:type_name -> api.commons.SkillProfileCategory
	61,  // 69: api.v1alpha1.wfm.ListForecastIntervalsV2Response.intervals:type_name -> api.v1alpha1.wfm.CallDataByInterval
	70,  // 70: api.v1alpha1.wfm.UpsertRegressionForecastReq.regression_template:type_name -> api.v1alpha1.wfm.RegressionTemplate
	61,  // 71: api.v1alpha1.wfm.UpsertForecastDataDeltaReq.delta:type_name -> api.v1alpha1.wfm.CallDataByInterval
	61,  // 72: api.v1alpha1.wfm.UpsertForecastDataDeltaRes.delta:type_name -> api.v1alpha1.wfm.CallDataByInterval
	61,  // 73: api.v1alpha1.wfm.UpsertForecastDataDeltasReq.deltas:type_name -> api.v1alpha1.wfm.CallDataByInterval
	486, // 74: api.v1alpha1.wfm.DeleteForecastIntervalsReq.forecast_interval_sids:type_name -> api.v1alpha1.wfm.DeleteForecastIntervalsReq.IntervalSids
	514, // 75: api.v1alpha1.wfm.DeleteForecastIntervalsReq.skill_profile_category:type_name -> api.commons.SkillProfileCategory
	0,   // 76: api.v1alpha1.wfm.DeleteForecastIntervalsReq.forecast_interval_delete_type:type_name -> api.v1alpha1.wfm.DeleteForecastIntervalsReq.ForecastIntervalDeleteType
	24,  // 77: api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes.history:type_name -> api.v1alpha1.wfm.HistoricalDataInterval
	520, // 78: api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq.profile_tod:type_name -> api.commons.ProfileTOD
	521, // 79: api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq.profile_woms:type_name -> api.commons.ProfileWOMS
	522, // 80: api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes.profile_dow:type_name -> api.commons.ProfileDOW
	523, // 81: api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes.profile_moy:type_name -> api.commons.ProfileMOY
	524, // 82: api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq.datetime_range:type_name -> api.commons.DatetimeRange
	511, // 83: api.v1alpha1.wfm.CallCenterNode.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	525, // 84: api.v1alpha1.wfm.CallCenterNode.time_zone_val:type_name -> api.commons.TimeZone
	107, // 85: api.v1alpha1.wfm.CallCenterNode.member_client_nodes:type_name -> api.v1alpha1.wfm.ClientNode
	132, // 86: api.v1alpha1.wfm.CallCenterNode.member_non_skill_activities:type_name -> api.v1alpha1.wfm.NonSkillActivity
	210, // 87: api.v1alpha1.wfm.CallCenterNode.member_open_times_patterns:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	221, // 88: api.v1alpha1.wfm.CallCenterNode.member_agent_availability_patterns:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	125, // 89: api.v1alpha1.wfm.CallCenterNode.member_constraint_rules:type_name -> api.v1alpha1.wfm.ConstraintRule
	156, // 90: api.v1alpha1.wfm.CallCenterNode.member_agent_groups:type_name -> api.v1alpha1.wfm.AgentGroup
	526, // 91: api.v1alpha1.wfm.CallCenterNode.origin_sid:type_name -> google.protobuf.Int64Value
	513, // 92: api.v1alpha1.wfm.CallCenterNode.shrinkage:type_name -> google.protobuf.FloatValue
	104, // 93: api.v1alpha1.wfm.UpdateCallCenterNodeReq.node:type_name -> api.v1alpha1.wfm.CallCenterNode
	511, // 94: api.v1alpha1.wfm.ClientNode.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	525, // 95: api.v1alpha1.wfm.ClientNode.time_zone_val:type_name -> api.commons.TimeZone
	112, // 96: api.v1alpha1.wfm.ClientNode.member_location_nodes:type_name -> api.v1alpha1.wfm.LocationNode
	132, // 97: api.v1alpha1.wfm.ClientNode.member_non_skill_activities:type_name -> api.v1alpha1.wfm.NonSkillActivity
	210, // 98: api.v1alpha1.wfm.ClientNode.member_open_times_patterns:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	221, // 99: api.v1alpha1.wfm.ClientNode.member_agent_availability_patterns:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	125, // 100: api.v1alpha1.wfm.ClientNode.member_constraint_rules:type_name -> api.v1alpha1.wfm.ConstraintRule
	156, // 101: api.v1alpha1.wfm.ClientNode.member_agent_groups:type_name -> api.v1alpha1.wfm.AgentGroup
	526, // 102: api.v1alpha1.wfm.ClientNode.origin_sid:type_name -> google.protobuf.Int64Value
	513, // 103: api.v1alpha1.wfm.ClientNode.shrinkage:type_name -> google.protobuf.FloatValue
	107, // 104: api.v1alpha1.wfm.CreateClientNodeReq.node:type_name -> api.v1alpha1.wfm.ClientNode
	107, // 105: api.v1alpha1.wfm.UpdateClientNodeReq.node:type_name -> api.v1alpha1.wfm.ClientNode
	511, // 106: api.v1alpha1.wfm.LocationNode.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	525, // 107: api.v1alpha1.wfm.LocationNode.time_zone_val:type_name -> api.commons.TimeZone
	117, // 108: api.v1alpha1.wfm.LocationNode.member_program_nodes:type_name -> api.v1alpha1.wfm.ProgramNode
	132, // 109: api.v1alpha1.wfm.LocationNode.member_non_skill_activities:type_name -> api.v1alpha1.wfm.NonSkillActivity
	210, // 110: api.v1alpha1.wfm.LocationNode.member_open_times_patterns:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	221, // 111: api.v1alpha1.wfm.LocationNode.member_agent_availability_patterns:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	125, // 112: api.v1alpha1.wfm.LocationNode.member_constraint_rules:type_name -> api.v1alpha1.wfm.ConstraintRule
	156, // 113: api.v1alpha1.wfm.LocationNode.member_agent_groups:type_name -> api.v1alpha1.wfm.AgentGroup
	526, // 114: api.v1alpha1.wfm.LocationNode.origin_sid:type_name -> google.protobuf.Int64Value
	513, // 115: api.v1alpha1.wfm.LocationNode.shrinkage:type_name -> google.protobuf.FloatValue
	112, // 116: api.v1alpha1.wfm.CreateLocationNodeReq.node:type_name -> api.v1alpha1.wfm.LocationNode
	112, // 117: api.v1alpha1.wfm.UpdateLocationNodeReq.location_node:type_name -> api.v1alpha1.wfm.LocationNode
	511, // 118: api.v1alpha1.wfm.ProgramNode.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	193, // 119: api.v1alpha1.wfm.ProgramNode.member_shift_templates:type_name -> api.v1alpha1.wfm.ShiftTemplate
	132, // 120: api.v1alpha1.wfm.ProgramNode.member_non_skill_activities:type_name -> api.v1alpha1.wfm.NonSkillActivity
	210, // 121: api.v1alpha1.wfm.ProgramNode.member_open_times_patterns:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	221, // 122: api.v1alpha1.wfm.ProgramNode.member_agent_availability_patterns:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	125, // 123: api.v1alpha1.wfm.ProgramNode.member_constraint_rules:type_name -> api.v1alpha1.wfm.ConstraintRule
	156, // 124: api.v1alpha1.wfm.ProgramNode.member_agent_groups:type_name -> api.v1alpha1.wfm.AgentGroup
	233, // 125: api.v1alpha1.wfm.ProgramNode.member_skill_proficiencies:type_name -> api.v1alpha1.wfm.SkillProficiency
	526, // 126: api.v1alpha1.wfm.ProgramNode.origin_sid:type_name -> google.protobuf.Int64Value
	514, // 127: api.v1alpha1.wfm.ProgramNode.skill_profile_category:type_name -> api.commons.SkillProfileCategory
	513, // 128: api.v1alpha1.wfm.ProgramNode.shrinkage:type_name -> google.protobuf.FloatValue
	117, // 129: api.v1alpha1.wfm.CreateProgramNodeReq.node:type_name -> api.v1alpha1.wfm.ProgramNode
	117, // 130: api.v1alpha1.wfm.UpdateProgramNodeReq.program_node:type_name -> api.v1alpha1.wfm.ProgramNode
	117, // 131: api.v1alpha1.wfm.ListProgramNodesBySidRes.program_nodes:type_name -> api.v1alpha1.wfm.ProgramNode
	527, // 132: api.v1alpha1.wfm.ParentEntity.parent_type:type_name -> api.commons.ConfigEntityType
	124, // 133: api.v1alpha1.wfm.ConstraintRule.parent_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	528, // 134: api.v1alpha1.wfm.ConstraintRule.val_unit:type_name -> api.commons.ConstraintTimeUnit
	528, // 135: api.v1alpha1.wfm.ConstraintRule.per_unit:type_name -> api.commons.ConstraintTimeUnit
	529, // 136: api.v1alpha1.wfm.ConstraintRule.rule_type:type_name -> api.commons.ConstraintRuleType
	141, // 137: api.v1alpha1.wfm.ConstraintRule.scheduling_activity:type_name -> api.v1alpha1.wfm.SchedulingActivity
	233, // 138: api.v1alpha1.wfm.ConstraintRule.skill_proficiency:type_name -> api.v1alpha1.wfm.SkillProficiency
	125, // 139: api.v1alpha1.wfm.CreateConstraintRuleReq.constraint_rule:type_name -> api.v1alpha1.wfm.ConstraintRule
	125, // 140: api.v1alpha1.wfm.UpdateConstraintRuleReq.constraint_rule:type_name -> api.v1alpha1.wfm.ConstraintRule
	511, // 141: api.v1alpha1.wfm.NonSkillActivity.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	124, // 142: api.v1alpha1.wfm.NonSkillActivity.inherited_from_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	132, // 143: api.v1alpha1.wfm.CreateNonSkillActivityReq.non_skill_activity:type_name -> api.v1alpha1.wfm.NonSkillActivity
	132, // 144: api.v1alpha1.wfm.UpdateNonSkillActivityReq.non_skill_activity:type_name -> api.v1alpha1.wfm.NonSkillActivity
	132, // 145: api.v1alpha1.wfm.ListNonSkillActivitiesRes.non_skill_activities:type_name -> api.v1alpha1.wfm.NonSkillActivity
	124, // 146: api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq.associated_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	530, // 147: api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq.relationship_type:type_name -> api.commons.ConfigRelationshipType
	526, // 148: api.v1alpha1.wfm.SchedulingActivity.activity_sid:type_name -> google.protobuf.Int64Value
	132, // 149: api.v1alpha1.wfm.SchedulingActivity.member_non_skill_activity:type_name -> api.v1alpha1.wfm.NonSkillActivity
	531, // 150: api.v1alpha1.wfm.SchedulingActivity.activity_classification:type_name -> api.commons.SchedulingActivityClassification
	124, // 151: api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq.parent_of_rule:type_name -> api.v1alpha1.wfm.ParentEntity
	141, // 152: api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes.scheduling_activities:type_name -> api.v1alpha1.wfm.SchedulingActivity
	141, // 153: api.v1alpha1.wfm.ListSchedulingActivitiesResponse.scheduling_activities:type_name -> api.v1alpha1.wfm.SchedulingActivity
	141, // 154: api.v1alpha1.wfm.GetOnCallSchedulingActivityRes.on_call_scheduling_activity:type_name -> api.v1alpha1.wfm.SchedulingActivity
	124, // 155: api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest.parent_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	531, // 156: api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest.scheduling_activity_classifications:type_name -> api.commons.SchedulingActivityClassification
	210, // 157: api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse.open_times_patterns:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	221, // 158: api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse.agent_availability_patterns:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	141, // 159: api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse.scheduling_activity:type_name -> api.v1alpha1.wfm.SchedulingActivity
	124, // 160: api.v1alpha1.wfm.AgentGroup.parent_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	511, // 161: api.v1alpha1.wfm.AgentGroup.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	125, // 162: api.v1alpha1.wfm.AgentGroup.member_constraint_rules:type_name -> api.v1alpha1.wfm.ConstraintRule
	163, // 163: api.v1alpha1.wfm.AgentGroup.member_wfm_agents:type_name -> api.v1alpha1.wfm.WFMAgent
	233, // 164: api.v1alpha1.wfm.AgentGroup.member_skill_proficiencies:type_name -> api.v1alpha1.wfm.SkillProficiency
	221, // 165: api.v1alpha1.wfm.AgentGroup.member_agent_availability_patterns:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	156, // 166: api.v1alpha1.wfm.CreateAgentGroupReq.agent_group:type_name -> api.v1alpha1.wfm.AgentGroup
	124, // 167: api.v1alpha1.wfm.ListAgentScheduleGroupsRequest.entity:type_name -> api.v1alpha1.wfm.ParentEntity
	156, // 168: api.v1alpha1.wfm.ListAgentScheduleGroupsResponse.agent_groups:type_name -> api.v1alpha1.wfm.AgentGroup
	156, // 169: api.v1alpha1.wfm.UpdateAgentGroupReq.agent_group:type_name -> api.v1alpha1.wfm.AgentGroup
	526, // 170: api.v1alpha1.wfm.WFMAgent.tcn_agent_sid:type_name -> google.protobuf.Int64Value
	511, // 171: api.v1alpha1.wfm.WFMAgent.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	125, // 172: api.v1alpha1.wfm.WFMAgent.member_constraint_rules:type_name -> api.v1alpha1.wfm.ConstraintRule
	233, // 173: api.v1alpha1.wfm.WFMAgent.member_skill_proficiencies:type_name -> api.v1alpha1.wfm.SkillProficiency
	221, // 174: api.v1alpha1.wfm.WFMAgent.member_agent_availability_patterns:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	511, // 175: api.v1alpha1.wfm.WFMAgent.created_at:type_name -> google.protobuf.Timestamp
	526, // 176: api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest.wfm_agent_sid_to_copy_agent_group_associations:type_name -> google.protobuf.Int64Value
	163, // 177: api.v1alpha1.wfm.UpdateWFMAgentReq.wfm_agent:type_name -> api.v1alpha1.wfm.WFMAgent
	163, // 178: api.v1alpha1.wfm.ListAllWFMAgentsRes.wfm_agents:type_name -> api.v1alpha1.wfm.WFMAgent
	487, // 179: api.v1alpha1.wfm.ListAllWFMAgentsRes.agent_groups_by_agent:type_name -> api.v1alpha1.wfm.ListAllWFMAgentsRes.AgentGroupsByAgent
	163, // 180: api.v1alpha1.wfm.ListCandidateWFMAgentsRes.wfm_agents:type_name -> api.v1alpha1.wfm.WFMAgent
	511, // 181: api.v1alpha1.wfm.ListUngroupedWFMAgentsReq.created_after_datetime:type_name -> google.protobuf.Timestamp
	163, // 182: api.v1alpha1.wfm.ListUngroupedWFMAgentsRes.wfm_agents:type_name -> api.v1alpha1.wfm.WFMAgent
	488, // 183: api.v1alpha1.wfm.ListWFMAgentSidsRes.sids:type_name -> api.v1alpha1.wfm.ListWFMAgentSidsRes.SidsEntry
	163, // 184: api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse.wfm_agents:type_name -> api.v1alpha1.wfm.WFMAgent
	250, // 185: api.v1alpha1.wfm.BuildAgentDiagnosticsRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostics
	526, // 186: api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse.unassigned_agent_sid:type_name -> google.protobuf.Int64Value
	532, // 187: api.v1alpha1.wfm.DOWPlacement.placement_type:type_name -> api.commons.DOWPlacementType
	533, // 188: api.v1alpha1.wfm.DOWPlacement.day_of_week:type_name -> api.commons.DayOfWeek
	511, // 189: api.v1alpha1.wfm.ShiftTemplate.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	202, // 190: api.v1alpha1.wfm.ShiftTemplate.member_placement_rules:type_name -> api.v1alpha1.wfm.PlacementRule
	192, // 191: api.v1alpha1.wfm.ShiftTemplate.DOW_placements:type_name -> api.v1alpha1.wfm.DOWPlacement
	156, // 192: api.v1alpha1.wfm.ShiftTemplate.member_agent_groups:type_name -> api.v1alpha1.wfm.AgentGroup
	193, // 193: api.v1alpha1.wfm.CreateShiftTemplateReq.shift_template:type_name -> api.v1alpha1.wfm.ShiftTemplate
	193, // 194: api.v1alpha1.wfm.UpdateShiftTemplateReq.shift_template:type_name -> api.v1alpha1.wfm.ShiftTemplate
	193, // 195: api.v1alpha1.wfm.ListShiftTemplatesBySidsRes.shift_templates:type_name -> api.v1alpha1.wfm.ShiftTemplate
	249, // 196: api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	141, // 197: api.v1alpha1.wfm.PlacementRule.member_scheduling_activity:type_name -> api.v1alpha1.wfm.SchedulingActivity
	202, // 198: api.v1alpha1.wfm.CreatePlacementRuleReq.placement_rule:type_name -> api.v1alpha1.wfm.PlacementRule
	202, // 199: api.v1alpha1.wfm.UpdatePlacementRuleReq.placement_rule:type_name -> api.v1alpha1.wfm.PlacementRule
	489, // 200: api.v1alpha1.wfm.DatetimePattern.week_maps:type_name -> api.v1alpha1.wfm.DatetimePattern.WeekMap
	490, // 201: api.v1alpha1.wfm.DatetimePattern.calendar_items:type_name -> api.v1alpha1.wfm.DatetimePattern.CalendarItem
	124, // 202: api.v1alpha1.wfm.OpenTimesPattern.parent_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	209, // 203: api.v1alpha1.wfm.OpenTimesPattern.datetime_pattern:type_name -> api.v1alpha1.wfm.DatetimePattern
	526, // 204: api.v1alpha1.wfm.OpenTimesPattern.scheduling_activity_sid:type_name -> google.protobuf.Int64Value
	210, // 205: api.v1alpha1.wfm.CreateOpenTimesPatternReq.open_times_pattern:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	210, // 206: api.v1alpha1.wfm.UpdateOpenTimesPatternReq.open_times_pattern:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	124, // 207: api.v1alpha1.wfm.GetOpenTimesBitmapsReq.node_to_check:type_name -> api.v1alpha1.wfm.ParentEntity
	524, // 208: api.v1alpha1.wfm.GetOpenTimesBitmapsReq.datetime_range:type_name -> api.commons.DatetimeRange
	534, // 209: api.v1alpha1.wfm.GetOpenTimesBitmapsReq.bitmap_type:type_name -> api.commons.BitmapType
	535, // 210: api.v1alpha1.wfm.GetOpenTimesBitmapsRes.inherited_bitmap:type_name -> api.commons.OpenTimesOption
	535, // 211: api.v1alpha1.wfm.GetOpenTimesBitmapsRes.own_bitmap:type_name -> api.commons.OpenTimesOption
	535, // 212: api.v1alpha1.wfm.GetOpenTimesBitmapsRes.resulting_bitmap:type_name -> api.commons.OpenTimesOption
	524, // 213: api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest.datetime_range:type_name -> api.commons.DatetimeRange
	124, // 214: api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	524, // 215: api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse.open_close_ranges:type_name -> api.commons.DatetimeRange
	124, // 216: api.v1alpha1.wfm.AgentAvailabilityPattern.parent_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	209, // 217: api.v1alpha1.wfm.AgentAvailabilityPattern.datetime_pattern:type_name -> api.v1alpha1.wfm.DatetimePattern
	526, // 218: api.v1alpha1.wfm.AgentAvailabilityPattern.scheduling_activity_sid:type_name -> google.protobuf.Int64Value
	221, // 219: api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq.agent_availability_pattern:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	221, // 220: api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq.agent_availability_pattern:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	536, // 221: api.v1alpha1.wfm.AvailabilityBitmapSet.own_bitmap:type_name -> api.commons.AvailabilityOption
	536, // 222: api.v1alpha1.wfm.AvailabilityBitmapSet.inherited_bitmap:type_name -> api.commons.AvailabilityOption
	536, // 223: api.v1alpha1.wfm.AvailabilityBitmapSet.resulting_bitmap:type_name -> api.commons.AvailabilityOption
	124, // 224: api.v1alpha1.wfm.AvailabilityBitmapSet.parent_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	124, // 225: api.v1alpha1.wfm.GetAvailabilityBitmapsReq.entities_to_check:type_name -> api.v1alpha1.wfm.ParentEntity
	524, // 226: api.v1alpha1.wfm.GetAvailabilityBitmapsReq.datetime_range:type_name -> api.commons.DatetimeRange
	534, // 227: api.v1alpha1.wfm.GetAvailabilityBitmapsReq.bitmap_type:type_name -> api.commons.BitmapType
	228, // 228: api.v1alpha1.wfm.GetAvailabilityBitmapsRes.bitmaps:type_name -> api.v1alpha1.wfm.AvailabilityBitmapSet
	124, // 229: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq.node:type_name -> api.v1alpha1.wfm.ParentEntity
	530, // 230: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq.association_type:type_name -> api.commons.ConfigRelationshipType
	124, // 231: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes.nodes_affected:type_name -> api.v1alpha1.wfm.ParentEntity
	492, // 232: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes.rules_using_activity:type_name -> api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes.EntityMapping
	526, // 233: api.v1alpha1.wfm.SkillProficiency.preferred_skill_profile_sid:type_name -> google.protobuf.Int64Value
	124, // 234: api.v1alpha1.wfm.SkillProficiency.parent_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	233, // 235: api.v1alpha1.wfm.CreateSkillProficienciesReq.proficiencies:type_name -> api.v1alpha1.wfm.SkillProficiency
	233, // 236: api.v1alpha1.wfm.UpdateSkillProficienciesReq.skill_proficiencies:type_name -> api.v1alpha1.wfm.SkillProficiency
	511, // 237: api.v1alpha1.wfm.ScheduleScenario.creation_datetime:type_name -> google.protobuf.Timestamp
	526, // 238: api.v1alpha1.wfm.ScheduleScenario.copied_from_scenario_sid:type_name -> google.protobuf.Int64Value
	524, // 239: api.v1alpha1.wfm.ScheduleScenario.schedule_range:type_name -> api.commons.DatetimeRange
	511, // 240: api.v1alpha1.wfm.ScheduleScenario.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	524, // 241: api.v1alpha1.wfm.CopyScenarioReq.schedule_range:type_name -> api.commons.DatetimeRange
	240, // 242: api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq.schedule_scenario:type_name -> api.v1alpha1.wfm.ScheduleScenario
	525, // 243: api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq.time_zone_val:type_name -> api.commons.TimeZone
	514, // 244: api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq.skill_profile_category:type_name -> api.commons.SkillProfileCategory
	240, // 245: api.v1alpha1.wfm.UpdateScheduleScenarioReq.scheduleScenario:type_name -> api.v1alpha1.wfm.ScheduleScenario
	527, // 246: api.v1alpha1.wfm.ListConfigEntitiesReq.entity_type:type_name -> api.commons.ConfigEntityType
	124, // 247: api.v1alpha1.wfm.ListConfigEntitiesReq.belongs_to_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	104, // 248: api.v1alpha1.wfm.ListConfigEntitiesRes.call_center_node:type_name -> api.v1alpha1.wfm.CallCenterNode
	493, // 249: api.v1alpha1.wfm.ListConfigEntitiesRes.client_nodes:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.ClientNodeEntities
	494, // 250: api.v1alpha1.wfm.ListConfigEntitiesRes.location_nodes:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.LocationNodeEntities
	495, // 251: api.v1alpha1.wfm.ListConfigEntitiesRes.program_nodes:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.ProgramNodeEntities
	496, // 252: api.v1alpha1.wfm.ListConfigEntitiesRes.agent_groups:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.AgentGroupEntities
	497, // 253: api.v1alpha1.wfm.ListConfigEntitiesRes.shift_templates:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.ShiftTemplateEntities
	498, // 254: api.v1alpha1.wfm.ListConfigEntitiesRes.wfm_agents:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.WFMAgentEntities
	499, // 255: api.v1alpha1.wfm.ListConfigEntitiesRes.placement_rules:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.PlacementRuleEntities
	500, // 256: api.v1alpha1.wfm.ListConfigEntitiesRes.constraint_rules:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.ConstraintRuleEntities
	501, // 257: api.v1alpha1.wfm.ListConfigEntitiesRes.non_skill_activities:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.NonSkillActivityEntities
	502, // 258: api.v1alpha1.wfm.ListConfigEntitiesRes.agent_availability_patterns:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.AgentAvailabilityPatternEntities
	503, // 259: api.v1alpha1.wfm.ListConfigEntitiesRes.open_times_patterns:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.OpenTimesPatternEntities
	141, // 260: api.v1alpha1.wfm.ListConfigEntitiesRes.scheduling_activity:type_name -> api.v1alpha1.wfm.SchedulingActivity
	504, // 261: api.v1alpha1.wfm.ListConfigEntitiesRes.skill_proficiencies:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.SkillProficiencyEntities
	505, // 262: api.v1alpha1.wfm.ListConfigEntitiesRes.schedule_scenarios:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.ScheduleScenarioEntities
	537, // 263: api.v1alpha1.wfm.Diagnostic.level:type_name -> api.commons.DiagnosticLevel
	538, // 264: api.v1alpha1.wfm.Diagnostic.code:type_name -> api.commons.DiagnosticCode
	124, // 265: api.v1alpha1.wfm.Diagnostic.source_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	124, // 266: api.v1alpha1.wfm.Diagnostics.source_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	249, // 267: api.v1alpha1.wfm.Diagnostics.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	124, // 268: api.v1alpha1.wfm.BuildNodeDiagnosticsReq.node_to_check:type_name -> api.v1alpha1.wfm.ParentEntity
	249, // 269: api.v1alpha1.wfm.BuildNodeDiagnosticsRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	124, // 270: api.v1alpha1.wfm.BuildNodeDiagnosticsRes.nodes_checked:type_name -> api.v1alpha1.wfm.ParentEntity
	249, // 271: api.v1alpha1.wfm.BuildGlobalDiagnosticsRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	124, // 272: api.v1alpha1.wfm.BuildGlobalDiagnosticsRes.nodes_checked:type_name -> api.v1alpha1.wfm.ParentEntity
	511, // 273: api.v1alpha1.wfm.PublishedSchedule.created_at:type_name -> google.protobuf.Timestamp
	511, // 274: api.v1alpha1.wfm.PublishedSchedule.last_updated_at:type_name -> google.protobuf.Timestamp
	270, // 275: api.v1alpha1.wfm.PublishedSchedule.shift_instances:type_name -> api.v1alpha1.wfm.ShiftInstance
	260, // 276: api.v1alpha1.wfm.PublishedSchedule.performance_metrics:type_name -> api.v1alpha1.wfm.PerformanceMetric
	262, // 277: api.v1alpha1.wfm.PublishedSchedule.performance_metrics_v2:type_name -> api.v1alpha1.wfm.PerformanceMetricV2
	511, // 278: api.v1alpha1.wfm.DraftSchedule.created_at:type_name -> google.protobuf.Timestamp
	511, // 279: api.v1alpha1.wfm.DraftSchedule.last_updated_at:type_name -> google.protobuf.Timestamp
	524, // 280: api.v1alpha1.wfm.DraftSchedule.datetime_range:type_name -> api.commons.DatetimeRange
	270, // 281: api.v1alpha1.wfm.DraftSchedule.shift_instances:type_name -> api.v1alpha1.wfm.ShiftInstance
	260, // 282: api.v1alpha1.wfm.DraftSchedule.performance_metrics:type_name -> api.v1alpha1.wfm.PerformanceMetric
	262, // 283: api.v1alpha1.wfm.DraftSchedule.performance_metrics_v2:type_name -> api.v1alpha1.wfm.PerformanceMetricV2
	524, // 284: api.v1alpha1.wfm.PerformanceMetricForSkillCollection.date_range:type_name -> api.commons.DatetimeRange
	539, // 285: api.v1alpha1.wfm.PerformanceMetricForSkillCollection.metric_type:type_name -> api.commons.PerformanceMetricType
	267, // 286: api.v1alpha1.wfm.PerformanceMetricForSkillCollection.fte_intervals:type_name -> api.v1alpha1.wfm.FTERequiredVsAchievedInterval
	266, // 287: api.v1alpha1.wfm.PerformanceMetricForSkillCollection.service_level_intervals:type_name -> api.v1alpha1.wfm.ServiceLevelInterval
	514, // 288: api.v1alpha1.wfm.PerformanceMetricForSkillCollection.skill_collection:type_name -> api.commons.SkillProfileCategory
	524, // 289: api.v1alpha1.wfm.PerformanceMetric.date_range:type_name -> api.commons.DatetimeRange
	539, // 290: api.v1alpha1.wfm.PerformanceMetric.metric_type:type_name -> api.commons.PerformanceMetricType
	267, // 291: api.v1alpha1.wfm.PerformanceMetric.fte_intervals:type_name -> api.v1alpha1.wfm.FTERequiredVsAchievedInterval
	266, // 292: api.v1alpha1.wfm.PerformanceMetric.service_level_intervals:type_name -> api.v1alpha1.wfm.ServiceLevelInterval
	259, // 293: api.v1alpha1.wfm.PerformanceMetric.metrics_by_skill_collection:type_name -> api.v1alpha1.wfm.PerformanceMetricForSkillCollection
	524, // 294: api.v1alpha1.wfm.PerformanceMetricForSkillCollectionV2.date_range:type_name -> api.commons.DatetimeRange
	539, // 295: api.v1alpha1.wfm.PerformanceMetricForSkillCollectionV2.metric_type:type_name -> api.commons.PerformanceMetricType
	268, // 296: api.v1alpha1.wfm.PerformanceMetricForSkillCollectionV2.fte_occupancy_intervals:type_name -> api.v1alpha1.wfm.FTERequiredVsAchievedOccupancyInterval
	266, // 297: api.v1alpha1.wfm.PerformanceMetricForSkillCollectionV2.service_level_intervals:type_name -> api.v1alpha1.wfm.ServiceLevelInterval
	514, // 298: api.v1alpha1.wfm.PerformanceMetricForSkillCollectionV2.skill_collection:type_name -> api.commons.SkillProfileCategory
	524, // 299: api.v1alpha1.wfm.PerformanceMetricV2.date_range:type_name -> api.commons.DatetimeRange
	539, // 300: api.v1alpha1.wfm.PerformanceMetricV2.metric_type:type_name -> api.commons.PerformanceMetricType
	268, // 301: api.v1alpha1.wfm.PerformanceMetricV2.fte_occupancy_intervals:type_name -> api.v1alpha1.wfm.FTERequiredVsAchievedOccupancyInterval
	266, // 302: api.v1alpha1.wfm.PerformanceMetricV2.service_level_intervals:type_name -> api.v1alpha1.wfm.ServiceLevelInterval
	261, // 303: api.v1alpha1.wfm.PerformanceMetricV2.metrics_by_skill_collection:type_name -> api.v1alpha1.wfm.PerformanceMetricForSkillCollectionV2
	264, // 304: api.v1alpha1.wfm.PerformanceMetricV3.metrics_all_skills:type_name -> api.v1alpha1.wfm.Basic_PerformanceMetricV3
	506, // 305: api.v1alpha1.wfm.PerformanceMetricV3.metrics_by_skill_collection:type_name -> api.v1alpha1.wfm.PerformanceMetricV3.MetricByCollection
	524, // 306: api.v1alpha1.wfm.Basic_PerformanceMetricV3.date_range:type_name -> api.commons.DatetimeRange
	265, // 307: api.v1alpha1.wfm.Basic_PerformanceMetricV3.metric_intervals:type_name -> api.v1alpha1.wfm.V3_MetricIntervalStat
	511, // 308: api.v1alpha1.wfm.V3_MetricIntervalStat.start_datetime:type_name -> google.protobuf.Timestamp
	511, // 309: api.v1alpha1.wfm.ServiceLevelInterval.start_datetime:type_name -> google.protobuf.Timestamp
	511, // 310: api.v1alpha1.wfm.FTERequiredVsAchievedInterval.start_datetime:type_name -> google.protobuf.Timestamp
	511, // 311: api.v1alpha1.wfm.FTERequiredVsAchievedOccupancyInterval.start_datetime:type_name -> google.protobuf.Timestamp
	511, // 312: api.v1alpha1.wfm.RequiredCallsInterval.start_datetime:type_name -> google.protobuf.Timestamp
	511, // 313: api.v1alpha1.wfm.ShiftInstance.start_datetime:type_name -> google.protobuf.Timestamp
	540, // 314: api.v1alpha1.wfm.ShiftInstance.schedule_type:type_name -> api.commons.ScheduleType
	272, // 315: api.v1alpha1.wfm.ShiftInstance.shift_segments:type_name -> api.v1alpha1.wfm.ShiftSegment
	193, // 316: api.v1alpha1.wfm.ShiftInstance.shift_template:type_name -> api.v1alpha1.wfm.ShiftTemplate
	514, // 317: api.v1alpha1.wfm.ShiftSegmentCallStat.skill_collection:type_name -> api.commons.SkillProfileCategory
	141, // 318: api.v1alpha1.wfm.ShiftSegment.scheduling_activity:type_name -> api.v1alpha1.wfm.SchedulingActivity
	271, // 319: api.v1alpha1.wfm.ShiftSegment.call_stats_by_skill_collection:type_name -> api.v1alpha1.wfm.ShiftSegmentCallStat
	524, // 320: api.v1alpha1.wfm.GetPublishedScheduleReq.datetime_range:type_name -> api.commons.DatetimeRange
	124, // 321: api.v1alpha1.wfm.GetPublishedScheduleReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	257, // 322: api.v1alpha1.wfm.GetPublishedScheduleRes.published_schedule:type_name -> api.v1alpha1.wfm.PublishedSchedule
	524, // 323: api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq.viewing_range:type_name -> api.commons.DatetimeRange
	269, // 324: api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes.required_calls_intervals:type_name -> api.v1alpha1.wfm.RequiredCallsInterval
	524, // 325: api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq.viewing_range:type_name -> api.commons.DatetimeRange
	269, // 326: api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes.required_calls_intervals:type_name -> api.v1alpha1.wfm.RequiredCallsInterval
	524, // 327: api.v1alpha1.wfm.CreateDraftScheduleReq.scheduling_range:type_name -> api.commons.DatetimeRange
	524, // 328: api.v1alpha1.wfm.UpdateDraftScheduleReq.datetime_range:type_name -> api.commons.DatetimeRange
	258, // 329: api.v1alpha1.wfm.UpdateDraftScheduleRes.draft_schedule:type_name -> api.v1alpha1.wfm.DraftSchedule
	524, // 330: api.v1alpha1.wfm.BuildDraftScheduleReq.schedule_scenario_scheduling_range:type_name -> api.commons.DatetimeRange
	124, // 331: api.v1alpha1.wfm.BuildDraftScheduleReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	332, // 332: api.v1alpha1.wfm.BuildDraftScheduleReq.scheduling_target:type_name -> api.v1alpha1.wfm.SchedulingTarget
	258, // 333: api.v1alpha1.wfm.BuildDraftScheduleRes.draft_schedule:type_name -> api.v1alpha1.wfm.DraftSchedule
	249, // 334: api.v1alpha1.wfm.BuildDraftScheduleRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	541, // 335: api.v1alpha1.wfm.BuildDraftScheduleRes.scheduling_result_metric:type_name -> api.commons.SchedulingResultMetric
	511, // 336: api.v1alpha1.wfm.PollBuildInProgressResponse.build_start_datetime:type_name -> google.protobuf.Timestamp
	511, // 337: api.v1alpha1.wfm.PollBuildInProgressResponse.build_end_datetime:type_name -> google.protobuf.Timestamp
	542, // 338: api.v1alpha1.wfm.PollBuildInProgressResponse.build_status:type_name -> api.commons.BuildDraftStatus
	249, // 339: api.v1alpha1.wfm.PollBuildInProgressResponse.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	124, // 340: api.v1alpha1.wfm.PublishDraftScheduleReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	524, // 341: api.v1alpha1.wfm.PublishDraftScheduleReq.datetime_range:type_name -> api.commons.DatetimeRange
	257, // 342: api.v1alpha1.wfm.PublishDraftScheduleRes.published_schedule:type_name -> api.v1alpha1.wfm.PublishedSchedule
	249, // 343: api.v1alpha1.wfm.PublishDraftScheduleRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	524, // 344: api.v1alpha1.wfm.ResetDraftScheduleReq.datetime_range:type_name -> api.commons.DatetimeRange
	249, // 345: api.v1alpha1.wfm.ResetDraftScheduleRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	524, // 346: api.v1alpha1.wfm.GetDraftScheduleReq.datetime_range:type_name -> api.commons.DatetimeRange
	124, // 347: api.v1alpha1.wfm.GetDraftScheduleReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	258, // 348: api.v1alpha1.wfm.GetDraftScheduleRes.draft_schedule:type_name -> api.v1alpha1.wfm.DraftSchedule
	524, // 349: api.v1alpha1.wfm.ListDraftSchedulesReq.datetime_range:type_name -> api.commons.DatetimeRange
	258, // 350: api.v1alpha1.wfm.ListDraftSchedulesRes.draft_schedules:type_name -> api.v1alpha1.wfm.DraftSchedule
	543, // 351: api.v1alpha1.wfm.ClearScheduleReq.schedule_selector:type_name -> api.commons.ScheduleSelector
	124, // 352: api.v1alpha1.wfm.ClearScheduleReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	524, // 353: api.v1alpha1.wfm.ClearScheduleReq.datetime_range:type_name -> api.commons.DatetimeRange
	249, // 354: api.v1alpha1.wfm.ClearScheduleRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	270, // 355: api.v1alpha1.wfm.ListShiftInstancesBySidRes.shift_instances:type_name -> api.v1alpha1.wfm.ShiftInstance
	543, // 356: api.v1alpha1.wfm.CopyScheduleToScheduleReq.source_schedule_selector:type_name -> api.commons.ScheduleSelector
	543, // 357: api.v1alpha1.wfm.CopyScheduleToScheduleReq.destination_schedule_selector:type_name -> api.commons.ScheduleSelector
	124, // 358: api.v1alpha1.wfm.CopyScheduleToScheduleReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	524, // 359: api.v1alpha1.wfm.CopyScheduleToScheduleReq.datetime_range:type_name -> api.commons.DatetimeRange
	249, // 360: api.v1alpha1.wfm.CopyScheduleToScheduleRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	511, // 361: api.v1alpha1.wfm.CreateShiftInstanceReq.start_datetime:type_name -> google.protobuf.Timestamp
	526, // 362: api.v1alpha1.wfm.CreateShiftInstanceReq.wfm_agent_sid:type_name -> google.protobuf.Int64Value
	539, // 363: api.v1alpha1.wfm.CreateShiftInstanceReq.metric_types:type_name -> api.commons.PerformanceMetricType
	270, // 364: api.v1alpha1.wfm.CreateShiftInstanceRes.shift_instance:type_name -> api.v1alpha1.wfm.ShiftInstance
	260, // 365: api.v1alpha1.wfm.CreateShiftInstanceRes.performance_metrics:type_name -> api.v1alpha1.wfm.PerformanceMetric
	262, // 366: api.v1alpha1.wfm.CreateShiftInstanceRes.performance_metrics_v2:type_name -> api.v1alpha1.wfm.PerformanceMetricV2
	511, // 367: api.v1alpha1.wfm.CreateShiftInstanceV2Req.start_datetime:type_name -> google.protobuf.Timestamp
	270, // 368: api.v1alpha1.wfm.CreateShiftInstanceV2Res.shift_instances:type_name -> api.v1alpha1.wfm.ShiftInstance
	249, // 369: api.v1alpha1.wfm.CreateShiftInstanceV2Res.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	270, // 370: api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest.shift_instance:type_name -> api.v1alpha1.wfm.ShiftInstance
	270, // 371: api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse.shift_instance:type_name -> api.v1alpha1.wfm.ShiftInstance
	249, // 372: api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	511, // 373: api.v1alpha1.wfm.SplitShiftInstanceReq.time_to_split:type_name -> google.protobuf.Timestamp
	270, // 374: api.v1alpha1.wfm.SplitShiftInstanceRes.shift_instances:type_name -> api.v1alpha1.wfm.ShiftInstance
	249, // 375: api.v1alpha1.wfm.SplitShiftInstanceRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	270, // 376: api.v1alpha1.wfm.SwapShiftInstancesRes.shift_instances:type_name -> api.v1alpha1.wfm.ShiftInstance
	249, // 377: api.v1alpha1.wfm.SwapShiftInstancesRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	511, // 378: api.v1alpha1.wfm.UpdateShiftInstanceReq.start_datetime:type_name -> google.protobuf.Timestamp
	526, // 379: api.v1alpha1.wfm.UpdateShiftInstanceReq.wfm_agent_sid:type_name -> google.protobuf.Int64Value
	539, // 380: api.v1alpha1.wfm.UpdateShiftInstanceReq.metric_types:type_name -> api.commons.PerformanceMetricType
	270, // 381: api.v1alpha1.wfm.UpdateShiftInstanceRes.shift_instance:type_name -> api.v1alpha1.wfm.ShiftInstance
	260, // 382: api.v1alpha1.wfm.UpdateShiftInstanceRes.performance_metrics:type_name -> api.v1alpha1.wfm.PerformanceMetric
	262, // 383: api.v1alpha1.wfm.UpdateShiftInstanceRes.performance_metrics_v2:type_name -> api.v1alpha1.wfm.PerformanceMetricV2
	511, // 384: api.v1alpha1.wfm.UpdateShiftInstanceV2Req.start_datetime:type_name -> google.protobuf.Timestamp
	270, // 385: api.v1alpha1.wfm.UpdateShiftInstanceV2Res.shift_instance:type_name -> api.v1alpha1.wfm.ShiftInstance
	249, // 386: api.v1alpha1.wfm.UpdateShiftInstanceV2Res.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	270, // 387: api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest.shift_instance:type_name -> api.v1alpha1.wfm.ShiftInstance
	270, // 388: api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse.shift_instance:type_name -> api.v1alpha1.wfm.ShiftInstance
	249, // 389: api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	543, // 390: api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq.destination_schedule:type_name -> api.commons.ScheduleSelector
	249, // 391: api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	543, // 392: api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq.schedule_selector:type_name -> api.commons.ScheduleSelector
	524, // 393: api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq.datetime_range:type_name -> api.commons.DatetimeRange
	543, // 394: api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest.schedule_selector:type_name -> api.commons.ScheduleSelector
	524, // 395: api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest.datetime_range:type_name -> api.commons.DatetimeRange
	124, // 396: api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	272, // 397: api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes.shift_segments:type_name -> api.v1alpha1.wfm.ShiftSegment
	539, // 398: api.v1alpha1.wfm.PerformanceMetricParameter.metric_type:type_name -> api.commons.PerformanceMetricType
	526, // 399: api.v1alpha1.wfm.PerformanceMetricParameter.service_level_target_duration_seconds:type_name -> google.protobuf.Int64Value
	543, // 400: api.v1alpha1.wfm.GetPerformanceMetricsReq.schedule_selector:type_name -> api.commons.ScheduleSelector
	124, // 401: api.v1alpha1.wfm.GetPerformanceMetricsReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	524, // 402: api.v1alpha1.wfm.GetPerformanceMetricsReq.datetime_range:type_name -> api.commons.DatetimeRange
	329, // 403: api.v1alpha1.wfm.GetPerformanceMetricsReq.metric_params:type_name -> api.v1alpha1.wfm.PerformanceMetricParameter
	260, // 404: api.v1alpha1.wfm.GetPerformanceMetricsRes.performance_metrics:type_name -> api.v1alpha1.wfm.PerformanceMetric
	262, // 405: api.v1alpha1.wfm.GetPerformanceMetricsRes.performance_metrics_v2:type_name -> api.v1alpha1.wfm.PerformanceMetricV2
	263, // 406: api.v1alpha1.wfm.GetPerformanceMetricsRes.performance_metrics_v3:type_name -> api.v1alpha1.wfm.PerformanceMetricV3
	249, // 407: api.v1alpha1.wfm.GetPerformanceMetricsRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	544, // 408: api.v1alpha1.wfm.SchedulingTarget.scheduling_target_type:type_name -> api.commons.SchedulingTargetType
	526, // 409: api.v1alpha1.wfm.SchedulingTarget.service_level_target_duration_seconds:type_name -> google.protobuf.Int64Value
	124, // 410: api.v1alpha1.wfm.SchedulingTarget.node_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	332, // 411: api.v1alpha1.wfm.SetSchedulingTargetReq.scheduling_target:type_name -> api.v1alpha1.wfm.SchedulingTarget
	124, // 412: api.v1alpha1.wfm.GetSchedulingTargetReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	332, // 413: api.v1alpha1.wfm.GetSchedulingTargetRes.inherited_scheduling_target:type_name -> api.v1alpha1.wfm.SchedulingTarget
	332, // 414: api.v1alpha1.wfm.GetSchedulingTargetRes.own_scheduling_target:type_name -> api.v1alpha1.wfm.SchedulingTarget
	332, // 415: api.v1alpha1.wfm.GetSchedulingTargetRes.resulting_scheduling_target:type_name -> api.v1alpha1.wfm.SchedulingTarget
	124, // 416: api.v1alpha1.wfm.DeleteSchedulingTargetReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	332, // 417: api.v1alpha1.wfm.GetDefaultSchedulingTargetRes.scheduling_target:type_name -> api.v1alpha1.wfm.SchedulingTarget
	332, // 418: api.v1alpha1.wfm.SetDefaultSchedulingTargetReq.scheduling_target:type_name -> api.v1alpha1.wfm.SchedulingTarget
	124, // 419: api.v1alpha1.wfm.ListRequiredCallsIntervalsReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	524, // 420: api.v1alpha1.wfm.ListRequiredCallsIntervalsReq.datetime_range:type_name -> api.commons.DatetimeRange
	269, // 421: api.v1alpha1.wfm.ListRequiredCallsIntervalsRes.required_calls_intervals:type_name -> api.v1alpha1.wfm.RequiredCallsInterval
	345, // 422: api.v1alpha1.wfm.TourShiftInstanceConfig.member_tour_shift_segment_configs:type_name -> api.v1alpha1.wfm.TourShiftSegmentConfig
	346, // 423: api.v1alpha1.wfm.TourWeekPattern.member_tour_shift_instance_configs:type_name -> api.v1alpha1.wfm.TourShiftInstanceConfig
	347, // 424: api.v1alpha1.wfm.TourPattern.member_tour_week_patterns:type_name -> api.v1alpha1.wfm.TourWeekPattern
	348, // 425: api.v1alpha1.wfm.TourPattern.member_tour_agent_collections:type_name -> api.v1alpha1.wfm.TourAgentCollection
	349, // 426: api.v1alpha1.wfm.GetTourPatternDiagnosticsReq.tour_pattern:type_name -> api.v1alpha1.wfm.TourPattern
	249, // 427: api.v1alpha1.wfm.GetTourPatternDiagnosticsRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	349, // 428: api.v1alpha1.wfm.UpsertTourPatternWithMembersReq.tour_pattern:type_name -> api.v1alpha1.wfm.TourPattern
	349, // 429: api.v1alpha1.wfm.UpsertTourPatternWithMembersRes.tour_pattern:type_name -> api.v1alpha1.wfm.TourPattern
	249, // 430: api.v1alpha1.wfm.UpsertTourPatternWithMembersRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	349, // 431: api.v1alpha1.wfm.GetTourPatternRes.tour_pattern:type_name -> api.v1alpha1.wfm.TourPattern
	349, // 432: api.v1alpha1.wfm.GetTourPatternWithMembersRes.tour_pattern:type_name -> api.v1alpha1.wfm.TourPattern
	347, // 433: api.v1alpha1.wfm.ListTourWeekPatternsRes.tour_week_patterns:type_name -> api.v1alpha1.wfm.TourWeekPattern
	346, // 434: api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq.tour_shift_instance_config:type_name -> api.v1alpha1.wfm.TourShiftInstanceConfig
	346, // 435: api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq.tour_shift_instance_config:type_name -> api.v1alpha1.wfm.TourShiftInstanceConfig
	346, // 436: api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes.tour_shift_instance_configs:type_name -> api.v1alpha1.wfm.TourShiftInstanceConfig
	345, // 437: api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq.tour_shift_segment_config:type_name -> api.v1alpha1.wfm.TourShiftSegmentConfig
	345, // 438: api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq.tour_shift_segment_config:type_name -> api.v1alpha1.wfm.TourShiftSegmentConfig
	345, // 439: api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes.tour_shift_segment_configs:type_name -> api.v1alpha1.wfm.TourShiftSegmentConfig
	348, // 440: api.v1alpha1.wfm.CreateTourAgentCollectionReq.tour_agent_collection:type_name -> api.v1alpha1.wfm.TourAgentCollection
	348, // 441: api.v1alpha1.wfm.UpdateTourAgentCollectionReq.tour_agent_collection:type_name -> api.v1alpha1.wfm.TourAgentCollection
	348, // 442: api.v1alpha1.wfm.ListTourAgentCollectionsRes.tour_agent_collections:type_name -> api.v1alpha1.wfm.TourAgentCollection
	507, // 443: api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes.wfm_agent_pairings:type_name -> api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes.SidMapping
	347, // 444: api.v1alpha1.wfm.GenerateTourWeekPatternsRes.tour_week_patterns:type_name -> api.v1alpha1.wfm.TourWeekPattern
	249, // 445: api.v1alpha1.wfm.GenerateTourWeekPatternsRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	524, // 446: api.v1alpha1.wfm.RemoveAgentFromScheduleRequest.datetime_range:type_name -> api.commons.DatetimeRange
	543, // 447: api.v1alpha1.wfm.RemoveAgentFromScheduleRequest.schedule_selector:type_name -> api.commons.ScheduleSelector
	124, // 448: api.v1alpha1.wfm.RemoveAgentFromScheduleRequest.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	270, // 449: api.v1alpha1.wfm.RemoveAgentFromScheduleResponse.updated_shifts:type_name -> api.v1alpha1.wfm.ShiftInstance
	524, // 450: api.v1alpha1.wfm.ListValidAgentsForReplacementReq.datetime_range:type_name -> api.commons.DatetimeRange
	543, // 451: api.v1alpha1.wfm.ListValidAgentsForReplacementReq.schedule_selector:type_name -> api.commons.ScheduleSelector
	124, // 452: api.v1alpha1.wfm.ListValidAgentsForReplacementReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	524, // 453: api.v1alpha1.wfm.ReplaceAgentOnScheduleReq.datetime_range:type_name -> api.commons.DatetimeRange
	543, // 454: api.v1alpha1.wfm.ReplaceAgentOnScheduleReq.schedule_selector:type_name -> api.commons.ScheduleSelector
	124, // 455: api.v1alpha1.wfm.ReplaceAgentOnScheduleReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	270, // 456: api.v1alpha1.wfm.ReplaceAgentOnScheduleRes.updated_shift_instances:type_name -> api.v1alpha1.wfm.ShiftInstance
	249, // 457: api.v1alpha1.wfm.ReplaceAgentOnScheduleRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	511, // 458: api.v1alpha1.wfm.ListAgentStatesForDayRequest.start_datetime:type_name -> google.protobuf.Timestamp
	511, // 459: api.v1alpha1.wfm.ListAgentStatesForDayRequest.end_datetime:type_name -> google.protobuf.Timestamp
	545, // 460: api.v1alpha1.wfm.ListAgentStatesForDayResponse.agent_states:type_name -> api.commons.AgentStateSequence
	546, // 461: api.v1alpha1.wfm.ListRealTimeManagementStatesResponse.states:type_name -> api.commons.RealTimeManagementState
	511, // 462: api.v1alpha1.wfm.ListAdherenceAgentStatesRequest.start_datetime:type_name -> google.protobuf.Timestamp
	511, // 463: api.v1alpha1.wfm.ListAdherenceAgentStatesRequest.end_datetime:type_name -> google.protobuf.Timestamp
	508, // 464: api.v1alpha1.wfm.ListAdherenceAgentStatesResponse.agent_states:type_name -> api.v1alpha1.wfm.ListAdherenceAgentStatesResponse.AgentStatesEntry
	511, // 465: api.v1alpha1.wfm.ListAdherenceAgentStatesResponse.latest_agent_state_datetime:type_name -> google.protobuf.Timestamp
	546, // 466: api.v1alpha1.wfm.RealTimeManagementStateColor.state:type_name -> api.commons.RealTimeManagementState
	406, // 467: api.v1alpha1.wfm.RealTimeManagementStateColor.color:type_name -> api.v1alpha1.wfm.RgbaColor
	546, // 468: api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest.state:type_name -> api.commons.RealTimeManagementState
	415, // 469: api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse.state_color:type_name -> api.v1alpha1.wfm.RealTimeManagementStateColor
	415, // 470: api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse.state_colors:type_name -> api.v1alpha1.wfm.RealTimeManagementStateColor
	546, // 471: api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest.state:type_name -> api.commons.RealTimeManagementState
	524, // 472: api.v1alpha1.wfm.CreateAgentLeavePetitionRequest.requested_datetime_ranges:type_name -> api.commons.DatetimeRange
	547, // 473: api.v1alpha1.wfm.CreateAgentLeavePetitionResponse.agent_leave_petition:type_name -> api.commons.AgentLeavePetition
	524, // 474: api.v1alpha1.wfm.ListAgentLeavePetitionsRequest.datetime_range:type_name -> api.commons.DatetimeRange
	547, // 475: api.v1alpha1.wfm.ListAgentLeavePetitionsResponse.agent_leave_petitions:type_name -> api.commons.AgentLeavePetition
	547, // 476: api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse.agent_leave_petition:type_name -> api.commons.AgentLeavePetition
	548, // 477: api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest.petition_status:type_name -> api.commons.AgentLeavePetitionStatus
	547, // 478: api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse.agent_leave_petition:type_name -> api.commons.AgentLeavePetition
	547, // 479: api.v1alpha1.wfm.CancelAgentLeavePetitionResponse.agent_leave_petition:type_name -> api.commons.AgentLeavePetition
	406, // 480: api.v1alpha1.wfm.CreateRgbaColorRequest.color:type_name -> api.v1alpha1.wfm.RgbaColor
	406, // 481: api.v1alpha1.wfm.ListRgbaColorsResponse.colors:type_name -> api.v1alpha1.wfm.RgbaColor
	406, // 482: api.v1alpha1.wfm.UpdateRgbaColorRequest.color:type_name -> api.v1alpha1.wfm.RgbaColor
	406, // 483: api.v1alpha1.wfm.UpdateRgbaColorResponse.color:type_name -> api.v1alpha1.wfm.RgbaColor
	549, // 484: api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest.notification_config:type_name -> api.commons.AdherenceRuleNotificationConfig
	549, // 485: api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest.notification_config:type_name -> api.commons.AdherenceRuleNotificationConfig
	550, // 486: api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest.notification_config_entry:type_name -> api.commons.AdherenceRuleNotificationConfigEntry
	550, // 487: api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest.notification_config_entry:type_name -> api.commons.AdherenceRuleNotificationConfigEntry
	549, // 488: api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse.notification_configs:type_name -> api.commons.AdherenceRuleNotificationConfig
	551, // 489: api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest.rule:type_name -> api.commons.AdherenceDepartmentalRule
	551, // 490: api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest.rule:type_name -> api.commons.AdherenceDepartmentalRule
	552, // 491: api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest.clause:type_name -> api.commons.AdherenceDepartmentalRuleClause
	552, // 492: api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest.clause:type_name -> api.commons.AdherenceDepartmentalRuleClause
	551, // 493: api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse.rules:type_name -> api.commons.AdherenceDepartmentalRule
	553, // 494: api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest.rule:type_name -> api.commons.AdherenceAgentRule
	553, // 495: api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest.rule:type_name -> api.commons.AdherenceAgentRule
	554, // 496: api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest.clause:type_name -> api.commons.AdherenceAgentRuleClause
	554, // 497: api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest.clause:type_name -> api.commons.AdherenceAgentRuleClause
	553, // 498: api.v1alpha1.wfm.ListAdherenceAgentRulesResponse.rules:type_name -> api.commons.AdherenceAgentRule
	524, // 499: api.v1alpha1.wfm.AgentGetScheduleRequest.datetime_range:type_name -> api.commons.DatetimeRange
	270, // 500: api.v1alpha1.wfm.AgentGetScheduleResponse.shift_instances:type_name -> api.v1alpha1.wfm.ShiftInstance
	524, // 501: api.v1alpha1.wfm.AgentListLeavePetitionsRequest.datetime_range:type_name -> api.commons.DatetimeRange
	547, // 502: api.v1alpha1.wfm.AgentListLeavePetitionsResponse.agent_leave_petitions:type_name -> api.commons.AgentLeavePetition
	524, // 503: api.v1alpha1.wfm.AgentCreateLeavePetitionRequest.requested_datetime_ranges:type_name -> api.commons.DatetimeRange
	547, // 504: api.v1alpha1.wfm.AgentCreateLeavePetitionResponse.agent_leave_petition:type_name -> api.commons.AgentLeavePetition
	547, // 505: api.v1alpha1.wfm.AgentCancelLeavePetitionResponse.agent_leave_petition:type_name -> api.commons.AgentLeavePetition
	156, // 506: api.v1alpha1.wfm.ListAllWFMAgentsRes.AgentGroupsByAgent.agent_groups:type_name -> api.v1alpha1.wfm.AgentGroup
	524, // 507: api.v1alpha1.wfm.DatetimePattern.WeekMap.datetime_range:type_name -> api.commons.DatetimeRange
	491, // 508: api.v1alpha1.wfm.DatetimePattern.WeekMap.day_maps:type_name -> api.v1alpha1.wfm.DatetimePattern.WeekMap.WeekMapDOW
	524, // 509: api.v1alpha1.wfm.DatetimePattern.CalendarItem.datetime_range:type_name -> api.commons.DatetimeRange
	555, // 510: api.v1alpha1.wfm.DatetimePattern.CalendarItem.value:type_name -> api.commons.OptionTypes
	533, // 511: api.v1alpha1.wfm.DatetimePattern.WeekMap.WeekMapDOW.day_of_week:type_name -> api.commons.DayOfWeek
	555, // 512: api.v1alpha1.wfm.DatetimePattern.WeekMap.WeekMapDOW.value:type_name -> api.commons.OptionTypes
	124, // 513: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes.EntityMapping.left_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	124, // 514: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes.EntityMapping.right_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	107, // 515: api.v1alpha1.wfm.ListConfigEntitiesRes.ClientNodeEntities.entities:type_name -> api.v1alpha1.wfm.ClientNode
	112, // 516: api.v1alpha1.wfm.ListConfigEntitiesRes.LocationNodeEntities.entities:type_name -> api.v1alpha1.wfm.LocationNode
	117, // 517: api.v1alpha1.wfm.ListConfigEntitiesRes.ProgramNodeEntities.entities:type_name -> api.v1alpha1.wfm.ProgramNode
	156, // 518: api.v1alpha1.wfm.ListConfigEntitiesRes.AgentGroupEntities.entities:type_name -> api.v1alpha1.wfm.AgentGroup
	193, // 519: api.v1alpha1.wfm.ListConfigEntitiesRes.ShiftTemplateEntities.entities:type_name -> api.v1alpha1.wfm.ShiftTemplate
	163, // 520: api.v1alpha1.wfm.ListConfigEntitiesRes.WFMAgentEntities.entities:type_name -> api.v1alpha1.wfm.WFMAgent
	202, // 521: api.v1alpha1.wfm.ListConfigEntitiesRes.PlacementRuleEntities.entities:type_name -> api.v1alpha1.wfm.PlacementRule
	125, // 522: api.v1alpha1.wfm.ListConfigEntitiesRes.ConstraintRuleEntities.entities:type_name -> api.v1alpha1.wfm.ConstraintRule
	132, // 523: api.v1alpha1.wfm.ListConfigEntitiesRes.NonSkillActivityEntities.entities:type_name -> api.v1alpha1.wfm.NonSkillActivity
	221, // 524: api.v1alpha1.wfm.ListConfigEntitiesRes.AgentAvailabilityPatternEntities.entities:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	210, // 525: api.v1alpha1.wfm.ListConfigEntitiesRes.OpenTimesPatternEntities.entities:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	233, // 526: api.v1alpha1.wfm.ListConfigEntitiesRes.SkillProficiencyEntities.entities:type_name -> api.v1alpha1.wfm.SkillProficiency
	240, // 527: api.v1alpha1.wfm.ListConfigEntitiesRes.ScheduleScenarioEntities.entities:type_name -> api.v1alpha1.wfm.ScheduleScenario
	514, // 528: api.v1alpha1.wfm.PerformanceMetricV3.MetricByCollection.skill_collection:type_name -> api.commons.SkillProfileCategory
	264, // 529: api.v1alpha1.wfm.PerformanceMetricV3.MetricByCollection.metric:type_name -> api.v1alpha1.wfm.Basic_PerformanceMetricV3
	556, // 530: api.v1alpha1.wfm.ListAdherenceAgentStatesResponse.AgentStatesEntry.value:type_name -> api.commons.AdherenceAgentStates
	1,   // 531: api.v1alpha1.wfm.WFM.PerformInitialClientSetup:input_type -> api.v1alpha1.wfm.PerformInitialClientSetupRequest
	3,   // 532: api.v1alpha1.wfm.WFM.CreateInitialDemoActivities:input_type -> api.v1alpha1.wfm.CreateInitialDemoActivitiesRequest
	8,   // 533: api.v1alpha1.wfm.WFM.ListSkillProfiles:input_type -> api.v1alpha1.wfm.ListSkillProfilesReq
	10,  // 534: api.v1alpha1.wfm.WFM.UpdateSkillProfile:input_type -> api.v1alpha1.wfm.UpdateSkillProfileReq
	12,  // 535: api.v1alpha1.wfm.WFM.UpdateSkillProfileProficiencies:input_type -> api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq
	14,  // 536: api.v1alpha1.wfm.WFM.GetSkillProfile:input_type -> api.v1alpha1.wfm.GetSkillProfileReq
	16,  // 537: api.v1alpha1.wfm.WFM.ResyncSkillProfiles:input_type -> api.v1alpha1.wfm.ResyncSkillProfilesReq
	18,  // 538: api.v1alpha1.wfm.WFM.GetLastSkillProfileResyncDate:input_type -> api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq
	20,  // 539: api.v1alpha1.wfm.WFM.UpsertForecastingParameters:input_type -> api.v1alpha1.wfm.UpsertForecastingParametersReq
	22,  // 540: api.v1alpha1.wfm.WFM.GetForecastingParameters:input_type -> api.v1alpha1.wfm.GetForecastingParametersReq
	25,  // 541: api.v1alpha1.wfm.WFM.GetClientHistoryCacheInfo:input_type -> api.v1alpha1.wfm.GetClientHistoryCacheInfoReq
	27,  // 542: api.v1alpha1.wfm.WFM.ListHistoricalData:input_type -> api.v1alpha1.wfm.ListHistoricalDataReq
	29,  // 543: api.v1alpha1.wfm.WFM.UpsertHistoricalDataDelta:input_type -> api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq
	31,  // 544: api.v1alpha1.wfm.WFM.UpsertHistoricalDataDeltas:input_type -> api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq
	33,  // 545: api.v1alpha1.wfm.WFM.ListSkills:input_type -> api.v1alpha1.wfm.ListSkillsReq
	36,  // 546: api.v1alpha1.wfm.WFM.BuildCallProfileTemplateForSkillProfile:input_type -> api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq
	38,  // 547: api.v1alpha1.wfm.WFM.BuildCallProfileTemplate:input_type -> api.v1alpha1.wfm.BuildCallProfileTemplateReq
	40,  // 548: api.v1alpha1.wfm.WFM.CreateInactiveSkillProfileMapping:input_type -> api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq
	42,  // 549: api.v1alpha1.wfm.WFM.GetAvailableRegressionForecasterModelTypes:input_type -> api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq
	44,  // 550: api.v1alpha1.wfm.WFM.DisconnectInactiveSkillProfileMapping:input_type -> api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq
	46,  // 551: api.v1alpha1.wfm.WFM.CreateSkillProfileGroup:input_type -> api.v1alpha1.wfm.CreateSkillProfileGroupReq
	48,  // 552: api.v1alpha1.wfm.WFM.UpdateSkillProfileGroup:input_type -> api.v1alpha1.wfm.UpdateSkillProfileGroupReq
	50,  // 553: api.v1alpha1.wfm.WFM.ListSkillProfileGroups:input_type -> api.v1alpha1.wfm.ListSkillProfileGroupsReq
	52,  // 554: api.v1alpha1.wfm.WFM.UpdateSkillProfileGroupAssociations:input_type -> api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsReq
	54,  // 555: api.v1alpha1.wfm.WFM.DeleteHistoricalDataDeltas:input_type -> api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq
	56,  // 556: api.v1alpha1.wfm.WFM.ListTopSkillProfiles:input_type -> api.v1alpha1.wfm.ListTopSkillProfilesReq
	58,  // 557: api.v1alpha1.wfm.WFM.GetSkillProfilesCount:input_type -> api.v1alpha1.wfm.GetSkillProfilesCountReq
	60,  // 558: api.v1alpha1.wfm.WFM.BuildProfileForecastByInterval:input_type -> api.v1alpha1.wfm.BuildProfileForecastByIntervalReq
	62,  // 559: api.v1alpha1.wfm.WFM.BuildProfileForecastByIntervalWithStats:input_type -> api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq
	64,  // 560: api.v1alpha1.wfm.WFM.UpsertProfileForecast:input_type -> api.v1alpha1.wfm.UpsertProfileForecastReq
	66,  // 561: api.v1alpha1.wfm.WFM.CreateCallProfileTemplate:input_type -> api.v1alpha1.wfm.CreateCallProfileTemplateReq
	68,  // 562: api.v1alpha1.wfm.WFM.DeleteCallProfileTemplate:input_type -> api.v1alpha1.wfm.DeleteCallProfileTemplateReq
	71,  // 563: api.v1alpha1.wfm.WFM.CreateRegressionTemplate:input_type -> api.v1alpha1.wfm.CreateRegressionTemplateReq
	73,  // 564: api.v1alpha1.wfm.WFM.DeleteRegressionTemplate:input_type -> api.v1alpha1.wfm.DeleteRegressionTemplateReq
	75,  // 565: api.v1alpha1.wfm.WFM.ListRegressionTemplates:input_type -> api.v1alpha1.wfm.ListRegressionTemplatesReq
	83,  // 566: api.v1alpha1.wfm.WFM.ListForecastIntervalsForSkillProfile:input_type -> api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq
	84,  // 567: api.v1alpha1.wfm.WFM.ListForecastIntervals:input_type -> api.v1alpha1.wfm.ListForecastIntervalsReq
	85,  // 568: api.v1alpha1.wfm.WFM.ListForecastIntervalsV2:input_type -> api.v1alpha1.wfm.ListForecastIntervalsV2Request
	77,  // 569: api.v1alpha1.wfm.WFM.BuildRegressionForecastByInterval:input_type -> api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq
	78,  // 570: api.v1alpha1.wfm.WFM.BuildRegressionForecastByIntervalWithStats:input_type -> api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq
	81,  // 571: api.v1alpha1.wfm.WFM.ListCallProfileTemplates:input_type -> api.v1alpha1.wfm.ListCallProfileTemplatesReq
	87,  // 572: api.v1alpha1.wfm.WFM.UpsertRegressionForecast:input_type -> api.v1alpha1.wfm.UpsertRegressionForecastReq
	89,  // 573: api.v1alpha1.wfm.WFM.UpsertForecastDataDelta:input_type -> api.v1alpha1.wfm.UpsertForecastDataDeltaReq
	91,  // 574: api.v1alpha1.wfm.WFM.UpsertForecastDataDeltas:input_type -> api.v1alpha1.wfm.UpsertForecastDataDeltasReq
	93,  // 575: api.v1alpha1.wfm.WFM.DeleteForecastIntervals:input_type -> api.v1alpha1.wfm.DeleteForecastIntervalsReq
	95,  // 576: api.v1alpha1.wfm.WFM.ListHistoricalDataForAllSkillProfiles:input_type -> api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq
	97,  // 577: api.v1alpha1.wfm.WFM.BuildDOWAndMOYProfiles:input_type -> api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq
	99,  // 578: api.v1alpha1.wfm.WFM.CalculateTrainingDataAveragesForSkillProfile:input_type -> api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq
	101, // 579: api.v1alpha1.wfm.WFM.UpdateSkillProfileAveragesUsingHistoricalData:input_type -> api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq
	105, // 580: api.v1alpha1.wfm.WFM.UpdateCallCenterNode:input_type -> api.v1alpha1.wfm.UpdateCallCenterNodeReq
	108, // 581: api.v1alpha1.wfm.WFM.CreateClientNode:input_type -> api.v1alpha1.wfm.CreateClientNodeReq
	110, // 582: api.v1alpha1.wfm.WFM.UpdateClientNode:input_type -> api.v1alpha1.wfm.UpdateClientNodeReq
	113, // 583: api.v1alpha1.wfm.WFM.CreateLocationNode:input_type -> api.v1alpha1.wfm.CreateLocationNodeReq
	115, // 584: api.v1alpha1.wfm.WFM.UpdateLocationNode:input_type -> api.v1alpha1.wfm.UpdateLocationNodeReq
	118, // 585: api.v1alpha1.wfm.WFM.CreateProgramNode:input_type -> api.v1alpha1.wfm.CreateProgramNodeReq
	120, // 586: api.v1alpha1.wfm.WFM.UpdateProgramNode:input_type -> api.v1alpha1.wfm.UpdateProgramNodeReq
	122, // 587: api.v1alpha1.wfm.WFM.ListProgramNodesBySid:input_type -> api.v1alpha1.wfm.ListProgramNodesBySidReq
	126, // 588: api.v1alpha1.wfm.WFM.CreateConstraintRule:input_type -> api.v1alpha1.wfm.CreateConstraintRuleReq
	128, // 589: api.v1alpha1.wfm.WFM.UpdateConstraintRule:input_type -> api.v1alpha1.wfm.UpdateConstraintRuleReq
	130, // 590: api.v1alpha1.wfm.WFM.DeleteConstraintRule:input_type -> api.v1alpha1.wfm.DeleteConstraintRuleReq
	133, // 591: api.v1alpha1.wfm.WFM.CreateNonSkillActivity:input_type -> api.v1alpha1.wfm.CreateNonSkillActivityReq
	135, // 592: api.v1alpha1.wfm.WFM.UpdateNonSkillActivity:input_type -> api.v1alpha1.wfm.UpdateNonSkillActivityReq
	137, // 593: api.v1alpha1.wfm.WFM.ListNonSkillActivities:input_type -> api.v1alpha1.wfm.ListNonSkillActivitiesReq
	139, // 594: api.v1alpha1.wfm.WFM.ListNonSkillActivityAssociations:input_type -> api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq
	142, // 595: api.v1alpha1.wfm.WFM.ListCandidateSchedulingActivities:input_type -> api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq
	144, // 596: api.v1alpha1.wfm.WFM.ListSchedulingActivities:input_type -> api.v1alpha1.wfm.ListSchedulingActivitiesRequest
	146, // 597: api.v1alpha1.wfm.WFM.GetOnCallSchedulingActivity:input_type -> api.v1alpha1.wfm.GetOnCallSchedulingActivityReq
	148, // 598: api.v1alpha1.wfm.WFM.CreateSchedulingActivityPauseCodes:input_type -> api.v1alpha1.wfm.CreateSchedulingActivityPauseCodesRequest
	150, // 599: api.v1alpha1.wfm.WFM.DeleteSchedulingActivityPauseCodes:input_type -> api.v1alpha1.wfm.DeleteSchedulingActivityPauseCodesRequest
	152, // 600: api.v1alpha1.wfm.WFM.ListPatternsForSchedulingActivityClassifications:input_type -> api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest
	154, // 601: api.v1alpha1.wfm.WFM.GetTimeOffSchedulingActivity:input_type -> api.v1alpha1.wfm.GetTimeOffSchedulingActivityRequest
	157, // 602: api.v1alpha1.wfm.WFM.CreateAgentGroup:input_type -> api.v1alpha1.wfm.CreateAgentGroupReq
	159, // 603: api.v1alpha1.wfm.WFM.ListAgentScheduleGroups:input_type -> api.v1alpha1.wfm.ListAgentScheduleGroupsRequest
	161, // 604: api.v1alpha1.wfm.WFM.UpdateAgentGroup:input_type -> api.v1alpha1.wfm.UpdateAgentGroupReq
	164, // 605: api.v1alpha1.wfm.WFM.CreateUnassignedWFMAgent:input_type -> api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest
	166, // 606: api.v1alpha1.wfm.WFM.UpdateWFMAgent:input_type -> api.v1alpha1.wfm.UpdateWFMAgentReq
	168, // 607: api.v1alpha1.wfm.WFM.ListAllWFMAgents:input_type -> api.v1alpha1.wfm.ListAllWFMAgentsReq
	170, // 608: api.v1alpha1.wfm.WFM.ListCandidateWFMAgents:input_type -> api.v1alpha1.wfm.ListCandidateWFMAgentsReq
	172, // 609: api.v1alpha1.wfm.WFM.ListUngroupedWFMAgents:input_type -> api.v1alpha1.wfm.ListUngroupedWFMAgentsReq
	174, // 610: api.v1alpha1.wfm.WFM.ListWFMAgentSids:input_type -> api.v1alpha1.wfm.ListWFMAgentSidsReq
	176, // 611: api.v1alpha1.wfm.WFM.ListUnassignedWFMAgents:input_type -> api.v1alpha1.wfm.ListUnassignedWFMAgentsRequest
	178, // 612: api.v1alpha1.wfm.WFM.ListWFMAgentsAssociatedWithAgentGroup:input_type -> api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq
	182, // 613: api.v1alpha1.wfm.WFM.CreateWFMAgentMemberships:input_type -> api.v1alpha1.wfm.CreateWFMAgentMembershipsReq
	184, // 614: api.v1alpha1.wfm.WFM.CopyWFMAgentMemberships:input_type -> api.v1alpha1.wfm.CopyWFMAgentMembershipsRequest
	186, // 615: api.v1alpha1.wfm.WFM.DeleteWFMAgentMemberships:input_type -> api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq
	188, // 616: api.v1alpha1.wfm.WFM.DeleteWFMAgentsMemberships:input_type -> api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq
	190, // 617: api.v1alpha1.wfm.WFM.RemoveAgentFromFutureShifts:input_type -> api.v1alpha1.wfm.RemoveAgentFromFutureShiftsRequest
	180, // 618: api.v1alpha1.wfm.WFM.BuildAgentDiagnostics:input_type -> api.v1alpha1.wfm.BuildAgentDiagnosticsReq
	194, // 619: api.v1alpha1.wfm.WFM.CreateShiftTemplate:input_type -> api.v1alpha1.wfm.CreateShiftTemplateReq
	196, // 620: api.v1alpha1.wfm.WFM.UpdateShiftTemplate:input_type -> api.v1alpha1.wfm.UpdateShiftTemplateReq
	198, // 621: api.v1alpha1.wfm.WFM.ListShiftTemplatesBySids:input_type -> api.v1alpha1.wfm.ListShiftTemplatesBySidsReq
	200, // 622: api.v1alpha1.wfm.WFM.BuildShiftTemplateDiagnostics:input_type -> api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq
	203, // 623: api.v1alpha1.wfm.WFM.CreatePlacementRule:input_type -> api.v1alpha1.wfm.CreatePlacementRuleReq
	205, // 624: api.v1alpha1.wfm.WFM.UpdatePlacementRule:input_type -> api.v1alpha1.wfm.UpdatePlacementRuleReq
	207, // 625: api.v1alpha1.wfm.WFM.DeletePlacementRule:input_type -> api.v1alpha1.wfm.DeletePlacementRuleReq
	211, // 626: api.v1alpha1.wfm.WFM.CreateOpenTimesPattern:input_type -> api.v1alpha1.wfm.CreateOpenTimesPatternReq
	213, // 627: api.v1alpha1.wfm.WFM.UpdateOpenTimesPattern:input_type -> api.v1alpha1.wfm.UpdateOpenTimesPatternReq
	215, // 628: api.v1alpha1.wfm.WFM.DeleteOpenTimesPattern:input_type -> api.v1alpha1.wfm.DeleteOpenTimesPatternReq
	217, // 629: api.v1alpha1.wfm.WFM.GetOpenTimesBitmaps:input_type -> api.v1alpha1.wfm.GetOpenTimesBitmapsReq
	219, // 630: api.v1alpha1.wfm.WFM.ListOpenDateRangesForNodeOpenTimesBitmaps:input_type -> api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest
	222, // 631: api.v1alpha1.wfm.WFM.CreateAgentAvailabilityPattern:input_type -> api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq
	224, // 632: api.v1alpha1.wfm.WFM.UpdateAgentAvailabilityPattern:input_type -> api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq
	226, // 633: api.v1alpha1.wfm.WFM.DeleteAgentAvailabilityPattern:input_type -> api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq
	229, // 634: api.v1alpha1.wfm.WFM.GetAvailabilityBitmaps:input_type -> api.v1alpha1.wfm.GetAvailabilityBitmapsReq
	231, // 635: api.v1alpha1.wfm.WFM.UpsertNonSkillActivityAssociation:input_type -> api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq
	234, // 636: api.v1alpha1.wfm.WFM.CreateSkillProficiencies:input_type -> api.v1alpha1.wfm.CreateSkillProficienciesReq
	236, // 637: api.v1alpha1.wfm.WFM.UpdateSkillProficiencies:input_type -> api.v1alpha1.wfm.UpdateSkillProficienciesReq
	238, // 638: api.v1alpha1.wfm.WFM.DeleteSkillProficiency:input_type -> api.v1alpha1.wfm.DeleteSkillProficiencyReq
	241, // 639: api.v1alpha1.wfm.WFM.CopyScenario:input_type -> api.v1alpha1.wfm.CopyScenarioReq
	243, // 640: api.v1alpha1.wfm.WFM.CreateScheduleScenarioWithNodes:input_type -> api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq
	245, // 641: api.v1alpha1.wfm.WFM.UpdateScheduleScenario:input_type -> api.v1alpha1.wfm.UpdateScheduleScenarioReq
	247, // 642: api.v1alpha1.wfm.WFM.ListConfigEntities:input_type -> api.v1alpha1.wfm.ListConfigEntitiesReq
	251, // 643: api.v1alpha1.wfm.WFM.DeleteShiftInstances:input_type -> api.v1alpha1.wfm.DeleteShiftInstancesReq
	253, // 644: api.v1alpha1.wfm.WFM.BuildNodeDiagnostics:input_type -> api.v1alpha1.wfm.BuildNodeDiagnosticsReq
	255, // 645: api.v1alpha1.wfm.WFM.BuildGlobalDiagnostics:input_type -> api.v1alpha1.wfm.BuildGlobalDiagnosticsReq
	273, // 646: api.v1alpha1.wfm.WFM.GetPublishedSchedule:input_type -> api.v1alpha1.wfm.GetPublishedScheduleReq
	275, // 647: api.v1alpha1.wfm.WFM.GetPublishedScheduleRequiredCalls:input_type -> api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq
	277, // 648: api.v1alpha1.wfm.WFM.GetDraftScheduleRequiredCalls:input_type -> api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq
	279, // 649: api.v1alpha1.wfm.WFM.CreateDraftSchedule:input_type -> api.v1alpha1.wfm.CreateDraftScheduleReq
	281, // 650: api.v1alpha1.wfm.WFM.UpdateDraftSchedule:input_type -> api.v1alpha1.wfm.UpdateDraftScheduleReq
	283, // 651: api.v1alpha1.wfm.WFM.BuildDraftSchedule:input_type -> api.v1alpha1.wfm.BuildDraftScheduleReq
	285, // 652: api.v1alpha1.wfm.WFM.PollBuildInProgress:input_type -> api.v1alpha1.wfm.PollBuildInProgressRequest
	287, // 653: api.v1alpha1.wfm.WFM.CancelBuildInProgress:input_type -> api.v1alpha1.wfm.CancelBuildInProgressRequest
	289, // 654: api.v1alpha1.wfm.WFM.PublishDraftSchedule:input_type -> api.v1alpha1.wfm.PublishDraftScheduleReq
	291, // 655: api.v1alpha1.wfm.WFM.ResetDraftSchedule:input_type -> api.v1alpha1.wfm.ResetDraftScheduleReq
	293, // 656: api.v1alpha1.wfm.WFM.GetDraftSchedule:input_type -> api.v1alpha1.wfm.GetDraftScheduleReq
	295, // 657: api.v1alpha1.wfm.WFM.ListDraftSchedules:input_type -> api.v1alpha1.wfm.ListDraftSchedulesReq
	297, // 658: api.v1alpha1.wfm.WFM.ClearSchedule:input_type -> api.v1alpha1.wfm.ClearScheduleReq
	299, // 659: api.v1alpha1.wfm.WFM.DeleteDraftSchedule:input_type -> api.v1alpha1.wfm.DeleteDraftScheduleReq
	301, // 660: api.v1alpha1.wfm.WFM.ListShiftInstancesBySid:input_type -> api.v1alpha1.wfm.ListShiftInstancesBySidReq
	303, // 661: api.v1alpha1.wfm.WFM.CopyScheduleToSchedule:input_type -> api.v1alpha1.wfm.CopyScheduleToScheduleReq
	305, // 662: api.v1alpha1.wfm.WFM.CreateShiftInstance:input_type -> api.v1alpha1.wfm.CreateShiftInstanceReq
	307, // 663: api.v1alpha1.wfm.WFM.CreateShiftInstanceV2:input_type -> api.v1alpha1.wfm.CreateShiftInstanceV2Req
	309, // 664: api.v1alpha1.wfm.WFM.CreateShiftInstanceWithSegments:input_type -> api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest
	311, // 665: api.v1alpha1.wfm.WFM.SplitShiftInstance:input_type -> api.v1alpha1.wfm.SplitShiftInstanceReq
	313, // 666: api.v1alpha1.wfm.WFM.SwapShiftInstances:input_type -> api.v1alpha1.wfm.SwapShiftInstancesReq
	315, // 667: api.v1alpha1.wfm.WFM.UpdateShiftInstance:input_type -> api.v1alpha1.wfm.UpdateShiftInstanceReq
	317, // 668: api.v1alpha1.wfm.WFM.UpdateShiftInstanceV2:input_type -> api.v1alpha1.wfm.UpdateShiftInstanceV2Req
	319, // 669: api.v1alpha1.wfm.WFM.UpdateShiftInstanceWithSegments:input_type -> api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest
	321, // 670: api.v1alpha1.wfm.WFM.CopyShiftInstancesToSchedule:input_type -> api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq
	323, // 671: api.v1alpha1.wfm.WFM.ListShiftInstanceSidsForAgent:input_type -> api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq
	325, // 672: api.v1alpha1.wfm.WFM.ListShiftInstanceSidsForSchedule:input_type -> api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest
	327, // 673: api.v1alpha1.wfm.WFM.ListShiftSegmentsByShiftInstanceSids:input_type -> api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq
	333, // 674: api.v1alpha1.wfm.WFM.SetSchedulingTarget:input_type -> api.v1alpha1.wfm.SetSchedulingTargetReq
	335, // 675: api.v1alpha1.wfm.WFM.GetSchedulingTarget:input_type -> api.v1alpha1.wfm.GetSchedulingTargetReq
	337, // 676: api.v1alpha1.wfm.WFM.DeleteSchedulingTarget:input_type -> api.v1alpha1.wfm.DeleteSchedulingTargetReq
	339, // 677: api.v1alpha1.wfm.WFM.GetDefaultSchedulingTarget:input_type -> api.v1alpha1.wfm.GetDefaultSchedulingTargetReq
	341, // 678: api.v1alpha1.wfm.WFM.SetDefaultSchedulingTarget:input_type -> api.v1alpha1.wfm.SetDefaultSchedulingTargetReq
	330, // 679: api.v1alpha1.wfm.WFM.GetPerformanceMetrics:input_type -> api.v1alpha1.wfm.GetPerformanceMetricsReq
	343, // 680: api.v1alpha1.wfm.WFM.ListRequiredCallsIntervals:input_type -> api.v1alpha1.wfm.ListRequiredCallsIntervalsReq
	350, // 681: api.v1alpha1.wfm.WFM.CreateTourPattern:input_type -> api.v1alpha1.wfm.CreateTourPatternReq
	352, // 682: api.v1alpha1.wfm.WFM.GetTourPatternDiagnostics:input_type -> api.v1alpha1.wfm.GetTourPatternDiagnosticsReq
	354, // 683: api.v1alpha1.wfm.WFM.UpsertTourPatternWithMembers:input_type -> api.v1alpha1.wfm.UpsertTourPatternWithMembersReq
	356, // 684: api.v1alpha1.wfm.WFM.GetTourPattern:input_type -> api.v1alpha1.wfm.GetTourPatternReq
	358, // 685: api.v1alpha1.wfm.WFM.GetTourPatternWithMembers:input_type -> api.v1alpha1.wfm.GetTourPatternWithMembersReq
	360, // 686: api.v1alpha1.wfm.WFM.DeleteTourPattern:input_type -> api.v1alpha1.wfm.DeleteTourPatternReq
	362, // 687: api.v1alpha1.wfm.WFM.CreateTourWeekPattern:input_type -> api.v1alpha1.wfm.CreateTourWeekPatternReq
	364, // 688: api.v1alpha1.wfm.WFM.ListTourWeekPatterns:input_type -> api.v1alpha1.wfm.ListTourWeekPatternsReq
	366, // 689: api.v1alpha1.wfm.WFM.DeleteTourWeekPatterns:input_type -> api.v1alpha1.wfm.DeleteTourWeekPatternsReq
	368, // 690: api.v1alpha1.wfm.WFM.CreateTourShiftInstanceConfig:input_type -> api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq
	370, // 691: api.v1alpha1.wfm.WFM.UpdateTourShiftInstanceConfig:input_type -> api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq
	372, // 692: api.v1alpha1.wfm.WFM.ListTourShiftInstanceConfigs:input_type -> api.v1alpha1.wfm.ListTourShiftInstanceConfigsReq
	374, // 693: api.v1alpha1.wfm.WFM.DeleteTourShiftInstanceConfigs:input_type -> api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsReq
	376, // 694: api.v1alpha1.wfm.WFM.CreateTourShiftSegmentConfig:input_type -> api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq
	378, // 695: api.v1alpha1.wfm.WFM.UpdateTourShiftSegmentConfig:input_type -> api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq
	380, // 696: api.v1alpha1.wfm.WFM.ListTourShiftSegmentConfigs:input_type -> api.v1alpha1.wfm.ListTourShiftSegmentConfigsReq
	382, // 697: api.v1alpha1.wfm.WFM.DeleteTourShiftSegmentConfigs:input_type -> api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsReq
	384, // 698: api.v1alpha1.wfm.WFM.CreateTourAgentCollection:input_type -> api.v1alpha1.wfm.CreateTourAgentCollectionReq
	386, // 699: api.v1alpha1.wfm.WFM.UpdateTourAgentCollection:input_type -> api.v1alpha1.wfm.UpdateTourAgentCollectionReq
	388, // 700: api.v1alpha1.wfm.WFM.ListTourAgentCollections:input_type -> api.v1alpha1.wfm.ListTourAgentCollectionsReq
	390, // 701: api.v1alpha1.wfm.WFM.DeleteTourAgentCollections:input_type -> api.v1alpha1.wfm.DeleteTourAgentCollectionsReq
	392, // 702: api.v1alpha1.wfm.WFM.CreateTourAgentCollectionWFMAgents:input_type -> api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsReq
	394, // 703: api.v1alpha1.wfm.WFM.ListTourAgentCollectionWFMAgents:input_type -> api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsReq
	396, // 704: api.v1alpha1.wfm.WFM.DeleteTourAgentCollectionWFMAgents:input_type -> api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsReq
	398, // 705: api.v1alpha1.wfm.WFM.GenerateTourWeekPatterns:input_type -> api.v1alpha1.wfm.GenerateTourWeekPatternsReq
	402, // 706: api.v1alpha1.wfm.WFM.ListValidAgentsForReplacement:input_type -> api.v1alpha1.wfm.ListValidAgentsForReplacementReq
	405, // 707: api.v1alpha1.wfm.WFM.ReplaceAgentOnSchedule:input_type -> api.v1alpha1.wfm.ReplaceAgentOnScheduleRes
	404, // 708: api.v1alpha1.wfm.WFM.ReplaceAgentOnScheduleV1:input_type -> api.v1alpha1.wfm.ReplaceAgentOnScheduleReq
	400, // 709: api.v1alpha1.wfm.WFM.RemoveAgentFromSchedule:input_type -> api.v1alpha1.wfm.RemoveAgentFromScheduleRequest
	422, // 710: api.v1alpha1.wfm.WFM.CreateAgentLeavePetition:input_type -> api.v1alpha1.wfm.CreateAgentLeavePetitionRequest
	424, // 711: api.v1alpha1.wfm.WFM.ListAgentLeavePetitions:input_type -> api.v1alpha1.wfm.ListAgentLeavePetitionsRequest
	426, // 712: api.v1alpha1.wfm.WFM.ArchiveAgentLeavePetition:input_type -> api.v1alpha1.wfm.ArchiveAgentLeavePetitionRequest
	428, // 713: api.v1alpha1.wfm.WFM.ResolveAgentLeavePetition:input_type -> api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest
	430, // 714: api.v1alpha1.wfm.WFM.CancelAgentLeavePetition:input_type -> api.v1alpha1.wfm.CancelAgentLeavePetitionRequest
	407, // 715: api.v1alpha1.wfm.WFM.HelloWorldWFMAdherence:input_type -> api.v1alpha1.wfm.HelloWorldWFMAdherenceRequest
	409, // 716: api.v1alpha1.wfm.WFM.ListAgentStatesForDay:input_type -> api.v1alpha1.wfm.ListAgentStatesForDayRequest
	411, // 717: api.v1alpha1.wfm.WFM.ListRealTimeManagementStates:input_type -> api.v1alpha1.wfm.ListRealTimeManagementStatesRequest
	413, // 718: api.v1alpha1.wfm.WFM.ListAdherenceAgentStates:input_type -> api.v1alpha1.wfm.ListAdherenceAgentStatesRequest
	416, // 719: api.v1alpha1.wfm.WFM.UpsertRealTimeManagementStateColor:input_type -> api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest
	418, // 720: api.v1alpha1.wfm.WFM.ListRealTimeManagementStateColors:input_type -> api.v1alpha1.wfm.ListRealTimeManagementStateColorsRequest
	420, // 721: api.v1alpha1.wfm.WFM.DeleteRealTimeManagementStateColor:input_type -> api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest
	432, // 722: api.v1alpha1.wfm.WFM.CreateRgbaColor:input_type -> api.v1alpha1.wfm.CreateRgbaColorRequest
	434, // 723: api.v1alpha1.wfm.WFM.ListRgbaColors:input_type -> api.v1alpha1.wfm.ListRgbaColorsRequest
	436, // 724: api.v1alpha1.wfm.WFM.UpdateRgbaColor:input_type -> api.v1alpha1.wfm.UpdateRgbaColorRequest
	438, // 725: api.v1alpha1.wfm.WFM.DeleteRgbaColor:input_type -> api.v1alpha1.wfm.DeleteRgbaColorRequest
	440, // 726: api.v1alpha1.wfm.WFM.CreateAdherenceRuleNotificationConfig:input_type -> api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest
	442, // 727: api.v1alpha1.wfm.WFM.UpdateAdherenceRuleNotificationConfig:input_type -> api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest
	444, // 728: api.v1alpha1.wfm.WFM.CreateAdherenceRuleNotificationConfigEntry:input_type -> api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest
	446, // 729: api.v1alpha1.wfm.WFM.UpdateAdherenceRuleNotificationConfigEntry:input_type -> api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest
	448, // 730: api.v1alpha1.wfm.WFM.DeleteAdherenceRuleNotificationConfigEntry:input_type -> api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryRequest
	450, // 731: api.v1alpha1.wfm.WFM.ListAdherenceRuleNotificationConfigs:input_type -> api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsRequest
	452, // 732: api.v1alpha1.wfm.WFM.CreateAdherenceDepartmentalRule:input_type -> api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest
	454, // 733: api.v1alpha1.wfm.WFM.UpdateAdherenceDepartmentalRule:input_type -> api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest
	456, // 734: api.v1alpha1.wfm.WFM.CreateAdherenceDepartmentalRuleClause:input_type -> api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest
	458, // 735: api.v1alpha1.wfm.WFM.UpdateAdherenceDepartmentalRuleClause:input_type -> api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest
	460, // 736: api.v1alpha1.wfm.WFM.DeleteAdherenceDepartmentalRuleClause:input_type -> api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseRequest
	462, // 737: api.v1alpha1.wfm.WFM.ListAdherenceDepartmentalRules:input_type -> api.v1alpha1.wfm.ListAdherenceDepartmentalRulesRequest
	464, // 738: api.v1alpha1.wfm.WFM.CreateAdherenceAgentRule:input_type -> api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest
	466, // 739: api.v1alpha1.wfm.WFM.UpdateAdherenceAgentRule:input_type -> api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest
	468, // 740: api.v1alpha1.wfm.WFM.CreateAdherenceAgentRuleClause:input_type -> api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest
	470, // 741: api.v1alpha1.wfm.WFM.UpdateAdherenceAgentRuleClause:input_type -> api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest
	474, // 742: api.v1alpha1.wfm.WFM.ListAdherenceAgentRules:input_type -> api.v1alpha1.wfm.ListAdherenceAgentRulesRequest
	472, // 743: api.v1alpha1.wfm.WFM.DeleteAdherenceAgentRuleClause:input_type -> api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseRequest
	476, // 744: api.v1alpha1.wfm.WFM.AgentGetSchedule:input_type -> api.v1alpha1.wfm.AgentGetScheduleRequest
	478, // 745: api.v1alpha1.wfm.WFM.AgentListLeavePetitions:input_type -> api.v1alpha1.wfm.AgentListLeavePetitionsRequest
	480, // 746: api.v1alpha1.wfm.WFM.AgentCreateLeavePetition:input_type -> api.v1alpha1.wfm.AgentCreateLeavePetitionRequest
	482, // 747: api.v1alpha1.wfm.WFM.AgentCancelLeavePetition:input_type -> api.v1alpha1.wfm.AgentCancelLeavePetitionRequest
	2,   // 748: api.v1alpha1.wfm.WFM.PerformInitialClientSetup:output_type -> api.v1alpha1.wfm.PerformInitialClientSetupResponse
	4,   // 749: api.v1alpha1.wfm.WFM.CreateInitialDemoActivities:output_type -> api.v1alpha1.wfm.CreateInitialDemoActivitiesResponse
	9,   // 750: api.v1alpha1.wfm.WFM.ListSkillProfiles:output_type -> api.v1alpha1.wfm.ListSkillProfilesRes
	11,  // 751: api.v1alpha1.wfm.WFM.UpdateSkillProfile:output_type -> api.v1alpha1.wfm.UpdateSkillProfileRes
	13,  // 752: api.v1alpha1.wfm.WFM.UpdateSkillProfileProficiencies:output_type -> api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes
	15,  // 753: api.v1alpha1.wfm.WFM.GetSkillProfile:output_type -> api.v1alpha1.wfm.GetSkillProfileRes
	17,  // 754: api.v1alpha1.wfm.WFM.ResyncSkillProfiles:output_type -> api.v1alpha1.wfm.ResyncSkillProfilesRes
	19,  // 755: api.v1alpha1.wfm.WFM.GetLastSkillProfileResyncDate:output_type -> api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes
	21,  // 756: api.v1alpha1.wfm.WFM.UpsertForecastingParameters:output_type -> api.v1alpha1.wfm.UpsertForecastingParametersRes
	23,  // 757: api.v1alpha1.wfm.WFM.GetForecastingParameters:output_type -> api.v1alpha1.wfm.GetForecastingParametersRes
	26,  // 758: api.v1alpha1.wfm.WFM.GetClientHistoryCacheInfo:output_type -> api.v1alpha1.wfm.GetClientHistoryCacheInfoRes
	28,  // 759: api.v1alpha1.wfm.WFM.ListHistoricalData:output_type -> api.v1alpha1.wfm.ListHistoricalDataRes
	30,  // 760: api.v1alpha1.wfm.WFM.UpsertHistoricalDataDelta:output_type -> api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes
	32,  // 761: api.v1alpha1.wfm.WFM.UpsertHistoricalDataDeltas:output_type -> api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes
	34,  // 762: api.v1alpha1.wfm.WFM.ListSkills:output_type -> api.v1alpha1.wfm.ListSkillsRes
	37,  // 763: api.v1alpha1.wfm.WFM.BuildCallProfileTemplateForSkillProfile:output_type -> api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes
	39,  // 764: api.v1alpha1.wfm.WFM.BuildCallProfileTemplate:output_type -> api.v1alpha1.wfm.BuildCallProfileTemplateRes
	41,  // 765: api.v1alpha1.wfm.WFM.CreateInactiveSkillProfileMapping:output_type -> api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes
	43,  // 766: api.v1alpha1.wfm.WFM.GetAvailableRegressionForecasterModelTypes:output_type -> api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes
	45,  // 767: api.v1alpha1.wfm.WFM.DisconnectInactiveSkillProfileMapping:output_type -> api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes
	47,  // 768: api.v1alpha1.wfm.WFM.CreateSkillProfileGroup:output_type -> api.v1alpha1.wfm.CreateSkillProfileGroupRes
	49,  // 769: api.v1alpha1.wfm.WFM.UpdateSkillProfileGroup:output_type -> api.v1alpha1.wfm.UpdateSkillProfileGroupRes
	51,  // 770: api.v1alpha1.wfm.WFM.ListSkillProfileGroups:output_type -> api.v1alpha1.wfm.ListSkillProfileGroupsRes
	53,  // 771: api.v1alpha1.wfm.WFM.UpdateSkillProfileGroupAssociations:output_type -> api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsRes
	55,  // 772: api.v1alpha1.wfm.WFM.DeleteHistoricalDataDeltas:output_type -> api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes
	57,  // 773: api.v1alpha1.wfm.WFM.ListTopSkillProfiles:output_type -> api.v1alpha1.wfm.ListTopSkillProfilesRes
	59,  // 774: api.v1alpha1.wfm.WFM.GetSkillProfilesCount:output_type -> api.v1alpha1.wfm.GetSkillProfilesCountRes
	61,  // 775: api.v1alpha1.wfm.WFM.BuildProfileForecastByInterval:output_type -> api.v1alpha1.wfm.CallDataByInterval
	63,  // 776: api.v1alpha1.wfm.WFM.BuildProfileForecastByIntervalWithStats:output_type -> api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes
	65,  // 777: api.v1alpha1.wfm.WFM.UpsertProfileForecast:output_type -> api.v1alpha1.wfm.UpsertProfileForecastRes
	67,  // 778: api.v1alpha1.wfm.WFM.CreateCallProfileTemplate:output_type -> api.v1alpha1.wfm.CreateCallProfileTemplateRes
	69,  // 779: api.v1alpha1.wfm.WFM.DeleteCallProfileTemplate:output_type -> api.v1alpha1.wfm.DeleteCallProfileTemplateRes
	72,  // 780: api.v1alpha1.wfm.WFM.CreateRegressionTemplate:output_type -> api.v1alpha1.wfm.CreateRegressionTemplateRes
	74,  // 781: api.v1alpha1.wfm.WFM.DeleteRegressionTemplate:output_type -> api.v1alpha1.wfm.DeleteRegressionTemplateRes
	76,  // 782: api.v1alpha1.wfm.WFM.ListRegressionTemplates:output_type -> api.v1alpha1.wfm.ListRegressionTemplatesRes
	61,  // 783: api.v1alpha1.wfm.WFM.ListForecastIntervalsForSkillProfile:output_type -> api.v1alpha1.wfm.CallDataByInterval
	61,  // 784: api.v1alpha1.wfm.WFM.ListForecastIntervals:output_type -> api.v1alpha1.wfm.CallDataByInterval
	86,  // 785: api.v1alpha1.wfm.WFM.ListForecastIntervalsV2:output_type -> api.v1alpha1.wfm.ListForecastIntervalsV2Response
	61,  // 786: api.v1alpha1.wfm.WFM.BuildRegressionForecastByInterval:output_type -> api.v1alpha1.wfm.CallDataByInterval
	80,  // 787: api.v1alpha1.wfm.WFM.BuildRegressionForecastByIntervalWithStats:output_type -> api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes
	82,  // 788: api.v1alpha1.wfm.WFM.ListCallProfileTemplates:output_type -> api.v1alpha1.wfm.ListCallProfileTemplatesRes
	88,  // 789: api.v1alpha1.wfm.WFM.UpsertRegressionForecast:output_type -> api.v1alpha1.wfm.UpsertRegressionForecastRes
	90,  // 790: api.v1alpha1.wfm.WFM.UpsertForecastDataDelta:output_type -> api.v1alpha1.wfm.UpsertForecastDataDeltaRes
	92,  // 791: api.v1alpha1.wfm.WFM.UpsertForecastDataDeltas:output_type -> api.v1alpha1.wfm.UpsertForecastDataDeltasRes
	94,  // 792: api.v1alpha1.wfm.WFM.DeleteForecastIntervals:output_type -> api.v1alpha1.wfm.DeleteForecastIntervalsRes
	96,  // 793: api.v1alpha1.wfm.WFM.ListHistoricalDataForAllSkillProfiles:output_type -> api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes
	98,  // 794: api.v1alpha1.wfm.WFM.BuildDOWAndMOYProfiles:output_type -> api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes
	100, // 795: api.v1alpha1.wfm.WFM.CalculateTrainingDataAveragesForSkillProfile:output_type -> api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes
	102, // 796: api.v1alpha1.wfm.WFM.UpdateSkillProfileAveragesUsingHistoricalData:output_type -> api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes
	106, // 797: api.v1alpha1.wfm.WFM.UpdateCallCenterNode:output_type -> api.v1alpha1.wfm.UpdateCallCenterNodeRes
	109, // 798: api.v1alpha1.wfm.WFM.CreateClientNode:output_type -> api.v1alpha1.wfm.CreateClientNodeRes
	111, // 799: api.v1alpha1.wfm.WFM.UpdateClientNode:output_type -> api.v1alpha1.wfm.UpdateClientNodeRes
	114, // 800: api.v1alpha1.wfm.WFM.CreateLocationNode:output_type -> api.v1alpha1.wfm.CreateLocationNodeRes
	116, // 801: api.v1alpha1.wfm.WFM.UpdateLocationNode:output_type -> api.v1alpha1.wfm.UpdateLocationNodeRes
	119, // 802: api.v1alpha1.wfm.WFM.CreateProgramNode:output_type -> api.v1alpha1.wfm.CreateProgramNodeRes
	121, // 803: api.v1alpha1.wfm.WFM.UpdateProgramNode:output_type -> api.v1alpha1.wfm.UpdateProgramNodeRes
	123, // 804: api.v1alpha1.wfm.WFM.ListProgramNodesBySid:output_type -> api.v1alpha1.wfm.ListProgramNodesBySidRes
	127, // 805: api.v1alpha1.wfm.WFM.CreateConstraintRule:output_type -> api.v1alpha1.wfm.CreateConstraintRuleRes
	129, // 806: api.v1alpha1.wfm.WFM.UpdateConstraintRule:output_type -> api.v1alpha1.wfm.UpdateConstraintRuleRes
	131, // 807: api.v1alpha1.wfm.WFM.DeleteConstraintRule:output_type -> api.v1alpha1.wfm.DeleteConstraintRuleRes
	134, // 808: api.v1alpha1.wfm.WFM.CreateNonSkillActivity:output_type -> api.v1alpha1.wfm.CreateNonSkillActivityRes
	136, // 809: api.v1alpha1.wfm.WFM.UpdateNonSkillActivity:output_type -> api.v1alpha1.wfm.UpdateNonSkillActivityRes
	138, // 810: api.v1alpha1.wfm.WFM.ListNonSkillActivities:output_type -> api.v1alpha1.wfm.ListNonSkillActivitiesRes
	140, // 811: api.v1alpha1.wfm.WFM.ListNonSkillActivityAssociations:output_type -> api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes
	143, // 812: api.v1alpha1.wfm.WFM.ListCandidateSchedulingActivities:output_type -> api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes
	145, // 813: api.v1alpha1.wfm.WFM.ListSchedulingActivities:output_type -> api.v1alpha1.wfm.ListSchedulingActivitiesResponse
	147, // 814: api.v1alpha1.wfm.WFM.GetOnCallSchedulingActivity:output_type -> api.v1alpha1.wfm.GetOnCallSchedulingActivityRes
	149, // 815: api.v1alpha1.wfm.WFM.CreateSchedulingActivityPauseCodes:output_type -> api.v1alpha1.wfm.CreateSchedulingActivityPauseCodesResponse
	151, // 816: api.v1alpha1.wfm.WFM.DeleteSchedulingActivityPauseCodes:output_type -> api.v1alpha1.wfm.DeleteSchedulingActivityPauseCodesResponse
	153, // 817: api.v1alpha1.wfm.WFM.ListPatternsForSchedulingActivityClassifications:output_type -> api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse
	155, // 818: api.v1alpha1.wfm.WFM.GetTimeOffSchedulingActivity:output_type -> api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse
	158, // 819: api.v1alpha1.wfm.WFM.CreateAgentGroup:output_type -> api.v1alpha1.wfm.CreateAgentGroupRes
	160, // 820: api.v1alpha1.wfm.WFM.ListAgentScheduleGroups:output_type -> api.v1alpha1.wfm.ListAgentScheduleGroupsResponse
	162, // 821: api.v1alpha1.wfm.WFM.UpdateAgentGroup:output_type -> api.v1alpha1.wfm.UpdateAgentGroupRes
	165, // 822: api.v1alpha1.wfm.WFM.CreateUnassignedWFMAgent:output_type -> api.v1alpha1.wfm.CreateUnassignedWFMAgentResponse
	167, // 823: api.v1alpha1.wfm.WFM.UpdateWFMAgent:output_type -> api.v1alpha1.wfm.UpdateWFMAgentRes
	169, // 824: api.v1alpha1.wfm.WFM.ListAllWFMAgents:output_type -> api.v1alpha1.wfm.ListAllWFMAgentsRes
	171, // 825: api.v1alpha1.wfm.WFM.ListCandidateWFMAgents:output_type -> api.v1alpha1.wfm.ListCandidateWFMAgentsRes
	173, // 826: api.v1alpha1.wfm.WFM.ListUngroupedWFMAgents:output_type -> api.v1alpha1.wfm.ListUngroupedWFMAgentsRes
	175, // 827: api.v1alpha1.wfm.WFM.ListWFMAgentSids:output_type -> api.v1alpha1.wfm.ListWFMAgentSidsRes
	177, // 828: api.v1alpha1.wfm.WFM.ListUnassignedWFMAgents:output_type -> api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse
	179, // 829: api.v1alpha1.wfm.WFM.ListWFMAgentsAssociatedWithAgentGroup:output_type -> api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes
	183, // 830: api.v1alpha1.wfm.WFM.CreateWFMAgentMemberships:output_type -> api.v1alpha1.wfm.CreateWFMAgentMembershipsRes
	185, // 831: api.v1alpha1.wfm.WFM.CopyWFMAgentMemberships:output_type -> api.v1alpha1.wfm.CopyWFMAgentMembershipsResponse
	187, // 832: api.v1alpha1.wfm.WFM.DeleteWFMAgentMemberships:output_type -> api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes
	189, // 833: api.v1alpha1.wfm.WFM.DeleteWFMAgentsMemberships:output_type -> api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes
	191, // 834: api.v1alpha1.wfm.WFM.RemoveAgentFromFutureShifts:output_type -> api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse
	181, // 835: api.v1alpha1.wfm.WFM.BuildAgentDiagnostics:output_type -> api.v1alpha1.wfm.BuildAgentDiagnosticsRes
	195, // 836: api.v1alpha1.wfm.WFM.CreateShiftTemplate:output_type -> api.v1alpha1.wfm.CreateShiftTemplateRes
	197, // 837: api.v1alpha1.wfm.WFM.UpdateShiftTemplate:output_type -> api.v1alpha1.wfm.UpdateShiftTemplateRes
	199, // 838: api.v1alpha1.wfm.WFM.ListShiftTemplatesBySids:output_type -> api.v1alpha1.wfm.ListShiftTemplatesBySidsRes
	201, // 839: api.v1alpha1.wfm.WFM.BuildShiftTemplateDiagnostics:output_type -> api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes
	204, // 840: api.v1alpha1.wfm.WFM.CreatePlacementRule:output_type -> api.v1alpha1.wfm.CreatePlacementRuleRes
	206, // 841: api.v1alpha1.wfm.WFM.UpdatePlacementRule:output_type -> api.v1alpha1.wfm.UpdatePlacementRuleRes
	208, // 842: api.v1alpha1.wfm.WFM.DeletePlacementRule:output_type -> api.v1alpha1.wfm.DeletePlacementRuleRes
	212, // 843: api.v1alpha1.wfm.WFM.CreateOpenTimesPattern:output_type -> api.v1alpha1.wfm.CreateOpenTimesPatternRes
	214, // 844: api.v1alpha1.wfm.WFM.UpdateOpenTimesPattern:output_type -> api.v1alpha1.wfm.UpdateOpenTimesPatternRes
	216, // 845: api.v1alpha1.wfm.WFM.DeleteOpenTimesPattern:output_type -> api.v1alpha1.wfm.DeleteOpenTimesPatternRes
	218, // 846: api.v1alpha1.wfm.WFM.GetOpenTimesBitmaps:output_type -> api.v1alpha1.wfm.GetOpenTimesBitmapsRes
	220, // 847: api.v1alpha1.wfm.WFM.ListOpenDateRangesForNodeOpenTimesBitmaps:output_type -> api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse
	223, // 848: api.v1alpha1.wfm.WFM.CreateAgentAvailabilityPattern:output_type -> api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes
	225, // 849: api.v1alpha1.wfm.WFM.UpdateAgentAvailabilityPattern:output_type -> api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes
	227, // 850: api.v1alpha1.wfm.WFM.DeleteAgentAvailabilityPattern:output_type -> api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes
	230, // 851: api.v1alpha1.wfm.WFM.GetAvailabilityBitmaps:output_type -> api.v1alpha1.wfm.GetAvailabilityBitmapsRes
	232, // 852: api.v1alpha1.wfm.WFM.UpsertNonSkillActivityAssociation:output_type -> api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes
	235, // 853: api.v1alpha1.wfm.WFM.CreateSkillProficiencies:output_type -> api.v1alpha1.wfm.CreateSkillProficienciesRes
	237, // 854: api.v1alpha1.wfm.WFM.UpdateSkillProficiencies:output_type -> api.v1alpha1.wfm.UpdateSkillProficienciesRes
	239, // 855: api.v1alpha1.wfm.WFM.DeleteSkillProficiency:output_type -> api.v1alpha1.wfm.DeleteSkillProficiencyRes
	242, // 856: api.v1alpha1.wfm.WFM.CopyScenario:output_type -> api.v1alpha1.wfm.CopyScenarioRes
	244, // 857: api.v1alpha1.wfm.WFM.CreateScheduleScenarioWithNodes:output_type -> api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes
	246, // 858: api.v1alpha1.wfm.WFM.UpdateScheduleScenario:output_type -> api.v1alpha1.wfm.UpdateScheduleScenarioRes
	248, // 859: api.v1alpha1.wfm.WFM.ListConfigEntities:output_type -> api.v1alpha1.wfm.ListConfigEntitiesRes
	252, // 860: api.v1alpha1.wfm.WFM.DeleteShiftInstances:output_type -> api.v1alpha1.wfm.DeleteShiftInstancesRes
	254, // 861: api.v1alpha1.wfm.WFM.BuildNodeDiagnostics:output_type -> api.v1alpha1.wfm.BuildNodeDiagnosticsRes
	256, // 862: api.v1alpha1.wfm.WFM.BuildGlobalDiagnostics:output_type -> api.v1alpha1.wfm.BuildGlobalDiagnosticsRes
	274, // 863: api.v1alpha1.wfm.WFM.GetPublishedSchedule:output_type -> api.v1alpha1.wfm.GetPublishedScheduleRes
	276, // 864: api.v1alpha1.wfm.WFM.GetPublishedScheduleRequiredCalls:output_type -> api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes
	278, // 865: api.v1alpha1.wfm.WFM.GetDraftScheduleRequiredCalls:output_type -> api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes
	280, // 866: api.v1alpha1.wfm.WFM.CreateDraftSchedule:output_type -> api.v1alpha1.wfm.CreateDraftScheduleRes
	282, // 867: api.v1alpha1.wfm.WFM.UpdateDraftSchedule:output_type -> api.v1alpha1.wfm.UpdateDraftScheduleRes
	284, // 868: api.v1alpha1.wfm.WFM.BuildDraftSchedule:output_type -> api.v1alpha1.wfm.BuildDraftScheduleRes
	286, // 869: api.v1alpha1.wfm.WFM.PollBuildInProgress:output_type -> api.v1alpha1.wfm.PollBuildInProgressResponse
	288, // 870: api.v1alpha1.wfm.WFM.CancelBuildInProgress:output_type -> api.v1alpha1.wfm.CancelBuildInProgressResponse
	290, // 871: api.v1alpha1.wfm.WFM.PublishDraftSchedule:output_type -> api.v1alpha1.wfm.PublishDraftScheduleRes
	292, // 872: api.v1alpha1.wfm.WFM.ResetDraftSchedule:output_type -> api.v1alpha1.wfm.ResetDraftScheduleRes
	294, // 873: api.v1alpha1.wfm.WFM.GetDraftSchedule:output_type -> api.v1alpha1.wfm.GetDraftScheduleRes
	296, // 874: api.v1alpha1.wfm.WFM.ListDraftSchedules:output_type -> api.v1alpha1.wfm.ListDraftSchedulesRes
	298, // 875: api.v1alpha1.wfm.WFM.ClearSchedule:output_type -> api.v1alpha1.wfm.ClearScheduleRes
	300, // 876: api.v1alpha1.wfm.WFM.DeleteDraftSchedule:output_type -> api.v1alpha1.wfm.DeleteDraftScheduleRes
	302, // 877: api.v1alpha1.wfm.WFM.ListShiftInstancesBySid:output_type -> api.v1alpha1.wfm.ListShiftInstancesBySidRes
	304, // 878: api.v1alpha1.wfm.WFM.CopyScheduleToSchedule:output_type -> api.v1alpha1.wfm.CopyScheduleToScheduleRes
	306, // 879: api.v1alpha1.wfm.WFM.CreateShiftInstance:output_type -> api.v1alpha1.wfm.CreateShiftInstanceRes
	308, // 880: api.v1alpha1.wfm.WFM.CreateShiftInstanceV2:output_type -> api.v1alpha1.wfm.CreateShiftInstanceV2Res
	310, // 881: api.v1alpha1.wfm.WFM.CreateShiftInstanceWithSegments:output_type -> api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse
	312, // 882: api.v1alpha1.wfm.WFM.SplitShiftInstance:output_type -> api.v1alpha1.wfm.SplitShiftInstanceRes
	314, // 883: api.v1alpha1.wfm.WFM.SwapShiftInstances:output_type -> api.v1alpha1.wfm.SwapShiftInstancesRes
	316, // 884: api.v1alpha1.wfm.WFM.UpdateShiftInstance:output_type -> api.v1alpha1.wfm.UpdateShiftInstanceRes
	318, // 885: api.v1alpha1.wfm.WFM.UpdateShiftInstanceV2:output_type -> api.v1alpha1.wfm.UpdateShiftInstanceV2Res
	320, // 886: api.v1alpha1.wfm.WFM.UpdateShiftInstanceWithSegments:output_type -> api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse
	322, // 887: api.v1alpha1.wfm.WFM.CopyShiftInstancesToSchedule:output_type -> api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes
	324, // 888: api.v1alpha1.wfm.WFM.ListShiftInstanceSidsForAgent:output_type -> api.v1alpha1.wfm.ListShiftInstanceSidsForAgentRes
	326, // 889: api.v1alpha1.wfm.WFM.ListShiftInstanceSidsForSchedule:output_type -> api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleResponse
	328, // 890: api.v1alpha1.wfm.WFM.ListShiftSegmentsByShiftInstanceSids:output_type -> api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes
	334, // 891: api.v1alpha1.wfm.WFM.SetSchedulingTarget:output_type -> api.v1alpha1.wfm.SetSchedulingTargetRes
	336, // 892: api.v1alpha1.wfm.WFM.GetSchedulingTarget:output_type -> api.v1alpha1.wfm.GetSchedulingTargetRes
	338, // 893: api.v1alpha1.wfm.WFM.DeleteSchedulingTarget:output_type -> api.v1alpha1.wfm.DeleteSchedulingTargetRes
	340, // 894: api.v1alpha1.wfm.WFM.GetDefaultSchedulingTarget:output_type -> api.v1alpha1.wfm.GetDefaultSchedulingTargetRes
	342, // 895: api.v1alpha1.wfm.WFM.SetDefaultSchedulingTarget:output_type -> api.v1alpha1.wfm.SetDefaultSchedulingTargetRes
	331, // 896: api.v1alpha1.wfm.WFM.GetPerformanceMetrics:output_type -> api.v1alpha1.wfm.GetPerformanceMetricsRes
	344, // 897: api.v1alpha1.wfm.WFM.ListRequiredCallsIntervals:output_type -> api.v1alpha1.wfm.ListRequiredCallsIntervalsRes
	351, // 898: api.v1alpha1.wfm.WFM.CreateTourPattern:output_type -> api.v1alpha1.wfm.CreateTourPatternRes
	353, // 899: api.v1alpha1.wfm.WFM.GetTourPatternDiagnostics:output_type -> api.v1alpha1.wfm.GetTourPatternDiagnosticsRes
	355, // 900: api.v1alpha1.wfm.WFM.UpsertTourPatternWithMembers:output_type -> api.v1alpha1.wfm.UpsertTourPatternWithMembersRes
	357, // 901: api.v1alpha1.wfm.WFM.GetTourPattern:output_type -> api.v1alpha1.wfm.GetTourPatternRes
	359, // 902: api.v1alpha1.wfm.WFM.GetTourPatternWithMembers:output_type -> api.v1alpha1.wfm.GetTourPatternWithMembersRes
	361, // 903: api.v1alpha1.wfm.WFM.DeleteTourPattern:output_type -> api.v1alpha1.wfm.DeleteTourPatternRes
	363, // 904: api.v1alpha1.wfm.WFM.CreateTourWeekPattern:output_type -> api.v1alpha1.wfm.CreateTourWeekPatternRes
	365, // 905: api.v1alpha1.wfm.WFM.ListTourWeekPatterns:output_type -> api.v1alpha1.wfm.ListTourWeekPatternsRes
	367, // 906: api.v1alpha1.wfm.WFM.DeleteTourWeekPatterns:output_type -> api.v1alpha1.wfm.DeleteTourWeekPatternsRes
	369, // 907: api.v1alpha1.wfm.WFM.CreateTourShiftInstanceConfig:output_type -> api.v1alpha1.wfm.CreateTourShiftInstanceConfigRes
	371, // 908: api.v1alpha1.wfm.WFM.UpdateTourShiftInstanceConfig:output_type -> api.v1alpha1.wfm.UpdateTourShiftInstanceConfigRes
	373, // 909: api.v1alpha1.wfm.WFM.ListTourShiftInstanceConfigs:output_type -> api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes
	375, // 910: api.v1alpha1.wfm.WFM.DeleteTourShiftInstanceConfigs:output_type -> api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsRes
	377, // 911: api.v1alpha1.wfm.WFM.CreateTourShiftSegmentConfig:output_type -> api.v1alpha1.wfm.CreateTourShiftSegmentConfigRes
	379, // 912: api.v1alpha1.wfm.WFM.UpdateTourShiftSegmentConfig:output_type -> api.v1alpha1.wfm.UpdateTourShiftSegmentConfigRes
	381, // 913: api.v1alpha1.wfm.WFM.ListTourShiftSegmentConfigs:output_type -> api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes
	383, // 914: api.v1alpha1.wfm.WFM.DeleteTourShiftSegmentConfigs:output_type -> api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsRes
	385, // 915: api.v1alpha1.wfm.WFM.CreateTourAgentCollection:output_type -> api.v1alpha1.wfm.CreateTourAgentCollectionRes
	387, // 916: api.v1alpha1.wfm.WFM.UpdateTourAgentCollection:output_type -> api.v1alpha1.wfm.UpdateTourAgentCollectionRes
	389, // 917: api.v1alpha1.wfm.WFM.ListTourAgentCollections:output_type -> api.v1alpha1.wfm.ListTourAgentCollectionsRes
	391, // 918: api.v1alpha1.wfm.WFM.DeleteTourAgentCollections:output_type -> api.v1alpha1.wfm.DeleteTourAgentCollectionsRes
	393, // 919: api.v1alpha1.wfm.WFM.CreateTourAgentCollectionWFMAgents:output_type -> api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsRes
	395, // 920: api.v1alpha1.wfm.WFM.ListTourAgentCollectionWFMAgents:output_type -> api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes
	397, // 921: api.v1alpha1.wfm.WFM.DeleteTourAgentCollectionWFMAgents:output_type -> api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsRes
	399, // 922: api.v1alpha1.wfm.WFM.GenerateTourWeekPatterns:output_type -> api.v1alpha1.wfm.GenerateTourWeekPatternsRes
	403, // 923: api.v1alpha1.wfm.WFM.ListValidAgentsForReplacement:output_type -> api.v1alpha1.wfm.ListValidAgentsForReplacementRes
	405, // 924: api.v1alpha1.wfm.WFM.ReplaceAgentOnSchedule:output_type -> api.v1alpha1.wfm.ReplaceAgentOnScheduleRes
	405, // 925: api.v1alpha1.wfm.WFM.ReplaceAgentOnScheduleV1:output_type -> api.v1alpha1.wfm.ReplaceAgentOnScheduleRes
	401, // 926: api.v1alpha1.wfm.WFM.RemoveAgentFromSchedule:output_type -> api.v1alpha1.wfm.RemoveAgentFromScheduleResponse
	423, // 927: api.v1alpha1.wfm.WFM.CreateAgentLeavePetition:output_type -> api.v1alpha1.wfm.CreateAgentLeavePetitionResponse
	425, // 928: api.v1alpha1.wfm.WFM.ListAgentLeavePetitions:output_type -> api.v1alpha1.wfm.ListAgentLeavePetitionsResponse
	427, // 929: api.v1alpha1.wfm.WFM.ArchiveAgentLeavePetition:output_type -> api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse
	429, // 930: api.v1alpha1.wfm.WFM.ResolveAgentLeavePetition:output_type -> api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse
	431, // 931: api.v1alpha1.wfm.WFM.CancelAgentLeavePetition:output_type -> api.v1alpha1.wfm.CancelAgentLeavePetitionResponse
	408, // 932: api.v1alpha1.wfm.WFM.HelloWorldWFMAdherence:output_type -> api.v1alpha1.wfm.HelloWorldWFMAdherenceResponse
	410, // 933: api.v1alpha1.wfm.WFM.ListAgentStatesForDay:output_type -> api.v1alpha1.wfm.ListAgentStatesForDayResponse
	412, // 934: api.v1alpha1.wfm.WFM.ListRealTimeManagementStates:output_type -> api.v1alpha1.wfm.ListRealTimeManagementStatesResponse
	414, // 935: api.v1alpha1.wfm.WFM.ListAdherenceAgentStates:output_type -> api.v1alpha1.wfm.ListAdherenceAgentStatesResponse
	417, // 936: api.v1alpha1.wfm.WFM.UpsertRealTimeManagementStateColor:output_type -> api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse
	419, // 937: api.v1alpha1.wfm.WFM.ListRealTimeManagementStateColors:output_type -> api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse
	421, // 938: api.v1alpha1.wfm.WFM.DeleteRealTimeManagementStateColor:output_type -> api.v1alpha1.wfm.DeleteRealTimeManagementStateColorResponse
	433, // 939: api.v1alpha1.wfm.WFM.CreateRgbaColor:output_type -> api.v1alpha1.wfm.CreateRgbaColorResponse
	435, // 940: api.v1alpha1.wfm.WFM.ListRgbaColors:output_type -> api.v1alpha1.wfm.ListRgbaColorsResponse
	437, // 941: api.v1alpha1.wfm.WFM.UpdateRgbaColor:output_type -> api.v1alpha1.wfm.UpdateRgbaColorResponse
	439, // 942: api.v1alpha1.wfm.WFM.DeleteRgbaColor:output_type -> api.v1alpha1.wfm.DeleteRgbaColorResponse
	441, // 943: api.v1alpha1.wfm.WFM.CreateAdherenceRuleNotificationConfig:output_type -> api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigResponse
	443, // 944: api.v1alpha1.wfm.WFM.UpdateAdherenceRuleNotificationConfig:output_type -> api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigResponse
	445, // 945: api.v1alpha1.wfm.WFM.CreateAdherenceRuleNotificationConfigEntry:output_type -> api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryResponse
	447, // 946: api.v1alpha1.wfm.WFM.UpdateAdherenceRuleNotificationConfigEntry:output_type -> api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryResponse
	449, // 947: api.v1alpha1.wfm.WFM.DeleteAdherenceRuleNotificationConfigEntry:output_type -> api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryResponse
	451, // 948: api.v1alpha1.wfm.WFM.ListAdherenceRuleNotificationConfigs:output_type -> api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse
	453, // 949: api.v1alpha1.wfm.WFM.CreateAdherenceDepartmentalRule:output_type -> api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleResponse
	455, // 950: api.v1alpha1.wfm.WFM.UpdateAdherenceDepartmentalRule:output_type -> api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleResponse
	457, // 951: api.v1alpha1.wfm.WFM.CreateAdherenceDepartmentalRuleClause:output_type -> api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseResponse
	459, // 952: api.v1alpha1.wfm.WFM.UpdateAdherenceDepartmentalRuleClause:output_type -> api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseResponse
	461, // 953: api.v1alpha1.wfm.WFM.DeleteAdherenceDepartmentalRuleClause:output_type -> api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseResponse
	463, // 954: api.v1alpha1.wfm.WFM.ListAdherenceDepartmentalRules:output_type -> api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse
	465, // 955: api.v1alpha1.wfm.WFM.CreateAdherenceAgentRule:output_type -> api.v1alpha1.wfm.CreateAdherenceAgentRuleResponse
	467, // 956: api.v1alpha1.wfm.WFM.UpdateAdherenceAgentRule:output_type -> api.v1alpha1.wfm.UpdateAdherenceAgentRuleResponse
	469, // 957: api.v1alpha1.wfm.WFM.CreateAdherenceAgentRuleClause:output_type -> api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseResponse
	471, // 958: api.v1alpha1.wfm.WFM.UpdateAdherenceAgentRuleClause:output_type -> api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseResponse
	475, // 959: api.v1alpha1.wfm.WFM.ListAdherenceAgentRules:output_type -> api.v1alpha1.wfm.ListAdherenceAgentRulesResponse
	473, // 960: api.v1alpha1.wfm.WFM.DeleteAdherenceAgentRuleClause:output_type -> api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseResponse
	477, // 961: api.v1alpha1.wfm.WFM.AgentGetSchedule:output_type -> api.v1alpha1.wfm.AgentGetScheduleResponse
	479, // 962: api.v1alpha1.wfm.WFM.AgentListLeavePetitions:output_type -> api.v1alpha1.wfm.AgentListLeavePetitionsResponse
	481, // 963: api.v1alpha1.wfm.WFM.AgentCreateLeavePetition:output_type -> api.v1alpha1.wfm.AgentCreateLeavePetitionResponse
	483, // 964: api.v1alpha1.wfm.WFM.AgentCancelLeavePetition:output_type -> api.v1alpha1.wfm.AgentCancelLeavePetitionResponse
	748, // [748:965] is the sub-list for method output_type
	531, // [531:748] is the sub-list for method input_type
	531, // [531:531] is the sub-list for extension type_name
	531, // [531:531] is the sub-list for extension extendee
	0,   // [0:531] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_wfm_wfm_proto_init() }
func file_api_v1alpha1_wfm_wfm_proto_init() {
	if File_api_v1alpha1_wfm_wfm_proto != nil {
		return
	}
	file_api_v1alpha1_wfm_wfm_proto_msgTypes[62].OneofWrappers = []any{
		(*BuildProfileForecastByIntervalWithStatsRes_CallData)(nil),
		(*BuildProfileForecastByIntervalWithStatsRes_ForecastStats)(nil),
	}
	file_api_v1alpha1_wfm_wfm_proto_msgTypes[79].OneofWrappers = []any{
		(*BuildRegressionForecastByIntervalWithStatsRes_CallData)(nil),
		(*BuildRegressionForecastByIntervalWithStatsRes_ForecastStats)(nil),
	}
	file_api_v1alpha1_wfm_wfm_proto_msgTypes[92].OneofWrappers = []any{
		(*DeleteForecastIntervalsReq_SkillProfileSid)(nil),
		(*DeleteForecastIntervalsReq_ForecastIntervalSids)(nil),
		(*DeleteForecastIntervalsReq_SkillProfileCategory)(nil),
	}
	file_api_v1alpha1_wfm_wfm_proto_msgTypes[124].OneofWrappers = []any{
		(*ConstraintRule_SchedulingActivity)(nil),
		(*ConstraintRule_SkillProficiency)(nil),
	}
	file_api_v1alpha1_wfm_wfm_proto_msgTypes[247].OneofWrappers = []any{
		(*ListConfigEntitiesRes_CallCenterNode)(nil),
		(*ListConfigEntitiesRes_ClientNodes)(nil),
		(*ListConfigEntitiesRes_LocationNodes)(nil),
		(*ListConfigEntitiesRes_ProgramNodes)(nil),
		(*ListConfigEntitiesRes_AgentGroups)(nil),
		(*ListConfigEntitiesRes_ShiftTemplates)(nil),
		(*ListConfigEntitiesRes_WfmAgents)(nil),
		(*ListConfigEntitiesRes_PlacementRules)(nil),
		(*ListConfigEntitiesRes_ConstraintRules)(nil),
		(*ListConfigEntitiesRes_NonSkillActivities)(nil),
		(*ListConfigEntitiesRes_AgentAvailabilityPatterns)(nil),
		(*ListConfigEntitiesRes_OpenTimesPatterns)(nil),
		(*ListConfigEntitiesRes_SchedulingActivity)(nil),
		(*ListConfigEntitiesRes_SkillProficiencies)(nil),
		(*ListConfigEntitiesRes_ScheduleScenarios)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1alpha1_wfm_wfm_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   508,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1alpha1_wfm_wfm_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_wfm_wfm_proto_depIdxs,
		EnumInfos:         file_api_v1alpha1_wfm_wfm_proto_enumTypes,
		MessageInfos:      file_api_v1alpha1_wfm_wfm_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_wfm_wfm_proto = out.File
	file_api_v1alpha1_wfm_wfm_proto_rawDesc = nil
	file_api_v1alpha1_wfm_wfm_proto_goTypes = nil
	file_api_v1alpha1_wfm_wfm_proto_depIdxs = nil
}
