// Copyright (c) 2020, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: api/v1alpha1/wfm/wfm.proto

package wfm

import (
	_ "github.com/tcncloud/api-go/annotations"
	commons "github.com/tcncloud/api-go/api/commons"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum specifying what type of forecast data interval to delete
type DeleteForecastIntervalsReq_ForecastIntervalDeleteType int32

const (
	DeleteForecastIntervalsReq_INTERVALS_AND_DELTAS DeleteForecastIntervalsReq_ForecastIntervalDeleteType = 0
	DeleteForecastIntervalsReq_DELTAS               DeleteForecastIntervalsReq_ForecastIntervalDeleteType = 1
)

// Enum value maps for DeleteForecastIntervalsReq_ForecastIntervalDeleteType.
var (
	DeleteForecastIntervalsReq_ForecastIntervalDeleteType_name = map[int32]string{
		0: "INTERVALS_AND_DELTAS",
		1: "DELTAS",
	}
	DeleteForecastIntervalsReq_ForecastIntervalDeleteType_value = map[string]int32{
		"INTERVALS_AND_DELTAS": 0,
		"DELTAS":               1,
	}
)

func (x DeleteForecastIntervalsReq_ForecastIntervalDeleteType) Enum() *DeleteForecastIntervalsReq_ForecastIntervalDeleteType {
	p := new(DeleteForecastIntervalsReq_ForecastIntervalDeleteType)
	*p = x
	return p
}

func (x DeleteForecastIntervalsReq_ForecastIntervalDeleteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteForecastIntervalsReq_ForecastIntervalDeleteType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1alpha1_wfm_wfm_proto_enumTypes[0].Descriptor()
}

func (DeleteForecastIntervalsReq_ForecastIntervalDeleteType) Type() protoreflect.EnumType {
	return &file_api_v1alpha1_wfm_wfm_proto_enumTypes[0]
}

func (x DeleteForecastIntervalsReq_ForecastIntervalDeleteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteForecastIntervalsReq_ForecastIntervalDeleteType.Descriptor instead.
func (DeleteForecastIntervalsReq_ForecastIntervalDeleteType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{72, 0}
}

// Message type specifying information regarding the skill that will associated with
// SkillProfile and other entities.
type Skill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile skill.
	SkillSid int64 `protobuf:"varint,1,opt,name=skill_sid,json=skillSid,proto3" json:"skill_sid,omitempty"`
	// type of the skill.
	ClientSkillType commons.SkillType_Enum `protobuf:"varint,2,opt,name=client_skill_type,json=clientSkillType,proto3,enum=api.commons.SkillType_Enum" json:"client_skill_type,omitempty"`
	// skill name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// approximate date that the skill was deleted, if absent, the skill has not been deleted.
	DeleteDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=delete_date,json=deleteDate,proto3" json:"delete_date,omitempty"`
	// ID of the skill (as shown in backoffice) for the given skill type (agent, PBX, hunt_group, etc).
	ClientSkillSid int64 `protobuf:"varint,5,opt,name=client_skill_sid,json=clientSkillSid,proto3" json:"client_skill_sid,omitempty"`
	// Proficiency that this skill has for the skill profile containing it.
	// This field will only be set when this skill is contained within a SkillProfile.
	Proficiency int32 `protobuf:"varint,6,opt,name=proficiency,proto3" json:"proficiency,omitempty"`
}

func (x *Skill) Reset() {
	*x = Skill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skill) ProtoMessage() {}

func (x *Skill) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skill.ProtoReflect.Descriptor instead.
func (*Skill) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{0}
}

func (x *Skill) GetSkillSid() int64 {
	if x != nil {
		return x.SkillSid
	}
	return 0
}

func (x *Skill) GetClientSkillType() commons.SkillType_Enum {
	if x != nil {
		return x.ClientSkillType
	}
	return commons.SkillType_Enum(0)
}

func (x *Skill) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Skill) GetDeleteDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteDate
	}
	return nil
}

func (x *Skill) GetClientSkillSid() int64 {
	if x != nil {
		return x.ClientSkillSid
	}
	return 0
}

func (x *Skill) GetProficiency() int32 {
	if x != nil {
		return x.Proficiency
	}
	return 0
}

// Message type specifying a skill profile including specific skills
type SkillProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// name of the skill profile.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description about the skill profile.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// date of creation of the skill profile.
	CreateDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	// indicates whether the autogenerated name of the skill profile has been modified by the org.
	Unnamed bool `protobuf:"varint,5,opt,name=unnamed,proto3" json:"unnamed,omitempty"`
	// date that the profile became inactive, if not set, then the profile is currently active.
	InactiveAsOfDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=inactive_as_of_date,json=inactiveAsOfDate,proto3" json:"inactive_as_of_date,omitempty"`
	// skills of the skill profile.
	Skills []*Skill `protobuf:"bytes,7,rep,name=skills,proto3" json:"skills,omitempty"`
	// number of skills that this skill profile has.
	SkillsCount int32 `protobuf:"varint,8,opt,name=skills_count,json=skillsCount,proto3" json:"skills_count,omitempty"`
	// percentage of total calls that had this skill profile.
	Occurrence float32 `protobuf:"fixed32,9,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	// average time that calls took to be answered.
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,10,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// average duration of answered calls.
	AverageHandleTimeInSeconds float32 `protobuf:"fixed32,11,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// average time that agents spent in wrap up.
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,12,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// average time that callers waited before hanging unanswered calls.
	AverageTimeToAbortInSeconds float32 `protobuf:"fixed32,13,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// indicates whether or not the averages were manually entered by the user (if false then the averages were automatically calculated from the historical data).
	AreAveragesManual bool `protobuf:"varint,14,opt,name=are_averages_manual,json=areAveragesManual,proto3" json:"are_averages_manual,omitempty"`
}

func (x *SkillProfile) Reset() {
	*x = SkillProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillProfile) ProtoMessage() {}

func (x *SkillProfile) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillProfile.ProtoReflect.Descriptor instead.
func (*SkillProfile) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{1}
}

func (x *SkillProfile) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *SkillProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SkillProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SkillProfile) GetCreateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *SkillProfile) GetUnnamed() bool {
	if x != nil {
		return x.Unnamed
	}
	return false
}

func (x *SkillProfile) GetInactiveAsOfDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InactiveAsOfDate
	}
	return nil
}

func (x *SkillProfile) GetSkills() []*Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *SkillProfile) GetSkillsCount() int32 {
	if x != nil {
		return x.SkillsCount
	}
	return 0
}

func (x *SkillProfile) GetOccurrence() float32 {
	if x != nil {
		return x.Occurrence
	}
	return 0
}

func (x *SkillProfile) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *SkillProfile) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *SkillProfile) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *SkillProfile) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

func (x *SkillProfile) GetAreAveragesManual() bool {
	if x != nil {
		return x.AreAveragesManual
	}
	return false
}

// Request message for the ListSkillProfiles RPC.
type ListSkillProfilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to true only active skill profiles will be returned, otherwise active and inactive skill profiles will be returned.
	ActiveOnly bool `protobuf:"varint,1,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
	// If set to true the skills of skill profiles will be returned, otherwise they will not.
	WithSkills bool `protobuf:"varint,2,opt,name=with_skills,json=withSkills,proto3" json:"with_skills,omitempty"`
}

func (x *ListSkillProfilesReq) Reset() {
	*x = ListSkillProfilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSkillProfilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSkillProfilesReq) ProtoMessage() {}

func (x *ListSkillProfilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSkillProfilesReq.ProtoReflect.Descriptor instead.
func (*ListSkillProfilesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{2}
}

func (x *ListSkillProfilesReq) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

func (x *ListSkillProfilesReq) GetWithSkills() bool {
	if x != nil {
		return x.WithSkills
	}
	return false
}

// Response message for the ListSkillProfiles RPC.
type ListSkillProfilesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillProfiles []*SkillProfile `protobuf:"bytes,1,rep,name=skill_profiles,json=skillProfiles,proto3" json:"skill_profiles,omitempty"`
}

func (x *ListSkillProfilesRes) Reset() {
	*x = ListSkillProfilesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSkillProfilesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSkillProfilesRes) ProtoMessage() {}

func (x *ListSkillProfilesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSkillProfilesRes.ProtoReflect.Descriptor instead.
func (*ListSkillProfilesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{3}
}

func (x *ListSkillProfilesRes) GetSkillProfiles() []*SkillProfile {
	if x != nil {
		return x.SkillProfiles
	}
	return nil
}

// Request message for the UpdateSkillProfile RPC.
type UpdateSkillProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// skill profile id to modify.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// new name that the skill profile will have.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// new description that the skill profile will have.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// average time that calls took to be answered.
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,4,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// average duration of answered calls.
	AverageHandleTimeInSeconds float32 `protobuf:"fixed32,5,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// average time that agents spent in wrap up.
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,6,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// average time that callers waited before hanging unanswered calls.
	AverageTimeToAbortInSeconds float32 `protobuf:"fixed32,7,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// indicates whether or not the averages were manually entered by the user (if false then the averages were automatically calculated from the historical data).
	AreAveragesManual bool `protobuf:"varint,8,opt,name=are_averages_manual,json=areAveragesManual,proto3" json:"are_averages_manual,omitempty"`
}

func (x *UpdateSkillProfileReq) Reset() {
	*x = UpdateSkillProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSkillProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileReq) ProtoMessage() {}

func (x *UpdateSkillProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileReq.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateSkillProfileReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *UpdateSkillProfileReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSkillProfileReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSkillProfileReq) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *UpdateSkillProfileReq) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *UpdateSkillProfileReq) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *UpdateSkillProfileReq) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

func (x *UpdateSkillProfileReq) GetAreAveragesManual() bool {
	if x != nil {
		return x.AreAveragesManual
	}
	return false
}

// Response message for the UpdateSkillProfile RPC.
type UpdateSkillProfileRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSkillProfileRes) Reset() {
	*x = UpdateSkillProfileRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSkillProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileRes) ProtoMessage() {}

func (x *UpdateSkillProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileRes.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{5}
}

// Request message for the UpdateSkillProfileProficiencies RPC.
type UpdateSkillProfileProficienciesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proficiencies to update.
	Proficiencies []*UpdateSkillProfileProficienciesReq_Proficiency `protobuf:"bytes,2,rep,name=proficiencies,proto3" json:"proficiencies,omitempty"`
}

func (x *UpdateSkillProfileProficienciesReq) Reset() {
	*x = UpdateSkillProfileProficienciesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSkillProfileProficienciesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileProficienciesReq) ProtoMessage() {}

func (x *UpdateSkillProfileProficienciesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileProficienciesReq.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileProficienciesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateSkillProfileProficienciesReq) GetProficiencies() []*UpdateSkillProfileProficienciesReq_Proficiency {
	if x != nil {
		return x.Proficiencies
	}
	return nil
}

// Response message for the UpdateSkillProfileProficiencies RPC.
type UpdateSkillProfileProficienciesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSkillProfileProficienciesRes) Reset() {
	*x = UpdateSkillProfileProficienciesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSkillProfileProficienciesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileProficienciesRes) ProtoMessage() {}

func (x *UpdateSkillProfileProficienciesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileProficienciesRes.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileProficienciesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{7}
}

// Request message for the GetSkillProfile RPC.
type GetSkillProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desired skill profile.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
}

func (x *GetSkillProfileReq) Reset() {
	*x = GetSkillProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSkillProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkillProfileReq) ProtoMessage() {}

func (x *GetSkillProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkillProfileReq.ProtoReflect.Descriptor instead.
func (*GetSkillProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{8}
}

func (x *GetSkillProfileReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

// Response message for the GetSkillProfile RPC.
type GetSkillProfileRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillProfile *SkillProfile `protobuf:"bytes,1,opt,name=skill_profile,json=skillProfile,proto3" json:"skill_profile,omitempty"`
	// Inactive skill profile mappings that the requested skill profile has.
	// If the profile's @inactive_as_of_date is nil then the mapping is of inactive profiles to this one.
	// If the profile's @inactive_as_of_date is NOT nil then the mapping is of this profile to an active one.
	Mappings []*GetSkillProfileRes_Mapping `protobuf:"bytes,2,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *GetSkillProfileRes) Reset() {
	*x = GetSkillProfileRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSkillProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkillProfileRes) ProtoMessage() {}

func (x *GetSkillProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkillProfileRes.ProtoReflect.Descriptor instead.
func (*GetSkillProfileRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{9}
}

func (x *GetSkillProfileRes) GetSkillProfile() *SkillProfile {
	if x != nil {
		return x.SkillProfile
	}
	return nil
}

func (x *GetSkillProfileRes) GetMappings() []*GetSkillProfileRes_Mapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

// Request message for the ResyncSkillProfiles RPC.
type ResyncSkillProfilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not to resync from the historical range start date time.
	// If set to false resync will be done from the last resync date.
	FromHistoricalRangeStartDate bool `protobuf:"varint,1,opt,name=from_historical_range_start_date,json=fromHistoricalRangeStartDate,proto3" json:"from_historical_range_start_date,omitempty"`
}

func (x *ResyncSkillProfilesReq) Reset() {
	*x = ResyncSkillProfilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResyncSkillProfilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResyncSkillProfilesReq) ProtoMessage() {}

func (x *ResyncSkillProfilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResyncSkillProfilesReq.ProtoReflect.Descriptor instead.
func (*ResyncSkillProfilesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{10}
}

func (x *ResyncSkillProfilesReq) GetFromHistoricalRangeStartDate() bool {
	if x != nil {
		return x.FromHistoricalRangeStartDate
	}
	return false
}

// Response message for the ResyncSkillProfiles RPC.
type ResyncSkillProfilesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the newly created skill profiles.
	CreatedSkillProfileSids []int64 `protobuf:"varint,1,rep,packed,name=created_skill_profile_sids,json=createdSkillProfileSids,proto3" json:"created_skill_profile_sids,omitempty"`
}

func (x *ResyncSkillProfilesRes) Reset() {
	*x = ResyncSkillProfilesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResyncSkillProfilesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResyncSkillProfilesRes) ProtoMessage() {}

func (x *ResyncSkillProfilesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResyncSkillProfilesRes.ProtoReflect.Descriptor instead.
func (*ResyncSkillProfilesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{11}
}

func (x *ResyncSkillProfilesRes) GetCreatedSkillProfileSids() []int64 {
	if x != nil {
		return x.CreatedSkillProfileSids
	}
	return nil
}

// Request message for the GetLastSkillProfileResyncDate RPC.
type GetLastSkillProfileResyncDateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLastSkillProfileResyncDateReq) Reset() {
	*x = GetLastSkillProfileResyncDateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastSkillProfileResyncDateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastSkillProfileResyncDateReq) ProtoMessage() {}

func (x *GetLastSkillProfileResyncDateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastSkillProfileResyncDateReq.ProtoReflect.Descriptor instead.
func (*GetLastSkillProfileResyncDateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{12}
}

// Response message for the GetLastSkillProfileResyncDate RPC.
type GetLastSkillProfileResyncDateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// last date that the org resynced their skill profiles.
	// if not set, then the org hasn't done a resync of the skill profiles at any point in time.
	ResyncDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=resync_date,json=resyncDate,proto3" json:"resync_date,omitempty"`
}

func (x *GetLastSkillProfileResyncDateRes) Reset() {
	*x = GetLastSkillProfileResyncDateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastSkillProfileResyncDateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastSkillProfileResyncDateRes) ProtoMessage() {}

func (x *GetLastSkillProfileResyncDateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastSkillProfileResyncDateRes.ProtoReflect.Descriptor instead.
func (*GetLastSkillProfileResyncDateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{13}
}

func (x *GetLastSkillProfileResyncDateRes) GetResyncDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ResyncDate
	}
	return nil
}

// Request message for the UpsertForecastingParameters RPC.
type UpsertForecastingParametersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parameters used for forecasts and training data samples.
	ForecastingParameters *commons.ForecastingParameters `protobuf:"bytes,3,opt,name=forecasting_parameters,json=forecastingParameters,proto3" json:"forecasting_parameters,omitempty"`
}

func (x *UpsertForecastingParametersReq) Reset() {
	*x = UpsertForecastingParametersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertForecastingParametersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertForecastingParametersReq) ProtoMessage() {}

func (x *UpsertForecastingParametersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertForecastingParametersReq.ProtoReflect.Descriptor instead.
func (*UpsertForecastingParametersReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{14}
}

func (x *UpsertForecastingParametersReq) GetForecastingParameters() *commons.ForecastingParameters {
	if x != nil {
		return x.ForecastingParameters
	}
	return nil
}

// Response message for the UpsertForecastingParameters RPC.
type UpsertForecastingParametersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpsertForecastingParametersRes) Reset() {
	*x = UpsertForecastingParametersRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertForecastingParametersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertForecastingParametersRes) ProtoMessage() {}

func (x *UpsertForecastingParametersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertForecastingParametersRes.ProtoReflect.Descriptor instead.
func (*UpsertForecastingParametersRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{15}
}

// Request message for the GetForecastingParameters RPC.
type GetForecastingParametersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForecastingParametersReq) Reset() {
	*x = GetForecastingParametersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForecastingParametersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastingParametersReq) ProtoMessage() {}

func (x *GetForecastingParametersReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastingParametersReq.ProtoReflect.Descriptor instead.
func (*GetForecastingParametersReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{16}
}

// Response message for the GetForecastingParameters RPC.
type GetForecastingParametersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parameters used for forecasts and training data samples.
	ForecastingParameters *commons.ForecastingParameters `protobuf:"bytes,1,opt,name=forecasting_parameters,json=forecastingParameters,proto3" json:"forecasting_parameters,omitempty"`
}

func (x *GetForecastingParametersRes) Reset() {
	*x = GetForecastingParametersRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForecastingParametersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastingParametersRes) ProtoMessage() {}

func (x *GetForecastingParametersRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastingParametersRes.ProtoReflect.Descriptor instead.
func (*GetForecastingParametersRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{17}
}

func (x *GetForecastingParametersRes) GetForecastingParameters() *commons.ForecastingParameters {
	if x != nil {
		return x.ForecastingParameters
	}
	return nil
}

// Message type specifying an interval of calls linked to a skill profile used for historical the forecaster
type HistoricalDataInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// time that this interval starts at.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// ID of the skill profile that this interval belongs to.
	SkillProfileSid int64 `protobuf:"varint,2,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// the following are averages for all the calls found for this interval.
	// average time that calls took to be answered.
	AverageSpeedOfAnswerInSeconds *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// average duration of answered calls.
	AverageHandleTimeInSeconds *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// average time that agents spent in wrap up.
	AverageAfterCallWorkInSeconds *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// average time that callers waited before hanging unanswered calls.
	AverageTimeToAbortInSeconds *wrapperspb.FloatValue `protobuf:"bytes,6,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// total calls found for this interval (answered + unanswered).
	TotalCalls int32 `protobuf:"varint,7,opt,name=total_calls,json=totalCalls,proto3" json:"total_calls,omitempty"`
	// total number of calls that were abandoned
	TotalAbandonedCalls int32 `protobuf:"varint,8,opt,name=total_abandoned_calls,json=totalAbandonedCalls,proto3" json:"total_abandoned_calls,omitempty"`
	// true=interval w/ delta applied, false=historical interval
	IsDelta bool `protobuf:"varint,9,opt,name=is_delta,json=isDelta,proto3" json:"is_delta,omitempty"`
	// The following are only set by the server when requesting the training data intervals and the interval is a delta.
	// They will contain the non delta values for that interval.
	// original average time that calls took to be answered.
	OriginalAverageSpeedOfAnswerInSeconds *wrapperspb.FloatValue `protobuf:"bytes,10,opt,name=original_average_speed_of_answer_in_seconds,json=originalAverageSpeedOfAnswerInSeconds,proto3" json:"original_average_speed_of_answer_in_seconds,omitempty"`
	// original average duration of answered calls.
	OriginalAverageHandleTimeInSeconds *wrapperspb.FloatValue `protobuf:"bytes,11,opt,name=original_average_handle_time_in_seconds,json=originalAverageHandleTimeInSeconds,proto3" json:"original_average_handle_time_in_seconds,omitempty"`
	// original average time that agents spent in wrap up.
	OriginalAverageAfterCallWorkInSeconds *wrapperspb.FloatValue `protobuf:"bytes,12,opt,name=original_average_after_call_work_in_seconds,json=originalAverageAfterCallWorkInSeconds,proto3" json:"original_average_after_call_work_in_seconds,omitempty"`
	// original average time that callers waited before hanging unanswered calls.
	OriginalAverageTimeToAbortInSeconds *wrapperspb.FloatValue `protobuf:"bytes,13,opt,name=original_average_time_to_abort_in_seconds,json=originalAverageTimeToAbortInSeconds,proto3" json:"original_average_time_to_abort_in_seconds,omitempty"`
	// original total calls found for this interval (answered + unanswered).
	OriginalTotalCalls int32 `protobuf:"varint,14,opt,name=original_total_calls,json=originalTotalCalls,proto3" json:"original_total_calls,omitempty"`
	// original total number of calls that were abandoned
	OriginalTotalAbandonedCalls int32 `protobuf:"varint,15,opt,name=original_total_abandoned_calls,json=originalTotalAbandonedCalls,proto3" json:"original_total_abandoned_calls,omitempty"`
}

func (x *HistoricalDataInterval) Reset() {
	*x = HistoricalDataInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalDataInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalDataInterval) ProtoMessage() {}

func (x *HistoricalDataInterval) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalDataInterval.ProtoReflect.Descriptor instead.
func (*HistoricalDataInterval) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{18}
}

func (x *HistoricalDataInterval) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *HistoricalDataInterval) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *HistoricalDataInterval) GetAverageSpeedOfAnswerInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetAverageHandleTimeInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetAverageAfterCallWorkInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetAverageTimeToAbortInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetTotalCalls() int32 {
	if x != nil {
		return x.TotalCalls
	}
	return 0
}

func (x *HistoricalDataInterval) GetTotalAbandonedCalls() int32 {
	if x != nil {
		return x.TotalAbandonedCalls
	}
	return 0
}

func (x *HistoricalDataInterval) GetIsDelta() bool {
	if x != nil {
		return x.IsDelta
	}
	return false
}

func (x *HistoricalDataInterval) GetOriginalAverageSpeedOfAnswerInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.OriginalAverageSpeedOfAnswerInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetOriginalAverageHandleTimeInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.OriginalAverageHandleTimeInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetOriginalAverageAfterCallWorkInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.OriginalAverageAfterCallWorkInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetOriginalAverageTimeToAbortInSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.OriginalAverageTimeToAbortInSeconds
	}
	return nil
}

func (x *HistoricalDataInterval) GetOriginalTotalCalls() int32 {
	if x != nil {
		return x.OriginalTotalCalls
	}
	return 0
}

func (x *HistoricalDataInterval) GetOriginalTotalAbandonedCalls() int32 {
	if x != nil {
		return x.OriginalTotalAbandonedCalls
	}
	return 0
}

// Request message for the ListHistoricalData RPC
type ListHistoricalDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile used to examine matching calls in the client's historical data.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
}

func (x *ListHistoricalDataReq) Reset() {
	*x = ListHistoricalDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistoricalDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoricalDataReq) ProtoMessage() {}

func (x *ListHistoricalDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoricalDataReq.ProtoReflect.Descriptor instead.
func (*ListHistoricalDataReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{19}
}

func (x *ListHistoricalDataReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

// Response message for the ListHistoricalData RPC
type ListHistoricalDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// historical data intervals for the skill profile that the org requested.
	HistoricalDataIntervals []*HistoricalDataInterval `protobuf:"bytes,1,rep,name=historical_data_intervals,json=historicalDataIntervals,proto3" json:"historical_data_intervals,omitempty"`
}

func (x *ListHistoricalDataRes) Reset() {
	*x = ListHistoricalDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistoricalDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoricalDataRes) ProtoMessage() {}

func (x *ListHistoricalDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoricalDataRes.ProtoReflect.Descriptor instead.
func (*ListHistoricalDataRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{20}
}

func (x *ListHistoricalDataRes) GetHistoricalDataIntervals() []*HistoricalDataInterval {
	if x != nil {
		return x.HistoricalDataIntervals
	}
	return nil
}

// Request message for the UpsertHistoricalDataDelta RPC
type UpsertHistoricalDataDeltaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Training data delta to create/update.
	Delta *HistoricalDataInterval `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *UpsertHistoricalDataDeltaReq) Reset() {
	*x = UpsertHistoricalDataDeltaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertHistoricalDataDeltaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertHistoricalDataDeltaReq) ProtoMessage() {}

func (x *UpsertHistoricalDataDeltaReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertHistoricalDataDeltaReq.ProtoReflect.Descriptor instead.
func (*UpsertHistoricalDataDeltaReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{21}
}

func (x *UpsertHistoricalDataDeltaReq) GetDelta() *HistoricalDataInterval {
	if x != nil {
		return x.Delta
	}
	return nil
}

// Response message for the UpsertHistoricalDataDelta RPC
type UpsertHistoricalDataDeltaRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated delta that was stored.
	Delta *HistoricalDataInterval `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *UpsertHistoricalDataDeltaRes) Reset() {
	*x = UpsertHistoricalDataDeltaRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertHistoricalDataDeltaRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertHistoricalDataDeltaRes) ProtoMessage() {}

func (x *UpsertHistoricalDataDeltaRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertHistoricalDataDeltaRes.ProtoReflect.Descriptor instead.
func (*UpsertHistoricalDataDeltaRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{22}
}

func (x *UpsertHistoricalDataDeltaRes) GetDelta() *HistoricalDataInterval {
	if x != nil {
		return x.Delta
	}
	return nil
}

// Request message for the UpsertHistoricalDataDelta RPC.
type UpsertHistoricalDataDeltasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Training data delta to create/update.
	Deltas []*HistoricalDataInterval `protobuf:"bytes,1,rep,name=deltas,proto3" json:"deltas,omitempty"`
}

func (x *UpsertHistoricalDataDeltasReq) Reset() {
	*x = UpsertHistoricalDataDeltasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertHistoricalDataDeltasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertHistoricalDataDeltasReq) ProtoMessage() {}

func (x *UpsertHistoricalDataDeltasReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertHistoricalDataDeltasReq.ProtoReflect.Descriptor instead.
func (*UpsertHistoricalDataDeltasReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{23}
}

func (x *UpsertHistoricalDataDeltasReq) GetDeltas() []*HistoricalDataInterval {
	if x != nil {
		return x.Deltas
	}
	return nil
}

// Response message for the UpsertHistoricalDataDelta RPC.
type UpsertHistoricalDataDeltasRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpsertHistoricalDataDeltasRes) Reset() {
	*x = UpsertHistoricalDataDeltasRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertHistoricalDataDeltasRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertHistoricalDataDeltasRes) ProtoMessage() {}

func (x *UpsertHistoricalDataDeltasRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertHistoricalDataDeltasRes.ProtoReflect.Descriptor instead.
func (*UpsertHistoricalDataDeltasRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{24}
}

// Request message for the ListSkills RPC
type ListSkillsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSkillsReq) Reset() {
	*x = ListSkillsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSkillsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSkillsReq) ProtoMessage() {}

func (x *ListSkillsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSkillsReq.ProtoReflect.Descriptor instead.
func (*ListSkillsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{25}
}

// Response message for the ListSkills RPC
type ListSkillsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// skills found for the given parameters.
	Skills []*Skill `protobuf:"bytes,1,rep,name=skills,proto3" json:"skills,omitempty"`
}

func (x *ListSkillsRes) Reset() {
	*x = ListSkillsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSkillsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSkillsRes) ProtoMessage() {}

func (x *ListSkillsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSkillsRes.ProtoReflect.Descriptor instead.
func (*ListSkillsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{26}
}

func (x *ListSkillsRes) GetSkills() []*Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

// Message type specifying parameters used to generate a profile forecast
type CallProfileTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the template
	CallProfileTemplateSid int64 `protobuf:"varint,1,opt,name=call_profile_template_sid,json=callProfileTemplateSid,proto3" json:"call_profile_template_sid,omitempty"`
	// Name of the template.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// call profile for total calls
	TotalCallsProfile *commons.CallProfileGroupCalls `protobuf:"bytes,3,opt,name=total_calls_profile,json=totalCallsProfile,proto3" json:"total_calls_profile,omitempty"`
	// call profile for total abandoned calls
	TotalAbandonedCallsProfile *commons.CallProfileGroupCalls `protobuf:"bytes,4,opt,name=total_abandoned_calls_profile,json=totalAbandonedCallsProfile,proto3" json:"total_abandoned_calls_profile,omitempty"`
	// call profile for ASA
	AverageSpeedOfAnswerProfile *commons.CallProfileGroupAvgs `protobuf:"bytes,5,opt,name=average_speed_of_answer_profile,json=averageSpeedOfAnswerProfile,proto3" json:"average_speed_of_answer_profile,omitempty"`
	// call profile for AHT
	AverageHandleTimeProfile *commons.CallProfileGroupAvgs `protobuf:"bytes,6,opt,name=average_handle_time_profile,json=averageHandleTimeProfile,proto3" json:"average_handle_time_profile,omitempty"`
	// call profile for ACW
	AverageAfterCallWorkProfile *commons.CallProfileGroupAvgs `protobuf:"bytes,7,opt,name=average_after_call_work_profile,json=averageAfterCallWorkProfile,proto3" json:"average_after_call_work_profile,omitempty"`
	// call profile for ATAB
	AverageTimeToAbortProfile *commons.CallProfileGroupAvgs `protobuf:"bytes,8,opt,name=average_time_to_abort_profile,json=averageTimeToAbortProfile,proto3" json:"average_time_to_abort_profile,omitempty"`
	// Fixed average for speed of answer
	FixedAverageSpeedOfAnswer float32 `protobuf:"fixed32,9,opt,name=fixed_average_speed_of_answer,json=fixedAverageSpeedOfAnswer,proto3" json:"fixed_average_speed_of_answer,omitempty"`
	// Fixed average for handle time
	FixedAverageHandleTime float32 `protobuf:"fixed32,10,opt,name=fixed_average_handle_time,json=fixedAverageHandleTime,proto3" json:"fixed_average_handle_time,omitempty"`
	// Fixed average for after call work
	FixedAverageAfterCallWork float32 `protobuf:"fixed32,11,opt,name=fixed_average_after_call_work,json=fixedAverageAfterCallWork,proto3" json:"fixed_average_after_call_work,omitempty"`
	// Fixed average for time to abort
	FixedAverageTimeToAbort float32 `protobuf:"fixed32,12,opt,name=fixed_average_time_to_abort,json=fixedAverageTimeToAbort,proto3" json:"fixed_average_time_to_abort,omitempty"`
	// Indicates if fixed averages is the default forecast that this template should be used for.
	DefaultToFixedAveragesForecast bool `protobuf:"varint,13,opt,name=default_to_fixed_averages_forecast,json=defaultToFixedAveragesForecast,proto3" json:"default_to_fixed_averages_forecast,omitempty"`
}

func (x *CallProfileTemplate) Reset() {
	*x = CallProfileTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallProfileTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallProfileTemplate) ProtoMessage() {}

func (x *CallProfileTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallProfileTemplate.ProtoReflect.Descriptor instead.
func (*CallProfileTemplate) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{27}
}

func (x *CallProfileTemplate) GetCallProfileTemplateSid() int64 {
	if x != nil {
		return x.CallProfileTemplateSid
	}
	return 0
}

func (x *CallProfileTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CallProfileTemplate) GetTotalCallsProfile() *commons.CallProfileGroupCalls {
	if x != nil {
		return x.TotalCallsProfile
	}
	return nil
}

func (x *CallProfileTemplate) GetTotalAbandonedCallsProfile() *commons.CallProfileGroupCalls {
	if x != nil {
		return x.TotalAbandonedCallsProfile
	}
	return nil
}

func (x *CallProfileTemplate) GetAverageSpeedOfAnswerProfile() *commons.CallProfileGroupAvgs {
	if x != nil {
		return x.AverageSpeedOfAnswerProfile
	}
	return nil
}

func (x *CallProfileTemplate) GetAverageHandleTimeProfile() *commons.CallProfileGroupAvgs {
	if x != nil {
		return x.AverageHandleTimeProfile
	}
	return nil
}

func (x *CallProfileTemplate) GetAverageAfterCallWorkProfile() *commons.CallProfileGroupAvgs {
	if x != nil {
		return x.AverageAfterCallWorkProfile
	}
	return nil
}

func (x *CallProfileTemplate) GetAverageTimeToAbortProfile() *commons.CallProfileGroupAvgs {
	if x != nil {
		return x.AverageTimeToAbortProfile
	}
	return nil
}

func (x *CallProfileTemplate) GetFixedAverageSpeedOfAnswer() float32 {
	if x != nil {
		return x.FixedAverageSpeedOfAnswer
	}
	return 0
}

func (x *CallProfileTemplate) GetFixedAverageHandleTime() float32 {
	if x != nil {
		return x.FixedAverageHandleTime
	}
	return 0
}

func (x *CallProfileTemplate) GetFixedAverageAfterCallWork() float32 {
	if x != nil {
		return x.FixedAverageAfterCallWork
	}
	return 0
}

func (x *CallProfileTemplate) GetFixedAverageTimeToAbort() float32 {
	if x != nil {
		return x.FixedAverageTimeToAbort
	}
	return 0
}

func (x *CallProfileTemplate) GetDefaultToFixedAveragesForecast() bool {
	if x != nil {
		return x.DefaultToFixedAveragesForecast
	}
	return false
}

// Request message for the BuildCallProfileTemplateForSkillProfile RPC.
type BuildCallProfileTemplateForSkillProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile of the training data used to generate the template.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
}

func (x *BuildCallProfileTemplateForSkillProfileReq) Reset() {
	*x = BuildCallProfileTemplateForSkillProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildCallProfileTemplateForSkillProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildCallProfileTemplateForSkillProfileReq) ProtoMessage() {}

func (x *BuildCallProfileTemplateForSkillProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildCallProfileTemplateForSkillProfileReq.ProtoReflect.Descriptor instead.
func (*BuildCallProfileTemplateForSkillProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{28}
}

func (x *BuildCallProfileTemplateForSkillProfileReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

// Response message for the BuildCallProfileTemplateForSkillProfile RPC.
type BuildCallProfileTemplateForSkillProfileRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// call profile template found in the training data set.
	CallProfileTemplate *CallProfileTemplate `protobuf:"bytes,1,opt,name=call_profile_template,json=callProfileTemplate,proto3" json:"call_profile_template,omitempty"`
}

func (x *BuildCallProfileTemplateForSkillProfileRes) Reset() {
	*x = BuildCallProfileTemplateForSkillProfileRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildCallProfileTemplateForSkillProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildCallProfileTemplateForSkillProfileRes) ProtoMessage() {}

func (x *BuildCallProfileTemplateForSkillProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildCallProfileTemplateForSkillProfileRes.ProtoReflect.Descriptor instead.
func (*BuildCallProfileTemplateForSkillProfileRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{29}
}

func (x *BuildCallProfileTemplateForSkillProfileRes) GetCallProfileTemplate() *CallProfileTemplate {
	if x != nil {
		return x.CallProfileTemplate
	}
	return nil
}

// Request message for the CreateInactiveSkillProfileMapping RPC.
type CreateInactiveSkillProfileMappingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the inactive skill profile that will be mapped to the active_skill_profile_sid.
	InactiveSkillProfileSid int64 `protobuf:"varint,1,opt,name=inactive_skill_profile_sid,json=inactiveSkillProfileSid,proto3" json:"inactive_skill_profile_sid,omitempty"`
	// ID of the active skill profile that the inactive_skill_profile_sid will be mapped to.
	ActiveSkillProfileSid int64 `protobuf:"varint,2,opt,name=active_skill_profile_sid,json=activeSkillProfileSid,proto3" json:"active_skill_profile_sid,omitempty"`
}

func (x *CreateInactiveSkillProfileMappingReq) Reset() {
	*x = CreateInactiveSkillProfileMappingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInactiveSkillProfileMappingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInactiveSkillProfileMappingReq) ProtoMessage() {}

func (x *CreateInactiveSkillProfileMappingReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInactiveSkillProfileMappingReq.ProtoReflect.Descriptor instead.
func (*CreateInactiveSkillProfileMappingReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{30}
}

func (x *CreateInactiveSkillProfileMappingReq) GetInactiveSkillProfileSid() int64 {
	if x != nil {
		return x.InactiveSkillProfileSid
	}
	return 0
}

func (x *CreateInactiveSkillProfileMappingReq) GetActiveSkillProfileSid() int64 {
	if x != nil {
		return x.ActiveSkillProfileSid
	}
	return 0
}

// Response message for the CreateInactiveSkillProfileMapping RPC.
type CreateInactiveSkillProfileMappingRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateInactiveSkillProfileMappingRes) Reset() {
	*x = CreateInactiveSkillProfileMappingRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInactiveSkillProfileMappingRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInactiveSkillProfileMappingRes) ProtoMessage() {}

func (x *CreateInactiveSkillProfileMappingRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInactiveSkillProfileMappingRes.ProtoReflect.Descriptor instead.
func (*CreateInactiveSkillProfileMappingRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{31}
}

// Request message for the GetAvailableRegressionForecasterModelTypes RPC.
type GetAvailableRegressionForecasterModelTypesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAvailableRegressionForecasterModelTypesReq) Reset() {
	*x = GetAvailableRegressionForecasterModelTypesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableRegressionForecasterModelTypesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableRegressionForecasterModelTypesReq) ProtoMessage() {}

func (x *GetAvailableRegressionForecasterModelTypesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableRegressionForecasterModelTypesReq.ProtoReflect.Descriptor instead.
func (*GetAvailableRegressionForecasterModelTypesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{32}
}

// Response message for the GetAvailableRegressionForecasterModelTypes RPC.
type GetAvailableRegressionForecasterModelTypesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the available forecaster types currently available.
	ModelTypes []commons.RegressionForecasterModelTypes `protobuf:"varint,1,rep,packed,name=model_types,json=modelTypes,proto3,enum=api.commons.RegressionForecasterModelTypes" json:"model_types,omitempty"`
}

func (x *GetAvailableRegressionForecasterModelTypesRes) Reset() {
	*x = GetAvailableRegressionForecasterModelTypesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableRegressionForecasterModelTypesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableRegressionForecasterModelTypesRes) ProtoMessage() {}

func (x *GetAvailableRegressionForecasterModelTypesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableRegressionForecasterModelTypesRes.ProtoReflect.Descriptor instead.
func (*GetAvailableRegressionForecasterModelTypesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{33}
}

func (x *GetAvailableRegressionForecasterModelTypesRes) GetModelTypes() []commons.RegressionForecasterModelTypes {
	if x != nil {
		return x.ModelTypes
	}
	return nil
}

// Request message for the DisconnectInactiveSkillProfileMapping RPC.
type DisconnectInactiveSkillProfileMappingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the inactive skill profile to disconnect.
	InactiveSkillProfileSid int64 `protobuf:"varint,1,opt,name=inactive_skill_profile_sid,json=inactiveSkillProfileSid,proto3" json:"inactive_skill_profile_sid,omitempty"`
}

func (x *DisconnectInactiveSkillProfileMappingReq) Reset() {
	*x = DisconnectInactiveSkillProfileMappingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectInactiveSkillProfileMappingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectInactiveSkillProfileMappingReq) ProtoMessage() {}

func (x *DisconnectInactiveSkillProfileMappingReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectInactiveSkillProfileMappingReq.ProtoReflect.Descriptor instead.
func (*DisconnectInactiveSkillProfileMappingReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{34}
}

func (x *DisconnectInactiveSkillProfileMappingReq) GetInactiveSkillProfileSid() int64 {
	if x != nil {
		return x.InactiveSkillProfileSid
	}
	return 0
}

// Response message for the DisconnectInactiveSkillProfileMapping RPC.
type DisconnectInactiveSkillProfileMappingRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisconnectInactiveSkillProfileMappingRes) Reset() {
	*x = DisconnectInactiveSkillProfileMappingRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectInactiveSkillProfileMappingRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectInactiveSkillProfileMappingRes) ProtoMessage() {}

func (x *DisconnectInactiveSkillProfileMappingRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectInactiveSkillProfileMappingRes.ProtoReflect.Descriptor instead.
func (*DisconnectInactiveSkillProfileMappingRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{35}
}

// Request message for the DeleteHistoricalDataDeltas RPC.
type DeleteHistoricalDataDeltasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile of which to delete the deltas.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// start datetimes of the deltas to delete.
	// If no datetimes are given, it will delete all the deltas that the given @skill_profile_sid has.
	StartDatetimes []*timestamppb.Timestamp `protobuf:"bytes,2,rep,name=start_datetimes,json=startDatetimes,proto3" json:"start_datetimes,omitempty"`
}

func (x *DeleteHistoricalDataDeltasReq) Reset() {
	*x = DeleteHistoricalDataDeltasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHistoricalDataDeltasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHistoricalDataDeltasReq) ProtoMessage() {}

func (x *DeleteHistoricalDataDeltasReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHistoricalDataDeltasReq.ProtoReflect.Descriptor instead.
func (*DeleteHistoricalDataDeltasReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteHistoricalDataDeltasReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *DeleteHistoricalDataDeltasReq) GetStartDatetimes() []*timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetimes
	}
	return nil
}

// Response message for the DeleteHistoricalDataDeltas RPC.
type DeleteHistoricalDataDeltasRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteHistoricalDataDeltasRes) Reset() {
	*x = DeleteHistoricalDataDeltasRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHistoricalDataDeltasRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHistoricalDataDeltasRes) ProtoMessage() {}

func (x *DeleteHistoricalDataDeltasRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHistoricalDataDeltasRes.ProtoReflect.Descriptor instead.
func (*DeleteHistoricalDataDeltasRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{37}
}

// Request message for the ListTopSkillProfiles RPC.
type ListTopSkillProfilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// max number of top skill profiles to get.
	MaxNumberOfProfiles int32 `protobuf:"varint,1,opt,name=max_number_of_profiles,json=maxNumberOfProfiles,proto3" json:"max_number_of_profiles,omitempty"`
}

func (x *ListTopSkillProfilesReq) Reset() {
	*x = ListTopSkillProfilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTopSkillProfilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopSkillProfilesReq) ProtoMessage() {}

func (x *ListTopSkillProfilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopSkillProfilesReq.ProtoReflect.Descriptor instead.
func (*ListTopSkillProfilesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{38}
}

func (x *ListTopSkillProfilesReq) GetMaxNumberOfProfiles() int32 {
	if x != nil {
		return x.MaxNumberOfProfiles
	}
	return 0
}

// Response message for the ListTopSkillProfiles RPC.
type ListTopSkillProfilesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// skill profiles found for the given parameters.
	SkillProfiles []*SkillProfile `protobuf:"bytes,1,rep,name=skill_profiles,json=skillProfiles,proto3" json:"skill_profiles,omitempty"`
}

func (x *ListTopSkillProfilesRes) Reset() {
	*x = ListTopSkillProfilesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTopSkillProfilesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopSkillProfilesRes) ProtoMessage() {}

func (x *ListTopSkillProfilesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopSkillProfilesRes.ProtoReflect.Descriptor instead.
func (*ListTopSkillProfilesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{39}
}

func (x *ListTopSkillProfilesRes) GetSkillProfiles() []*SkillProfile {
	if x != nil {
		return x.SkillProfiles
	}
	return nil
}

// Request message for the GetSkillProfilesCount RPC
type GetSkillProfilesCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSkillProfilesCountReq) Reset() {
	*x = GetSkillProfilesCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSkillProfilesCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkillProfilesCountReq) ProtoMessage() {}

func (x *GetSkillProfilesCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkillProfilesCountReq.ProtoReflect.Descriptor instead.
func (*GetSkillProfilesCountReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{40}
}

// Response message for the GetSkillProfilesCount RPC
type GetSkillProfilesCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of skill profiles that the org has.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetSkillProfilesCountRes) Reset() {
	*x = GetSkillProfilesCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSkillProfilesCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkillProfilesCountRes) ProtoMessage() {}

func (x *GetSkillProfilesCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkillProfilesCountRes.ProtoReflect.Descriptor instead.
func (*GetSkillProfilesCountRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{41}
}

func (x *GetSkillProfilesCountRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Request message for the BuildProfileForecastByInterval RPC
type BuildProfileForecastByIntervalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template to use to generate the profile forecast.
	CallProfileTemplate *CallProfileTemplate `protobuf:"bytes,1,opt,name=call_profile_template,json=callProfileTemplate,proto3" json:"call_profile_template,omitempty"`
	// If @fixed_averages_forecast is set to true it will do a fixed averages forecast,
	// and will only use the fixed averages fields and @total_calls_profile from the @call_profile_template.
	// Otherwise, it will do a regular profile forecast and only the fixed averages fields @call_profile_template will be ignored.
	FixedAveragesForecast bool `protobuf:"varint,2,opt,name=fixed_averages_forecast,json=fixedAveragesForecast,proto3" json:"fixed_averages_forecast,omitempty"`
	// ID of the skill profile that the forecast will belong to.
	SkillProfileSid int64 `protobuf:"varint,3,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
}

func (x *BuildProfileForecastByIntervalReq) Reset() {
	*x = BuildProfileForecastByIntervalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildProfileForecastByIntervalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildProfileForecastByIntervalReq) ProtoMessage() {}

func (x *BuildProfileForecastByIntervalReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildProfileForecastByIntervalReq.ProtoReflect.Descriptor instead.
func (*BuildProfileForecastByIntervalReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{42}
}

func (x *BuildProfileForecastByIntervalReq) GetCallProfileTemplate() *CallProfileTemplate {
	if x != nil {
		return x.CallProfileTemplate
	}
	return nil
}

func (x *BuildProfileForecastByIntervalReq) GetFixedAveragesForecast() bool {
	if x != nil {
		return x.FixedAveragesForecast
	}
	return false
}

func (x *BuildProfileForecastByIntervalReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

// Message type specifying calls in an interval for a specific skill profile
type CallDataByInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start time of the interval.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// ID of the skill profile to forecast for (not set in profile forecasts).
	SkillProfileSid int64 `protobuf:"varint,2,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// the number of calls in this interval with this skill profile (answered + unanswered).
	TotalCalls int32 `protobuf:"varint,3,opt,name=total_calls,json=totalCalls,proto3" json:"total_calls,omitempty"`
	// optional
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,4,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// optional
	AverageHandleTimeInSeconds float32 `protobuf:"fixed32,5,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// optional
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,6,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// optional
	AverageTimeToAbortInSeconds float32 `protobuf:"fixed32,7,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// the number of abandoned calls in this interval for this skill profile.
	TotalAbandonedCalls int32 `protobuf:"varint,8,opt,name=total_abandoned_calls,json=totalAbandonedCalls,proto3" json:"total_abandoned_calls,omitempty"`
	// Whether the interval has been modified or not
	IsDelta bool `protobuf:"varint,9,opt,name=is_delta,json=isDelta,proto3" json:"is_delta,omitempty"`
	// ID of the forecast interval that the delta/interval belongs to
	ForecastDataIntervalSid int64 `protobuf:"varint,10,opt,name=forecast_data_interval_sid,json=forecastDataIntervalSid,proto3" json:"forecast_data_interval_sid,omitempty"`
	// Interval width minutes that the interval used on creation.
	// Only set for forecast intervals.
	IntervalWidthInMinutes int32 `protobuf:"varint,11,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
}

func (x *CallDataByInterval) Reset() {
	*x = CallDataByInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallDataByInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallDataByInterval) ProtoMessage() {}

func (x *CallDataByInterval) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallDataByInterval.ProtoReflect.Descriptor instead.
func (*CallDataByInterval) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{43}
}

func (x *CallDataByInterval) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *CallDataByInterval) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *CallDataByInterval) GetTotalCalls() int32 {
	if x != nil {
		return x.TotalCalls
	}
	return 0
}

func (x *CallDataByInterval) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *CallDataByInterval) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *CallDataByInterval) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *CallDataByInterval) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

func (x *CallDataByInterval) GetTotalAbandonedCalls() int32 {
	if x != nil {
		return x.TotalAbandonedCalls
	}
	return 0
}

func (x *CallDataByInterval) GetIsDelta() bool {
	if x != nil {
		return x.IsDelta
	}
	return false
}

func (x *CallDataByInterval) GetForecastDataIntervalSid() int64 {
	if x != nil {
		return x.ForecastDataIntervalSid
	}
	return 0
}

func (x *CallDataByInterval) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

// Request message for the BuildProfileForecastByIntervalWithStats RPC
type BuildProfileForecastByIntervalWithStatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template to use to generate the profile forecast.
	CallProfileTemplate *CallProfileTemplate `protobuf:"bytes,1,opt,name=call_profile_template,json=callProfileTemplate,proto3" json:"call_profile_template,omitempty"`
	// If @fixed_averages_forecast is set to true it will do a fixed averages forecast,
	// and will only use the fixed averages fields and @total_calls_profile from the @call_profile_template.
	// Otherwise, it will do a regular profile forecast and only the fixed averages fields @call_profile_template will be ignored.
	FixedAveragesForecast bool `protobuf:"varint,2,opt,name=fixed_averages_forecast,json=fixedAveragesForecast,proto3" json:"fixed_averages_forecast,omitempty"`
	// ID of the skill profile to use the training data for stats.
	SkillProfileSid int64 `protobuf:"varint,3,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
}

func (x *BuildProfileForecastByIntervalWithStatsReq) Reset() {
	*x = BuildProfileForecastByIntervalWithStatsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildProfileForecastByIntervalWithStatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildProfileForecastByIntervalWithStatsReq) ProtoMessage() {}

func (x *BuildProfileForecastByIntervalWithStatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildProfileForecastByIntervalWithStatsReq.ProtoReflect.Descriptor instead.
func (*BuildProfileForecastByIntervalWithStatsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{44}
}

func (x *BuildProfileForecastByIntervalWithStatsReq) GetCallProfileTemplate() *CallProfileTemplate {
	if x != nil {
		return x.CallProfileTemplate
	}
	return nil
}

func (x *BuildProfileForecastByIntervalWithStatsReq) GetFixedAveragesForecast() bool {
	if x != nil {
		return x.FixedAveragesForecast
	}
	return false
}

func (x *BuildProfileForecastByIntervalWithStatsReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

// Response message for BuildProfileForecastByIntervalWithStats RPC
type BuildProfileForecastByIntervalWithStatsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResultOneof:
	//
	//	*BuildProfileForecastByIntervalWithStatsRes_CallData
	//	*BuildProfileForecastByIntervalWithStatsRes_ForecastStats
	ResultOneof isBuildProfileForecastByIntervalWithStatsRes_ResultOneof `protobuf_oneof:"result_oneof"`
}

func (x *BuildProfileForecastByIntervalWithStatsRes) Reset() {
	*x = BuildProfileForecastByIntervalWithStatsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildProfileForecastByIntervalWithStatsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildProfileForecastByIntervalWithStatsRes) ProtoMessage() {}

func (x *BuildProfileForecastByIntervalWithStatsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildProfileForecastByIntervalWithStatsRes.ProtoReflect.Descriptor instead.
func (*BuildProfileForecastByIntervalWithStatsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{45}
}

func (m *BuildProfileForecastByIntervalWithStatsRes) GetResultOneof() isBuildProfileForecastByIntervalWithStatsRes_ResultOneof {
	if m != nil {
		return m.ResultOneof
	}
	return nil
}

func (x *BuildProfileForecastByIntervalWithStatsRes) GetCallData() *CallDataByInterval {
	if x, ok := x.GetResultOneof().(*BuildProfileForecastByIntervalWithStatsRes_CallData); ok {
		return x.CallData
	}
	return nil
}

func (x *BuildProfileForecastByIntervalWithStatsRes) GetForecastStats() *GetForecastStatisticsRes {
	if x, ok := x.GetResultOneof().(*BuildProfileForecastByIntervalWithStatsRes_ForecastStats); ok {
		return x.ForecastStats
	}
	return nil
}

type isBuildProfileForecastByIntervalWithStatsRes_ResultOneof interface {
	isBuildProfileForecastByIntervalWithStatsRes_ResultOneof()
}

type BuildProfileForecastByIntervalWithStatsRes_CallData struct {
	// Forecast data intervals generated from the forecast
	CallData *CallDataByInterval `protobuf:"bytes,1,opt,name=call_data,json=callData,proto3,oneof"`
}

type BuildProfileForecastByIntervalWithStatsRes_ForecastStats struct {
	// Statistics comparing the historical data during the test interval with the prediction data during the same period.
	// This will only be the type of the first message returned.
	ForecastStats *GetForecastStatisticsRes `protobuf:"bytes,2,opt,name=forecast_stats,json=forecastStats,proto3,oneof"`
}

func (*BuildProfileForecastByIntervalWithStatsRes_CallData) isBuildProfileForecastByIntervalWithStatsRes_ResultOneof() {
}

func (*BuildProfileForecastByIntervalWithStatsRes_ForecastStats) isBuildProfileForecastByIntervalWithStatsRes_ResultOneof() {
}

// Request message for the UpsertProfileForecast RPC
type UpsertProfileForecastReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile that the forecast will belong to.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// Template to use to generate the forecast that will be stored.
	CallProfileTemplate *CallProfileTemplate `protobuf:"bytes,2,opt,name=call_profile_template,json=callProfileTemplate,proto3" json:"call_profile_template,omitempty"`
	// If @fixed_averages_forecast is set to true it will do a fixed averages forecast,
	// and will only use the fixed averages fields and @total_calls_profile from the @call_profile_template.
	// Otherwise, it will do a regular profile forecast and only the fixed averages fields @call_profile_template will be ignored.
	FixedAveragesForecast bool `protobuf:"varint,3,opt,name=fixed_averages_forecast,json=fixedAveragesForecast,proto3" json:"fixed_averages_forecast,omitempty"`
}

func (x *UpsertProfileForecastReq) Reset() {
	*x = UpsertProfileForecastReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertProfileForecastReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProfileForecastReq) ProtoMessage() {}

func (x *UpsertProfileForecastReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProfileForecastReq.ProtoReflect.Descriptor instead.
func (*UpsertProfileForecastReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{46}
}

func (x *UpsertProfileForecastReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *UpsertProfileForecastReq) GetCallProfileTemplate() *CallProfileTemplate {
	if x != nil {
		return x.CallProfileTemplate
	}
	return nil
}

func (x *UpsertProfileForecastReq) GetFixedAveragesForecast() bool {
	if x != nil {
		return x.FixedAveragesForecast
	}
	return false
}

// Response message for the UpsertProfileForecast RPC
type UpsertProfileForecastRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpsertProfileForecastRes) Reset() {
	*x = UpsertProfileForecastRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertProfileForecastRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProfileForecastRes) ProtoMessage() {}

func (x *UpsertProfileForecastRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProfileForecastRes.ProtoReflect.Descriptor instead.
func (*UpsertProfileForecastRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{47}
}

// Request message for the CreateCallProfileTemplate RPC
type CreateCallProfileTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template to store in the db.
	CallProfileTemplate *CallProfileTemplate `protobuf:"bytes,1,opt,name=call_profile_template,json=callProfileTemplate,proto3" json:"call_profile_template,omitempty"`
}

func (x *CreateCallProfileTemplateReq) Reset() {
	*x = CreateCallProfileTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCallProfileTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallProfileTemplateReq) ProtoMessage() {}

func (x *CreateCallProfileTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallProfileTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateCallProfileTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{48}
}

func (x *CreateCallProfileTemplateReq) GetCallProfileTemplate() *CallProfileTemplate {
	if x != nil {
		return x.CallProfileTemplate
	}
	return nil
}

// Response message for the CreateCallProfileTemplate RPC
type CreateCallProfileTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCallProfileTemplateRes) Reset() {
	*x = CreateCallProfileTemplateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCallProfileTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallProfileTemplateRes) ProtoMessage() {}

func (x *CreateCallProfileTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallProfileTemplateRes.ProtoReflect.Descriptor instead.
func (*CreateCallProfileTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{49}
}

// Request message for the DeleteCallProfileTemplate RPC
type DeleteCallProfileTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the call profile template to delete.
	CallProfileTemplateSid int64 `protobuf:"varint,1,opt,name=call_profile_template_sid,json=callProfileTemplateSid,proto3" json:"call_profile_template_sid,omitempty"`
}

func (x *DeleteCallProfileTemplateReq) Reset() {
	*x = DeleteCallProfileTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCallProfileTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCallProfileTemplateReq) ProtoMessage() {}

func (x *DeleteCallProfileTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCallProfileTemplateReq.ProtoReflect.Descriptor instead.
func (*DeleteCallProfileTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteCallProfileTemplateReq) GetCallProfileTemplateSid() int64 {
	if x != nil {
		return x.CallProfileTemplateSid
	}
	return 0
}

// Response message for the DeleteCallProfileTemplate RPC
type DeleteCallProfileTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCallProfileTemplateRes) Reset() {
	*x = DeleteCallProfileTemplateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCallProfileTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCallProfileTemplateRes) ProtoMessage() {}

func (x *DeleteCallProfileTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCallProfileTemplateRes.ProtoReflect.Descriptor instead.
func (*DeleteCallProfileTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{51}
}

// Message type specifying the parameters for a regression forecast
type RegressionTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the regression template.
	RegressionTemplateSid int64 `protobuf:"varint,1,opt,name=regression_template_sid,json=regressionTemplateSid,proto3" json:"regression_template_sid,omitempty"`
	// Name of the regression template.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Selected algorithmic method to be used
	ModelType commons.RegressionForecasterModelTypes `protobuf:"varint,3,opt,name=model_type,json=modelType,proto3,enum=api.commons.RegressionForecasterModelTypes" json:"model_type,omitempty"`
	// Number of weeks of training data to exclude when building a forecast.
	ExcludeCallDataForNWeeks int32 `protobuf:"varint,4,opt,name=exclude_call_data_for_n_weeks,json=excludeCallDataForNWeeks,proto3" json:"exclude_call_data_for_n_weeks,omitempty"`
	// Number of weeks in the past to emphasize;
	NumWeeksAgoToEmphasize int32 `protobuf:"varint,5,opt,name=num_weeks_ago_to_emphasize,json=numWeeksAgoToEmphasize,proto3" json:"num_weeks_ago_to_emphasize,omitempty"`
	// Value that especificies the max value of deviations to use. Greater deviations than the specified values will be excluded.
	// optional
	MaxDeviation float32 `protobuf:"fixed32,6,opt,name=max_deviation,json=maxDeviation,proto3" json:"max_deviation,omitempty"`
	// Percentage from 0 to 100 that specifies the trend sensitivity.
	TrendSensitivity float32 `protobuf:"fixed32,7,opt,name=trend_sensitivity,json=trendSensitivity,proto3" json:"trend_sensitivity,omitempty"`
	// Whether or not to exclude intervals with no calls.
	ExcludeIntervalsWithNoCalls bool `protobuf:"varint,8,opt,name=exclude_intervals_with_no_calls,json=excludeIntervalsWithNoCalls,proto3" json:"exclude_intervals_with_no_calls,omitempty"`
	// Processing type for the averages.
	AvgsProcessingType commons.RegressionForecasterAvgsProcessingType `protobuf:"varint,9,opt,name=avgs_processing_type,json=avgsProcessingType,proto3,enum=api.commons.RegressionForecasterAvgsProcessingType" json:"avgs_processing_type,omitempty"`
	// Whether or not to include seasonality.
	IncludeSeasonality bool `protobuf:"varint,10,opt,name=include_seasonality,json=includeSeasonality,proto3" json:"include_seasonality,omitempty"`
	// Whether or not to include trend.
	IncludeTrend bool `protobuf:"varint,11,opt,name=include_trend,json=includeTrend,proto3" json:"include_trend,omitempty"`
}

func (x *RegressionTemplate) Reset() {
	*x = RegressionTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegressionTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegressionTemplate) ProtoMessage() {}

func (x *RegressionTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegressionTemplate.ProtoReflect.Descriptor instead.
func (*RegressionTemplate) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{52}
}

func (x *RegressionTemplate) GetRegressionTemplateSid() int64 {
	if x != nil {
		return x.RegressionTemplateSid
	}
	return 0
}

func (x *RegressionTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegressionTemplate) GetModelType() commons.RegressionForecasterModelTypes {
	if x != nil {
		return x.ModelType
	}
	return commons.RegressionForecasterModelTypes(0)
}

func (x *RegressionTemplate) GetExcludeCallDataForNWeeks() int32 {
	if x != nil {
		return x.ExcludeCallDataForNWeeks
	}
	return 0
}

func (x *RegressionTemplate) GetNumWeeksAgoToEmphasize() int32 {
	if x != nil {
		return x.NumWeeksAgoToEmphasize
	}
	return 0
}

func (x *RegressionTemplate) GetMaxDeviation() float32 {
	if x != nil {
		return x.MaxDeviation
	}
	return 0
}

func (x *RegressionTemplate) GetTrendSensitivity() float32 {
	if x != nil {
		return x.TrendSensitivity
	}
	return 0
}

func (x *RegressionTemplate) GetExcludeIntervalsWithNoCalls() bool {
	if x != nil {
		return x.ExcludeIntervalsWithNoCalls
	}
	return false
}

func (x *RegressionTemplate) GetAvgsProcessingType() commons.RegressionForecasterAvgsProcessingType {
	if x != nil {
		return x.AvgsProcessingType
	}
	return commons.RegressionForecasterAvgsProcessingType(0)
}

func (x *RegressionTemplate) GetIncludeSeasonality() bool {
	if x != nil {
		return x.IncludeSeasonality
	}
	return false
}

func (x *RegressionTemplate) GetIncludeTrend() bool {
	if x != nil {
		return x.IncludeTrend
	}
	return false
}

// Request message for the CreateRegressionTemplate RPC
type CreateRegressionTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Regression template to be stored in the db.
	RegressionTemplate *RegressionTemplate `protobuf:"bytes,1,opt,name=regression_template,json=regressionTemplate,proto3" json:"regression_template,omitempty"`
}

func (x *CreateRegressionTemplateReq) Reset() {
	*x = CreateRegressionTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegressionTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegressionTemplateReq) ProtoMessage() {}

func (x *CreateRegressionTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegressionTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateRegressionTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{53}
}

func (x *CreateRegressionTemplateReq) GetRegressionTemplate() *RegressionTemplate {
	if x != nil {
		return x.RegressionTemplate
	}
	return nil
}

// Response message for the CreateRegressionTemplate RPC
type CreateRegressionTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateRegressionTemplateRes) Reset() {
	*x = CreateRegressionTemplateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegressionTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegressionTemplateRes) ProtoMessage() {}

func (x *CreateRegressionTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegressionTemplateRes.ProtoReflect.Descriptor instead.
func (*CreateRegressionTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{54}
}

// Request message for the DeleteRegressionTemplate RPC
type DeleteRegressionTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the regression template to delete.
	RegressionTemplateSid int64 `protobuf:"varint,1,opt,name=regression_template_sid,json=regressionTemplateSid,proto3" json:"regression_template_sid,omitempty"`
}

func (x *DeleteRegressionTemplateReq) Reset() {
	*x = DeleteRegressionTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegressionTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegressionTemplateReq) ProtoMessage() {}

func (x *DeleteRegressionTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegressionTemplateReq.ProtoReflect.Descriptor instead.
func (*DeleteRegressionTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{55}
}

func (x *DeleteRegressionTemplateReq) GetRegressionTemplateSid() int64 {
	if x != nil {
		return x.RegressionTemplateSid
	}
	return 0
}

// Response message for the DeleteRegressionTemplate RPC
type DeleteRegressionTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRegressionTemplateRes) Reset() {
	*x = DeleteRegressionTemplateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegressionTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegressionTemplateRes) ProtoMessage() {}

func (x *DeleteRegressionTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegressionTemplateRes.ProtoReflect.Descriptor instead.
func (*DeleteRegressionTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{56}
}

// Request message for the ListRegressionTemplates RPC
type ListRegressionTemplatesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRegressionTemplatesReq) Reset() {
	*x = ListRegressionTemplatesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegressionTemplatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegressionTemplatesReq) ProtoMessage() {}

func (x *ListRegressionTemplatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegressionTemplatesReq.ProtoReflect.Descriptor instead.
func (*ListRegressionTemplatesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{57}
}

// Response message for the ListRegressionTemplates RPC
type ListRegressionTemplatesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all existing regression templates retrieved for an org.
	RegressionTemplates []*RegressionTemplate `protobuf:"bytes,1,rep,name=regression_templates,json=regressionTemplates,proto3" json:"regression_templates,omitempty"`
}

func (x *ListRegressionTemplatesRes) Reset() {
	*x = ListRegressionTemplatesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegressionTemplatesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegressionTemplatesRes) ProtoMessage() {}

func (x *ListRegressionTemplatesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegressionTemplatesRes.ProtoReflect.Descriptor instead.
func (*ListRegressionTemplatesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{58}
}

func (x *ListRegressionTemplatesRes) GetRegressionTemplates() []*RegressionTemplate {
	if x != nil {
		return x.RegressionTemplates
	}
	return nil
}

// Request message for the BuildRegressionForecastByInterval RPC
type BuildRegressionForecastByIntervalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the following only apply for avgs_processing_type=RegressionForecasterAvgsProcessingType.FIXED_AVERAGES
	// optional
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,1,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// optional
	AverageHandleTimeInSeconds float32 `protobuf:"fixed32,2,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// optional
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,3,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// optional
	AverageTimeToAbortInSeconds float32 `protobuf:"fixed32,4,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// Template to use to generate the regression forecast
	RegressionTemplate *RegressionTemplate `protobuf:"bytes,5,opt,name=regression_template,json=regressionTemplate,proto3" json:"regression_template,omitempty"`
	// IDs of the skill profiles to generate the forecasts,
	// if no IDs are sent, it will forecast for all active skill profiles.
	SkillProfileSidsToForecast []int64 `protobuf:"varint,6,rep,packed,name=skill_profile_sids_to_forecast,json=skillProfileSidsToForecast,proto3" json:"skill_profile_sids_to_forecast,omitempty"`
}

func (x *BuildRegressionForecastByIntervalReq) Reset() {
	*x = BuildRegressionForecastByIntervalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildRegressionForecastByIntervalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildRegressionForecastByIntervalReq) ProtoMessage() {}

func (x *BuildRegressionForecastByIntervalReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildRegressionForecastByIntervalReq.ProtoReflect.Descriptor instead.
func (*BuildRegressionForecastByIntervalReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{59}
}

func (x *BuildRegressionForecastByIntervalReq) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalReq) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalReq) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalReq) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalReq) GetRegressionTemplate() *RegressionTemplate {
	if x != nil {
		return x.RegressionTemplate
	}
	return nil
}

func (x *BuildRegressionForecastByIntervalReq) GetSkillProfileSidsToForecast() []int64 {
	if x != nil {
		return x.SkillProfileSidsToForecast
	}
	return nil
}

// Request message for the BuildRegressionForecastByIntervalWithStats RPC
type BuildRegressionForecastByIntervalWithStatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the following only apply for avgs_processing_type=RegressionForecasterAvgsProcessingType.FIXED_AVERAGES
	// optional
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,1,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// optional
	AverageHandleTimeInSeconds float32 `protobuf:"fixed32,2,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// optional
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,3,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// optional
	AverageTimeToAbortInSeconds float32 `protobuf:"fixed32,4,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// Template to use to generate the regression forecast
	RegressionTemplate *RegressionTemplate `protobuf:"bytes,5,opt,name=regression_template,json=regressionTemplate,proto3" json:"regression_template,omitempty"`
	// IDs of the skill profiles to generate the forecasts,
	// if no IDs are sent, it will forecast for all active skill profiles.
	SkillProfileSidsToForecast []int64 `protobuf:"varint,6,rep,packed,name=skill_profile_sids_to_forecast,json=skillProfileSidsToForecast,proto3" json:"skill_profile_sids_to_forecast,omitempty"`
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) Reset() {
	*x = BuildRegressionForecastByIntervalWithStatsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildRegressionForecastByIntervalWithStatsReq) ProtoMessage() {}

func (x *BuildRegressionForecastByIntervalWithStatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildRegressionForecastByIntervalWithStatsReq.ProtoReflect.Descriptor instead.
func (*BuildRegressionForecastByIntervalWithStatsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{60}
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) GetRegressionTemplate() *RegressionTemplate {
	if x != nil {
		return x.RegressionTemplate
	}
	return nil
}

func (x *BuildRegressionForecastByIntervalWithStatsReq) GetSkillProfileSidsToForecast() []int64 {
	if x != nil {
		return x.SkillProfileSidsToForecast
	}
	return nil
}

// Represents the statistics of a given forecast
type GetForecastStatisticsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the total number of intervals measured
	NumIntervalsMeasured int32 `protobuf:"varint,1,opt,name=num_intervals_measured,json=numIntervalsMeasured,proto3" json:"num_intervals_measured,omitempty"`
	// total number of actual historical calls
	TotalCallsHistorical int32 `protobuf:"varint,2,opt,name=total_calls_historical,json=totalCallsHistorical,proto3" json:"total_calls_historical,omitempty"`
	// total number of predicted calls
	TotalCallsPredicted int32 `protobuf:"varint,3,opt,name=total_calls_predicted,json=totalCallsPredicted,proto3" json:"total_calls_predicted,omitempty"`
	// percentage over predicted (+ve) or under predicted (-ve)
	PercentCallsOverUnder float32 `protobuf:"fixed32,4,opt,name=percent_calls_over_under,json=percentCallsOverUnder,proto3" json:"percent_calls_over_under,omitempty"`
	// root-mean-squared error between actual and predicted calls
	RmsErrorCalls float32 `protobuf:"fixed32,5,opt,name=rms_error_calls,json=rmsErrorCalls,proto3" json:"rms_error_calls,omitempty"`
	// root-mean-squared error between actual and predicted atab
	RmsError_ATAB float32 `protobuf:"fixed32,6,opt,name=rms_error_ATAB,json=rmsErrorATAB,proto3" json:"rms_error_ATAB,omitempty"`
	// root-mean-squared error between actual and predicted asa
	RmsError_ASA float32 `protobuf:"fixed32,7,opt,name=rms_error_ASA,json=rmsErrorASA,proto3" json:"rms_error_ASA,omitempty"`
	// root-mean-squared error between actual and predicted acw
	RmsError_ACW float32 `protobuf:"fixed32,8,opt,name=rms_error_ACW,json=rmsErrorACW,proto3" json:"rms_error_ACW,omitempty"`
	// root-mean-squared error between actual and predicted aht
	RmsError_AHT float32 `protobuf:"fixed32,9,opt,name=rms_error_AHT,json=rmsErrorAHT,proto3" json:"rms_error_AHT,omitempty"`
	// Indicates whether or not the stats generated were invalid
	AreStatsInvalid bool `protobuf:"varint,10,opt,name=are_stats_invalid,json=areStatsInvalid,proto3" json:"are_stats_invalid,omitempty"`
	// Message explaining why the stats were invalid
	InvalidReason string `protobuf:"bytes,11,opt,name=invalid_reason,json=invalidReason,proto3" json:"invalid_reason,omitempty"`
}

func (x *GetForecastStatisticsRes) Reset() {
	*x = GetForecastStatisticsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForecastStatisticsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastStatisticsRes) ProtoMessage() {}

func (x *GetForecastStatisticsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastStatisticsRes.ProtoReflect.Descriptor instead.
func (*GetForecastStatisticsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{61}
}

func (x *GetForecastStatisticsRes) GetNumIntervalsMeasured() int32 {
	if x != nil {
		return x.NumIntervalsMeasured
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetTotalCallsHistorical() int32 {
	if x != nil {
		return x.TotalCallsHistorical
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetTotalCallsPredicted() int32 {
	if x != nil {
		return x.TotalCallsPredicted
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetPercentCallsOverUnder() float32 {
	if x != nil {
		return x.PercentCallsOverUnder
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetRmsErrorCalls() float32 {
	if x != nil {
		return x.RmsErrorCalls
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetRmsError_ATAB() float32 {
	if x != nil {
		return x.RmsError_ATAB
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetRmsError_ASA() float32 {
	if x != nil {
		return x.RmsError_ASA
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetRmsError_ACW() float32 {
	if x != nil {
		return x.RmsError_ACW
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetRmsError_AHT() float32 {
	if x != nil {
		return x.RmsError_AHT
	}
	return 0
}

func (x *GetForecastStatisticsRes) GetAreStatsInvalid() bool {
	if x != nil {
		return x.AreStatsInvalid
	}
	return false
}

func (x *GetForecastStatisticsRes) GetInvalidReason() string {
	if x != nil {
		return x.InvalidReason
	}
	return ""
}

// Response message for BuildRegressionForecastByIntervalWithStats RPC
type BuildRegressionForecastByIntervalWithStatsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResultOneof:
	//
	//	*BuildRegressionForecastByIntervalWithStatsRes_CallData
	//	*BuildRegressionForecastByIntervalWithStatsRes_ForecastStats
	ResultOneof isBuildRegressionForecastByIntervalWithStatsRes_ResultOneof `protobuf_oneof:"result_oneof"`
}

func (x *BuildRegressionForecastByIntervalWithStatsRes) Reset() {
	*x = BuildRegressionForecastByIntervalWithStatsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildRegressionForecastByIntervalWithStatsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildRegressionForecastByIntervalWithStatsRes) ProtoMessage() {}

func (x *BuildRegressionForecastByIntervalWithStatsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildRegressionForecastByIntervalWithStatsRes.ProtoReflect.Descriptor instead.
func (*BuildRegressionForecastByIntervalWithStatsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{62}
}

func (m *BuildRegressionForecastByIntervalWithStatsRes) GetResultOneof() isBuildRegressionForecastByIntervalWithStatsRes_ResultOneof {
	if m != nil {
		return m.ResultOneof
	}
	return nil
}

func (x *BuildRegressionForecastByIntervalWithStatsRes) GetCallData() *CallDataByInterval {
	if x, ok := x.GetResultOneof().(*BuildRegressionForecastByIntervalWithStatsRes_CallData); ok {
		return x.CallData
	}
	return nil
}

func (x *BuildRegressionForecastByIntervalWithStatsRes) GetForecastStats() *GetForecastStatisticsRes {
	if x, ok := x.GetResultOneof().(*BuildRegressionForecastByIntervalWithStatsRes_ForecastStats); ok {
		return x.ForecastStats
	}
	return nil
}

type isBuildRegressionForecastByIntervalWithStatsRes_ResultOneof interface {
	isBuildRegressionForecastByIntervalWithStatsRes_ResultOneof()
}

type BuildRegressionForecastByIntervalWithStatsRes_CallData struct {
	// Forecast data intervals generated from the forecast
	CallData *CallDataByInterval `protobuf:"bytes,1,opt,name=call_data,json=callData,proto3,oneof"`
}

type BuildRegressionForecastByIntervalWithStatsRes_ForecastStats struct {
	// Statistics comparing the historical data during the test interval with the prediction data during the same period.
	// This will only be the type of the first message returned.
	ForecastStats *GetForecastStatisticsRes `protobuf:"bytes,2,opt,name=forecast_stats,json=forecastStats,proto3,oneof"`
}

func (*BuildRegressionForecastByIntervalWithStatsRes_CallData) isBuildRegressionForecastByIntervalWithStatsRes_ResultOneof() {
}

func (*BuildRegressionForecastByIntervalWithStatsRes_ForecastStats) isBuildRegressionForecastByIntervalWithStatsRes_ResultOneof() {
}

// Request message for the ListCallProfileTemplates RPC
type ListCallProfileTemplatesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCallProfileTemplatesReq) Reset() {
	*x = ListCallProfileTemplatesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCallProfileTemplatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCallProfileTemplatesReq) ProtoMessage() {}

func (x *ListCallProfileTemplatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCallProfileTemplatesReq.ProtoReflect.Descriptor instead.
func (*ListCallProfileTemplatesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{63}
}

// Response message for the ListCallProfileTemplates RPC
type ListCallProfileTemplatesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all the call profile templates for the requesting org
	CallProfileTemplates []*CallProfileTemplate `protobuf:"bytes,1,rep,name=call_profile_templates,json=callProfileTemplates,proto3" json:"call_profile_templates,omitempty"`
}

func (x *ListCallProfileTemplatesRes) Reset() {
	*x = ListCallProfileTemplatesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCallProfileTemplatesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCallProfileTemplatesRes) ProtoMessage() {}

func (x *ListCallProfileTemplatesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCallProfileTemplatesRes.ProtoReflect.Descriptor instead.
func (*ListCallProfileTemplatesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{64}
}

func (x *ListCallProfileTemplatesRes) GetCallProfileTemplates() []*CallProfileTemplate {
	if x != nil {
		return x.CallProfileTemplates
	}
	return nil
}

// Request message for the ListForecastIntervalsForSkillProfile RPC
type ListForecastIntervalsForSkillProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of skill profile to get the forecast of.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
}

func (x *ListForecastIntervalsForSkillProfileReq) Reset() {
	*x = ListForecastIntervalsForSkillProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListForecastIntervalsForSkillProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListForecastIntervalsForSkillProfileReq) ProtoMessage() {}

func (x *ListForecastIntervalsForSkillProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListForecastIntervalsForSkillProfileReq.ProtoReflect.Descriptor instead.
func (*ListForecastIntervalsForSkillProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{65}
}

func (x *ListForecastIntervalsForSkillProfileReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

// Request message for the UpsertRegressionForecast RPC
type UpsertRegressionForecastReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Forecast template used to build the regression forecast
	RegressionTemplate *RegressionTemplate `protobuf:"bytes,1,opt,name=regression_template,json=regressionTemplate,proto3" json:"regression_template,omitempty"`
	// the following only apply for avgs_processing_type=RegressionForecasterAvgsProcessingType.FIXED_AVERAGES
	// optional
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,2,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	// optional
	AverageHandleTimeInSeconds float32 `protobuf:"fixed32,3,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	// optional
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,4,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	// optional
	AverageTimeToAbortInSeconds float32 `protobuf:"fixed32,5,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
	// IDs of the skill Profiles of which to save the generated forecast.
	SkillProfileSidsToForecast []int64 `protobuf:"varint,6,rep,packed,name=skill_profile_sids_to_forecast,json=skillProfileSidsToForecast,proto3" json:"skill_profile_sids_to_forecast,omitempty"`
}

func (x *UpsertRegressionForecastReq) Reset() {
	*x = UpsertRegressionForecastReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRegressionForecastReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRegressionForecastReq) ProtoMessage() {}

func (x *UpsertRegressionForecastReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRegressionForecastReq.ProtoReflect.Descriptor instead.
func (*UpsertRegressionForecastReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{66}
}

func (x *UpsertRegressionForecastReq) GetRegressionTemplate() *RegressionTemplate {
	if x != nil {
		return x.RegressionTemplate
	}
	return nil
}

func (x *UpsertRegressionForecastReq) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *UpsertRegressionForecastReq) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *UpsertRegressionForecastReq) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *UpsertRegressionForecastReq) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

func (x *UpsertRegressionForecastReq) GetSkillProfileSidsToForecast() []int64 {
	if x != nil {
		return x.SkillProfileSidsToForecast
	}
	return nil
}

// Response message for the UpsertRegressionForecast RPC
type UpsertRegressionForecastRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpsertRegressionForecastRes) Reset() {
	*x = UpsertRegressionForecastRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRegressionForecastRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRegressionForecastRes) ProtoMessage() {}

func (x *UpsertRegressionForecastRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRegressionForecastRes.ProtoReflect.Descriptor instead.
func (*UpsertRegressionForecastRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{67}
}

// Request message for the UpsertForecastDataDelta RPC
type UpsertForecastDataDeltaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delta to store
	// The @start_datetime, @is_delta, and @skill_profile_sid fields DO NOT need to be set.
	Delta *CallDataByInterval `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *UpsertForecastDataDeltaReq) Reset() {
	*x = UpsertForecastDataDeltaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertForecastDataDeltaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertForecastDataDeltaReq) ProtoMessage() {}

func (x *UpsertForecastDataDeltaReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertForecastDataDeltaReq.ProtoReflect.Descriptor instead.
func (*UpsertForecastDataDeltaReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{68}
}

func (x *UpsertForecastDataDeltaReq) GetDelta() *CallDataByInterval {
	if x != nil {
		return x.Delta
	}
	return nil
}

// Response message for the UpsertForecastDataDelta RPC
type UpsertForecastDataDeltaRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delta that was stored.
	Delta *CallDataByInterval `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *UpsertForecastDataDeltaRes) Reset() {
	*x = UpsertForecastDataDeltaRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertForecastDataDeltaRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertForecastDataDeltaRes) ProtoMessage() {}

func (x *UpsertForecastDataDeltaRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertForecastDataDeltaRes.ProtoReflect.Descriptor instead.
func (*UpsertForecastDataDeltaRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{69}
}

func (x *UpsertForecastDataDeltaRes) GetDelta() *CallDataByInterval {
	if x != nil {
		return x.Delta
	}
	return nil
}

// Request message for the UpsertForecastDataDeltas RPC
type UpsertForecastDataDeltasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deltas to store
	// The @start_datetime, @is_delta, and @skill_profile_sid fields DO NOT need to be set.
	Deltas []*CallDataByInterval `protobuf:"bytes,1,rep,name=deltas,proto3" json:"deltas,omitempty"`
}

func (x *UpsertForecastDataDeltasReq) Reset() {
	*x = UpsertForecastDataDeltasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertForecastDataDeltasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertForecastDataDeltasReq) ProtoMessage() {}

func (x *UpsertForecastDataDeltasReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertForecastDataDeltasReq.ProtoReflect.Descriptor instead.
func (*UpsertForecastDataDeltasReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{70}
}

func (x *UpsertForecastDataDeltasReq) GetDeltas() []*CallDataByInterval {
	if x != nil {
		return x.Deltas
	}
	return nil
}

// Response message for the UpsertForecastDataDeltas RPC
type UpsertForecastDataDeltasRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpsertForecastDataDeltasRes) Reset() {
	*x = UpsertForecastDataDeltasRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertForecastDataDeltasRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertForecastDataDeltasRes) ProtoMessage() {}

func (x *UpsertForecastDataDeltasRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertForecastDataDeltasRes.ProtoReflect.Descriptor instead.
func (*UpsertForecastDataDeltasRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{71}
}

// Request message for the DeleteForecastIntervals RPC
type DeleteForecastIntervalsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DeleteParam:
	//
	//	*DeleteForecastIntervalsReq_SkillProfileSid
	//	*DeleteForecastIntervalsReq_ForecastIntervalSids
	DeleteParam isDeleteForecastIntervalsReq_DeleteParam `protobuf_oneof:"delete_param"`
	// Type of interval to delete
	ForecastIntervalDeleteType DeleteForecastIntervalsReq_ForecastIntervalDeleteType `protobuf:"varint,3,opt,name=forecast_interval_delete_type,json=forecastIntervalDeleteType,proto3,enum=api.v1alpha1.wfm.DeleteForecastIntervalsReq_ForecastIntervalDeleteType" json:"forecast_interval_delete_type,omitempty"`
}

func (x *DeleteForecastIntervalsReq) Reset() {
	*x = DeleteForecastIntervalsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteForecastIntervalsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteForecastIntervalsReq) ProtoMessage() {}

func (x *DeleteForecastIntervalsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteForecastIntervalsReq.ProtoReflect.Descriptor instead.
func (*DeleteForecastIntervalsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{72}
}

func (m *DeleteForecastIntervalsReq) GetDeleteParam() isDeleteForecastIntervalsReq_DeleteParam {
	if m != nil {
		return m.DeleteParam
	}
	return nil
}

func (x *DeleteForecastIntervalsReq) GetSkillProfileSid() int64 {
	if x, ok := x.GetDeleteParam().(*DeleteForecastIntervalsReq_SkillProfileSid); ok {
		return x.SkillProfileSid
	}
	return 0
}

func (x *DeleteForecastIntervalsReq) GetForecastIntervalSids() *DeleteForecastIntervalsReq_IntervalSids {
	if x, ok := x.GetDeleteParam().(*DeleteForecastIntervalsReq_ForecastIntervalSids); ok {
		return x.ForecastIntervalSids
	}
	return nil
}

func (x *DeleteForecastIntervalsReq) GetForecastIntervalDeleteType() DeleteForecastIntervalsReq_ForecastIntervalDeleteType {
	if x != nil {
		return x.ForecastIntervalDeleteType
	}
	return DeleteForecastIntervalsReq_INTERVALS_AND_DELTAS
}

type isDeleteForecastIntervalsReq_DeleteParam interface {
	isDeleteForecastIntervalsReq_DeleteParam()
}

type DeleteForecastIntervalsReq_SkillProfileSid struct {
	// ID of the skill profile of which to delete the intervas/deltas.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3,oneof"`
}

type DeleteForecastIntervalsReq_ForecastIntervalSids struct {
	// Wrapper for SIDs of intervals to be deleted
	ForecastIntervalSids *DeleteForecastIntervalsReq_IntervalSids `protobuf:"bytes,2,opt,name=forecast_interval_sids,json=forecastIntervalSids,proto3,oneof"`
}

func (*DeleteForecastIntervalsReq_SkillProfileSid) isDeleteForecastIntervalsReq_DeleteParam() {}

func (*DeleteForecastIntervalsReq_ForecastIntervalSids) isDeleteForecastIntervalsReq_DeleteParam() {}

// Response message for the DeleteForecastIntervals RPC
type DeleteForecastIntervalsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteForecastIntervalsRes) Reset() {
	*x = DeleteForecastIntervalsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteForecastIntervalsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteForecastIntervalsRes) ProtoMessage() {}

func (x *DeleteForecastIntervalsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteForecastIntervalsRes.ProtoReflect.Descriptor instead.
func (*DeleteForecastIntervalsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{73}
}

// Request message for the ListHistoricalDataForAllSkillProfiles RPC
type ListHistoricalDataForAllSkillProfilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListHistoricalDataForAllSkillProfilesReq) Reset() {
	*x = ListHistoricalDataForAllSkillProfilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistoricalDataForAllSkillProfilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoricalDataForAllSkillProfilesReq) ProtoMessage() {}

func (x *ListHistoricalDataForAllSkillProfilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoricalDataForAllSkillProfilesReq.ProtoReflect.Descriptor instead.
func (*ListHistoricalDataForAllSkillProfilesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{74}
}

// Response message for the ListHistoricalDataForAllSkillProfiles RPC
type ListHistoricalDataForAllSkillProfilesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// History intervals sorted by @start_datetime.
	History []*HistoricalDataInterval `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *ListHistoricalDataForAllSkillProfilesRes) Reset() {
	*x = ListHistoricalDataForAllSkillProfilesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistoricalDataForAllSkillProfilesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoricalDataForAllSkillProfilesRes) ProtoMessage() {}

func (x *ListHistoricalDataForAllSkillProfilesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoricalDataForAllSkillProfilesRes.ProtoReflect.Descriptor instead.
func (*ListHistoricalDataForAllSkillProfilesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{75}
}

func (x *ListHistoricalDataForAllSkillProfilesRes) GetHistory() []*HistoricalDataInterval {
	if x != nil {
		return x.History
	}
	return nil
}

// Request message for the BuildDOWAndMOYProfiles RPC
type BuildDOWAndMOYProfilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProfileTOD to use to build the ProfileDOW and ProfileMOY
	ProfileTod *commons.ProfileTOD `protobuf:"bytes,1,opt,name=profile_tod,json=profileTod,proto3" json:"profile_tod,omitempty"`
	// ProfileWOMS to use to build the ProfileDOW and ProfileMOY
	ProfileWoms *commons.ProfileWOMS `protobuf:"bytes,2,opt,name=profile_woms,json=profileWoms,proto3" json:"profile_woms,omitempty"`
	// Indicates if the @profile_tod and @profile_woms belongs to the average fields of a call profile template.
	IsAverageProfile bool `protobuf:"varint,3,opt,name=is_average_profile,json=isAverageProfile,proto3" json:"is_average_profile,omitempty"`
}

func (x *BuildDOWAndMOYProfilesReq) Reset() {
	*x = BuildDOWAndMOYProfilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildDOWAndMOYProfilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildDOWAndMOYProfilesReq) ProtoMessage() {}

func (x *BuildDOWAndMOYProfilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildDOWAndMOYProfilesReq.ProtoReflect.Descriptor instead.
func (*BuildDOWAndMOYProfilesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{76}
}

func (x *BuildDOWAndMOYProfilesReq) GetProfileTod() *commons.ProfileTOD {
	if x != nil {
		return x.ProfileTod
	}
	return nil
}

func (x *BuildDOWAndMOYProfilesReq) GetProfileWoms() *commons.ProfileWOMS {
	if x != nil {
		return x.ProfileWoms
	}
	return nil
}

func (x *BuildDOWAndMOYProfilesReq) GetIsAverageProfile() bool {
	if x != nil {
		return x.IsAverageProfile
	}
	return false
}

// Response message for the BuildDOWAndMOYProfiles RPC
type BuildDOWAndMOYProfilesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generated ProfileDOW from the request parameters.
	ProfileDow *commons.ProfileDOW `protobuf:"bytes,1,opt,name=profile_dow,json=profileDow,proto3" json:"profile_dow,omitempty"`
	// Generated ProfileMOY from the request parameters.
	ProfileMoy *commons.ProfileMOY `protobuf:"bytes,2,opt,name=profile_moy,json=profileMoy,proto3" json:"profile_moy,omitempty"`
}

func (x *BuildDOWAndMOYProfilesRes) Reset() {
	*x = BuildDOWAndMOYProfilesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildDOWAndMOYProfilesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildDOWAndMOYProfilesRes) ProtoMessage() {}

func (x *BuildDOWAndMOYProfilesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildDOWAndMOYProfilesRes.ProtoReflect.Descriptor instead.
func (*BuildDOWAndMOYProfilesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{77}
}

func (x *BuildDOWAndMOYProfilesRes) GetProfileDow() *commons.ProfileDOW {
	if x != nil {
		return x.ProfileDow
	}
	return nil
}

func (x *BuildDOWAndMOYProfilesRes) GetProfileMoy() *commons.ProfileMOY {
	if x != nil {
		return x.ProfileMoy
	}
	return nil
}

// Request message for the CalculateTrainingDataAveragesForSkillProfile RPC
type CalculateTrainingDataAveragesForSkillProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The training data used to calculate the averages will belong to this skill profile.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
}

func (x *CalculateTrainingDataAveragesForSkillProfileReq) Reset() {
	*x = CalculateTrainingDataAveragesForSkillProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateTrainingDataAveragesForSkillProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTrainingDataAveragesForSkillProfileReq) ProtoMessage() {}

func (x *CalculateTrainingDataAveragesForSkillProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTrainingDataAveragesForSkillProfileReq.ProtoReflect.Descriptor instead.
func (*CalculateTrainingDataAveragesForSkillProfileReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{78}
}

func (x *CalculateTrainingDataAveragesForSkillProfileReq) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

// Response message for the CalculateTrainingDataAveragesForSkillProfile RPC
type CalculateTrainingDataAveragesForSkillProfileRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// averages found in the training data set.
	AverageSpeedOfAnswerInSeconds float32 `protobuf:"fixed32,1,opt,name=average_speed_of_answer_in_seconds,json=averageSpeedOfAnswerInSeconds,proto3" json:"average_speed_of_answer_in_seconds,omitempty"`
	AverageHandleTimeInSeconds    float32 `protobuf:"fixed32,2,opt,name=average_handle_time_in_seconds,json=averageHandleTimeInSeconds,proto3" json:"average_handle_time_in_seconds,omitempty"`
	AverageAfterCallWorkInSeconds float32 `protobuf:"fixed32,3,opt,name=average_after_call_work_in_seconds,json=averageAfterCallWorkInSeconds,proto3" json:"average_after_call_work_in_seconds,omitempty"`
	AverageTimeToAbortInSeconds   float32 `protobuf:"fixed32,4,opt,name=average_time_to_abort_in_seconds,json=averageTimeToAbortInSeconds,proto3" json:"average_time_to_abort_in_seconds,omitempty"`
}

func (x *CalculateTrainingDataAveragesForSkillProfileRes) Reset() {
	*x = CalculateTrainingDataAveragesForSkillProfileRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateTrainingDataAveragesForSkillProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTrainingDataAveragesForSkillProfileRes) ProtoMessage() {}

func (x *CalculateTrainingDataAveragesForSkillProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTrainingDataAveragesForSkillProfileRes.ProtoReflect.Descriptor instead.
func (*CalculateTrainingDataAveragesForSkillProfileRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{79}
}

func (x *CalculateTrainingDataAveragesForSkillProfileRes) GetAverageSpeedOfAnswerInSeconds() float32 {
	if x != nil {
		return x.AverageSpeedOfAnswerInSeconds
	}
	return 0
}

func (x *CalculateTrainingDataAveragesForSkillProfileRes) GetAverageHandleTimeInSeconds() float32 {
	if x != nil {
		return x.AverageHandleTimeInSeconds
	}
	return 0
}

func (x *CalculateTrainingDataAveragesForSkillProfileRes) GetAverageAfterCallWorkInSeconds() float32 {
	if x != nil {
		return x.AverageAfterCallWorkInSeconds
	}
	return 0
}

func (x *CalculateTrainingDataAveragesForSkillProfileRes) GetAverageTimeToAbortInSeconds() float32 {
	if x != nil {
		return x.AverageTimeToAbortInSeconds
	}
	return 0
}

// Request message for the UpdateSkillProfileAveragesUsingHistoricalData RPC
type UpdateSkillProfileAveragesUsingHistoricalDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the skill profiles to calculate the averages of, if none are sent it calculates it for all skill profiles the org has.
	SkillProfileSids []int64 `protobuf:"varint,1,rep,packed,name=skill_profile_sids,json=skillProfileSids,proto3" json:"skill_profile_sids,omitempty"`
	// The datetime range of the training data to use to calculate the averages, if a nil range is given the following range is used:
	// @training_data_range_end_datetime - @averages_calculation_range_in_months to the @training_data_range_end_datetime from the forecasting parameters.
	// If @averages_calculation_range_in_months is 0, it will use the @training_data_range_start_datetime as the start datetime of the range.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,2,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// If true, it will exclude skill profiles that have manual averages in them from the calculation (even if those skill profiles are in @skill_profile_sids).
	// Otherwise they will be included in the calculation.
	ExcludeSkillProfilesWithManualAverages bool `protobuf:"varint,3,opt,name=exclude_skill_profiles_with_manual_averages,json=excludeSkillProfilesWithManualAverages,proto3" json:"exclude_skill_profiles_with_manual_averages,omitempty"`
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataReq) Reset() {
	*x = UpdateSkillProfileAveragesUsingHistoricalDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileAveragesUsingHistoricalDataReq) ProtoMessage() {}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileAveragesUsingHistoricalDataReq.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileAveragesUsingHistoricalDataReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{80}
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataReq) GetSkillProfileSids() []int64 {
	if x != nil {
		return x.SkillProfileSids
	}
	return nil
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataReq) GetExcludeSkillProfilesWithManualAverages() bool {
	if x != nil {
		return x.ExcludeSkillProfilesWithManualAverages
	}
	return false
}

// Response message for the UpdateSkillProfileAveragesUsingHistoricalData RPC
type UpdateSkillProfileAveragesUsingHistoricalDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataRes) Reset() {
	*x = UpdateSkillProfileAveragesUsingHistoricalDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileAveragesUsingHistoricalDataRes) ProtoMessage() {}

func (x *UpdateSkillProfileAveragesUsingHistoricalDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileAveragesUsingHistoricalDataRes.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileAveragesUsingHistoricalDataRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{81}
}

// UserCapability represents the rules that apply to the current user for the applicable entity.
type UserCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UI can display element for this user
	CanDisplay bool `protobuf:"varint,1,opt,name=can_display,json=canDisplay,proto3" json:"can_display,omitempty"`
	// UI can edit element
	CanEdit bool `protobuf:"varint,2,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	// User can move a valid node B to this node A, making B a child of A
	IsMoveTarget bool `protobuf:"varint,3,opt,name=is_move_target,json=isMoveTarget,proto3" json:"is_move_target,omitempty"`
	// User can move this node A to a valid node B, making A a child of B
	// where node B has the is_move_target flag set
	CanMove bool `protobuf:"varint,4,opt,name=can_move,json=canMove,proto3" json:"can_move,omitempty"`
	// User can mark this element as deleted
	CanDelete bool `protobuf:"varint,5,opt,name=can_delete,json=canDelete,proto3" json:"can_delete,omitempty"`
	// User can mark this element as undeleted
	CanUndelete bool `protobuf:"varint,6,opt,name=can_undelete,json=canUndelete,proto3" json:"can_undelete,omitempty"`
	// User can add a valid child to this node
	CanAddChild bool `protobuf:"varint,7,opt,name=can_add_child,json=canAddChild,proto3" json:"can_add_child,omitempty"`
}

func (x *UserCapability) Reset() {
	*x = UserCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCapability) ProtoMessage() {}

func (x *UserCapability) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCapability.ProtoReflect.Descriptor instead.
func (*UserCapability) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{82}
}

func (x *UserCapability) GetCanDisplay() bool {
	if x != nil {
		return x.CanDisplay
	}
	return false
}

func (x *UserCapability) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *UserCapability) GetIsMoveTarget() bool {
	if x != nil {
		return x.IsMoveTarget
	}
	return false
}

func (x *UserCapability) GetCanMove() bool {
	if x != nil {
		return x.CanMove
	}
	return false
}

func (x *UserCapability) GetCanDelete() bool {
	if x != nil {
		return x.CanDelete
	}
	return false
}

func (x *UserCapability) GetCanUndelete() bool {
	if x != nil {
		return x.CanUndelete
	}
	return false
}

func (x *UserCapability) GetCanAddChild() bool {
	if x != nil {
		return x.CanAddChild
	}
	return false
}

// Call Center node
type CallCenterNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node unique id (genereated on the backend when sent for creation).
	CallCenterNodeSid int64 `protobuf:"varint,1,opt,name=call_center_node_sid,json=callCenterNodeSid,proto3" json:"call_center_node_sid,omitempty"`
	// Node name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Node description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Datetime that the node was set to inactive, if not set then the node is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// Call Center TimeZone
	TimeZoneVal commons.TimeZone `protobuf:"varint,5,opt,name=time_zone_val,json=timeZoneVal,proto3,enum=api.commons.TimeZone" json:"time_zone_val,omitempty"`
	// ID of the schedule scenario that the call center node belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,6,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// client nodes that are children of call center node
	MemberClientNodes []*ClientNode `protobuf:"bytes,7,rep,name=member_client_nodes,json=memberClientNodes,proto3" json:"member_client_nodes,omitempty"`
	// non skill activities that are children of call center node
	MemberNonSkillActivities []*NonSkillActivity `protobuf:"bytes,8,rep,name=member_non_skill_activities,json=memberNonSkillActivities,proto3" json:"member_non_skill_activities,omitempty"`
	// open times patterns that are children of call center node
	MemberOpenTimesPatterns []*OpenTimesPattern `protobuf:"bytes,9,rep,name=member_open_times_patterns,json=memberOpenTimesPatterns,proto3" json:"member_open_times_patterns,omitempty"`
	// agent availability patterns that are children of call center node
	MemberAgentAvailabilityPatterns []*AgentAvailabilityPattern `protobuf:"bytes,10,rep,name=member_agent_availability_patterns,json=memberAgentAvailabilityPatterns,proto3" json:"member_agent_availability_patterns,omitempty"`
	// constraint rules that are children of call center node
	MemberConstraintRules []*ConstraintRule `protobuf:"bytes,11,rep,name=member_constraint_rules,json=memberConstraintRules,proto3" json:"member_constraint_rules,omitempty"`
	// agent groups that are children of call center node
	MemberAgentGroups []*AgentGroup `protobuf:"bytes,12,rep,name=member_agent_groups,json=memberAgentGroups,proto3" json:"member_agent_groups,omitempty"`
	// ID of the original Call Center Node that this node was copied from.
	// If this node is the original, field will be set as nil.
	OriginSid *wrapperspb.Int64Value `protobuf:"bytes,13,opt,name=origin_sid,json=originSid,proto3" json:"origin_sid,omitempty"`
}

func (x *CallCenterNode) Reset() {
	*x = CallCenterNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallCenterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallCenterNode) ProtoMessage() {}

func (x *CallCenterNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallCenterNode.ProtoReflect.Descriptor instead.
func (*CallCenterNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{83}
}

func (x *CallCenterNode) GetCallCenterNodeSid() int64 {
	if x != nil {
		return x.CallCenterNodeSid
	}
	return 0
}

func (x *CallCenterNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CallCenterNode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CallCenterNode) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *CallCenterNode) GetTimeZoneVal() commons.TimeZone {
	if x != nil {
		return x.TimeZoneVal
	}
	return commons.TimeZone(0)
}

func (x *CallCenterNode) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *CallCenterNode) GetMemberClientNodes() []*ClientNode {
	if x != nil {
		return x.MemberClientNodes
	}
	return nil
}

func (x *CallCenterNode) GetMemberNonSkillActivities() []*NonSkillActivity {
	if x != nil {
		return x.MemberNonSkillActivities
	}
	return nil
}

func (x *CallCenterNode) GetMemberOpenTimesPatterns() []*OpenTimesPattern {
	if x != nil {
		return x.MemberOpenTimesPatterns
	}
	return nil
}

func (x *CallCenterNode) GetMemberAgentAvailabilityPatterns() []*AgentAvailabilityPattern {
	if x != nil {
		return x.MemberAgentAvailabilityPatterns
	}
	return nil
}

func (x *CallCenterNode) GetMemberConstraintRules() []*ConstraintRule {
	if x != nil {
		return x.MemberConstraintRules
	}
	return nil
}

func (x *CallCenterNode) GetMemberAgentGroups() []*AgentGroup {
	if x != nil {
		return x.MemberAgentGroups
	}
	return nil
}

func (x *CallCenterNode) GetOriginSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.OriginSid
	}
	return nil
}

// Request message for the UpdateCallCenterNode RPC
type UpdateCallCenterNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node entity that will be updated with the values provided.
	// If no change is desired for a given field in @node, then the current value must be set.
	Node *CallCenterNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *UpdateCallCenterNodeReq) Reset() {
	*x = UpdateCallCenterNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCallCenterNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCallCenterNodeReq) ProtoMessage() {}

func (x *UpdateCallCenterNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCallCenterNodeReq.ProtoReflect.Descriptor instead.
func (*UpdateCallCenterNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{84}
}

func (x *UpdateCallCenterNodeReq) GetNode() *CallCenterNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Response message for the UpdateCallCenterNode RPC
type UpdateCallCenterNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCallCenterNodeRes) Reset() {
	*x = UpdateCallCenterNodeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCallCenterNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCallCenterNodeRes) ProtoMessage() {}

func (x *UpdateCallCenterNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCallCenterNodeRes.ProtoReflect.Descriptor instead.
func (*UpdateCallCenterNodeRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{85}
}

// Client node
type ClientNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node unique id
	ClientNodeSid int64 `protobuf:"varint,1,opt,name=client_node_sid,json=clientNodeSid,proto3" json:"client_node_sid,omitempty"`
	// Node name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Node description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Parent node id -- should only have CallCenter nodes as parents
	ParentSid int64 `protobuf:"varint,4,opt,name=parent_sid,json=parentSid,proto3" json:"parent_sid,omitempty"`
	// Datetime that the node was set to inactive, if not set then the node is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// Client TimeZone
	TimeZoneVal commons.TimeZone `protobuf:"varint,6,opt,name=time_zone_val,json=timeZoneVal,proto3,enum=api.commons.TimeZone" json:"time_zone_val,omitempty"`
	// ID of the schedule scenario that the client node belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,7,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Location Nodes associated with @program_node_sid.
	MemberLocationNodes []*LocationNode `protobuf:"bytes,8,rep,name=member_location_nodes,json=memberLocationNodes,proto3" json:"member_location_nodes,omitempty"`
	// Non Skill Activities associated with @program_node_sid.
	MemberNonSkillActivities []*NonSkillActivity `protobuf:"bytes,9,rep,name=member_non_skill_activities,json=memberNonSkillActivities,proto3" json:"member_non_skill_activities,omitempty"`
	// Open Times Patterns associated with @program_node_sid.
	MemberOpenTimesPatterns []*OpenTimesPattern `protobuf:"bytes,10,rep,name=member_open_times_patterns,json=memberOpenTimesPatterns,proto3" json:"member_open_times_patterns,omitempty"`
	// Agent Availability Patterns associated with @program_node_sid.
	MemberAgentAvailabilityPatterns []*AgentAvailabilityPattern `protobuf:"bytes,11,rep,name=member_agent_availability_patterns,json=memberAgentAvailabilityPatterns,proto3" json:"member_agent_availability_patterns,omitempty"`
	// Constraint Rules associated with @program_node_sid.
	MemberConstraintRules []*ConstraintRule `protobuf:"bytes,12,rep,name=member_constraint_rules,json=memberConstraintRules,proto3" json:"member_constraint_rules,omitempty"`
	// Agent Groups associated with @program_node_sid.
	MemberAgentGroups []*AgentGroup `protobuf:"bytes,13,rep,name=member_agent_groups,json=memberAgentGroups,proto3" json:"member_agent_groups,omitempty"`
	// ID of the original Client Node that this node was copied from.
	// If this node is the original, field will be set as nil.
	OriginSid *wrapperspb.Int64Value `protobuf:"bytes,14,opt,name=origin_sid,json=originSid,proto3" json:"origin_sid,omitempty"`
}

func (x *ClientNode) Reset() {
	*x = ClientNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientNode) ProtoMessage() {}

func (x *ClientNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientNode.ProtoReflect.Descriptor instead.
func (*ClientNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{86}
}

func (x *ClientNode) GetClientNodeSid() int64 {
	if x != nil {
		return x.ClientNodeSid
	}
	return 0
}

func (x *ClientNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientNode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClientNode) GetParentSid() int64 {
	if x != nil {
		return x.ParentSid
	}
	return 0
}

func (x *ClientNode) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *ClientNode) GetTimeZoneVal() commons.TimeZone {
	if x != nil {
		return x.TimeZoneVal
	}
	return commons.TimeZone(0)
}

func (x *ClientNode) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *ClientNode) GetMemberLocationNodes() []*LocationNode {
	if x != nil {
		return x.MemberLocationNodes
	}
	return nil
}

func (x *ClientNode) GetMemberNonSkillActivities() []*NonSkillActivity {
	if x != nil {
		return x.MemberNonSkillActivities
	}
	return nil
}

func (x *ClientNode) GetMemberOpenTimesPatterns() []*OpenTimesPattern {
	if x != nil {
		return x.MemberOpenTimesPatterns
	}
	return nil
}

func (x *ClientNode) GetMemberAgentAvailabilityPatterns() []*AgentAvailabilityPattern {
	if x != nil {
		return x.MemberAgentAvailabilityPatterns
	}
	return nil
}

func (x *ClientNode) GetMemberConstraintRules() []*ConstraintRule {
	if x != nil {
		return x.MemberConstraintRules
	}
	return nil
}

func (x *ClientNode) GetMemberAgentGroups() []*AgentGroup {
	if x != nil {
		return x.MemberAgentGroups
	}
	return nil
}

func (x *ClientNode) GetOriginSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.OriginSid
	}
	return nil
}

// Request message for the CreateClientNode RPC
type CreateClientNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node to create, the @client_node_sid doesn't need to be set since it won't be used.
	Node *ClientNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *CreateClientNodeReq) Reset() {
	*x = CreateClientNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClientNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientNodeReq) ProtoMessage() {}

func (x *CreateClientNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientNodeReq.ProtoReflect.Descriptor instead.
func (*CreateClientNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{87}
}

func (x *CreateClientNodeReq) GetNode() *ClientNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Response message for the CreateClientNode RPC
type CreateClientNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created client node
	ClientNodeSid int64 `protobuf:"varint,1,opt,name=client_node_sid,json=clientNodeSid,proto3" json:"client_node_sid,omitempty"`
}

func (x *CreateClientNodeRes) Reset() {
	*x = CreateClientNodeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClientNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientNodeRes) ProtoMessage() {}

func (x *CreateClientNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientNodeRes.ProtoReflect.Descriptor instead.
func (*CreateClientNodeRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{88}
}

func (x *CreateClientNodeRes) GetClientNodeSid() int64 {
	if x != nil {
		return x.ClientNodeSid
	}
	return 0
}

// Request message for the UpdateClientNode RPC
type UpdateClientNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client Node to update
	Node *ClientNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *UpdateClientNodeReq) Reset() {
	*x = UpdateClientNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClientNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientNodeReq) ProtoMessage() {}

func (x *UpdateClientNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientNodeReq.ProtoReflect.Descriptor instead.
func (*UpdateClientNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{89}
}

func (x *UpdateClientNodeReq) GetNode() *ClientNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Response message for the UpdateClientNode RPC
type UpdateClientNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateClientNodeRes) Reset() {
	*x = UpdateClientNodeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClientNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientNodeRes) ProtoMessage() {}

func (x *UpdateClientNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientNodeRes.ProtoReflect.Descriptor instead.
func (*UpdateClientNodeRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{90}
}

// Location node
type LocationNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node unique id
	LocationNodeSid int64 `protobuf:"varint,1,opt,name=location_node_sid,json=locationNodeSid,proto3" json:"location_node_sid,omitempty"`
	// Node name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Node description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ID of the parent client node.
	ClientNodeSid int64 `protobuf:"varint,4,opt,name=client_node_sid,json=clientNodeSid,proto3" json:"client_node_sid,omitempty"`
	// Datetime that the node was set to inactive, if not set then the node is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// Timezone of this node.
	TimeZoneVal commons.TimeZone `protobuf:"varint,6,opt,name=time_zone_val,json=timeZoneVal,proto3,enum=api.commons.TimeZone" json:"time_zone_val,omitempty"`
	// Indicates whether on not the @shrinkage_value is a percentage (true=percentage, false=agents).
	ShrinkageIsPercentage bool `protobuf:"varint,7,opt,name=shrinkage_is_percentage,json=shrinkageIsPercentage,proto3" json:"shrinkage_is_percentage,omitempty"`
	// Value of the shrinkage.
	ShrinkageValue int32 `protobuf:"varint,8,opt,name=shrinkage_value,json=shrinkageValue,proto3" json:"shrinkage_value,omitempty"`
	// ID of the schedule scenario that the location node belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,9,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Program Nodes associated with @location_node_sid.
	MemberProgramNodes []*ProgramNode `protobuf:"bytes,10,rep,name=member_program_nodes,json=memberProgramNodes,proto3" json:"member_program_nodes,omitempty"`
	// Non Skill Activities associated with @location_node_sid.
	MemberNonSkillActivities []*NonSkillActivity `protobuf:"bytes,11,rep,name=member_non_skill_activities,json=memberNonSkillActivities,proto3" json:"member_non_skill_activities,omitempty"`
	// Open Times Patterns associated with @location_node_sid.
	MemberOpenTimesPatterns []*OpenTimesPattern `protobuf:"bytes,12,rep,name=member_open_times_patterns,json=memberOpenTimesPatterns,proto3" json:"member_open_times_patterns,omitempty"`
	// Agent Availability Patterns associated with @location_node_sid.
	MemberAgentAvailabilityPatterns []*AgentAvailabilityPattern `protobuf:"bytes,13,rep,name=member_agent_availability_patterns,json=memberAgentAvailabilityPatterns,proto3" json:"member_agent_availability_patterns,omitempty"`
	// Constraint Rules associated with @location_node_sid.
	MemberConstraintRules []*ConstraintRule `protobuf:"bytes,14,rep,name=member_constraint_rules,json=memberConstraintRules,proto3" json:"member_constraint_rules,omitempty"`
	// Agent Groups associated with @location_node_sid.
	MemberAgentGroups []*AgentGroup `protobuf:"bytes,15,rep,name=member_agent_groups,json=memberAgentGroups,proto3" json:"member_agent_groups,omitempty"`
	// ID of the original Location Node that this node was copied from.
	// If this node is the original, field will be set as nil.
	OriginSid *wrapperspb.Int64Value `protobuf:"bytes,16,opt,name=origin_sid,json=originSid,proto3" json:"origin_sid,omitempty"`
}

func (x *LocationNode) Reset() {
	*x = LocationNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationNode) ProtoMessage() {}

func (x *LocationNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationNode.ProtoReflect.Descriptor instead.
func (*LocationNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{91}
}

func (x *LocationNode) GetLocationNodeSid() int64 {
	if x != nil {
		return x.LocationNodeSid
	}
	return 0
}

func (x *LocationNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocationNode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LocationNode) GetClientNodeSid() int64 {
	if x != nil {
		return x.ClientNodeSid
	}
	return 0
}

func (x *LocationNode) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *LocationNode) GetTimeZoneVal() commons.TimeZone {
	if x != nil {
		return x.TimeZoneVal
	}
	return commons.TimeZone(0)
}

func (x *LocationNode) GetShrinkageIsPercentage() bool {
	if x != nil {
		return x.ShrinkageIsPercentage
	}
	return false
}

func (x *LocationNode) GetShrinkageValue() int32 {
	if x != nil {
		return x.ShrinkageValue
	}
	return 0
}

func (x *LocationNode) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *LocationNode) GetMemberProgramNodes() []*ProgramNode {
	if x != nil {
		return x.MemberProgramNodes
	}
	return nil
}

func (x *LocationNode) GetMemberNonSkillActivities() []*NonSkillActivity {
	if x != nil {
		return x.MemberNonSkillActivities
	}
	return nil
}

func (x *LocationNode) GetMemberOpenTimesPatterns() []*OpenTimesPattern {
	if x != nil {
		return x.MemberOpenTimesPatterns
	}
	return nil
}

func (x *LocationNode) GetMemberAgentAvailabilityPatterns() []*AgentAvailabilityPattern {
	if x != nil {
		return x.MemberAgentAvailabilityPatterns
	}
	return nil
}

func (x *LocationNode) GetMemberConstraintRules() []*ConstraintRule {
	if x != nil {
		return x.MemberConstraintRules
	}
	return nil
}

func (x *LocationNode) GetMemberAgentGroups() []*AgentGroup {
	if x != nil {
		return x.MemberAgentGroups
	}
	return nil
}

func (x *LocationNode) GetOriginSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.OriginSid
	}
	return nil
}

// Request message for the CreateLocationNode RPC
type CreateLocationNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node to create, the @location_node_sid doesn't need to be set since it won't be used.
	Node *LocationNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *CreateLocationNodeReq) Reset() {
	*x = CreateLocationNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLocationNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLocationNodeReq) ProtoMessage() {}

func (x *CreateLocationNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLocationNodeReq.ProtoReflect.Descriptor instead.
func (*CreateLocationNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{92}
}

func (x *CreateLocationNodeReq) GetNode() *LocationNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Response message for the CreateLocationNode RPC
type CreateLocationNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created location node.
	LocationNodeSid int64 `protobuf:"varint,1,opt,name=location_node_sid,json=locationNodeSid,proto3" json:"location_node_sid,omitempty"`
}

func (x *CreateLocationNodeRes) Reset() {
	*x = CreateLocationNodeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLocationNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLocationNodeRes) ProtoMessage() {}

func (x *CreateLocationNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLocationNodeRes.ProtoReflect.Descriptor instead.
func (*CreateLocationNodeRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{93}
}

func (x *CreateLocationNodeRes) GetLocationNodeSid() int64 {
	if x != nil {
		return x.LocationNodeSid
	}
	return 0
}

// Request message for the UpdateLocationNode RPC
type UpdateLocationNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location node to update
	LocationNode *LocationNode `protobuf:"bytes,1,opt,name=location_node,json=locationNode,proto3" json:"location_node,omitempty"`
}

func (x *UpdateLocationNodeReq) Reset() {
	*x = UpdateLocationNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLocationNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocationNodeReq) ProtoMessage() {}

func (x *UpdateLocationNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocationNodeReq.ProtoReflect.Descriptor instead.
func (*UpdateLocationNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{94}
}

func (x *UpdateLocationNodeReq) GetLocationNode() *LocationNode {
	if x != nil {
		return x.LocationNode
	}
	return nil
}

// Response message for the UpdateLocationNode RPC
type UpdateLocationNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateLocationNodeRes) Reset() {
	*x = UpdateLocationNodeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLocationNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocationNodeRes) ProtoMessage() {}

func (x *UpdateLocationNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocationNodeRes.ProtoReflect.Descriptor instead.
func (*UpdateLocationNodeRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{95}
}

// Program node
type ProgramNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node unique id
	ProgramNodeSid int64 `protobuf:"varint,1,opt,name=program_node_sid,json=programNodeSid,proto3" json:"program_node_sid,omitempty"`
	// Node name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Node description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ID of the parent location node.
	LocationNodeSid int64 `protobuf:"varint,4,opt,name=location_node_sid,json=locationNodeSid,proto3" json:"location_node_sid,omitempty"`
	// Datetime that the node was set to inactive, if not set then the node is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// Indicates whether on not the @shrinkage_value is a percentage (true=percentage, false=agents).
	ShrinkageIsPercentage bool `protobuf:"varint,6,opt,name=shrinkage_is_percentage,json=shrinkageIsPercentage,proto3" json:"shrinkage_is_percentage,omitempty"`
	// Value of the shrinkage. Either 0-100 if @shrinkage_is_percentage is true, or a value greater than 0 otherwise.
	ShrinkageValue int32 `protobuf:"varint,7,opt,name=shrinkage_value,json=shrinkageValue,proto3" json:"shrinkage_value,omitempty"`
	// ID of the schedule scenario that the program node belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,8,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Any shift templates associated with @program_node_sid.
	MemberShiftTemplates []*ShiftTemplate `protobuf:"bytes,9,rep,name=member_shift_templates,json=memberShiftTemplates,proto3" json:"member_shift_templates,omitempty"`
	// Any non skill activities associated with @program_node_sid.
	MemberNonSkillActivities []*NonSkillActivity `protobuf:"bytes,10,rep,name=member_non_skill_activities,json=memberNonSkillActivities,proto3" json:"member_non_skill_activities,omitempty"`
	// Any open times patterns associated with @program_node_sid.
	MemberOpenTimesPatterns []*OpenTimesPattern `protobuf:"bytes,11,rep,name=member_open_times_patterns,json=memberOpenTimesPatterns,proto3" json:"member_open_times_patterns,omitempty"`
	// Any agent availability patterns associated with @program_node_sid.
	MemberAgentAvailabilityPatterns []*AgentAvailabilityPattern `protobuf:"bytes,12,rep,name=member_agent_availability_patterns,json=memberAgentAvailabilityPatterns,proto3" json:"member_agent_availability_patterns,omitempty"`
	// Any constraint rules associated with @program_node_sid.
	MemberConstraintRules []*ConstraintRule `protobuf:"bytes,13,rep,name=member_constraint_rules,json=memberConstraintRules,proto3" json:"member_constraint_rules,omitempty"`
	// Any agent groups associated with @program_node_sid.
	MemberAgentGroups []*AgentGroup `protobuf:"bytes,14,rep,name=member_agent_groups,json=memberAgentGroups,proto3" json:"member_agent_groups,omitempty"`
	// Any skill proficiencies associated with @program_node_sid.
	MemberSkillProficiencies []*SkillProficiency `protobuf:"bytes,15,rep,name=member_skill_proficiencies,json=memberSkillProficiencies,proto3" json:"member_skill_proficiencies,omitempty"`
	// ID of the original Program Node that this node was copied from.
	// If this node is the original, field will be set as nil.
	OriginSid *wrapperspb.Int64Value `protobuf:"bytes,16,opt,name=origin_sid,json=originSid,proto3" json:"origin_sid,omitempty"`
}

func (x *ProgramNode) Reset() {
	*x = ProgramNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgramNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgramNode) ProtoMessage() {}

func (x *ProgramNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgramNode.ProtoReflect.Descriptor instead.
func (*ProgramNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{96}
}

func (x *ProgramNode) GetProgramNodeSid() int64 {
	if x != nil {
		return x.ProgramNodeSid
	}
	return 0
}

func (x *ProgramNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProgramNode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProgramNode) GetLocationNodeSid() int64 {
	if x != nil {
		return x.LocationNodeSid
	}
	return 0
}

func (x *ProgramNode) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *ProgramNode) GetShrinkageIsPercentage() bool {
	if x != nil {
		return x.ShrinkageIsPercentage
	}
	return false
}

func (x *ProgramNode) GetShrinkageValue() int32 {
	if x != nil {
		return x.ShrinkageValue
	}
	return 0
}

func (x *ProgramNode) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *ProgramNode) GetMemberShiftTemplates() []*ShiftTemplate {
	if x != nil {
		return x.MemberShiftTemplates
	}
	return nil
}

func (x *ProgramNode) GetMemberNonSkillActivities() []*NonSkillActivity {
	if x != nil {
		return x.MemberNonSkillActivities
	}
	return nil
}

func (x *ProgramNode) GetMemberOpenTimesPatterns() []*OpenTimesPattern {
	if x != nil {
		return x.MemberOpenTimesPatterns
	}
	return nil
}

func (x *ProgramNode) GetMemberAgentAvailabilityPatterns() []*AgentAvailabilityPattern {
	if x != nil {
		return x.MemberAgentAvailabilityPatterns
	}
	return nil
}

func (x *ProgramNode) GetMemberConstraintRules() []*ConstraintRule {
	if x != nil {
		return x.MemberConstraintRules
	}
	return nil
}

func (x *ProgramNode) GetMemberAgentGroups() []*AgentGroup {
	if x != nil {
		return x.MemberAgentGroups
	}
	return nil
}

func (x *ProgramNode) GetMemberSkillProficiencies() []*SkillProficiency {
	if x != nil {
		return x.MemberSkillProficiencies
	}
	return nil
}

func (x *ProgramNode) GetOriginSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.OriginSid
	}
	return nil
}

// Request message for the CreateProgramNode RPC
type CreateProgramNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node to create, the @program_node_sid doesn't need to be set since it won't be used.
	Node *ProgramNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *CreateProgramNodeReq) Reset() {
	*x = CreateProgramNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProgramNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProgramNodeReq) ProtoMessage() {}

func (x *CreateProgramNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProgramNodeReq.ProtoReflect.Descriptor instead.
func (*CreateProgramNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{97}
}

func (x *CreateProgramNodeReq) GetNode() *ProgramNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Response message for the CreateProgramNode RPC
type CreateProgramNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created program node.
	ProgramNodeSid int64 `protobuf:"varint,1,opt,name=program_node_sid,json=programNodeSid,proto3" json:"program_node_sid,omitempty"`
}

func (x *CreateProgramNodeRes) Reset() {
	*x = CreateProgramNodeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProgramNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProgramNodeRes) ProtoMessage() {}

func (x *CreateProgramNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProgramNodeRes.ProtoReflect.Descriptor instead.
func (*CreateProgramNodeRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{98}
}

func (x *CreateProgramNodeRes) GetProgramNodeSid() int64 {
	if x != nil {
		return x.ProgramNodeSid
	}
	return 0
}

// Request message for the UpdateProgramNode RPC
type UpdateProgramNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Program node to update.
	ProgramNode *ProgramNode `protobuf:"bytes,1,opt,name=program_node,json=programNode,proto3" json:"program_node,omitempty"`
}

func (x *UpdateProgramNodeReq) Reset() {
	*x = UpdateProgramNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProgramNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProgramNodeReq) ProtoMessage() {}

func (x *UpdateProgramNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProgramNodeReq.ProtoReflect.Descriptor instead.
func (*UpdateProgramNodeReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{99}
}

func (x *UpdateProgramNodeReq) GetProgramNode() *ProgramNode {
	if x != nil {
		return x.ProgramNode
	}
	return nil
}

// Response messsage for the UpdateProgramNode RPC
type UpdateProgramNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateProgramNodeRes) Reset() {
	*x = UpdateProgramNodeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProgramNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProgramNodeRes) ProtoMessage() {}

func (x *UpdateProgramNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProgramNodeRes.ProtoReflect.Descriptor instead.
func (*UpdateProgramNodeRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{100}
}

type ParentEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a parent entity
	ParentSid int64 `protobuf:"varint,1,opt,name=parent_sid,json=parentSid,proto3" json:"parent_sid,omitempty"`
	// Type of entity that the @parent_sid will reference.
	ParentType commons.ConfigEntityType `protobuf:"varint,2,opt,name=parent_type,json=parentType,proto3,enum=api.commons.ConfigEntityType" json:"parent_type,omitempty"`
}

func (x *ParentEntity) Reset() {
	*x = ParentEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentEntity) ProtoMessage() {}

func (x *ParentEntity) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentEntity.ProtoReflect.Descriptor instead.
func (*ParentEntity) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{101}
}

func (x *ParentEntity) GetParentSid() int64 {
	if x != nil {
		return x.ParentSid
	}
	return 0
}

func (x *ParentEntity) GetParentType() commons.ConfigEntityType {
	if x != nil {
		return x.ParentType
	}
	return commons.ConfigEntityType(0)
}

type ConstraintRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this constraint rule
	ConstraintRuleSid int64 `protobuf:"varint,1,opt,name=constraint_rule_sid,json=constraintRuleSid,proto3" json:"constraint_rule_sid,omitempty"`
	// Parent entity that the rule will be applied to.
	ParentEntity *ParentEntity `protobuf:"bytes,2,opt,name=parent_entity,json=parentEntity,proto3" json:"parent_entity,omitempty"`
	// Name of the constraint rule
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the constraint rule.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Ammount of time that the rule will be applied for.
	ValCount int32 `protobuf:"varint,5,opt,name=val_count,json=valCount,proto3" json:"val_count,omitempty"`
	// Measuring unit to be used by @val_count.
	ValUnit commons.ConstraintTimeUnit `protobuf:"varint,6,opt,name=val_unit,json=valUnit,proto3,enum=api.commons.ConstraintTimeUnit" json:"val_unit,omitempty"`
	// Specifies often @val_count will be repeated.
	PerCount int32 `protobuf:"varint,7,opt,name=per_count,json=perCount,proto3" json:"per_count,omitempty"`
	// Measuring unit to be used by @per_count.
	PerUnit commons.ConstraintTimeUnit `protobuf:"varint,8,opt,name=per_unit,json=perUnit,proto3,enum=api.commons.ConstraintTimeUnit" json:"per_unit,omitempty"`
	// Priority value, higher value means higher priority.
	Priority int32 `protobuf:"varint,9,opt,name=priority,proto3" json:"priority,omitempty"`
	// Whether or not the rule has infinite priority
	IsPriorityInfinite bool `protobuf:"varint,10,opt,name=is_priority_infinite,json=isPriorityInfinite,proto3" json:"is_priority_infinite,omitempty"`
	// The type that this rule whill be.
	RuleType commons.ConstraintRuleType `protobuf:"varint,11,opt,name=rule_type,json=ruleType,proto3,enum=api.commons.ConstraintRuleType" json:"rule_type,omitempty"`
	// Refers to a skill_proficiency_sid if @rule_type is MIN_SKILL_LEVEL, and otherwise refers to a scheduling_activity.
	TargetSid int64 `protobuf:"varint,12,opt,name=target_sid,json=targetSid,proto3" json:"target_sid,omitempty"`
	// ID of the schedule scenario that the constraint rule belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,13,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Entity associated with @target_sid.
	//
	// Types that are assignable to MemberTargetEntity:
	//
	//	*ConstraintRule_SchedulingActivity
	//	*ConstraintRule_SkillProficiency
	MemberTargetEntity isConstraintRule_MemberTargetEntity `protobuf_oneof:"member_target_entity"`
}

func (x *ConstraintRule) Reset() {
	*x = ConstraintRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintRule) ProtoMessage() {}

func (x *ConstraintRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintRule.ProtoReflect.Descriptor instead.
func (*ConstraintRule) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{102}
}

func (x *ConstraintRule) GetConstraintRuleSid() int64 {
	if x != nil {
		return x.ConstraintRuleSid
	}
	return 0
}

func (x *ConstraintRule) GetParentEntity() *ParentEntity {
	if x != nil {
		return x.ParentEntity
	}
	return nil
}

func (x *ConstraintRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConstraintRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConstraintRule) GetValCount() int32 {
	if x != nil {
		return x.ValCount
	}
	return 0
}

func (x *ConstraintRule) GetValUnit() commons.ConstraintTimeUnit {
	if x != nil {
		return x.ValUnit
	}
	return commons.ConstraintTimeUnit(0)
}

func (x *ConstraintRule) GetPerCount() int32 {
	if x != nil {
		return x.PerCount
	}
	return 0
}

func (x *ConstraintRule) GetPerUnit() commons.ConstraintTimeUnit {
	if x != nil {
		return x.PerUnit
	}
	return commons.ConstraintTimeUnit(0)
}

func (x *ConstraintRule) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ConstraintRule) GetIsPriorityInfinite() bool {
	if x != nil {
		return x.IsPriorityInfinite
	}
	return false
}

func (x *ConstraintRule) GetRuleType() commons.ConstraintRuleType {
	if x != nil {
		return x.RuleType
	}
	return commons.ConstraintRuleType(0)
}

func (x *ConstraintRule) GetTargetSid() int64 {
	if x != nil {
		return x.TargetSid
	}
	return 0
}

func (x *ConstraintRule) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (m *ConstraintRule) GetMemberTargetEntity() isConstraintRule_MemberTargetEntity {
	if m != nil {
		return m.MemberTargetEntity
	}
	return nil
}

func (x *ConstraintRule) GetSchedulingActivity() *SchedulingActivity {
	if x, ok := x.GetMemberTargetEntity().(*ConstraintRule_SchedulingActivity); ok {
		return x.SchedulingActivity
	}
	return nil
}

func (x *ConstraintRule) GetSkillProficiency() *SkillProficiency {
	if x, ok := x.GetMemberTargetEntity().(*ConstraintRule_SkillProficiency); ok {
		return x.SkillProficiency
	}
	return nil
}

type isConstraintRule_MemberTargetEntity interface {
	isConstraintRule_MemberTargetEntity()
}

type ConstraintRule_SchedulingActivity struct {
	// The scheduling_activity associated with @target_sid.
	SchedulingActivity *SchedulingActivity `protobuf:"bytes,14,opt,name=scheduling_activity,json=schedulingActivity,proto3,oneof"`
}

type ConstraintRule_SkillProficiency struct {
	// The skill_proficienct associated with @target_sid.
	SkillProficiency *SkillProficiency `protobuf:"bytes,15,opt,name=skill_proficiency,json=skillProficiency,proto3,oneof"`
}

func (*ConstraintRule_SchedulingActivity) isConstraintRule_MemberTargetEntity() {}

func (*ConstraintRule_SkillProficiency) isConstraintRule_MemberTargetEntity() {}

// Request message for the CreateConstraintRule RPC
type CreateConstraintRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rule to create, the @constraint_rule_sid doesn't need to be set since it won't be used.
	ConstraintRule *ConstraintRule `protobuf:"bytes,1,opt,name=constraint_rule,json=constraintRule,proto3" json:"constraint_rule,omitempty"`
}

func (x *CreateConstraintRuleReq) Reset() {
	*x = CreateConstraintRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConstraintRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConstraintRuleReq) ProtoMessage() {}

func (x *CreateConstraintRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConstraintRuleReq.ProtoReflect.Descriptor instead.
func (*CreateConstraintRuleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{103}
}

func (x *CreateConstraintRuleReq) GetConstraintRule() *ConstraintRule {
	if x != nil {
		return x.ConstraintRule
	}
	return nil
}

// Response message for the CreateConstraintRule RPC
type CreateConstraintRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created constraint rule.
	ConstraintRuleSid int64 `protobuf:"varint,1,opt,name=constraint_rule_sid,json=constraintRuleSid,proto3" json:"constraint_rule_sid,omitempty"`
	// ID of the newly created skill proficiency (will be 0 if rule was a non skill one).
	SkillProficiencySid int64 `protobuf:"varint,2,opt,name=skill_proficiency_sid,json=skillProficiencySid,proto3" json:"skill_proficiency_sid,omitempty"`
}

func (x *CreateConstraintRuleRes) Reset() {
	*x = CreateConstraintRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConstraintRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConstraintRuleRes) ProtoMessage() {}

func (x *CreateConstraintRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConstraintRuleRes.ProtoReflect.Descriptor instead.
func (*CreateConstraintRuleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{104}
}

func (x *CreateConstraintRuleRes) GetConstraintRuleSid() int64 {
	if x != nil {
		return x.ConstraintRuleSid
	}
	return 0
}

func (x *CreateConstraintRuleRes) GetSkillProficiencySid() int64 {
	if x != nil {
		return x.SkillProficiencySid
	}
	return 0
}

// Request message for the UpdateConstraintRule RPC
type UpdateConstraintRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Constraint rule to update
	ConstraintRule *ConstraintRule `protobuf:"bytes,1,opt,name=constraint_rule,json=constraintRule,proto3" json:"constraint_rule,omitempty"`
}

func (x *UpdateConstraintRuleReq) Reset() {
	*x = UpdateConstraintRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConstraintRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConstraintRuleReq) ProtoMessage() {}

func (x *UpdateConstraintRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConstraintRuleReq.ProtoReflect.Descriptor instead.
func (*UpdateConstraintRuleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{105}
}

func (x *UpdateConstraintRuleReq) GetConstraintRule() *ConstraintRule {
	if x != nil {
		return x.ConstraintRule
	}
	return nil
}

// Response message for the UpdateConstraintRule RPC
type UpdateConstraintRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateConstraintRuleRes) Reset() {
	*x = UpdateConstraintRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConstraintRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConstraintRuleRes) ProtoMessage() {}

func (x *UpdateConstraintRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConstraintRuleRes.ProtoReflect.Descriptor instead.
func (*UpdateConstraintRuleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{106}
}

// Request message for the DeleteConstraintRule RPC
type DeleteConstraintRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the constraint rule to delete.
	ConstraintRuleSid int64 `protobuf:"varint,1,opt,name=constraint_rule_sid,json=constraintRuleSid,proto3" json:"constraint_rule_sid,omitempty"`
}

func (x *DeleteConstraintRuleReq) Reset() {
	*x = DeleteConstraintRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConstraintRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConstraintRuleReq) ProtoMessage() {}

func (x *DeleteConstraintRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConstraintRuleReq.ProtoReflect.Descriptor instead.
func (*DeleteConstraintRuleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{107}
}

func (x *DeleteConstraintRuleReq) GetConstraintRuleSid() int64 {
	if x != nil {
		return x.ConstraintRuleSid
	}
	return 0
}

// Response message for the DeleteConstraintRule RPC
type DeleteConstraintRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteConstraintRuleRes) Reset() {
	*x = DeleteConstraintRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConstraintRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConstraintRuleRes) ProtoMessage() {}

func (x *DeleteConstraintRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConstraintRuleRes.ProtoReflect.Descriptor instead.
func (*DeleteConstraintRuleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{108}
}

// Represents Agent activity not related to any SkillProfile or
// handling a call/email/sms/etc.
type NonSkillActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this activity
	NonSkillActivitySid int64 `protobuf:"varint,1,opt,name=non_skill_activity_sid,json=nonSkillActivitySid,proto3" json:"non_skill_activity_sid,omitempty"`
	// Activity name (e.g., 'lunch', 'break', 'meeting', etc.)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Activity description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Datetime that the activity was set to inactive, if not set then the activity is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// Display color for this activity
	// Red value
	Red int32 `protobuf:"varint,5,opt,name=red,proto3" json:"red,omitempty"`
	// Green value
	Green int32 `protobuf:"varint,6,opt,name=green,proto3" json:"green,omitempty"`
	// Blue value
	Blue int32 `protobuf:"varint,7,opt,name=blue,proto3" json:"blue,omitempty"`
	// Transparency value (between 0.0 and 1.0)
	Transparency float32 `protobuf:"fixed32,8,opt,name=transparency,proto3" json:"transparency,omitempty"`
	// The highest parent node on the tree that this activity is associated with.
	InheritedFromEntity *ParentEntity `protobuf:"bytes,9,opt,name=inherited_from_entity,json=inheritedFromEntity,proto3" json:"inherited_from_entity,omitempty"`
}

func (x *NonSkillActivity) Reset() {
	*x = NonSkillActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonSkillActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonSkillActivity) ProtoMessage() {}

func (x *NonSkillActivity) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonSkillActivity.ProtoReflect.Descriptor instead.
func (*NonSkillActivity) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{109}
}

func (x *NonSkillActivity) GetNonSkillActivitySid() int64 {
	if x != nil {
		return x.NonSkillActivitySid
	}
	return 0
}

func (x *NonSkillActivity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NonSkillActivity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NonSkillActivity) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *NonSkillActivity) GetRed() int32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *NonSkillActivity) GetGreen() int32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *NonSkillActivity) GetBlue() int32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

func (x *NonSkillActivity) GetTransparency() float32 {
	if x != nil {
		return x.Transparency
	}
	return 0
}

func (x *NonSkillActivity) GetInheritedFromEntity() *ParentEntity {
	if x != nil {
		return x.InheritedFromEntity
	}
	return nil
}

// Request message for the CreateNonSkillActivity RPC
type CreateNonSkillActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Non skill activity to create, the @non_skill_activity_sid doesn't need to be set since it won't be used.
	NonSkillActivity *NonSkillActivity `protobuf:"bytes,1,opt,name=non_skill_activity,json=nonSkillActivity,proto3" json:"non_skill_activity,omitempty"`
}

func (x *CreateNonSkillActivityReq) Reset() {
	*x = CreateNonSkillActivityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNonSkillActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNonSkillActivityReq) ProtoMessage() {}

func (x *CreateNonSkillActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNonSkillActivityReq.ProtoReflect.Descriptor instead.
func (*CreateNonSkillActivityReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{110}
}

func (x *CreateNonSkillActivityReq) GetNonSkillActivity() *NonSkillActivity {
	if x != nil {
		return x.NonSkillActivity
	}
	return nil
}

// Response message for the CreateNonSkillActivity RPC
type CreateNonSkillActivityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created non skill activity.
	NonSkillActivitySid int64 `protobuf:"varint,1,opt,name=non_skill_activity_sid,json=nonSkillActivitySid,proto3" json:"non_skill_activity_sid,omitempty"`
	// ID of the newly created scheduling activity wrapper for @non_skill_activity.
	SchedulingActivitySid int64 `protobuf:"varint,2,opt,name=scheduling_activity_sid,json=schedulingActivitySid,proto3" json:"scheduling_activity_sid,omitempty"`
}

func (x *CreateNonSkillActivityRes) Reset() {
	*x = CreateNonSkillActivityRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNonSkillActivityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNonSkillActivityRes) ProtoMessage() {}

func (x *CreateNonSkillActivityRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNonSkillActivityRes.ProtoReflect.Descriptor instead.
func (*CreateNonSkillActivityRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{111}
}

func (x *CreateNonSkillActivityRes) GetNonSkillActivitySid() int64 {
	if x != nil {
		return x.NonSkillActivitySid
	}
	return 0
}

func (x *CreateNonSkillActivityRes) GetSchedulingActivitySid() int64 {
	if x != nil {
		return x.SchedulingActivitySid
	}
	return 0
}

// Request message for the UpdateNonSkillActivity RPC
type UpdateNonSkillActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Non skill activity to update.
	NonSkillActivity *NonSkillActivity `protobuf:"bytes,1,opt,name=non_skill_activity,json=nonSkillActivity,proto3" json:"non_skill_activity,omitempty"`
}

func (x *UpdateNonSkillActivityReq) Reset() {
	*x = UpdateNonSkillActivityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNonSkillActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNonSkillActivityReq) ProtoMessage() {}

func (x *UpdateNonSkillActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNonSkillActivityReq.ProtoReflect.Descriptor instead.
func (*UpdateNonSkillActivityReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{112}
}

func (x *UpdateNonSkillActivityReq) GetNonSkillActivity() *NonSkillActivity {
	if x != nil {
		return x.NonSkillActivity
	}
	return nil
}

// Response message for the UpdateNonSkillActivity RPC
type UpdateNonSkillActivityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNonSkillActivityRes) Reset() {
	*x = UpdateNonSkillActivityRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNonSkillActivityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNonSkillActivityRes) ProtoMessage() {}

func (x *UpdateNonSkillActivityRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNonSkillActivityRes.ProtoReflect.Descriptor instead.
func (*UpdateNonSkillActivityRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{113}
}

// Request message for the ListNonSkillActivityAssociations RPC
type ListNonSkillActivityAssociationsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entity to check for relationships with the non skill activities.
	AssociatedEntity *ParentEntity `protobuf:"bytes,1,opt,name=associated_entity,json=associatedEntity,proto3" json:"associated_entity,omitempty"`
	// Type of relationship between non skill activity and the @associated_entity.
	RelationshipType commons.ConfigRelationshipType `protobuf:"varint,2,opt,name=relationship_type,json=relationshipType,proto3,enum=api.commons.ConfigRelationshipType" json:"relationship_type,omitempty"`
}

func (x *ListNonSkillActivityAssociationsReq) Reset() {
	*x = ListNonSkillActivityAssociationsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNonSkillActivityAssociationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNonSkillActivityAssociationsReq) ProtoMessage() {}

func (x *ListNonSkillActivityAssociationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNonSkillActivityAssociationsReq.ProtoReflect.Descriptor instead.
func (*ListNonSkillActivityAssociationsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{114}
}

func (x *ListNonSkillActivityAssociationsReq) GetAssociatedEntity() *ParentEntity {
	if x != nil {
		return x.AssociatedEntity
	}
	return nil
}

func (x *ListNonSkillActivityAssociationsReq) GetRelationshipType() commons.ConfigRelationshipType {
	if x != nil {
		return x.RelationshipType
	}
	return commons.ConfigRelationshipType(0)
}

// Response message for the ListNonSkillActivityAssociations RPC
type ListNonSkillActivityAssociationsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the non skill activities found to have the @relationship_type with the @associated_entity in the request.
	NonSkillActivitySids []int64 `protobuf:"varint,1,rep,packed,name=non_skill_activity_sids,json=nonSkillActivitySids,proto3" json:"non_skill_activity_sids,omitempty"`
}

func (x *ListNonSkillActivityAssociationsRes) Reset() {
	*x = ListNonSkillActivityAssociationsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNonSkillActivityAssociationsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNonSkillActivityAssociationsRes) ProtoMessage() {}

func (x *ListNonSkillActivityAssociationsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNonSkillActivityAssociationsRes.ProtoReflect.Descriptor instead.
func (*ListNonSkillActivityAssociationsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{115}
}

func (x *ListNonSkillActivityAssociationsRes) GetNonSkillActivitySids() []int64 {
	if x != nil {
		return x.NonSkillActivitySids
	}
	return nil
}

// Scheduling activity
type SchedulingActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this scheduling activity.
	SchedulingActivitySid int64 `protobuf:"varint,1,opt,name=scheduling_activity_sid,json=schedulingActivitySid,proto3" json:"scheduling_activity_sid,omitempty"`
	// If false, the @idActivity refers to the id for a non-skill activity, if true then @activity_sid refers to all calls for any skill.
	IsSkillActivity bool `protobuf:"varint,2,opt,name=is_skill_activity,json=isSkillActivity,proto3" json:"is_skill_activity,omitempty"`
	// ID for non-skill activity if @is_skill_activity is false, or for a skill activity if @is_skill_activity is true.
	// This is nil by default, meaning the scheduling_activity refers to a call.
	ActivitySid *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=activity_sid,json=activitySid,proto3" json:"activity_sid,omitempty"`
	// The non skill activity associated with @activity_sid if @is_skill_activity is false.
	MemberNonSkillActivity *NonSkillActivity `protobuf:"bytes,4,opt,name=member_non_skill_activity,json=memberNonSkillActivity,proto3" json:"member_non_skill_activity,omitempty"`
}

func (x *SchedulingActivity) Reset() {
	*x = SchedulingActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulingActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulingActivity) ProtoMessage() {}

func (x *SchedulingActivity) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulingActivity.ProtoReflect.Descriptor instead.
func (*SchedulingActivity) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{116}
}

func (x *SchedulingActivity) GetSchedulingActivitySid() int64 {
	if x != nil {
		return x.SchedulingActivitySid
	}
	return 0
}

func (x *SchedulingActivity) GetIsSkillActivity() bool {
	if x != nil {
		return x.IsSkillActivity
	}
	return false
}

func (x *SchedulingActivity) GetActivitySid() *wrapperspb.Int64Value {
	if x != nil {
		return x.ActivitySid
	}
	return nil
}

func (x *SchedulingActivity) GetMemberNonSkillActivity() *NonSkillActivity {
	if x != nil {
		return x.MemberNonSkillActivity
	}
	return nil
}

// Request message for the ListCandidateSchedulingActivitiesReq RPC
type ListCandidateSchedulingActivitiesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent who the rule will inherit candidate scheduling activities from.
	// May be any node, an agent_group, or shift template.
	// To get candidate scheduling activities for rules belonging to a wfm agent, @parent_of_rule should be the agent group the wfm agent belongs to.
	ParentOfRule *ParentEntity `protobuf:"bytes,1,opt,name=parent_of_rule,json=parentOfRule,proto3" json:"parent_of_rule,omitempty"`
	// ID of the schedule scenario that this activity belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *ListCandidateSchedulingActivitiesReq) Reset() {
	*x = ListCandidateSchedulingActivitiesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCandidateSchedulingActivitiesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCandidateSchedulingActivitiesReq) ProtoMessage() {}

func (x *ListCandidateSchedulingActivitiesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCandidateSchedulingActivitiesReq.ProtoReflect.Descriptor instead.
func (*ListCandidateSchedulingActivitiesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{117}
}

func (x *ListCandidateSchedulingActivitiesReq) GetParentOfRule() *ParentEntity {
	if x != nil {
		return x.ParentOfRule
	}
	return nil
}

func (x *ListCandidateSchedulingActivitiesReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the ListCandidateSchedulingActivitiesRes RPC
type ListCandidateSchedulingActivitiesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulingActivities []*SchedulingActivity `protobuf:"bytes,1,rep,name=scheduling_activities,json=schedulingActivities,proto3" json:"scheduling_activities,omitempty"`
}

func (x *ListCandidateSchedulingActivitiesRes) Reset() {
	*x = ListCandidateSchedulingActivitiesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCandidateSchedulingActivitiesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCandidateSchedulingActivitiesRes) ProtoMessage() {}

func (x *ListCandidateSchedulingActivitiesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCandidateSchedulingActivitiesRes.ProtoReflect.Descriptor instead.
func (*ListCandidateSchedulingActivitiesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{118}
}

func (x *ListCandidateSchedulingActivitiesRes) GetSchedulingActivities() []*SchedulingActivity {
	if x != nil {
		return x.SchedulingActivities
	}
	return nil
}

// Represents a group of agents that have the same parent and other common properties.
type AgentGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this agent group
	AgentGroupSid int64 `protobuf:"varint,1,opt,name=agent_group_sid,json=agentGroupSid,proto3" json:"agent_group_sid,omitempty"`
	// Parent entity of the agent group
	ParentEntity *ParentEntity `protobuf:"bytes,2,opt,name=parent_entity,json=parentEntity,proto3" json:"parent_entity,omitempty"`
	// Agent group name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Agent group description.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Datetime that the agent group was set to inactive, if not set then the agent group is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// ID of the schedule scenario that the agent group belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,6,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// List of constraint rule that apply to this agent group.
	MemberConstraintRules []*ConstraintRule `protobuf:"bytes,7,rep,name=member_constraint_rules,json=memberConstraintRules,proto3" json:"member_constraint_rules,omitempty"`
	// List of WFM agents that are members of this agent group.
	MemberWfmAgents []*WFMAgent `protobuf:"bytes,8,rep,name=member_wfm_agents,json=memberWfmAgents,proto3" json:"member_wfm_agents,omitempty"`
	// List of skill proficiencies associated with this agent group.
	MemberSkillProficiencies []*SkillProficiency `protobuf:"bytes,9,rep,name=member_skill_proficiencies,json=memberSkillProficiencies,proto3" json:"member_skill_proficiencies,omitempty"`
	// List of agent availability patterns associated with this agent group.
	MemberAgentAvailabilityPatterns []*AgentAvailabilityPattern `protobuf:"bytes,10,rep,name=member_agent_availability_patterns,json=memberAgentAvailabilityPatterns,proto3" json:"member_agent_availability_patterns,omitempty"`
}

func (x *AgentGroup) Reset() {
	*x = AgentGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGroup) ProtoMessage() {}

func (x *AgentGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGroup.ProtoReflect.Descriptor instead.
func (*AgentGroup) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{119}
}

func (x *AgentGroup) GetAgentGroupSid() int64 {
	if x != nil {
		return x.AgentGroupSid
	}
	return 0
}

func (x *AgentGroup) GetParentEntity() *ParentEntity {
	if x != nil {
		return x.ParentEntity
	}
	return nil
}

func (x *AgentGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AgentGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AgentGroup) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *AgentGroup) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *AgentGroup) GetMemberConstraintRules() []*ConstraintRule {
	if x != nil {
		return x.MemberConstraintRules
	}
	return nil
}

func (x *AgentGroup) GetMemberWfmAgents() []*WFMAgent {
	if x != nil {
		return x.MemberWfmAgents
	}
	return nil
}

func (x *AgentGroup) GetMemberSkillProficiencies() []*SkillProficiency {
	if x != nil {
		return x.MemberSkillProficiencies
	}
	return nil
}

func (x *AgentGroup) GetMemberAgentAvailabilityPatterns() []*AgentAvailabilityPattern {
	if x != nil {
		return x.MemberAgentAvailabilityPatterns
	}
	return nil
}

// Request message for the CreateAgentGroup RPC
type CreateAgentGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AgentGroup to create, the @agent_group_sid doesn't need to be set since it won't be used.
	AgentGroup *AgentGroup `protobuf:"bytes,1,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *CreateAgentGroupReq) Reset() {
	*x = CreateAgentGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAgentGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentGroupReq) ProtoMessage() {}

func (x *CreateAgentGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentGroupReq.ProtoReflect.Descriptor instead.
func (*CreateAgentGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{120}
}

func (x *CreateAgentGroupReq) GetAgentGroup() *AgentGroup {
	if x != nil {
		return x.AgentGroup
	}
	return nil
}

// Response message for the CreateAgentGroup RPC
type CreateAgentGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created agent group
	AgentGroupSid int64 `protobuf:"varint,1,opt,name=agent_group_sid,json=agentGroupSid,proto3" json:"agent_group_sid,omitempty"`
}

func (x *CreateAgentGroupRes) Reset() {
	*x = CreateAgentGroupRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAgentGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentGroupRes) ProtoMessage() {}

func (x *CreateAgentGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentGroupRes.ProtoReflect.Descriptor instead.
func (*CreateAgentGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{121}
}

func (x *CreateAgentGroupRes) GetAgentGroupSid() int64 {
	if x != nil {
		return x.AgentGroupSid
	}
	return 0
}

// Request message for the UpdateAgentGroup RPC
type UpdateAgentGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AgentGroup to update
	AgentGroup *AgentGroup `protobuf:"bytes,1,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *UpdateAgentGroupReq) Reset() {
	*x = UpdateAgentGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAgentGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentGroupReq) ProtoMessage() {}

func (x *UpdateAgentGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentGroupReq.ProtoReflect.Descriptor instead.
func (*UpdateAgentGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{122}
}

func (x *UpdateAgentGroupReq) GetAgentGroup() *AgentGroup {
	if x != nil {
		return x.AgentGroup
	}
	return nil
}

// Response message for the UpdateAgentGroup RPC
type UpdateAgentGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAgentGroupRes) Reset() {
	*x = UpdateAgentGroupRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAgentGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentGroupRes) ProtoMessage() {}

func (x *UpdateAgentGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentGroupRes.ProtoReflect.Descriptor instead.
func (*UpdateAgentGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{123}
}

// Represents a wfm agent object refering to an agent in the TCN system.
type WFMAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID for this object.
	WfmAgentSid int64 `protobuf:"varint,1,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// Reference to the affiliated tcn agent.
	// If set to nil, that means that this WFM Agent is not assigned to a TCN agent.
	TcnAgentSid *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=tcn_agent_sid,json=tcnAgentSid,proto3" json:"tcn_agent_sid,omitempty"`
	// Name for WFM Agent.
	// If it's for a TCN agent this value will always match that TCN agent's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Null by default, indicates date which agent was removed or deactivated.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// The constraint rules associated with @wfm_agent_sid.
	MemberConstraintRules []*ConstraintRule `protobuf:"bytes,5,rep,name=member_constraint_rules,json=memberConstraintRules,proto3" json:"member_constraint_rules,omitempty"`
	// List of skill proficiencies associated with @wfm_agent_sid.
	MemberSkillProficiencies []*SkillProficiency `protobuf:"bytes,6,rep,name=member_skill_proficiencies,json=memberSkillProficiencies,proto3" json:"member_skill_proficiencies,omitempty"`
	// List of agent availability patterns associated with this wfm agent.
	MemberAgentAvailabilityPatterns []*AgentAvailabilityPattern `protobuf:"bytes,7,rep,name=member_agent_availability_patterns,json=memberAgentAvailabilityPatterns,proto3" json:"member_agent_availability_patterns,omitempty"`
	// Date of creation of the agent.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// If this WFM agent is for a TCN agent, it indicates whether or not this TCN Agent is enabled or not.
	// Field is read only and cannot be modified.
	TcnAgentIsEnabled bool `protobuf:"varint,9,opt,name=tcn_agent_is_enabled,json=tcnAgentIsEnabled,proto3" json:"tcn_agent_is_enabled,omitempty"`
}

func (x *WFMAgent) Reset() {
	*x = WFMAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WFMAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WFMAgent) ProtoMessage() {}

func (x *WFMAgent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WFMAgent.ProtoReflect.Descriptor instead.
func (*WFMAgent) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{124}
}

func (x *WFMAgent) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

func (x *WFMAgent) GetTcnAgentSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.TcnAgentSid
	}
	return nil
}

func (x *WFMAgent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WFMAgent) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *WFMAgent) GetMemberConstraintRules() []*ConstraintRule {
	if x != nil {
		return x.MemberConstraintRules
	}
	return nil
}

func (x *WFMAgent) GetMemberSkillProficiencies() []*SkillProficiency {
	if x != nil {
		return x.MemberSkillProficiencies
	}
	return nil
}

func (x *WFMAgent) GetMemberAgentAvailabilityPatterns() []*AgentAvailabilityPattern {
	if x != nil {
		return x.MemberAgentAvailabilityPatterns
	}
	return nil
}

func (x *WFMAgent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WFMAgent) GetTcnAgentIsEnabled() bool {
	if x != nil {
		return x.TcnAgentIsEnabled
	}
	return false
}

// Request message for the UpdateWFMAgent RPC
type UpdateWFMAgentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Wfm agent to update.
	WfmAgent *WFMAgent `protobuf:"bytes,1,opt,name=wfm_agent,json=wfmAgent,proto3" json:"wfm_agent,omitempty"`
}

func (x *UpdateWFMAgentReq) Reset() {
	*x = UpdateWFMAgentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWFMAgentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWFMAgentReq) ProtoMessage() {}

func (x *UpdateWFMAgentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWFMAgentReq.ProtoReflect.Descriptor instead.
func (*UpdateWFMAgentReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{125}
}

func (x *UpdateWFMAgentReq) GetWfmAgent() *WFMAgent {
	if x != nil {
		return x.WfmAgent
	}
	return nil
}

// Response message for the UpdateWFMAgent RPC
type UpdateWFMAgentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateWFMAgentRes) Reset() {
	*x = UpdateWFMAgentRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWFMAgentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWFMAgentRes) ProtoMessage() {}

func (x *UpdateWFMAgentRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWFMAgentRes.ProtoReflect.Descriptor instead.
func (*UpdateWFMAgentRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{126}
}

// Request message for the ListAllWFMAgents RPC
type ListAllWFMAgentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates if the result should include the inactive wfm agents.
	IncludeInactive bool `protobuf:"varint,1,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	// Indicates if the resulting WFM agents should include skill proficiencies.
	IncludeSkillProficiencies bool `protobuf:"varint,2,opt,name=include_skill_proficiencies,json=includeSkillProficiencies,proto3" json:"include_skill_proficiencies,omitempty"`
	// Indicates if the resulting WFM agents should include the groups that they are members of.
	IncludeAgentGroups bool `protobuf:"varint,3,opt,name=include_agent_groups,json=includeAgentGroups,proto3" json:"include_agent_groups,omitempty"`
}

func (x *ListAllWFMAgentsReq) Reset() {
	*x = ListAllWFMAgentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllWFMAgentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllWFMAgentsReq) ProtoMessage() {}

func (x *ListAllWFMAgentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllWFMAgentsReq.ProtoReflect.Descriptor instead.
func (*ListAllWFMAgentsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{127}
}

func (x *ListAllWFMAgentsReq) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *ListAllWFMAgentsReq) GetIncludeSkillProficiencies() bool {
	if x != nil {
		return x.IncludeSkillProficiencies
	}
	return false
}

func (x *ListAllWFMAgentsReq) GetIncludeAgentGroups() bool {
	if x != nil {
		return x.IncludeAgentGroups
	}
	return false
}

// Response message for the ListAllWFMAgents RPC
type ListAllWFMAgentsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all wfm agents that belong to the org sending the request.
	WfmAgents []*WFMAgent `protobuf:"bytes,1,rep,name=wfm_agents,json=wfmAgents,proto3" json:"wfm_agents,omitempty"`
	// Correlating list of agent groups that the agent with the same index is a member of.
	// Agents with no agent groups will index to an empty slice.
	AgentGroupsByAgent []*ListAllWFMAgentsRes_AgentGroupsByAgent `protobuf:"bytes,2,rep,name=agent_groups_by_agent,json=agentGroupsByAgent,proto3" json:"agent_groups_by_agent,omitempty"`
}

func (x *ListAllWFMAgentsRes) Reset() {
	*x = ListAllWFMAgentsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllWFMAgentsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllWFMAgentsRes) ProtoMessage() {}

func (x *ListAllWFMAgentsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllWFMAgentsRes.ProtoReflect.Descriptor instead.
func (*ListAllWFMAgentsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{128}
}

func (x *ListAllWFMAgentsRes) GetWfmAgents() []*WFMAgent {
	if x != nil {
		return x.WfmAgents
	}
	return nil
}

func (x *ListAllWFMAgentsRes) GetAgentGroupsByAgent() []*ListAllWFMAgentsRes_AgentGroupsByAgent {
	if x != nil {
		return x.AgentGroupsByAgent
	}
	return nil
}

// Request message for the ListCandidateWFMAgents RPC
type ListCandidateWFMAgentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the agent group to find candidate wfm agents for.
	AgentGroupSid int64 `protobuf:"varint,1,opt,name=agent_group_sid,json=agentGroupSid,proto3" json:"agent_group_sid,omitempty"`
}

func (x *ListCandidateWFMAgentsReq) Reset() {
	*x = ListCandidateWFMAgentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCandidateWFMAgentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCandidateWFMAgentsReq) ProtoMessage() {}

func (x *ListCandidateWFMAgentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCandidateWFMAgentsReq.ProtoReflect.Descriptor instead.
func (*ListCandidateWFMAgentsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{129}
}

func (x *ListCandidateWFMAgentsReq) GetAgentGroupSid() int64 {
	if x != nil {
		return x.AgentGroupSid
	}
	return 0
}

// Response message for the ListCandidateWFMAgents RPC
type ListCandidateWFMAgentsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all wfm agents who are candidates for the given @agent_group_sid.
	WfmAgents []*WFMAgent `protobuf:"bytes,1,rep,name=wfm_agents,json=wfmAgents,proto3" json:"wfm_agents,omitempty"`
}

func (x *ListCandidateWFMAgentsRes) Reset() {
	*x = ListCandidateWFMAgentsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCandidateWFMAgentsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCandidateWFMAgentsRes) ProtoMessage() {}

func (x *ListCandidateWFMAgentsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCandidateWFMAgentsRes.ProtoReflect.Descriptor instead.
func (*ListCandidateWFMAgentsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{130}
}

func (x *ListCandidateWFMAgentsRes) GetWfmAgents() []*WFMAgent {
	if x != nil {
		return x.WfmAgents
	}
	return nil
}

// Request message for the ListUngroupedWFMAgents RPC
type ListUngroupedWFMAgentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional, ID of the schedule scenario of agent groups to check for unnasigned wfm agents.
	// If not set, it will check for unnasigned agents for all agent groups.
	ScheduleScenarioSid int64 `protobuf:"varint,1,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Ungrouped agents created after this date will be returned.
	CreatedAfterDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_after_datetime,json=createdAfterDatetime,proto3" json:"created_after_datetime,omitempty"`
	// Indicates if the resulting WFM agents should include skill proficiencies.
	IncludeSkillProficiencies bool `protobuf:"varint,3,opt,name=include_skill_proficiencies,json=includeSkillProficiencies,proto3" json:"include_skill_proficiencies,omitempty"`
}

func (x *ListUngroupedWFMAgentsReq) Reset() {
	*x = ListUngroupedWFMAgentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUngroupedWFMAgentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUngroupedWFMAgentsReq) ProtoMessage() {}

func (x *ListUngroupedWFMAgentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUngroupedWFMAgentsReq.ProtoReflect.Descriptor instead.
func (*ListUngroupedWFMAgentsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{131}
}

func (x *ListUngroupedWFMAgentsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *ListUngroupedWFMAgentsReq) GetCreatedAfterDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAfterDatetime
	}
	return nil
}

func (x *ListUngroupedWFMAgentsReq) GetIncludeSkillProficiencies() bool {
	if x != nil {
		return x.IncludeSkillProficiencies
	}
	return false
}

// Response message for the ListUngroupedWFMAgents RPC
type ListUngroupedWFMAgentsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all unnasigned wfm agents for the given @schedule_scenario_sid.
	WfmAgents []*WFMAgent `protobuf:"bytes,1,rep,name=wfm_agents,json=wfmAgents,proto3" json:"wfm_agents,omitempty"`
}

func (x *ListUngroupedWFMAgentsRes) Reset() {
	*x = ListUngroupedWFMAgentsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUngroupedWFMAgentsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUngroupedWFMAgentsRes) ProtoMessage() {}

func (x *ListUngroupedWFMAgentsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUngroupedWFMAgentsRes.ProtoReflect.Descriptor instead.
func (*ListUngroupedWFMAgentsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{132}
}

func (x *ListUngroupedWFMAgentsRes) GetWfmAgents() []*WFMAgent {
	if x != nil {
		return x.WfmAgents
	}
	return nil
}

// Request message for the ListWFMAgentsAssociatedWithAgentGroup RPC
type ListWFMAgentsAssociatedWithAgentGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the agent group that the wfm agents have a membership with.
	AgentGroupSid int64 `protobuf:"varint,1,opt,name=agent_group_sid,json=agentGroupSid,proto3" json:"agent_group_sid,omitempty"`
}

func (x *ListWFMAgentsAssociatedWithAgentGroupReq) Reset() {
	*x = ListWFMAgentsAssociatedWithAgentGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWFMAgentsAssociatedWithAgentGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWFMAgentsAssociatedWithAgentGroupReq) ProtoMessage() {}

func (x *ListWFMAgentsAssociatedWithAgentGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWFMAgentsAssociatedWithAgentGroupReq.ProtoReflect.Descriptor instead.
func (*ListWFMAgentsAssociatedWithAgentGroupReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{133}
}

func (x *ListWFMAgentsAssociatedWithAgentGroupReq) GetAgentGroupSid() int64 {
	if x != nil {
		return x.AgentGroupSid
	}
	return 0
}

// Response message for the ListWFMAgentsAssociatedWithAgentGroup RPC
type ListWFMAgentsAssociatedWithAgentGroupRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agents found to have a relationship with the @agent_group_sid in the request.
	WfmAgentSids []int64 `protobuf:"varint,1,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
}

func (x *ListWFMAgentsAssociatedWithAgentGroupRes) Reset() {
	*x = ListWFMAgentsAssociatedWithAgentGroupRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWFMAgentsAssociatedWithAgentGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWFMAgentsAssociatedWithAgentGroupRes) ProtoMessage() {}

func (x *ListWFMAgentsAssociatedWithAgentGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWFMAgentsAssociatedWithAgentGroupRes.ProtoReflect.Descriptor instead.
func (*ListWFMAgentsAssociatedWithAgentGroupRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{134}
}

func (x *ListWFMAgentsAssociatedWithAgentGroupRes) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

// Request message for the BuildAgentDiagnostics RPC
type BuildAgentDiagnosticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agent to build diagnostics for.
	WfmAgentSid int64 `protobuf:"varint,1,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// ID of the schedule scenario that the wfm agent belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// ID of the agent_group to build diagnostics for.
	// If this field is set, the diagnostics will be built for every wfm agent in that agent group, and the @wfm-agent_sid field in this req will be ignored.
	AgentGroupSid int64 `protobuf:"varint,3,opt,name=agent_group_sid,json=agentGroupSid,proto3" json:"agent_group_sid,omitempty"`
}

func (x *BuildAgentDiagnosticsReq) Reset() {
	*x = BuildAgentDiagnosticsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildAgentDiagnosticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildAgentDiagnosticsReq) ProtoMessage() {}

func (x *BuildAgentDiagnosticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildAgentDiagnosticsReq.ProtoReflect.Descriptor instead.
func (*BuildAgentDiagnosticsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{135}
}

func (x *BuildAgentDiagnosticsReq) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

func (x *BuildAgentDiagnosticsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *BuildAgentDiagnosticsReq) GetAgentGroupSid() int64 {
	if x != nil {
		return x.AgentGroupSid
	}
	return 0
}

// Response message for the BuildAgentDiagnostics RPC
type BuildAgentDiagnosticsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Diagnostics built for the given req.
	// Will only contain one element if build for a single @wfm_agent_sid.
	// Will contain one element for each WFM agent if build for an @agent_group_sid.a
	Diagnostics []*Diagnostics `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *BuildAgentDiagnosticsRes) Reset() {
	*x = BuildAgentDiagnosticsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildAgentDiagnosticsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildAgentDiagnosticsRes) ProtoMessage() {}

func (x *BuildAgentDiagnosticsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildAgentDiagnosticsRes.ProtoReflect.Descriptor instead.
func (*BuildAgentDiagnosticsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{136}
}

func (x *BuildAgentDiagnosticsRes) GetDiagnostics() []*Diagnostics {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the CreateWFMAgentMemberships RPC
type CreateWFMAgentMembershipsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agents to create the association of.
	WfmAgentSids []int64 `protobuf:"varint,1,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
	// ID of the agent group to that the agents associate with.
	AgentGroupSid int64 `protobuf:"varint,2,opt,name=agent_group_sid,json=agentGroupSid,proto3" json:"agent_group_sid,omitempty"`
	// ID of the schedule scenario that the sids belong to.
	ScheduleScenarioSid int64 `protobuf:"varint,3,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *CreateWFMAgentMembershipsReq) Reset() {
	*x = CreateWFMAgentMembershipsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWFMAgentMembershipsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWFMAgentMembershipsReq) ProtoMessage() {}

func (x *CreateWFMAgentMembershipsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWFMAgentMembershipsReq.ProtoReflect.Descriptor instead.
func (*CreateWFMAgentMembershipsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{137}
}

func (x *CreateWFMAgentMembershipsReq) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

func (x *CreateWFMAgentMembershipsReq) GetAgentGroupSid() int64 {
	if x != nil {
		return x.AgentGroupSid
	}
	return 0
}

func (x *CreateWFMAgentMembershipsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for CreateWFMAgentMemberships RPC
type CreateWFMAgentMembershipsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateWFMAgentMembershipsRes) Reset() {
	*x = CreateWFMAgentMembershipsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWFMAgentMembershipsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWFMAgentMembershipsRes) ProtoMessage() {}

func (x *CreateWFMAgentMembershipsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWFMAgentMembershipsRes.ProtoReflect.Descriptor instead.
func (*CreateWFMAgentMembershipsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{138}
}

// Request message for the DeleteWFMAgentMemberships RPC
type DeleteWFMAgentMembershipsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agents to delete the association of.
	WfmAgentSids []int64 `protobuf:"varint,1,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
	// ID of the agent group to that the agents associate with.
	AgentGroupSid int64 `protobuf:"varint,2,opt,name=agent_group_sid,json=agentGroupSid,proto3" json:"agent_group_sid,omitempty"`
}

func (x *DeleteWFMAgentMembershipsReq) Reset() {
	*x = DeleteWFMAgentMembershipsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWFMAgentMembershipsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWFMAgentMembershipsReq) ProtoMessage() {}

func (x *DeleteWFMAgentMembershipsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWFMAgentMembershipsReq.ProtoReflect.Descriptor instead.
func (*DeleteWFMAgentMembershipsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{139}
}

func (x *DeleteWFMAgentMembershipsReq) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

func (x *DeleteWFMAgentMembershipsReq) GetAgentGroupSid() int64 {
	if x != nil {
		return x.AgentGroupSid
	}
	return 0
}

// Response message for DeleteWFMAgentMemberships RPC
type DeleteWFMAgentMembershipsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteWFMAgentMembershipsRes) Reset() {
	*x = DeleteWFMAgentMembershipsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWFMAgentMembershipsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWFMAgentMembershipsRes) ProtoMessage() {}

func (x *DeleteWFMAgentMembershipsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWFMAgentMembershipsRes.ProtoReflect.Descriptor instead.
func (*DeleteWFMAgentMembershipsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{140}
}

// Request message for the DeleteWFMAgentsMemberships RPC
type DeleteWFMAgentsMembershipsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agents to delete the association of.
	WfmAgentSids []int64 `protobuf:"varint,1,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
	// ID of the agent groups that the agents associate with.
	AgentGroupSids []int64 `protobuf:"varint,2,rep,packed,name=agent_group_sids,json=agentGroupSids,proto3" json:"agent_group_sids,omitempty"`
}

func (x *DeleteWFMAgentsMembershipsReq) Reset() {
	*x = DeleteWFMAgentsMembershipsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWFMAgentsMembershipsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWFMAgentsMembershipsReq) ProtoMessage() {}

func (x *DeleteWFMAgentsMembershipsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWFMAgentsMembershipsReq.ProtoReflect.Descriptor instead.
func (*DeleteWFMAgentsMembershipsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{141}
}

func (x *DeleteWFMAgentsMembershipsReq) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

func (x *DeleteWFMAgentsMembershipsReq) GetAgentGroupSids() []int64 {
	if x != nil {
		return x.AgentGroupSids
	}
	return nil
}

// Response message for DeleteWFMAgentsMemberships RPC
type DeleteWFMAgentsMembershipsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteWFMAgentsMembershipsRes) Reset() {
	*x = DeleteWFMAgentsMembershipsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWFMAgentsMembershipsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWFMAgentsMembershipsRes) ProtoMessage() {}

func (x *DeleteWFMAgentsMembershipsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWFMAgentsMembershipsRes.ProtoReflect.Descriptor instead.
func (*DeleteWFMAgentsMembershipsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{142}
}

// DOW Placement
type DOWPlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minute in the day for the placement to start.
	StartMinute int32 `protobuf:"varint,1,opt,name=start_minute,json=startMinute,proto3" json:"start_minute,omitempty"`
	// Minute in the day for the placement to end.
	EndMinute int32 `protobuf:"varint,2,opt,name=end_minute,json=endMinute,proto3" json:"end_minute,omitempty"`
	// The type of placement.
	PlacementType commons.DOWPlacementType `protobuf:"varint,3,opt,name=placement_type,json=placementType,proto3,enum=api.commons.DOWPlacementType" json:"placement_type,omitempty"`
	// The day of the week that the placement belongs to.
	// Each week always starts on Sunday.
	DayOfWeek commons.DayOfWeek `protobuf:"varint,4,opt,name=day_of_week,json=dayOfWeek,proto3,enum=api.commons.DayOfWeek" json:"day_of_week,omitempty"`
	// The week number, specifying which week of the template the placement belongs to.
	// The first week should be set to 0.
	WeekNumber int32 `protobuf:"varint,5,opt,name=week_number,json=weekNumber,proto3" json:"week_number,omitempty"`
}

func (x *DOWPlacement) Reset() {
	*x = DOWPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DOWPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DOWPlacement) ProtoMessage() {}

func (x *DOWPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DOWPlacement.ProtoReflect.Descriptor instead.
func (*DOWPlacement) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{143}
}

func (x *DOWPlacement) GetStartMinute() int32 {
	if x != nil {
		return x.StartMinute
	}
	return 0
}

func (x *DOWPlacement) GetEndMinute() int32 {
	if x != nil {
		return x.EndMinute
	}
	return 0
}

func (x *DOWPlacement) GetPlacementType() commons.DOWPlacementType {
	if x != nil {
		return x.PlacementType
	}
	return commons.DOWPlacementType(0)
}

func (x *DOWPlacement) GetDayOfWeek() commons.DayOfWeek {
	if x != nil {
		return x.DayOfWeek
	}
	return commons.DayOfWeek(0)
}

func (x *DOWPlacement) GetWeekNumber() int32 {
	if x != nil {
		return x.WeekNumber
	}
	return 0
}

// Shift Template
type ShiftTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this shift template.
	ShiftTemplateSid int64 `protobuf:"varint,1,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
	// Parent node id -- parent will only be a program nodes
	ProgramNodeSid int64 `protobuf:"varint,2,opt,name=program_node_sid,json=programNodeSid,proto3" json:"program_node_sid,omitempty"`
	// Template name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Template description
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Datetime that the template was set to inactive, if not set then the template is currently active.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// Type of Shift Template (true=tour shift, false=dynamic shift)
	IsTourshift bool `protobuf:"varint,6,opt,name=is_tourshift,json=isTourshift,proto3" json:"is_tourshift,omitempty"`
	// Min shift width (minutes)
	MinShiftWidth int32 `protobuf:"varint,7,opt,name=min_shift_width,json=minShiftWidth,proto3" json:"min_shift_width,omitempty"`
	// Max shift width (minutes)
	MaxShiftWidth int32 `protobuf:"varint,8,opt,name=max_shift_width,json=maxShiftWidth,proto3" json:"max_shift_width,omitempty"`
	// Min number of agent shifts for shift template
	MinAgents int32 `protobuf:"varint,9,opt,name=min_agents,json=minAgents,proto3" json:"min_agents,omitempty"`
	// Max number of agent shifts for shift template
	MaxAgents int32 `protobuf:"varint,10,opt,name=max_agents,json=maxAgents,proto3" json:"max_agents,omitempty"`
	// Intervals upon which shifts may start (minutes)
	ShiftStartBoundaryMinutes int32 `protobuf:"varint,11,opt,name=shift_start_boundary_minutes,json=shiftStartBoundaryMinutes,proto3" json:"shift_start_boundary_minutes,omitempty"`
	// Whether or not shifts in this shift template must start at the same time each day of the week
	SameTimeEach_DOW bool `protobuf:"varint,12,opt,name=same_time_each_DOW,json=sameTimeEachDOW,proto3" json:"same_time_each_DOW,omitempty"`
	// Whether or not all of an Agent's shifts in this shift template will be the same length
	SameLengthPerAgent bool `protobuf:"varint,13,opt,name=same_length_per_agent,json=sameLengthPerAgent,proto3" json:"same_length_per_agent,omitempty"`
	// ID of the schedule scenario that the shift template belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,14,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// The placement rules associated with @shift_template_sid.
	MemberPlacementRules []*PlacementRule `protobuf:"bytes,15,rep,name=member_placement_rules,json=memberPlacementRules,proto3" json:"member_placement_rules,omitempty"`
	// The DOW_placements set the placement days for the shift template.
	// The length of the list must be divisible by seven to represent days of the week.
	// May include more sets of seven days to represent another sequential week (ie, 21 placements for 3 weeks).
	// The DOWPlacements represents sequential days of the week, always starting on Sunday.
	DOWPlacements []*DOWPlacement `protobuf:"bytes,16,rep,name=DOW_placements,json=DOWPlacements,proto3" json:"DOW_placements,omitempty"`
}

func (x *ShiftTemplate) Reset() {
	*x = ShiftTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiftTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftTemplate) ProtoMessage() {}

func (x *ShiftTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftTemplate.ProtoReflect.Descriptor instead.
func (*ShiftTemplate) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{144}
}

func (x *ShiftTemplate) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

func (x *ShiftTemplate) GetProgramNodeSid() int64 {
	if x != nil {
		return x.ProgramNodeSid
	}
	return 0
}

func (x *ShiftTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShiftTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ShiftTemplate) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *ShiftTemplate) GetIsTourshift() bool {
	if x != nil {
		return x.IsTourshift
	}
	return false
}

func (x *ShiftTemplate) GetMinShiftWidth() int32 {
	if x != nil {
		return x.MinShiftWidth
	}
	return 0
}

func (x *ShiftTemplate) GetMaxShiftWidth() int32 {
	if x != nil {
		return x.MaxShiftWidth
	}
	return 0
}

func (x *ShiftTemplate) GetMinAgents() int32 {
	if x != nil {
		return x.MinAgents
	}
	return 0
}

func (x *ShiftTemplate) GetMaxAgents() int32 {
	if x != nil {
		return x.MaxAgents
	}
	return 0
}

func (x *ShiftTemplate) GetShiftStartBoundaryMinutes() int32 {
	if x != nil {
		return x.ShiftStartBoundaryMinutes
	}
	return 0
}

func (x *ShiftTemplate) GetSameTimeEach_DOW() bool {
	if x != nil {
		return x.SameTimeEach_DOW
	}
	return false
}

func (x *ShiftTemplate) GetSameLengthPerAgent() bool {
	if x != nil {
		return x.SameLengthPerAgent
	}
	return false
}

func (x *ShiftTemplate) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *ShiftTemplate) GetMemberPlacementRules() []*PlacementRule {
	if x != nil {
		return x.MemberPlacementRules
	}
	return nil
}

func (x *ShiftTemplate) GetDOWPlacements() []*DOWPlacement {
	if x != nil {
		return x.DOWPlacements
	}
	return nil
}

// Request message for the CreateShiftTemplate RPC
type CreateShiftTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shift template to create, the @shift_template_sid doesn't need to be set since it won't be used
	ShiftTemplate *ShiftTemplate `protobuf:"bytes,1,opt,name=shift_template,json=shiftTemplate,proto3" json:"shift_template,omitempty"`
}

func (x *CreateShiftTemplateReq) Reset() {
	*x = CreateShiftTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShiftTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftTemplateReq) ProtoMessage() {}

func (x *CreateShiftTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateShiftTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{145}
}

func (x *CreateShiftTemplateReq) GetShiftTemplate() *ShiftTemplate {
	if x != nil {
		return x.ShiftTemplate
	}
	return nil
}

// Response message for the CreateShiftTemplate RPC
type CreateShiftTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created shift template
	ShiftTemplateSid int64 `protobuf:"varint,1,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
}

func (x *CreateShiftTemplateRes) Reset() {
	*x = CreateShiftTemplateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShiftTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftTemplateRes) ProtoMessage() {}

func (x *CreateShiftTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftTemplateRes.ProtoReflect.Descriptor instead.
func (*CreateShiftTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{146}
}

func (x *CreateShiftTemplateRes) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

// Request message for the UpdateShiftTemplate RPC
type UpdateShiftTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shift template to update
	ShiftTemplate *ShiftTemplate `protobuf:"bytes,1,opt,name=shift_template,json=shiftTemplate,proto3" json:"shift_template,omitempty"`
}

func (x *UpdateShiftTemplateReq) Reset() {
	*x = UpdateShiftTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShiftTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShiftTemplateReq) ProtoMessage() {}

func (x *UpdateShiftTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShiftTemplateReq.ProtoReflect.Descriptor instead.
func (*UpdateShiftTemplateReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{147}
}

func (x *UpdateShiftTemplateReq) GetShiftTemplate() *ShiftTemplate {
	if x != nil {
		return x.ShiftTemplate
	}
	return nil
}

// Response message for the UpdateShiftTemplate RPC
type UpdateShiftTemplateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateShiftTemplateRes) Reset() {
	*x = UpdateShiftTemplateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShiftTemplateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShiftTemplateRes) ProtoMessage() {}

func (x *UpdateShiftTemplateRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShiftTemplateRes.ProtoReflect.Descriptor instead.
func (*UpdateShiftTemplateRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{148}
}

// Request message for the ListShiftTemplatesBySids RPC
type ListShiftTemplatesBySidsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the shift templates to list.
	ShiftTemplateSids []int64 `protobuf:"varint,1,rep,packed,name=shift_template_sids,json=shiftTemplateSids,proto3" json:"shift_template_sids,omitempty"`
	// Indicates whether the @shift_templates in the response should include member placement rules.
	IncludePlacementRules bool `protobuf:"varint,2,opt,name=include_placement_rules,json=includePlacementRules,proto3" json:"include_placement_rules,omitempty"`
}

func (x *ListShiftTemplatesBySidsReq) Reset() {
	*x = ListShiftTemplatesBySidsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShiftTemplatesBySidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftTemplatesBySidsReq) ProtoMessage() {}

func (x *ListShiftTemplatesBySidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftTemplatesBySidsReq.ProtoReflect.Descriptor instead.
func (*ListShiftTemplatesBySidsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{149}
}

func (x *ListShiftTemplatesBySidsReq) GetShiftTemplateSids() []int64 {
	if x != nil {
		return x.ShiftTemplateSids
	}
	return nil
}

func (x *ListShiftTemplatesBySidsReq) GetIncludePlacementRules() bool {
	if x != nil {
		return x.IncludePlacementRules
	}
	return false
}

// Response message for the ListShiftTemplatesBySids RPC
type ListShiftTemplatesBySidsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested shift templates.
	ShiftTemplates []*ShiftTemplate `protobuf:"bytes,1,rep,name=shift_templates,json=shiftTemplates,proto3" json:"shift_templates,omitempty"`
}

func (x *ListShiftTemplatesBySidsRes) Reset() {
	*x = ListShiftTemplatesBySidsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShiftTemplatesBySidsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftTemplatesBySidsRes) ProtoMessage() {}

func (x *ListShiftTemplatesBySidsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftTemplatesBySidsRes.ProtoReflect.Descriptor instead.
func (*ListShiftTemplatesBySidsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{150}
}

func (x *ListShiftTemplatesBySidsRes) GetShiftTemplates() []*ShiftTemplate {
	if x != nil {
		return x.ShiftTemplates
	}
	return nil
}

// Request message for BuildShiftTemplateDiagnostics RPC
type BuildShiftTemplateDiagnosticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the shift template to build diagnostics for.
	ShiftTemplateSid int64 `protobuf:"varint,1,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
	// ID of the schedule scenario that the shift template belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *BuildShiftTemplateDiagnosticsReq) Reset() {
	*x = BuildShiftTemplateDiagnosticsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildShiftTemplateDiagnosticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildShiftTemplateDiagnosticsReq) ProtoMessage() {}

func (x *BuildShiftTemplateDiagnosticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildShiftTemplateDiagnosticsReq.ProtoReflect.Descriptor instead.
func (*BuildShiftTemplateDiagnosticsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{151}
}

func (x *BuildShiftTemplateDiagnosticsReq) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

func (x *BuildShiftTemplateDiagnosticsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for BuildShiftTemplateDiagnostics RPC
type BuildShiftTemplateDiagnosticsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Diagnostic reports for the shift template associated with @shift_template_sid.
	Diagnostics []*Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *BuildShiftTemplateDiagnosticsRes) Reset() {
	*x = BuildShiftTemplateDiagnosticsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildShiftTemplateDiagnosticsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildShiftTemplateDiagnosticsRes) ProtoMessage() {}

func (x *BuildShiftTemplateDiagnosticsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildShiftTemplateDiagnosticsRes.ProtoReflect.Descriptor instead.
func (*BuildShiftTemplateDiagnosticsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{152}
}

func (x *BuildShiftTemplateDiagnosticsRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Represents rules that describe how shifts are placed in a schedule
type PlacementRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this placement rule
	PlacementRuleSid int64 `protobuf:"varint,1,opt,name=placement_rule_sid,json=placementRuleSid,proto3" json:"placement_rule_sid,omitempty"`
	// ID of the parent shift this rule is associated with
	ShiftTemplateSid int64 `protobuf:"varint,2,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
	// Ordinal that indicates order of rule within ShiftTemplate (1 = first, 2 = second, etc.)
	ActivityOrder int32 `protobuf:"varint,3,opt,name=activity_order,json=activityOrder,proto3" json:"activity_order,omitempty"`
	// Minimum activity length in minutes
	MinDurationMinutes int32 `protobuf:"varint,4,opt,name=min_duration_minutes,json=minDurationMinutes,proto3" json:"min_duration_minutes,omitempty"`
	// Maximum activity length in minutes
	MaxDurationMinutes int32 `protobuf:"varint,5,opt,name=max_duration_minutes,json=maxDurationMinutes,proto3" json:"max_duration_minutes,omitempty"`
	// ID of the scheduling activity this rule is associated with
	SchedulingActivitySid int64 `protobuf:"varint,6,opt,name=scheduling_activity_sid,json=schedulingActivitySid,proto3" json:"scheduling_activity_sid,omitempty"`
	// ID of the schedule scenario that the placement rule belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,7,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// The scheduling activity associated with the @scheduling_activity_sid
	MemberSchedulingActivity *SchedulingActivity `protobuf:"bytes,8,opt,name=member_scheduling_activity,json=memberSchedulingActivity,proto3" json:"member_scheduling_activity,omitempty"`
}

func (x *PlacementRule) Reset() {
	*x = PlacementRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementRule) ProtoMessage() {}

func (x *PlacementRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementRule.ProtoReflect.Descriptor instead.
func (*PlacementRule) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{153}
}

func (x *PlacementRule) GetPlacementRuleSid() int64 {
	if x != nil {
		return x.PlacementRuleSid
	}
	return 0
}

func (x *PlacementRule) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

func (x *PlacementRule) GetActivityOrder() int32 {
	if x != nil {
		return x.ActivityOrder
	}
	return 0
}

func (x *PlacementRule) GetMinDurationMinutes() int32 {
	if x != nil {
		return x.MinDurationMinutes
	}
	return 0
}

func (x *PlacementRule) GetMaxDurationMinutes() int32 {
	if x != nil {
		return x.MaxDurationMinutes
	}
	return 0
}

func (x *PlacementRule) GetSchedulingActivitySid() int64 {
	if x != nil {
		return x.SchedulingActivitySid
	}
	return 0
}

func (x *PlacementRule) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *PlacementRule) GetMemberSchedulingActivity() *SchedulingActivity {
	if x != nil {
		return x.MemberSchedulingActivity
	}
	return nil
}

// Request message for the CreatePlacementRule RPC
type CreatePlacementRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Placement rule to create, the @placement_rule_sid doesn't need to be set since it won't be used
	PlacementRule *PlacementRule `protobuf:"bytes,1,opt,name=placement_rule,json=placementRule,proto3" json:"placement_rule,omitempty"`
}

func (x *CreatePlacementRuleReq) Reset() {
	*x = CreatePlacementRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlacementRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlacementRuleReq) ProtoMessage() {}

func (x *CreatePlacementRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlacementRuleReq.ProtoReflect.Descriptor instead.
func (*CreatePlacementRuleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{154}
}

func (x *CreatePlacementRuleReq) GetPlacementRule() *PlacementRule {
	if x != nil {
		return x.PlacementRule
	}
	return nil
}

// Response message for the CreatePlacementRule RPC
type CreatePlacementRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created placement rule
	PlacementRuleSid int64 `protobuf:"varint,1,opt,name=placement_rule_sid,json=placementRuleSid,proto3" json:"placement_rule_sid,omitempty"`
}

func (x *CreatePlacementRuleRes) Reset() {
	*x = CreatePlacementRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlacementRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlacementRuleRes) ProtoMessage() {}

func (x *CreatePlacementRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlacementRuleRes.ProtoReflect.Descriptor instead.
func (*CreatePlacementRuleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{155}
}

func (x *CreatePlacementRuleRes) GetPlacementRuleSid() int64 {
	if x != nil {
		return x.PlacementRuleSid
	}
	return 0
}

// Request message for the UpdatePlacementRule RPC
type UpdatePlacementRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Placement rule to update.
	PlacementRule *PlacementRule `protobuf:"bytes,1,opt,name=placement_rule,json=placementRule,proto3" json:"placement_rule,omitempty"`
}

func (x *UpdatePlacementRuleReq) Reset() {
	*x = UpdatePlacementRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlacementRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlacementRuleReq) ProtoMessage() {}

func (x *UpdatePlacementRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlacementRuleReq.ProtoReflect.Descriptor instead.
func (*UpdatePlacementRuleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{156}
}

func (x *UpdatePlacementRuleReq) GetPlacementRule() *PlacementRule {
	if x != nil {
		return x.PlacementRule
	}
	return nil
}

// Response message for the UpdatePlacementRule RPC
type UpdatePlacementRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePlacementRuleRes) Reset() {
	*x = UpdatePlacementRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlacementRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlacementRuleRes) ProtoMessage() {}

func (x *UpdatePlacementRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlacementRuleRes.ProtoReflect.Descriptor instead.
func (*UpdatePlacementRuleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{157}
}

// Request message for the DeletePlacementRule RPC
type DeletePlacementRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the placement rule to delete.
	PlacementRuleSid int64 `protobuf:"varint,1,opt,name=placement_rule_sid,json=placementRuleSid,proto3" json:"placement_rule_sid,omitempty"`
}

func (x *DeletePlacementRuleReq) Reset() {
	*x = DeletePlacementRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlacementRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlacementRuleReq) ProtoMessage() {}

func (x *DeletePlacementRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlacementRuleReq.ProtoReflect.Descriptor instead.
func (*DeletePlacementRuleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{158}
}

func (x *DeletePlacementRuleReq) GetPlacementRuleSid() int64 {
	if x != nil {
		return x.PlacementRuleSid
	}
	return 0
}

// Response message for the DeletePlacementRule RPC
type DeletePlacementRuleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePlacementRuleRes) Reset() {
	*x = DeletePlacementRuleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlacementRuleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlacementRuleRes) ProtoMessage() {}

func (x *DeletePlacementRuleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlacementRuleRes.ProtoReflect.Descriptor instead.
func (*DeletePlacementRuleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{159}
}

// Represents a datetime pattern that can be used for open times or agent availability
type DatetimePattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All week maps that the pattern has.
	WeekMaps []*DatetimePattern_WeekMap `protobuf:"bytes,1,rep,name=week_maps,json=weekMaps,proto3" json:"week_maps,omitempty"`
	// All calendar items that the pattern has.
	CalendarItems []*DatetimePattern_CalendarItem `protobuf:"bytes,2,rep,name=calendar_items,json=calendarItems,proto3" json:"calendar_items,omitempty"`
}

func (x *DatetimePattern) Reset() {
	*x = DatetimePattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatetimePattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimePattern) ProtoMessage() {}

func (x *DatetimePattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimePattern.ProtoReflect.Descriptor instead.
func (*DatetimePattern) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{160}
}

func (x *DatetimePattern) GetWeekMaps() []*DatetimePattern_WeekMap {
	if x != nil {
		return x.WeekMaps
	}
	return nil
}

func (x *DatetimePattern) GetCalendarItems() []*DatetimePattern_CalendarItem {
	if x != nil {
		return x.CalendarItems
	}
	return nil
}

// Represents an open times pattern
type OpenTimesPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this pattern.
	OpenTimesPatternSid int64 `protobuf:"varint,1,opt,name=open_times_pattern_sid,json=openTimesPatternSid,proto3" json:"open_times_pattern_sid,omitempty"`
	// Parent entity of the pattern.
	ParentEntity *ParentEntity `protobuf:"bytes,2,opt,name=parent_entity,json=parentEntity,proto3" json:"parent_entity,omitempty"`
	// Datetime pattern that represents this open times pattern.
	DatetimePattern *DatetimePattern `protobuf:"bytes,3,opt,name=datetime_pattern,json=datetimePattern,proto3" json:"datetime_pattern,omitempty"`
	// ID of the schedule scenario that the open times pattern belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,4,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *OpenTimesPattern) Reset() {
	*x = OpenTimesPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenTimesPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenTimesPattern) ProtoMessage() {}

func (x *OpenTimesPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenTimesPattern.ProtoReflect.Descriptor instead.
func (*OpenTimesPattern) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{161}
}

func (x *OpenTimesPattern) GetOpenTimesPatternSid() int64 {
	if x != nil {
		return x.OpenTimesPatternSid
	}
	return 0
}

func (x *OpenTimesPattern) GetParentEntity() *ParentEntity {
	if x != nil {
		return x.ParentEntity
	}
	return nil
}

func (x *OpenTimesPattern) GetDatetimePattern() *DatetimePattern {
	if x != nil {
		return x.DatetimePattern
	}
	return nil
}

func (x *OpenTimesPattern) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Request message for the CreateOpenTimesPattern RPC
type CreateOpenTimesPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Open times pattern to create, the @open_times_pattern_sid doesn't need to be set since it won't be used.
	OpenTimesPattern *OpenTimesPattern `protobuf:"bytes,1,opt,name=open_times_pattern,json=openTimesPattern,proto3" json:"open_times_pattern,omitempty"`
}

func (x *CreateOpenTimesPatternReq) Reset() {
	*x = CreateOpenTimesPatternReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOpenTimesPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpenTimesPatternReq) ProtoMessage() {}

func (x *CreateOpenTimesPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpenTimesPatternReq.ProtoReflect.Descriptor instead.
func (*CreateOpenTimesPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{162}
}

func (x *CreateOpenTimesPatternReq) GetOpenTimesPattern() *OpenTimesPattern {
	if x != nil {
		return x.OpenTimesPattern
	}
	return nil
}

// Response message for the CreateOpenTimesPattern RPC
type CreateOpenTimesPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created open times pattern.
	OpenTimesPatternSid int64 `protobuf:"varint,1,opt,name=open_times_pattern_sid,json=openTimesPatternSid,proto3" json:"open_times_pattern_sid,omitempty"`
}

func (x *CreateOpenTimesPatternRes) Reset() {
	*x = CreateOpenTimesPatternRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOpenTimesPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpenTimesPatternRes) ProtoMessage() {}

func (x *CreateOpenTimesPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpenTimesPatternRes.ProtoReflect.Descriptor instead.
func (*CreateOpenTimesPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{163}
}

func (x *CreateOpenTimesPatternRes) GetOpenTimesPatternSid() int64 {
	if x != nil {
		return x.OpenTimesPatternSid
	}
	return 0
}

// Request message for the UpdateOpenTimesPattern RPC
type UpdateOpenTimesPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Open times pattern to update.
	OpenTimesPattern *OpenTimesPattern `protobuf:"bytes,1,opt,name=open_times_pattern,json=openTimesPattern,proto3" json:"open_times_pattern,omitempty"`
}

func (x *UpdateOpenTimesPatternReq) Reset() {
	*x = UpdateOpenTimesPatternReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOpenTimesPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOpenTimesPatternReq) ProtoMessage() {}

func (x *UpdateOpenTimesPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOpenTimesPatternReq.ProtoReflect.Descriptor instead.
func (*UpdateOpenTimesPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{164}
}

func (x *UpdateOpenTimesPatternReq) GetOpenTimesPattern() *OpenTimesPattern {
	if x != nil {
		return x.OpenTimesPattern
	}
	return nil
}

// Response message for the UpdateOpenTimesPattern RPC
type UpdateOpenTimesPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOpenTimesPatternRes) Reset() {
	*x = UpdateOpenTimesPatternRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOpenTimesPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOpenTimesPatternRes) ProtoMessage() {}

func (x *UpdateOpenTimesPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOpenTimesPatternRes.ProtoReflect.Descriptor instead.
func (*UpdateOpenTimesPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{165}
}

// Request message for the DeleteOpenTimesPattern RPC
type DeleteOpenTimesPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the open times pattern to delete.
	OpenTimesPatternSid int64 `protobuf:"varint,1,opt,name=open_times_pattern_sid,json=openTimesPatternSid,proto3" json:"open_times_pattern_sid,omitempty"`
}

func (x *DeleteOpenTimesPatternReq) Reset() {
	*x = DeleteOpenTimesPatternReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOpenTimesPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOpenTimesPatternReq) ProtoMessage() {}

func (x *DeleteOpenTimesPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOpenTimesPatternReq.ProtoReflect.Descriptor instead.
func (*DeleteOpenTimesPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{166}
}

func (x *DeleteOpenTimesPatternReq) GetOpenTimesPatternSid() int64 {
	if x != nil {
		return x.OpenTimesPatternSid
	}
	return 0
}

// Response message for the DeleteOpenTimesPattern RPC
type DeleteOpenTimesPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteOpenTimesPatternRes) Reset() {
	*x = DeleteOpenTimesPatternRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOpenTimesPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOpenTimesPatternRes) ProtoMessage() {}

func (x *DeleteOpenTimesPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOpenTimesPatternRes.ProtoReflect.Descriptor instead.
func (*DeleteOpenTimesPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{167}
}

// Request message for the GetOpenTimesBitmaps RPC
type GetOpenTimesBitmapsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node that @own_bitmap and @resulting_bitmap will be associated with.
	NodeToCheck *ParentEntity `protobuf:"bytes,1,opt,name=node_to_check,json=nodeToCheck,proto3" json:"node_to_check,omitempty"`
	// ID of the schedule scenario that @node_to_check belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Whether or not to include inactive nodes. Will need to be set to true if @node_to_check or any of it's parents are inactive.
	IncludeInactive bool `protobuf:"varint,3,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	// Datetime range that bitmaps will cover when generated for @node_to_check.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,4,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
}

func (x *GetOpenTimesBitmapsReq) Reset() {
	*x = GetOpenTimesBitmapsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpenTimesBitmapsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenTimesBitmapsReq) ProtoMessage() {}

func (x *GetOpenTimesBitmapsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenTimesBitmapsReq.ProtoReflect.Descriptor instead.
func (*GetOpenTimesBitmapsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{168}
}

func (x *GetOpenTimesBitmapsReq) GetNodeToCheck() *ParentEntity {
	if x != nil {
		return x.NodeToCheck
	}
	return nil
}

func (x *GetOpenTimesBitmapsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *GetOpenTimesBitmapsReq) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *GetOpenTimesBitmapsReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

// Response message for the GetOpenTimesBitmaps RPC
type GetOpenTimesBitmapsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of open times options inherited from parent nodes.
	InheritedBitmap []commons.OpenTimesOption `protobuf:"varint,1,rep,packed,name=inherited_bitmap,json=inheritedBitmap,proto3,enum=api.commons.OpenTimesOption" json:"inherited_bitmap,omitempty"`
	// Map of open times options belonging to the node being checked.
	OwnBitmap []commons.OpenTimesOption `protobuf:"varint,2,rep,packed,name=own_bitmap,json=ownBitmap,proto3,enum=api.commons.OpenTimesOption" json:"own_bitmap,omitempty"`
	// Map of open times options resulting from combining the inherited and own bitmap.
	ResultingBitmap []commons.OpenTimesOption `protobuf:"varint,3,rep,packed,name=resulting_bitmap,json=resultingBitmap,proto3,enum=api.commons.OpenTimesOption" json:"resulting_bitmap,omitempty"`
}

func (x *GetOpenTimesBitmapsRes) Reset() {
	*x = GetOpenTimesBitmapsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpenTimesBitmapsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenTimesBitmapsRes) ProtoMessage() {}

func (x *GetOpenTimesBitmapsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenTimesBitmapsRes.ProtoReflect.Descriptor instead.
func (*GetOpenTimesBitmapsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{169}
}

func (x *GetOpenTimesBitmapsRes) GetInheritedBitmap() []commons.OpenTimesOption {
	if x != nil {
		return x.InheritedBitmap
	}
	return nil
}

func (x *GetOpenTimesBitmapsRes) GetOwnBitmap() []commons.OpenTimesOption {
	if x != nil {
		return x.OwnBitmap
	}
	return nil
}

func (x *GetOpenTimesBitmapsRes) GetResultingBitmap() []commons.OpenTimesOption {
	if x != nil {
		return x.ResultingBitmap
	}
	return nil
}

// Represents and Agent Availability Pattern
type AgentAvailabilityPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this pattern.
	AgentAvailabilityPatternSid int64 `protobuf:"varint,1,opt,name=agent_availability_pattern_sid,json=agentAvailabilityPatternSid,proto3" json:"agent_availability_pattern_sid,omitempty"`
	// Parent entity of this pattern.
	ParentEntity *ParentEntity `protobuf:"bytes,2,opt,name=parent_entity,json=parentEntity,proto3" json:"parent_entity,omitempty"`
	// Datetime pattern that represents this agent availability pattern.
	DatetimePattern *DatetimePattern `protobuf:"bytes,3,opt,name=datetime_pattern,json=datetimePattern,proto3" json:"datetime_pattern,omitempty"`
	// ID of the schedule scenario that this agent availability pattern belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,4,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *AgentAvailabilityPattern) Reset() {
	*x = AgentAvailabilityPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentAvailabilityPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentAvailabilityPattern) ProtoMessage() {}

func (x *AgentAvailabilityPattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentAvailabilityPattern.ProtoReflect.Descriptor instead.
func (*AgentAvailabilityPattern) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{170}
}

func (x *AgentAvailabilityPattern) GetAgentAvailabilityPatternSid() int64 {
	if x != nil {
		return x.AgentAvailabilityPatternSid
	}
	return 0
}

func (x *AgentAvailabilityPattern) GetParentEntity() *ParentEntity {
	if x != nil {
		return x.ParentEntity
	}
	return nil
}

func (x *AgentAvailabilityPattern) GetDatetimePattern() *DatetimePattern {
	if x != nil {
		return x.DatetimePattern
	}
	return nil
}

func (x *AgentAvailabilityPattern) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Request message for the AgentAvailabilityPattern RPC
type CreateAgentAvailabilityPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AgentAvailabilityPattern to be created, the @agent_availability_pattern_sid doesn't need to be set since it won't be used.
	AgentAvailabilityPattern *AgentAvailabilityPattern `protobuf:"bytes,1,opt,name=agent_availability_pattern,json=agentAvailabilityPattern,proto3" json:"agent_availability_pattern,omitempty"`
}

func (x *CreateAgentAvailabilityPatternReq) Reset() {
	*x = CreateAgentAvailabilityPatternReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAgentAvailabilityPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentAvailabilityPatternReq) ProtoMessage() {}

func (x *CreateAgentAvailabilityPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentAvailabilityPatternReq.ProtoReflect.Descriptor instead.
func (*CreateAgentAvailabilityPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{171}
}

func (x *CreateAgentAvailabilityPatternReq) GetAgentAvailabilityPattern() *AgentAvailabilityPattern {
	if x != nil {
		return x.AgentAvailabilityPattern
	}
	return nil
}

// Response message for the AgentAvailabilityPattern RPC
type CreateAgentAvailabilityPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly create agent availability pattern.
	AgentAvailabilityPatternSid int64 `protobuf:"varint,1,opt,name=agent_availability_pattern_sid,json=agentAvailabilityPatternSid,proto3" json:"agent_availability_pattern_sid,omitempty"`
}

func (x *CreateAgentAvailabilityPatternRes) Reset() {
	*x = CreateAgentAvailabilityPatternRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAgentAvailabilityPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgentAvailabilityPatternRes) ProtoMessage() {}

func (x *CreateAgentAvailabilityPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgentAvailabilityPatternRes.ProtoReflect.Descriptor instead.
func (*CreateAgentAvailabilityPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{172}
}

func (x *CreateAgentAvailabilityPatternRes) GetAgentAvailabilityPatternSid() int64 {
	if x != nil {
		return x.AgentAvailabilityPatternSid
	}
	return 0
}

// Request message for the UpdateAgentAvailabilityPattern RPC
type UpdateAgentAvailabilityPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent availability pattern to update.
	AgentAvailabilityPattern *AgentAvailabilityPattern `protobuf:"bytes,1,opt,name=agent_availability_pattern,json=agentAvailabilityPattern,proto3" json:"agent_availability_pattern,omitempty"`
}

func (x *UpdateAgentAvailabilityPatternReq) Reset() {
	*x = UpdateAgentAvailabilityPatternReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAgentAvailabilityPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentAvailabilityPatternReq) ProtoMessage() {}

func (x *UpdateAgentAvailabilityPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentAvailabilityPatternReq.ProtoReflect.Descriptor instead.
func (*UpdateAgentAvailabilityPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{173}
}

func (x *UpdateAgentAvailabilityPatternReq) GetAgentAvailabilityPattern() *AgentAvailabilityPattern {
	if x != nil {
		return x.AgentAvailabilityPattern
	}
	return nil
}

// Response message for the UpdateAgentAvailabilityPattern RPC
type UpdateAgentAvailabilityPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAgentAvailabilityPatternRes) Reset() {
	*x = UpdateAgentAvailabilityPatternRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAgentAvailabilityPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentAvailabilityPatternRes) ProtoMessage() {}

func (x *UpdateAgentAvailabilityPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentAvailabilityPatternRes.ProtoReflect.Descriptor instead.
func (*UpdateAgentAvailabilityPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{174}
}

// Request message for the DeleteAgentAvailabilityPattern RPC
type DeleteAgentAvailabilityPatternReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the agent availability pattern to delete.
	AgentAvailabilityPatternSid int64 `protobuf:"varint,1,opt,name=agent_availability_pattern_sid,json=agentAvailabilityPatternSid,proto3" json:"agent_availability_pattern_sid,omitempty"`
}

func (x *DeleteAgentAvailabilityPatternReq) Reset() {
	*x = DeleteAgentAvailabilityPatternReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAgentAvailabilityPatternReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentAvailabilityPatternReq) ProtoMessage() {}

func (x *DeleteAgentAvailabilityPatternReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentAvailabilityPatternReq.ProtoReflect.Descriptor instead.
func (*DeleteAgentAvailabilityPatternReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{175}
}

func (x *DeleteAgentAvailabilityPatternReq) GetAgentAvailabilityPatternSid() int64 {
	if x != nil {
		return x.AgentAvailabilityPatternSid
	}
	return 0
}

// Response message for the DeleteAgentAvailabilityPattern RPC
type DeleteAgentAvailabilityPatternRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAgentAvailabilityPatternRes) Reset() {
	*x = DeleteAgentAvailabilityPatternRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAgentAvailabilityPatternRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentAvailabilityPatternRes) ProtoMessage() {}

func (x *DeleteAgentAvailabilityPatternRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentAvailabilityPatternRes.ProtoReflect.Descriptor instead.
func (*DeleteAgentAvailabilityPatternRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{176}
}

// Contains a set of bitmaps for an entity.
type AvailabilityBitmapSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of availability options belonging to the node being checked.
	OwnBitmap []commons.AvailabilityOption `protobuf:"varint,1,rep,packed,name=own_bitmap,json=ownBitmap,proto3,enum=api.commons.AvailabilityOption" json:"own_bitmap,omitempty"`
	// Map of availability options inherited from parent nodes.
	InheritedBitmap []commons.AvailabilityOption `protobuf:"varint,2,rep,packed,name=inherited_bitmap,json=inheritedBitmap,proto3,enum=api.commons.AvailabilityOption" json:"inherited_bitmap,omitempty"`
	// Map of availability options resulting from combining the inherited and own bitmap.
	ResultingBitmap []commons.AvailabilityOption `protobuf:"varint,3,rep,packed,name=resulting_bitmap,json=resultingBitmap,proto3,enum=api.commons.AvailabilityOption" json:"resulting_bitmap,omitempty"`
	// Entity that the bitmaps belong to.
	ParentEntity *ParentEntity `protobuf:"bytes,4,opt,name=parent_entity,json=parentEntity,proto3" json:"parent_entity,omitempty"`
}

func (x *AvailabilityBitmapSet) Reset() {
	*x = AvailabilityBitmapSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityBitmapSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityBitmapSet) ProtoMessage() {}

func (x *AvailabilityBitmapSet) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityBitmapSet.ProtoReflect.Descriptor instead.
func (*AvailabilityBitmapSet) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{177}
}

func (x *AvailabilityBitmapSet) GetOwnBitmap() []commons.AvailabilityOption {
	if x != nil {
		return x.OwnBitmap
	}
	return nil
}

func (x *AvailabilityBitmapSet) GetInheritedBitmap() []commons.AvailabilityOption {
	if x != nil {
		return x.InheritedBitmap
	}
	return nil
}

func (x *AvailabilityBitmapSet) GetResultingBitmap() []commons.AvailabilityOption {
	if x != nil {
		return x.ResultingBitmap
	}
	return nil
}

func (x *AvailabilityBitmapSet) GetParentEntity() *ParentEntity {
	if x != nil {
		return x.ParentEntity
	}
	return nil
}

// Request message for the GetAvailabilityBitmaps RPC
type GetAvailabilityBitmapsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The entities that @bitmaps will be associated with.
	// Must be nodes, wfm agents, and agent groups only. For agent groups, bitmaps will be returned for each of the groups member agents,
	EntitiesToCheck []*ParentEntity `protobuf:"bytes,1,rep,name=entities_to_check,json=entitiesToCheck,proto3" json:"entities_to_check,omitempty"`
	// ID of the schedule scenario that @entities_to_check belong to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Whether or not to include inactive nodes. Will need to be set to true if @entities_to_check or any of it's parents are inactive.
	IncludeInactive bool `protobuf:"varint,3,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	// Datetime range that bitmaps will cover when generated for @entities_to_check.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,4,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
}

func (x *GetAvailabilityBitmapsReq) Reset() {
	*x = GetAvailabilityBitmapsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailabilityBitmapsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailabilityBitmapsReq) ProtoMessage() {}

func (x *GetAvailabilityBitmapsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailabilityBitmapsReq.ProtoReflect.Descriptor instead.
func (*GetAvailabilityBitmapsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{178}
}

func (x *GetAvailabilityBitmapsReq) GetEntitiesToCheck() []*ParentEntity {
	if x != nil {
		return x.EntitiesToCheck
	}
	return nil
}

func (x *GetAvailabilityBitmapsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *GetAvailabilityBitmapsReq) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *GetAvailabilityBitmapsReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

// Response message for the GetAvailabilityBitmaps RPC
type GetAvailabilityBitmapsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested bitmaps, with a pointer to the entity that the bitmaps belong.
	Bitmaps []*AvailabilityBitmapSet `protobuf:"bytes,1,rep,name=bitmaps,proto3" json:"bitmaps,omitempty"`
}

func (x *GetAvailabilityBitmapsRes) Reset() {
	*x = GetAvailabilityBitmapsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailabilityBitmapsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailabilityBitmapsRes) ProtoMessage() {}

func (x *GetAvailabilityBitmapsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailabilityBitmapsRes.ProtoReflect.Descriptor instead.
func (*GetAvailabilityBitmapsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{179}
}

func (x *GetAvailabilityBitmapsRes) GetBitmaps() []*AvailabilityBitmapSet {
	if x != nil {
		return x.Bitmaps
	}
	return nil
}

// Request message for the UpsertNonSkillActivityAssociation RPC
type UpsertNonSkillActivityAssociationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the non skill activity to upsert the association of.
	NonSkillActivitySid int64 `protobuf:"varint,1,opt,name=non_skill_activity_sid,json=nonSkillActivitySid,proto3" json:"non_skill_activity_sid,omitempty"`
	// Node that the non skill activity will be associated with.
	Node *ParentEntity `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	// Type of association that the non skill activity will have with the @node.
	AssociationType commons.ConfigRelationshipType `protobuf:"varint,3,opt,name=association_type,json=associationType,proto3,enum=api.commons.ConfigRelationshipType" json:"association_type,omitempty"`
	// ID of the schedule scenario that this non skill activity belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,4,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *UpsertNonSkillActivityAssociationReq) Reset() {
	*x = UpsertNonSkillActivityAssociationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertNonSkillActivityAssociationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertNonSkillActivityAssociationReq) ProtoMessage() {}

func (x *UpsertNonSkillActivityAssociationReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertNonSkillActivityAssociationReq.ProtoReflect.Descriptor instead.
func (*UpsertNonSkillActivityAssociationReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{180}
}

func (x *UpsertNonSkillActivityAssociationReq) GetNonSkillActivitySid() int64 {
	if x != nil {
		return x.NonSkillActivitySid
	}
	return 0
}

func (x *UpsertNonSkillActivityAssociationReq) GetNode() *ParentEntity {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *UpsertNonSkillActivityAssociationReq) GetAssociationType() commons.ConfigRelationshipType {
	if x != nil {
		return x.AssociationType
	}
	return commons.ConfigRelationshipType(0)
}

func (x *UpsertNonSkillActivityAssociationReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the UpsertNonSkillActivityAssociation RPC
type UpsertNonSkillActivityAssociationRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether the upsert took effect if true, or that there are conflicting entities which would be affected, that must be updated/removed first if false.
	UpsertSucceeded bool `protobuf:"varint,1,opt,name=upsert_succeeded,json=upsertSucceeded,proto3" json:"upsert_succeeded,omitempty"`
	// Nodes that will effectively lose the non skill activity as a candidate, through inheritance.
	NodesAffected []*ParentEntity `protobuf:"bytes,2,rep,name=nodes_affected,json=nodesAffected,proto3" json:"nodes_affected,omitempty"`
	// Set of entities that are currently referencing the @non_skill_activity_sid.
	// The @right_entity will be the placement rule or constraint rule in conflict, and their parent entity will be the @left_entity
	RulesUsingActivity []*UpsertNonSkillActivityAssociationRes_EntityMapping `protobuf:"bytes,3,rep,name=rules_using_activity,json=rulesUsingActivity,proto3" json:"rules_using_activity,omitempty"`
}

func (x *UpsertNonSkillActivityAssociationRes) Reset() {
	*x = UpsertNonSkillActivityAssociationRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertNonSkillActivityAssociationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertNonSkillActivityAssociationRes) ProtoMessage() {}

func (x *UpsertNonSkillActivityAssociationRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertNonSkillActivityAssociationRes.ProtoReflect.Descriptor instead.
func (*UpsertNonSkillActivityAssociationRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{181}
}

func (x *UpsertNonSkillActivityAssociationRes) GetUpsertSucceeded() bool {
	if x != nil {
		return x.UpsertSucceeded
	}
	return false
}

func (x *UpsertNonSkillActivityAssociationRes) GetNodesAffected() []*ParentEntity {
	if x != nil {
		return x.NodesAffected
	}
	return nil
}

func (x *UpsertNonSkillActivityAssociationRes) GetRulesUsingActivity() []*UpsertNonSkillActivityAssociationRes_EntityMapping {
	if x != nil {
		return x.RulesUsingActivity
	}
	return nil
}

// Represents a skill proficiency
type SkillProficiency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill proficiency.
	SkillProficiencySid int64 `protobuf:"varint,1,opt,name=skill_proficiency_sid,json=skillProficiencySid,proto3" json:"skill_proficiency_sid,omitempty"`
	// ID of the skill that this proficiency belongs to.
	SkillSid int64 `protobuf:"varint,2,opt,name=skill_sid,json=skillSid,proto3" json:"skill_sid,omitempty"`
	// ID of the skill profile that contains the @skill_sid.
	// If not set to NULL, then the proficiency value of the @skill_sid for that skill profile should be used,
	// otherwise the @manual_proficiency_value is the preferred proficiency to use for the @skill_sid.
	PreferredSkillProfileSid *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=preferred_skill_profile_sid,json=preferredSkillProfileSid,proto3" json:"preferred_skill_profile_sid,omitempty"`
	// Manual proficiency value (from 1 to 100), it will be used when @preferred_skill_profile_sid is NULL.
	ManualProficiencyValue int32 `protobuf:"varint,4,opt,name=manual_proficiency_value,json=manualProficiencyValue,proto3" json:"manual_proficiency_value,omitempty"`
	// Parent entity of the proficiency.
	ParentEntity *ParentEntity `protobuf:"bytes,5,opt,name=parent_entity,json=parentEntity,proto3" json:"parent_entity,omitempty"`
	// The following fields are only used in the return of List requests of the entity.
	// Name of the skill with @skill_sid.
	SkillName string `protobuf:"bytes,7,opt,name=skill_name,json=skillName,proto3" json:"skill_name,omitempty"`
	// Name of the skill profile with @preferred_skill_profile_sid, will be blank if said field is NULL.
	SkillProfileName string `protobuf:"bytes,8,opt,name=skill_profile_name,json=skillProfileName,proto3" json:"skill_profile_name,omitempty"`
	// Proficiency value that @preferred_skill_profile_sid has for the given @skill_sid, it will be 0 if @preferred_skill_profile_sid is NULL.
	SkillProfileProficiencyValue int32 `protobuf:"varint,9,opt,name=skill_profile_proficiency_value,json=skillProfileProficiencyValue,proto3" json:"skill_profile_proficiency_value,omitempty"`
}

func (x *SkillProficiency) Reset() {
	*x = SkillProficiency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillProficiency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillProficiency) ProtoMessage() {}

func (x *SkillProficiency) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillProficiency.ProtoReflect.Descriptor instead.
func (*SkillProficiency) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{182}
}

func (x *SkillProficiency) GetSkillProficiencySid() int64 {
	if x != nil {
		return x.SkillProficiencySid
	}
	return 0
}

func (x *SkillProficiency) GetSkillSid() int64 {
	if x != nil {
		return x.SkillSid
	}
	return 0
}

func (x *SkillProficiency) GetPreferredSkillProfileSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.PreferredSkillProfileSid
	}
	return nil
}

func (x *SkillProficiency) GetManualProficiencyValue() int32 {
	if x != nil {
		return x.ManualProficiencyValue
	}
	return 0
}

func (x *SkillProficiency) GetParentEntity() *ParentEntity {
	if x != nil {
		return x.ParentEntity
	}
	return nil
}

func (x *SkillProficiency) GetSkillName() string {
	if x != nil {
		return x.SkillName
	}
	return ""
}

func (x *SkillProficiency) GetSkillProfileName() string {
	if x != nil {
		return x.SkillProfileName
	}
	return ""
}

func (x *SkillProficiency) GetSkillProfileProficiencyValue() int32 {
	if x != nil {
		return x.SkillProfileProficiencyValue
	}
	return 0
}

// Request message for the CreateSkillProficiencies RPC
type CreateSkillProficienciesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skill proficiencies to create, the @skill_proficiency_sid's don't need to be set since they won't be used.
	Proficiencies []*SkillProficiency `protobuf:"bytes,1,rep,name=proficiencies,proto3" json:"proficiencies,omitempty"`
	// ID of the schedule scenario that the @parent_entity in each @proficiency belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *CreateSkillProficienciesReq) Reset() {
	*x = CreateSkillProficienciesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSkillProficienciesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSkillProficienciesReq) ProtoMessage() {}

func (x *CreateSkillProficienciesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSkillProficienciesReq.ProtoReflect.Descriptor instead.
func (*CreateSkillProficienciesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{183}
}

func (x *CreateSkillProficienciesReq) GetProficiencies() []*SkillProficiency {
	if x != nil {
		return x.Proficiencies
	}
	return nil
}

func (x *CreateSkillProficienciesReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the CreateSkillProficiencies RPC
type CreateSkillProficienciesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSkillProficienciesRes) Reset() {
	*x = CreateSkillProficienciesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSkillProficienciesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSkillProficienciesRes) ProtoMessage() {}

func (x *CreateSkillProficienciesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSkillProficienciesRes.ProtoReflect.Descriptor instead.
func (*CreateSkillProficienciesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{184}
}

// Request message for the UpdateSkillProficiencies RPC
type UpdateSkillProficienciesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skill proficiencies to update.
	SkillProficiencies []*SkillProficiency `protobuf:"bytes,1,rep,name=skill_proficiencies,json=skillProficiencies,proto3" json:"skill_proficiencies,omitempty"`
}

func (x *UpdateSkillProficienciesReq) Reset() {
	*x = UpdateSkillProficienciesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSkillProficienciesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProficienciesReq) ProtoMessage() {}

func (x *UpdateSkillProficienciesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProficienciesReq.ProtoReflect.Descriptor instead.
func (*UpdateSkillProficienciesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{185}
}

func (x *UpdateSkillProficienciesReq) GetSkillProficiencies() []*SkillProficiency {
	if x != nil {
		return x.SkillProficiencies
	}
	return nil
}

// Response message for the UpdateSkillProficiencies RPC
type UpdateSkillProficienciesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSkillProficienciesRes) Reset() {
	*x = UpdateSkillProficienciesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSkillProficienciesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProficienciesRes) ProtoMessage() {}

func (x *UpdateSkillProficienciesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProficienciesRes.ProtoReflect.Descriptor instead.
func (*UpdateSkillProficienciesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{186}
}

// Request message for the DeleteSkillProficiency RPC
type DeleteSkillProficiencyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of skill proficiency to delete.
	SkillProficiencySid int64 `protobuf:"varint,1,opt,name=skill_proficiency_sid,json=skillProficiencySid,proto3" json:"skill_proficiency_sid,omitempty"`
}

func (x *DeleteSkillProficiencyReq) Reset() {
	*x = DeleteSkillProficiencyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSkillProficiencyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSkillProficiencyReq) ProtoMessage() {}

func (x *DeleteSkillProficiencyReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSkillProficiencyReq.ProtoReflect.Descriptor instead.
func (*DeleteSkillProficiencyReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{187}
}

func (x *DeleteSkillProficiencyReq) GetSkillProficiencySid() int64 {
	if x != nil {
		return x.SkillProficiencySid
	}
	return 0
}

// Response message for the DeleteSkillProficiency RPC
type DeleteSkillProficiencyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSkillProficiencyRes) Reset() {
	*x = DeleteSkillProficiencyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSkillProficiencyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSkillProficiencyRes) ProtoMessage() {}

func (x *DeleteSkillProficiencyRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSkillProficiencyRes.ProtoReflect.Descriptor instead.
func (*DeleteSkillProficiencyRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{188}
}

// Represents the data encapsulated by a schedule scenario.
type ScheduleScenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the schedule scenario.
	ScheduleScenarioSid int64 `protobuf:"varint,1,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Name of the schedule scenario.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the schedule scenario.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Datetime that the scenario was created.
	CreationDatetime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_datetime,json=creationDatetime,proto3" json:"creation_datetime,omitempty"`
	// ID of User/Agent in the TCN system that created the scenario.
	// Field is ignored in all update requests.
	CreatedByUserId string `protobuf:"bytes,5,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	// Whether this scenario was the last scenario built/used for scheduling.
	IsDefault bool `protobuf:"varint,6,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	// ID of scenario that this scenario was copied from (if applicable).
	CopiedFromScenarioSid *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=copied_from_scenario_sid,json=copiedFromScenarioSid,proto3" json:"copied_from_scenario_sid,omitempty"`
	// Datetime range that schedules will cover when built using this schedule scenario.
	ScheduleRange *commons.DatetimeRange `protobuf:"bytes,8,opt,name=schedule_range,json=scheduleRange,proto3" json:"schedule_range,omitempty"`
	// Datetime that the sceneario was set to inactive.
	DatetimeSetToInactive *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=datetime_set_to_inactive,json=datetimeSetToInactive,proto3" json:"datetime_set_to_inactive,omitempty"`
	// Indicates whether or not the scenario is active.
	IsActive bool `protobuf:"varint,10,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *ScheduleScenario) Reset() {
	*x = ScheduleScenario{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleScenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleScenario) ProtoMessage() {}

func (x *ScheduleScenario) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleScenario.ProtoReflect.Descriptor instead.
func (*ScheduleScenario) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{189}
}

func (x *ScheduleScenario) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *ScheduleScenario) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduleScenario) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScheduleScenario) GetCreationDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDatetime
	}
	return nil
}

func (x *ScheduleScenario) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *ScheduleScenario) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *ScheduleScenario) GetCopiedFromScenarioSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.CopiedFromScenarioSid
	}
	return nil
}

func (x *ScheduleScenario) GetScheduleRange() *commons.DatetimeRange {
	if x != nil {
		return x.ScheduleRange
	}
	return nil
}

func (x *ScheduleScenario) GetDatetimeSetToInactive() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeSetToInactive
	}
	return nil
}

func (x *ScheduleScenario) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

// Request message for the CopyScenario RPC
type CopyScenarioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the scenario that we are going to copy from.
	ScenarioSidToCopy int64 `protobuf:"varint,1,opt,name=scenario_sid_to_copy,json=scenarioSidToCopy,proto3" json:"scenario_sid_to_copy,omitempty"`
	// If the new scenario should include the inactive entities associated with the scenario_sid_to_copy.
	IncludeInactive bool `protobuf:"varint,2,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	// If no input is given, this should be "Copy of: copied_scenario.name", otherwise use the given input.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// If no input is given, use copied_scenario.description, otherwise use the given input.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Datetime range that the schedules for the new scenario will cover when built using the copied schedule scenario.
	ScheduleRange *commons.DatetimeRange `protobuf:"bytes,5,opt,name=schedule_range,json=scheduleRange,proto3" json:"schedule_range,omitempty"`
}

func (x *CopyScenarioReq) Reset() {
	*x = CopyScenarioReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyScenarioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyScenarioReq) ProtoMessage() {}

func (x *CopyScenarioReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyScenarioReq.ProtoReflect.Descriptor instead.
func (*CopyScenarioReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{190}
}

func (x *CopyScenarioReq) GetScenarioSidToCopy() int64 {
	if x != nil {
		return x.ScenarioSidToCopy
	}
	return 0
}

func (x *CopyScenarioReq) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *CopyScenarioReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CopyScenarioReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CopyScenarioReq) GetScheduleRange() *commons.DatetimeRange {
	if x != nil {
		return x.ScheduleRange
	}
	return nil
}

// Response message for the CopyScenario RPC
type CopyScenarioRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the new scenario
	ScheduleScenarioSid int64 `protobuf:"varint,1,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *CopyScenarioRes) Reset() {
	*x = CopyScenarioRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyScenarioRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyScenarioRes) ProtoMessage() {}

func (x *CopyScenarioRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyScenarioRes.ProtoReflect.Descriptor instead.
func (*CopyScenarioRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{191}
}

func (x *CopyScenarioRes) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Request message for the CreateScheduleScenarioWithNodes RPC
type CreateScheduleScenarioWithNodesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ScheduleScenario to be stored in the db.
	ScheduleScenario *ScheduleScenario `protobuf:"bytes,1,opt,name=schedule_scenario,json=scheduleScenario,proto3" json:"schedule_scenario,omitempty"`
	// Name for the created call center node.
	CallCenterNodeName string `protobuf:"bytes,2,opt,name=call_center_node_name,json=callCenterNodeName,proto3" json:"call_center_node_name,omitempty"`
	// Description for the created call center node.
	CallCenterNodeDescription string `protobuf:"bytes,3,opt,name=call_center_node_description,json=callCenterNodeDescription,proto3" json:"call_center_node_description,omitempty"`
	// Name for the created client node.
	ClientNodeName string `protobuf:"bytes,4,opt,name=client_node_name,json=clientNodeName,proto3" json:"client_node_name,omitempty"`
	// Description for the created client node.
	ClientNodeDescription string `protobuf:"bytes,5,opt,name=client_node_description,json=clientNodeDescription,proto3" json:"client_node_description,omitempty"`
	// Name for the created location node.
	LocationNodeName string `protobuf:"bytes,6,opt,name=location_node_name,json=locationNodeName,proto3" json:"location_node_name,omitempty"`
	// Description for the location center node.
	LocationNodeDescription string `protobuf:"bytes,7,opt,name=location_node_description,json=locationNodeDescription,proto3" json:"location_node_description,omitempty"`
	// Name for the created program node.
	ProgramNodeName string `protobuf:"bytes,8,opt,name=program_node_name,json=programNodeName,proto3" json:"program_node_name,omitempty"`
	// Description for the created program node.
	ProgramNodeDescription string `protobuf:"bytes,9,opt,name=program_node_description,json=programNodeDescription,proto3" json:"program_node_description,omitempty"`
	// TimeZoneVal is the desired timezone for the created nodes.
	TimeZoneVal commons.TimeZone `protobuf:"varint,10,opt,name=time_zone_val,json=timeZoneVal,proto3,enum=api.commons.TimeZone" json:"time_zone_val,omitempty"`
}

func (x *CreateScheduleScenarioWithNodesReq) Reset() {
	*x = CreateScheduleScenarioWithNodesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScheduleScenarioWithNodesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScheduleScenarioWithNodesReq) ProtoMessage() {}

func (x *CreateScheduleScenarioWithNodesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScheduleScenarioWithNodesReq.ProtoReflect.Descriptor instead.
func (*CreateScheduleScenarioWithNodesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{192}
}

func (x *CreateScheduleScenarioWithNodesReq) GetScheduleScenario() *ScheduleScenario {
	if x != nil {
		return x.ScheduleScenario
	}
	return nil
}

func (x *CreateScheduleScenarioWithNodesReq) GetCallCenterNodeName() string {
	if x != nil {
		return x.CallCenterNodeName
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetCallCenterNodeDescription() string {
	if x != nil {
		return x.CallCenterNodeDescription
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetClientNodeName() string {
	if x != nil {
		return x.ClientNodeName
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetClientNodeDescription() string {
	if x != nil {
		return x.ClientNodeDescription
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetLocationNodeName() string {
	if x != nil {
		return x.LocationNodeName
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetLocationNodeDescription() string {
	if x != nil {
		return x.LocationNodeDescription
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetProgramNodeName() string {
	if x != nil {
		return x.ProgramNodeName
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetProgramNodeDescription() string {
	if x != nil {
		return x.ProgramNodeDescription
	}
	return ""
}

func (x *CreateScheduleScenarioWithNodesReq) GetTimeZoneVal() commons.TimeZone {
	if x != nil {
		return x.TimeZoneVal
	}
	return commons.TimeZone(0)
}

// Response message for the CreateScheduleScenarioWithNodes RPC
type CreateScheduleScenarioWithNodesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the scenario just created.
	ScheduleScenarioSid int64 `protobuf:"varint,1,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *CreateScheduleScenarioWithNodesRes) Reset() {
	*x = CreateScheduleScenarioWithNodesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScheduleScenarioWithNodesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScheduleScenarioWithNodesRes) ProtoMessage() {}

func (x *CreateScheduleScenarioWithNodesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScheduleScenarioWithNodesRes.ProtoReflect.Descriptor instead.
func (*CreateScheduleScenarioWithNodesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{193}
}

func (x *CreateScheduleScenarioWithNodesRes) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Request message for the UpdateScheduleScenario RPC
type UpdateScheduleScenarioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleScenario *ScheduleScenario `protobuf:"bytes,1,opt,name=scheduleScenario,proto3" json:"scheduleScenario,omitempty"`
}

func (x *UpdateScheduleScenarioReq) Reset() {
	*x = UpdateScheduleScenarioReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScheduleScenarioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduleScenarioReq) ProtoMessage() {}

func (x *UpdateScheduleScenarioReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduleScenarioReq.ProtoReflect.Descriptor instead.
func (*UpdateScheduleScenarioReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{194}
}

func (x *UpdateScheduleScenarioReq) GetScheduleScenario() *ScheduleScenario {
	if x != nil {
		return x.ScheduleScenario
	}
	return nil
}

// Request message for the UpdateScheduleScenario RPC
type UpdateScheduleScenarioRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateScheduleScenarioRes) Reset() {
	*x = UpdateScheduleScenarioRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScheduleScenarioRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduleScenarioRes) ProtoMessage() {}

func (x *UpdateScheduleScenarioRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduleScenarioRes.ProtoReflect.Descriptor instead.
func (*UpdateScheduleScenarioRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{195}
}

// Request message for the ListConfigEntities RPC
type ListConfigEntitiesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entity type of the entities to retrieve.
	EntityType commons.ConfigEntityType `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3,enum=api.commons.ConfigEntityType" json:"entity_type,omitempty"`
	// Entity that the entities to return will belong to.
	BelongsToEntity *ParentEntity `protobuf:"bytes,2,opt,name=belongs_to_entity,json=belongsToEntity,proto3" json:"belongs_to_entity,omitempty"`
	// Indicates whether or not to retrieve inactive entities (true=active and inactive, false=active only).
	IncludeInactive bool `protobuf:"varint,3,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`
	// Depth to go down the config tree for children and member entities.
	// e.g: a value of 0 will only get the entities requested with no children/member.
	//
	//	a value of 1 will get the entities with children/member entities included 1 level down.
	MemberDepth int32 `protobuf:"varint,4,opt,name=member_depth,json=memberDepth,proto3" json:"member_depth,omitempty"`
	// ID of the scenario that the entities desired belong to, must match the scenario of @belongs_to_entity.
	ScheduleScenarioSid int64 `protobuf:"varint,5,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *ListConfigEntitiesReq) Reset() {
	*x = ListConfigEntitiesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesReq) ProtoMessage() {}

func (x *ListConfigEntitiesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesReq.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{196}
}

func (x *ListConfigEntitiesReq) GetEntityType() commons.ConfigEntityType {
	if x != nil {
		return x.EntityType
	}
	return commons.ConfigEntityType(0)
}

func (x *ListConfigEntitiesReq) GetBelongsToEntity() *ParentEntity {
	if x != nil {
		return x.BelongsToEntity
	}
	return nil
}

func (x *ListConfigEntitiesReq) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *ListConfigEntitiesReq) GetMemberDepth() int32 {
	if x != nil {
		return x.MemberDepth
	}
	return 0
}

func (x *ListConfigEntitiesReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the ListConfigEntities RPC
type ListConfigEntitiesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entities:
	//
	//	*ListConfigEntitiesRes_CallCenterNode
	//	*ListConfigEntitiesRes_ClientNodes
	//	*ListConfigEntitiesRes_LocationNodes
	//	*ListConfigEntitiesRes_ProgramNodes
	//	*ListConfigEntitiesRes_AgentGroups
	//	*ListConfigEntitiesRes_ShiftTemplates
	//	*ListConfigEntitiesRes_WfmAgents
	//	*ListConfigEntitiesRes_PlacementRules
	//	*ListConfigEntitiesRes_ConstraintRules
	//	*ListConfigEntitiesRes_NonSkillActivities
	//	*ListConfigEntitiesRes_AgentAvailabilityPatterns
	//	*ListConfigEntitiesRes_OpenTimesPatterns
	//	*ListConfigEntitiesRes_SchedulingActivity
	//	*ListConfigEntitiesRes_SkillProficiencies
	//	*ListConfigEntitiesRes_ScheduleScenarios
	Entities isListConfigEntitiesRes_Entities `protobuf_oneof:"entities"`
}

func (x *ListConfigEntitiesRes) Reset() {
	*x = ListConfigEntitiesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes) ProtoMessage() {}

func (x *ListConfigEntitiesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197}
}

func (m *ListConfigEntitiesRes) GetEntities() isListConfigEntitiesRes_Entities {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetCallCenterNode() *CallCenterNode {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_CallCenterNode); ok {
		return x.CallCenterNode
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetClientNodes() *ListConfigEntitiesRes_ClientNodeEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_ClientNodes); ok {
		return x.ClientNodes
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetLocationNodes() *ListConfigEntitiesRes_LocationNodeEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_LocationNodes); ok {
		return x.LocationNodes
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetProgramNodes() *ListConfigEntitiesRes_ProgramNodeEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_ProgramNodes); ok {
		return x.ProgramNodes
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetAgentGroups() *ListConfigEntitiesRes_AgentGroupEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_AgentGroups); ok {
		return x.AgentGroups
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetShiftTemplates() *ListConfigEntitiesRes_ShiftTemplateEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_ShiftTemplates); ok {
		return x.ShiftTemplates
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetWfmAgents() *ListConfigEntitiesRes_WFMAgentEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_WfmAgents); ok {
		return x.WfmAgents
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetPlacementRules() *ListConfigEntitiesRes_PlacementRuleEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_PlacementRules); ok {
		return x.PlacementRules
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetConstraintRules() *ListConfigEntitiesRes_ConstraintRuleEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_ConstraintRules); ok {
		return x.ConstraintRules
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetNonSkillActivities() *ListConfigEntitiesRes_NonSkillActivityEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_NonSkillActivities); ok {
		return x.NonSkillActivities
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetAgentAvailabilityPatterns() *ListConfigEntitiesRes_AgentAvailabilityPatternEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_AgentAvailabilityPatterns); ok {
		return x.AgentAvailabilityPatterns
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetOpenTimesPatterns() *ListConfigEntitiesRes_OpenTimesPatternEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_OpenTimesPatterns); ok {
		return x.OpenTimesPatterns
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetSchedulingActivity() *SchedulingActivity {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_SchedulingActivity); ok {
		return x.SchedulingActivity
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetSkillProficiencies() *ListConfigEntitiesRes_SkillProficiencyEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_SkillProficiencies); ok {
		return x.SkillProficiencies
	}
	return nil
}

func (x *ListConfigEntitiesRes) GetScheduleScenarios() *ListConfigEntitiesRes_ScheduleScenarioEntities {
	if x, ok := x.GetEntities().(*ListConfigEntitiesRes_ScheduleScenarios); ok {
		return x.ScheduleScenarios
	}
	return nil
}

type isListConfigEntitiesRes_Entities interface {
	isListConfigEntitiesRes_Entities()
}

type ListConfigEntitiesRes_CallCenterNode struct {
	// Call Center Node entity retrieved when @entity_type in the request is CallCenterNode.
	// When this entity is requested, the @belongs_to_entity.type will be ignored and assumed as if were ScheduleScenario.
	CallCenterNode *CallCenterNode `protobuf:"bytes,1,opt,name=call_center_node,json=callCenterNode,proto3,oneof"`
}

type ListConfigEntitiesRes_ClientNodes struct {
	// Client Node entities retrieved when @entity_type in the request is ClientNode.
	// When this entity is requested, the @belongs_to_entity.type will be ignored and assumed as if were CallCenterNode.
	ClientNodes *ListConfigEntitiesRes_ClientNodeEntities `protobuf:"bytes,2,opt,name=client_nodes,json=clientNodes,proto3,oneof"`
}

type ListConfigEntitiesRes_LocationNodes struct {
	// Location Node entities retrieved when @entity_type in the request is LocationNode.
	// When this entity is requested, the @belongs_to_entity.type will be ignored and assumed as if were ClientNode.
	LocationNodes *ListConfigEntitiesRes_LocationNodeEntities `protobuf:"bytes,3,opt,name=location_nodes,json=locationNodes,proto3,oneof"`
}

type ListConfigEntitiesRes_ProgramNodes struct {
	// Program Node entities retrieved when @entity_type in the request is ProgramNode.
	// When this entity is requested, the @belongs_to_entity.type will be ignored and assumed as if were LocationNode.
	ProgramNodes *ListConfigEntitiesRes_ProgramNodeEntities `protobuf:"bytes,4,opt,name=program_nodes,json=programNodes,proto3,oneof"`
}

type ListConfigEntitiesRes_AgentGroups struct {
	// Agent Group entities retrieved when @entity_type in the request is AgentGroup.
	// Member WFM Agents returned will only include agents that have a not nil @tcn_agent_sid.
	AgentGroups *ListConfigEntitiesRes_AgentGroupEntities `protobuf:"bytes,5,opt,name=agent_groups,json=agentGroups,proto3,oneof"`
}

type ListConfigEntitiesRes_ShiftTemplates struct {
	// Shift Template entities retrieved when @entity_type in the request is ShiftTemplate.
	// When this entity is requested, the @belongs_to_entity.type will be ignored and assumed as if were ProgramNode.
	ShiftTemplates *ListConfigEntitiesRes_ShiftTemplateEntities `protobuf:"bytes,6,opt,name=shift_templates,json=shiftTemplates,proto3,oneof"`
}

type ListConfigEntitiesRes_WfmAgents struct {
	// WFM Agent entities retrieved when @entity_type in the request is WFMAgent.
	// When this entity is requested, the @belongs_to_entity.type will be ignored and assumed as if were AgentGroup.
	WfmAgents *ListConfigEntitiesRes_WFMAgentEntities `protobuf:"bytes,7,opt,name=wfm_agents,json=wfmAgents,proto3,oneof"`
}

type ListConfigEntitiesRes_PlacementRules struct {
	// Placement Rules entities retrieved when @entity_type in the request is PlacementRule.
	PlacementRules *ListConfigEntitiesRes_PlacementRuleEntities `protobuf:"bytes,8,opt,name=placement_rules,json=placementRules,proto3,oneof"`
}

type ListConfigEntitiesRes_ConstraintRules struct {
	// Constraint Rule entities retrieved when @entity_type in the request is ConstraintRule.
	ConstraintRules *ListConfigEntitiesRes_ConstraintRuleEntities `protobuf:"bytes,9,opt,name=constraint_rules,json=constraintRules,proto3,oneof"`
}

type ListConfigEntitiesRes_NonSkillActivities struct {
	// Non Skill Activity entities retrieved when @entity_type in the request is NonSkillActivity.
	// This entity supports a @belongs_to_entity.type of ScheduleScenario, and will return all non skill activities in the specified scenario.
	NonSkillActivities *ListConfigEntitiesRes_NonSkillActivityEntities `protobuf:"bytes,10,opt,name=non_skill_activities,json=nonSkillActivities,proto3,oneof"`
}

type ListConfigEntitiesRes_AgentAvailabilityPatterns struct {
	// Agent Availability entities retrieved when @entity_type in the request is AgentAvailabilityPattern.
	AgentAvailabilityPatterns *ListConfigEntitiesRes_AgentAvailabilityPatternEntities `protobuf:"bytes,11,opt,name=agent_availability_patterns,json=agentAvailabilityPatterns,proto3,oneof"`
}

type ListConfigEntitiesRes_OpenTimesPatterns struct {
	// Open Times Pattern entities retrieved when @entity_type in the request is OpenTimesPattern.
	OpenTimesPatterns *ListConfigEntitiesRes_OpenTimesPatternEntities `protobuf:"bytes,12,opt,name=open_times_patterns,json=openTimesPatterns,proto3,oneof"`
}

type ListConfigEntitiesRes_SchedulingActivity struct {
	// Scheduling Activity retrieved when @entity_type in the request is SchedulingActivity.
	SchedulingActivity *SchedulingActivity `protobuf:"bytes,13,opt,name=scheduling_activity,json=schedulingActivity,proto3,oneof"`
}

type ListConfigEntitiesRes_SkillProficiencies struct {
	// Skill Proficiency entities retrieved when @entity_type in the request is SkillProficiency.
	SkillProficiencies *ListConfigEntitiesRes_SkillProficiencyEntities `protobuf:"bytes,14,opt,name=skill_proficiencies,json=skillProficiencies,proto3,oneof"`
}

type ListConfigEntitiesRes_ScheduleScenarios struct {
	// Schedule Scenario entities retrieved when @entity_type in the request is ScheduleScenario.
	// When this entity is requested, no children will be returned regardless of the @member_depth.
	ScheduleScenarios *ListConfigEntitiesRes_ScheduleScenarioEntities `protobuf:"bytes,15,opt,name=schedule_scenarios,json=scheduleScenarios,proto3,oneof"`
}

func (*ListConfigEntitiesRes_CallCenterNode) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_ClientNodes) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_LocationNodes) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_ProgramNodes) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_AgentGroups) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_ShiftTemplates) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_WfmAgents) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_PlacementRules) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_ConstraintRules) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_NonSkillActivities) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_AgentAvailabilityPatterns) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_OpenTimesPatterns) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_SchedulingActivity) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_SkillProficiencies) isListConfigEntitiesRes_Entities() {}

func (*ListConfigEntitiesRes_ScheduleScenarios) isListConfigEntitiesRes_Entities() {}

// Message type specifying the parameters of a diagnostic
type Diagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The diagnostic level describes the class of the diagnostic message.
	Level commons.DiagnosticLevel `protobuf:"varint,1,opt,name=level,proto3,enum=api.commons.DiagnosticLevel" json:"level,omitempty"`
	// A code to describe the diagnostic when possible. Default value of General when a more specific code is not available.
	Code commons.DiagnosticCode `protobuf:"varint,2,opt,name=code,proto3,enum=api.commons.DiagnosticCode" json:"code,omitempty"`
	// The message detailing the diagnostic.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// The entity that the diagnostic was built in reference to.
	SourceEntity *ParentEntity `protobuf:"bytes,4,opt,name=source_entity,json=sourceEntity,proto3" json:"source_entity,omitempty"`
}

func (x *Diagnostic) Reset() {
	*x = Diagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostic) ProtoMessage() {}

func (x *Diagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostic.ProtoReflect.Descriptor instead.
func (*Diagnostic) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{198}
}

func (x *Diagnostic) GetLevel() commons.DiagnosticLevel {
	if x != nil {
		return x.Level
	}
	return commons.DiagnosticLevel(0)
}

func (x *Diagnostic) GetCode() commons.DiagnosticCode {
	if x != nil {
		return x.Code
	}
	return commons.DiagnosticCode(0)
}

func (x *Diagnostic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Diagnostic) GetSourceEntity() *ParentEntity {
	if x != nil {
		return x.SourceEntity
	}
	return nil
}

// Represents a group of diagnostics for a single entity
type Diagnostics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The entity that the diagnostics built reference.
	SourceEntity *ParentEntity `protobuf:"bytes,1,opt,name=source_entity,json=sourceEntity,proto3" json:"source_entity,omitempty"`
	// Diagnostics generated for the @source_entity
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *Diagnostics) Reset() {
	*x = Diagnostics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diagnostics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostics) ProtoMessage() {}

func (x *Diagnostics) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostics.ProtoReflect.Descriptor instead.
func (*Diagnostics) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{199}
}

func (x *Diagnostics) GetSourceEntity() *ParentEntity {
	if x != nil {
		return x.SourceEntity
	}
	return nil
}

func (x *Diagnostics) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the DeleteShiftInstances RPC
type DeleteShiftInstancesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of shift instances to delete.
	ShiftInstanceSids []int64 `protobuf:"varint,1,rep,packed,name=shift_instance_sids,json=shiftInstanceSids,proto3" json:"shift_instance_sids,omitempty"`
}

func (x *DeleteShiftInstancesReq) Reset() {
	*x = DeleteShiftInstancesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteShiftInstancesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShiftInstancesReq) ProtoMessage() {}

func (x *DeleteShiftInstancesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShiftInstancesReq.ProtoReflect.Descriptor instead.
func (*DeleteShiftInstancesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{200}
}

func (x *DeleteShiftInstancesReq) GetShiftInstanceSids() []int64 {
	if x != nil {
		return x.ShiftInstanceSids
	}
	return nil
}

// Response message for the DeleteShiftInstances RPC
type DeleteShiftInstancesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteShiftInstancesRes) Reset() {
	*x = DeleteShiftInstancesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteShiftInstancesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShiftInstancesRes) ProtoMessage() {}

func (x *DeleteShiftInstancesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShiftInstancesRes.ProtoReflect.Descriptor instead.
func (*DeleteShiftInstancesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{201}
}

// Request message for the BuildNodeDiagnostics RPC
type BuildNodeDiagnosticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node that @diagnostics will be associated with.
	NodeToCheck *ParentEntity `protobuf:"bytes,1,opt,name=node_to_check,json=nodeToCheck,proto3" json:"node_to_check,omitempty"`
	// ID of the schedule scenario that @node_to_check belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *BuildNodeDiagnosticsReq) Reset() {
	*x = BuildNodeDiagnosticsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildNodeDiagnosticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildNodeDiagnosticsReq) ProtoMessage() {}

func (x *BuildNodeDiagnosticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildNodeDiagnosticsReq.ProtoReflect.Descriptor instead.
func (*BuildNodeDiagnosticsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{202}
}

func (x *BuildNodeDiagnosticsReq) GetNodeToCheck() *ParentEntity {
	if x != nil {
		return x.NodeToCheck
	}
	return nil
}

func (x *BuildNodeDiagnosticsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the BuildNodeDiagnostics RPC
type BuildNodeDiagnosticsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of diagnostic reports for the given @node_to_check.
	Diagnostics []*Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	// Set of all nodes checked during the diagnostics.
	NodesChecked []*ParentEntity `protobuf:"bytes,2,rep,name=nodes_checked,json=nodesChecked,proto3" json:"nodes_checked,omitempty"`
}

func (x *BuildNodeDiagnosticsRes) Reset() {
	*x = BuildNodeDiagnosticsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildNodeDiagnosticsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildNodeDiagnosticsRes) ProtoMessage() {}

func (x *BuildNodeDiagnosticsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildNodeDiagnosticsRes.ProtoReflect.Descriptor instead.
func (*BuildNodeDiagnosticsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{203}
}

func (x *BuildNodeDiagnosticsRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *BuildNodeDiagnosticsRes) GetNodesChecked() []*ParentEntity {
	if x != nil {
		return x.NodesChecked
	}
	return nil
}

// Request message for the BuildGlobalDiagnostics RPC
type BuildGlobalDiagnosticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the schedule scenario to get diagnostics for.
	ScheduleScenarioSid int64 `protobuf:"varint,1,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *BuildGlobalDiagnosticsReq) Reset() {
	*x = BuildGlobalDiagnosticsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildGlobalDiagnosticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildGlobalDiagnosticsReq) ProtoMessage() {}

func (x *BuildGlobalDiagnosticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildGlobalDiagnosticsReq.ProtoReflect.Descriptor instead.
func (*BuildGlobalDiagnosticsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{204}
}

func (x *BuildGlobalDiagnosticsReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Response message for the BuildGlobalDiagnostics RPC
type BuildGlobalDiagnosticsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of diagnostic reports for the given @schedule_scenario_sid.
	Diagnostics []*Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	// Set of all nodes checked during the diagnostics.
	NodesChecked []*ParentEntity `protobuf:"bytes,2,rep,name=nodes_checked,json=nodesChecked,proto3" json:"nodes_checked,omitempty"`
}

func (x *BuildGlobalDiagnosticsRes) Reset() {
	*x = BuildGlobalDiagnosticsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildGlobalDiagnosticsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildGlobalDiagnosticsRes) ProtoMessage() {}

func (x *BuildGlobalDiagnosticsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildGlobalDiagnosticsRes.ProtoReflect.Descriptor instead.
func (*BuildGlobalDiagnosticsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{205}
}

func (x *BuildGlobalDiagnosticsRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *BuildGlobalDiagnosticsRes) GetNodesChecked() []*ParentEntity {
	if x != nil {
		return x.NodesChecked
	}
	return nil
}

type PublishedSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this published schedule.
	PublishedScheduleSid int64 `protobuf:"varint,1,opt,name=published_schedule_sid,json=publishedScheduleSid,proto3" json:"published_schedule_sid,omitempty"`
	// Datetime of creation.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Datetime of last update.
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	// Shifts that this schedule has.
	ShiftInstances []*ShiftInstance `protobuf:"bytes,4,rep,name=shift_instances,json=shiftInstances,proto3" json:"shift_instances,omitempty"`
	// Performance metrics that this schedule has.
	PerformanceMetrics []*PerformanceMetric `protobuf:"bytes,5,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
}

func (x *PublishedSchedule) Reset() {
	*x = PublishedSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedSchedule) ProtoMessage() {}

func (x *PublishedSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedSchedule.ProtoReflect.Descriptor instead.
func (*PublishedSchedule) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{206}
}

func (x *PublishedSchedule) GetPublishedScheduleSid() int64 {
	if x != nil {
		return x.PublishedScheduleSid
	}
	return 0
}

func (x *PublishedSchedule) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PublishedSchedule) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *PublishedSchedule) GetShiftInstances() []*ShiftInstance {
	if x != nil {
		return x.ShiftInstances
	}
	return nil
}

func (x *PublishedSchedule) GetPerformanceMetrics() []*PerformanceMetric {
	if x != nil {
		return x.PerformanceMetrics
	}
	return nil
}

// Represents a draft schedule
type DraftSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// Time that this the schedule was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Time that this schedule was last updated.
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	// Name of the draft schedule.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// A description of the draft schedule.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Datetime range over which this draft schedule spans.
	// Is the range used when copying shifts from published schedule.
	// Also used when publishing shifts from the draft to the published schedule.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,6,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// ID of the user who originally drafted the schedule.
	CreatedByUserId string `protobuf:"bytes,7,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	// The following field is only return of List requests of the entity.
	// Shifts that this schedule has.
	ShiftInstances []*ShiftInstance `protobuf:"bytes,8,rep,name=shift_instances,json=shiftInstances,proto3" json:"shift_instances,omitempty"`
	// Performance metrics that this schedule has.
	PerformanceMetrics []*PerformanceMetric `protobuf:"bytes,9,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
	// Schedule Scenario of the draft schedule.
	ScheduleScenarioSid int64 `protobuf:"varint,10,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *DraftSchedule) Reset() {
	*x = DraftSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DraftSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DraftSchedule) ProtoMessage() {}

func (x *DraftSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DraftSchedule.ProtoReflect.Descriptor instead.
func (*DraftSchedule) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{207}
}

func (x *DraftSchedule) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *DraftSchedule) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DraftSchedule) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *DraftSchedule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DraftSchedule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DraftSchedule) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *DraftSchedule) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *DraftSchedule) GetShiftInstances() []*ShiftInstance {
	if x != nil {
		return x.ShiftInstances
	}
	return nil
}

func (x *DraftSchedule) GetPerformanceMetrics() []*PerformanceMetric {
	if x != nil {
		return x.PerformanceMetrics
	}
	return nil
}

func (x *DraftSchedule) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// Represents a performance metric
type PerformanceMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime range over which the metrics were determined.
	DateRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// The total calls required over the @date_range, as determined by the forecast.
	TotalCallsRequired int32 `protobuf:"varint,2,opt,name=total_calls_required,json=totalCallsRequired,proto3" json:"total_calls_required,omitempty"`
	// The total calls the the schedule is likely to address with the current shift instances.
	TotalFtesAchieved int32 `protobuf:"varint,3,opt,name=total_ftes_achieved,json=totalFtesAchieved,proto3" json:"total_ftes_achieved,omitempty"`
	// The number of intervals with required calls.
	NumIntervalsWithRequiredCalls int32 `protobuf:"varint,4,opt,name=num_intervals_with_required_calls,json=numIntervalsWithRequiredCalls,proto3" json:"num_intervals_with_required_calls,omitempty"`
	// The number of intervals with FTE's but no schedules.
	NumIntervalsWithFtesButNoSchedules int32 `protobuf:"varint,5,opt,name=num_intervals_with_ftes_but_no_schedules,json=numIntervalsWithFtesButNoSchedules,proto3" json:"num_intervals_with_ftes_but_no_schedules,omitempty"`
	// the number of intervals with FTE's but no forecasted calls.
	NumIntervalsWithFtesButNoForecastedCalls int32 `protobuf:"varint,6,opt,name=num_intervals_with_ftes_but_no_forecasted_calls,json=numIntervalsWithFtesButNoForecastedCalls,proto3" json:"num_intervals_with_ftes_but_no_forecasted_calls,omitempty"`
	// The total calls forecsted where there are no FTE's scheduled.
	TotalUnscheduledCalls int32 `protobuf:"varint,7,opt,name=total_unscheduled_calls,json=totalUnscheduledCalls,proto3" json:"total_unscheduled_calls,omitempty"`
	// The total number of FTE's scheduled where there were no forecasted calls.
	TotalUnnecessaryFtes int32 `protobuf:"varint,8,opt,name=total_unnecessary_ftes,json=totalUnnecessaryFtes,proto3" json:"total_unnecessary_ftes,omitempty"`
	// Width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,9,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// The type of metric being reported.
	MetricType commons.PerformanceMetricType `protobuf:"varint,10,opt,name=metric_type,json=metricType,proto3,enum=api.commons.PerformanceMetricType" json:"metric_type,omitempty"`
	// One value will be set between @fte_intervals and @service_level_intervals, depending on @metric_type.
	// If @metric_type is FTE_REQUIRED_VS_ACHIEVED_SIMPLE then the intervals will be stored in @fte_intervals
	// If @metric_type is SERVICE_LEVEL_ANALYSIS then the intervals will be stored in @service_level_intervals
	// Interval set comparing the number of FTE required to the number achieved.
	FteIntervals []*FTERequiredVsAchievedInterval `protobuf:"bytes,11,rep,name=fte_intervals,json=fteIntervals,proto3" json:"fte_intervals,omitempty"`
	// Interval set checking the service level achieved as a percentage.
	ServiceLevelIntervals []*ServiceLevelInterval `protobuf:"bytes,12,rep,name=service_level_intervals,json=serviceLevelIntervals,proto3" json:"service_level_intervals,omitempty"`
}

func (x *PerformanceMetric) Reset() {
	*x = PerformanceMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMetric) ProtoMessage() {}

func (x *PerformanceMetric) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMetric.ProtoReflect.Descriptor instead.
func (*PerformanceMetric) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{208}
}

func (x *PerformanceMetric) GetDateRange() *commons.DatetimeRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *PerformanceMetric) GetTotalCallsRequired() int32 {
	if x != nil {
		return x.TotalCallsRequired
	}
	return 0
}

func (x *PerformanceMetric) GetTotalFtesAchieved() int32 {
	if x != nil {
		return x.TotalFtesAchieved
	}
	return 0
}

func (x *PerformanceMetric) GetNumIntervalsWithRequiredCalls() int32 {
	if x != nil {
		return x.NumIntervalsWithRequiredCalls
	}
	return 0
}

func (x *PerformanceMetric) GetNumIntervalsWithFtesButNoSchedules() int32 {
	if x != nil {
		return x.NumIntervalsWithFtesButNoSchedules
	}
	return 0
}

func (x *PerformanceMetric) GetNumIntervalsWithFtesButNoForecastedCalls() int32 {
	if x != nil {
		return x.NumIntervalsWithFtesButNoForecastedCalls
	}
	return 0
}

func (x *PerformanceMetric) GetTotalUnscheduledCalls() int32 {
	if x != nil {
		return x.TotalUnscheduledCalls
	}
	return 0
}

func (x *PerformanceMetric) GetTotalUnnecessaryFtes() int32 {
	if x != nil {
		return x.TotalUnnecessaryFtes
	}
	return 0
}

func (x *PerformanceMetric) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *PerformanceMetric) GetMetricType() commons.PerformanceMetricType {
	if x != nil {
		return x.MetricType
	}
	return commons.PerformanceMetricType(0)
}

func (x *PerformanceMetric) GetFteIntervals() []*FTERequiredVsAchievedInterval {
	if x != nil {
		return x.FteIntervals
	}
	return nil
}

func (x *PerformanceMetric) GetServiceLevelIntervals() []*ServiceLevelInterval {
	if x != nil {
		return x.ServiceLevelIntervals
	}
	return nil
}

// Represents a service level interval.
type ServiceLevelInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start time of the interval.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// The service level achieved as a percent value, ranging from 0.0 to 1.0
	ServiceLevelAchieved float32 `protobuf:"fixed32,2,opt,name=service_level_achieved,json=serviceLevelAchieved,proto3" json:"service_level_achieved,omitempty"`
}

func (x *ServiceLevelInterval) Reset() {
	*x = ServiceLevelInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceLevelInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLevelInterval) ProtoMessage() {}

func (x *ServiceLevelInterval) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLevelInterval.ProtoReflect.Descriptor instead.
func (*ServiceLevelInterval) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{209}
}

func (x *ServiceLevelInterval) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *ServiceLevelInterval) GetServiceLevelAchieved() float32 {
	if x != nil {
		return x.ServiceLevelAchieved
	}
	return 0
}

// Represents an fte required vs achieved interval.
type FTERequiredVsAchievedInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start time of the interval.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// Number of required calls in the interval.
	RequiredCalls int32 `protobuf:"varint,2,opt,name=required_calls,json=requiredCalls,proto3" json:"required_calls,omitempty"`
	// Number of achieved FTE's in the interval.
	AchievedFtes int32 `protobuf:"varint,3,opt,name=achieved_ftes,json=achievedFtes,proto3" json:"achieved_ftes,omitempty"`
}

func (x *FTERequiredVsAchievedInterval) Reset() {
	*x = FTERequiredVsAchievedInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FTERequiredVsAchievedInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FTERequiredVsAchievedInterval) ProtoMessage() {}

func (x *FTERequiredVsAchievedInterval) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FTERequiredVsAchievedInterval.ProtoReflect.Descriptor instead.
func (*FTERequiredVsAchievedInterval) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{210}
}

func (x *FTERequiredVsAchievedInterval) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *FTERequiredVsAchievedInterval) GetRequiredCalls() int32 {
	if x != nil {
		return x.RequiredCalls
	}
	return 0
}

func (x *FTERequiredVsAchievedInterval) GetAchievedFtes() int32 {
	if x != nil {
		return x.AchievedFtes
	}
	return 0
}

// Represents fte required
// Used in GetPublishedScheduleRequiredCallsRes and GetDraftScheduleRequiredCallsRes.
type RequiredCallsInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start time of the interval.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// Number of required calls in the interval.
	RequiredCalls int32 `protobuf:"varint,2,opt,name=required_calls,json=requiredCalls,proto3" json:"required_calls,omitempty"`
}

func (x *RequiredCallsInterval) Reset() {
	*x = RequiredCallsInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequiredCallsInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredCallsInterval) ProtoMessage() {}

func (x *RequiredCallsInterval) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredCallsInterval.ProtoReflect.Descriptor instead.
func (*RequiredCallsInterval) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{211}
}

func (x *RequiredCallsInterval) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *RequiredCallsInterval) GetRequiredCalls() int32 {
	if x != nil {
		return x.RequiredCalls
	}
	return 0
}

// Represents a shift instance
type ShiftInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the shift instance.
	ShiftInstanceSid int64 `protobuf:"varint,1,opt,name=shift_instance_sid,json=shiftInstanceSid,proto3" json:"shift_instance_sid,omitempty"`
	// The start time for this shift instance
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// Tells the scheduler to leave this instance in tact when performing 'build schedule'.
	// If set to false, the instance will not be locked and may be lost when a new schedule is built.
	IsLocked bool `protobuf:"varint,3,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	// The duration of this shift instance in minutes.
	WidthInMinutes int32 `protobuf:"varint,4,opt,name=width_in_minutes,json=widthInMinutes,proto3" json:"width_in_minutes,omitempty"`
	// ID of shift template that this shift instance belongs to.
	ShiftTemplateSid int64 `protobuf:"varint,5,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
	// ID of the program node that the shift instance belongs to, which may be different that the one that the @parent_shift_template_sid belongs to.
	OriginatingProgramNodeSid int64 `protobuf:"varint,6,opt,name=originating_program_node_sid,json=originatingProgramNodeSid,proto3" json:"originating_program_node_sid,omitempty"`
	// ID of the schedule that this shift instance belongs to.
	// May either point to a published or draft schedule.
	ScheduleSid int64 `protobuf:"varint,7,opt,name=schedule_sid,json=scheduleSid,proto3" json:"schedule_sid,omitempty"`
	// ID for the wfm agent that is scheduled to this shift.
	WfmAgentSid int64 `protobuf:"varint,8,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// Type of schedule that this shift instance belongs to.
	ScheduleType commons.ScheduleType `protobuf:"varint,9,opt,name=schedule_type,json=scheduleType,proto3,enum=api.commons.ScheduleType" json:"schedule_type,omitempty"`
	// The following field is only returned in List requests of the entity.
	// The ordered set of shift segments for this shift instance.
	ShiftSegments []*ShiftSegment `protobuf:"bytes,10,rep,name=shift_segments,json=shiftSegments,proto3" json:"shift_segments,omitempty"`
	// The shift template used to create this shift instance.
	ShiftTemplate *ShiftTemplate `protobuf:"bytes,11,opt,name=shift_template,json=shiftTemplate,proto3" json:"shift_template,omitempty"`
}

func (x *ShiftInstance) Reset() {
	*x = ShiftInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiftInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftInstance) ProtoMessage() {}

func (x *ShiftInstance) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftInstance.ProtoReflect.Descriptor instead.
func (*ShiftInstance) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{212}
}

func (x *ShiftInstance) GetShiftInstanceSid() int64 {
	if x != nil {
		return x.ShiftInstanceSid
	}
	return 0
}

func (x *ShiftInstance) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *ShiftInstance) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *ShiftInstance) GetWidthInMinutes() int32 {
	if x != nil {
		return x.WidthInMinutes
	}
	return 0
}

func (x *ShiftInstance) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

func (x *ShiftInstance) GetOriginatingProgramNodeSid() int64 {
	if x != nil {
		return x.OriginatingProgramNodeSid
	}
	return 0
}

func (x *ShiftInstance) GetScheduleSid() int64 {
	if x != nil {
		return x.ScheduleSid
	}
	return 0
}

func (x *ShiftInstance) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

func (x *ShiftInstance) GetScheduleType() commons.ScheduleType {
	if x != nil {
		return x.ScheduleType
	}
	return commons.ScheduleType(0)
}

func (x *ShiftInstance) GetShiftSegments() []*ShiftSegment {
	if x != nil {
		return x.ShiftSegments
	}
	return nil
}

func (x *ShiftInstance) GetShiftTemplate() *ShiftTemplate {
	if x != nil {
		return x.ShiftTemplate
	}
	return nil
}

// Represents a shift segment
type ShiftSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this shift segment.
	ShiftSegmentSid int64 `protobuf:"varint,1,opt,name=shift_segment_sid,json=shiftSegmentSid,proto3" json:"shift_segment_sid,omitempty"`
	// ID of the shift instance that this segment belongs to.
	ShiftInstanceSid int64 `protobuf:"varint,2,opt,name=shift_instance_sid,json=shiftInstanceSid,proto3" json:"shift_instance_sid,omitempty"`
	// Order that this segment has in it's parent shift instance.
	OrderInShiftInstance int32 `protobuf:"varint,3,opt,name=order_in_shift_instance,json=orderInShiftInstance,proto3" json:"order_in_shift_instance,omitempty"`
	// Width of this shift segment in minutes.
	WidthInMinutes int32 `protobuf:"varint,4,opt,name=width_in_minutes,json=widthInMinutes,proto3" json:"width_in_minutes,omitempty"`
	// How long after the shift instance start time, the segment to begin.
	StartMinuteInShift int32 `protobuf:"varint,5,opt,name=start_minute_in_shift,json=startMinuteInShift,proto3" json:"start_minute_in_shift,omitempty"`
	// Scheduling activity sid of this shift segment.
	SchedulingActivitySid int64 `protobuf:"varint,7,opt,name=scheduling_activity_sid,json=schedulingActivitySid,proto3" json:"scheduling_activity_sid,omitempty"`
	// The following field is only returned in List requests of the entity.
	// The scheduling activity referred to by @scheduling_activity_sid
	SchedulingActivity *SchedulingActivity `protobuf:"bytes,8,opt,name=scheduling_activity,json=schedulingActivity,proto3" json:"scheduling_activity,omitempty"`
}

func (x *ShiftSegment) Reset() {
	*x = ShiftSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiftSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftSegment) ProtoMessage() {}

func (x *ShiftSegment) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftSegment.ProtoReflect.Descriptor instead.
func (*ShiftSegment) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{213}
}

func (x *ShiftSegment) GetShiftSegmentSid() int64 {
	if x != nil {
		return x.ShiftSegmentSid
	}
	return 0
}

func (x *ShiftSegment) GetShiftInstanceSid() int64 {
	if x != nil {
		return x.ShiftInstanceSid
	}
	return 0
}

func (x *ShiftSegment) GetOrderInShiftInstance() int32 {
	if x != nil {
		return x.OrderInShiftInstance
	}
	return 0
}

func (x *ShiftSegment) GetWidthInMinutes() int32 {
	if x != nil {
		return x.WidthInMinutes
	}
	return 0
}

func (x *ShiftSegment) GetStartMinuteInShift() int32 {
	if x != nil {
		return x.StartMinuteInShift
	}
	return 0
}

func (x *ShiftSegment) GetSchedulingActivitySid() int64 {
	if x != nil {
		return x.SchedulingActivitySid
	}
	return 0
}

func (x *ShiftSegment) GetSchedulingActivity() *SchedulingActivity {
	if x != nil {
		return x.SchedulingActivity
	}
	return nil
}

// Request message for the GetPublishedSchedule RPC
type GetPublishedScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date range to of the published to return.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Set to true to include shift instances.
	IncludeShiftInstances bool `protobuf:"varint,2,opt,name=include_shift_instances,json=includeShiftInstances,proto3" json:"include_shift_instances,omitempty"`
	// Set to true to include shift template in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	IncludeShiftTemplate bool `protobuf:"varint,3,opt,name=include_shift_template,json=includeShiftTemplate,proto3" json:"include_shift_template,omitempty"`
	// Set to true to include shift segments in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	IncludeShiftSegments bool `protobuf:"varint,4,opt,name=include_shift_segments,json=includeShiftSegments,proto3" json:"include_shift_segments,omitempty"`
	// Set to true to include scheduling activity in each of the returned shift segments.
	// Only effective when include_shift_instances and include_shift_segments are also set to true.
	IncludeSchedulingActivity bool `protobuf:"varint,5,opt,name=include_scheduling_activity,json=includeSchedulingActivity,proto3" json:"include_scheduling_activity,omitempty"`
	// Set to true to include non skill activity in each of the returned scheduling activities.
	// Only effective when include_scheduling_activity, include_shift_segments and include_shift_instances are also set to true.
	IncludeActivity bool `protobuf:"varint,6,opt,name=include_activity,json=includeActivity,proto3" json:"include_activity,omitempty"`
	// The the shift instances will be associated with the origin node of @node_selector or the origin node of it's children program nodes.
	// Optional field, if left nil all matching the given parameters will be included.
	NodeSelector *ParentEntity `protobuf:"bytes,7,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
}

func (x *GetPublishedScheduleReq) Reset() {
	*x = GetPublishedScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublishedScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishedScheduleReq) ProtoMessage() {}

func (x *GetPublishedScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishedScheduleReq.ProtoReflect.Descriptor instead.
func (*GetPublishedScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{214}
}

func (x *GetPublishedScheduleReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *GetPublishedScheduleReq) GetIncludeShiftInstances() bool {
	if x != nil {
		return x.IncludeShiftInstances
	}
	return false
}

func (x *GetPublishedScheduleReq) GetIncludeShiftTemplate() bool {
	if x != nil {
		return x.IncludeShiftTemplate
	}
	return false
}

func (x *GetPublishedScheduleReq) GetIncludeShiftSegments() bool {
	if x != nil {
		return x.IncludeShiftSegments
	}
	return false
}

func (x *GetPublishedScheduleReq) GetIncludeSchedulingActivity() bool {
	if x != nil {
		return x.IncludeSchedulingActivity
	}
	return false
}

func (x *GetPublishedScheduleReq) GetIncludeActivity() bool {
	if x != nil {
		return x.IncludeActivity
	}
	return false
}

func (x *GetPublishedScheduleReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

// Response message for the GetPublishedSchedule RPC
type GetPublishedScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Published schedule found.
	PublishedSchedule *PublishedSchedule `protobuf:"bytes,1,opt,name=published_schedule,json=publishedSchedule,proto3" json:"published_schedule,omitempty"`
}

func (x *GetPublishedScheduleRes) Reset() {
	*x = GetPublishedScheduleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublishedScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishedScheduleRes) ProtoMessage() {}

func (x *GetPublishedScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishedScheduleRes.ProtoReflect.Descriptor instead.
func (*GetPublishedScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{215}
}

func (x *GetPublishedScheduleRes) GetPublishedSchedule() *PublishedSchedule {
	if x != nil {
		return x.PublishedSchedule
	}
	return nil
}

// Request message for the GetPublishedScheduleRequiredCalls RPC
type GetPublishedScheduleRequiredCallsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date range to return.
	ViewingRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=viewing_range,json=viewingRange,proto3" json:"viewing_range,omitempty"`
	// Width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,2,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
}

func (x *GetPublishedScheduleRequiredCallsReq) Reset() {
	*x = GetPublishedScheduleRequiredCallsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublishedScheduleRequiredCallsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishedScheduleRequiredCallsReq) ProtoMessage() {}

func (x *GetPublishedScheduleRequiredCallsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishedScheduleRequiredCallsReq.ProtoReflect.Descriptor instead.
func (*GetPublishedScheduleRequiredCallsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{216}
}

func (x *GetPublishedScheduleRequiredCallsReq) GetViewingRange() *commons.DatetimeRange {
	if x != nil {
		return x.ViewingRange
	}
	return nil
}

func (x *GetPublishedScheduleRequiredCallsReq) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

// Response message for the GetPublishedScheduleRequiredCalls RPC
type GetPublishedScheduleRequiredCallsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,1,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// Required-calls intervals for the published schedule.
	RequiredCallsIntervals []*RequiredCallsInterval `protobuf:"bytes,2,rep,name=required_calls_intervals,json=requiredCallsIntervals,proto3" json:"required_calls_intervals,omitempty"`
}

func (x *GetPublishedScheduleRequiredCallsRes) Reset() {
	*x = GetPublishedScheduleRequiredCallsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublishedScheduleRequiredCallsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishedScheduleRequiredCallsRes) ProtoMessage() {}

func (x *GetPublishedScheduleRequiredCallsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishedScheduleRequiredCallsRes.ProtoReflect.Descriptor instead.
func (*GetPublishedScheduleRequiredCallsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{217}
}

func (x *GetPublishedScheduleRequiredCallsRes) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *GetPublishedScheduleRequiredCallsRes) GetRequiredCallsIntervals() []*RequiredCallsInterval {
	if x != nil {
		return x.RequiredCallsIntervals
	}
	return nil
}

// Request message for the GetDraftScheduleRequiredCalls RPC
type GetDraftScheduleRequiredCallsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the draft schedule.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// Date range to return.
	ViewingRange *commons.DatetimeRange `protobuf:"bytes,2,opt,name=viewing_range,json=viewingRange,proto3" json:"viewing_range,omitempty"`
	// Width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,3,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
}

func (x *GetDraftScheduleRequiredCallsReq) Reset() {
	*x = GetDraftScheduleRequiredCallsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDraftScheduleRequiredCallsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDraftScheduleRequiredCallsReq) ProtoMessage() {}

func (x *GetDraftScheduleRequiredCallsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDraftScheduleRequiredCallsReq.ProtoReflect.Descriptor instead.
func (*GetDraftScheduleRequiredCallsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{218}
}

func (x *GetDraftScheduleRequiredCallsReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *GetDraftScheduleRequiredCallsReq) GetViewingRange() *commons.DatetimeRange {
	if x != nil {
		return x.ViewingRange
	}
	return nil
}

func (x *GetDraftScheduleRequiredCallsReq) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

// Response message for the GetDraftScheduleRequiredCalls RPC
type GetDraftScheduleRequiredCallsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,1,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// Required-calls intervals for the published schedule.
	RequiredCallsIntervals []*RequiredCallsInterval `protobuf:"bytes,2,rep,name=required_calls_intervals,json=requiredCallsIntervals,proto3" json:"required_calls_intervals,omitempty"`
}

func (x *GetDraftScheduleRequiredCallsRes) Reset() {
	*x = GetDraftScheduleRequiredCallsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDraftScheduleRequiredCallsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDraftScheduleRequiredCallsRes) ProtoMessage() {}

func (x *GetDraftScheduleRequiredCallsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDraftScheduleRequiredCallsRes.ProtoReflect.Descriptor instead.
func (*GetDraftScheduleRequiredCallsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{219}
}

func (x *GetDraftScheduleRequiredCallsRes) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *GetDraftScheduleRequiredCallsRes) GetRequiredCallsIntervals() []*RequiredCallsInterval {
	if x != nil {
		return x.RequiredCallsIntervals
	}
	return nil
}

// Request message for the CreateDraftSchedule RPC
type CreateDraftScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the draft schedule.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the draft schedule.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Range to retrieve shift instances and segments from the published schedule to use for this draft schedule.
	SchedulingRange *commons.DatetimeRange `protobuf:"bytes,3,opt,name=scheduling_range,json=schedulingRange,proto3" json:"scheduling_range,omitempty"`
}

func (x *CreateDraftScheduleReq) Reset() {
	*x = CreateDraftScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDraftScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDraftScheduleReq) ProtoMessage() {}

func (x *CreateDraftScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDraftScheduleReq.ProtoReflect.Descriptor instead.
func (*CreateDraftScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{220}
}

func (x *CreateDraftScheduleReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDraftScheduleReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateDraftScheduleReq) GetSchedulingRange() *commons.DatetimeRange {
	if x != nil {
		return x.SchedulingRange
	}
	return nil
}

// Response message for the CreateDraftSchedule RPC
type CreateDraftScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created draft schedule.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
}

func (x *CreateDraftScheduleRes) Reset() {
	*x = CreateDraftScheduleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDraftScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDraftScheduleRes) ProtoMessage() {}

func (x *CreateDraftScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDraftScheduleRes.ProtoReflect.Descriptor instead.
func (*CreateDraftScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{221}
}

func (x *CreateDraftScheduleRes) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

// Request message for the UpdateDraftSchedule RPC.
type UpdateDraftScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule to be updated.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// Name of the draft schedule.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the draft schedule.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Range to retrieve shift instances and segments from the published schedule to use for this draft schedule.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,4,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Set to true to delete any shift instances belonging to the draft schedule, which are outside of the new @datetime_range.
	// If false, instances outside of the new @datetime_range will be retained, for use if the datetime range is expanded to cover the instances in the future.
	DeleteShiftsNotInRange bool `protobuf:"varint,5,opt,name=delete_shifts_not_in_range,json=deleteShiftsNotInRange,proto3" json:"delete_shifts_not_in_range,omitempty"`
	// Set to true to copy shift instances from the published schedule into regions of the schedule with no shift instances.
	CopyShiftsIntoNewRange bool `protobuf:"varint,6,opt,name=copy_shifts_into_new_range,json=copyShiftsIntoNewRange,proto3" json:"copy_shifts_into_new_range,omitempty"`
	// Set to true to get the draft schedule with the updated schedule range, shift instances, and shift segments
	GetUpdatedShifts bool `protobuf:"varint,7,opt,name=get_updated_shifts,json=getUpdatedShifts,proto3" json:"get_updated_shifts,omitempty"`
}

func (x *UpdateDraftScheduleReq) Reset() {
	*x = UpdateDraftScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDraftScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDraftScheduleReq) ProtoMessage() {}

func (x *UpdateDraftScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDraftScheduleReq.ProtoReflect.Descriptor instead.
func (*UpdateDraftScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{222}
}

func (x *UpdateDraftScheduleReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *UpdateDraftScheduleReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDraftScheduleReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateDraftScheduleReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *UpdateDraftScheduleReq) GetDeleteShiftsNotInRange() bool {
	if x != nil {
		return x.DeleteShiftsNotInRange
	}
	return false
}

func (x *UpdateDraftScheduleReq) GetCopyShiftsIntoNewRange() bool {
	if x != nil {
		return x.CopyShiftsIntoNewRange
	}
	return false
}

func (x *UpdateDraftScheduleReq) GetGetUpdatedShifts() bool {
	if x != nil {
		return x.GetUpdatedShifts
	}
	return false
}

// Response message for the UpdateDraftSchedule RPC.
type UpdateDraftScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly updated draft schedule.
	DraftSchedule *DraftSchedule `protobuf:"bytes,1,opt,name=draft_schedule,json=draftSchedule,proto3" json:"draft_schedule,omitempty"`
}

func (x *UpdateDraftScheduleRes) Reset() {
	*x = UpdateDraftScheduleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDraftScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDraftScheduleRes) ProtoMessage() {}

func (x *UpdateDraftScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDraftScheduleRes.ProtoReflect.Descriptor instead.
func (*UpdateDraftScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{223}
}

func (x *UpdateDraftScheduleRes) GetDraftSchedule() *DraftSchedule {
	if x != nil {
		return x.DraftSchedule
	}
	return nil
}

// Request message for the BuildDraftSchedule RPC.
type BuildDraftScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// ID of the node's schedule scenario sid.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
	// Datetime range to set for the schedule scenario used to make the draft schedule.
	// If left blank, the current scheduling range for the scenario will be used
	ScheduleScenarioSchedulingRange *commons.DatetimeRange `protobuf:"bytes,3,opt,name=schedule_scenario_scheduling_range,json=scheduleScenarioSchedulingRange,proto3" json:"schedule_scenario_scheduling_range,omitempty"`
	// The node that the shifts should be associated with.
	NodeSelector *ParentEntity `protobuf:"bytes,4,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// Set to true to include shift instances.
	IncludeShiftInstances bool `protobuf:"varint,5,opt,name=include_shift_instances,json=includeShiftInstances,proto3" json:"include_shift_instances,omitempty"`
	// Set to true to include shift template in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	IncludeShiftTemplate bool `protobuf:"varint,6,opt,name=include_shift_template,json=includeShiftTemplate,proto3" json:"include_shift_template,omitempty"`
	// Set to true to include shift segments in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	IncludeShiftSegments bool `protobuf:"varint,7,opt,name=include_shift_segments,json=includeShiftSegments,proto3" json:"include_shift_segments,omitempty"`
	// Set to true to include scheduling activity in each of the returned shift segments.
	// Only effective when include_shift_instances and include_shift_segments are also set to true.
	IncludeSchedulingActivity bool `protobuf:"varint,8,opt,name=include_scheduling_activity,json=includeSchedulingActivity,proto3" json:"include_scheduling_activity,omitempty"`
	// Set to true to include non skill activity in each of the returned scheduling activities.
	// Only effective when include_scheduling_activity, include_shift_segments and include_shift_instances are also set to true.
	IncludeActivity bool `protobuf:"varint,9,opt,name=include_activity,json=includeActivity,proto3" json:"include_activity,omitempty"`
}

func (x *BuildDraftScheduleReq) Reset() {
	*x = BuildDraftScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildDraftScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildDraftScheduleReq) ProtoMessage() {}

func (x *BuildDraftScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildDraftScheduleReq.ProtoReflect.Descriptor instead.
func (*BuildDraftScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{224}
}

func (x *BuildDraftScheduleReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *BuildDraftScheduleReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

func (x *BuildDraftScheduleReq) GetScheduleScenarioSchedulingRange() *commons.DatetimeRange {
	if x != nil {
		return x.ScheduleScenarioSchedulingRange
	}
	return nil
}

func (x *BuildDraftScheduleReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *BuildDraftScheduleReq) GetIncludeShiftInstances() bool {
	if x != nil {
		return x.IncludeShiftInstances
	}
	return false
}

func (x *BuildDraftScheduleReq) GetIncludeShiftTemplate() bool {
	if x != nil {
		return x.IncludeShiftTemplate
	}
	return false
}

func (x *BuildDraftScheduleReq) GetIncludeShiftSegments() bool {
	if x != nil {
		return x.IncludeShiftSegments
	}
	return false
}

func (x *BuildDraftScheduleReq) GetIncludeSchedulingActivity() bool {
	if x != nil {
		return x.IncludeSchedulingActivity
	}
	return false
}

func (x *BuildDraftScheduleReq) GetIncludeActivity() bool {
	if x != nil {
		return x.IncludeActivity
	}
	return false
}

// Response message for the BuildDraftSchedule RPC
type BuildDraftScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The built draft schedule.
	DraftSchedule *DraftSchedule `protobuf:"bytes,1,opt,name=draft_schedule,json=draftSchedule,proto3" json:"draft_schedule,omitempty"`
	// Set of diagnostic reports for the given @draft_schedule_sid.
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *BuildDraftScheduleRes) Reset() {
	*x = BuildDraftScheduleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildDraftScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildDraftScheduleRes) ProtoMessage() {}

func (x *BuildDraftScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildDraftScheduleRes.ProtoReflect.Descriptor instead.
func (*BuildDraftScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{225}
}

func (x *BuildDraftScheduleRes) GetDraftSchedule() *DraftSchedule {
	if x != nil {
		return x.DraftSchedule
	}
	return nil
}

func (x *BuildDraftScheduleRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the PublishDraftSchedule RPC
type PublishDraftScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule being published.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// Node that the shift instances will belong to.
	NodeSelector *ParentEntity `protobuf:"bytes,2,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// Date range to of the drafts to publish.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,3,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Include fields determine what the returned published schedule will include
	// Set to true to include shift instances.
	IncludeShiftInstances bool `protobuf:"varint,4,opt,name=include_shift_instances,json=includeShiftInstances,proto3" json:"include_shift_instances,omitempty"`
	// Set to true to include shift template in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	IncludeShiftTemplate bool `protobuf:"varint,5,opt,name=include_shift_template,json=includeShiftTemplate,proto3" json:"include_shift_template,omitempty"`
	// Set to true to include shift segments in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	IncludeShiftSegments bool `protobuf:"varint,6,opt,name=include_shift_segments,json=includeShiftSegments,proto3" json:"include_shift_segments,omitempty"`
	// Set to true to include scheduling activity in each of the returned shift segments.
	// Only effective when include_shift_instances and include_shift_segments are also set to true.
	IncludeSchedulingActivity bool `protobuf:"varint,7,opt,name=include_scheduling_activity,json=includeSchedulingActivity,proto3" json:"include_scheduling_activity,omitempty"`
	// Set to true to include non skill activity in each of the returned scheduling activities.
	// Only effective when include_scheduling_activity, include_shift_segments and include_shift_instances are also set to true.
	IncludeActivity bool `protobuf:"varint,8,opt,name=include_activity,json=includeActivity,proto3" json:"include_activity,omitempty"`
	// If set to true, it will publish the schedule regardless of any diagnostics errors,
	// otherwise it will return those diagnostic errors and not publish the schedule
	IgnoreDiagnosticsErrors bool `protobuf:"varint,9,opt,name=ignore_diagnostics_errors,json=ignoreDiagnosticsErrors,proto3" json:"ignore_diagnostics_errors,omitempty"`
}

func (x *PublishDraftScheduleReq) Reset() {
	*x = PublishDraftScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishDraftScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDraftScheduleReq) ProtoMessage() {}

func (x *PublishDraftScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDraftScheduleReq.ProtoReflect.Descriptor instead.
func (*PublishDraftScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{226}
}

func (x *PublishDraftScheduleReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *PublishDraftScheduleReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *PublishDraftScheduleReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *PublishDraftScheduleReq) GetIncludeShiftInstances() bool {
	if x != nil {
		return x.IncludeShiftInstances
	}
	return false
}

func (x *PublishDraftScheduleReq) GetIncludeShiftTemplate() bool {
	if x != nil {
		return x.IncludeShiftTemplate
	}
	return false
}

func (x *PublishDraftScheduleReq) GetIncludeShiftSegments() bool {
	if x != nil {
		return x.IncludeShiftSegments
	}
	return false
}

func (x *PublishDraftScheduleReq) GetIncludeSchedulingActivity() bool {
	if x != nil {
		return x.IncludeSchedulingActivity
	}
	return false
}

func (x *PublishDraftScheduleReq) GetIncludeActivity() bool {
	if x != nil {
		return x.IncludeActivity
	}
	return false
}

func (x *PublishDraftScheduleReq) GetIgnoreDiagnosticsErrors() bool {
	if x != nil {
		return x.IgnoreDiagnosticsErrors
	}
	return false
}

// Response message for the PublishDraftSchedule RPC
type PublishDraftScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resulting Published schedule.
	PublishedSchedule *PublishedSchedule `protobuf:"bytes,1,opt,name=published_schedule,json=publishedSchedule,proto3" json:"published_schedule,omitempty"`
	// Any diagnostics that were produced while publishing the schedule
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *PublishDraftScheduleRes) Reset() {
	*x = PublishDraftScheduleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishDraftScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDraftScheduleRes) ProtoMessage() {}

func (x *PublishDraftScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDraftScheduleRes.ProtoReflect.Descriptor instead.
func (*PublishDraftScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{227}
}

func (x *PublishDraftScheduleRes) GetPublishedSchedule() *PublishedSchedule {
	if x != nil {
		return x.PublishedSchedule
	}
	return nil
}

func (x *PublishDraftScheduleRes) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the GetDraftSchedule RPC
type GetDraftScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule to return.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// Datetime range to set for the schedule scenario used to make the draft schedule.
	// If left blank, the current scheduling range for the scenario will be used
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,2,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Set to true to include shift instances.
	IncludeShiftInstances bool `protobuf:"varint,3,opt,name=include_shift_instances,json=includeShiftInstances,proto3" json:"include_shift_instances,omitempty"`
	// Set to true to include shift template in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	IncludeShiftTemplate bool `protobuf:"varint,4,opt,name=include_shift_template,json=includeShiftTemplate,proto3" json:"include_shift_template,omitempty"`
	// Set to true to include shift segments in each of the returned shift instances.
	// Only effective when include_shift_instances is also set to true.
	IncludeShiftSegments bool `protobuf:"varint,5,opt,name=include_shift_segments,json=includeShiftSegments,proto3" json:"include_shift_segments,omitempty"`
	// Set to true to include scheduling activity in each of the returned shift segments.
	// Only effective when include_shift_instances and include_shift_segments are also set to true.
	IncludeSchedulingActivity bool `protobuf:"varint,6,opt,name=include_scheduling_activity,json=includeSchedulingActivity,proto3" json:"include_scheduling_activity,omitempty"`
	// Set to true to include non skill activity in each of the returned scheduling activities.
	// Only effective when include_scheduling_activity, include_shift_segments and include_shift_instances are also set to true.
	IncludeActivity bool `protobuf:"varint,7,opt,name=include_activity,json=includeActivity,proto3" json:"include_activity,omitempty"`
	// The the shift instances will be associated with the origin node of @node_selector or the origin node of it's children program nodes.
	// Optional field, if left nil all matching the given parameters will be included.
	NodeSelector *ParentEntity `protobuf:"bytes,8,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
}

func (x *GetDraftScheduleReq) Reset() {
	*x = GetDraftScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDraftScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDraftScheduleReq) ProtoMessage() {}

func (x *GetDraftScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDraftScheduleReq.ProtoReflect.Descriptor instead.
func (*GetDraftScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{228}
}

func (x *GetDraftScheduleReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *GetDraftScheduleReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *GetDraftScheduleReq) GetIncludeShiftInstances() bool {
	if x != nil {
		return x.IncludeShiftInstances
	}
	return false
}

func (x *GetDraftScheduleReq) GetIncludeShiftTemplate() bool {
	if x != nil {
		return x.IncludeShiftTemplate
	}
	return false
}

func (x *GetDraftScheduleReq) GetIncludeShiftSegments() bool {
	if x != nil {
		return x.IncludeShiftSegments
	}
	return false
}

func (x *GetDraftScheduleReq) GetIncludeSchedulingActivity() bool {
	if x != nil {
		return x.IncludeSchedulingActivity
	}
	return false
}

func (x *GetDraftScheduleReq) GetIncludeActivity() bool {
	if x != nil {
		return x.IncludeActivity
	}
	return false
}

func (x *GetDraftScheduleReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

// Response message for the GetDraftSchedule RPC
type GetDraftScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Draft schedule found.
	DraftSchedule *DraftSchedule `protobuf:"bytes,1,opt,name=draft_schedule,json=draftSchedule,proto3" json:"draft_schedule,omitempty"`
}

func (x *GetDraftScheduleRes) Reset() {
	*x = GetDraftScheduleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDraftScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDraftScheduleRes) ProtoMessage() {}

func (x *GetDraftScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDraftScheduleRes.ProtoReflect.Descriptor instead.
func (*GetDraftScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{229}
}

func (x *GetDraftScheduleRes) GetDraftSchedule() *DraftSchedule {
	if x != nil {
		return x.DraftSchedule
	}
	return nil
}

// Request message for the ListDraftSchedules RPC
type ListDraftSchedulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date range to of the drafts to return.
	// If left blank, then all draft schedules for the org will be returned.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
}

func (x *ListDraftSchedulesReq) Reset() {
	*x = ListDraftSchedulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDraftSchedulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDraftSchedulesReq) ProtoMessage() {}

func (x *ListDraftSchedulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDraftSchedulesReq.ProtoReflect.Descriptor instead.
func (*ListDraftSchedulesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{230}
}

func (x *ListDraftSchedulesReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

// Response message for the ListDraftSchedules RPC
type ListDraftSchedulesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Draft schedules found.
	DraftSchedules []*DraftSchedule `protobuf:"bytes,1,rep,name=draft_schedules,json=draftSchedules,proto3" json:"draft_schedules,omitempty"`
}

func (x *ListDraftSchedulesRes) Reset() {
	*x = ListDraftSchedulesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDraftSchedulesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDraftSchedulesRes) ProtoMessage() {}

func (x *ListDraftSchedulesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDraftSchedulesRes.ProtoReflect.Descriptor instead.
func (*ListDraftSchedulesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{231}
}

func (x *ListDraftSchedulesRes) GetDraftSchedules() []*DraftSchedule {
	if x != nil {
		return x.DraftSchedules
	}
	return nil
}

// Request message for the DeleteDraftSchedule RPC
type DeleteDraftScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of draft schedule to delete.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
}

func (x *DeleteDraftScheduleReq) Reset() {
	*x = DeleteDraftScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDraftScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDraftScheduleReq) ProtoMessage() {}

func (x *DeleteDraftScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDraftScheduleReq.ProtoReflect.Descriptor instead.
func (*DeleteDraftScheduleReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{232}
}

func (x *DeleteDraftScheduleReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

// Response message for the DeleteDraftSchedule RPC
type DeleteDraftScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDraftScheduleRes) Reset() {
	*x = DeleteDraftScheduleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDraftScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDraftScheduleRes) ProtoMessage() {}

func (x *DeleteDraftScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDraftScheduleRes.ProtoReflect.Descriptor instead.
func (*DeleteDraftScheduleRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{233}
}

// Request message for the CreateShiftInstance RPC
// Method is Unimplimented. Use CreateShiftInstanceV2 instead.
type CreateShiftInstanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule for the shift instance.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// ID of the shift template for the shift instance.
	ShiftTemplateSid int64 `protobuf:"varint,2,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
	// Start datetime of the shift instance.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// Width in minutes of the shift instance.
	WidthInMinutes int32 `protobuf:"varint,4,opt,name=width_in_minutes,json=widthInMinutes,proto3" json:"width_in_minutes,omitempty"`
	// Indicates whether the shift instance is locked.
	IsLocked bool `protobuf:"varint,5,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	// ID of the wfm agent for the shift instance. If null it will
	// create a new unassigned WfmAgent for the shift instance.
	WfmAgentSid *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// Metric types for the shift instance.
	MetricTypes []commons.PerformanceMetricType `protobuf:"varint,7,rep,packed,name=metric_types,json=metricTypes,proto3,enum=api.commons.PerformanceMetricType" json:"metric_types,omitempty"`
}

func (x *CreateShiftInstanceReq) Reset() {
	*x = CreateShiftInstanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShiftInstanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftInstanceReq) ProtoMessage() {}

func (x *CreateShiftInstanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftInstanceReq.ProtoReflect.Descriptor instead.
func (*CreateShiftInstanceReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{234}
}

func (x *CreateShiftInstanceReq) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *CreateShiftInstanceReq) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

func (x *CreateShiftInstanceReq) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *CreateShiftInstanceReq) GetWidthInMinutes() int32 {
	if x != nil {
		return x.WidthInMinutes
	}
	return 0
}

func (x *CreateShiftInstanceReq) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *CreateShiftInstanceReq) GetWfmAgentSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.WfmAgentSid
	}
	return nil
}

func (x *CreateShiftInstanceReq) GetMetricTypes() []commons.PerformanceMetricType {
	if x != nil {
		return x.MetricTypes
	}
	return nil
}

// Response message for the CreateShiftInstance RPC
type CreateShiftInstanceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shift instance that was created.
	ShiftInstance *ShiftInstance `protobuf:"bytes,1,opt,name=shift_instance,json=shiftInstance,proto3" json:"shift_instance,omitempty"`
	// Performance metrics that this shift instance has.
	PerformanceMetrics []*PerformanceMetric `protobuf:"bytes,2,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
}

func (x *CreateShiftInstanceRes) Reset() {
	*x = CreateShiftInstanceRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShiftInstanceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftInstanceRes) ProtoMessage() {}

func (x *CreateShiftInstanceRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftInstanceRes.ProtoReflect.Descriptor instead.
func (*CreateShiftInstanceRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{235}
}

func (x *CreateShiftInstanceRes) GetShiftInstance() *ShiftInstance {
	if x != nil {
		return x.ShiftInstance
	}
	return nil
}

func (x *CreateShiftInstanceRes) GetPerformanceMetrics() []*PerformanceMetric {
	if x != nil {
		return x.PerformanceMetrics
	}
	return nil
}

// Request message for the CreateShiftInstanceV2 RPC
type CreateShiftInstanceV2Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the draft schedule for the shift instance.
	DraftScheduleSid int64 `protobuf:"varint,1,opt,name=draft_schedule_sid,json=draftScheduleSid,proto3" json:"draft_schedule_sid,omitempty"`
	// ID of the shift template for the shift instance.
	ShiftTemplateSid int64 `protobuf:"varint,2,opt,name=shift_template_sid,json=shiftTemplateSid,proto3" json:"shift_template_sid,omitempty"`
	// Start datetime of the shift instance.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// Indicates whether the shift instance is locked.
	IsLocked bool `protobuf:"varint,4,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	// ID of the wfm agents for the shift instance.
	// If empty it will create a new unassigned WfmAgent for the shift instance.
	// If given more than one sid, then a copy of the instance will be created for each agent.
	WfmAgentSids []int64 `protobuf:"varint,5,rep,packed,name=wfm_agent_sids,json=wfmAgentSids,proto3" json:"wfm_agent_sids,omitempty"`
}

func (x *CreateShiftInstanceV2Req) Reset() {
	*x = CreateShiftInstanceV2Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShiftInstanceV2Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftInstanceV2Req) ProtoMessage() {}

func (x *CreateShiftInstanceV2Req) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftInstanceV2Req.ProtoReflect.Descriptor instead.
func (*CreateShiftInstanceV2Req) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{236}
}

func (x *CreateShiftInstanceV2Req) GetDraftScheduleSid() int64 {
	if x != nil {
		return x.DraftScheduleSid
	}
	return 0
}

func (x *CreateShiftInstanceV2Req) GetShiftTemplateSid() int64 {
	if x != nil {
		return x.ShiftTemplateSid
	}
	return 0
}

func (x *CreateShiftInstanceV2Req) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *CreateShiftInstanceV2Req) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *CreateShiftInstanceV2Req) GetWfmAgentSids() []int64 {
	if x != nil {
		return x.WfmAgentSids
	}
	return nil
}

// Response message for the CreateShiftInstanceV2 RPC
type CreateShiftInstanceV2Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Any shift instances that were created.
	ShiftInstances []*ShiftInstance `protobuf:"bytes,1,rep,name=shift_instances,json=shiftInstances,proto3" json:"shift_instances,omitempty"`
	// Diagnostics to report cause if shift instances fail to build.
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *CreateShiftInstanceV2Res) Reset() {
	*x = CreateShiftInstanceV2Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShiftInstanceV2Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftInstanceV2Res) ProtoMessage() {}

func (x *CreateShiftInstanceV2Res) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftInstanceV2Res.ProtoReflect.Descriptor instead.
func (*CreateShiftInstanceV2Res) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{237}
}

func (x *CreateShiftInstanceV2Res) GetShiftInstances() []*ShiftInstance {
	if x != nil {
		return x.ShiftInstances
	}
	return nil
}

func (x *CreateShiftInstanceV2Res) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Request message for the SwapShiftInstances RPC
type SwapShiftInstancesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the wfm agent sid that the shift instances had.
	WfmAgentSid1 int64 `protobuf:"varint,1,opt,name=wfm_agent_sid1,json=wfmAgentSid1,proto3" json:"wfm_agent_sid1,omitempty"`
	// ID of the wfm agent sid that the shift instances will have.
	WfmAgentSid2 int64 `protobuf:"varint,2,opt,name=wfm_agent_sid2,json=wfmAgentSid2,proto3" json:"wfm_agent_sid2,omitempty"`
	// IDs of the shift instances that will be swapped.
	ShiftInstanceSids []int64 `protobuf:"varint,3,rep,packed,name=shift_instance_sids,json=shiftInstanceSids,proto3" json:"shift_instance_sids,omitempty"`
}

func (x *SwapShiftInstancesReq) Reset() {
	*x = SwapShiftInstancesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapShiftInstancesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapShiftInstancesReq) ProtoMessage() {}

func (x *SwapShiftInstancesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapShiftInstancesReq.ProtoReflect.Descriptor instead.
func (*SwapShiftInstancesReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{238}
}

func (x *SwapShiftInstancesReq) GetWfmAgentSid1() int64 {
	if x != nil {
		return x.WfmAgentSid1
	}
	return 0
}

func (x *SwapShiftInstancesReq) GetWfmAgentSid2() int64 {
	if x != nil {
		return x.WfmAgentSid2
	}
	return 0
}

func (x *SwapShiftInstancesReq) GetShiftInstanceSids() []int64 {
	if x != nil {
		return x.ShiftInstanceSids
	}
	return nil
}

// Response message for the SwapShiftInstances RPC
type SwapShiftInstancesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shift instances that were swapped.
	ShiftInstances []*ShiftInstance `protobuf:"bytes,1,rep,name=shift_instances,json=shiftInstances,proto3" json:"shift_instances,omitempty"`
}

func (x *SwapShiftInstancesRes) Reset() {
	*x = SwapShiftInstancesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapShiftInstancesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapShiftInstancesRes) ProtoMessage() {}

func (x *SwapShiftInstancesRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapShiftInstancesRes.ProtoReflect.Descriptor instead.
func (*SwapShiftInstancesRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{239}
}

func (x *SwapShiftInstancesRes) GetShiftInstances() []*ShiftInstance {
	if x != nil {
		return x.ShiftInstances
	}
	return nil
}

// Request message for the UpdateShiftInstance RPC
type UpdateShiftInstanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the shift instance.
	ShiftInstanceSid int64 `protobuf:"varint,1,opt,name=shift_instance_sid,json=shiftInstanceSid,proto3" json:"shift_instance_sid,omitempty"`
	// The start time for this shift instance
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// Tells the scheduler to leave this instance in tact when performing 'build schedule'.
	// If set to false, the instance will not be locked and may be lost when a new schedule is built.
	IsLocked bool `protobuf:"varint,3,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	// The duration of this shift instance in minutes.
	WidthInMinutes int32 `protobuf:"varint,4,opt,name=width_in_minutes,json=widthInMinutes,proto3" json:"width_in_minutes,omitempty"`
	// ID of the wfm agent for the shift instance. If null it will
	// create a new unassigned WfmAgent for the shift instance.
	WfmAgentSid *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// Types of metrics.
	MetricTypes []commons.PerformanceMetricType `protobuf:"varint,6,rep,packed,name=metric_types,json=metricTypes,proto3,enum=api.commons.PerformanceMetricType" json:"metric_types,omitempty"`
}

func (x *UpdateShiftInstanceReq) Reset() {
	*x = UpdateShiftInstanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShiftInstanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShiftInstanceReq) ProtoMessage() {}

func (x *UpdateShiftInstanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShiftInstanceReq.ProtoReflect.Descriptor instead.
func (*UpdateShiftInstanceReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{240}
}

func (x *UpdateShiftInstanceReq) GetShiftInstanceSid() int64 {
	if x != nil {
		return x.ShiftInstanceSid
	}
	return 0
}

func (x *UpdateShiftInstanceReq) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *UpdateShiftInstanceReq) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *UpdateShiftInstanceReq) GetWidthInMinutes() int32 {
	if x != nil {
		return x.WidthInMinutes
	}
	return 0
}

func (x *UpdateShiftInstanceReq) GetWfmAgentSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.WfmAgentSid
	}
	return nil
}

func (x *UpdateShiftInstanceReq) GetMetricTypes() []commons.PerformanceMetricType {
	if x != nil {
		return x.MetricTypes
	}
	return nil
}

// Response message for the UpdateShiftInstance RPC
type UpdateShiftInstanceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shift instance that was updated.
	ShiftInstance *ShiftInstance `protobuf:"bytes,1,opt,name=shift_instance,json=shiftInstance,proto3" json:"shift_instance,omitempty"`
	// Performance metrics that this shift instance has.
	PerformanceMetrics []*PerformanceMetric `protobuf:"bytes,2,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
}

func (x *UpdateShiftInstanceRes) Reset() {
	*x = UpdateShiftInstanceRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShiftInstanceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShiftInstanceRes) ProtoMessage() {}

func (x *UpdateShiftInstanceRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShiftInstanceRes.ProtoReflect.Descriptor instead.
func (*UpdateShiftInstanceRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{241}
}

func (x *UpdateShiftInstanceRes) GetShiftInstance() *ShiftInstance {
	if x != nil {
		return x.ShiftInstance
	}
	return nil
}

func (x *UpdateShiftInstanceRes) GetPerformanceMetrics() []*PerformanceMetric {
	if x != nil {
		return x.PerformanceMetrics
	}
	return nil
}

// ListShiftSegmentsByShiftInstanceSids request.
type ListShiftSegmentsByShiftInstanceSidsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of shift instances referenced by requested shift segments.
	ShiftInstanceSids []int64 `protobuf:"varint,1,rep,packed,name=shift_instance_sids,json=shiftInstanceSids,proto3" json:"shift_instance_sids,omitempty"`
	// Set to true to include the scheduling activity in each of the returned shift segments.
	IncludeSchedulingActivity bool `protobuf:"varint,2,opt,name=include_scheduling_activity,json=includeSchedulingActivity,proto3" json:"include_scheduling_activity,omitempty"`
	// Set to true to include the non skill activity for the scheduling activities returned (if those are set to be included).
	IncludeActivity bool `protobuf:"varint,3,opt,name=include_activity,json=includeActivity,proto3" json:"include_activity,omitempty"`
}

func (x *ListShiftSegmentsByShiftInstanceSidsReq) Reset() {
	*x = ListShiftSegmentsByShiftInstanceSidsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShiftSegmentsByShiftInstanceSidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftSegmentsByShiftInstanceSidsReq) ProtoMessage() {}

func (x *ListShiftSegmentsByShiftInstanceSidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftSegmentsByShiftInstanceSidsReq.ProtoReflect.Descriptor instead.
func (*ListShiftSegmentsByShiftInstanceSidsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{242}
}

func (x *ListShiftSegmentsByShiftInstanceSidsReq) GetShiftInstanceSids() []int64 {
	if x != nil {
		return x.ShiftInstanceSids
	}
	return nil
}

func (x *ListShiftSegmentsByShiftInstanceSidsReq) GetIncludeSchedulingActivity() bool {
	if x != nil {
		return x.IncludeSchedulingActivity
	}
	return false
}

func (x *ListShiftSegmentsByShiftInstanceSidsReq) GetIncludeActivity() bool {
	if x != nil {
		return x.IncludeActivity
	}
	return false
}

// ListShiftSegmentsByShiftInstanceSids response.
type ListShiftSegmentsByShiftInstanceSidsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested shift segments.
	ShiftSegments []*ShiftSegment `protobuf:"bytes,1,rep,name=shift_segments,json=shiftSegments,proto3" json:"shift_segments,omitempty"`
}

func (x *ListShiftSegmentsByShiftInstanceSidsRes) Reset() {
	*x = ListShiftSegmentsByShiftInstanceSidsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShiftSegmentsByShiftInstanceSidsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShiftSegmentsByShiftInstanceSidsRes) ProtoMessage() {}

func (x *ListShiftSegmentsByShiftInstanceSidsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShiftSegmentsByShiftInstanceSidsRes.ProtoReflect.Descriptor instead.
func (*ListShiftSegmentsByShiftInstanceSidsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{243}
}

func (x *ListShiftSegmentsByShiftInstanceSidsRes) GetShiftSegments() []*ShiftSegment {
	if x != nil {
		return x.ShiftSegments
	}
	return nil
}

// Represents a Performance Metric Parameter.
type PerformanceMetricParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of metric.
	MetricType commons.PerformanceMetricType `protobuf:"varint,1,opt,name=metric_type,json=metricType,proto3,enum=api.commons.PerformanceMetricType" json:"metric_type,omitempty"`
	// Number of seconds allowed to answer a call if the @metric_type is set to SERVICE_LEVEL_ANALYSIS.
	// If @metric_type is not SERVICE_LEVEL_ANALYSIS then this field must be set to nil.
	ServiceLevelTargetDurationSeconds *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=service_level_target_duration_seconds,json=serviceLevelTargetDurationSeconds,proto3" json:"service_level_target_duration_seconds,omitempty"`
}

func (x *PerformanceMetricParameter) Reset() {
	*x = PerformanceMetricParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMetricParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMetricParameter) ProtoMessage() {}

func (x *PerformanceMetricParameter) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMetricParameter.ProtoReflect.Descriptor instead.
func (*PerformanceMetricParameter) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{244}
}

func (x *PerformanceMetricParameter) GetMetricType() commons.PerformanceMetricType {
	if x != nil {
		return x.MetricType
	}
	return commons.PerformanceMetricType(0)
}

func (x *PerformanceMetricParameter) GetServiceLevelTargetDurationSeconds() *wrapperspb.Int64Value {
	if x != nil {
		return x.ServiceLevelTargetDurationSeconds
	}
	return nil
}

// Request message for the GetPerformanceMetrics RPC.
type GetPerformanceMetricsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The schedule that the performance metric should be associated with.
	ScheduleSelector *commons.ScheduleSelector `protobuf:"bytes,1,opt,name=schedule_selector,json=scheduleSelector,proto3" json:"schedule_selector,omitempty"`
	// The origin node that the performance metrics should be associated with.
	NodeSelector *ParentEntity `protobuf:"bytes,2,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// The datetime range over which the metrics will be collected.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,3,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Parameters to get metrics for.
	MetricParams []*PerformanceMetricParameter `protobuf:"bytes,4,rep,name=metric_params,json=metricParams,proto3" json:"metric_params,omitempty"`
	// The number of minutes to consolidate each metric interval into.
	// Must be a multiple of 5.
	IntervalWidthInMinutes int32 `protobuf:"varint,5,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
}

func (x *GetPerformanceMetricsReq) Reset() {
	*x = GetPerformanceMetricsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPerformanceMetricsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceMetricsReq) ProtoMessage() {}

func (x *GetPerformanceMetricsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceMetricsReq.ProtoReflect.Descriptor instead.
func (*GetPerformanceMetricsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{245}
}

func (x *GetPerformanceMetricsReq) GetScheduleSelector() *commons.ScheduleSelector {
	if x != nil {
		return x.ScheduleSelector
	}
	return nil
}

func (x *GetPerformanceMetricsReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *GetPerformanceMetricsReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *GetPerformanceMetricsReq) GetMetricParams() []*PerformanceMetricParameter {
	if x != nil {
		return x.MetricParams
	}
	return nil
}

func (x *GetPerformanceMetricsReq) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

// Response message for the GetPerformanceMetrics RPC.
type GetPerformanceMetricsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested set of performance metrics.
	PerformanceMetrics []*PerformanceMetric `protobuf:"bytes,1,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
}

func (x *GetPerformanceMetricsRes) Reset() {
	*x = GetPerformanceMetricsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPerformanceMetricsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceMetricsRes) ProtoMessage() {}

func (x *GetPerformanceMetricsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceMetricsRes.ProtoReflect.Descriptor instead.
func (*GetPerformanceMetricsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{246}
}

func (x *GetPerformanceMetricsRes) GetPerformanceMetrics() []*PerformanceMetric {
	if x != nil {
		return x.PerformanceMetrics
	}
	return nil
}

type SchedulingTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the scheduling target.
	SchedulingTargetSid int64 `protobuf:"varint,1,opt,name=scheduling_target_sid,json=schedulingTargetSid,proto3" json:"scheduling_target_sid,omitempty"`
	// Target type for the @node to override the inherited value.
	SchedulingTargetType commons.SchedulingTargetType `protobuf:"varint,2,opt,name=scheduling_target_type,json=schedulingTargetType,proto3,enum=api.commons.SchedulingTargetType" json:"scheduling_target_type,omitempty"`
	// Target percentage for scheduling.
	SchedulingTargetPercentage float32 `protobuf:"fixed32,3,opt,name=scheduling_target_percentage,json=schedulingTargetPercentage,proto3" json:"scheduling_target_percentage,omitempty"`
	// Number of seconds allowed to answer call for the scheduling if @scheduling_target_type is set to SERVICE_LEVEL.
	// If @scheduling_target_type is not SERVICE_LEVEL then this field must be set to nil
	ServiceLevelTargetDurationSeconds *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=service_level_target_duration_seconds,json=serviceLevelTargetDurationSeconds,proto3" json:"service_level_target_duration_seconds,omitempty"`
	// The node that the scheduling target if used by.
	// May be set to nil if associated with the master scheduling target.
	NodeEntity *ParentEntity `protobuf:"bytes,5,opt,name=node_entity,json=nodeEntity,proto3" json:"node_entity,omitempty"`
}

func (x *SchedulingTarget) Reset() {
	*x = SchedulingTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulingTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulingTarget) ProtoMessage() {}

func (x *SchedulingTarget) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulingTarget.ProtoReflect.Descriptor instead.
func (*SchedulingTarget) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{247}
}

func (x *SchedulingTarget) GetSchedulingTargetSid() int64 {
	if x != nil {
		return x.SchedulingTargetSid
	}
	return 0
}

func (x *SchedulingTarget) GetSchedulingTargetType() commons.SchedulingTargetType {
	if x != nil {
		return x.SchedulingTargetType
	}
	return commons.SchedulingTargetType(0)
}

func (x *SchedulingTarget) GetSchedulingTargetPercentage() float32 {
	if x != nil {
		return x.SchedulingTargetPercentage
	}
	return 0
}

func (x *SchedulingTarget) GetServiceLevelTargetDurationSeconds() *wrapperspb.Int64Value {
	if x != nil {
		return x.ServiceLevelTargetDurationSeconds
	}
	return nil
}

func (x *SchedulingTarget) GetNodeEntity() *ParentEntity {
	if x != nil {
		return x.NodeEntity
	}
	return nil
}

// SetSchedulingTarget request.
type SetSchedulingTargetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scheduling target to create.
	SchedulingTarget *SchedulingTarget `protobuf:"bytes,1,opt,name=scheduling_target,json=schedulingTarget,proto3" json:"scheduling_target,omitempty"`
	// ID of the schedule scenario that the @node_entity belongs to.
	ScheduleScenarioSid int64 `protobuf:"varint,2,opt,name=schedule_scenario_sid,json=scheduleScenarioSid,proto3" json:"schedule_scenario_sid,omitempty"`
}

func (x *SetSchedulingTargetReq) Reset() {
	*x = SetSchedulingTargetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSchedulingTargetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSchedulingTargetReq) ProtoMessage() {}

func (x *SetSchedulingTargetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSchedulingTargetReq.ProtoReflect.Descriptor instead.
func (*SetSchedulingTargetReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{248}
}

func (x *SetSchedulingTargetReq) GetSchedulingTarget() *SchedulingTarget {
	if x != nil {
		return x.SchedulingTarget
	}
	return nil
}

func (x *SetSchedulingTargetReq) GetScheduleScenarioSid() int64 {
	if x != nil {
		return x.ScheduleScenarioSid
	}
	return 0
}

// SetSchedulingTarget reponse.
type SetSchedulingTargetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created scheduling target.
	SchedulingTargetSid int64 `protobuf:"varint,1,opt,name=scheduling_target_sid,json=schedulingTargetSid,proto3" json:"scheduling_target_sid,omitempty"`
}

func (x *SetSchedulingTargetRes) Reset() {
	*x = SetSchedulingTargetRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSchedulingTargetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSchedulingTargetRes) ProtoMessage() {}

func (x *SetSchedulingTargetRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSchedulingTargetRes.ProtoReflect.Descriptor instead.
func (*SetSchedulingTargetRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{249}
}

func (x *SetSchedulingTargetRes) GetSchedulingTargetSid() int64 {
	if x != nil {
		return x.SchedulingTargetSid
	}
	return 0
}

// GetSchedulingTarget request.
type GetSchedulingTargetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node to get the scheduling target from.
	NodeSelector *ParentEntity `protobuf:"bytes,1,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
}

func (x *GetSchedulingTargetReq) Reset() {
	*x = GetSchedulingTargetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulingTargetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulingTargetReq) ProtoMessage() {}

func (x *GetSchedulingTargetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulingTargetReq.ProtoReflect.Descriptor instead.
func (*GetSchedulingTargetReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{250}
}

func (x *GetSchedulingTargetReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

// GetSchedulingTarget reponse.
type GetSchedulingTargetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scheduling target that the node is inheriting from a parent.
	InheritedSchedulingTarget *SchedulingTarget `protobuf:"bytes,1,opt,name=inherited_scheduling_target,json=inheritedSchedulingTarget,proto3" json:"inherited_scheduling_target,omitempty"`
	// The node's own scheduling target.
	OwnSchedulingTarget *SchedulingTarget `protobuf:"bytes,2,opt,name=own_scheduling_target,json=ownSchedulingTarget,proto3" json:"own_scheduling_target,omitempty"`
	// The resulting scheduling target for the node.
	// If there is no value for @inherited_scheduling_target or @own_scheduling_target the system default value will be used.
	ResultingSchedulingTarget *SchedulingTarget `protobuf:"bytes,3,opt,name=resulting_scheduling_target,json=resultingSchedulingTarget,proto3" json:"resulting_scheduling_target,omitempty"`
}

func (x *GetSchedulingTargetRes) Reset() {
	*x = GetSchedulingTargetRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulingTargetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulingTargetRes) ProtoMessage() {}

func (x *GetSchedulingTargetRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulingTargetRes.ProtoReflect.Descriptor instead.
func (*GetSchedulingTargetRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{251}
}

func (x *GetSchedulingTargetRes) GetInheritedSchedulingTarget() *SchedulingTarget {
	if x != nil {
		return x.InheritedSchedulingTarget
	}
	return nil
}

func (x *GetSchedulingTargetRes) GetOwnSchedulingTarget() *SchedulingTarget {
	if x != nil {
		return x.OwnSchedulingTarget
	}
	return nil
}

func (x *GetSchedulingTargetRes) GetResultingSchedulingTarget() *SchedulingTarget {
	if x != nil {
		return x.ResultingSchedulingTarget
	}
	return nil
}

// DeleteSchedulingTarget request.
type DeleteSchedulingTargetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node to delete the scheduling target for.
	NodeSelector *ParentEntity `protobuf:"bytes,1,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
}

func (x *DeleteSchedulingTargetReq) Reset() {
	*x = DeleteSchedulingTargetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSchedulingTargetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchedulingTargetReq) ProtoMessage() {}

func (x *DeleteSchedulingTargetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchedulingTargetReq.ProtoReflect.Descriptor instead.
func (*DeleteSchedulingTargetReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{252}
}

func (x *DeleteSchedulingTargetReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

// DeleteSchedulingTarget response.
type DeleteSchedulingTargetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSchedulingTargetRes) Reset() {
	*x = DeleteSchedulingTargetRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSchedulingTargetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchedulingTargetRes) ProtoMessage() {}

func (x *DeleteSchedulingTargetRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchedulingTargetRes.ProtoReflect.Descriptor instead.
func (*DeleteSchedulingTargetRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{253}
}

// Request message for the ListRequiredCallsIntervals RPC.
type ListRequiredCallsIntervalsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The that the required call intervals will be associated with.
	NodeSelector *ParentEntity `protobuf:"bytes,1,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	// The datetime range across which required call intervals will be collected.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,2,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// The number of minutes to consolidate each metric interval into.
	// Must be a multiple of 5.
	IntervalWidthInMinutes int32 `protobuf:"varint,3,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
}

func (x *ListRequiredCallsIntervalsReq) Reset() {
	*x = ListRequiredCallsIntervalsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequiredCallsIntervalsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequiredCallsIntervalsReq) ProtoMessage() {}

func (x *ListRequiredCallsIntervalsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequiredCallsIntervalsReq.ProtoReflect.Descriptor instead.
func (*ListRequiredCallsIntervalsReq) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{254}
}

func (x *ListRequiredCallsIntervalsReq) GetNodeSelector() *ParentEntity {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *ListRequiredCallsIntervalsReq) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *ListRequiredCallsIntervalsReq) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

// Response message for the ListRequiredCallsIntervals RPC.
type ListRequiredCallsIntervalsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The width of each interval in minutes.
	IntervalWidthInMinutes int32 `protobuf:"varint,1,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// Requested required call intervals.
	RequiredCallsIntervals []*RequiredCallsInterval `protobuf:"bytes,2,rep,name=required_calls_intervals,json=requiredCallsIntervals,proto3" json:"required_calls_intervals,omitempty"`
}

func (x *ListRequiredCallsIntervalsRes) Reset() {
	*x = ListRequiredCallsIntervalsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequiredCallsIntervalsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequiredCallsIntervalsRes) ProtoMessage() {}

func (x *ListRequiredCallsIntervalsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequiredCallsIntervalsRes.ProtoReflect.Descriptor instead.
func (*ListRequiredCallsIntervalsRes) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{255}
}

func (x *ListRequiredCallsIntervalsRes) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *ListRequiredCallsIntervalsRes) GetRequiredCallsIntervals() []*RequiredCallsInterval {
	if x != nil {
		return x.RequiredCallsIntervals
	}
	return nil
}

type UpdateSkillProfileProficienciesReq_Proficiency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile that contains the @skill_sid.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// ID of the skill profile skill to update the proficiency.
	SkillSid int64 `protobuf:"varint,2,opt,name=skill_sid,json=skillSid,proto3" json:"skill_sid,omitempty"`
	// Updated value to give the proficiency.
	Proficiency int32 `protobuf:"varint,3,opt,name=proficiency,proto3" json:"proficiency,omitempty"`
}

func (x *UpdateSkillProfileProficienciesReq_Proficiency) Reset() {
	*x = UpdateSkillProfileProficienciesReq_Proficiency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSkillProfileProficienciesReq_Proficiency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSkillProfileProficienciesReq_Proficiency) ProtoMessage() {}

func (x *UpdateSkillProfileProficienciesReq_Proficiency) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSkillProfileProficienciesReq_Proficiency.ProtoReflect.Descriptor instead.
func (*UpdateSkillProfileProficienciesReq_Proficiency) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{6, 0}
}

func (x *UpdateSkillProfileProficienciesReq_Proficiency) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *UpdateSkillProfileProficienciesReq_Proficiency) GetSkillSid() int64 {
	if x != nil {
		return x.SkillSid
	}
	return 0
}

func (x *UpdateSkillProfileProficienciesReq_Proficiency) GetProficiency() int32 {
	if x != nil {
		return x.Proficiency
	}
	return 0
}

type GetSkillProfileRes_Mapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the skill profile mapped to the requested skill profile.
	SkillProfileSid int64 `protobuf:"varint,1,opt,name=skill_profile_sid,json=skillProfileSid,proto3" json:"skill_profile_sid,omitempty"`
	// Name of the skill profile mapped to the requested skill profile.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSkillProfileRes_Mapping) Reset() {
	*x = GetSkillProfileRes_Mapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSkillProfileRes_Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkillProfileRes_Mapping) ProtoMessage() {}

func (x *GetSkillProfileRes_Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkillProfileRes_Mapping.ProtoReflect.Descriptor instead.
func (*GetSkillProfileRes_Mapping) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetSkillProfileRes_Mapping) GetSkillProfileSid() int64 {
	if x != nil {
		return x.SkillProfileSid
	}
	return 0
}

func (x *GetSkillProfileRes_Mapping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Can't use "repeated" in a "oneof" so this field is nested in its own message
type DeleteForecastIntervalsReq_IntervalSids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sids of the intervals/deltas to be deleted
	Sids []int64 `protobuf:"varint,1,rep,packed,name=sids,proto3" json:"sids,omitempty"`
}

func (x *DeleteForecastIntervalsReq_IntervalSids) Reset() {
	*x = DeleteForecastIntervalsReq_IntervalSids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteForecastIntervalsReq_IntervalSids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteForecastIntervalsReq_IntervalSids) ProtoMessage() {}

func (x *DeleteForecastIntervalsReq_IntervalSids) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteForecastIntervalsReq_IntervalSids.ProtoReflect.Descriptor instead.
func (*DeleteForecastIntervalsReq_IntervalSids) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{72, 0}
}

func (x *DeleteForecastIntervalsReq_IntervalSids) GetSids() []int64 {
	if x != nil {
		return x.Sids
	}
	return nil
}

// Represents a list of agent groups which are associated with an agent.
type ListAllWFMAgentsRes_AgentGroupsByAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentGroups []*AgentGroup `protobuf:"bytes,1,rep,name=agent_groups,json=agentGroups,proto3" json:"agent_groups,omitempty"`
}

func (x *ListAllWFMAgentsRes_AgentGroupsByAgent) Reset() {
	*x = ListAllWFMAgentsRes_AgentGroupsByAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllWFMAgentsRes_AgentGroupsByAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllWFMAgentsRes_AgentGroupsByAgent) ProtoMessage() {}

func (x *ListAllWFMAgentsRes_AgentGroupsByAgent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllWFMAgentsRes_AgentGroupsByAgent.ProtoReflect.Descriptor instead.
func (*ListAllWFMAgentsRes_AgentGroupsByAgent) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{128, 0}
}

func (x *ListAllWFMAgentsRes_AgentGroupsByAgent) GetAgentGroups() []*AgentGroup {
	if x != nil {
		return x.AgentGroups
	}
	return nil
}

type DatetimePattern_WeekMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime range of the week map.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Days of the week that the week map has.
	DayMaps []*DatetimePattern_WeekMap_WeekMapDOW `protobuf:"bytes,2,rep,name=day_maps,json=dayMaps,proto3" json:"day_maps,omitempty"`
}

func (x *DatetimePattern_WeekMap) Reset() {
	*x = DatetimePattern_WeekMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatetimePattern_WeekMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimePattern_WeekMap) ProtoMessage() {}

func (x *DatetimePattern_WeekMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimePattern_WeekMap.ProtoReflect.Descriptor instead.
func (*DatetimePattern_WeekMap) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{160, 0}
}

func (x *DatetimePattern_WeekMap) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *DatetimePattern_WeekMap) GetDayMaps() []*DatetimePattern_WeekMap_WeekMapDOW {
	if x != nil {
		return x.DayMaps
	}
	return nil
}

type DatetimePattern_CalendarItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Datetime range of the calendar item.
	DatetimeRange *commons.DatetimeRange `protobuf:"bytes,1,opt,name=datetime_range,json=datetimeRange,proto3" json:"datetime_range,omitempty"`
	// Value that this calendar item has.
	Value *commons.OptionTypes `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DatetimePattern_CalendarItem) Reset() {
	*x = DatetimePattern_CalendarItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatetimePattern_CalendarItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimePattern_CalendarItem) ProtoMessage() {}

func (x *DatetimePattern_CalendarItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimePattern_CalendarItem.ProtoReflect.Descriptor instead.
func (*DatetimePattern_CalendarItem) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{160, 1}
}

func (x *DatetimePattern_CalendarItem) GetDatetimeRange() *commons.DatetimeRange {
	if x != nil {
		return x.DatetimeRange
	}
	return nil
}

func (x *DatetimePattern_CalendarItem) GetValue() *commons.OptionTypes {
	if x != nil {
		return x.Value
	}
	return nil
}

type DatetimePattern_WeekMap_WeekMapDOW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which day of the week the entity represents.
	DayOfWeek commons.DayOfWeek `protobuf:"varint,1,opt,name=day_of_week,json=dayOfWeek,proto3,enum=api.commons.DayOfWeek" json:"day_of_week,omitempty"`
	// Which minute the entity starts at.
	StartMinuteInDay int32 `protobuf:"varint,2,opt,name=start_minute_in_day,json=startMinuteInDay,proto3" json:"start_minute_in_day,omitempty"`
	// Which minute the entity ends at.
	EndMinuteInDay int32 `protobuf:"varint,3,opt,name=end_minute_in_day,json=endMinuteInDay,proto3" json:"end_minute_in_day,omitempty"`
	// Value that this day of the week has.
	Value *commons.OptionTypes `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DatetimePattern_WeekMap_WeekMapDOW) Reset() {
	*x = DatetimePattern_WeekMap_WeekMapDOW{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatetimePattern_WeekMap_WeekMapDOW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimePattern_WeekMap_WeekMapDOW) ProtoMessage() {}

func (x *DatetimePattern_WeekMap_WeekMapDOW) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimePattern_WeekMap_WeekMapDOW.ProtoReflect.Descriptor instead.
func (*DatetimePattern_WeekMap_WeekMapDOW) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{160, 0, 0}
}

func (x *DatetimePattern_WeekMap_WeekMapDOW) GetDayOfWeek() commons.DayOfWeek {
	if x != nil {
		return x.DayOfWeek
	}
	return commons.DayOfWeek(0)
}

func (x *DatetimePattern_WeekMap_WeekMapDOW) GetStartMinuteInDay() int32 {
	if x != nil {
		return x.StartMinuteInDay
	}
	return 0
}

func (x *DatetimePattern_WeekMap_WeekMapDOW) GetEndMinuteInDay() int32 {
	if x != nil {
		return x.EndMinuteInDay
	}
	return 0
}

func (x *DatetimePattern_WeekMap_WeekMapDOW) GetValue() *commons.OptionTypes {
	if x != nil {
		return x.Value
	}
	return nil
}

// Pair of parent entities, used to relate two entities.
type UpsertNonSkillActivityAssociationRes_EntityMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When possible, the parent entity of the pair.
	LeftEntity *ParentEntity `protobuf:"bytes,1,opt,name=left_entity,json=leftEntity,proto3" json:"left_entity,omitempty"`
	// When possible, the child or member entity of the pair.
	RightEntity *ParentEntity `protobuf:"bytes,2,opt,name=right_entity,json=rightEntity,proto3" json:"right_entity,omitempty"`
}

func (x *UpsertNonSkillActivityAssociationRes_EntityMapping) Reset() {
	*x = UpsertNonSkillActivityAssociationRes_EntityMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertNonSkillActivityAssociationRes_EntityMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertNonSkillActivityAssociationRes_EntityMapping) ProtoMessage() {}

func (x *UpsertNonSkillActivityAssociationRes_EntityMapping) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertNonSkillActivityAssociationRes_EntityMapping.ProtoReflect.Descriptor instead.
func (*UpsertNonSkillActivityAssociationRes_EntityMapping) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{181, 0}
}

func (x *UpsertNonSkillActivityAssociationRes_EntityMapping) GetLeftEntity() *ParentEntity {
	if x != nil {
		return x.LeftEntity
	}
	return nil
}

func (x *UpsertNonSkillActivityAssociationRes_EntityMapping) GetRightEntity() *ParentEntity {
	if x != nil {
		return x.RightEntity
	}
	return nil
}

// Group containing Client Nodes.
type ListConfigEntitiesRes_ClientNodeEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client Nodes.
	Entities []*ClientNode `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_ClientNodeEntities) Reset() {
	*x = ListConfigEntitiesRes_ClientNodeEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesRes_ClientNodeEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_ClientNodeEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_ClientNodeEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_ClientNodeEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_ClientNodeEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197, 0}
}

func (x *ListConfigEntitiesRes_ClientNodeEntities) GetEntities() []*ClientNode {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group containing Location Nodes.
type ListConfigEntitiesRes_LocationNodeEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location Nodes.
	Entities []*LocationNode `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_LocationNodeEntities) Reset() {
	*x = ListConfigEntitiesRes_LocationNodeEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesRes_LocationNodeEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_LocationNodeEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_LocationNodeEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_LocationNodeEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_LocationNodeEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197, 1}
}

func (x *ListConfigEntitiesRes_LocationNodeEntities) GetEntities() []*LocationNode {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group containing Program Nodes.
type ListConfigEntitiesRes_ProgramNodeEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Program Nodes.
	Entities []*ProgramNode `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_ProgramNodeEntities) Reset() {
	*x = ListConfigEntitiesRes_ProgramNodeEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesRes_ProgramNodeEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_ProgramNodeEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_ProgramNodeEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_ProgramNodeEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_ProgramNodeEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197, 2}
}

func (x *ListConfigEntitiesRes_ProgramNodeEntities) GetEntities() []*ProgramNode {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group of Agent Groups.
type ListConfigEntitiesRes_AgentGroupEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent Groups.
	Entities []*AgentGroup `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_AgentGroupEntities) Reset() {
	*x = ListConfigEntitiesRes_AgentGroupEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesRes_AgentGroupEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_AgentGroupEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_AgentGroupEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_AgentGroupEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_AgentGroupEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197, 3}
}

func (x *ListConfigEntitiesRes_AgentGroupEntities) GetEntities() []*AgentGroup {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group containing Shift Templates.
type ListConfigEntitiesRes_ShiftTemplateEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shift Templates.
	Entities []*ShiftTemplate `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_ShiftTemplateEntities) Reset() {
	*x = ListConfigEntitiesRes_ShiftTemplateEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesRes_ShiftTemplateEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_ShiftTemplateEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_ShiftTemplateEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_ShiftTemplateEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_ShiftTemplateEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197, 4}
}

func (x *ListConfigEntitiesRes_ShiftTemplateEntities) GetEntities() []*ShiftTemplate {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group of WFM Agents.
type ListConfigEntitiesRes_WFMAgentEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WFM Agents.
	Entities []*WFMAgent `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_WFMAgentEntities) Reset() {
	*x = ListConfigEntitiesRes_WFMAgentEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesRes_WFMAgentEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_WFMAgentEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_WFMAgentEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_WFMAgentEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_WFMAgentEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197, 5}
}

func (x *ListConfigEntitiesRes_WFMAgentEntities) GetEntities() []*WFMAgent {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group containing Placement Rules.
type ListConfigEntitiesRes_PlacementRuleEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Placement Rules.
	Entities []*PlacementRule `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_PlacementRuleEntities) Reset() {
	*x = ListConfigEntitiesRes_PlacementRuleEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesRes_PlacementRuleEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_PlacementRuleEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_PlacementRuleEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_PlacementRuleEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_PlacementRuleEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197, 6}
}

func (x *ListConfigEntitiesRes_PlacementRuleEntities) GetEntities() []*PlacementRule {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group containing Constraint Rules.
type ListConfigEntitiesRes_ConstraintRuleEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Constraint Rules.
	Entities []*ConstraintRule `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_ConstraintRuleEntities) Reset() {
	*x = ListConfigEntitiesRes_ConstraintRuleEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesRes_ConstraintRuleEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_ConstraintRuleEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_ConstraintRuleEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_ConstraintRuleEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_ConstraintRuleEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197, 7}
}

func (x *ListConfigEntitiesRes_ConstraintRuleEntities) GetEntities() []*ConstraintRule {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group of Non Skill Activities.
type ListConfigEntitiesRes_NonSkillActivityEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Non Skill Activities.
	Entities []*NonSkillActivity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_NonSkillActivityEntities) Reset() {
	*x = ListConfigEntitiesRes_NonSkillActivityEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesRes_NonSkillActivityEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_NonSkillActivityEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_NonSkillActivityEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_NonSkillActivityEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_NonSkillActivityEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197, 8}
}

func (x *ListConfigEntitiesRes_NonSkillActivityEntities) GetEntities() []*NonSkillActivity {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group of AgentAvailabilityPatterns.
type ListConfigEntitiesRes_AgentAvailabilityPatternEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent Availability Patterns.
	Entities []*AgentAvailabilityPattern `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_AgentAvailabilityPatternEntities) Reset() {
	*x = ListConfigEntitiesRes_AgentAvailabilityPatternEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesRes_AgentAvailabilityPatternEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_AgentAvailabilityPatternEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_AgentAvailabilityPatternEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_AgentAvailabilityPatternEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_AgentAvailabilityPatternEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197, 9}
}

func (x *ListConfigEntitiesRes_AgentAvailabilityPatternEntities) GetEntities() []*AgentAvailabilityPattern {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group of OpenTimesPatterns.
type ListConfigEntitiesRes_OpenTimesPatternEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Open Times Patterns.
	Entities []*OpenTimesPattern `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_OpenTimesPatternEntities) Reset() {
	*x = ListConfigEntitiesRes_OpenTimesPatternEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesRes_OpenTimesPatternEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_OpenTimesPatternEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_OpenTimesPatternEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_OpenTimesPatternEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_OpenTimesPatternEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197, 10}
}

func (x *ListConfigEntitiesRes_OpenTimesPatternEntities) GetEntities() []*OpenTimesPattern {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group of Skill Proficiencies.
type ListConfigEntitiesRes_SkillProficiencyEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skill Proficiencies.
	Entities []*SkillProficiency `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_SkillProficiencyEntities) Reset() {
	*x = ListConfigEntitiesRes_SkillProficiencyEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesRes_SkillProficiencyEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_SkillProficiencyEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_SkillProficiencyEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_SkillProficiencyEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_SkillProficiencyEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197, 11}
}

func (x *ListConfigEntitiesRes_SkillProficiencyEntities) GetEntities() []*SkillProficiency {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Group of Schedule Scenarios.
type ListConfigEntitiesRes_ScheduleScenarioEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schedule Scenarios.
	Entities []*ScheduleScenario `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ListConfigEntitiesRes_ScheduleScenarioEntities) Reset() {
	*x = ListConfigEntitiesRes_ScheduleScenarioEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigEntitiesRes_ScheduleScenarioEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigEntitiesRes_ScheduleScenarioEntities) ProtoMessage() {}

func (x *ListConfigEntitiesRes_ScheduleScenarioEntities) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_wfm_wfm_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigEntitiesRes_ScheduleScenarioEntities.ProtoReflect.Descriptor instead.
func (*ListConfigEntitiesRes_ScheduleScenarioEntities) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP(), []int{197, 12}
}

func (x *ListConfigEntitiesRes_ScheduleScenarioEntities) GetEntities() []*ScheduleScenario {
	if x != nil {
		return x.Entities
	}
	return nil
}

var File_api_v1alpha1_wfm_wfm_proto protoreflect.FileDescriptor

var file_api_v1alpha1_wfm_wfm_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x77, 0x66, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x1a, 0x17,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x77, 0x66, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x02, 0x0a, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0xd7, 0x05, 0x0a, 0x0c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x75, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x73,
	0x4f, 0x66, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61,
	0x72, 0x65, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x72, 0x65, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x22, 0x58, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x63, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xca, 0x03, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x45, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x65, 0x5f, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x72, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x86, 0x02, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x66, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a,
	0x78, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x24, 0x0a, 0x22, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x64, 0x22, 0xee, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x48, 0x0a,
	0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x49, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x60, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x55, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x22,
	0x5f, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x87, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x59, 0x0a, 0x16, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x20, 0x0a, 0x1e, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x22, 0x78, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x16, 0x66, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x15,
	0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xdc, 0x09, 0x0a, 0x16, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12,
	0x66, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x5f, 0x0a, 0x1e, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x66, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x62, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x62, 0x61, 0x6e, 0x64,
	0x6f, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x12, 0x77, 0x0a, 0x2b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f,
	0x66, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x25, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x70, 0x0a,
	0x27, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x22, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x77, 0x0a, 0x2b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x25, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x73, 0x0a, 0x29, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x23, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x43, 0x0a, 0x1e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x22, 0x43, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0x7d, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x12, 0x64, 0x0a, 0x19, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x17, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x5e, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x61, 0x0a, 0x1d, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x73, 0x22, 0x0f, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x22, 0x40, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22,
	0x81, 0x08, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x63, 0x61, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x65, 0x0a, 0x1d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x67, 0x0a, 0x1f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x67, 0x73, 0x52, 0x1b, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x1b, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76,
	0x67, 0x73, 0x52, 0x18, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x1f,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x67, 0x73, 0x52, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x63, 0x0a, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x67, 0x73, 0x52,
	0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x19, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x16, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x3c, 0x0a, 0x1b, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x2a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0x87, 0x01,
	0x0a, 0x2a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x15,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x22, 0x2f,
	0x0a, 0x2d, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22,
	0x7d, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x4c, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x67,
	0x0a, 0x28, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x64, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x6f, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x6f, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x22, 0x30, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x21, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x59, 0x0a,
	0x15, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0x8c, 0x05, 0x0a,
	0x12, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42,
	0x0a, 0x1e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x45, 0x0a,
	0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x62,
	0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f,
	0x6e, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x2a,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x2a, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a,
	0x0e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x22, 0xd9, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x15, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x22, 0x1a,
	0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64,
	0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x22, 0xfe, 0x04, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x1d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x4e, 0x57, 0x65, 0x65, 0x6b, 0x73,
	0x12, 0x3a, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x5f, 0x61, 0x67,
	0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x41, 0x67,
	0x6f, 0x54, 0x6f, 0x45, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x72,
	0x65, 0x6e, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x44,
	0x0a, 0x1f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x65, 0x0a, 0x14, 0x61, 0x76, 0x67, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x76, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x61, 0x76, 0x67, 0x73, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x22, 0x74, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x55, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x12, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x22, 0x1d, 0x0a,
	0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x75, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x13, 0x72, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x22, 0xe2, 0x03, 0x0a, 0x24, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x72,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12,
	0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x73, 0x54, 0x6f, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x22, 0xeb, 0x03, 0x0a, 0x2d, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x72, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x72, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x42, 0x0a, 0x1e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x73, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x22, 0x80, 0x04, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x73, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x32, 0x0a,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x15, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6d,
	0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x6d, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x6d, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x41, 0x54, 0x41, 0x42, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x72, 0x6d, 0x73, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x41, 0x54, 0x41, 0x42, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6d, 0x73, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x41, 0x53, 0x41, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x72, 0x6d, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x53, 0x41, 0x12, 0x22, 0x0a, 0x0d,
	0x72, 0x6d, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x41, 0x43, 0x57, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x6d, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x43, 0x57,
	0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6d, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x41, 0x48,
	0x54, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x6d, 0x73, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x41, 0x48, 0x54, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd9, 0x01, 0x0a, 0x2d, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53,
	0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x22, 0x1d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x22, 0x7a, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x5b, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x55,
	0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0xd9, 0x03, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x55, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x22,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66,
	0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x1a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a,
	0x1e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x73, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x22, 0x58, 0x0a, 0x1a, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x3a,
	0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x1a, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x73,
	0x22, 0xc2, 0x03, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x2c, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x71, 0x0a,
	0x16, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x69, 0x64, 0x73, 0x48, 0x00, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x69, 0x64, 0x73,
	0x12, 0x8a, 0x01, 0x0a, 0x1d, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x1a, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x64,
	0x73, 0x22, 0x42, 0x0a, 0x1a, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x53, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c,
	0x54, 0x41, 0x53, 0x10, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22,
	0x6e, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0xc0, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x4f, 0x57, 0x41, 0x6e, 0x64, 0x4d,
	0x4f, 0x59, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x4f, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x77, 0x6f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x57, 0x4f, 0x4d, 0x53, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x57, 0x6f, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x4f, 0x57, 0x41,
	0x6e, 0x64, 0x4d, 0x4f, 0x59, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x4f, 0x57, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x4f, 0x59, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x6f, 0x79, 0x22, 0x5d, 0x0a, 0x2f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x64, 0x22, 0xd2, 0x02, 0x0a, 0x2f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x4f, 0x66, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x45, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x30, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5b,
	0x0a, 0x2b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x26, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x30, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22,
	0xf3, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x76, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x41, 0x64, 0x64,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0xaa, 0x07, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x53, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x11,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x61, 0x0a, 0x1b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x17, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x1f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x58,
	0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53,
	0x69, 0x64, 0x22, 0x4f, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0xc2,
	0x07, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x39, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x52,
	0x0a, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x61, 0x0a, 0x1b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x18, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x17, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x1f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12,
	0x58, 0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x53, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x3d, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0xaf, 0x08, 0x0a, 0x0c,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x74, 0x54, 0x6f, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61,
	0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x14, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x1b,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x6e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x5f, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x17, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73,
	0x12, 0x77, 0x0a, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x1f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x17, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x15, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x4b, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x43, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x22,
	0x5c, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x17, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0xdd, 0x08, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x69, 0x64, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x15, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x49,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x68, 0x72, 0x69, 0x6e,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x16,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x14, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x1b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x18, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x17,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52,
	0x1f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73,
	0x12, 0x58, 0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x60, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x31,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x22, 0x40, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x16, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x90, 0x06, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x69, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x53, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x11,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x16, 0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x64, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x7d, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x49, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x22, 0x86, 0x03, 0x0a, 0x10, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x6f, 0x6e, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x6f, 0x6e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x15, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x54, 0x6f,
	0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x62, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x52, 0x0a, 0x15, 0x69, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x13, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x6d, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x50, 0x0a, 0x12, 0x6e, 0x6f, 0x6e,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x88, 0x01, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x6f, 0x6e,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x6f, 0x6e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12, 0x36,
	0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x50, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x11, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x23, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x17, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x14, 0x6e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x36,
	0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53,
	0x69, 0x64, 0x12, 0x5d, 0x0a, 0x19, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x16, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x22, 0xa0, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x53, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x59, 0x0a,
	0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xb5, 0x05, 0x0a, 0x0a, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x12,
	0x43, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x53, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x46, 0x4d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x66, 0x6d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x18, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52,
	0x1f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73,
	0x22, 0x54, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3d, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x3d, 0x0a, 0x0b,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x15, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x22, 0xf9, 0x04, 0x0a, 0x08, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x63, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x63, 0x6e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x58, 0x0a,
	0x17, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x22, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x1f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x74, 0x63, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x63, 0x6e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x4c,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x09, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x13, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x22, 0xb2, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x46, 0x4d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6b, 0x0a, 0x15, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6c, 0x6c, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42,
	0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x55, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0c,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x43, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x46,
	0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x69, 0x64, 0x22, 0x56, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x57, 0x46, 0x4d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x16,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x56,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x57,
	0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x77,
	0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x77, 0x66, 0x6d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x46,
	0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x28, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c,
	0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x22, 0x9a, 0x01, 0x0a,
	0x18, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x66, 0x6d,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x18, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0c, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x1c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x0c, 0x44, 0x4f,
	0x57, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0e,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x4f, 0x57, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x52,
	0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65,
	0x65, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x77, 0x65, 0x65, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x96, 0x06, 0x0a, 0x0d,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x18, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x6f, 0x75, 0x72, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x68, 0x69, 0x66, 0x74, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x65, 0x61, 0x63, 0x68, 0x5f, 0x44, 0x4f, 0x57, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x73, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x61, 0x63, 0x68, 0x44, 0x4f, 0x57, 0x12,
	0x31, 0x0a, 0x15, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x73, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x16, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x14, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x0e, 0x44, 0x4f, 0x57, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x4f, 0x57, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x44, 0x4f, 0x57, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x60, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x46,
	0x0a, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x22, 0x60,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x42, 0x79, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x67, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x20,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53,
	0x69, 0x64, 0x22, 0x62, 0x0a, 0x20, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xc6, 0x03, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x1a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22,
	0x60, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x0e, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x22, 0x46, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0x18, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0xa5, 0x05, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x77,
	0x65, 0x65, 0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x4d, 0x61, 0x70, 0x52, 0x08, 0x77, 0x65, 0x65, 0x6b, 0x4d,
	0x61, 0x70, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xee, 0x02, 0x0a, 0x07, 0x57,
	0x65, 0x65, 0x6b, 0x4d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x64, 0x61, 0x79,
	0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x57,
	0x65, 0x65, 0x6b, 0x4d, 0x61, 0x70, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x4d, 0x61, 0x70, 0x44, 0x4f,
	0x57, 0x52, 0x07, 0x64, 0x61, 0x79, 0x4d, 0x61, 0x70, 0x73, 0x1a, 0xce, 0x01, 0x0a, 0x0a, 0x57,
	0x65, 0x65, 0x6b, 0x4d, 0x61, 0x70, 0x44, 0x4f, 0x57, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x61, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x79,
	0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65,
	0x6b, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x79,
	0x12, 0x29, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x6e, 0x64,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x81, 0x01, 0x0a, 0x0c,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x41, 0x0a, 0x0e,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x8e, 0x02, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4c,
	0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0f, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64,
	0x22, 0x6d, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x50, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x10, 0x6f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22,
	0x50, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69,
	0x64, 0x22, 0x6d, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x50,
	0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x10,
	0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x50, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x22,
	0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0xfe, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xe7, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x69, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x47,
	0x0a, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x22, 0xa6, 0x02, 0x0a, 0x18, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4c,
	0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0f, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64,
	0x22, 0x8d, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x68, 0x0a, 0x1a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x22, 0x68, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x68, 0x0a, 0x1a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x52, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x23, 0x0a, 0x21, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22,
	0x68, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0xb4,
	0x02, 0x0a, 0x15, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x5f,
	0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f,
	0x77, 0x6e, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x4a, 0x0a, 0x10, 0x69, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x12, 0x4a, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x12, 0x43, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x89, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x4a, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x53, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x41,
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x5e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x07, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x52, 0x07, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x73, 0x22, 0x93, 0x02, 0x0a, 0x24, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x6f,
	0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x6f, 0x6e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12,
	0x32, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0xa6, 0x03, 0x0a, 0x24, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x76, 0x0a, 0x14, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x55, 0x73, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x93, 0x01, 0x0a, 0x0d, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0b,
	0x6c, 0x65, 0x66, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a,
	0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x22, 0xd2, 0x03, 0x0a, 0x10, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x1b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0d,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45,
	0x0a, 0x1f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x53, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x72, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x53, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x22, 0x9c, 0x04, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x18, 0x63, 0x6f, 0x70, 0x69, 0x65,
	0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x53, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69,
	0x64, 0x54, 0x6f, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x0f, 0x43,
	0x6f, 0x70, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53,
	0x69, 0x64, 0x22, 0xd6, 0x04, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x1c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x22, 0x58, 0x0a, 0x22, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x22,
	0xa5, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x62, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0xc4, 0x15, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x4c, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x5f, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x65, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e,
	0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x68, 0x0a, 0x0f,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x2e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x68, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x14, 0x6e, 0x6f, 0x6e, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e,
	0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x8a,
	0x01, 0x0a, 0x1b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x19, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x72, 0x0a, 0x13, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12,
	0x57, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x73, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x71, 0x0a,
	0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73,
	0x1a, 0x4e, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x1a, 0x52, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0x50, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e,
	0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x4e, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x54, 0x0a, 0x15, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x10,
	0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x54, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x56,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x18, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x1a, 0x6a, 0x0a, 0x20, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x5a,
	0x0a, 0x18, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x18, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x18, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xd0,
	0x01, 0x0a, 0x0a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x32, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x49, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64,
	0x73, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x91, 0x01, 0x0a,
	0x17, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64,
	0x22, 0x9e, 0x01, 0x0a, 0x17, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x43, 0x0a, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x64, 0x22, 0x4f, 0x0a, 0x19, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53,
	0x69, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xe8, 0x02, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x48, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x12, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0xb6, 0x04, 0x0a, 0x0d, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x54, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0xd7, 0x06, 0x0a, 0x11, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x39, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x74, 0x65, 0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x21,
	0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x28, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x74, 0x65,
	0x73, 0x5f, 0x62, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x74, 0x65, 0x73, 0x42, 0x75,
	0x74, 0x4e, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x2f,
	0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x66,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x74, 0x65, 0x73, 0x42, 0x75, 0x74, 0x4e, 0x6f,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x75, 0x6e, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e,
	0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x46, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f,
	0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49,
	0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a,
	0x0d, 0x66, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x46, 0x54, 0x45, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x56, 0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0c, 0x66, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x15, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x1d, 0x46, 0x54, 0x45, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x64, 0x46, 0x74, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0xcc, 0x04, 0x0a, 0x0d, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77,
	0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x8b, 0x03, 0x0a, 0x0c, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x49, 0x6e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x64,
	0x12, 0x55, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0xb0, 0x03, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x6d, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x24, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x3f, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0xc4,
	0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x61, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x16, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x76, 0x69, 0x65,
	0x77, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x46, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0xe5, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x49, 0x6e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6f, 0x70, 0x79, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x6f, 0x4e, 0x65, 0x77, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x67,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x22,
	0x60, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x0d, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x22, 0xb6, 0x04, 0x0a, 0x15, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x12, 0x67, 0x0a,
	0x22, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x9a, 0x04, 0x0a,
	0x17, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x66,
	0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a,
	0x19, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x17, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xda, 0x03, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x5d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0e, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x5a, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x41,
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x61, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x86, 0x03, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x77, 0x66, 0x6d, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x66, 0x6d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22,
	0xb6, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x56, 0x32, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x64, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56,
	0x32, 0x52, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3e,
	0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x93,
	0x01, 0x0a, 0x15, 0x53, 0x77, 0x61, 0x70, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x31, 0x12, 0x24,
	0x0a, 0x0e, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x64, 0x32, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x69, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x15, 0x53, 0x77, 0x61, 0x70, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x48, 0x0a,
	0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64,
	0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x77, 0x66,
	0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x27,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x22, 0x70, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x0e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x25, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xfc, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x91, 0x03, 0x0a, 0x10, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69,
	0x64, 0x12, 0x57, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x6d, 0x0a, 0x25,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x9d, 0x01, 0x0a,
	0x16, 0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xb8, 0x02, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x1b, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x19, 0x69,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x15, 0x6f, 0x77, 0x6e, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x13, 0x6f, 0x77, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x62, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x19, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x22, 0x60, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a,
	0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f,
	0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49,
	0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x32, 0xe8, 0xa0, 0x01, 0x0a, 0x03, 0x57, 0x46,
	0x4d, 0x12, 0xa2, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01,
	0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xd5, 0x01, 0x0a, 0x1f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x34,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x46, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22,
	0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x0a, 0x03,
	0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x67, 0x65, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0xaa, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x79, 0x6e,
	0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91,
	0x02, 0x0a, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xd2, 0x01, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x49, 0xba, 0xb8, 0x91, 0x02, 0x0a, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a,
	0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x61, 0x73, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x64, 0x61, 0x74,
	0x65, 0x12, 0xc5, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x42, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74,
	0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x39,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x64, 0x61, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0xc1, 0x01, 0x0a, 0x1a, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22,
	0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x81, 0x01,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x31,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0xf5, 0x01, 0x0a, 0x27, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x3c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x4e, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x3a, 0x01, 0x2a, 0x22, 0x39,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xdd, 0x01, 0x0a, 0x21, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x22,
	0x48, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x81, 0x02, 0x0a, 0x2a, 0x47, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x51, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x01, 0x2a, 0x22,
	0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x72,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0xed, 0x01,
	0x0a, 0x25, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x22,
	0x4c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3c, 0x3a, 0x01, 0x2a, 0x22, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0xc1, 0x01,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x2f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x73, 0x22, 0x41,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31,
	0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x73, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x6f, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x74, 0x6f, 0x70,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xad, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xc4, 0x01,
	0x0a, 0x1e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x45, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a,
	0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x62, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x30, 0x01, 0x12, 0xf7, 0x01, 0x0a, 0x27, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x3c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x4e, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x3a, 0x01,
	0x2a, 0x22, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x62, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x77, 0x69, 0x74, 0x68, 0x73, 0x74, 0x61, 0x74, 0x73, 0x30, 0x01, 0x12, 0xad,
	0x01, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0xbd,
	0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01,
	0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xbd,
	0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01,
	0x2a, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xb9,
	0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3e,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e,
	0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x72, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0xd6,
	0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x4b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x22, 0x36, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x66, 0x6f, 0x72, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x30, 0x01, 0x12, 0xcd, 0x01, 0x0a, 0x21, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x36, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x48, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a,
	0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x62, 0x79, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x30, 0x01, 0x12, 0x83, 0x02, 0x0a, 0x2a, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x51, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x01, 0x2a, 0x22, 0x3c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x62, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x77, 0x69, 0x74, 0x68, 0x73, 0x74, 0x61, 0x74, 0x73, 0x30, 0x01, 0x12, 0xb9, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0xb5, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a,
	0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x3e, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a,
	0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x66, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0xb9, 0x01,
	0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x3e, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x12, 0xed, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x41, 0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x4c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f,
	0x72, 0x61, 0x6c, 0x6c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x4f, 0x57, 0x41, 0x6e,
	0x64, 0x4d, 0x4f, 0x59, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x4f, 0x57, 0x41, 0x6e, 0x64, 0x4d, 0x4f, 0x59, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x44, 0x4f, 0x57, 0x41, 0x6e, 0x64, 0x4d, 0x4f, 0x59, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x64, 0x6f, 0x77, 0x61, 0x6e, 0x64, 0x6d, 0x6f, 0x79, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x89, 0x02, 0x0a, 0x2c, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x41, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x41, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x53, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x3a, 0x01,
	0x2a, 0x22, 0x3e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x64, 0x61, 0x74, 0x61, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x73, 0x66, 0x6f, 0x72, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x92, 0x02, 0x0a, 0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73,
	0x55, 0x73, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x42, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x42, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x59, 0xba, 0xb8, 0x91,
	0x02, 0x0a, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x0a, 0x03, 0x08, 0xc0, 0x0c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x44, 0x3a, 0x01, 0x2a, 0x22, 0x3f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x73, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x99,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0xa1,
	0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0x38, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x72, 0x75, 0x6c, 0x65, 0x12, 0xa9, 0x01,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01,
	0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x72, 0x75, 0x6c, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x72, 0x75, 0x6c, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22,
	0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x6e, 0x6f, 0x6e, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0x3d,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x6e, 0x6f, 0x6e,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0xd9, 0x01,
	0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x47, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6e, 0x6f, 0x6e,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xdd, 0x01, 0x0a, 0x21, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x48, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01,
	0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x46,
	0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x35,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x77, 0x66, 0x6d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x46, 0x4d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x46, 0x4d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x77, 0x66, 0x6d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65,
	0x64, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x57, 0x46,
	0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22,
	0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
	0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xed, 0x01, 0x0a, 0x25, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x46, 0x4d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x22, 0x4c, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a,
	0x22, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x77, 0x69, 0x74, 0x68, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x40, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x46, 0x4d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22,
	0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x77, 0x66, 0x6d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0xad, 0x01,
	0x0a, 0x15, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0xa5, 0x01,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xb9, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x69, 0x64, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x42, 0x79, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x42,
	0x79, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x68, 0x69, 0x66, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x62, 0x79, 0x73, 0x69, 0x64, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x1d, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x68, 0x69, 0x66, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x44, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6c,
	0x65, 0x12, 0xa4, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a,
	0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6c, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6c, 0x65,
	0x12, 0xb1, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a,
	0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xa5, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x67, 0x65, 0x74, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x62, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x73, 0x12, 0xd1, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65,
	0x73, 0x22, 0x45, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xd1, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x33, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x45, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xd1, 0x01, 0x0a,
	0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x45, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0xb1, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc,
	0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65,
	0x74, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x62, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x73, 0x12, 0xdd, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4e,
	0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x48, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22,
	0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x6e, 0x6f, 0x6e, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x3f, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0xb9, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3f, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a,
	0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0xb1, 0x01, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x89, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x33, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x63, 0x6f, 0x70, 0x79, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0xd5, 0x01, 0x0a,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x46, 0xba, 0xb8,
	0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01,
	0x2a, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x77, 0x69, 0x74, 0x68, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91,
	0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a,
	0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x67, 0x65, 0x74, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0xdd, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x48, 0xba, 0xb8, 0x91, 0x02,
	0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22,
	0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77,
	0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x22, 0x44,
	0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34,
	0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x64, 0x72, 0x61, 0x66, 0x74, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0xa5, 0x01, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x72, 0x61, 0x66, 0x74, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a,
	0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x64, 0x72, 0x61, 0x66, 0x74, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x37, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03,
	0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f,
	0x67, 0x65, 0x74, 0x64, 0x72, 0x61, 0x66, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0xa1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba, 0xb8, 0x91, 0x02, 0x05,
	0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66,
	0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x64, 0x72, 0x61, 0x66, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0xa5, 0x01, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x12, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x32, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08,
	0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x76, 0x32, 0x12, 0xa1, 0x01, 0x0a, 0x12, 0x53, 0x77, 0x61, 0x70, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x39, 0xba,
	0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a,
	0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0xe9, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x12, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x4b, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3b, 0x3a, 0x01, 0x2a, 0x22, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x79, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x69, 0x64, 0x73, 0x12, 0xa5, 0x01, 0x0a,
	0x13, 0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66,
	0x6d, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a,
	0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d,
	0x2f, 0x73, 0x65, 0x74, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x22, 0x3a, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0xb1, 0x01, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x22, 0x3d, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0xad, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x3c, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0xc1, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12,
	0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77,
	0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x77, 0x66, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x41, 0xba, 0xb8, 0x91, 0x02, 0x05, 0x0a, 0x03, 0x08, 0xdc, 0x0b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x42, 0xaf, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x77, 0x66, 0x6d, 0x42, 0x08, 0x57,
	0x66, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61,
	0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x77, 0x66, 0x6d, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x57, 0xaa, 0x02, 0x10, 0x41,
	0x70, 0x69, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x66, 0x6d, 0xca,
	0x02, 0x10, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x57,
	0x66, 0x6d, 0xe2, 0x02, 0x1c, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x5c, 0x57, 0x66, 0x6d, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x12, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x3a, 0x3a, 0x57, 0x66, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1alpha1_wfm_wfm_proto_rawDescOnce sync.Once
	file_api_v1alpha1_wfm_wfm_proto_rawDescData = file_api_v1alpha1_wfm_wfm_proto_rawDesc
)

func file_api_v1alpha1_wfm_wfm_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_wfm_wfm_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_wfm_wfm_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1alpha1_wfm_wfm_proto_rawDescData)
	})
	return file_api_v1alpha1_wfm_wfm_proto_rawDescData
}

var file_api_v1alpha1_wfm_wfm_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1alpha1_wfm_wfm_proto_msgTypes = make([]protoimpl.MessageInfo, 277)
var file_api_v1alpha1_wfm_wfm_proto_goTypes = []interface{}{
	(DeleteForecastIntervalsReq_ForecastIntervalDeleteType)(0), // 0: api.v1alpha1.wfm.DeleteForecastIntervalsReq.ForecastIntervalDeleteType
	(*Skill)(nil),                                                  // 1: api.v1alpha1.wfm.Skill
	(*SkillProfile)(nil),                                           // 2: api.v1alpha1.wfm.SkillProfile
	(*ListSkillProfilesReq)(nil),                                   // 3: api.v1alpha1.wfm.ListSkillProfilesReq
	(*ListSkillProfilesRes)(nil),                                   // 4: api.v1alpha1.wfm.ListSkillProfilesRes
	(*UpdateSkillProfileReq)(nil),                                  // 5: api.v1alpha1.wfm.UpdateSkillProfileReq
	(*UpdateSkillProfileRes)(nil),                                  // 6: api.v1alpha1.wfm.UpdateSkillProfileRes
	(*UpdateSkillProfileProficienciesReq)(nil),                     // 7: api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq
	(*UpdateSkillProfileProficienciesRes)(nil),                     // 8: api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes
	(*GetSkillProfileReq)(nil),                                     // 9: api.v1alpha1.wfm.GetSkillProfileReq
	(*GetSkillProfileRes)(nil),                                     // 10: api.v1alpha1.wfm.GetSkillProfileRes
	(*ResyncSkillProfilesReq)(nil),                                 // 11: api.v1alpha1.wfm.ResyncSkillProfilesReq
	(*ResyncSkillProfilesRes)(nil),                                 // 12: api.v1alpha1.wfm.ResyncSkillProfilesRes
	(*GetLastSkillProfileResyncDateReq)(nil),                       // 13: api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq
	(*GetLastSkillProfileResyncDateRes)(nil),                       // 14: api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes
	(*UpsertForecastingParametersReq)(nil),                         // 15: api.v1alpha1.wfm.UpsertForecastingParametersReq
	(*UpsertForecastingParametersRes)(nil),                         // 16: api.v1alpha1.wfm.UpsertForecastingParametersRes
	(*GetForecastingParametersReq)(nil),                            // 17: api.v1alpha1.wfm.GetForecastingParametersReq
	(*GetForecastingParametersRes)(nil),                            // 18: api.v1alpha1.wfm.GetForecastingParametersRes
	(*HistoricalDataInterval)(nil),                                 // 19: api.v1alpha1.wfm.HistoricalDataInterval
	(*ListHistoricalDataReq)(nil),                                  // 20: api.v1alpha1.wfm.ListHistoricalDataReq
	(*ListHistoricalDataRes)(nil),                                  // 21: api.v1alpha1.wfm.ListHistoricalDataRes
	(*UpsertHistoricalDataDeltaReq)(nil),                           // 22: api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq
	(*UpsertHistoricalDataDeltaRes)(nil),                           // 23: api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes
	(*UpsertHistoricalDataDeltasReq)(nil),                          // 24: api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq
	(*UpsertHistoricalDataDeltasRes)(nil),                          // 25: api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes
	(*ListSkillsReq)(nil),                                          // 26: api.v1alpha1.wfm.ListSkillsReq
	(*ListSkillsRes)(nil),                                          // 27: api.v1alpha1.wfm.ListSkillsRes
	(*CallProfileTemplate)(nil),                                    // 28: api.v1alpha1.wfm.CallProfileTemplate
	(*BuildCallProfileTemplateForSkillProfileReq)(nil),             // 29: api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq
	(*BuildCallProfileTemplateForSkillProfileRes)(nil),             // 30: api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes
	(*CreateInactiveSkillProfileMappingReq)(nil),                   // 31: api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq
	(*CreateInactiveSkillProfileMappingRes)(nil),                   // 32: api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes
	(*GetAvailableRegressionForecasterModelTypesReq)(nil),          // 33: api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq
	(*GetAvailableRegressionForecasterModelTypesRes)(nil),          // 34: api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes
	(*DisconnectInactiveSkillProfileMappingReq)(nil),               // 35: api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq
	(*DisconnectInactiveSkillProfileMappingRes)(nil),               // 36: api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes
	(*DeleteHistoricalDataDeltasReq)(nil),                          // 37: api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq
	(*DeleteHistoricalDataDeltasRes)(nil),                          // 38: api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes
	(*ListTopSkillProfilesReq)(nil),                                // 39: api.v1alpha1.wfm.ListTopSkillProfilesReq
	(*ListTopSkillProfilesRes)(nil),                                // 40: api.v1alpha1.wfm.ListTopSkillProfilesRes
	(*GetSkillProfilesCountReq)(nil),                               // 41: api.v1alpha1.wfm.GetSkillProfilesCountReq
	(*GetSkillProfilesCountRes)(nil),                               // 42: api.v1alpha1.wfm.GetSkillProfilesCountRes
	(*BuildProfileForecastByIntervalReq)(nil),                      // 43: api.v1alpha1.wfm.BuildProfileForecastByIntervalReq
	(*CallDataByInterval)(nil),                                     // 44: api.v1alpha1.wfm.CallDataByInterval
	(*BuildProfileForecastByIntervalWithStatsReq)(nil),             // 45: api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq
	(*BuildProfileForecastByIntervalWithStatsRes)(nil),             // 46: api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes
	(*UpsertProfileForecastReq)(nil),                               // 47: api.v1alpha1.wfm.UpsertProfileForecastReq
	(*UpsertProfileForecastRes)(nil),                               // 48: api.v1alpha1.wfm.UpsertProfileForecastRes
	(*CreateCallProfileTemplateReq)(nil),                           // 49: api.v1alpha1.wfm.CreateCallProfileTemplateReq
	(*CreateCallProfileTemplateRes)(nil),                           // 50: api.v1alpha1.wfm.CreateCallProfileTemplateRes
	(*DeleteCallProfileTemplateReq)(nil),                           // 51: api.v1alpha1.wfm.DeleteCallProfileTemplateReq
	(*DeleteCallProfileTemplateRes)(nil),                           // 52: api.v1alpha1.wfm.DeleteCallProfileTemplateRes
	(*RegressionTemplate)(nil),                                     // 53: api.v1alpha1.wfm.RegressionTemplate
	(*CreateRegressionTemplateReq)(nil),                            // 54: api.v1alpha1.wfm.CreateRegressionTemplateReq
	(*CreateRegressionTemplateRes)(nil),                            // 55: api.v1alpha1.wfm.CreateRegressionTemplateRes
	(*DeleteRegressionTemplateReq)(nil),                            // 56: api.v1alpha1.wfm.DeleteRegressionTemplateReq
	(*DeleteRegressionTemplateRes)(nil),                            // 57: api.v1alpha1.wfm.DeleteRegressionTemplateRes
	(*ListRegressionTemplatesReq)(nil),                             // 58: api.v1alpha1.wfm.ListRegressionTemplatesReq
	(*ListRegressionTemplatesRes)(nil),                             // 59: api.v1alpha1.wfm.ListRegressionTemplatesRes
	(*BuildRegressionForecastByIntervalReq)(nil),                   // 60: api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq
	(*BuildRegressionForecastByIntervalWithStatsReq)(nil),          // 61: api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq
	(*GetForecastStatisticsRes)(nil),                               // 62: api.v1alpha1.wfm.GetForecastStatisticsRes
	(*BuildRegressionForecastByIntervalWithStatsRes)(nil),          // 63: api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes
	(*ListCallProfileTemplatesReq)(nil),                            // 64: api.v1alpha1.wfm.ListCallProfileTemplatesReq
	(*ListCallProfileTemplatesRes)(nil),                            // 65: api.v1alpha1.wfm.ListCallProfileTemplatesRes
	(*ListForecastIntervalsForSkillProfileReq)(nil),                // 66: api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq
	(*UpsertRegressionForecastReq)(nil),                            // 67: api.v1alpha1.wfm.UpsertRegressionForecastReq
	(*UpsertRegressionForecastRes)(nil),                            // 68: api.v1alpha1.wfm.UpsertRegressionForecastRes
	(*UpsertForecastDataDeltaReq)(nil),                             // 69: api.v1alpha1.wfm.UpsertForecastDataDeltaReq
	(*UpsertForecastDataDeltaRes)(nil),                             // 70: api.v1alpha1.wfm.UpsertForecastDataDeltaRes
	(*UpsertForecastDataDeltasReq)(nil),                            // 71: api.v1alpha1.wfm.UpsertForecastDataDeltasReq
	(*UpsertForecastDataDeltasRes)(nil),                            // 72: api.v1alpha1.wfm.UpsertForecastDataDeltasRes
	(*DeleteForecastIntervalsReq)(nil),                             // 73: api.v1alpha1.wfm.DeleteForecastIntervalsReq
	(*DeleteForecastIntervalsRes)(nil),                             // 74: api.v1alpha1.wfm.DeleteForecastIntervalsRes
	(*ListHistoricalDataForAllSkillProfilesReq)(nil),               // 75: api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq
	(*ListHistoricalDataForAllSkillProfilesRes)(nil),               // 76: api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes
	(*BuildDOWAndMOYProfilesReq)(nil),                              // 77: api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq
	(*BuildDOWAndMOYProfilesRes)(nil),                              // 78: api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes
	(*CalculateTrainingDataAveragesForSkillProfileReq)(nil),        // 79: api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq
	(*CalculateTrainingDataAveragesForSkillProfileRes)(nil),        // 80: api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes
	(*UpdateSkillProfileAveragesUsingHistoricalDataReq)(nil),       // 81: api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq
	(*UpdateSkillProfileAveragesUsingHistoricalDataRes)(nil),       // 82: api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes
	(*UserCapability)(nil),                                         // 83: api.v1alpha1.wfm.UserCapability
	(*CallCenterNode)(nil),                                         // 84: api.v1alpha1.wfm.CallCenterNode
	(*UpdateCallCenterNodeReq)(nil),                                // 85: api.v1alpha1.wfm.UpdateCallCenterNodeReq
	(*UpdateCallCenterNodeRes)(nil),                                // 86: api.v1alpha1.wfm.UpdateCallCenterNodeRes
	(*ClientNode)(nil),                                             // 87: api.v1alpha1.wfm.ClientNode
	(*CreateClientNodeReq)(nil),                                    // 88: api.v1alpha1.wfm.CreateClientNodeReq
	(*CreateClientNodeRes)(nil),                                    // 89: api.v1alpha1.wfm.CreateClientNodeRes
	(*UpdateClientNodeReq)(nil),                                    // 90: api.v1alpha1.wfm.UpdateClientNodeReq
	(*UpdateClientNodeRes)(nil),                                    // 91: api.v1alpha1.wfm.UpdateClientNodeRes
	(*LocationNode)(nil),                                           // 92: api.v1alpha1.wfm.LocationNode
	(*CreateLocationNodeReq)(nil),                                  // 93: api.v1alpha1.wfm.CreateLocationNodeReq
	(*CreateLocationNodeRes)(nil),                                  // 94: api.v1alpha1.wfm.CreateLocationNodeRes
	(*UpdateLocationNodeReq)(nil),                                  // 95: api.v1alpha1.wfm.UpdateLocationNodeReq
	(*UpdateLocationNodeRes)(nil),                                  // 96: api.v1alpha1.wfm.UpdateLocationNodeRes
	(*ProgramNode)(nil),                                            // 97: api.v1alpha1.wfm.ProgramNode
	(*CreateProgramNodeReq)(nil),                                   // 98: api.v1alpha1.wfm.CreateProgramNodeReq
	(*CreateProgramNodeRes)(nil),                                   // 99: api.v1alpha1.wfm.CreateProgramNodeRes
	(*UpdateProgramNodeReq)(nil),                                   // 100: api.v1alpha1.wfm.UpdateProgramNodeReq
	(*UpdateProgramNodeRes)(nil),                                   // 101: api.v1alpha1.wfm.UpdateProgramNodeRes
	(*ParentEntity)(nil),                                           // 102: api.v1alpha1.wfm.ParentEntity
	(*ConstraintRule)(nil),                                         // 103: api.v1alpha1.wfm.ConstraintRule
	(*CreateConstraintRuleReq)(nil),                                // 104: api.v1alpha1.wfm.CreateConstraintRuleReq
	(*CreateConstraintRuleRes)(nil),                                // 105: api.v1alpha1.wfm.CreateConstraintRuleRes
	(*UpdateConstraintRuleReq)(nil),                                // 106: api.v1alpha1.wfm.UpdateConstraintRuleReq
	(*UpdateConstraintRuleRes)(nil),                                // 107: api.v1alpha1.wfm.UpdateConstraintRuleRes
	(*DeleteConstraintRuleReq)(nil),                                // 108: api.v1alpha1.wfm.DeleteConstraintRuleReq
	(*DeleteConstraintRuleRes)(nil),                                // 109: api.v1alpha1.wfm.DeleteConstraintRuleRes
	(*NonSkillActivity)(nil),                                       // 110: api.v1alpha1.wfm.NonSkillActivity
	(*CreateNonSkillActivityReq)(nil),                              // 111: api.v1alpha1.wfm.CreateNonSkillActivityReq
	(*CreateNonSkillActivityRes)(nil),                              // 112: api.v1alpha1.wfm.CreateNonSkillActivityRes
	(*UpdateNonSkillActivityReq)(nil),                              // 113: api.v1alpha1.wfm.UpdateNonSkillActivityReq
	(*UpdateNonSkillActivityRes)(nil),                              // 114: api.v1alpha1.wfm.UpdateNonSkillActivityRes
	(*ListNonSkillActivityAssociationsReq)(nil),                    // 115: api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq
	(*ListNonSkillActivityAssociationsRes)(nil),                    // 116: api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes
	(*SchedulingActivity)(nil),                                     // 117: api.v1alpha1.wfm.SchedulingActivity
	(*ListCandidateSchedulingActivitiesReq)(nil),                   // 118: api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq
	(*ListCandidateSchedulingActivitiesRes)(nil),                   // 119: api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes
	(*AgentGroup)(nil),                                             // 120: api.v1alpha1.wfm.AgentGroup
	(*CreateAgentGroupReq)(nil),                                    // 121: api.v1alpha1.wfm.CreateAgentGroupReq
	(*CreateAgentGroupRes)(nil),                                    // 122: api.v1alpha1.wfm.CreateAgentGroupRes
	(*UpdateAgentGroupReq)(nil),                                    // 123: api.v1alpha1.wfm.UpdateAgentGroupReq
	(*UpdateAgentGroupRes)(nil),                                    // 124: api.v1alpha1.wfm.UpdateAgentGroupRes
	(*WFMAgent)(nil),                                               // 125: api.v1alpha1.wfm.WFMAgent
	(*UpdateWFMAgentReq)(nil),                                      // 126: api.v1alpha1.wfm.UpdateWFMAgentReq
	(*UpdateWFMAgentRes)(nil),                                      // 127: api.v1alpha1.wfm.UpdateWFMAgentRes
	(*ListAllWFMAgentsReq)(nil),                                    // 128: api.v1alpha1.wfm.ListAllWFMAgentsReq
	(*ListAllWFMAgentsRes)(nil),                                    // 129: api.v1alpha1.wfm.ListAllWFMAgentsRes
	(*ListCandidateWFMAgentsReq)(nil),                              // 130: api.v1alpha1.wfm.ListCandidateWFMAgentsReq
	(*ListCandidateWFMAgentsRes)(nil),                              // 131: api.v1alpha1.wfm.ListCandidateWFMAgentsRes
	(*ListUngroupedWFMAgentsReq)(nil),                              // 132: api.v1alpha1.wfm.ListUngroupedWFMAgentsReq
	(*ListUngroupedWFMAgentsRes)(nil),                              // 133: api.v1alpha1.wfm.ListUngroupedWFMAgentsRes
	(*ListWFMAgentsAssociatedWithAgentGroupReq)(nil),               // 134: api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq
	(*ListWFMAgentsAssociatedWithAgentGroupRes)(nil),               // 135: api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes
	(*BuildAgentDiagnosticsReq)(nil),                               // 136: api.v1alpha1.wfm.BuildAgentDiagnosticsReq
	(*BuildAgentDiagnosticsRes)(nil),                               // 137: api.v1alpha1.wfm.BuildAgentDiagnosticsRes
	(*CreateWFMAgentMembershipsReq)(nil),                           // 138: api.v1alpha1.wfm.CreateWFMAgentMembershipsReq
	(*CreateWFMAgentMembershipsRes)(nil),                           // 139: api.v1alpha1.wfm.CreateWFMAgentMembershipsRes
	(*DeleteWFMAgentMembershipsReq)(nil),                           // 140: api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq
	(*DeleteWFMAgentMembershipsRes)(nil),                           // 141: api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes
	(*DeleteWFMAgentsMembershipsReq)(nil),                          // 142: api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq
	(*DeleteWFMAgentsMembershipsRes)(nil),                          // 143: api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes
	(*DOWPlacement)(nil),                                           // 144: api.v1alpha1.wfm.DOWPlacement
	(*ShiftTemplate)(nil),                                          // 145: api.v1alpha1.wfm.ShiftTemplate
	(*CreateShiftTemplateReq)(nil),                                 // 146: api.v1alpha1.wfm.CreateShiftTemplateReq
	(*CreateShiftTemplateRes)(nil),                                 // 147: api.v1alpha1.wfm.CreateShiftTemplateRes
	(*UpdateShiftTemplateReq)(nil),                                 // 148: api.v1alpha1.wfm.UpdateShiftTemplateReq
	(*UpdateShiftTemplateRes)(nil),                                 // 149: api.v1alpha1.wfm.UpdateShiftTemplateRes
	(*ListShiftTemplatesBySidsReq)(nil),                            // 150: api.v1alpha1.wfm.ListShiftTemplatesBySidsReq
	(*ListShiftTemplatesBySidsRes)(nil),                            // 151: api.v1alpha1.wfm.ListShiftTemplatesBySidsRes
	(*BuildShiftTemplateDiagnosticsReq)(nil),                       // 152: api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq
	(*BuildShiftTemplateDiagnosticsRes)(nil),                       // 153: api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes
	(*PlacementRule)(nil),                                          // 154: api.v1alpha1.wfm.PlacementRule
	(*CreatePlacementRuleReq)(nil),                                 // 155: api.v1alpha1.wfm.CreatePlacementRuleReq
	(*CreatePlacementRuleRes)(nil),                                 // 156: api.v1alpha1.wfm.CreatePlacementRuleRes
	(*UpdatePlacementRuleReq)(nil),                                 // 157: api.v1alpha1.wfm.UpdatePlacementRuleReq
	(*UpdatePlacementRuleRes)(nil),                                 // 158: api.v1alpha1.wfm.UpdatePlacementRuleRes
	(*DeletePlacementRuleReq)(nil),                                 // 159: api.v1alpha1.wfm.DeletePlacementRuleReq
	(*DeletePlacementRuleRes)(nil),                                 // 160: api.v1alpha1.wfm.DeletePlacementRuleRes
	(*DatetimePattern)(nil),                                        // 161: api.v1alpha1.wfm.DatetimePattern
	(*OpenTimesPattern)(nil),                                       // 162: api.v1alpha1.wfm.OpenTimesPattern
	(*CreateOpenTimesPatternReq)(nil),                              // 163: api.v1alpha1.wfm.CreateOpenTimesPatternReq
	(*CreateOpenTimesPatternRes)(nil),                              // 164: api.v1alpha1.wfm.CreateOpenTimesPatternRes
	(*UpdateOpenTimesPatternReq)(nil),                              // 165: api.v1alpha1.wfm.UpdateOpenTimesPatternReq
	(*UpdateOpenTimesPatternRes)(nil),                              // 166: api.v1alpha1.wfm.UpdateOpenTimesPatternRes
	(*DeleteOpenTimesPatternReq)(nil),                              // 167: api.v1alpha1.wfm.DeleteOpenTimesPatternReq
	(*DeleteOpenTimesPatternRes)(nil),                              // 168: api.v1alpha1.wfm.DeleteOpenTimesPatternRes
	(*GetOpenTimesBitmapsReq)(nil),                                 // 169: api.v1alpha1.wfm.GetOpenTimesBitmapsReq
	(*GetOpenTimesBitmapsRes)(nil),                                 // 170: api.v1alpha1.wfm.GetOpenTimesBitmapsRes
	(*AgentAvailabilityPattern)(nil),                               // 171: api.v1alpha1.wfm.AgentAvailabilityPattern
	(*CreateAgentAvailabilityPatternReq)(nil),                      // 172: api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq
	(*CreateAgentAvailabilityPatternRes)(nil),                      // 173: api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes
	(*UpdateAgentAvailabilityPatternReq)(nil),                      // 174: api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq
	(*UpdateAgentAvailabilityPatternRes)(nil),                      // 175: api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes
	(*DeleteAgentAvailabilityPatternReq)(nil),                      // 176: api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq
	(*DeleteAgentAvailabilityPatternRes)(nil),                      // 177: api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes
	(*AvailabilityBitmapSet)(nil),                                  // 178: api.v1alpha1.wfm.AvailabilityBitmapSet
	(*GetAvailabilityBitmapsReq)(nil),                              // 179: api.v1alpha1.wfm.GetAvailabilityBitmapsReq
	(*GetAvailabilityBitmapsRes)(nil),                              // 180: api.v1alpha1.wfm.GetAvailabilityBitmapsRes
	(*UpsertNonSkillActivityAssociationReq)(nil),                   // 181: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq
	(*UpsertNonSkillActivityAssociationRes)(nil),                   // 182: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes
	(*SkillProficiency)(nil),                                       // 183: api.v1alpha1.wfm.SkillProficiency
	(*CreateSkillProficienciesReq)(nil),                            // 184: api.v1alpha1.wfm.CreateSkillProficienciesReq
	(*CreateSkillProficienciesRes)(nil),                            // 185: api.v1alpha1.wfm.CreateSkillProficienciesRes
	(*UpdateSkillProficienciesReq)(nil),                            // 186: api.v1alpha1.wfm.UpdateSkillProficienciesReq
	(*UpdateSkillProficienciesRes)(nil),                            // 187: api.v1alpha1.wfm.UpdateSkillProficienciesRes
	(*DeleteSkillProficiencyReq)(nil),                              // 188: api.v1alpha1.wfm.DeleteSkillProficiencyReq
	(*DeleteSkillProficiencyRes)(nil),                              // 189: api.v1alpha1.wfm.DeleteSkillProficiencyRes
	(*ScheduleScenario)(nil),                                       // 190: api.v1alpha1.wfm.ScheduleScenario
	(*CopyScenarioReq)(nil),                                        // 191: api.v1alpha1.wfm.CopyScenarioReq
	(*CopyScenarioRes)(nil),                                        // 192: api.v1alpha1.wfm.CopyScenarioRes
	(*CreateScheduleScenarioWithNodesReq)(nil),                     // 193: api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq
	(*CreateScheduleScenarioWithNodesRes)(nil),                     // 194: api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes
	(*UpdateScheduleScenarioReq)(nil),                              // 195: api.v1alpha1.wfm.UpdateScheduleScenarioReq
	(*UpdateScheduleScenarioRes)(nil),                              // 196: api.v1alpha1.wfm.UpdateScheduleScenarioRes
	(*ListConfigEntitiesReq)(nil),                                  // 197: api.v1alpha1.wfm.ListConfigEntitiesReq
	(*ListConfigEntitiesRes)(nil),                                  // 198: api.v1alpha1.wfm.ListConfigEntitiesRes
	(*Diagnostic)(nil),                                             // 199: api.v1alpha1.wfm.Diagnostic
	(*Diagnostics)(nil),                                            // 200: api.v1alpha1.wfm.Diagnostics
	(*DeleteShiftInstancesReq)(nil),                                // 201: api.v1alpha1.wfm.DeleteShiftInstancesReq
	(*DeleteShiftInstancesRes)(nil),                                // 202: api.v1alpha1.wfm.DeleteShiftInstancesRes
	(*BuildNodeDiagnosticsReq)(nil),                                // 203: api.v1alpha1.wfm.BuildNodeDiagnosticsReq
	(*BuildNodeDiagnosticsRes)(nil),                                // 204: api.v1alpha1.wfm.BuildNodeDiagnosticsRes
	(*BuildGlobalDiagnosticsReq)(nil),                              // 205: api.v1alpha1.wfm.BuildGlobalDiagnosticsReq
	(*BuildGlobalDiagnosticsRes)(nil),                              // 206: api.v1alpha1.wfm.BuildGlobalDiagnosticsRes
	(*PublishedSchedule)(nil),                                      // 207: api.v1alpha1.wfm.PublishedSchedule
	(*DraftSchedule)(nil),                                          // 208: api.v1alpha1.wfm.DraftSchedule
	(*PerformanceMetric)(nil),                                      // 209: api.v1alpha1.wfm.PerformanceMetric
	(*ServiceLevelInterval)(nil),                                   // 210: api.v1alpha1.wfm.ServiceLevelInterval
	(*FTERequiredVsAchievedInterval)(nil),                          // 211: api.v1alpha1.wfm.FTERequiredVsAchievedInterval
	(*RequiredCallsInterval)(nil),                                  // 212: api.v1alpha1.wfm.RequiredCallsInterval
	(*ShiftInstance)(nil),                                          // 213: api.v1alpha1.wfm.ShiftInstance
	(*ShiftSegment)(nil),                                           // 214: api.v1alpha1.wfm.ShiftSegment
	(*GetPublishedScheduleReq)(nil),                                // 215: api.v1alpha1.wfm.GetPublishedScheduleReq
	(*GetPublishedScheduleRes)(nil),                                // 216: api.v1alpha1.wfm.GetPublishedScheduleRes
	(*GetPublishedScheduleRequiredCallsReq)(nil),                   // 217: api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq
	(*GetPublishedScheduleRequiredCallsRes)(nil),                   // 218: api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes
	(*GetDraftScheduleRequiredCallsReq)(nil),                       // 219: api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq
	(*GetDraftScheduleRequiredCallsRes)(nil),                       // 220: api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes
	(*CreateDraftScheduleReq)(nil),                                 // 221: api.v1alpha1.wfm.CreateDraftScheduleReq
	(*CreateDraftScheduleRes)(nil),                                 // 222: api.v1alpha1.wfm.CreateDraftScheduleRes
	(*UpdateDraftScheduleReq)(nil),                                 // 223: api.v1alpha1.wfm.UpdateDraftScheduleReq
	(*UpdateDraftScheduleRes)(nil),                                 // 224: api.v1alpha1.wfm.UpdateDraftScheduleRes
	(*BuildDraftScheduleReq)(nil),                                  // 225: api.v1alpha1.wfm.BuildDraftScheduleReq
	(*BuildDraftScheduleRes)(nil),                                  // 226: api.v1alpha1.wfm.BuildDraftScheduleRes
	(*PublishDraftScheduleReq)(nil),                                // 227: api.v1alpha1.wfm.PublishDraftScheduleReq
	(*PublishDraftScheduleRes)(nil),                                // 228: api.v1alpha1.wfm.PublishDraftScheduleRes
	(*GetDraftScheduleReq)(nil),                                    // 229: api.v1alpha1.wfm.GetDraftScheduleReq
	(*GetDraftScheduleRes)(nil),                                    // 230: api.v1alpha1.wfm.GetDraftScheduleRes
	(*ListDraftSchedulesReq)(nil),                                  // 231: api.v1alpha1.wfm.ListDraftSchedulesReq
	(*ListDraftSchedulesRes)(nil),                                  // 232: api.v1alpha1.wfm.ListDraftSchedulesRes
	(*DeleteDraftScheduleReq)(nil),                                 // 233: api.v1alpha1.wfm.DeleteDraftScheduleReq
	(*DeleteDraftScheduleRes)(nil),                                 // 234: api.v1alpha1.wfm.DeleteDraftScheduleRes
	(*CreateShiftInstanceReq)(nil),                                 // 235: api.v1alpha1.wfm.CreateShiftInstanceReq
	(*CreateShiftInstanceRes)(nil),                                 // 236: api.v1alpha1.wfm.CreateShiftInstanceRes
	(*CreateShiftInstanceV2Req)(nil),                               // 237: api.v1alpha1.wfm.CreateShiftInstanceV2Req
	(*CreateShiftInstanceV2Res)(nil),                               // 238: api.v1alpha1.wfm.CreateShiftInstanceV2Res
	(*SwapShiftInstancesReq)(nil),                                  // 239: api.v1alpha1.wfm.SwapShiftInstancesReq
	(*SwapShiftInstancesRes)(nil),                                  // 240: api.v1alpha1.wfm.SwapShiftInstancesRes
	(*UpdateShiftInstanceReq)(nil),                                 // 241: api.v1alpha1.wfm.UpdateShiftInstanceReq
	(*UpdateShiftInstanceRes)(nil),                                 // 242: api.v1alpha1.wfm.UpdateShiftInstanceRes
	(*ListShiftSegmentsByShiftInstanceSidsReq)(nil),                // 243: api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq
	(*ListShiftSegmentsByShiftInstanceSidsRes)(nil),                // 244: api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes
	(*PerformanceMetricParameter)(nil),                             // 245: api.v1alpha1.wfm.PerformanceMetricParameter
	(*GetPerformanceMetricsReq)(nil),                               // 246: api.v1alpha1.wfm.GetPerformanceMetricsReq
	(*GetPerformanceMetricsRes)(nil),                               // 247: api.v1alpha1.wfm.GetPerformanceMetricsRes
	(*SchedulingTarget)(nil),                                       // 248: api.v1alpha1.wfm.SchedulingTarget
	(*SetSchedulingTargetReq)(nil),                                 // 249: api.v1alpha1.wfm.SetSchedulingTargetReq
	(*SetSchedulingTargetRes)(nil),                                 // 250: api.v1alpha1.wfm.SetSchedulingTargetRes
	(*GetSchedulingTargetReq)(nil),                                 // 251: api.v1alpha1.wfm.GetSchedulingTargetReq
	(*GetSchedulingTargetRes)(nil),                                 // 252: api.v1alpha1.wfm.GetSchedulingTargetRes
	(*DeleteSchedulingTargetReq)(nil),                              // 253: api.v1alpha1.wfm.DeleteSchedulingTargetReq
	(*DeleteSchedulingTargetRes)(nil),                              // 254: api.v1alpha1.wfm.DeleteSchedulingTargetRes
	(*ListRequiredCallsIntervalsReq)(nil),                          // 255: api.v1alpha1.wfm.ListRequiredCallsIntervalsReq
	(*ListRequiredCallsIntervalsRes)(nil),                          // 256: api.v1alpha1.wfm.ListRequiredCallsIntervalsRes
	(*UpdateSkillProfileProficienciesReq_Proficiency)(nil),         // 257: api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq.Proficiency
	(*GetSkillProfileRes_Mapping)(nil),                             // 258: api.v1alpha1.wfm.GetSkillProfileRes.Mapping
	(*DeleteForecastIntervalsReq_IntervalSids)(nil),                // 259: api.v1alpha1.wfm.DeleteForecastIntervalsReq.IntervalSids
	(*ListAllWFMAgentsRes_AgentGroupsByAgent)(nil),                 // 260: api.v1alpha1.wfm.ListAllWFMAgentsRes.AgentGroupsByAgent
	(*DatetimePattern_WeekMap)(nil),                                // 261: api.v1alpha1.wfm.DatetimePattern.WeekMap
	(*DatetimePattern_CalendarItem)(nil),                           // 262: api.v1alpha1.wfm.DatetimePattern.CalendarItem
	(*DatetimePattern_WeekMap_WeekMapDOW)(nil),                     // 263: api.v1alpha1.wfm.DatetimePattern.WeekMap.WeekMapDOW
	(*UpsertNonSkillActivityAssociationRes_EntityMapping)(nil),     // 264: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes.EntityMapping
	(*ListConfigEntitiesRes_ClientNodeEntities)(nil),               // 265: api.v1alpha1.wfm.ListConfigEntitiesRes.ClientNodeEntities
	(*ListConfigEntitiesRes_LocationNodeEntities)(nil),             // 266: api.v1alpha1.wfm.ListConfigEntitiesRes.LocationNodeEntities
	(*ListConfigEntitiesRes_ProgramNodeEntities)(nil),              // 267: api.v1alpha1.wfm.ListConfigEntitiesRes.ProgramNodeEntities
	(*ListConfigEntitiesRes_AgentGroupEntities)(nil),               // 268: api.v1alpha1.wfm.ListConfigEntitiesRes.AgentGroupEntities
	(*ListConfigEntitiesRes_ShiftTemplateEntities)(nil),            // 269: api.v1alpha1.wfm.ListConfigEntitiesRes.ShiftTemplateEntities
	(*ListConfigEntitiesRes_WFMAgentEntities)(nil),                 // 270: api.v1alpha1.wfm.ListConfigEntitiesRes.WFMAgentEntities
	(*ListConfigEntitiesRes_PlacementRuleEntities)(nil),            // 271: api.v1alpha1.wfm.ListConfigEntitiesRes.PlacementRuleEntities
	(*ListConfigEntitiesRes_ConstraintRuleEntities)(nil),           // 272: api.v1alpha1.wfm.ListConfigEntitiesRes.ConstraintRuleEntities
	(*ListConfigEntitiesRes_NonSkillActivityEntities)(nil),         // 273: api.v1alpha1.wfm.ListConfigEntitiesRes.NonSkillActivityEntities
	(*ListConfigEntitiesRes_AgentAvailabilityPatternEntities)(nil), // 274: api.v1alpha1.wfm.ListConfigEntitiesRes.AgentAvailabilityPatternEntities
	(*ListConfigEntitiesRes_OpenTimesPatternEntities)(nil),         // 275: api.v1alpha1.wfm.ListConfigEntitiesRes.OpenTimesPatternEntities
	(*ListConfigEntitiesRes_SkillProficiencyEntities)(nil),         // 276: api.v1alpha1.wfm.ListConfigEntitiesRes.SkillProficiencyEntities
	(*ListConfigEntitiesRes_ScheduleScenarioEntities)(nil),         // 277: api.v1alpha1.wfm.ListConfigEntitiesRes.ScheduleScenarioEntities
	(commons.SkillType_Enum)(0),                                    // 278: api.commons.SkillType.Enum
	(*timestamppb.Timestamp)(nil),                                  // 279: google.protobuf.Timestamp
	(*commons.ForecastingParameters)(nil),                          // 280: api.commons.ForecastingParameters
	(*wrapperspb.FloatValue)(nil),                                  // 281: google.protobuf.FloatValue
	(*commons.CallProfileGroupCalls)(nil),                          // 282: api.commons.CallProfileGroupCalls
	(*commons.CallProfileGroupAvgs)(nil),                           // 283: api.commons.CallProfileGroupAvgs
	(commons.RegressionForecasterModelTypes)(0),                    // 284: api.commons.RegressionForecasterModelTypes
	(commons.RegressionForecasterAvgsProcessingType)(0),            // 285: api.commons.RegressionForecasterAvgsProcessingType
	(*commons.ProfileTOD)(nil),                                     // 286: api.commons.ProfileTOD
	(*commons.ProfileWOMS)(nil),                                    // 287: api.commons.ProfileWOMS
	(*commons.ProfileDOW)(nil),                                     // 288: api.commons.ProfileDOW
	(*commons.ProfileMOY)(nil),                                     // 289: api.commons.ProfileMOY
	(*commons.DatetimeRange)(nil),                                  // 290: api.commons.DatetimeRange
	(commons.TimeZone)(0),                                          // 291: api.commons.TimeZone
	(*wrapperspb.Int64Value)(nil),                                  // 292: google.protobuf.Int64Value
	(commons.ConfigEntityType)(0),                                  // 293: api.commons.ConfigEntityType
	(commons.ConstraintTimeUnit)(0),                                // 294: api.commons.ConstraintTimeUnit
	(commons.ConstraintRuleType)(0),                                // 295: api.commons.ConstraintRuleType
	(commons.ConfigRelationshipType)(0),                            // 296: api.commons.ConfigRelationshipType
	(commons.DOWPlacementType)(0),                                  // 297: api.commons.DOWPlacementType
	(commons.DayOfWeek)(0),                                         // 298: api.commons.DayOfWeek
	(commons.OpenTimesOption)(0),                                   // 299: api.commons.OpenTimesOption
	(commons.AvailabilityOption)(0),                                // 300: api.commons.AvailabilityOption
	(commons.DiagnosticLevel)(0),                                   // 301: api.commons.DiagnosticLevel
	(commons.DiagnosticCode)(0),                                    // 302: api.commons.DiagnosticCode
	(commons.PerformanceMetricType)(0),                             // 303: api.commons.PerformanceMetricType
	(commons.ScheduleType)(0),                                      // 304: api.commons.ScheduleType
	(*commons.ScheduleSelector)(nil),                               // 305: api.commons.ScheduleSelector
	(commons.SchedulingTargetType)(0),                              // 306: api.commons.SchedulingTargetType
	(*commons.OptionTypes)(nil),                                    // 307: api.commons.OptionTypes
}
var file_api_v1alpha1_wfm_wfm_proto_depIdxs = []int32{
	278, // 0: api.v1alpha1.wfm.Skill.client_skill_type:type_name -> api.commons.SkillType.Enum
	279, // 1: api.v1alpha1.wfm.Skill.delete_date:type_name -> google.protobuf.Timestamp
	279, // 2: api.v1alpha1.wfm.SkillProfile.create_date:type_name -> google.protobuf.Timestamp
	279, // 3: api.v1alpha1.wfm.SkillProfile.inactive_as_of_date:type_name -> google.protobuf.Timestamp
	1,   // 4: api.v1alpha1.wfm.SkillProfile.skills:type_name -> api.v1alpha1.wfm.Skill
	2,   // 5: api.v1alpha1.wfm.ListSkillProfilesRes.skill_profiles:type_name -> api.v1alpha1.wfm.SkillProfile
	257, // 6: api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq.proficiencies:type_name -> api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq.Proficiency
	2,   // 7: api.v1alpha1.wfm.GetSkillProfileRes.skill_profile:type_name -> api.v1alpha1.wfm.SkillProfile
	258, // 8: api.v1alpha1.wfm.GetSkillProfileRes.mappings:type_name -> api.v1alpha1.wfm.GetSkillProfileRes.Mapping
	279, // 9: api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes.resync_date:type_name -> google.protobuf.Timestamp
	280, // 10: api.v1alpha1.wfm.UpsertForecastingParametersReq.forecasting_parameters:type_name -> api.commons.ForecastingParameters
	280, // 11: api.v1alpha1.wfm.GetForecastingParametersRes.forecasting_parameters:type_name -> api.commons.ForecastingParameters
	279, // 12: api.v1alpha1.wfm.HistoricalDataInterval.start_datetime:type_name -> google.protobuf.Timestamp
	281, // 13: api.v1alpha1.wfm.HistoricalDataInterval.average_speed_of_answer_in_seconds:type_name -> google.protobuf.FloatValue
	281, // 14: api.v1alpha1.wfm.HistoricalDataInterval.average_handle_time_in_seconds:type_name -> google.protobuf.FloatValue
	281, // 15: api.v1alpha1.wfm.HistoricalDataInterval.average_after_call_work_in_seconds:type_name -> google.protobuf.FloatValue
	281, // 16: api.v1alpha1.wfm.HistoricalDataInterval.average_time_to_abort_in_seconds:type_name -> google.protobuf.FloatValue
	281, // 17: api.v1alpha1.wfm.HistoricalDataInterval.original_average_speed_of_answer_in_seconds:type_name -> google.protobuf.FloatValue
	281, // 18: api.v1alpha1.wfm.HistoricalDataInterval.original_average_handle_time_in_seconds:type_name -> google.protobuf.FloatValue
	281, // 19: api.v1alpha1.wfm.HistoricalDataInterval.original_average_after_call_work_in_seconds:type_name -> google.protobuf.FloatValue
	281, // 20: api.v1alpha1.wfm.HistoricalDataInterval.original_average_time_to_abort_in_seconds:type_name -> google.protobuf.FloatValue
	19,  // 21: api.v1alpha1.wfm.ListHistoricalDataRes.historical_data_intervals:type_name -> api.v1alpha1.wfm.HistoricalDataInterval
	19,  // 22: api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq.delta:type_name -> api.v1alpha1.wfm.HistoricalDataInterval
	19,  // 23: api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes.delta:type_name -> api.v1alpha1.wfm.HistoricalDataInterval
	19,  // 24: api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq.deltas:type_name -> api.v1alpha1.wfm.HistoricalDataInterval
	1,   // 25: api.v1alpha1.wfm.ListSkillsRes.skills:type_name -> api.v1alpha1.wfm.Skill
	282, // 26: api.v1alpha1.wfm.CallProfileTemplate.total_calls_profile:type_name -> api.commons.CallProfileGroupCalls
	282, // 27: api.v1alpha1.wfm.CallProfileTemplate.total_abandoned_calls_profile:type_name -> api.commons.CallProfileGroupCalls
	283, // 28: api.v1alpha1.wfm.CallProfileTemplate.average_speed_of_answer_profile:type_name -> api.commons.CallProfileGroupAvgs
	283, // 29: api.v1alpha1.wfm.CallProfileTemplate.average_handle_time_profile:type_name -> api.commons.CallProfileGroupAvgs
	283, // 30: api.v1alpha1.wfm.CallProfileTemplate.average_after_call_work_profile:type_name -> api.commons.CallProfileGroupAvgs
	283, // 31: api.v1alpha1.wfm.CallProfileTemplate.average_time_to_abort_profile:type_name -> api.commons.CallProfileGroupAvgs
	28,  // 32: api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes.call_profile_template:type_name -> api.v1alpha1.wfm.CallProfileTemplate
	284, // 33: api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes.model_types:type_name -> api.commons.RegressionForecasterModelTypes
	279, // 34: api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq.start_datetimes:type_name -> google.protobuf.Timestamp
	2,   // 35: api.v1alpha1.wfm.ListTopSkillProfilesRes.skill_profiles:type_name -> api.v1alpha1.wfm.SkillProfile
	28,  // 36: api.v1alpha1.wfm.BuildProfileForecastByIntervalReq.call_profile_template:type_name -> api.v1alpha1.wfm.CallProfileTemplate
	279, // 37: api.v1alpha1.wfm.CallDataByInterval.start_datetime:type_name -> google.protobuf.Timestamp
	28,  // 38: api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq.call_profile_template:type_name -> api.v1alpha1.wfm.CallProfileTemplate
	44,  // 39: api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes.call_data:type_name -> api.v1alpha1.wfm.CallDataByInterval
	62,  // 40: api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes.forecast_stats:type_name -> api.v1alpha1.wfm.GetForecastStatisticsRes
	28,  // 41: api.v1alpha1.wfm.UpsertProfileForecastReq.call_profile_template:type_name -> api.v1alpha1.wfm.CallProfileTemplate
	28,  // 42: api.v1alpha1.wfm.CreateCallProfileTemplateReq.call_profile_template:type_name -> api.v1alpha1.wfm.CallProfileTemplate
	284, // 43: api.v1alpha1.wfm.RegressionTemplate.model_type:type_name -> api.commons.RegressionForecasterModelTypes
	285, // 44: api.v1alpha1.wfm.RegressionTemplate.avgs_processing_type:type_name -> api.commons.RegressionForecasterAvgsProcessingType
	53,  // 45: api.v1alpha1.wfm.CreateRegressionTemplateReq.regression_template:type_name -> api.v1alpha1.wfm.RegressionTemplate
	53,  // 46: api.v1alpha1.wfm.ListRegressionTemplatesRes.regression_templates:type_name -> api.v1alpha1.wfm.RegressionTemplate
	53,  // 47: api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq.regression_template:type_name -> api.v1alpha1.wfm.RegressionTemplate
	53,  // 48: api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq.regression_template:type_name -> api.v1alpha1.wfm.RegressionTemplate
	44,  // 49: api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes.call_data:type_name -> api.v1alpha1.wfm.CallDataByInterval
	62,  // 50: api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes.forecast_stats:type_name -> api.v1alpha1.wfm.GetForecastStatisticsRes
	28,  // 51: api.v1alpha1.wfm.ListCallProfileTemplatesRes.call_profile_templates:type_name -> api.v1alpha1.wfm.CallProfileTemplate
	53,  // 52: api.v1alpha1.wfm.UpsertRegressionForecastReq.regression_template:type_name -> api.v1alpha1.wfm.RegressionTemplate
	44,  // 53: api.v1alpha1.wfm.UpsertForecastDataDeltaReq.delta:type_name -> api.v1alpha1.wfm.CallDataByInterval
	44,  // 54: api.v1alpha1.wfm.UpsertForecastDataDeltaRes.delta:type_name -> api.v1alpha1.wfm.CallDataByInterval
	44,  // 55: api.v1alpha1.wfm.UpsertForecastDataDeltasReq.deltas:type_name -> api.v1alpha1.wfm.CallDataByInterval
	259, // 56: api.v1alpha1.wfm.DeleteForecastIntervalsReq.forecast_interval_sids:type_name -> api.v1alpha1.wfm.DeleteForecastIntervalsReq.IntervalSids
	0,   // 57: api.v1alpha1.wfm.DeleteForecastIntervalsReq.forecast_interval_delete_type:type_name -> api.v1alpha1.wfm.DeleteForecastIntervalsReq.ForecastIntervalDeleteType
	19,  // 58: api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes.history:type_name -> api.v1alpha1.wfm.HistoricalDataInterval
	286, // 59: api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq.profile_tod:type_name -> api.commons.ProfileTOD
	287, // 60: api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq.profile_woms:type_name -> api.commons.ProfileWOMS
	288, // 61: api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes.profile_dow:type_name -> api.commons.ProfileDOW
	289, // 62: api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes.profile_moy:type_name -> api.commons.ProfileMOY
	290, // 63: api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq.datetime_range:type_name -> api.commons.DatetimeRange
	279, // 64: api.v1alpha1.wfm.CallCenterNode.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	291, // 65: api.v1alpha1.wfm.CallCenterNode.time_zone_val:type_name -> api.commons.TimeZone
	87,  // 66: api.v1alpha1.wfm.CallCenterNode.member_client_nodes:type_name -> api.v1alpha1.wfm.ClientNode
	110, // 67: api.v1alpha1.wfm.CallCenterNode.member_non_skill_activities:type_name -> api.v1alpha1.wfm.NonSkillActivity
	162, // 68: api.v1alpha1.wfm.CallCenterNode.member_open_times_patterns:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	171, // 69: api.v1alpha1.wfm.CallCenterNode.member_agent_availability_patterns:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	103, // 70: api.v1alpha1.wfm.CallCenterNode.member_constraint_rules:type_name -> api.v1alpha1.wfm.ConstraintRule
	120, // 71: api.v1alpha1.wfm.CallCenterNode.member_agent_groups:type_name -> api.v1alpha1.wfm.AgentGroup
	292, // 72: api.v1alpha1.wfm.CallCenterNode.origin_sid:type_name -> google.protobuf.Int64Value
	84,  // 73: api.v1alpha1.wfm.UpdateCallCenterNodeReq.node:type_name -> api.v1alpha1.wfm.CallCenterNode
	279, // 74: api.v1alpha1.wfm.ClientNode.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	291, // 75: api.v1alpha1.wfm.ClientNode.time_zone_val:type_name -> api.commons.TimeZone
	92,  // 76: api.v1alpha1.wfm.ClientNode.member_location_nodes:type_name -> api.v1alpha1.wfm.LocationNode
	110, // 77: api.v1alpha1.wfm.ClientNode.member_non_skill_activities:type_name -> api.v1alpha1.wfm.NonSkillActivity
	162, // 78: api.v1alpha1.wfm.ClientNode.member_open_times_patterns:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	171, // 79: api.v1alpha1.wfm.ClientNode.member_agent_availability_patterns:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	103, // 80: api.v1alpha1.wfm.ClientNode.member_constraint_rules:type_name -> api.v1alpha1.wfm.ConstraintRule
	120, // 81: api.v1alpha1.wfm.ClientNode.member_agent_groups:type_name -> api.v1alpha1.wfm.AgentGroup
	292, // 82: api.v1alpha1.wfm.ClientNode.origin_sid:type_name -> google.protobuf.Int64Value
	87,  // 83: api.v1alpha1.wfm.CreateClientNodeReq.node:type_name -> api.v1alpha1.wfm.ClientNode
	87,  // 84: api.v1alpha1.wfm.UpdateClientNodeReq.node:type_name -> api.v1alpha1.wfm.ClientNode
	279, // 85: api.v1alpha1.wfm.LocationNode.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	291, // 86: api.v1alpha1.wfm.LocationNode.time_zone_val:type_name -> api.commons.TimeZone
	97,  // 87: api.v1alpha1.wfm.LocationNode.member_program_nodes:type_name -> api.v1alpha1.wfm.ProgramNode
	110, // 88: api.v1alpha1.wfm.LocationNode.member_non_skill_activities:type_name -> api.v1alpha1.wfm.NonSkillActivity
	162, // 89: api.v1alpha1.wfm.LocationNode.member_open_times_patterns:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	171, // 90: api.v1alpha1.wfm.LocationNode.member_agent_availability_patterns:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	103, // 91: api.v1alpha1.wfm.LocationNode.member_constraint_rules:type_name -> api.v1alpha1.wfm.ConstraintRule
	120, // 92: api.v1alpha1.wfm.LocationNode.member_agent_groups:type_name -> api.v1alpha1.wfm.AgentGroup
	292, // 93: api.v1alpha1.wfm.LocationNode.origin_sid:type_name -> google.protobuf.Int64Value
	92,  // 94: api.v1alpha1.wfm.CreateLocationNodeReq.node:type_name -> api.v1alpha1.wfm.LocationNode
	92,  // 95: api.v1alpha1.wfm.UpdateLocationNodeReq.location_node:type_name -> api.v1alpha1.wfm.LocationNode
	279, // 96: api.v1alpha1.wfm.ProgramNode.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	145, // 97: api.v1alpha1.wfm.ProgramNode.member_shift_templates:type_name -> api.v1alpha1.wfm.ShiftTemplate
	110, // 98: api.v1alpha1.wfm.ProgramNode.member_non_skill_activities:type_name -> api.v1alpha1.wfm.NonSkillActivity
	162, // 99: api.v1alpha1.wfm.ProgramNode.member_open_times_patterns:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	171, // 100: api.v1alpha1.wfm.ProgramNode.member_agent_availability_patterns:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	103, // 101: api.v1alpha1.wfm.ProgramNode.member_constraint_rules:type_name -> api.v1alpha1.wfm.ConstraintRule
	120, // 102: api.v1alpha1.wfm.ProgramNode.member_agent_groups:type_name -> api.v1alpha1.wfm.AgentGroup
	183, // 103: api.v1alpha1.wfm.ProgramNode.member_skill_proficiencies:type_name -> api.v1alpha1.wfm.SkillProficiency
	292, // 104: api.v1alpha1.wfm.ProgramNode.origin_sid:type_name -> google.protobuf.Int64Value
	97,  // 105: api.v1alpha1.wfm.CreateProgramNodeReq.node:type_name -> api.v1alpha1.wfm.ProgramNode
	97,  // 106: api.v1alpha1.wfm.UpdateProgramNodeReq.program_node:type_name -> api.v1alpha1.wfm.ProgramNode
	293, // 107: api.v1alpha1.wfm.ParentEntity.parent_type:type_name -> api.commons.ConfigEntityType
	102, // 108: api.v1alpha1.wfm.ConstraintRule.parent_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	294, // 109: api.v1alpha1.wfm.ConstraintRule.val_unit:type_name -> api.commons.ConstraintTimeUnit
	294, // 110: api.v1alpha1.wfm.ConstraintRule.per_unit:type_name -> api.commons.ConstraintTimeUnit
	295, // 111: api.v1alpha1.wfm.ConstraintRule.rule_type:type_name -> api.commons.ConstraintRuleType
	117, // 112: api.v1alpha1.wfm.ConstraintRule.scheduling_activity:type_name -> api.v1alpha1.wfm.SchedulingActivity
	183, // 113: api.v1alpha1.wfm.ConstraintRule.skill_proficiency:type_name -> api.v1alpha1.wfm.SkillProficiency
	103, // 114: api.v1alpha1.wfm.CreateConstraintRuleReq.constraint_rule:type_name -> api.v1alpha1.wfm.ConstraintRule
	103, // 115: api.v1alpha1.wfm.UpdateConstraintRuleReq.constraint_rule:type_name -> api.v1alpha1.wfm.ConstraintRule
	279, // 116: api.v1alpha1.wfm.NonSkillActivity.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	102, // 117: api.v1alpha1.wfm.NonSkillActivity.inherited_from_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	110, // 118: api.v1alpha1.wfm.CreateNonSkillActivityReq.non_skill_activity:type_name -> api.v1alpha1.wfm.NonSkillActivity
	110, // 119: api.v1alpha1.wfm.UpdateNonSkillActivityReq.non_skill_activity:type_name -> api.v1alpha1.wfm.NonSkillActivity
	102, // 120: api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq.associated_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	296, // 121: api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq.relationship_type:type_name -> api.commons.ConfigRelationshipType
	292, // 122: api.v1alpha1.wfm.SchedulingActivity.activity_sid:type_name -> google.protobuf.Int64Value
	110, // 123: api.v1alpha1.wfm.SchedulingActivity.member_non_skill_activity:type_name -> api.v1alpha1.wfm.NonSkillActivity
	102, // 124: api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq.parent_of_rule:type_name -> api.v1alpha1.wfm.ParentEntity
	117, // 125: api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes.scheduling_activities:type_name -> api.v1alpha1.wfm.SchedulingActivity
	102, // 126: api.v1alpha1.wfm.AgentGroup.parent_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	279, // 127: api.v1alpha1.wfm.AgentGroup.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	103, // 128: api.v1alpha1.wfm.AgentGroup.member_constraint_rules:type_name -> api.v1alpha1.wfm.ConstraintRule
	125, // 129: api.v1alpha1.wfm.AgentGroup.member_wfm_agents:type_name -> api.v1alpha1.wfm.WFMAgent
	183, // 130: api.v1alpha1.wfm.AgentGroup.member_skill_proficiencies:type_name -> api.v1alpha1.wfm.SkillProficiency
	171, // 131: api.v1alpha1.wfm.AgentGroup.member_agent_availability_patterns:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	120, // 132: api.v1alpha1.wfm.CreateAgentGroupReq.agent_group:type_name -> api.v1alpha1.wfm.AgentGroup
	120, // 133: api.v1alpha1.wfm.UpdateAgentGroupReq.agent_group:type_name -> api.v1alpha1.wfm.AgentGroup
	292, // 134: api.v1alpha1.wfm.WFMAgent.tcn_agent_sid:type_name -> google.protobuf.Int64Value
	279, // 135: api.v1alpha1.wfm.WFMAgent.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	103, // 136: api.v1alpha1.wfm.WFMAgent.member_constraint_rules:type_name -> api.v1alpha1.wfm.ConstraintRule
	183, // 137: api.v1alpha1.wfm.WFMAgent.member_skill_proficiencies:type_name -> api.v1alpha1.wfm.SkillProficiency
	171, // 138: api.v1alpha1.wfm.WFMAgent.member_agent_availability_patterns:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	279, // 139: api.v1alpha1.wfm.WFMAgent.created_at:type_name -> google.protobuf.Timestamp
	125, // 140: api.v1alpha1.wfm.UpdateWFMAgentReq.wfm_agent:type_name -> api.v1alpha1.wfm.WFMAgent
	125, // 141: api.v1alpha1.wfm.ListAllWFMAgentsRes.wfm_agents:type_name -> api.v1alpha1.wfm.WFMAgent
	260, // 142: api.v1alpha1.wfm.ListAllWFMAgentsRes.agent_groups_by_agent:type_name -> api.v1alpha1.wfm.ListAllWFMAgentsRes.AgentGroupsByAgent
	125, // 143: api.v1alpha1.wfm.ListCandidateWFMAgentsRes.wfm_agents:type_name -> api.v1alpha1.wfm.WFMAgent
	279, // 144: api.v1alpha1.wfm.ListUngroupedWFMAgentsReq.created_after_datetime:type_name -> google.protobuf.Timestamp
	125, // 145: api.v1alpha1.wfm.ListUngroupedWFMAgentsRes.wfm_agents:type_name -> api.v1alpha1.wfm.WFMAgent
	200, // 146: api.v1alpha1.wfm.BuildAgentDiagnosticsRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostics
	297, // 147: api.v1alpha1.wfm.DOWPlacement.placement_type:type_name -> api.commons.DOWPlacementType
	298, // 148: api.v1alpha1.wfm.DOWPlacement.day_of_week:type_name -> api.commons.DayOfWeek
	279, // 149: api.v1alpha1.wfm.ShiftTemplate.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	154, // 150: api.v1alpha1.wfm.ShiftTemplate.member_placement_rules:type_name -> api.v1alpha1.wfm.PlacementRule
	144, // 151: api.v1alpha1.wfm.ShiftTemplate.DOW_placements:type_name -> api.v1alpha1.wfm.DOWPlacement
	145, // 152: api.v1alpha1.wfm.CreateShiftTemplateReq.shift_template:type_name -> api.v1alpha1.wfm.ShiftTemplate
	145, // 153: api.v1alpha1.wfm.UpdateShiftTemplateReq.shift_template:type_name -> api.v1alpha1.wfm.ShiftTemplate
	145, // 154: api.v1alpha1.wfm.ListShiftTemplatesBySidsRes.shift_templates:type_name -> api.v1alpha1.wfm.ShiftTemplate
	199, // 155: api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	117, // 156: api.v1alpha1.wfm.PlacementRule.member_scheduling_activity:type_name -> api.v1alpha1.wfm.SchedulingActivity
	154, // 157: api.v1alpha1.wfm.CreatePlacementRuleReq.placement_rule:type_name -> api.v1alpha1.wfm.PlacementRule
	154, // 158: api.v1alpha1.wfm.UpdatePlacementRuleReq.placement_rule:type_name -> api.v1alpha1.wfm.PlacementRule
	261, // 159: api.v1alpha1.wfm.DatetimePattern.week_maps:type_name -> api.v1alpha1.wfm.DatetimePattern.WeekMap
	262, // 160: api.v1alpha1.wfm.DatetimePattern.calendar_items:type_name -> api.v1alpha1.wfm.DatetimePattern.CalendarItem
	102, // 161: api.v1alpha1.wfm.OpenTimesPattern.parent_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	161, // 162: api.v1alpha1.wfm.OpenTimesPattern.datetime_pattern:type_name -> api.v1alpha1.wfm.DatetimePattern
	162, // 163: api.v1alpha1.wfm.CreateOpenTimesPatternReq.open_times_pattern:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	162, // 164: api.v1alpha1.wfm.UpdateOpenTimesPatternReq.open_times_pattern:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	102, // 165: api.v1alpha1.wfm.GetOpenTimesBitmapsReq.node_to_check:type_name -> api.v1alpha1.wfm.ParentEntity
	290, // 166: api.v1alpha1.wfm.GetOpenTimesBitmapsReq.datetime_range:type_name -> api.commons.DatetimeRange
	299, // 167: api.v1alpha1.wfm.GetOpenTimesBitmapsRes.inherited_bitmap:type_name -> api.commons.OpenTimesOption
	299, // 168: api.v1alpha1.wfm.GetOpenTimesBitmapsRes.own_bitmap:type_name -> api.commons.OpenTimesOption
	299, // 169: api.v1alpha1.wfm.GetOpenTimesBitmapsRes.resulting_bitmap:type_name -> api.commons.OpenTimesOption
	102, // 170: api.v1alpha1.wfm.AgentAvailabilityPattern.parent_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	161, // 171: api.v1alpha1.wfm.AgentAvailabilityPattern.datetime_pattern:type_name -> api.v1alpha1.wfm.DatetimePattern
	171, // 172: api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq.agent_availability_pattern:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	171, // 173: api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq.agent_availability_pattern:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	300, // 174: api.v1alpha1.wfm.AvailabilityBitmapSet.own_bitmap:type_name -> api.commons.AvailabilityOption
	300, // 175: api.v1alpha1.wfm.AvailabilityBitmapSet.inherited_bitmap:type_name -> api.commons.AvailabilityOption
	300, // 176: api.v1alpha1.wfm.AvailabilityBitmapSet.resulting_bitmap:type_name -> api.commons.AvailabilityOption
	102, // 177: api.v1alpha1.wfm.AvailabilityBitmapSet.parent_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	102, // 178: api.v1alpha1.wfm.GetAvailabilityBitmapsReq.entities_to_check:type_name -> api.v1alpha1.wfm.ParentEntity
	290, // 179: api.v1alpha1.wfm.GetAvailabilityBitmapsReq.datetime_range:type_name -> api.commons.DatetimeRange
	178, // 180: api.v1alpha1.wfm.GetAvailabilityBitmapsRes.bitmaps:type_name -> api.v1alpha1.wfm.AvailabilityBitmapSet
	102, // 181: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq.node:type_name -> api.v1alpha1.wfm.ParentEntity
	296, // 182: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq.association_type:type_name -> api.commons.ConfigRelationshipType
	102, // 183: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes.nodes_affected:type_name -> api.v1alpha1.wfm.ParentEntity
	264, // 184: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes.rules_using_activity:type_name -> api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes.EntityMapping
	292, // 185: api.v1alpha1.wfm.SkillProficiency.preferred_skill_profile_sid:type_name -> google.protobuf.Int64Value
	102, // 186: api.v1alpha1.wfm.SkillProficiency.parent_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	183, // 187: api.v1alpha1.wfm.CreateSkillProficienciesReq.proficiencies:type_name -> api.v1alpha1.wfm.SkillProficiency
	183, // 188: api.v1alpha1.wfm.UpdateSkillProficienciesReq.skill_proficiencies:type_name -> api.v1alpha1.wfm.SkillProficiency
	279, // 189: api.v1alpha1.wfm.ScheduleScenario.creation_datetime:type_name -> google.protobuf.Timestamp
	292, // 190: api.v1alpha1.wfm.ScheduleScenario.copied_from_scenario_sid:type_name -> google.protobuf.Int64Value
	290, // 191: api.v1alpha1.wfm.ScheduleScenario.schedule_range:type_name -> api.commons.DatetimeRange
	279, // 192: api.v1alpha1.wfm.ScheduleScenario.datetime_set_to_inactive:type_name -> google.protobuf.Timestamp
	290, // 193: api.v1alpha1.wfm.CopyScenarioReq.schedule_range:type_name -> api.commons.DatetimeRange
	190, // 194: api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq.schedule_scenario:type_name -> api.v1alpha1.wfm.ScheduleScenario
	291, // 195: api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq.time_zone_val:type_name -> api.commons.TimeZone
	190, // 196: api.v1alpha1.wfm.UpdateScheduleScenarioReq.scheduleScenario:type_name -> api.v1alpha1.wfm.ScheduleScenario
	293, // 197: api.v1alpha1.wfm.ListConfigEntitiesReq.entity_type:type_name -> api.commons.ConfigEntityType
	102, // 198: api.v1alpha1.wfm.ListConfigEntitiesReq.belongs_to_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	84,  // 199: api.v1alpha1.wfm.ListConfigEntitiesRes.call_center_node:type_name -> api.v1alpha1.wfm.CallCenterNode
	265, // 200: api.v1alpha1.wfm.ListConfigEntitiesRes.client_nodes:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.ClientNodeEntities
	266, // 201: api.v1alpha1.wfm.ListConfigEntitiesRes.location_nodes:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.LocationNodeEntities
	267, // 202: api.v1alpha1.wfm.ListConfigEntitiesRes.program_nodes:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.ProgramNodeEntities
	268, // 203: api.v1alpha1.wfm.ListConfigEntitiesRes.agent_groups:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.AgentGroupEntities
	269, // 204: api.v1alpha1.wfm.ListConfigEntitiesRes.shift_templates:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.ShiftTemplateEntities
	270, // 205: api.v1alpha1.wfm.ListConfigEntitiesRes.wfm_agents:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.WFMAgentEntities
	271, // 206: api.v1alpha1.wfm.ListConfigEntitiesRes.placement_rules:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.PlacementRuleEntities
	272, // 207: api.v1alpha1.wfm.ListConfigEntitiesRes.constraint_rules:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.ConstraintRuleEntities
	273, // 208: api.v1alpha1.wfm.ListConfigEntitiesRes.non_skill_activities:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.NonSkillActivityEntities
	274, // 209: api.v1alpha1.wfm.ListConfigEntitiesRes.agent_availability_patterns:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.AgentAvailabilityPatternEntities
	275, // 210: api.v1alpha1.wfm.ListConfigEntitiesRes.open_times_patterns:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.OpenTimesPatternEntities
	117, // 211: api.v1alpha1.wfm.ListConfigEntitiesRes.scheduling_activity:type_name -> api.v1alpha1.wfm.SchedulingActivity
	276, // 212: api.v1alpha1.wfm.ListConfigEntitiesRes.skill_proficiencies:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.SkillProficiencyEntities
	277, // 213: api.v1alpha1.wfm.ListConfigEntitiesRes.schedule_scenarios:type_name -> api.v1alpha1.wfm.ListConfigEntitiesRes.ScheduleScenarioEntities
	301, // 214: api.v1alpha1.wfm.Diagnostic.level:type_name -> api.commons.DiagnosticLevel
	302, // 215: api.v1alpha1.wfm.Diagnostic.code:type_name -> api.commons.DiagnosticCode
	102, // 216: api.v1alpha1.wfm.Diagnostic.source_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	102, // 217: api.v1alpha1.wfm.Diagnostics.source_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	199, // 218: api.v1alpha1.wfm.Diagnostics.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	102, // 219: api.v1alpha1.wfm.BuildNodeDiagnosticsReq.node_to_check:type_name -> api.v1alpha1.wfm.ParentEntity
	199, // 220: api.v1alpha1.wfm.BuildNodeDiagnosticsRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	102, // 221: api.v1alpha1.wfm.BuildNodeDiagnosticsRes.nodes_checked:type_name -> api.v1alpha1.wfm.ParentEntity
	199, // 222: api.v1alpha1.wfm.BuildGlobalDiagnosticsRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	102, // 223: api.v1alpha1.wfm.BuildGlobalDiagnosticsRes.nodes_checked:type_name -> api.v1alpha1.wfm.ParentEntity
	279, // 224: api.v1alpha1.wfm.PublishedSchedule.created_at:type_name -> google.protobuf.Timestamp
	279, // 225: api.v1alpha1.wfm.PublishedSchedule.last_updated_at:type_name -> google.protobuf.Timestamp
	213, // 226: api.v1alpha1.wfm.PublishedSchedule.shift_instances:type_name -> api.v1alpha1.wfm.ShiftInstance
	209, // 227: api.v1alpha1.wfm.PublishedSchedule.performance_metrics:type_name -> api.v1alpha1.wfm.PerformanceMetric
	279, // 228: api.v1alpha1.wfm.DraftSchedule.created_at:type_name -> google.protobuf.Timestamp
	279, // 229: api.v1alpha1.wfm.DraftSchedule.last_updated_at:type_name -> google.protobuf.Timestamp
	290, // 230: api.v1alpha1.wfm.DraftSchedule.datetime_range:type_name -> api.commons.DatetimeRange
	213, // 231: api.v1alpha1.wfm.DraftSchedule.shift_instances:type_name -> api.v1alpha1.wfm.ShiftInstance
	209, // 232: api.v1alpha1.wfm.DraftSchedule.performance_metrics:type_name -> api.v1alpha1.wfm.PerformanceMetric
	290, // 233: api.v1alpha1.wfm.PerformanceMetric.date_range:type_name -> api.commons.DatetimeRange
	303, // 234: api.v1alpha1.wfm.PerformanceMetric.metric_type:type_name -> api.commons.PerformanceMetricType
	211, // 235: api.v1alpha1.wfm.PerformanceMetric.fte_intervals:type_name -> api.v1alpha1.wfm.FTERequiredVsAchievedInterval
	210, // 236: api.v1alpha1.wfm.PerformanceMetric.service_level_intervals:type_name -> api.v1alpha1.wfm.ServiceLevelInterval
	279, // 237: api.v1alpha1.wfm.ServiceLevelInterval.start_datetime:type_name -> google.protobuf.Timestamp
	279, // 238: api.v1alpha1.wfm.FTERequiredVsAchievedInterval.start_datetime:type_name -> google.protobuf.Timestamp
	279, // 239: api.v1alpha1.wfm.RequiredCallsInterval.start_datetime:type_name -> google.protobuf.Timestamp
	279, // 240: api.v1alpha1.wfm.ShiftInstance.start_datetime:type_name -> google.protobuf.Timestamp
	304, // 241: api.v1alpha1.wfm.ShiftInstance.schedule_type:type_name -> api.commons.ScheduleType
	214, // 242: api.v1alpha1.wfm.ShiftInstance.shift_segments:type_name -> api.v1alpha1.wfm.ShiftSegment
	145, // 243: api.v1alpha1.wfm.ShiftInstance.shift_template:type_name -> api.v1alpha1.wfm.ShiftTemplate
	117, // 244: api.v1alpha1.wfm.ShiftSegment.scheduling_activity:type_name -> api.v1alpha1.wfm.SchedulingActivity
	290, // 245: api.v1alpha1.wfm.GetPublishedScheduleReq.datetime_range:type_name -> api.commons.DatetimeRange
	102, // 246: api.v1alpha1.wfm.GetPublishedScheduleReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	207, // 247: api.v1alpha1.wfm.GetPublishedScheduleRes.published_schedule:type_name -> api.v1alpha1.wfm.PublishedSchedule
	290, // 248: api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq.viewing_range:type_name -> api.commons.DatetimeRange
	212, // 249: api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes.required_calls_intervals:type_name -> api.v1alpha1.wfm.RequiredCallsInterval
	290, // 250: api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq.viewing_range:type_name -> api.commons.DatetimeRange
	212, // 251: api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes.required_calls_intervals:type_name -> api.v1alpha1.wfm.RequiredCallsInterval
	290, // 252: api.v1alpha1.wfm.CreateDraftScheduleReq.scheduling_range:type_name -> api.commons.DatetimeRange
	290, // 253: api.v1alpha1.wfm.UpdateDraftScheduleReq.datetime_range:type_name -> api.commons.DatetimeRange
	208, // 254: api.v1alpha1.wfm.UpdateDraftScheduleRes.draft_schedule:type_name -> api.v1alpha1.wfm.DraftSchedule
	290, // 255: api.v1alpha1.wfm.BuildDraftScheduleReq.schedule_scenario_scheduling_range:type_name -> api.commons.DatetimeRange
	102, // 256: api.v1alpha1.wfm.BuildDraftScheduleReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	208, // 257: api.v1alpha1.wfm.BuildDraftScheduleRes.draft_schedule:type_name -> api.v1alpha1.wfm.DraftSchedule
	199, // 258: api.v1alpha1.wfm.BuildDraftScheduleRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	102, // 259: api.v1alpha1.wfm.PublishDraftScheduleReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	290, // 260: api.v1alpha1.wfm.PublishDraftScheduleReq.datetime_range:type_name -> api.commons.DatetimeRange
	207, // 261: api.v1alpha1.wfm.PublishDraftScheduleRes.published_schedule:type_name -> api.v1alpha1.wfm.PublishedSchedule
	199, // 262: api.v1alpha1.wfm.PublishDraftScheduleRes.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	290, // 263: api.v1alpha1.wfm.GetDraftScheduleReq.datetime_range:type_name -> api.commons.DatetimeRange
	102, // 264: api.v1alpha1.wfm.GetDraftScheduleReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	208, // 265: api.v1alpha1.wfm.GetDraftScheduleRes.draft_schedule:type_name -> api.v1alpha1.wfm.DraftSchedule
	290, // 266: api.v1alpha1.wfm.ListDraftSchedulesReq.datetime_range:type_name -> api.commons.DatetimeRange
	208, // 267: api.v1alpha1.wfm.ListDraftSchedulesRes.draft_schedules:type_name -> api.v1alpha1.wfm.DraftSchedule
	279, // 268: api.v1alpha1.wfm.CreateShiftInstanceReq.start_datetime:type_name -> google.protobuf.Timestamp
	292, // 269: api.v1alpha1.wfm.CreateShiftInstanceReq.wfm_agent_sid:type_name -> google.protobuf.Int64Value
	303, // 270: api.v1alpha1.wfm.CreateShiftInstanceReq.metric_types:type_name -> api.commons.PerformanceMetricType
	213, // 271: api.v1alpha1.wfm.CreateShiftInstanceRes.shift_instance:type_name -> api.v1alpha1.wfm.ShiftInstance
	209, // 272: api.v1alpha1.wfm.CreateShiftInstanceRes.performance_metrics:type_name -> api.v1alpha1.wfm.PerformanceMetric
	279, // 273: api.v1alpha1.wfm.CreateShiftInstanceV2Req.start_datetime:type_name -> google.protobuf.Timestamp
	213, // 274: api.v1alpha1.wfm.CreateShiftInstanceV2Res.shift_instances:type_name -> api.v1alpha1.wfm.ShiftInstance
	199, // 275: api.v1alpha1.wfm.CreateShiftInstanceV2Res.diagnostics:type_name -> api.v1alpha1.wfm.Diagnostic
	213, // 276: api.v1alpha1.wfm.SwapShiftInstancesRes.shift_instances:type_name -> api.v1alpha1.wfm.ShiftInstance
	279, // 277: api.v1alpha1.wfm.UpdateShiftInstanceReq.start_datetime:type_name -> google.protobuf.Timestamp
	292, // 278: api.v1alpha1.wfm.UpdateShiftInstanceReq.wfm_agent_sid:type_name -> google.protobuf.Int64Value
	303, // 279: api.v1alpha1.wfm.UpdateShiftInstanceReq.metric_types:type_name -> api.commons.PerformanceMetricType
	213, // 280: api.v1alpha1.wfm.UpdateShiftInstanceRes.shift_instance:type_name -> api.v1alpha1.wfm.ShiftInstance
	209, // 281: api.v1alpha1.wfm.UpdateShiftInstanceRes.performance_metrics:type_name -> api.v1alpha1.wfm.PerformanceMetric
	214, // 282: api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes.shift_segments:type_name -> api.v1alpha1.wfm.ShiftSegment
	303, // 283: api.v1alpha1.wfm.PerformanceMetricParameter.metric_type:type_name -> api.commons.PerformanceMetricType
	292, // 284: api.v1alpha1.wfm.PerformanceMetricParameter.service_level_target_duration_seconds:type_name -> google.protobuf.Int64Value
	305, // 285: api.v1alpha1.wfm.GetPerformanceMetricsReq.schedule_selector:type_name -> api.commons.ScheduleSelector
	102, // 286: api.v1alpha1.wfm.GetPerformanceMetricsReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	290, // 287: api.v1alpha1.wfm.GetPerformanceMetricsReq.datetime_range:type_name -> api.commons.DatetimeRange
	245, // 288: api.v1alpha1.wfm.GetPerformanceMetricsReq.metric_params:type_name -> api.v1alpha1.wfm.PerformanceMetricParameter
	209, // 289: api.v1alpha1.wfm.GetPerformanceMetricsRes.performance_metrics:type_name -> api.v1alpha1.wfm.PerformanceMetric
	306, // 290: api.v1alpha1.wfm.SchedulingTarget.scheduling_target_type:type_name -> api.commons.SchedulingTargetType
	292, // 291: api.v1alpha1.wfm.SchedulingTarget.service_level_target_duration_seconds:type_name -> google.protobuf.Int64Value
	102, // 292: api.v1alpha1.wfm.SchedulingTarget.node_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	248, // 293: api.v1alpha1.wfm.SetSchedulingTargetReq.scheduling_target:type_name -> api.v1alpha1.wfm.SchedulingTarget
	102, // 294: api.v1alpha1.wfm.GetSchedulingTargetReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	248, // 295: api.v1alpha1.wfm.GetSchedulingTargetRes.inherited_scheduling_target:type_name -> api.v1alpha1.wfm.SchedulingTarget
	248, // 296: api.v1alpha1.wfm.GetSchedulingTargetRes.own_scheduling_target:type_name -> api.v1alpha1.wfm.SchedulingTarget
	248, // 297: api.v1alpha1.wfm.GetSchedulingTargetRes.resulting_scheduling_target:type_name -> api.v1alpha1.wfm.SchedulingTarget
	102, // 298: api.v1alpha1.wfm.DeleteSchedulingTargetReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	102, // 299: api.v1alpha1.wfm.ListRequiredCallsIntervalsReq.node_selector:type_name -> api.v1alpha1.wfm.ParentEntity
	290, // 300: api.v1alpha1.wfm.ListRequiredCallsIntervalsReq.datetime_range:type_name -> api.commons.DatetimeRange
	212, // 301: api.v1alpha1.wfm.ListRequiredCallsIntervalsRes.required_calls_intervals:type_name -> api.v1alpha1.wfm.RequiredCallsInterval
	120, // 302: api.v1alpha1.wfm.ListAllWFMAgentsRes.AgentGroupsByAgent.agent_groups:type_name -> api.v1alpha1.wfm.AgentGroup
	290, // 303: api.v1alpha1.wfm.DatetimePattern.WeekMap.datetime_range:type_name -> api.commons.DatetimeRange
	263, // 304: api.v1alpha1.wfm.DatetimePattern.WeekMap.day_maps:type_name -> api.v1alpha1.wfm.DatetimePattern.WeekMap.WeekMapDOW
	290, // 305: api.v1alpha1.wfm.DatetimePattern.CalendarItem.datetime_range:type_name -> api.commons.DatetimeRange
	307, // 306: api.v1alpha1.wfm.DatetimePattern.CalendarItem.value:type_name -> api.commons.OptionTypes
	298, // 307: api.v1alpha1.wfm.DatetimePattern.WeekMap.WeekMapDOW.day_of_week:type_name -> api.commons.DayOfWeek
	307, // 308: api.v1alpha1.wfm.DatetimePattern.WeekMap.WeekMapDOW.value:type_name -> api.commons.OptionTypes
	102, // 309: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes.EntityMapping.left_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	102, // 310: api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes.EntityMapping.right_entity:type_name -> api.v1alpha1.wfm.ParentEntity
	87,  // 311: api.v1alpha1.wfm.ListConfigEntitiesRes.ClientNodeEntities.entities:type_name -> api.v1alpha1.wfm.ClientNode
	92,  // 312: api.v1alpha1.wfm.ListConfigEntitiesRes.LocationNodeEntities.entities:type_name -> api.v1alpha1.wfm.LocationNode
	97,  // 313: api.v1alpha1.wfm.ListConfigEntitiesRes.ProgramNodeEntities.entities:type_name -> api.v1alpha1.wfm.ProgramNode
	120, // 314: api.v1alpha1.wfm.ListConfigEntitiesRes.AgentGroupEntities.entities:type_name -> api.v1alpha1.wfm.AgentGroup
	145, // 315: api.v1alpha1.wfm.ListConfigEntitiesRes.ShiftTemplateEntities.entities:type_name -> api.v1alpha1.wfm.ShiftTemplate
	125, // 316: api.v1alpha1.wfm.ListConfigEntitiesRes.WFMAgentEntities.entities:type_name -> api.v1alpha1.wfm.WFMAgent
	154, // 317: api.v1alpha1.wfm.ListConfigEntitiesRes.PlacementRuleEntities.entities:type_name -> api.v1alpha1.wfm.PlacementRule
	103, // 318: api.v1alpha1.wfm.ListConfigEntitiesRes.ConstraintRuleEntities.entities:type_name -> api.v1alpha1.wfm.ConstraintRule
	110, // 319: api.v1alpha1.wfm.ListConfigEntitiesRes.NonSkillActivityEntities.entities:type_name -> api.v1alpha1.wfm.NonSkillActivity
	171, // 320: api.v1alpha1.wfm.ListConfigEntitiesRes.AgentAvailabilityPatternEntities.entities:type_name -> api.v1alpha1.wfm.AgentAvailabilityPattern
	162, // 321: api.v1alpha1.wfm.ListConfigEntitiesRes.OpenTimesPatternEntities.entities:type_name -> api.v1alpha1.wfm.OpenTimesPattern
	183, // 322: api.v1alpha1.wfm.ListConfigEntitiesRes.SkillProficiencyEntities.entities:type_name -> api.v1alpha1.wfm.SkillProficiency
	190, // 323: api.v1alpha1.wfm.ListConfigEntitiesRes.ScheduleScenarioEntities.entities:type_name -> api.v1alpha1.wfm.ScheduleScenario
	3,   // 324: api.v1alpha1.wfm.WFM.ListSkillProfiles:input_type -> api.v1alpha1.wfm.ListSkillProfilesReq
	5,   // 325: api.v1alpha1.wfm.WFM.UpdateSkillProfile:input_type -> api.v1alpha1.wfm.UpdateSkillProfileReq
	7,   // 326: api.v1alpha1.wfm.WFM.UpdateSkillProfileProficiencies:input_type -> api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq
	9,   // 327: api.v1alpha1.wfm.WFM.GetSkillProfile:input_type -> api.v1alpha1.wfm.GetSkillProfileReq
	11,  // 328: api.v1alpha1.wfm.WFM.ResyncSkillProfiles:input_type -> api.v1alpha1.wfm.ResyncSkillProfilesReq
	13,  // 329: api.v1alpha1.wfm.WFM.GetLastSkillProfileResyncDate:input_type -> api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq
	15,  // 330: api.v1alpha1.wfm.WFM.UpsertForecastingParameters:input_type -> api.v1alpha1.wfm.UpsertForecastingParametersReq
	17,  // 331: api.v1alpha1.wfm.WFM.GetForecastingParameters:input_type -> api.v1alpha1.wfm.GetForecastingParametersReq
	20,  // 332: api.v1alpha1.wfm.WFM.ListHistoricalData:input_type -> api.v1alpha1.wfm.ListHistoricalDataReq
	22,  // 333: api.v1alpha1.wfm.WFM.UpsertHistoricalDataDelta:input_type -> api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq
	24,  // 334: api.v1alpha1.wfm.WFM.UpsertHistoricalDataDeltas:input_type -> api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq
	26,  // 335: api.v1alpha1.wfm.WFM.ListSkills:input_type -> api.v1alpha1.wfm.ListSkillsReq
	29,  // 336: api.v1alpha1.wfm.WFM.BuildCallProfileTemplateForSkillProfile:input_type -> api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq
	31,  // 337: api.v1alpha1.wfm.WFM.CreateInactiveSkillProfileMapping:input_type -> api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq
	33,  // 338: api.v1alpha1.wfm.WFM.GetAvailableRegressionForecasterModelTypes:input_type -> api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq
	35,  // 339: api.v1alpha1.wfm.WFM.DisconnectInactiveSkillProfileMapping:input_type -> api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq
	37,  // 340: api.v1alpha1.wfm.WFM.DeleteHistoricalDataDeltas:input_type -> api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq
	39,  // 341: api.v1alpha1.wfm.WFM.ListTopSkillProfiles:input_type -> api.v1alpha1.wfm.ListTopSkillProfilesReq
	41,  // 342: api.v1alpha1.wfm.WFM.GetSkillProfilesCount:input_type -> api.v1alpha1.wfm.GetSkillProfilesCountReq
	43,  // 343: api.v1alpha1.wfm.WFM.BuildProfileForecastByInterval:input_type -> api.v1alpha1.wfm.BuildProfileForecastByIntervalReq
	45,  // 344: api.v1alpha1.wfm.WFM.BuildProfileForecastByIntervalWithStats:input_type -> api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq
	47,  // 345: api.v1alpha1.wfm.WFM.UpsertProfileForecast:input_type -> api.v1alpha1.wfm.UpsertProfileForecastReq
	49,  // 346: api.v1alpha1.wfm.WFM.CreateCallProfileTemplate:input_type -> api.v1alpha1.wfm.CreateCallProfileTemplateReq
	51,  // 347: api.v1alpha1.wfm.WFM.DeleteCallProfileTemplate:input_type -> api.v1alpha1.wfm.DeleteCallProfileTemplateReq
	54,  // 348: api.v1alpha1.wfm.WFM.CreateRegressionTemplate:input_type -> api.v1alpha1.wfm.CreateRegressionTemplateReq
	56,  // 349: api.v1alpha1.wfm.WFM.DeleteRegressionTemplate:input_type -> api.v1alpha1.wfm.DeleteRegressionTemplateReq
	58,  // 350: api.v1alpha1.wfm.WFM.ListRegressionTemplates:input_type -> api.v1alpha1.wfm.ListRegressionTemplatesReq
	66,  // 351: api.v1alpha1.wfm.WFM.ListForecastIntervalsForSkillProfile:input_type -> api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq
	60,  // 352: api.v1alpha1.wfm.WFM.BuildRegressionForecastByInterval:input_type -> api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq
	61,  // 353: api.v1alpha1.wfm.WFM.BuildRegressionForecastByIntervalWithStats:input_type -> api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq
	64,  // 354: api.v1alpha1.wfm.WFM.ListCallProfileTemplates:input_type -> api.v1alpha1.wfm.ListCallProfileTemplatesReq
	67,  // 355: api.v1alpha1.wfm.WFM.UpsertRegressionForecast:input_type -> api.v1alpha1.wfm.UpsertRegressionForecastReq
	69,  // 356: api.v1alpha1.wfm.WFM.UpsertForecastDataDelta:input_type -> api.v1alpha1.wfm.UpsertForecastDataDeltaReq
	71,  // 357: api.v1alpha1.wfm.WFM.UpsertForecastDataDeltas:input_type -> api.v1alpha1.wfm.UpsertForecastDataDeltasReq
	73,  // 358: api.v1alpha1.wfm.WFM.DeleteForecastIntervals:input_type -> api.v1alpha1.wfm.DeleteForecastIntervalsReq
	75,  // 359: api.v1alpha1.wfm.WFM.ListHistoricalDataForAllSkillProfiles:input_type -> api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq
	77,  // 360: api.v1alpha1.wfm.WFM.BuildDOWAndMOYProfiles:input_type -> api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq
	79,  // 361: api.v1alpha1.wfm.WFM.CalculateTrainingDataAveragesForSkillProfile:input_type -> api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq
	81,  // 362: api.v1alpha1.wfm.WFM.UpdateSkillProfileAveragesUsingHistoricalData:input_type -> api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq
	85,  // 363: api.v1alpha1.wfm.WFM.UpdateCallCenterNode:input_type -> api.v1alpha1.wfm.UpdateCallCenterNodeReq
	88,  // 364: api.v1alpha1.wfm.WFM.CreateClientNode:input_type -> api.v1alpha1.wfm.CreateClientNodeReq
	90,  // 365: api.v1alpha1.wfm.WFM.UpdateClientNode:input_type -> api.v1alpha1.wfm.UpdateClientNodeReq
	93,  // 366: api.v1alpha1.wfm.WFM.CreateLocationNode:input_type -> api.v1alpha1.wfm.CreateLocationNodeReq
	95,  // 367: api.v1alpha1.wfm.WFM.UpdateLocationNode:input_type -> api.v1alpha1.wfm.UpdateLocationNodeReq
	98,  // 368: api.v1alpha1.wfm.WFM.CreateProgramNode:input_type -> api.v1alpha1.wfm.CreateProgramNodeReq
	100, // 369: api.v1alpha1.wfm.WFM.UpdateProgramNode:input_type -> api.v1alpha1.wfm.UpdateProgramNodeReq
	104, // 370: api.v1alpha1.wfm.WFM.CreateConstraintRule:input_type -> api.v1alpha1.wfm.CreateConstraintRuleReq
	106, // 371: api.v1alpha1.wfm.WFM.UpdateConstraintRule:input_type -> api.v1alpha1.wfm.UpdateConstraintRuleReq
	108, // 372: api.v1alpha1.wfm.WFM.DeleteConstraintRule:input_type -> api.v1alpha1.wfm.DeleteConstraintRuleReq
	111, // 373: api.v1alpha1.wfm.WFM.CreateNonSkillActivity:input_type -> api.v1alpha1.wfm.CreateNonSkillActivityReq
	113, // 374: api.v1alpha1.wfm.WFM.UpdateNonSkillActivity:input_type -> api.v1alpha1.wfm.UpdateNonSkillActivityReq
	115, // 375: api.v1alpha1.wfm.WFM.ListNonSkillActivityAssociations:input_type -> api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq
	118, // 376: api.v1alpha1.wfm.WFM.ListCandidateSchedulingActivities:input_type -> api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq
	121, // 377: api.v1alpha1.wfm.WFM.CreateAgentGroup:input_type -> api.v1alpha1.wfm.CreateAgentGroupReq
	123, // 378: api.v1alpha1.wfm.WFM.UpdateAgentGroup:input_type -> api.v1alpha1.wfm.UpdateAgentGroupReq
	126, // 379: api.v1alpha1.wfm.WFM.UpdateWFMAgent:input_type -> api.v1alpha1.wfm.UpdateWFMAgentReq
	128, // 380: api.v1alpha1.wfm.WFM.ListAllWFMAgents:input_type -> api.v1alpha1.wfm.ListAllWFMAgentsReq
	130, // 381: api.v1alpha1.wfm.WFM.ListCandidateWFMAgents:input_type -> api.v1alpha1.wfm.ListCandidateWFMAgentsReq
	132, // 382: api.v1alpha1.wfm.WFM.ListUngroupedWFMAgents:input_type -> api.v1alpha1.wfm.ListUngroupedWFMAgentsReq
	134, // 383: api.v1alpha1.wfm.WFM.ListWFMAgentsAssociatedWithAgentGroup:input_type -> api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq
	138, // 384: api.v1alpha1.wfm.WFM.CreateWFMAgentMemberships:input_type -> api.v1alpha1.wfm.CreateWFMAgentMembershipsReq
	140, // 385: api.v1alpha1.wfm.WFM.DeleteWFMAgentMemberships:input_type -> api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq
	142, // 386: api.v1alpha1.wfm.WFM.DeleteWFMAgentsMemberships:input_type -> api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq
	136, // 387: api.v1alpha1.wfm.WFM.BuildAgentDiagnostics:input_type -> api.v1alpha1.wfm.BuildAgentDiagnosticsReq
	146, // 388: api.v1alpha1.wfm.WFM.CreateShiftTemplate:input_type -> api.v1alpha1.wfm.CreateShiftTemplateReq
	148, // 389: api.v1alpha1.wfm.WFM.UpdateShiftTemplate:input_type -> api.v1alpha1.wfm.UpdateShiftTemplateReq
	150, // 390: api.v1alpha1.wfm.WFM.ListShiftTemplatesBySids:input_type -> api.v1alpha1.wfm.ListShiftTemplatesBySidsReq
	152, // 391: api.v1alpha1.wfm.WFM.BuildShiftTemplateDiagnostics:input_type -> api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq
	155, // 392: api.v1alpha1.wfm.WFM.CreatePlacementRule:input_type -> api.v1alpha1.wfm.CreatePlacementRuleReq
	157, // 393: api.v1alpha1.wfm.WFM.UpdatePlacementRule:input_type -> api.v1alpha1.wfm.UpdatePlacementRuleReq
	159, // 394: api.v1alpha1.wfm.WFM.DeletePlacementRule:input_type -> api.v1alpha1.wfm.DeletePlacementRuleReq
	163, // 395: api.v1alpha1.wfm.WFM.CreateOpenTimesPattern:input_type -> api.v1alpha1.wfm.CreateOpenTimesPatternReq
	165, // 396: api.v1alpha1.wfm.WFM.UpdateOpenTimesPattern:input_type -> api.v1alpha1.wfm.UpdateOpenTimesPatternReq
	167, // 397: api.v1alpha1.wfm.WFM.DeleteOpenTimesPattern:input_type -> api.v1alpha1.wfm.DeleteOpenTimesPatternReq
	169, // 398: api.v1alpha1.wfm.WFM.GetOpenTimesBitmaps:input_type -> api.v1alpha1.wfm.GetOpenTimesBitmapsReq
	172, // 399: api.v1alpha1.wfm.WFM.CreateAgentAvailabilityPattern:input_type -> api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq
	174, // 400: api.v1alpha1.wfm.WFM.UpdateAgentAvailabilityPattern:input_type -> api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq
	176, // 401: api.v1alpha1.wfm.WFM.DeleteAgentAvailabilityPattern:input_type -> api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq
	179, // 402: api.v1alpha1.wfm.WFM.GetAvailabilityBitmaps:input_type -> api.v1alpha1.wfm.GetAvailabilityBitmapsReq
	181, // 403: api.v1alpha1.wfm.WFM.UpsertNonSkillActivityAssociation:input_type -> api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq
	184, // 404: api.v1alpha1.wfm.WFM.CreateSkillProficiencies:input_type -> api.v1alpha1.wfm.CreateSkillProficienciesReq
	186, // 405: api.v1alpha1.wfm.WFM.UpdateSkillProficiencies:input_type -> api.v1alpha1.wfm.UpdateSkillProficienciesReq
	188, // 406: api.v1alpha1.wfm.WFM.DeleteSkillProficiency:input_type -> api.v1alpha1.wfm.DeleteSkillProficiencyReq
	191, // 407: api.v1alpha1.wfm.WFM.CopyScenario:input_type -> api.v1alpha1.wfm.CopyScenarioReq
	193, // 408: api.v1alpha1.wfm.WFM.CreateScheduleScenarioWithNodes:input_type -> api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq
	195, // 409: api.v1alpha1.wfm.WFM.UpdateScheduleScenario:input_type -> api.v1alpha1.wfm.UpdateScheduleScenarioReq
	197, // 410: api.v1alpha1.wfm.WFM.ListConfigEntities:input_type -> api.v1alpha1.wfm.ListConfigEntitiesReq
	201, // 411: api.v1alpha1.wfm.WFM.DeleteShiftInstances:input_type -> api.v1alpha1.wfm.DeleteShiftInstancesReq
	203, // 412: api.v1alpha1.wfm.WFM.BuildNodeDiagnostics:input_type -> api.v1alpha1.wfm.BuildNodeDiagnosticsReq
	205, // 413: api.v1alpha1.wfm.WFM.BuildGlobalDiagnostics:input_type -> api.v1alpha1.wfm.BuildGlobalDiagnosticsReq
	215, // 414: api.v1alpha1.wfm.WFM.GetPublishedSchedule:input_type -> api.v1alpha1.wfm.GetPublishedScheduleReq
	217, // 415: api.v1alpha1.wfm.WFM.GetPublishedScheduleRequiredCalls:input_type -> api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq
	219, // 416: api.v1alpha1.wfm.WFM.GetDraftScheduleRequiredCalls:input_type -> api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq
	221, // 417: api.v1alpha1.wfm.WFM.CreateDraftSchedule:input_type -> api.v1alpha1.wfm.CreateDraftScheduleReq
	223, // 418: api.v1alpha1.wfm.WFM.UpdateDraftSchedule:input_type -> api.v1alpha1.wfm.UpdateDraftScheduleReq
	225, // 419: api.v1alpha1.wfm.WFM.BuildDraftSchedule:input_type -> api.v1alpha1.wfm.BuildDraftScheduleReq
	227, // 420: api.v1alpha1.wfm.WFM.PublishDraftSchedule:input_type -> api.v1alpha1.wfm.PublishDraftScheduleReq
	229, // 421: api.v1alpha1.wfm.WFM.GetDraftSchedule:input_type -> api.v1alpha1.wfm.GetDraftScheduleReq
	231, // 422: api.v1alpha1.wfm.WFM.ListDraftSchedules:input_type -> api.v1alpha1.wfm.ListDraftSchedulesReq
	233, // 423: api.v1alpha1.wfm.WFM.DeleteDraftSchedule:input_type -> api.v1alpha1.wfm.DeleteDraftScheduleReq
	235, // 424: api.v1alpha1.wfm.WFM.CreateShiftInstance:input_type -> api.v1alpha1.wfm.CreateShiftInstanceReq
	237, // 425: api.v1alpha1.wfm.WFM.CreateShiftInstanceV2:input_type -> api.v1alpha1.wfm.CreateShiftInstanceV2Req
	239, // 426: api.v1alpha1.wfm.WFM.SwapShiftInstances:input_type -> api.v1alpha1.wfm.SwapShiftInstancesReq
	241, // 427: api.v1alpha1.wfm.WFM.UpdateShiftInstance:input_type -> api.v1alpha1.wfm.UpdateShiftInstanceReq
	243, // 428: api.v1alpha1.wfm.WFM.ListShiftSegmentsByShiftInstanceSids:input_type -> api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq
	249, // 429: api.v1alpha1.wfm.WFM.SetSchedulingTarget:input_type -> api.v1alpha1.wfm.SetSchedulingTargetReq
	251, // 430: api.v1alpha1.wfm.WFM.GetSchedulingTarget:input_type -> api.v1alpha1.wfm.GetSchedulingTargetReq
	253, // 431: api.v1alpha1.wfm.WFM.DeleteSchedulingTarget:input_type -> api.v1alpha1.wfm.DeleteSchedulingTargetReq
	246, // 432: api.v1alpha1.wfm.WFM.GetPerformanceMetrics:input_type -> api.v1alpha1.wfm.GetPerformanceMetricsReq
	255, // 433: api.v1alpha1.wfm.WFM.ListRequiredCallsIntervals:input_type -> api.v1alpha1.wfm.ListRequiredCallsIntervalsReq
	4,   // 434: api.v1alpha1.wfm.WFM.ListSkillProfiles:output_type -> api.v1alpha1.wfm.ListSkillProfilesRes
	6,   // 435: api.v1alpha1.wfm.WFM.UpdateSkillProfile:output_type -> api.v1alpha1.wfm.UpdateSkillProfileRes
	8,   // 436: api.v1alpha1.wfm.WFM.UpdateSkillProfileProficiencies:output_type -> api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes
	10,  // 437: api.v1alpha1.wfm.WFM.GetSkillProfile:output_type -> api.v1alpha1.wfm.GetSkillProfileRes
	12,  // 438: api.v1alpha1.wfm.WFM.ResyncSkillProfiles:output_type -> api.v1alpha1.wfm.ResyncSkillProfilesRes
	14,  // 439: api.v1alpha1.wfm.WFM.GetLastSkillProfileResyncDate:output_type -> api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes
	16,  // 440: api.v1alpha1.wfm.WFM.UpsertForecastingParameters:output_type -> api.v1alpha1.wfm.UpsertForecastingParametersRes
	18,  // 441: api.v1alpha1.wfm.WFM.GetForecastingParameters:output_type -> api.v1alpha1.wfm.GetForecastingParametersRes
	21,  // 442: api.v1alpha1.wfm.WFM.ListHistoricalData:output_type -> api.v1alpha1.wfm.ListHistoricalDataRes
	23,  // 443: api.v1alpha1.wfm.WFM.UpsertHistoricalDataDelta:output_type -> api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes
	25,  // 444: api.v1alpha1.wfm.WFM.UpsertHistoricalDataDeltas:output_type -> api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes
	27,  // 445: api.v1alpha1.wfm.WFM.ListSkills:output_type -> api.v1alpha1.wfm.ListSkillsRes
	30,  // 446: api.v1alpha1.wfm.WFM.BuildCallProfileTemplateForSkillProfile:output_type -> api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes
	32,  // 447: api.v1alpha1.wfm.WFM.CreateInactiveSkillProfileMapping:output_type -> api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes
	34,  // 448: api.v1alpha1.wfm.WFM.GetAvailableRegressionForecasterModelTypes:output_type -> api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes
	36,  // 449: api.v1alpha1.wfm.WFM.DisconnectInactiveSkillProfileMapping:output_type -> api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes
	38,  // 450: api.v1alpha1.wfm.WFM.DeleteHistoricalDataDeltas:output_type -> api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes
	40,  // 451: api.v1alpha1.wfm.WFM.ListTopSkillProfiles:output_type -> api.v1alpha1.wfm.ListTopSkillProfilesRes
	42,  // 452: api.v1alpha1.wfm.WFM.GetSkillProfilesCount:output_type -> api.v1alpha1.wfm.GetSkillProfilesCountRes
	44,  // 453: api.v1alpha1.wfm.WFM.BuildProfileForecastByInterval:output_type -> api.v1alpha1.wfm.CallDataByInterval
	46,  // 454: api.v1alpha1.wfm.WFM.BuildProfileForecastByIntervalWithStats:output_type -> api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes
	48,  // 455: api.v1alpha1.wfm.WFM.UpsertProfileForecast:output_type -> api.v1alpha1.wfm.UpsertProfileForecastRes
	50,  // 456: api.v1alpha1.wfm.WFM.CreateCallProfileTemplate:output_type -> api.v1alpha1.wfm.CreateCallProfileTemplateRes
	52,  // 457: api.v1alpha1.wfm.WFM.DeleteCallProfileTemplate:output_type -> api.v1alpha1.wfm.DeleteCallProfileTemplateRes
	55,  // 458: api.v1alpha1.wfm.WFM.CreateRegressionTemplate:output_type -> api.v1alpha1.wfm.CreateRegressionTemplateRes
	57,  // 459: api.v1alpha1.wfm.WFM.DeleteRegressionTemplate:output_type -> api.v1alpha1.wfm.DeleteRegressionTemplateRes
	59,  // 460: api.v1alpha1.wfm.WFM.ListRegressionTemplates:output_type -> api.v1alpha1.wfm.ListRegressionTemplatesRes
	44,  // 461: api.v1alpha1.wfm.WFM.ListForecastIntervalsForSkillProfile:output_type -> api.v1alpha1.wfm.CallDataByInterval
	44,  // 462: api.v1alpha1.wfm.WFM.BuildRegressionForecastByInterval:output_type -> api.v1alpha1.wfm.CallDataByInterval
	63,  // 463: api.v1alpha1.wfm.WFM.BuildRegressionForecastByIntervalWithStats:output_type -> api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes
	65,  // 464: api.v1alpha1.wfm.WFM.ListCallProfileTemplates:output_type -> api.v1alpha1.wfm.ListCallProfileTemplatesRes
	68,  // 465: api.v1alpha1.wfm.WFM.UpsertRegressionForecast:output_type -> api.v1alpha1.wfm.UpsertRegressionForecastRes
	70,  // 466: api.v1alpha1.wfm.WFM.UpsertForecastDataDelta:output_type -> api.v1alpha1.wfm.UpsertForecastDataDeltaRes
	72,  // 467: api.v1alpha1.wfm.WFM.UpsertForecastDataDeltas:output_type -> api.v1alpha1.wfm.UpsertForecastDataDeltasRes
	74,  // 468: api.v1alpha1.wfm.WFM.DeleteForecastIntervals:output_type -> api.v1alpha1.wfm.DeleteForecastIntervalsRes
	76,  // 469: api.v1alpha1.wfm.WFM.ListHistoricalDataForAllSkillProfiles:output_type -> api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes
	78,  // 470: api.v1alpha1.wfm.WFM.BuildDOWAndMOYProfiles:output_type -> api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes
	80,  // 471: api.v1alpha1.wfm.WFM.CalculateTrainingDataAveragesForSkillProfile:output_type -> api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes
	82,  // 472: api.v1alpha1.wfm.WFM.UpdateSkillProfileAveragesUsingHistoricalData:output_type -> api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes
	86,  // 473: api.v1alpha1.wfm.WFM.UpdateCallCenterNode:output_type -> api.v1alpha1.wfm.UpdateCallCenterNodeRes
	89,  // 474: api.v1alpha1.wfm.WFM.CreateClientNode:output_type -> api.v1alpha1.wfm.CreateClientNodeRes
	91,  // 475: api.v1alpha1.wfm.WFM.UpdateClientNode:output_type -> api.v1alpha1.wfm.UpdateClientNodeRes
	94,  // 476: api.v1alpha1.wfm.WFM.CreateLocationNode:output_type -> api.v1alpha1.wfm.CreateLocationNodeRes
	96,  // 477: api.v1alpha1.wfm.WFM.UpdateLocationNode:output_type -> api.v1alpha1.wfm.UpdateLocationNodeRes
	99,  // 478: api.v1alpha1.wfm.WFM.CreateProgramNode:output_type -> api.v1alpha1.wfm.CreateProgramNodeRes
	101, // 479: api.v1alpha1.wfm.WFM.UpdateProgramNode:output_type -> api.v1alpha1.wfm.UpdateProgramNodeRes
	105, // 480: api.v1alpha1.wfm.WFM.CreateConstraintRule:output_type -> api.v1alpha1.wfm.CreateConstraintRuleRes
	107, // 481: api.v1alpha1.wfm.WFM.UpdateConstraintRule:output_type -> api.v1alpha1.wfm.UpdateConstraintRuleRes
	109, // 482: api.v1alpha1.wfm.WFM.DeleteConstraintRule:output_type -> api.v1alpha1.wfm.DeleteConstraintRuleRes
	112, // 483: api.v1alpha1.wfm.WFM.CreateNonSkillActivity:output_type -> api.v1alpha1.wfm.CreateNonSkillActivityRes
	114, // 484: api.v1alpha1.wfm.WFM.UpdateNonSkillActivity:output_type -> api.v1alpha1.wfm.UpdateNonSkillActivityRes
	116, // 485: api.v1alpha1.wfm.WFM.ListNonSkillActivityAssociations:output_type -> api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes
	119, // 486: api.v1alpha1.wfm.WFM.ListCandidateSchedulingActivities:output_type -> api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes
	122, // 487: api.v1alpha1.wfm.WFM.CreateAgentGroup:output_type -> api.v1alpha1.wfm.CreateAgentGroupRes
	124, // 488: api.v1alpha1.wfm.WFM.UpdateAgentGroup:output_type -> api.v1alpha1.wfm.UpdateAgentGroupRes
	127, // 489: api.v1alpha1.wfm.WFM.UpdateWFMAgent:output_type -> api.v1alpha1.wfm.UpdateWFMAgentRes
	129, // 490: api.v1alpha1.wfm.WFM.ListAllWFMAgents:output_type -> api.v1alpha1.wfm.ListAllWFMAgentsRes
	131, // 491: api.v1alpha1.wfm.WFM.ListCandidateWFMAgents:output_type -> api.v1alpha1.wfm.ListCandidateWFMAgentsRes
	133, // 492: api.v1alpha1.wfm.WFM.ListUngroupedWFMAgents:output_type -> api.v1alpha1.wfm.ListUngroupedWFMAgentsRes
	135, // 493: api.v1alpha1.wfm.WFM.ListWFMAgentsAssociatedWithAgentGroup:output_type -> api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes
	139, // 494: api.v1alpha1.wfm.WFM.CreateWFMAgentMemberships:output_type -> api.v1alpha1.wfm.CreateWFMAgentMembershipsRes
	141, // 495: api.v1alpha1.wfm.WFM.DeleteWFMAgentMemberships:output_type -> api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes
	143, // 496: api.v1alpha1.wfm.WFM.DeleteWFMAgentsMemberships:output_type -> api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes
	137, // 497: api.v1alpha1.wfm.WFM.BuildAgentDiagnostics:output_type -> api.v1alpha1.wfm.BuildAgentDiagnosticsRes
	147, // 498: api.v1alpha1.wfm.WFM.CreateShiftTemplate:output_type -> api.v1alpha1.wfm.CreateShiftTemplateRes
	149, // 499: api.v1alpha1.wfm.WFM.UpdateShiftTemplate:output_type -> api.v1alpha1.wfm.UpdateShiftTemplateRes
	151, // 500: api.v1alpha1.wfm.WFM.ListShiftTemplatesBySids:output_type -> api.v1alpha1.wfm.ListShiftTemplatesBySidsRes
	153, // 501: api.v1alpha1.wfm.WFM.BuildShiftTemplateDiagnostics:output_type -> api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes
	156, // 502: api.v1alpha1.wfm.WFM.CreatePlacementRule:output_type -> api.v1alpha1.wfm.CreatePlacementRuleRes
	158, // 503: api.v1alpha1.wfm.WFM.UpdatePlacementRule:output_type -> api.v1alpha1.wfm.UpdatePlacementRuleRes
	160, // 504: api.v1alpha1.wfm.WFM.DeletePlacementRule:output_type -> api.v1alpha1.wfm.DeletePlacementRuleRes
	164, // 505: api.v1alpha1.wfm.WFM.CreateOpenTimesPattern:output_type -> api.v1alpha1.wfm.CreateOpenTimesPatternRes
	166, // 506: api.v1alpha1.wfm.WFM.UpdateOpenTimesPattern:output_type -> api.v1alpha1.wfm.UpdateOpenTimesPatternRes
	168, // 507: api.v1alpha1.wfm.WFM.DeleteOpenTimesPattern:output_type -> api.v1alpha1.wfm.DeleteOpenTimesPatternRes
	170, // 508: api.v1alpha1.wfm.WFM.GetOpenTimesBitmaps:output_type -> api.v1alpha1.wfm.GetOpenTimesBitmapsRes
	173, // 509: api.v1alpha1.wfm.WFM.CreateAgentAvailabilityPattern:output_type -> api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes
	175, // 510: api.v1alpha1.wfm.WFM.UpdateAgentAvailabilityPattern:output_type -> api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes
	177, // 511: api.v1alpha1.wfm.WFM.DeleteAgentAvailabilityPattern:output_type -> api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes
	180, // 512: api.v1alpha1.wfm.WFM.GetAvailabilityBitmaps:output_type -> api.v1alpha1.wfm.GetAvailabilityBitmapsRes
	182, // 513: api.v1alpha1.wfm.WFM.UpsertNonSkillActivityAssociation:output_type -> api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes
	185, // 514: api.v1alpha1.wfm.WFM.CreateSkillProficiencies:output_type -> api.v1alpha1.wfm.CreateSkillProficienciesRes
	187, // 515: api.v1alpha1.wfm.WFM.UpdateSkillProficiencies:output_type -> api.v1alpha1.wfm.UpdateSkillProficienciesRes
	189, // 516: api.v1alpha1.wfm.WFM.DeleteSkillProficiency:output_type -> api.v1alpha1.wfm.DeleteSkillProficiencyRes
	192, // 517: api.v1alpha1.wfm.WFM.CopyScenario:output_type -> api.v1alpha1.wfm.CopyScenarioRes
	194, // 518: api.v1alpha1.wfm.WFM.CreateScheduleScenarioWithNodes:output_type -> api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes
	196, // 519: api.v1alpha1.wfm.WFM.UpdateScheduleScenario:output_type -> api.v1alpha1.wfm.UpdateScheduleScenarioRes
	198, // 520: api.v1alpha1.wfm.WFM.ListConfigEntities:output_type -> api.v1alpha1.wfm.ListConfigEntitiesRes
	202, // 521: api.v1alpha1.wfm.WFM.DeleteShiftInstances:output_type -> api.v1alpha1.wfm.DeleteShiftInstancesRes
	204, // 522: api.v1alpha1.wfm.WFM.BuildNodeDiagnostics:output_type -> api.v1alpha1.wfm.BuildNodeDiagnosticsRes
	206, // 523: api.v1alpha1.wfm.WFM.BuildGlobalDiagnostics:output_type -> api.v1alpha1.wfm.BuildGlobalDiagnosticsRes
	216, // 524: api.v1alpha1.wfm.WFM.GetPublishedSchedule:output_type -> api.v1alpha1.wfm.GetPublishedScheduleRes
	218, // 525: api.v1alpha1.wfm.WFM.GetPublishedScheduleRequiredCalls:output_type -> api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes
	220, // 526: api.v1alpha1.wfm.WFM.GetDraftScheduleRequiredCalls:output_type -> api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes
	222, // 527: api.v1alpha1.wfm.WFM.CreateDraftSchedule:output_type -> api.v1alpha1.wfm.CreateDraftScheduleRes
	224, // 528: api.v1alpha1.wfm.WFM.UpdateDraftSchedule:output_type -> api.v1alpha1.wfm.UpdateDraftScheduleRes
	226, // 529: api.v1alpha1.wfm.WFM.BuildDraftSchedule:output_type -> api.v1alpha1.wfm.BuildDraftScheduleRes
	228, // 530: api.v1alpha1.wfm.WFM.PublishDraftSchedule:output_type -> api.v1alpha1.wfm.PublishDraftScheduleRes
	230, // 531: api.v1alpha1.wfm.WFM.GetDraftSchedule:output_type -> api.v1alpha1.wfm.GetDraftScheduleRes
	232, // 532: api.v1alpha1.wfm.WFM.ListDraftSchedules:output_type -> api.v1alpha1.wfm.ListDraftSchedulesRes
	234, // 533: api.v1alpha1.wfm.WFM.DeleteDraftSchedule:output_type -> api.v1alpha1.wfm.DeleteDraftScheduleRes
	236, // 534: api.v1alpha1.wfm.WFM.CreateShiftInstance:output_type -> api.v1alpha1.wfm.CreateShiftInstanceRes
	238, // 535: api.v1alpha1.wfm.WFM.CreateShiftInstanceV2:output_type -> api.v1alpha1.wfm.CreateShiftInstanceV2Res
	240, // 536: api.v1alpha1.wfm.WFM.SwapShiftInstances:output_type -> api.v1alpha1.wfm.SwapShiftInstancesRes
	242, // 537: api.v1alpha1.wfm.WFM.UpdateShiftInstance:output_type -> api.v1alpha1.wfm.UpdateShiftInstanceRes
	244, // 538: api.v1alpha1.wfm.WFM.ListShiftSegmentsByShiftInstanceSids:output_type -> api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes
	250, // 539: api.v1alpha1.wfm.WFM.SetSchedulingTarget:output_type -> api.v1alpha1.wfm.SetSchedulingTargetRes
	252, // 540: api.v1alpha1.wfm.WFM.GetSchedulingTarget:output_type -> api.v1alpha1.wfm.GetSchedulingTargetRes
	254, // 541: api.v1alpha1.wfm.WFM.DeleteSchedulingTarget:output_type -> api.v1alpha1.wfm.DeleteSchedulingTargetRes
	247, // 542: api.v1alpha1.wfm.WFM.GetPerformanceMetrics:output_type -> api.v1alpha1.wfm.GetPerformanceMetricsRes
	256, // 543: api.v1alpha1.wfm.WFM.ListRequiredCallsIntervals:output_type -> api.v1alpha1.wfm.ListRequiredCallsIntervalsRes
	434, // [434:544] is the sub-list for method output_type
	324, // [324:434] is the sub-list for method input_type
	324, // [324:324] is the sub-list for extension type_name
	324, // [324:324] is the sub-list for extension extendee
	0,   // [0:324] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_wfm_wfm_proto_init() }
func file_api_v1alpha1_wfm_wfm_proto_init() {
	if File_api_v1alpha1_wfm_wfm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSkillProfilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSkillProfilesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSkillProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSkillProfileRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSkillProfileProficienciesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSkillProfileProficienciesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSkillProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSkillProfileRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResyncSkillProfilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResyncSkillProfilesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastSkillProfileResyncDateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastSkillProfileResyncDateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertForecastingParametersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertForecastingParametersRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForecastingParametersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForecastingParametersRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalDataInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHistoricalDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHistoricalDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertHistoricalDataDeltaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertHistoricalDataDeltaRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertHistoricalDataDeltasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertHistoricalDataDeltasRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSkillsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSkillsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallProfileTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildCallProfileTemplateForSkillProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildCallProfileTemplateForSkillProfileRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInactiveSkillProfileMappingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInactiveSkillProfileMappingRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableRegressionForecasterModelTypesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableRegressionForecasterModelTypesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectInactiveSkillProfileMappingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectInactiveSkillProfileMappingRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHistoricalDataDeltasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHistoricalDataDeltasRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTopSkillProfilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTopSkillProfilesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSkillProfilesCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSkillProfilesCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildProfileForecastByIntervalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallDataByInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildProfileForecastByIntervalWithStatsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildProfileForecastByIntervalWithStatsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertProfileForecastReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertProfileForecastRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCallProfileTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCallProfileTemplateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCallProfileTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCallProfileTemplateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegressionTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRegressionTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRegressionTemplateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegressionTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegressionTemplateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegressionTemplatesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegressionTemplatesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildRegressionForecastByIntervalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildRegressionForecastByIntervalWithStatsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForecastStatisticsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildRegressionForecastByIntervalWithStatsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCallProfileTemplatesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCallProfileTemplatesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListForecastIntervalsForSkillProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRegressionForecastReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRegressionForecastRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertForecastDataDeltaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertForecastDataDeltaRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertForecastDataDeltasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertForecastDataDeltasRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteForecastIntervalsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteForecastIntervalsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHistoricalDataForAllSkillProfilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHistoricalDataForAllSkillProfilesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildDOWAndMOYProfilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildDOWAndMOYProfilesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateTrainingDataAveragesForSkillProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateTrainingDataAveragesForSkillProfileRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSkillProfileAveragesUsingHistoricalDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSkillProfileAveragesUsingHistoricalDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallCenterNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCallCenterNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCallCenterNodeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClientNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClientNodeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClientNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClientNodeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLocationNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLocationNodeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLocationNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLocationNodeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgramNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProgramNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProgramNodeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProgramNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProgramNodeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConstraintRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConstraintRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConstraintRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConstraintRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConstraintRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConstraintRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonSkillActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNonSkillActivityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNonSkillActivityRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNonSkillActivityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNonSkillActivityRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNonSkillActivityAssociationsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNonSkillActivityAssociationsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulingActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCandidateSchedulingActivitiesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCandidateSchedulingActivitiesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAgentGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAgentGroupRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAgentGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAgentGroupRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WFMAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWFMAgentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWFMAgentRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllWFMAgentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllWFMAgentsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCandidateWFMAgentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCandidateWFMAgentsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUngroupedWFMAgentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUngroupedWFMAgentsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWFMAgentsAssociatedWithAgentGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWFMAgentsAssociatedWithAgentGroupRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildAgentDiagnosticsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildAgentDiagnosticsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWFMAgentMembershipsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWFMAgentMembershipsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWFMAgentMembershipsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWFMAgentMembershipsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWFMAgentsMembershipsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWFMAgentsMembershipsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DOWPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShiftTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShiftTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShiftTemplateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShiftTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShiftTemplateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShiftTemplatesBySidsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShiftTemplatesBySidsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildShiftTemplateDiagnosticsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildShiftTemplateDiagnosticsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlacementRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlacementRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlacementRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlacementRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlacementRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlacementRuleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatetimePattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenTimesPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOpenTimesPatternReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOpenTimesPatternRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOpenTimesPatternReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOpenTimesPatternRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOpenTimesPatternReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOpenTimesPatternRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpenTimesBitmapsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpenTimesBitmapsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentAvailabilityPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAgentAvailabilityPatternReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAgentAvailabilityPatternRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAgentAvailabilityPatternReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAgentAvailabilityPatternRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAgentAvailabilityPatternReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAgentAvailabilityPatternRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityBitmapSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailabilityBitmapsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailabilityBitmapsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertNonSkillActivityAssociationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertNonSkillActivityAssociationRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillProficiency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSkillProficienciesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSkillProficienciesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSkillProficienciesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSkillProficienciesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSkillProficiencyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSkillProficiencyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleScenario); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyScenarioReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyScenarioRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScheduleScenarioWithNodesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScheduleScenarioWithNodesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScheduleScenarioReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScheduleScenarioRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diagnostics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteShiftInstancesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteShiftInstancesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildNodeDiagnosticsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildNodeDiagnosticsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildGlobalDiagnosticsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildGlobalDiagnosticsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DraftSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceLevelInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FTERequiredVsAchievedInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequiredCallsInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShiftInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShiftSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublishedScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublishedScheduleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublishedScheduleRequiredCallsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublishedScheduleRequiredCallsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDraftScheduleRequiredCallsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDraftScheduleRequiredCallsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDraftScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDraftScheduleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDraftScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDraftScheduleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildDraftScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildDraftScheduleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishDraftScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishDraftScheduleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDraftScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDraftScheduleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDraftSchedulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDraftSchedulesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDraftScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDraftScheduleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShiftInstanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShiftInstanceRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShiftInstanceV2Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShiftInstanceV2Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapShiftInstancesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapShiftInstancesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShiftInstanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShiftInstanceRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShiftSegmentsByShiftInstanceSidsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShiftSegmentsByShiftInstanceSidsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMetricParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPerformanceMetricsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPerformanceMetricsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulingTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSchedulingTargetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSchedulingTargetRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulingTargetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulingTargetRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSchedulingTargetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSchedulingTargetRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequiredCallsIntervalsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequiredCallsIntervalsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSkillProfileProficienciesReq_Proficiency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSkillProfileRes_Mapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteForecastIntervalsReq_IntervalSids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllWFMAgentsRes_AgentGroupsByAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatetimePattern_WeekMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatetimePattern_CalendarItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatetimePattern_WeekMap_WeekMapDOW); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertNonSkillActivityAssociationRes_EntityMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesRes_ClientNodeEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesRes_LocationNodeEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesRes_ProgramNodeEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesRes_AgentGroupEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesRes_ShiftTemplateEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesRes_WFMAgentEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesRes_PlacementRuleEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesRes_ConstraintRuleEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesRes_NonSkillActivityEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesRes_AgentAvailabilityPatternEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesRes_OpenTimesPatternEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesRes_SkillProficiencyEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1alpha1_wfm_wfm_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigEntitiesRes_ScheduleScenarioEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1alpha1_wfm_wfm_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*BuildProfileForecastByIntervalWithStatsRes_CallData)(nil),
		(*BuildProfileForecastByIntervalWithStatsRes_ForecastStats)(nil),
	}
	file_api_v1alpha1_wfm_wfm_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*BuildRegressionForecastByIntervalWithStatsRes_CallData)(nil),
		(*BuildRegressionForecastByIntervalWithStatsRes_ForecastStats)(nil),
	}
	file_api_v1alpha1_wfm_wfm_proto_msgTypes[72].OneofWrappers = []interface{}{
		(*DeleteForecastIntervalsReq_SkillProfileSid)(nil),
		(*DeleteForecastIntervalsReq_ForecastIntervalSids)(nil),
	}
	file_api_v1alpha1_wfm_wfm_proto_msgTypes[102].OneofWrappers = []interface{}{
		(*ConstraintRule_SchedulingActivity)(nil),
		(*ConstraintRule_SkillProficiency)(nil),
	}
	file_api_v1alpha1_wfm_wfm_proto_msgTypes[197].OneofWrappers = []interface{}{
		(*ListConfigEntitiesRes_CallCenterNode)(nil),
		(*ListConfigEntitiesRes_ClientNodes)(nil),
		(*ListConfigEntitiesRes_LocationNodes)(nil),
		(*ListConfigEntitiesRes_ProgramNodes)(nil),
		(*ListConfigEntitiesRes_AgentGroups)(nil),
		(*ListConfigEntitiesRes_ShiftTemplates)(nil),
		(*ListConfigEntitiesRes_WfmAgents)(nil),
		(*ListConfigEntitiesRes_PlacementRules)(nil),
		(*ListConfigEntitiesRes_ConstraintRules)(nil),
		(*ListConfigEntitiesRes_NonSkillActivities)(nil),
		(*ListConfigEntitiesRes_AgentAvailabilityPatterns)(nil),
		(*ListConfigEntitiesRes_OpenTimesPatterns)(nil),
		(*ListConfigEntitiesRes_SchedulingActivity)(nil),
		(*ListConfigEntitiesRes_SkillProficiencies)(nil),
		(*ListConfigEntitiesRes_ScheduleScenarios)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1alpha1_wfm_wfm_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   277,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1alpha1_wfm_wfm_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_wfm_wfm_proto_depIdxs,
		EnumInfos:         file_api_v1alpha1_wfm_wfm_proto_enumTypes,
		MessageInfos:      file_api_v1alpha1_wfm_wfm_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_wfm_wfm_proto = out.File
	file_api_v1alpha1_wfm_wfm_proto_rawDesc = nil
	file_api_v1alpha1_wfm_wfm_proto_goTypes = nil
	file_api_v1alpha1_wfm_wfm_proto_depIdxs = nil
}
