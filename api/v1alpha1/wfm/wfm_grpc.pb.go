// Copyright (c) 2020, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1alpha1/wfm/wfm.proto

package wfm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WFM_ListSkillProfiles_FullMethodName                             = "/api.v1alpha1.wfm.WFM/ListSkillProfiles"
	WFM_UpdateSkillProfile_FullMethodName                            = "/api.v1alpha1.wfm.WFM/UpdateSkillProfile"
	WFM_UpdateSkillProfileProficiencies_FullMethodName               = "/api.v1alpha1.wfm.WFM/UpdateSkillProfileProficiencies"
	WFM_GetSkillProfile_FullMethodName                               = "/api.v1alpha1.wfm.WFM/GetSkillProfile"
	WFM_ResyncSkillProfiles_FullMethodName                           = "/api.v1alpha1.wfm.WFM/ResyncSkillProfiles"
	WFM_GetLastSkillProfileResyncDate_FullMethodName                 = "/api.v1alpha1.wfm.WFM/GetLastSkillProfileResyncDate"
	WFM_UpsertForecastingParameters_FullMethodName                   = "/api.v1alpha1.wfm.WFM/UpsertForecastingParameters"
	WFM_GetForecastingParameters_FullMethodName                      = "/api.v1alpha1.wfm.WFM/GetForecastingParameters"
	WFM_ListHistoricalData_FullMethodName                            = "/api.v1alpha1.wfm.WFM/ListHistoricalData"
	WFM_UpsertHistoricalDataDelta_FullMethodName                     = "/api.v1alpha1.wfm.WFM/UpsertHistoricalDataDelta"
	WFM_UpsertHistoricalDataDeltas_FullMethodName                    = "/api.v1alpha1.wfm.WFM/UpsertHistoricalDataDeltas"
	WFM_ListSkills_FullMethodName                                    = "/api.v1alpha1.wfm.WFM/ListSkills"
	WFM_BuildCallProfileTemplateForSkillProfile_FullMethodName       = "/api.v1alpha1.wfm.WFM/BuildCallProfileTemplateForSkillProfile"
	WFM_BuildCallProfileTemplate_FullMethodName                      = "/api.v1alpha1.wfm.WFM/BuildCallProfileTemplate"
	WFM_CreateInactiveSkillProfileMapping_FullMethodName             = "/api.v1alpha1.wfm.WFM/CreateInactiveSkillProfileMapping"
	WFM_GetAvailableRegressionForecasterModelTypes_FullMethodName    = "/api.v1alpha1.wfm.WFM/GetAvailableRegressionForecasterModelTypes"
	WFM_DisconnectInactiveSkillProfileMapping_FullMethodName         = "/api.v1alpha1.wfm.WFM/DisconnectInactiveSkillProfileMapping"
	WFM_CreateSkillProfileGroup_FullMethodName                       = "/api.v1alpha1.wfm.WFM/CreateSkillProfileGroup"
	WFM_UpdateSkillProfileGroup_FullMethodName                       = "/api.v1alpha1.wfm.WFM/UpdateSkillProfileGroup"
	WFM_ListSkillProfileGroups_FullMethodName                        = "/api.v1alpha1.wfm.WFM/ListSkillProfileGroups"
	WFM_UpdateSkillProfileGroupAssociations_FullMethodName           = "/api.v1alpha1.wfm.WFM/UpdateSkillProfileGroupAssociations"
	WFM_DeleteHistoricalDataDeltas_FullMethodName                    = "/api.v1alpha1.wfm.WFM/DeleteHistoricalDataDeltas"
	WFM_ListTopSkillProfiles_FullMethodName                          = "/api.v1alpha1.wfm.WFM/ListTopSkillProfiles"
	WFM_GetSkillProfilesCount_FullMethodName                         = "/api.v1alpha1.wfm.WFM/GetSkillProfilesCount"
	WFM_BuildProfileForecastByInterval_FullMethodName                = "/api.v1alpha1.wfm.WFM/BuildProfileForecastByInterval"
	WFM_BuildProfileForecastByIntervalWithStats_FullMethodName       = "/api.v1alpha1.wfm.WFM/BuildProfileForecastByIntervalWithStats"
	WFM_UpsertProfileForecast_FullMethodName                         = "/api.v1alpha1.wfm.WFM/UpsertProfileForecast"
	WFM_CreateCallProfileTemplate_FullMethodName                     = "/api.v1alpha1.wfm.WFM/CreateCallProfileTemplate"
	WFM_DeleteCallProfileTemplate_FullMethodName                     = "/api.v1alpha1.wfm.WFM/DeleteCallProfileTemplate"
	WFM_CreateRegressionTemplate_FullMethodName                      = "/api.v1alpha1.wfm.WFM/CreateRegressionTemplate"
	WFM_DeleteRegressionTemplate_FullMethodName                      = "/api.v1alpha1.wfm.WFM/DeleteRegressionTemplate"
	WFM_ListRegressionTemplates_FullMethodName                       = "/api.v1alpha1.wfm.WFM/ListRegressionTemplates"
	WFM_ListForecastIntervalsForSkillProfile_FullMethodName          = "/api.v1alpha1.wfm.WFM/ListForecastIntervalsForSkillProfile"
	WFM_ListForecastIntervals_FullMethodName                         = "/api.v1alpha1.wfm.WFM/ListForecastIntervals"
	WFM_BuildRegressionForecastByInterval_FullMethodName             = "/api.v1alpha1.wfm.WFM/BuildRegressionForecastByInterval"
	WFM_BuildRegressionForecastByIntervalWithStats_FullMethodName    = "/api.v1alpha1.wfm.WFM/BuildRegressionForecastByIntervalWithStats"
	WFM_ListCallProfileTemplates_FullMethodName                      = "/api.v1alpha1.wfm.WFM/ListCallProfileTemplates"
	WFM_UpsertRegressionForecast_FullMethodName                      = "/api.v1alpha1.wfm.WFM/UpsertRegressionForecast"
	WFM_UpsertForecastDataDelta_FullMethodName                       = "/api.v1alpha1.wfm.WFM/UpsertForecastDataDelta"
	WFM_UpsertForecastDataDeltas_FullMethodName                      = "/api.v1alpha1.wfm.WFM/UpsertForecastDataDeltas"
	WFM_DeleteForecastIntervals_FullMethodName                       = "/api.v1alpha1.wfm.WFM/DeleteForecastIntervals"
	WFM_ListHistoricalDataForAllSkillProfiles_FullMethodName         = "/api.v1alpha1.wfm.WFM/ListHistoricalDataForAllSkillProfiles"
	WFM_BuildDOWAndMOYProfiles_FullMethodName                        = "/api.v1alpha1.wfm.WFM/BuildDOWAndMOYProfiles"
	WFM_CalculateTrainingDataAveragesForSkillProfile_FullMethodName  = "/api.v1alpha1.wfm.WFM/CalculateTrainingDataAveragesForSkillProfile"
	WFM_UpdateSkillProfileAveragesUsingHistoricalData_FullMethodName = "/api.v1alpha1.wfm.WFM/UpdateSkillProfileAveragesUsingHistoricalData"
	WFM_UpdateCallCenterNode_FullMethodName                          = "/api.v1alpha1.wfm.WFM/UpdateCallCenterNode"
	WFM_CreateClientNode_FullMethodName                              = "/api.v1alpha1.wfm.WFM/CreateClientNode"
	WFM_UpdateClientNode_FullMethodName                              = "/api.v1alpha1.wfm.WFM/UpdateClientNode"
	WFM_CreateLocationNode_FullMethodName                            = "/api.v1alpha1.wfm.WFM/CreateLocationNode"
	WFM_UpdateLocationNode_FullMethodName                            = "/api.v1alpha1.wfm.WFM/UpdateLocationNode"
	WFM_CreateProgramNode_FullMethodName                             = "/api.v1alpha1.wfm.WFM/CreateProgramNode"
	WFM_UpdateProgramNode_FullMethodName                             = "/api.v1alpha1.wfm.WFM/UpdateProgramNode"
	WFM_ListProgramNodesBySid_FullMethodName                         = "/api.v1alpha1.wfm.WFM/ListProgramNodesBySid"
	WFM_CreateConstraintRule_FullMethodName                          = "/api.v1alpha1.wfm.WFM/CreateConstraintRule"
	WFM_UpdateConstraintRule_FullMethodName                          = "/api.v1alpha1.wfm.WFM/UpdateConstraintRule"
	WFM_DeleteConstraintRule_FullMethodName                          = "/api.v1alpha1.wfm.WFM/DeleteConstraintRule"
	WFM_CreateNonSkillActivity_FullMethodName                        = "/api.v1alpha1.wfm.WFM/CreateNonSkillActivity"
	WFM_UpdateNonSkillActivity_FullMethodName                        = "/api.v1alpha1.wfm.WFM/UpdateNonSkillActivity"
	WFM_ListNonSkillActivities_FullMethodName                        = "/api.v1alpha1.wfm.WFM/ListNonSkillActivities"
	WFM_ListNonSkillActivityAssociations_FullMethodName              = "/api.v1alpha1.wfm.WFM/ListNonSkillActivityAssociations"
	WFM_ListCandidateSchedulingActivities_FullMethodName             = "/api.v1alpha1.wfm.WFM/ListCandidateSchedulingActivities"
	WFM_CreateAgentGroup_FullMethodName                              = "/api.v1alpha1.wfm.WFM/CreateAgentGroup"
	WFM_UpdateAgentGroup_FullMethodName                              = "/api.v1alpha1.wfm.WFM/UpdateAgentGroup"
	WFM_UpdateWFMAgent_FullMethodName                                = "/api.v1alpha1.wfm.WFM/UpdateWFMAgent"
	WFM_ListAllWFMAgents_FullMethodName                              = "/api.v1alpha1.wfm.WFM/ListAllWFMAgents"
	WFM_ListCandidateWFMAgents_FullMethodName                        = "/api.v1alpha1.wfm.WFM/ListCandidateWFMAgents"
	WFM_ListUngroupedWFMAgents_FullMethodName                        = "/api.v1alpha1.wfm.WFM/ListUngroupedWFMAgents"
	WFM_ListWFMAgentSids_FullMethodName                              = "/api.v1alpha1.wfm.WFM/ListWFMAgentSids"
	WFM_ListWFMAgentsAssociatedWithAgentGroup_FullMethodName         = "/api.v1alpha1.wfm.WFM/ListWFMAgentsAssociatedWithAgentGroup"
	WFM_CreateWFMAgentMemberships_FullMethodName                     = "/api.v1alpha1.wfm.WFM/CreateWFMAgentMemberships"
	WFM_DeleteWFMAgentMemberships_FullMethodName                     = "/api.v1alpha1.wfm.WFM/DeleteWFMAgentMemberships"
	WFM_DeleteWFMAgentsMemberships_FullMethodName                    = "/api.v1alpha1.wfm.WFM/DeleteWFMAgentsMemberships"
	WFM_BuildAgentDiagnostics_FullMethodName                         = "/api.v1alpha1.wfm.WFM/BuildAgentDiagnostics"
	WFM_CreateShiftTemplate_FullMethodName                           = "/api.v1alpha1.wfm.WFM/CreateShiftTemplate"
	WFM_UpdateShiftTemplate_FullMethodName                           = "/api.v1alpha1.wfm.WFM/UpdateShiftTemplate"
	WFM_ListShiftTemplatesBySids_FullMethodName                      = "/api.v1alpha1.wfm.WFM/ListShiftTemplatesBySids"
	WFM_BuildShiftTemplateDiagnostics_FullMethodName                 = "/api.v1alpha1.wfm.WFM/BuildShiftTemplateDiagnostics"
	WFM_CreatePlacementRule_FullMethodName                           = "/api.v1alpha1.wfm.WFM/CreatePlacementRule"
	WFM_UpdatePlacementRule_FullMethodName                           = "/api.v1alpha1.wfm.WFM/UpdatePlacementRule"
	WFM_DeletePlacementRule_FullMethodName                           = "/api.v1alpha1.wfm.WFM/DeletePlacementRule"
	WFM_CreateOpenTimesPattern_FullMethodName                        = "/api.v1alpha1.wfm.WFM/CreateOpenTimesPattern"
	WFM_UpdateOpenTimesPattern_FullMethodName                        = "/api.v1alpha1.wfm.WFM/UpdateOpenTimesPattern"
	WFM_DeleteOpenTimesPattern_FullMethodName                        = "/api.v1alpha1.wfm.WFM/DeleteOpenTimesPattern"
	WFM_GetOpenTimesBitmaps_FullMethodName                           = "/api.v1alpha1.wfm.WFM/GetOpenTimesBitmaps"
	WFM_CreateAgentAvailabilityPattern_FullMethodName                = "/api.v1alpha1.wfm.WFM/CreateAgentAvailabilityPattern"
	WFM_UpdateAgentAvailabilityPattern_FullMethodName                = "/api.v1alpha1.wfm.WFM/UpdateAgentAvailabilityPattern"
	WFM_DeleteAgentAvailabilityPattern_FullMethodName                = "/api.v1alpha1.wfm.WFM/DeleteAgentAvailabilityPattern"
	WFM_GetAvailabilityBitmaps_FullMethodName                        = "/api.v1alpha1.wfm.WFM/GetAvailabilityBitmaps"
	WFM_UpsertNonSkillActivityAssociation_FullMethodName             = "/api.v1alpha1.wfm.WFM/UpsertNonSkillActivityAssociation"
	WFM_CreateSkillProficiencies_FullMethodName                      = "/api.v1alpha1.wfm.WFM/CreateSkillProficiencies"
	WFM_UpdateSkillProficiencies_FullMethodName                      = "/api.v1alpha1.wfm.WFM/UpdateSkillProficiencies"
	WFM_DeleteSkillProficiency_FullMethodName                        = "/api.v1alpha1.wfm.WFM/DeleteSkillProficiency"
	WFM_CopyScenario_FullMethodName                                  = "/api.v1alpha1.wfm.WFM/CopyScenario"
	WFM_CreateScheduleScenarioWithNodes_FullMethodName               = "/api.v1alpha1.wfm.WFM/CreateScheduleScenarioWithNodes"
	WFM_UpdateScheduleScenario_FullMethodName                        = "/api.v1alpha1.wfm.WFM/UpdateScheduleScenario"
	WFM_ListConfigEntities_FullMethodName                            = "/api.v1alpha1.wfm.WFM/ListConfigEntities"
	WFM_DeleteShiftInstances_FullMethodName                          = "/api.v1alpha1.wfm.WFM/DeleteShiftInstances"
	WFM_BuildNodeDiagnostics_FullMethodName                          = "/api.v1alpha1.wfm.WFM/BuildNodeDiagnostics"
	WFM_BuildGlobalDiagnostics_FullMethodName                        = "/api.v1alpha1.wfm.WFM/BuildGlobalDiagnostics"
	WFM_GetPublishedSchedule_FullMethodName                          = "/api.v1alpha1.wfm.WFM/GetPublishedSchedule"
	WFM_GetPublishedScheduleRequiredCalls_FullMethodName             = "/api.v1alpha1.wfm.WFM/GetPublishedScheduleRequiredCalls"
	WFM_GetDraftScheduleRequiredCalls_FullMethodName                 = "/api.v1alpha1.wfm.WFM/GetDraftScheduleRequiredCalls"
	WFM_CreateDraftSchedule_FullMethodName                           = "/api.v1alpha1.wfm.WFM/CreateDraftSchedule"
	WFM_UpdateDraftSchedule_FullMethodName                           = "/api.v1alpha1.wfm.WFM/UpdateDraftSchedule"
	WFM_BuildDraftSchedule_FullMethodName                            = "/api.v1alpha1.wfm.WFM/BuildDraftSchedule"
	WFM_PublishDraftSchedule_FullMethodName                          = "/api.v1alpha1.wfm.WFM/PublishDraftSchedule"
	WFM_ResetDraftSchedule_FullMethodName                            = "/api.v1alpha1.wfm.WFM/ResetDraftSchedule"
	WFM_GetDraftSchedule_FullMethodName                              = "/api.v1alpha1.wfm.WFM/GetDraftSchedule"
	WFM_ListDraftSchedules_FullMethodName                            = "/api.v1alpha1.wfm.WFM/ListDraftSchedules"
	WFM_ClearSchedule_FullMethodName                                 = "/api.v1alpha1.wfm.WFM/ClearSchedule"
	WFM_DeleteDraftSchedule_FullMethodName                           = "/api.v1alpha1.wfm.WFM/DeleteDraftSchedule"
	WFM_ListShiftInstancesBySid_FullMethodName                       = "/api.v1alpha1.wfm.WFM/ListShiftInstancesBySid"
	WFM_CopyScheduleToSchedule_FullMethodName                        = "/api.v1alpha1.wfm.WFM/CopyScheduleToSchedule"
	WFM_CreateShiftInstance_FullMethodName                           = "/api.v1alpha1.wfm.WFM/CreateShiftInstance"
	WFM_CreateShiftInstanceV2_FullMethodName                         = "/api.v1alpha1.wfm.WFM/CreateShiftInstanceV2"
	WFM_SwapShiftInstances_FullMethodName                            = "/api.v1alpha1.wfm.WFM/SwapShiftInstances"
	WFM_UpdateShiftInstance_FullMethodName                           = "/api.v1alpha1.wfm.WFM/UpdateShiftInstance"
	WFM_UpdateShiftInstanceV2_FullMethodName                         = "/api.v1alpha1.wfm.WFM/UpdateShiftInstanceV2"
	WFM_CopyShiftInstancesToSchedule_FullMethodName                  = "/api.v1alpha1.wfm.WFM/CopyShiftInstancesToSchedule"
	WFM_ListShiftInstanceSidsForAgent_FullMethodName                 = "/api.v1alpha1.wfm.WFM/ListShiftInstanceSidsForAgent"
	WFM_ListShiftSegmentsByShiftInstanceSids_FullMethodName          = "/api.v1alpha1.wfm.WFM/ListShiftSegmentsByShiftInstanceSids"
	WFM_SetSchedulingTarget_FullMethodName                           = "/api.v1alpha1.wfm.WFM/SetSchedulingTarget"
	WFM_GetSchedulingTarget_FullMethodName                           = "/api.v1alpha1.wfm.WFM/GetSchedulingTarget"
	WFM_DeleteSchedulingTarget_FullMethodName                        = "/api.v1alpha1.wfm.WFM/DeleteSchedulingTarget"
	WFM_GetDefaultSchedulingTarget_FullMethodName                    = "/api.v1alpha1.wfm.WFM/GetDefaultSchedulingTarget"
	WFM_SetDefaultSchedulingTarget_FullMethodName                    = "/api.v1alpha1.wfm.WFM/SetDefaultSchedulingTarget"
	WFM_GetPerformanceMetrics_FullMethodName                         = "/api.v1alpha1.wfm.WFM/GetPerformanceMetrics"
	WFM_ListRequiredCallsIntervals_FullMethodName                    = "/api.v1alpha1.wfm.WFM/ListRequiredCallsIntervals"
	WFM_CreateTourPattern_FullMethodName                             = "/api.v1alpha1.wfm.WFM/CreateTourPattern"
	WFM_GetTourPatternDiagnostics_FullMethodName                     = "/api.v1alpha1.wfm.WFM/GetTourPatternDiagnostics"
	WFM_UpsertTourPatternWithMembers_FullMethodName                  = "/api.v1alpha1.wfm.WFM/UpsertTourPatternWithMembers"
	WFM_GetTourPattern_FullMethodName                                = "/api.v1alpha1.wfm.WFM/GetTourPattern"
	WFM_DeleteTourPattern_FullMethodName                             = "/api.v1alpha1.wfm.WFM/DeleteTourPattern"
	WFM_CreateTourWeekPattern_FullMethodName                         = "/api.v1alpha1.wfm.WFM/CreateTourWeekPattern"
	WFM_ListTourWeekPatterns_FullMethodName                          = "/api.v1alpha1.wfm.WFM/ListTourWeekPatterns"
	WFM_DeleteTourWeekPatterns_FullMethodName                        = "/api.v1alpha1.wfm.WFM/DeleteTourWeekPatterns"
	WFM_CreateTourShiftInstanceConfig_FullMethodName                 = "/api.v1alpha1.wfm.WFM/CreateTourShiftInstanceConfig"
	WFM_UpdateTourShiftInstanceConfig_FullMethodName                 = "/api.v1alpha1.wfm.WFM/UpdateTourShiftInstanceConfig"
	WFM_ListTourShiftInstanceConfigs_FullMethodName                  = "/api.v1alpha1.wfm.WFM/ListTourShiftInstanceConfigs"
	WFM_DeleteTourShiftInstanceConfigs_FullMethodName                = "/api.v1alpha1.wfm.WFM/DeleteTourShiftInstanceConfigs"
	WFM_CreateTourShiftSegmentConfig_FullMethodName                  = "/api.v1alpha1.wfm.WFM/CreateTourShiftSegmentConfig"
	WFM_UpdateTourShiftSegmentConfig_FullMethodName                  = "/api.v1alpha1.wfm.WFM/UpdateTourShiftSegmentConfig"
	WFM_ListTourShiftSegmentConfigs_FullMethodName                   = "/api.v1alpha1.wfm.WFM/ListTourShiftSegmentConfigs"
	WFM_DeleteTourShiftSegmentConfigs_FullMethodName                 = "/api.v1alpha1.wfm.WFM/DeleteTourShiftSegmentConfigs"
	WFM_CreateTourAgentCollection_FullMethodName                     = "/api.v1alpha1.wfm.WFM/CreateTourAgentCollection"
	WFM_UpdateTourAgentCollection_FullMethodName                     = "/api.v1alpha1.wfm.WFM/UpdateTourAgentCollection"
	WFM_ListTourAgentCollections_FullMethodName                      = "/api.v1alpha1.wfm.WFM/ListTourAgentCollections"
	WFM_DeleteTourAgentCollections_FullMethodName                    = "/api.v1alpha1.wfm.WFM/DeleteTourAgentCollections"
	WFM_CreateTourAgentCollectionWFMAgents_FullMethodName            = "/api.v1alpha1.wfm.WFM/CreateTourAgentCollectionWFMAgents"
	WFM_ListTourAgentCollectionWFMAgents_FullMethodName              = "/api.v1alpha1.wfm.WFM/ListTourAgentCollectionWFMAgents"
	WFM_DeleteTourAgentCollectionWFMAgents_FullMethodName            = "/api.v1alpha1.wfm.WFM/DeleteTourAgentCollectionWFMAgents"
	WFM_GenerateTourWeekPatterns_FullMethodName                      = "/api.v1alpha1.wfm.WFM/GenerateTourWeekPatterns"
)

// WFMClient is the client API for WFM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WFMClient interface {
	// Retrieves all the skill profiles of the org sending the request.
	// Also it can return the skills of each of the returned profiles.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	ListSkillProfiles(ctx context.Context, in *ListSkillProfilesReq, opts ...grpc.CallOption) (*ListSkillProfilesRes, error)
	// Updates the @name, and averages of a skill profile that has the given @skill_profile_sid.
	// It also updates it to no longer be unnamed.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid, @name or averages in the request are invalid.
	//   - grpc.Internal: error occurs when updating the skill profile.
	//   - grpc.NotFound: entry to be updated doesn't exist.
	UpdateSkillProfile(ctx context.Context, in *UpdateSkillProfileReq, opts ...grpc.CallOption) (*UpdateSkillProfileRes, error)
	// Updates the @proficiencies for the given skill profile's skills that belong the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @proficiencies in the request are invalid.
	//   - grpc.Internal: error occurs when updating the skill profiles proficiencies.
	UpdateSkillProfileProficiencies(ctx context.Context, in *UpdateSkillProfileProficienciesReq, opts ...grpc.CallOption) (*UpdateSkillProfileProficienciesRes, error)
	// Get a skill profile that has the given @skill_profile_sid.
	// It also gets all the skills and the mappings associated with that profile.
	// If the @inactive_as_of_date of the skill profile is nil then the mapping is of inactive profiles to this one,
	// otherwise the mapping is of this profile to an active one.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.Internal: error occurs when getting the skill profile.
	//   - grpc.NotFound: skill profile doesn't exist.
	GetSkillProfile(ctx context.Context, in *GetSkillProfileReq, opts ...grpc.CallOption) (*GetSkillProfileRes, error)
	// Resyncs the skill profiles of the org sending the request.
	// It will add skills and skill profiles based on that client's historical call data.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when creating the new skills and skill profiles.
	ResyncSkillProfiles(ctx context.Context, in *ResyncSkillProfilesReq, opts ...grpc.CallOption) (*ResyncSkillProfilesRes, error)
	// Gets the last date of a skill profile resync for the org seding the request.
	// If the org has never done a skill profile resync @resync_date will not be set.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the resync date.
	GetLastSkillProfileResyncDate(ctx context.Context, in *GetLastSkillProfileResyncDateReq, opts ...grpc.CallOption) (*GetLastSkillProfileResyncDateRes, error)
	// Tries to create an entry for the given forecasting parameters for the org sending the request.
	// If the org already has an entry for them, it will update the already existing entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @forecasting_parameters in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the parameters.
	UpsertForecastingParameters(ctx context.Context, in *UpsertForecastingParametersReq, opts ...grpc.CallOption) (*UpsertForecastingParametersRes, error)
	// Gets the forecasting parameters for the org sending the request.
	// If the org hasn't created any parameters, it will return the default parameters.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the parameters.
	GetForecastingParameters(ctx context.Context, in *GetForecastingParametersReq, opts ...grpc.CallOption) (*GetForecastingParametersRes, error)
	// Gets the historical data for the org sending the request and the given @skill_profile_category.
	// It will look through the client's call history and generate the historical data by using their configured forecasting parameters (historical data period and interval width).
	// The duration of each interval will be the interval width of the org's forecasting parameters.
	// It also applies any deltas that the client has stored for the given @skill_profile_category, if the category is a group it will use the deltas of the skill profiles part of that group.
	// If the client has no historical data, only the deltas will be applied to the returned intervals, all other intervals will have nil averages.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_category in the request is invalid.
	//   - grpc.NotFound: the @skill_profile_category given is not found for the org.
	//   - grpc.Internal: error occurs when getting the historical data.
	ListHistoricalData(ctx context.Context, in *ListHistoricalDataReq, opts ...grpc.CallOption) (*ListHistoricalDataRes, error)
	// Tries to create an entry for the given @delta for the org sending the request.
	// If the org already has an entry for it, it will update the already exisiting entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @delta in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the historical data interval.
	UpsertHistoricalDataDelta(ctx context.Context, in *UpsertHistoricalDataDeltaReq, opts ...grpc.CallOption) (*UpsertHistoricalDataDeltaRes, error)
	// Tries to create entries for the given @deltas.
	// If the given org already has an entry for any of the deltas, it will replace the already existing entries.
	// This is made into a unary due to the UI's lack of support for client streams.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @deltas in the request are invalid.
	//   - grpc.Internal: error occurs when upserting the historical data deltas.
	UpsertHistoricalDataDeltas(ctx context.Context, in *UpsertHistoricalDataDeltasReq, opts ...grpc.CallOption) (*UpsertHistoricalDataDeltasRes, error)
	// Gets all the skills that the org sending the request has.
	// Skills returned will be sorted by @skill_sid in ascending order.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the skills.
	ListSkills(ctx context.Context, in *ListSkillsReq, opts ...grpc.CallOption) (*ListSkillsRes, error)
	// Deprecated: Do not use.
	// Builds and returns a call profile template for the org sending the request and the given @skill_profile_sid.
	// The template will be generated using the training data for said skill profile using the @training_data_range and @averages_calculation_range_in_months
	// from the client's saved forecasting parameters.
	// The @total_calls in the returned template be summed from the (@training_data_start_datetime - @averages_calculation_range_in_months) to @training_data_end_datetime,
	// or from @training_data_start_datetime to @training_data_end_datetime if @averages_calculation_range_in_months is 0.
	// The fixed averages fields in the call profile template, will be set to the averages that the skill profile has.
	// DEPRECATED as of Sep/7/2023 - Use BuildCallProfileTemplate instead.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.NotFound: the @skill_profile_sid given is not found for the org.
	//   - grpc.Internal: error occurs when building the call profile template.
	BuildCallProfileTemplateForSkillProfile(ctx context.Context, in *BuildCallProfileTemplateForSkillProfileReq, opts ...grpc.CallOption) (*BuildCallProfileTemplateForSkillProfileRes, error)
	// Builds and returns a call profile template for the org sending the request and the given @skill_profile_category.
	// The template will be generated using the training data for said skill profile category using the @training_data_range and @averages_calculation_range_in_months
	// from the client's saved forecasting parameters.
	// The @total_calls in the returned template be summed from the (@training_data_start_datetime - @averages_calculation_range_in_months) to @training_data_end_datetime,
	// or from @training_data_start_datetime to @training_data_end_datetime if @averages_calculation_range_in_months is 0.
	// The fixed averages fields in the call profile template, will be set to the averages that the skill profile category has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_category in the request is invalid.
	//   - grpc.NotFound: the @skill_profile_category given is not found for the org.
	//   - grpc.Internal: error occurs when building the call profile template.
	BuildCallProfileTemplate(ctx context.Context, in *BuildCallProfileTemplateReq, opts ...grpc.CallOption) (*BuildCallProfileTemplateRes, error)
	// Deprecated: Do not use.
	// Creates a mapping entry for the @inactive_skill_profile_sid to the @active_skill_profile_sid for the org sending the request.
	// DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @inactive_skill_profile_sid, or @active_skill_profile_sid in the request are invalid.
	//     the @inactive_skill_profile_sid given is of an active skill profile.
	//     the @active_skill_profile_sid given is of an inactive skill profile.
	//   - grpc.Internal: error occurs when creating the inactive skill profile mapping.
	CreateInactiveSkillProfileMapping(ctx context.Context, in *CreateInactiveSkillProfileMappingReq, opts ...grpc.CallOption) (*CreateInactiveSkillProfileMappingRes, error)
	// Gets a list of enums that represent all of the forecaster types that are currently available for use
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Internal: error occurs when contacting the forecaster to get the available forecaster types.
	GetAvailableRegressionForecasterModelTypes(ctx context.Context, in *GetAvailableRegressionForecasterModelTypesReq, opts ...grpc.CallOption) (*GetAvailableRegressionForecasterModelTypesRes, error)
	// Deprecated: Do not use.
	// Changes the current mapping for the given @inactive_skill_profile_sid to be disconnected.
	// DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @inactive_skill_profile_sid in the request is invalid.
	//   - grpc.NotFound: the skill profile is not found for the org.
	//   - grpc.Internal: the current mapping for the given @inactive_skill_profile_sid is already disconnected,
	//     the given @inactive_skill_profile_sid is of an active skill profile.
	DisconnectInactiveSkillProfileMapping(ctx context.Context, in *DisconnectInactiveSkillProfileMappingReq, opts ...grpc.CallOption) (*DisconnectInactiveSkillProfileMappingRes, error)
	// Creates the given @skill_profile_group.
	// @skill_profile_group_sids will be ignored since associations cannot be created by this method.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_group in the request is invalid.
	//   - grpc.Internal: error occurs creating the skill profile group.
	CreateSkillProfileGroup(ctx context.Context, in *CreateSkillProfileGroupReq, opts ...grpc.CallOption) (*CreateSkillProfileGroupRes, error)
	// Updates the given @skill_profile_group that has the @skill_profile_group_sid for the org sending the request.
	// @skill_profile_group_sids will be ignored since associations cannot be updated by this method.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_group in the request is invalid.
	//   - grpc.NotFound: the skill profile group to update doesn't exist.
	//   - grpc.Internal: error occurs updating the skill profile group.
	UpdateSkillProfileGroup(ctx context.Context, in *UpdateSkillProfileGroupReq, opts ...grpc.CallOption) (*UpdateSkillProfileGroupRes, error)
	// Gets the skill profile groups that have the @skill_profile_group_sids for the org sending the request.
	// if @include_inactive is true then inactive groups will also be included, otherwise only active groups will be returned.
	// If @skill_profile_group_sids is empty it will get all the skill profile groups for the org.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_group_sids in the request is invalid.
	//   - grpc.Internal: error occurs getting the skill profile groups.
	ListSkillProfileGroups(ctx context.Context, in *ListSkillProfileGroupsReq, opts ...grpc.CallOption) (*ListSkillProfileGroupsRes, error)
	// Updates associations of the given @skill_profile_group_sid for the org sending the request.
	// It will create the associations with the @skill_profile_sids_to_associate, and remove the associations with the @skill_profile_sids_to_disassociate.
	// Only one of the skill_profile_sids fields needs to be set, but both can be set on the same request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the values in the request are invalid.
	//   - grpc.Internal: error occurs updating the skill profile group associations.
	UpdateSkillProfileGroupAssociations(ctx context.Context, in *UpdateSkillProfileGroupAssociationsReq, opts ...grpc.CallOption) (*UpdateSkillProfileGroupAssociationsRes, error)
	// Deletes deltas whose dates match the given @start_datetimes for the given @skill_profile_sid.
	// If no @start_datetimes are given, it will delete all the deltas that the given @skill_profile_sid has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid, or @start_datetimes in the request are invalid.
	//   - grpc.NotFound: no matching deltas are found for deletion.
	//   - grpc.Internal: error occurs during the deletion of the historical data interval.
	DeleteHistoricalDataDeltas(ctx context.Context, in *DeleteHistoricalDataDeltasReq, opts ...grpc.CallOption) (*DeleteHistoricalDataDeltasRes, error)
	// Gets the top N skill profiles with the highest calls_count for org sending the request where N is @max_number_of_profiles.
	// It will also return the number of skills found for that profile.
	// Individual skills that each profile has will not be returned.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @max_number_of_profiles in the request is invalid.
	//   - grpc.Internal: error occurs when getting the skill profiles.
	ListTopSkillProfiles(ctx context.Context, in *ListTopSkillProfilesReq, opts ...grpc.CallOption) (*ListTopSkillProfilesRes, error)
	// Gets the total number of skill profiles associated with the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the skill profiles count.
	GetSkillProfilesCount(ctx context.Context, in *GetSkillProfilesCountReq, opts ...grpc.CallOption) (*GetSkillProfilesCountRes, error)
	// Builds a profile forecast using the provided @call_profile_template.
	// The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
	// (@training_data_range_end_datetime - @forecast_test_range_in_weeks) to @forecast_range_end_datetime.
	// The @total_calls in the @call_profile_template will be scaled using the same ranges as BuildCallProfileTemplate.
	// The @fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_category or @call_profile_template in the request is invalid.
	//   - grpc.Internal: error occurs during the building of the profile forecast.
	BuildProfileForecastByInterval(ctx context.Context, in *BuildProfileForecastByIntervalReq, opts ...grpc.CallOption) (WFM_BuildProfileForecastByIntervalClient, error)
	// Builds a profile forecast using the provided @call_profile_template.
	// The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
	// (@training_data_range_end_datetime - @forecast_test_range_in_weeks) to @forecast_range_end_datetime.
	// The @total_calls in the @call_profile_template will be scaled using the same ranges as BuildCallProfileTemplate.
	// The @fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
	// It also returns the statistics of the produced forecast by using the test data of the given @skill_profile_category.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_category or @call_profile_template in the request is invalid.
	//   - grpc.Internal: error occurs during the building of the profile forecast.
	BuildProfileForecastByIntervalWithStats(ctx context.Context, in *BuildProfileForecastByIntervalWithStatsReq, opts ...grpc.CallOption) (WFM_BuildProfileForecastByIntervalWithStatsClient, error)
	// Builds a profile forecast for the given @skill_profile_sid and org sending the request using the given @call_profile_template.
	// The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
	// @forecast_range_start_datetime to @forecast_range_end_datetime.
	// The @total_calls in the @call_profile_template will be scaled using the same ranges as BuildCallProfileTemplateForSkillProfile.
	// The intervals produced will be saved in the database.
	// The @fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid or @call_profile_template in the request are invalid.
	//   - grpc.NotFound: the @skill_profile_sid doesn't exist.
	//   - grpc.Internal: error occurs when upserting the profile forecast.
	UpsertProfileForecast(ctx context.Context, in *UpsertProfileForecastReq, opts ...grpc.CallOption) (*UpsertProfileForecastRes, error)
	// Creates the given @call_profile_template for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @call_profile_template in the request is invalid.
	//   - grpc.Internal: error occurs during the creation of the call profile.
	CreateCallProfileTemplate(ctx context.Context, in *CreateCallProfileTemplateReq, opts ...grpc.CallOption) (*CreateCallProfileTemplateRes, error)
	// Deletes a call profile template for the requesting org that has the given @call_profile_template_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @call_profile_template_sid in the request is invalid.
	//   - grpc.Internal: error occurs during the deletion of the call profile.
	DeleteCallProfileTemplate(ctx context.Context, in *DeleteCallProfileTemplateReq, opts ...grpc.CallOption) (*DeleteCallProfileTemplateRes, error)
	// Creates an entry for the @regression_template for the requesting org.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs when creating the regression template.
	CreateRegressionTemplate(ctx context.Context, in *CreateRegressionTemplateReq, opts ...grpc.CallOption) (*CreateRegressionTemplateRes, error)
	// Deletes a regression template for the requesting org that has the given @regression_template_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @regression_template_sid in the request is invalid.
	//   - grpc.Internal: error occurs during the deletion of the regression template.
	DeleteRegressionTemplate(ctx context.Context, in *DeleteRegressionTemplateReq, opts ...grpc.CallOption) (*DeleteRegressionTemplateRes, error)
	// Gets all the regression templates that the org sending the request has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the regression templates.
	ListRegressionTemplates(ctx context.Context, in *ListRegressionTemplatesReq, opts ...grpc.CallOption) (*ListRegressionTemplatesRes, error)
	// Deprecated: Do not use.
	// Gets the forecast data intervals for the given @skill_profile_sid.
	// DEPRECATED as of Sep/13/2023 - Use ListForecastIntervals instead.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.Internal: error occurs when getting the forecast data intervals.
	ListForecastIntervalsForSkillProfile(ctx context.Context, in *ListForecastIntervalsForSkillProfileReq, opts ...grpc.CallOption) (WFM_ListForecastIntervalsForSkillProfileClient, error)
	// Gets the forecast data intervals for the given @skill_profile_category.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_category in the request is invalid.
	//   - grpc.Internal: error occurs when getting the forecast data intervals.
	ListForecastIntervals(ctx context.Context, in *ListForecastIntervalsReq, opts ...grpc.CallOption) (WFM_ListForecastIntervalsClient, error)
	// Generates a regression forecast using the provided @regression_template.
	// It will generate forecast intervals for the skill profiles sids in @skill_profile_sids_to_forecast.
	// It will use the client's saved forecasting test range as the start datetime and the forecast range as the end datetime of the forecasted data.
	// It will use the client's saved interval width to divide the resulting forecast intervals.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: no @skill_profile_sids_to_forecast are given or the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs during the building of the regression forecast.
	BuildRegressionForecastByInterval(ctx context.Context, in *BuildRegressionForecastByIntervalReq, opts ...grpc.CallOption) (WFM_BuildRegressionForecastByIntervalClient, error)
	// Generates a regression forecast and calculates forecast statistics using the provided @regression_template.
	// It will generate forecast intervals for the skill profiles sids in @skill_profile_sids_to_forecast.
	// It will use the client's saved forecasting test range as the start datetime and the forecast range as the end datetime of the forecasted data.
	// It will use the client's saved interval width to divide the resulting forecast intervals.
	// The first message received will be the forecast statistics while all subsequent ones will be the forecast intervals.
	//
	// Errors:
	//   - grpc.Invalid: no @skill_profile_sids_to_forecast are given or the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs either during the when building the forecast or calculating the stats.
	BuildRegressionForecastByIntervalWithStats(ctx context.Context, in *BuildRegressionForecastByIntervalWithStatsReq, opts ...grpc.CallOption) (WFM_BuildRegressionForecastByIntervalWithStatsClient, error)
	// Gets the call profile templates that the org sending the request has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the templates.
	ListCallProfileTemplates(ctx context.Context, in *ListCallProfileTemplatesReq, opts ...grpc.CallOption) (*ListCallProfileTemplatesRes, error)
	// Builds a regression forecast for the org using the given @regression_template and saves the resulting intervals in the db.
	// It will generate forecast intervals for the skill profiles sids in @save_forecasts_for_skill_profile_sids,
	// if the list is empty or has no valid skill profile sids, it will generate and save forecasts for all active skill profiles.
	// If any intervals produced already exist in the db, they will be replaced with the ones produced.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the regression forecast.
	UpsertRegressionForecast(ctx context.Context, in *UpsertRegressionForecastReq, opts ...grpc.CallOption) (*UpsertRegressionForecastRes, error)
	// Tries to create an entry for the given @delta for the org sending the request.
	// If the org already has an entry for it, it will update the already exisiting entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @delta in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the forecast data delta.
	UpsertForecastDataDelta(ctx context.Context, in *UpsertForecastDataDeltaReq, opts ...grpc.CallOption) (*UpsertForecastDataDeltaRes, error)
	// Tries to create entries for the given @deltas.
	// If the org already has entries for any of them, it will update the already existing entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @deltas in the request are invalid.
	//   - grpc.Internal: error occurs when upserting the forecast data deltas.
	UpsertForecastDataDeltas(ctx context.Context, in *UpsertForecastDataDeltasReq, opts ...grpc.CallOption) (*UpsertForecastDataDeltasRes, error)
	// Deletes forecast data intervals/deltas based on the parameters provided.
	// If @delete_param is type skill_profile_category, then the intervals/deltas to be deleted will be
	// associated with that id. If @delete_param is type interval_sids, then the intervals/deltas to be
	// deleted will be contained in the list @interval_sids. The @delete_type field determines which
	// table(s) in the database the intervals/deltas will be deleted from.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one of the @delete_params is invalid
	//   - grpc.NotFound: no matching intervals/deltas are found for deletion.
	//   - grpc.Internal: error occurs during the deletion of the forecast data intervals/deltas.
	DeleteForecastIntervals(ctx context.Context, in *DeleteForecastIntervalsReq, opts ...grpc.CallOption) (*DeleteForecastIntervalsRes, error)
	// Retrieves the history for all the skill profiles of the requesting org.
	// Each value in every interval that has the same @start_datetime of each skill profile will be summed then averaged and made into a single one.
	// When calculating the averages, each interval's values will be weighted by the number of @total_calls it has.
	// History will be sorted by @start_datetime in ascending order, and the range is determined by the client's historical range.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when retriving the history.
	ListHistoricalDataForAllSkillProfiles(ctx context.Context, in *ListHistoricalDataForAllSkillProfilesReq, opts ...grpc.CallOption) (*ListHistoricalDataForAllSkillProfilesRes, error)
	// Converts the given @profile_tod and @profile_woms to a ProfileDOW and ProfileMOY.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @profile_tod or @profile_woms in the request are invalid.
	//   - grpc.Internal: error occurs when building the ProfileDOW or ProfileMOY.
	BuildDOWAndMOYProfiles(ctx context.Context, in *BuildDOWAndMOYProfilesReq, opts ...grpc.CallOption) (*BuildDOWAndMOYProfilesRes, error)
	// Calculates and returns the averages in the training data for the given @skill_profile_sid.
	// Averages to be returned will be weighted by the number of calls that each training data interval has.
	// The start time that the training data will be averaged can be modified based on the forecasting parameter @averages_calculation_range_in_months,
	// which will subtract that many months from the training data range end datetime and set it as the start time.
	// If @averages_calculation_range_in_months is 0, it will use the training data range start datetime.
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.NotFound: the @skill_profile_sid given is not found.
	//   - grpc.Internal: error occurs when calculating the averages from the training data.
	CalculateTrainingDataAveragesForSkillProfile(ctx context.Context, in *CalculateTrainingDataAveragesForSkillProfileReq, opts ...grpc.CallOption) (*CalculateTrainingDataAveragesForSkillProfileRes, error)
	// Calculates the averages for call characteristics using the historical data of the given @skill_profile_sids, @skill_profile_group_sids and org sending the request.
	// If no @skill_profile_sids are given, it will calculate the averages for all skill profiles for the org sending the request.
	// If no @skill_profile_group_sids are given, it will calculate the averages for all skill profile groups for the org sending the request.
	// Averages will be weighted by the number of calls that each historical data interval has.
	// Once the averages are calculated, they will be updated in the db for those skill profiles.
	//
	// If a nil @datetime_range is given then the range used will be @training_data_range_end_datetime - @averages_calculation_range_in_months to the @training_data_range_end_datetime from the forecasting parameters.
	// If @averages_calculation_range_in_months is 0, it will use the @training_data_range_start_datetime as the start datetime of the range.
	//
	// If @exclude_skill_profiles_with_manual_averages is true, it will exclude skill profiles and groups that have manual averages from the calculation
	// even if those skill profiles and groups are in @skill_profile_sids or @skill_profile_group_sids respectively.
	//
	// Errors:
	//   - grpc.Internal: error occurs when calculating the averages from the historical data.
	UpdateSkillProfileAveragesUsingHistoricalData(ctx context.Context, in *UpdateSkillProfileAveragesUsingHistoricalDataReq, opts ...grpc.CallOption) (*UpdateSkillProfileAveragesUsingHistoricalDataRes, error)
	// Updates the call center @node that has the given @call_center_node_sid.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this call center node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the one or more of the fields in the request are invalid.
	//   - grpc.Internal: error occurs when updating the call center node.
	//   - grpc.NotFound: entry to be updated doesn't exist.
	UpdateCallCenterNode(ctx context.Context, in *UpdateCallCenterNodeReq, opts ...grpc.CallOption) (*UpdateCallCenterNodeRes, error)
	// Creates the given client @node for the org sending the request and @parent_sid in the node.
	// The @client_node_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent call center node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// The @origin_sid must be set to nil, since this method can only make an original node.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @name, @parent_sid, or @time_zone_val is invalid.
	//   - grpc.NotFound: parent call center node doesn't exist, or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the client node.
	CreateClientNode(ctx context.Context, in *CreateClientNodeReq, opts ...grpc.CallOption) (*CreateClientNodeRes, error)
	// Updates a client node for the org sending the request that has the given @client_node_sid and @schedule_scenario_sid.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this client node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @node have invalid values.
	//   - grpc.Internal: error occurs when updating the client @node.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the given @parent_sid (call_center_node_sid) belongs to a different scenario than this @node.
	UpdateClientNode(ctx context.Context, in *UpdateClientNodeReq, opts ...grpc.CallOption) (*UpdateClientNodeRes, error)
	// Creates the given location @node for the org sending the request and parent @client_node_sid.
	// The @location_node_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent client node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// The @origin_sid must be set to nil, since this method can only make an original node.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @node have invalid values.
	//   - grpc.NotFound: parent client node doesn't exist or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the location node.
	CreateLocationNode(ctx context.Context, in *CreateLocationNodeReq, opts ...grpc.CallOption) (*CreateLocationNodeRes, error)
	// Updates a location node corresponding to the given @location_node_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this location node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @location_node have invalid values.
	//   - grpc.Internal: error occurs when updating the location node.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the given parent @client_node_sid belongs to a different scenario than the node to update.
	UpdateLocationNode(ctx context.Context, in *UpdateLocationNodeReq, opts ...grpc.CallOption) (*UpdateLocationNodeRes, error)
	// Creates the given program @node for the org sending the request and parent @location_node_sid.
	// The @program_node_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent location node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// The @origin_sid must be set to nil, since this method can only make an original node.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @node have invalid values.
	//   - grpc.NotFound: parent location node doesn't exist or belongs to a different scenario than the one given.
	//     the @skill_profile_category does not exist.
	//   - grpc.Internal: error occurs when creating the program node.
	CreateProgramNode(ctx context.Context, in *CreateProgramNodeReq, opts ...grpc.CallOption) (*CreateProgramNodeRes, error)
	// Updates a program node for the given @program_node_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this program node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @program_node have invalid values.
	//   - grpc.Internal: error occurs when updating the program node.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the given parent @location_node_sid belongs to a different scenario than the program node to update.
	//     the @skill_profile_category does not exist.
	UpdateProgramNode(ctx context.Context, in *UpdateProgramNodeReq, opts ...grpc.CallOption) (*UpdateProgramNodeRes, error)
	// Lists the program nodes with the given @program_node_sids for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the given @program_node_sids are invalid.
	//   - grpc.Internal: error occurs when listing the program nodes.
	ListProgramNodesBySid(ctx context.Context, in *ListProgramNodesBySidReq, opts ...grpc.CallOption) (*ListProgramNodesBySidRes, error)
	// Creates the given @constraint_rule for the org sending the request.
	// The @constraint_rule_sid and @skill_proficiency_sid (if one was created) of the new entities will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// If @rule_type is set to MIN_SKILL_LEVEL, the @member_target_entity field must be set with a skill proficiency and the @constraint_rule.target_sid will be ignored.
	// If the @member_target_entity is for a skill proficiency, that skill proficiency will be created with the given @constraint_rule as parent.
	// If @rule_type is NOT MIN_SKILL_LEVEL then the @target_sid must be that of a scheduling activity.
	// The all other @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @constraint_rule have invalid values.
	//   - grpc.NotFound: the given @target_sid for the given @rule_type, or @parent_entity don't exist.
	//   - grpc.Internal: error occurs when creating the constraint rule.
	CreateConstraintRule(ctx context.Context, in *CreateConstraintRuleReq, opts ...grpc.CallOption) (*CreateConstraintRuleRes, error)
	// Updates the constraint rule corresponding for given @contraint_rule_sid for the org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this constraint rule since it cannot be changed.
	// If @rule_type is set to MIN_SKILL_LEVEL, the @member_target_entity field must be set with a skill proficiency, otherwise it should not be set and field will be ignored.
	// If the @target_sid is for a different skill proficiency than the current one the constraint rule has as a target,
	// the old one will be deleted and a new one will be created for the given @member_target_entity.
	// If @rule_type is NOT MIN_SKILL_LEVEL then the @target_sid must be that of a scheduling activity.
	// The all other @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @constraint_rule have invalid values.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the @parent_entity has a different @schedule_scenario_sid than the constraint rule.
	//     : the given @target_sid for the given @rule_type, or @parent_entity don't exist.
	//   - grpc.Internal: error occurs when updating the constraint rule.
	UpdateConstraintRule(ctx context.Context, in *UpdateConstraintRuleReq, opts ...grpc.CallOption) (*UpdateConstraintRuleRes, error)
	// Deletes a constraint rule with the coresponding @constraint_rule_sid for the org sending the request.
	// It also deletes the entity referenced by the @target_sid and @rule_type if said entity is not a member of any other entity or the on call scheduling activity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @constraint_rule_sid is invalid for the org making the request.
	//   - grpc.NotFound: the given @constraint_rule doesn't exist.
	//   - grpc.Internal: error occurs when removing the constraint rule.
	DeleteConstraintRule(ctx context.Context, in *DeleteConstraintRuleReq, opts ...grpc.CallOption) (*DeleteConstraintRuleRes, error)
	// Creates the given @non_skill_activity for the org sending the request.
	// Will also create a scheduling activity wrapper for the non skill activity.
	// The @non_skill_activity_sid and @scheduling_activity_sid of the new entities will be returned in the response.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @non_skill_activity have invalid values.
	//   - grpc.NotFound: the @schedule_scenario_sid doesn't exist.
	//   - grpc.Internal: error occurs when creating the non skill activity or scheduling activity.
	CreateNonSkillActivity(ctx context.Context, in *CreateNonSkillActivityReq, opts ...grpc.CallOption) (*CreateNonSkillActivityRes, error)
	// Updates a non skill activity that has the given @non_skill_activity_sid with the given values.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: @non_skill_activity fields have invalid values.
	//   - grpc.NotFound: non skill activity for the given @non_skill_activity_sid doesn't exist.
	//   - grpc.Internal: error occurs when updating the non skill activity.
	UpdateNonSkillActivity(ctx context.Context, in *UpdateNonSkillActivityReq, opts ...grpc.CallOption) (*UpdateNonSkillActivityRes, error)
	// Lists the non skill activities that belong to the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:.
	//   - grpc.Internal: error occurs when listing the activites.
	ListNonSkillActivities(ctx context.Context, in *ListNonSkillActivitiesReq, opts ...grpc.CallOption) (*ListNonSkillActivitiesRes, error)
	// Lists the IDs of non skill activities that belong to the org sending the request which have the given @relationship_type with the @associated_entity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @associated_entity or @relationship_type are invalid.
	//   - grpc.Internal: error occurs when listing the associations.
	ListNonSkillActivityAssociations(ctx context.Context, in *ListNonSkillActivityAssociationsReq, opts ...grpc.CallOption) (*ListNonSkillActivityAssociationsRes, error)
	// Lists the candidate scheduling activities for a constraint or placement rule, inherited through given @parent_of_rule for @schedule_scenario_sid for the org making the request.
	// @parent_of_rule may be any type of node, agent group, or shift template which the rule will belong to.
	// If the rule will belong to a wfm agent, the agent group must be supplied instead to get a relevant set of candidate scheduling activities.
	// Member non skill activity of each scheduling activity will be included in the response.
	// The on call scheduling activity will always be included.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @parent_of_rule is invalid.
	//   - grpc.NotFound: @parent_of_rule doesn't exist
	//   - grpc.Internal: error occurs when applying inheritance or getting the nodes from @parent_of_rule.
	ListCandidateSchedulingActivities(ctx context.Context, in *ListCandidateSchedulingActivitiesReq, opts ...grpc.CallOption) (*ListCandidateSchedulingActivitiesRes, error)
	// Creates an agent group with the provided parameters.
	// A successful response should contain the @agent_group_sid of the newly created entity.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @name, or @parent_entity are invalid.
	//   - grpc.NotFound: @parent_entity doesn't exist
	//   - grpc.Internal: error occurs when creating the agent group.
	CreateAgentGroup(ctx context.Context, in *CreateAgentGroupReq, opts ...grpc.CallOption) (*CreateAgentGroupRes, error)
	// Updates the agent group corresponding to the @agent_group_sid, @name, and @parent_entity.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this agent group since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @agent_group_sid, @parent_entity, or @name in the request are invalid.
	//   - grpc.Internal: error occurs when updating the agent group.
	//   - grpc.AlreadyExists: an agent group with the given @name already exists.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the @parent_entity has a different @schedule_scenario_sid than the agent group.
	UpdateAgentGroup(ctx context.Context, in *UpdateAgentGroupReq, opts ...grpc.CallOption) (*UpdateAgentGroupRes, error)
	// Updates a wfm agent for the given @wfm_agent_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// The @tcn_agent_sid cannot be updated.
	// Required permission:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @wfm_agent have invalid values.
	//   - grpc.NotFound: WFM agent with the given @wfm_agent_sid doesn't exist.
	//   - grpc.Internal: error occurs when updating the wfm agent.
	UpdateWFMAgent(ctx context.Context, in *UpdateWFMAgentReq, opts ...grpc.CallOption) (*UpdateWFMAgentRes, error)
	// Lists all wfm agents for the org sending the request.
	// if @include_inactive is true then inactive agents will also be included, otherwise only active agents will be returned.
	// if @include_skill_proficiencies is true then agents returned will include their skill proficiencies.
	// if @include_agent_groups is true then the @agent_groups_by_agent response field will be set with a list of agent groups correlating to each agents index in the @wfm_agents field.
	// if @include_agent_groups is set to true, the @agent_group_schedule_scenario_sid field must be set, so that the agent groups for the correct scenario are returned.
	// if @include_agent_groups is set to true, and @agent_group_schedule_scenario_sid is not set, the agent groups will not be filtered by schedule scenario.
	// if @include_agent_groups is set to false, the @agent_group_schedule_scenario_sid will be ignored.
	// @agent_group_schedule_scenario_sid does not effect which @wfm_agents are returned.
	// WFM agents with no associated agent_groups will have an empty slice in agent_groups_by_agent at their correlated index.
	// Required Permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the wfm agents.
	ListAllWFMAgents(ctx context.Context, in *ListAllWFMAgentsReq, opts ...grpc.CallOption) (*ListAllWFMAgentsRes, error)
	// Lists all candidate wfm agents for the org sending the request and given @agent_group_sid.
	// A WFM agent is considered a candidate when it's active and it doesn't already belong to the given agent group.
	// Member entities will not be returned.
	// Required Permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: @agent_group_sid has an invalid value.
	//   - grpc.Internal: error occurs when getting the wfm agents.
	ListCandidateWFMAgents(ctx context.Context, in *ListCandidateWFMAgentsReq, opts ...grpc.CallOption) (*ListCandidateWFMAgentsRes, error)
	// Lists all wfm agents who are not grouped with any agent group for the given org sending the request that were created at or after the given @created_after_datetime.
	// If @schedule_scenario_sid is positive, it will filter further to get only agents who are not grouped with any agent group for that scenario.
	// if @include_skill_proficiencies is true then agents returned will include their skill proficiencies.
	// Member entities will not be returned.
	// Required Permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: @created_after_datetime has an invalid value.
	//   - grpc.Internal: error occurs when getting the wfm agents.
	ListUngroupedWFMAgents(ctx context.Context, in *ListUngroupedWFMAgentsReq, opts ...grpc.CallOption) (*ListUngroupedWFMAgentsRes, error)
	// Gets the wfm_agent_sids with the given @tcn_agent_sids for the org sending the request.
	// Returns a map where Key: tcn_agent_sid - Value: wfm_agent_sid.
	// If the wfm_agent_sid is not found for any @tcn_agent_sids, they will not have an entry in the returned @sids.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @tcn_agent_sids are invalid.
	//   - grpc.Internal: error occours while listing the wfm_agent_sids.
	ListWFMAgentSids(ctx context.Context, in *ListWFMAgentSidsReq, opts ...grpc.CallOption) (*ListWFMAgentSidsRes, error)
	// Lists the IDs of wfm agents that belong to the org sending the request which are associated with the given @agent_group_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @agent_group_sid is invalid.
	//   - grpc.Internal: error occurs when listing the wfm agents.
	ListWFMAgentsAssociatedWithAgentGroup(ctx context.Context, in *ListWFMAgentsAssociatedWithAgentGroupReq, opts ...grpc.CallOption) (*ListWFMAgentsAssociatedWithAgentGroupRes, error)
	// Creates a membership association for each of the given @wfm_agent_sids with the given @agent_group_sid.
	// The @schedule_scenario_sid must match the scenario of the agent group and wfm agents.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @wfm_agent_sids, or @agent_group_sid are invalid.
	//   - grpc.NotFound: the @wfm_agent_sids or @agent_group_sid don't exist for the org or given @schedule_scenario_sid.
	//   - grpc.Internal: error occurs when creating the association.
	CreateWFMAgentMemberships(ctx context.Context, in *CreateWFMAgentMembershipsReq, opts ...grpc.CallOption) (*CreateWFMAgentMembershipsRes, error)
	// Deletes a membership association for each of the given @wfm_agent_sids with the given @agent_group_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @wfm_agent_sids, or @agent_group_sid are invalid.
	//   - grpc.NotFound: any of the given memberships to delete do not exist.
	//   - grpc.Internal: error occurs when deleting the association.
	DeleteWFMAgentMemberships(ctx context.Context, in *DeleteWFMAgentMembershipsReq, opts ...grpc.CallOption) (*DeleteWFMAgentMembershipsRes, error)
	// Deletes all membership associations for the given @wfm_agent_sids with the given @agent_group_sids.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @wfm_agent_sids, or @agent_group_sids are invalid.
	//   - grpc.Internal: error occurs when deleting the associations.
	DeleteWFMAgentsMemberships(ctx context.Context, in *DeleteWFMAgentsMembershipsReq, opts ...grpc.CallOption) (*DeleteWFMAgentsMembershipsRes, error)
	// Builds and returns the diagnostics for the wfm agent associated with the given @wfm_agent_sid or @agent_group_sid for the org sending the request.
	// Response will only contain:
	//
	//	one element if build for a single @wfm_agent_sid.
	//	one element for each WFM agent if build for an @agent_group_sid.
	//
	// Required permissions:
	//
	//	NONE
	//	- grpc.Invalid: the @wfm_agent_sid, or @agent_group_sid is invalid.
	//	- grpc.NotFound: the given @wfm_agent_sid doesn't exist or the @agent_group_sid has no agents.
	//	- grpc.Internal: error occurs building the diagnostics.
	BuildAgentDiagnostics(ctx context.Context, in *BuildAgentDiagnosticsReq, opts ...grpc.CallOption) (*BuildAgentDiagnosticsRes, error)
	// Creates a shift template for the org sending the request with the provided parameters
	// The @shift_template_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent program node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @name, or @program_node_sid are invalid.
	//   - grpc.AlreadyExists: a shift template with the given @name already exists.
	//   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the shift template.
	CreateShiftTemplate(ctx context.Context, in *CreateShiftTemplateReq, opts ...grpc.CallOption) (*CreateShiftTemplateRes, error)
	// Updates a shift template for the given @shift_template_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this shift template since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @shift_template_sid, @name, @program_node_sid are invalid.
	//   - grpc.AlreadyExists: a shift template with the given @name already exists.
	//   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the shift template to update.
	//   - grpc.Internal: error occurs when updating the shift template.
	UpdateShiftTemplate(ctx context.Context, in *UpdateShiftTemplateReq, opts ...grpc.CallOption) (*UpdateShiftTemplateRes, error)
	// Lists the shift templates matching the specified @shift_template_sids for the org sending the request.
	// If @include_placement_rules is set to true, the @shift_templates will be returned with their member placement rules.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @shift_template_sids are invalid.
	//   - grpc.Internal: error occurs when getting the data.
	ListShiftTemplatesBySids(ctx context.Context, in *ListShiftTemplatesBySidsReq, opts ...grpc.CallOption) (*ListShiftTemplatesBySidsRes, error)
	// Builds and returns the diagnostics for the shift template associated with the given @shift_template_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//	- grpc.Invalid: the @shift_template_sid is invalid.
	//	- grpc.NotFound: the given @shift_template_sid doesn't exist for the org sending the request.
	//	- grpc.Internal: error occours building the diagnostics for the shift template.
	BuildShiftTemplateDiagnostics(ctx context.Context, in *BuildShiftTemplateDiagnosticsReq, opts ...grpc.CallOption) (*BuildShiftTemplateDiagnosticsRes, error)
	// Creates a placement rule for org sending the request with the provided parameters.
	// The @placement_rule_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent shift template.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in the @placement_rule are invalid.
	//   - grpc.NotFound: the parent shift template doesn't exist or belongs to a different scenario than the one given.
	//     the scheduling activity to associate with the placement rule doesn't exist or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the placement rule.
	CreatePlacementRule(ctx context.Context, in *CreatePlacementRuleReq, opts ...grpc.CallOption) (*CreatePlacementRuleRes, error)
	// Updates a placement rule corresponding with the given @placement_rule_sid for the org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this placement rule since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the one or more of the fields in the @placement_rule are invalid.
	//   - grpc.Internal: error occurs when updating the placement rule.
	//   - grpc.NotFound: entry to be updated doesn't exist.
	//     : the parent shift template or related scheduling activity don't exist or belong to a different scenario than the placement rule to update.
	UpdatePlacementRule(ctx context.Context, in *UpdatePlacementRuleReq, opts ...grpc.CallOption) (*UpdatePlacementRuleRes, error)
	// Deletes a placement rule with the coresponding @placement_rule_sid for the org sending the request.
	// It also deletes the scheduling activity referenced by the @scheduling_activity_sid if said activity is not a member of any other entity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @placement_rule_sid is invalid for the org making the request.
	//   - grpc.NotFound: the given @placement_rule doesn't exist.
	//   - grpc.Internal: error occurs when removing the placement rule.
	DeletePlacementRule(ctx context.Context, in *DeletePlacementRuleReq, opts ...grpc.CallOption) (*DeletePlacementRuleRes, error)
	// Creates an open times pattern for the org sending the request with the provided parameters.
	// The @open_times_pattern_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in the @open_times_pattern are invalid.
	//   - grpc.NotFound: the parent entity doesn't exist.
	//   - grpc.Internal: error occurs when creating the open times pattern.
	CreateOpenTimesPattern(ctx context.Context, in *CreateOpenTimesPatternReq, opts ...grpc.CallOption) (*CreateOpenTimesPatternRes, error)
	// Updates an open times pattern for the given @open_times_pattern_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this open times pattern since it cannot be changed.
	// Required permission:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @open_times_pattern have invalid values.
	//   - grpc.NotFound: the given @open_times_pattern or it's @parent_entity doesn't exist.
	//   - grpc.Internal: error occurs when updating the open times pattern.
	UpdateOpenTimesPattern(ctx context.Context, in *UpdateOpenTimesPatternReq, opts ...grpc.CallOption) (*UpdateOpenTimesPatternRes, error)
	// Deletes an open times pattern with the coresponding @open_times_pattern_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @open_times_pattern_sid is invalid for the org making the request.
	//   - grpc.NotFound: the given @open_times_pattern doesn't exist.
	//   - grpc.Internal: error occurs when removing the open times pattern.
	DeleteOpenTimesPattern(ctx context.Context, in *DeleteOpenTimesPatternReq, opts ...grpc.CallOption) (*DeleteOpenTimesPatternRes, error)
	// Gets the inherited, own, and resulting bitmaps for the open times patterns of @node_to_check for @schedule_scenario_sid and the org sending the request.
	// The @schedule_scenario_sid must match the scenario of the @node_to_check.
	// If @bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
	// If @bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the open times patterns.
	// If @bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the open times patterns.
	// The bitmaps will be generated for the span of @datetime_range.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_to_check is invalid for @schedule_scenario_sid and the org making the request.
	//     : the @datetime_range is invalid.
	//   - grpc.NotFound: the given @node_to_check doesn't exist.
	//   - grpc.Internal: error occurs when getting the open times pattern bitmaps.
	GetOpenTimesBitmaps(ctx context.Context, in *GetOpenTimesBitmapsReq, opts ...grpc.CallOption) (*GetOpenTimesBitmapsRes, error)
	// Creates an agent availability pattern for the org sending the request with the provided parameters.
	// The @agent_availability_pattern_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: the parameters in the @agent_availability_pattern are invalid.
	//   - grpc.NotFound: the parent entity doesn't exist.
	//   - grpc.Internal: error occurs when creating the agent availability pattern.
	CreateAgentAvailabilityPattern(ctx context.Context, in *CreateAgentAvailabilityPatternReq, opts ...grpc.CallOption) (*CreateAgentAvailabilityPatternRes, error)
	// Updates an agent availability pattern for the given @agent_availability_pattern_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this agent availability pattern since it cannot be changed.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @agent_availability_pattern have invalid values.
	//   - grpc.Internal: error occurs when updating the agent avilability pattern.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the @parent_entity has a different @schedule_scenario_sid than the agent availability pattern.
	UpdateAgentAvailabilityPattern(ctx context.Context, in *UpdateAgentAvailabilityPatternReq, opts ...grpc.CallOption) (*UpdateAgentAvailabilityPatternRes, error)
	// Deletes an agent availability pattern with the coresponding @agent_availability_pattern_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @agent_availability_pattern_sid has an invalid value.
	//   - grpc.NotFound: the @agent_availability_pattern with the given sid doesn't exist.
	//   - grpc.Internal: error occurs when removing the agent availability pattern.
	DeleteAgentAvailabilityPattern(ctx context.Context, in *DeleteAgentAvailabilityPatternReq, opts ...grpc.CallOption) (*DeleteAgentAvailabilityPatternRes, error)
	// Gets the inherited, own, and resulting bitmaps for the agent availability patterns of @entities_to_check for @schedule_scenario_sid and the org sending the request.
	// The @schedule_scenario_sid must match the scenario of the @entities_to_check.
	// @entities_to_check must have the entity_type field set with a wfm agent, agent group or a type of node.
	// If an availability bitmap is requested for an agent group, the bitmaps for all of it's member agents will be returned instead.
	// The bitmaps will be generated for the span of @datetime_range.
	// If @bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
	// If @bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the availability patterns.
	// If @bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the availability patterns.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @entities_to_check is invalid for @schedule_scenario_sid and the org making the request.
	//     : the @datetime_range is invalid.
	//   - grpc.NotFound: the given @entities_to_check don't exist.
	//   - grpc.Internal: error occurs when getting the agent availability pattern bitmaps.
	GetAvailabilityBitmaps(ctx context.Context, in *GetAvailabilityBitmapsReq, opts ...grpc.CallOption) (*GetAvailabilityBitmapsRes, error)
	// Upserts an association for the given @non_skill_activity_sid to the given @node.
	// All downstream members of the entity will have their inheritance state cleared, and inherit the given association.
	// If an association already exists between the non skill activity and the @node then their @relationship_type will be updated.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// If a NOT_ASSOCIATED_WITH relationship is being created, the tree will be checked for conflicting downstream effects.
	// If any member rules, are referencing the non skill activity and @relationship_type is NOT_ASSOCIATED_WITH, then the upsert will not take effect, and the list of related entities to be updated/removed first will be returned.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @non_skill_activity_sid, @node or @association_type are invalid.
	//     : the non skill activity and @node belong to different scenarios.
	//   - grpc.NotFound: the @non_skill_activity_sid or @node don't exist.
	//   - grpc.Internal: error occurs when upserting the association.
	UpsertNonSkillActivityAssociation(ctx context.Context, in *UpsertNonSkillActivityAssociationReq, opts ...grpc.CallOption) (*UpsertNonSkillActivityAssociationRes, error)
	// Creates skill proficiencies for the org sending the request with the provided parameters.
	// The @schedule_scenario_sid must match the scenario of the @parent_entities.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in a @proficiency, or the @schedule_scenario_sid are invalid.
	//   - grpc.NotFound: for any of the given @skill_proficiencies:
	//     the @parent_entity doesn't exist.
	//     the @skill_sid doesn't exist.
	//     the skill profile with @preferred_skill_profile_sid doesn't contain the given @skill_sid.
	//   - grpc.AlreadyExists: a skill proficiency with the given @skill_sid and @parent_entity already exists.
	//   - grpc.Internal: error occurs when creating the skill proficiencies.
	CreateSkillProficiencies(ctx context.Context, in *CreateSkillProficienciesReq, opts ...grpc.CallOption) (*CreateSkillProficienciesRes, error)
	// Updates skill proficiencies corresponding to the given @skill_proficiency_sids and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @skill_sid and @parent_entity field of each proficiency will be ignored since it cannot be updated.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @skill_proficiencies have invalid values.
	//   - grpc.Internal: error occurs when updating the skill proficiencies.
	//   - grpc.NotFound: for any of the given @skill_proficiencies:
	//     the @skill_sid doesn't exist.
	//     the skill profile with @preferred_skill_profile_sid doesn't contain the skill of the given skill proficiency.
	//   - grpc.AlreadyExists: a skill proficiency with the given @skill_sid and @parent_entity already exists.
	UpdateSkillProficiencies(ctx context.Context, in *UpdateSkillProficienciesReq, opts ...grpc.CallOption) (*UpdateSkillProficienciesRes, error)
	// Deletes a skill proficiency with the corresponding @skill_proficiency_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: the @skill_proficiency_sid is invalid for the org making the request.
	//	-grpc.NotFound: the skill proficiency with the given @skill_proficiency_sid doesn't exist.
	//	-grpc.Internal: error occurs when removing the skill proficiency.
	DeleteSkillProficiency(ctx context.Context, in *DeleteSkillProficiencyReq, opts ...grpc.CallOption) (*DeleteSkillProficiencyRes, error)
	// Copies the existing scenario with the @scenario_sid_to_copy for the org sending the request using the provided parameters.
	// Scheduling targets of entities in the scenario to copy will also be copied.
	// The new @schedule_scenario_sid of the new entity will be returned in the response.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:gg
	//   - grpc.Invalid: the parameters @scenario_sid_to_copy or any others are invalid.
	//   - grpc.NotFound: the scenario corresponding to the @scenario_sid_to_copy doesn't exist.
	//   - grpc.Internal: error occurs when creating/coping the new scenario.
	CopyScenario(ctx context.Context, in *CopyScenarioReq, opts ...grpc.CallOption) (*CopyScenarioRes, error)
	// Creates a new schedule scenario for the org sending the request with the provided parameters.
	// The new @schedule_scenario_sid of the new entity will be returned in the response.
	// It also creates 1 of each of the following: call center, client, program, location node, and on call scheduling activity (if it doesn't exist already for the org).
	// The @node_description fields may optionally be left blank.
	// The @copied_from_scenario_sid field will be ignored, as it will be set to nil in the newly created scenario.
	// The @creation_datetime and @is_default fields will also be ignored and set as the current time and false respectively.
	// The @skill_profile_category will be associated with the created program node.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: parameters in the @req are invalid for the org making the request.
	//   - grpc.NotFound: the @skill_profile_category does not exist.
	//   - grpc.Internal: error occurs when creating the new scenario, or any of the node entities.
	CreateScheduleScenarioWithNodes(ctx context.Context, in *CreateScheduleScenarioWithNodesReq, opts ...grpc.CallOption) (*CreateScheduleScenarioWithNodesRes, error)
	// Updates a schedule scenario corresponding to the given @schedule_scenario_sid and org sending the request with the provided parameters.
	// Only the @name, @description and @datetime_set_to_inactive fields may be updated, and must be filled in with current value if updating the field is not desired.
	// The @schedule_scenario_sid must be the original for the schedule scenario since it cannot be updated.
	// All other fields will be ignored since they cannot be updated.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: one or more fields in the @scenario have invalid values.
	//	-grpc.NotFound: the scenario with the given @schedule_scenario_sid doesn't exist.
	//	-grpc.Internal: error occurs when updating the scenario.
	UpdateScheduleScenario(ctx context.Context, in *UpdateScheduleScenarioReq, opts ...grpc.CallOption) (*UpdateScheduleScenarioRes, error)
	// Gets config entities that match the org sending the request and given @entity_type and that belong to the @belongs_to_entity and @schedule_scenario_sid parameters.
	// If @include_member_lists is set to true the member lists of the entities retrieved will be included.
	// Any nodes in the returned set of entities will have inherited nonskill associations applied to the node's member_nonskill_activity fields.
	// Prior to listing the entities it will Resync TCN Agents and skill proficiencies.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @entity_type, or @belongs_to_entity have invalid values.
	//   - grpc.Internal: error occurs when getting the config entities.
	ListConfigEntities(ctx context.Context, in *ListConfigEntitiesReq, opts ...grpc.CallOption) (*ListConfigEntitiesRes, error)
	// Deletes shift instances with the corresponding @shift_instance_sids for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: the @shift_instance_sids are invalid for the org making the request.
	//	-grpc.NotFound: the shift instances with the given @shift_instance_sids don't exist.
	//	-grpc.Internal: error occurs when removing the shift instances.
	DeleteShiftInstances(ctx context.Context, in *DeleteShiftInstancesReq, opts ...grpc.CallOption) (*DeleteShiftInstancesRes, error)
	// Builds and returns the diagnostics and @nodes_checked for the @node_to_check for @schedule_scenario_sid and the org sending the request.
	// The @schedule_scenario_sid must match the scenario of the @node_to_check.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_to_check is invalid for @schedule_scenario_sid and the org making the request.
	//   - grpc.NotFound: the given @node_to_check doesn't exist.
	//   - grpc.Internal: error occurs when building the diagnostics.
	BuildNodeDiagnostics(ctx context.Context, in *BuildNodeDiagnosticsReq, opts ...grpc.CallOption) (*BuildNodeDiagnosticsRes, error)
	// Builds and returns the global diagnostics and @nodes_checked for the @schedule_scenario_sid and the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @schedule_scenario_sid has an invalid values.
	//   - grpc.NotFound: the given @schedule_scenario_sid doesn't exist for the org making the request.
	//   - grpc.Internal: error occurs when building the diagnostics.
	BuildGlobalDiagnostics(ctx context.Context, in *BuildGlobalDiagnosticsReq, opts ...grpc.CallOption) (*BuildGlobalDiagnosticsRes, error)
	// Gets the published schedule for the corresponding @datetime_range for the org sending the request.
	// Will create a published schedule if it does not exist already for the org sending the request.
	// if @include_shift_instances is true, the shift instances associated within @datetime_range for the published schedule will be returned in the published schedules shift_instances field.
	// if @node_selector is set, then only instances belonging to the origin of @node_selector and its children node will be returned, otherwise all matching shift instances will be included.
	// if @include_shift_template is true, any returned shift instances will have their orginating shift template returned in their origin_shift_template field.
	// if @include_shift_segments is true, any returned shift instances will have their shift_segments field set, otherwise the field will be left nil.
	// if @include_scheduling_activity is true, any returned shift segments will have their scheduling_activity field set, otherwise the field will be left nil.
	// if @include_activity is true, any returned scheduling activities will have their member_non_skill_activity field set, otherwise the field will be left nil.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range, @metric_types are invalid.
	//   - grpc.NotFound: the @node_selector doesn't exist.
	//   - grpc.Internal: error occurs when getting the published schedule.
	GetPublishedSchedule(ctx context.Context, in *GetPublishedScheduleReq, opts ...grpc.CallOption) (*GetPublishedScheduleRes, error)
	// Gets the required calls intervals for the published schedule for the corresponding @viewing_range, for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the published schedule doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	GetPublishedScheduleRequiredCalls(ctx context.Context, in *GetPublishedScheduleRequiredCallsReq, opts ...grpc.CallOption) (*GetPublishedScheduleRequiredCallsRes, error)
	// Gets the required calls intervals for the specified draft schedule for the corresponding @viewing_range, for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the draft schedule doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	GetDraftScheduleRequiredCalls(ctx context.Context, in *GetDraftScheduleRequiredCallsReq, opts ...grpc.CallOption) (*GetDraftScheduleRequiredCallsRes, error)
	// Creates a draft schedule for the org sending the request with the provided parameters.
	// The @draft_schedule_sid of the new entity will be returned in the response.
	// The @created_at and @last_updated_at fields will be set to the current time and null respectively.
	// The draft schedule will include the published schedule's shift instances and shift segments.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: the @name, @description or @scheduling_range are invalid.
	//   - grpc.Internal: error occurs when creating the draft schedule.
	CreateDraftSchedule(ctx context.Context, in *CreateDraftScheduleReq, opts ...grpc.CallOption) (*CreateDraftScheduleRes, error)
	// Updates the @name, @description, and @datetime_range of the given @draft_schedule_sid for the org sending the request.
	// The @name, @description, and @datetime_range fields must all be set with their desired values.
	// If @delete_shifts_not_in_range if true, then any instances outside of the @datetime_range will be permenantly deleted with no recovery option.
	// If @delete_shifts_not_in_range is false, instances outside of the new @datetime_range will be retained, for use if the datetime range is expanded to cover the instances in the future.
	// If @copy_shifts_into_new_range time is true, then new the portion of an expanded @datetime_range which has no instances will copy the instances from the published schedule. If false, no instances will be created for an expanded @scheduling_range.
	// If @get_updated_shifts is true, then the returned draft schedule will also contain the shift instances and segments in the given @datetime_range.
	// Errors:
	//   - grpc.Invalid: the @name, @description or @datetime_range are invalid.
	//   - grpc.Internal: error occurs when updating the schedule or its instances.
	UpdateDraftSchedule(ctx context.Context, in *UpdateDraftScheduleReq, opts ...grpc.CallOption) (*UpdateDraftScheduleRes, error)
	// Builds a draft schedule for the given @node_selector in @schedule_scenario_sid over @schedule_scenario_scheduling_range for @draft_schedule_sid and the org making the request.
	// The @schedule_scenario_scheduling_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
	// @include parameters are used when retrieving the resulting draft schedule, and work in the same way as for GetDraftSchedule.
	// Will return diagnostics for the newly built schedule, or just diagnostics if the schedule cannot be built successfully due to diagnostic error.
	BuildDraftSchedule(ctx context.Context, in *BuildDraftScheduleReq, opts ...grpc.CallOption) (*BuildDraftScheduleRes, error)
	// Publishes the shift instances of the given @draft_schedule_sid to the published schedule of the org sending the request.
	// Overlapping shift instances that aren't locked will be replaced with the instances from the draft schedule.
	// If @ignore_diagnostics_errors is set to true, it will publish the schedule regardless of any diagnostics errors,
	// otherwise it will return those diagnostic errors and not publish the schedule.
	// @include parameters are used when retrieving the resulting published schedule, and work in the same way as for GetDraftSchedule.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in the @req are invalid..
	//   - grpc.NotFound: @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when publishing the draft schedule.
	PublishDraftSchedule(ctx context.Context, in *PublishDraftScheduleReq, opts ...grpc.CallOption) (*PublishDraftScheduleRes, error)
	// Resets the shifts on the @draft_schedule_sid for the org sending the request.
	// Shifts overlapping the @datetime_range will be deleted, then that @datetime_range will be populated with shifts from the published schedule.
	// If no @datetime_range is provided, all shifts will be removed from the @draft_schedule_sid, and published shifts will be copied across the draft's datetime range.
	// If @unlocked_only is set to true, only unlocked shifts will be deleted, and the locked shift instances will remain.
	//
	//	The published schedule will still be copied, so any newly overlapping shifts will result in an overlap warning.
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range or @draft_schedule_sid are invalid for the org sending the request.
	//   - grpc.NotFound: the @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when resetting the schedule.
	ResetDraftSchedule(ctx context.Context, in *ResetDraftScheduleReq, opts ...grpc.CallOption) (*ResetDraftScheduleRes, error)
	// Gets the draft schedule with @draft_schedule_sid for the corresponding @datetime_range for the org sending the request.
	// The @datetime_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
	// if @include_shift_instances is true, the shift instances associated within @datetime_range for the draft schedule will be returned in the draft schedules shift_instances field.
	// if @node_selector is set then only instances belonging to the origin of @node_selector and its children node will be returned, otherwise all matching shift instances will be included.
	// @node_selector must be for a node that belongs to the same schedule scenario as @draft_schedule_sid.
	// if @include_shift_template is true, any returned shift instances will have their orginating shift template returned in their origin_shift_template field.
	// if @include_shift_segments is true, any returned shift instances will have their shift_segments field set, otherwise the field will be left nil.
	// if @include_scheduling_activity is true, any returned shift segments will have their scheduling_activity field set, otherwise the field will be left nil.
	// if @include_activity is true, any returned scheduling activities will have their member_non_skill_activity field set, otherwise the field will be left nil.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range or @draft_schedule_sid are invalid.
	//   - grpc.NotFound: the @node_selector or @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when getting the draft schedule.
	GetDraftSchedule(ctx context.Context, in *GetDraftScheduleReq, opts ...grpc.CallOption) (*GetDraftScheduleRes, error)
	// Lists the draft schedules whose scheduling_range overlaps the given @datetime_range for the org sending the request.
	// If @datetime_range is not set, all draft schedules for the org will be returned.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range is invalid.
	//   - grpc.Internal: error occurs when listing the draft schedules.
	ListDraftSchedules(ctx context.Context, in *ListDraftSchedulesReq, opts ...grpc.CallOption) (*ListDraftSchedulesRes, error)
	// Clears shift instances from the @schedule_selector for the org sending the request.
	// If @node_selector is set, only shifts related to the given @node_selector will be cleared.
	// If @node_selector is not set, all shifts on the @schedule_selector may be cleared, regardless of the shift template they are associated with.
	// If @datetime_range is set, only the shifts overlapping the @datetime_range will be cleared.
	// If @datetime_range is not set, all shifts on the schedule will be considered in range to be deleted and @invert_datetime_range and @start_datetimes_only must be set to false.
	// If @invert_datetime_range is set to true, the shifts overlapping the range before and after the provided @datetime_range will be deleted.
	// If @invert_datetime_range is set to false, the provided @datetime_range will be used.
	// If @start_datetimes_only is set to true, deletes the shifts that start within the @datetime range, or start before or after @datetime_range if @invert_datetime_range is true.
	// If @start_datetimes_only is set to false, deletes the shifts that overlap with the @datetime range, or overlap the range before or after @datetime_range if @invert_datetime_range is true.
	// If @delete_locked is set to true, both locked and unlocked shifts will be cleared.
	// If @delete_locked is set to false, only shifts with @is_locked set to false may be cleared.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_selector, @schedule_selector, or @datetime_range in the request are invalid.
	//   - grpc.NotFound: the draft schedule with the given @schedule_selector doesn't exist.
	//   - grpc.Internal: error occurs when removing the shifts from the schedule.
	ClearSchedule(ctx context.Context, in *ClearScheduleReq, opts ...grpc.CallOption) (*ClearScheduleRes, error)
	// Deletes a draft schedule with the corresponding @draft_schedule_sid for the org sending the request.
	// It also deletes all of its shift instances and segments.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @draft_schedule_sid is invalid for the org making the request.
	//   - grpc.NotFound: the draft schedule with the given @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when removing the draft schedule.
	DeleteDraftSchedule(ctx context.Context, in *DeleteDraftScheduleReq, opts ...grpc.CallOption) (*DeleteDraftScheduleRes, error)
	// Lists the shift instances with the corresponding @shift_instance_sids for the org sending the request.
	// If @include_shift_template is set to true then the related shift template for the shift instances will be returned in the shift template field.
	// If @include_shift_segments is set to true then the related shift segments for the shift instances will be returned in the shift segments field.
	// If @include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
	// @include_shift_segments must be true to take effect.
	// If @include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling
	// activities member non skill activity field. @include_scheduling_activity must be true to take effect.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: @shift_instance_sids in the request are invalid.
	//   - grpc.Internal: error occurs when listing the shift instances or their shift segments.
	ListShiftInstancesBySid(ctx context.Context, in *ListShiftInstancesBySidReq, opts ...grpc.CallOption) (*ListShiftInstancesBySidRes, error)
	// Copies the shifts from @source_schedule_selector to @destination_schedule_selector, constrained by the given parameters for the org sending the request.
	// If @datetime_range is set, all shifts within the datetime range will be copied.
	// If @datetime_range is not set, all shifts in the @source_schedule_selector within the schedule range of the @destination_schedule_selector will be copied. However if one of them is a published schedule, it will use the schedule range of the draft schedule.
	// If @start_datetimes_only is set to false, then shifts are considered to be within the @datetime range if any portion of them is within the range.
	// If @start_datetimes_only is set to true, then only shifts with start times within the @datetime range will be copied.
	// If @overlap_as_warning is set to false, any overlapping shifts for a given agent will return a diagnostic error, and prevent any shifts from being copied.
	// If @overlap_as_warning is set to true, the shifts will be copied regardless of overlap conflicts, and any conflicts will cause a diagnostic warning to be returned after.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: one or more fields in the request have invalid values.
	//	-grpc.NotFound: the @source_schedule_selector or @destination_schedule_selector don't exist for the org sending the request.
	//	-grpc.Internal: error occurs when creating the copied shift instances.
	CopyScheduleToSchedule(ctx context.Context, in *CopyScheduleToScheduleReq, opts ...grpc.CallOption) (*CopyScheduleToScheduleRes, error)
	// Creates a shift instance for the org sending the request with the provided parameters.
	// This method is not implemented. Do not use.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when creating the shift instance.
	CreateShiftInstance(ctx context.Context, in *CreateShiftInstanceReq, opts ...grpc.CallOption) (*CreateShiftInstanceRes, error)
	// Creates a shift instance for the org sending the request with the provided parameters.
	// If @wfm_agent_sids is empty, then the shift instance will be created for a newly created unassigned agent.
	// A shift instance will be created for each wfm agent sid provided.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when creating the shift instance.
	//   - grpc.NotFound: the @draft_schedule_sid, @shift_template_sid, or @wfm_agent_sids do not exist for the org sending the request.
	CreateShiftInstanceV2(ctx context.Context, in *CreateShiftInstanceV2Req, opts ...grpc.CallOption) (*CreateShiftInstanceV2Res, error)
	// Swaps shift instances with the given @shift_instance_sids that belong to @wfm_agent_sid1 to belong to @wfm_agent_sid2 (and viceversa).
	// Returns the swapped @shift_instances after they are succesfully updated.
	// If there are other shifts for the given @wfm_agent_sids with an overlap conflict, diagnostics will be returned instead.
	// All @shift_instance_sids must belong to the same schedule, and be from a draft schedule.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.NotFound: wfm_agent_sid_1, wfm_agent_sid_2, or shift_instance_sids do not exist for the org sending the request.
	//   - grpc.Internal: error occurs when swapping the shift instances.
	SwapShiftInstances(ctx context.Context, in *SwapShiftInstancesReq, opts ...grpc.CallOption) (*SwapShiftInstancesRes, error)
	// Updates a shift instance for the org sending the request with the provided parameters.
	// This method is not implemented. Do not use.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when updating the shift instance.
	UpdateShiftInstance(ctx context.Context, in *UpdateShiftInstanceReq, opts ...grpc.CallOption) (*UpdateShiftInstanceRes, error)
	// Updates a shift instance for the org sending the request with the provided parameters.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when updating the shift instance.
	UpdateShiftInstanceV2(ctx context.Context, in *UpdateShiftInstanceV2Req, opts ...grpc.CallOption) (*UpdateShiftInstanceV2Res, error)
	// Copies the given @shift_instance_sids to @destination_schedule for the org sending the request.
	// If there are any overlap conflicts on @destination_schedule and @overlap_as_warning is set to false,
	//
	//	then @shift_instance_sids will not be copied, and a list of diagnostics detailing the overlaps will be returned.
	//
	// If @overlap_as_warning is set to true, overlap conflicts will not prevent the shifts from being copied, and the overlap diagnostics will be returned after as warning messages instead.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.NotFound: the @shift_instance_sids or @destination_schedule does not exist for the org sending the request.
	//   - grpc.Internal: error occurs when copying the shift instances.
	CopyShiftInstancesToSchedule(ctx context.Context, in *CopyShiftInstancesToScheduleReq, opts ...grpc.CallOption) (*CopyShiftInstancesToScheduleRes, error)
	// Lists the shift_instance_sids for the Shift Instances associated with @wfm_agent_sid over the given @datetime_range and @schedule_selector.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the data.
	ListShiftInstanceSidsForAgent(ctx context.Context, in *ListShiftInstanceSidsForAgentReq, opts ...grpc.CallOption) (*ListShiftInstanceSidsForAgentRes, error)
	// Lists shift segments for the specified shift instances for the org sending the request.
	// If @include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
	// If @include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling activities member non skill activity field.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: a shift instance doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	ListShiftSegmentsByShiftInstanceSids(ctx context.Context, in *ListShiftSegmentsByShiftInstanceSidsReq, opts ...grpc.CallOption) (*ListShiftSegmentsByShiftInstanceSidsRes, error)
	// Creates the given @scheduling_target for the org making the request.
	// The @scheduling_target_sid of the new entity will be returned in the response.
	// Any preexisting scheduling target for @node_entity will be removed upon creation of the new @scheduling_target.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @scheduling_target is invalid.
	//   - grpc.NotFound: @node_entity doesn't exist for @schedule_scenario_sid and the org making the request.
	//   - grpc.Internal: error occours when setting the scheduling target.
	SetSchedulingTarget(ctx context.Context, in *SetSchedulingTargetReq, opts ...grpc.CallOption) (*SetSchedulingTargetRes, error)
	// Gets the @own_scheduling_target, @inherited_scheduling_target, and @resulting_scheduling_target for the given @node_selector and the org making the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_selector is invalid.
	//   - grpc.NotFound: the given @node_selector doesn't exist for the org making the request.
	//   - grpc.Internal: error occours when getting the scheduling target.
	GetSchedulingTarget(ctx context.Context, in *GetSchedulingTargetReq, opts ...grpc.CallOption) (*GetSchedulingTargetRes, error)
	// Deletes the scheduling target of the corresponding @node_selector for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: the @node_selector is invalid.
	//	-grpc.NotFound: the scheduling target for the given @node_selector doesn't exist for the org making the request.
	//	-grpc.Internal: error occurs when removing the scheduling target.
	DeleteSchedulingTarget(ctx context.Context, in *DeleteSchedulingTargetReq, opts ...grpc.CallOption) (*DeleteSchedulingTargetRes, error)
	// Gets the scheduling-target values for the org making the request.
	// Errors:
	//   - grpc.Internal: error occours when getting the scheduling-target values.
	GetDefaultSchedulingTarget(ctx context.Context, in *GetDefaultSchedulingTargetReq, opts ...grpc.CallOption) (*GetDefaultSchedulingTargetRes, error)
	// Sets the scheduling-target values for the org making the request.
	// Errors:
	//   - grpc.Invalid: any of the given values are invalid.
	//   - grpc.Internal: error occours when setting the scheduling-target values.
	SetDefaultSchedulingTarget(ctx context.Context, in *SetDefaultSchedulingTargetReq, opts ...grpc.CallOption) (*SetDefaultSchedulingTargetRes, error)
	// Gets the performance metrics across @datetime_range for shift instances in @schedule_selector associated with @node_selector for the org making the request.
	// Performance metrics will be generated for each of the given @metric_params.
	// The @interval_width_in_minutes must be a multiple of 5.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the @node_selector, @schedule_selector, or their shift instances doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	GetPerformanceMetrics(ctx context.Context, in *GetPerformanceMetricsReq, opts ...grpc.CallOption) (*GetPerformanceMetricsRes, error)
	// Lists the required calls intervals for the given @node_selector over the given @datetime_range for the org making the request.
	// The @interval_width_in_minutes must be a multiple of 5.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the data.
	ListRequiredCallsIntervals(ctx context.Context, in *ListRequiredCallsIntervalsReq, opts ...grpc.CallOption) (*ListRequiredCallsIntervalsRes, error)
	// Creates a Tour Pattern for @shift_template_sid and the org sending the request, returning @tour_pattern_sid.
	// If there is already a Tour Pattern for @shift_template_sid then the method call will fail to create a new Tour Pattern.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.AlreadyExists: A Tour Pattern already exists for @shift_template_sid.
	//   - grpc.Internal: error occurs when creating the Tour Pattern.
	CreateTourPattern(ctx context.Context, in *CreateTourPatternReq, opts ...grpc.CallOption) (*CreateTourPatternRes, error)
	// Returns a list of diagnostics describing any issues with the given @tour_pattern.
	// Checks the internal consistency between the pattern and all members, as well as making sure required fields are set with valid values.
	// Ignores sid fields, except for @shift_template_sid and @scheduling_activity_sid.
	// Does not query the database to check that foreign keys exist.
	// Returns a single diagnostic with an OK code if the given @tour_pattern has no issues.
	// The @member_tour_week_patterns and @member_tour_agent_collections fields must be set on @tour_pattern.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when validating the tour pattern or members.
	GetTourPatternDiagnostics(ctx context.Context, in *GetTourPatternDiagnosticsReq, opts ...grpc.CallOption) (*GetTourPatternDiagnosticsRes, error)
	// Replaces the existing Tour Pattern and members with @tour_pattern for the @tour_pattern.shift_template_sid and the org sending the request.
	// Returns the newly created Tour Pattern and members with their updated SIDs and Week Pattern Numbers.
	// Any existing Tour Week Patterns, Tour Shift Instance and Segment Configs, Tour Agent Collections and their WFM Agent SIDs
	//
	//	belonging to @tour_pattern.shift_template_sid will be replaced with the members on the provided @tour_pattern.
	//
	// At least one Tour Agent Collection and one Tour Week Pattern must be provided in the member fields.
	// If the tour pattern data or members have issues that prevent them from being persisted, a list of diagnostics will be returned describing the issues that must be resolved.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the @tour_pattern.shift_template_sid does not exist.
	//   - grpc.Internal: error occurs when upserting the tour pattern or members.
	UpsertTourPatternWithMembers(ctx context.Context, in *UpsertTourPatternWithMembersReq, opts ...grpc.CallOption) (*UpsertTourPatternWithMembersRes, error)
	// Gets the Tour Pattern belonging to @shift_template_sid and the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the requested Tour Pattern does not exist.
	//   - grpc.Internal: error occurs when getting the data.
	GetTourPattern(ctx context.Context, in *GetTourPatternReq, opts ...grpc.CallOption) (*GetTourPatternRes, error)
	// Deletes the Tour Pattern belonging to @tour_pattern_sid and the org sending the request.
	// Any member Tour Week Patterns or Agent Collections will be deleted as well.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when deleting the data or it's children.
	DeleteTourPattern(ctx context.Context, in *DeleteTourPatternReq, opts ...grpc.CallOption) (*DeleteTourPatternRes, error)
	// Creates a Tour Week Pattern for @tour_pattern_sid for the org sending the request, returning @tour_week_pattern_sid.
	// The newly created Tour Week Pattern will be placed at the end of the existing sequence of tour week patterns for @tour_pattern_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the given @tour_pattern_sid does not exist for the org sending the request.
	//   - grpc.Internal: error occurs when creating the Tour Week Pattern.
	CreateTourWeekPattern(ctx context.Context, in *CreateTourWeekPatternReq, opts ...grpc.CallOption) (*CreateTourWeekPatternRes, error)
	// Lists the Tour Week Patterns with @tour_pattern_sid for the org sending the request
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the Tour Week Patterns.
	ListTourWeekPatterns(ctx context.Context, in *ListTourWeekPatternsReq, opts ...grpc.CallOption) (*ListTourWeekPatternsRes, error)
	// Deletes the Tour Week Patterns with the given @tour_week_pattern_sids for the org sending the request.
	// Any Tour Week Instance or Segment Configs using @tour_week_pattern_sids will be deleted.
	// Request will error if any @tour_week_pattern_sids are in use by a Tour Agent Collection, as those must be removed first.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.FailedPrecondition: a @tour_week_pattern_sid is in use by a Tour Agent Collection.
	//   - grpc.Internal: error occurs when deleting the tour week patterns or configs.
	DeleteTourWeekPatterns(ctx context.Context, in *DeleteTourWeekPatternsReq, opts ...grpc.CallOption) (*DeleteTourWeekPatternsRes, error)
	// Creates the @tour_shift_instance_config for the org sending the request, returning @tour_shift_instance_config_sid.
	// The given @tour_shift_instance_config will not be created if it will overlap another tour shift instance config belonging to @tour_week_pattern_sid.
	// The @member_tour_shift_segment_configs field will be ignored, and will not be created if passed through this endpoint.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid or a preexisting tour shift instance config would overlap @tour_shift_instance_config.
	//   - grpc.Internal: error occurs when creating the data.
	CreateTourShiftInstanceConfig(ctx context.Context, in *CreateTourShiftInstanceConfigReq, opts ...grpc.CallOption) (*CreateTourShiftInstanceConfigRes, error)
	// Updates the @tour_shift_instance_config for the org sending the request, returning @tour_shift_instance_config_sid.
	// The given @tour_shift_instance_config will not be created if it will overlap another tour shift instance config belonging to @tour_week_pattern_sid.
	// The @member_tour_shift_segment_configs field will be ignored, and will not be updated if passed through this endpoint.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid or a preexisting Tour Shift Instance Config would overlap @tour_shift_instance_config.
	//   - grpc.Internal: error occurs when updating the data.
	UpdateTourShiftInstanceConfig(ctx context.Context, in *UpdateTourShiftInstanceConfigReq, opts ...grpc.CallOption) (*UpdateTourShiftInstanceConfigRes, error)
	// Lists the Tour Shift Instance Configs belonging to @tour_week_pattern_sids for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the Tour Shift Instance Configs.
	ListTourShiftInstanceConfigs(ctx context.Context, in *ListTourShiftInstanceConfigsReq, opts ...grpc.CallOption) (*ListTourShiftInstanceConfigsRes, error)
	// Deletes the Tour Shift Instance Configs matching @tour_shift_instance_config_sids for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the Tour Shift Instance Configs.
	DeleteTourShiftInstanceConfigs(ctx context.Context, in *DeleteTourShiftInstanceConfigsReq, opts ...grpc.CallOption) (*DeleteTourShiftInstanceConfigsRes, error)
	// Creates the given @tour_shift_segment_config for the org sending the request, returning @tour_shift_segment_config_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the @tour_shift_instance_config_sid does not exist for the org sending the request.
	//   - grpc.Internal: error occurs when creating the entity.
	CreateTourShiftSegmentConfig(ctx context.Context, in *CreateTourShiftSegmentConfigReq, opts ...grpc.CallOption) (*CreateTourShiftSegmentConfigRes, error)
	// Updates the given @tour_shift_segment_config matching @tour_shift_segment_config_sid for the org sending the request.
	// If the updated Tour Shift Segment Config overlaps another segment or does not fit within the parent Tour Shift Instance Config the update will fail.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid or the resulting update would result in a conflict.
	//   - grpc.NotFound: the @tour_shift_instance_config_sid does not exist for the org sending the request.
	//   - grpc.Internal: error occurs when updating the entity.
	UpdateTourShiftSegmentConfig(ctx context.Context, in *UpdateTourShiftSegmentConfigReq, opts ...grpc.CallOption) (*UpdateTourShiftSegmentConfigRes, error)
	// Lists the Tour Shift Segment Configs belonging to @tour_shift_instance_config_sids for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the Tour Shift Segment Configs.
	ListTourShiftSegmentConfigs(ctx context.Context, in *ListTourShiftSegmentConfigsReq, opts ...grpc.CallOption) (*ListTourShiftSegmentConfigsRes, error)
	// Deletes the Tour Shift Segment Configs associated with the given @tour_shift_segment_config_sids for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when deleting the Tour Shift Segment Configs.
	DeleteTourShiftSegmentConfigs(ctx context.Context, in *DeleteTourShiftSegmentConfigsReq, opts ...grpc.CallOption) (*DeleteTourShiftSegmentConfigsRes, error)
	// Creates the given @tour_agent_collection for the org sending the request and return the @tour_agent_collection_sid.
	// The @wfm_agent_sids will be ignored and will not be created through this endpoint.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.AlreadyExists: the first_week_pattern_number for @tour_pattern_sid is already in use by another tour agent collection.
	//   - grpc.NotFound: the given @tour_pattern_sid does not exist for the org sending the request.
	//   - grpc.Internal: error occurs when creating the entity.
	CreateTourAgentCollection(ctx context.Context, in *CreateTourAgentCollectionReq, opts ...grpc.CallOption) (*CreateTourAgentCollectionRes, error)
	// Updates the given @tour_agent_collection matching the @tour_agent_collection_sid for the org sending the request.
	// The @wfm_agent_sids will be ignored and will not be updated through this endpoint.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.AlreadyExists: the first_week_pattern_number for @tour_pattern_sid is already in use by another tour agent collection.
	//   - grpc.NotFound: the given @tour_pattern_sid does not exist for the org sending the request.
	//   - grpc.Internal: error occurs when updating the entity.
	UpdateTourAgentCollection(ctx context.Context, in *UpdateTourAgentCollectionReq, opts ...grpc.CallOption) (*UpdateTourAgentCollectionRes, error)
	// Lists the Tour Agent Collections belonging to @tour_pattern_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the tour agent collections.
	ListTourAgentCollections(ctx context.Context, in *ListTourAgentCollectionsReq, opts ...grpc.CallOption) (*ListTourAgentCollectionsRes, error)
	// Deletes the Tour Agent collections matching @tour_agent_collection_sids for the org sending the request.
	// Any existing associations with WFM Agent Sids will be deleted as well.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when deleting the tour agent collections.
	DeleteTourAgentCollections(ctx context.Context, in *DeleteTourAgentCollectionsReq, opts ...grpc.CallOption) (*DeleteTourAgentCollectionsRes, error)
	// Creates an assocation between the @tour_agent_collection_sid and the @wfm_agent_sids for the org sending the request.
	// If there is already an association between any of the @wfm_agent_sids and the Tour Pattern that @tour_agent_collection_sid belongs to, the method will fail and no associations will be created.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid
	//   - grpc.AlreadyExists: an association already exists for at least one SID in @wfm_agent_sids.
	//   - grpc.Internal: error occurs when creating the association.
	CreateTourAgentCollectionWFMAgents(ctx context.Context, in *CreateTourAgentCollectionWFMAgentsReq, opts ...grpc.CallOption) (*CreateTourAgentCollectionWFMAgentsRes, error)
	// Lists the WFM Agent SIDs belonging to @tour_agent_collection_sids for the org sending the request.
	// The resulting sids will be returned in @wfm_agent_pairings each containing an @agent_collection_sid and @wfm_agent_sids.
	// If no agents are found for a sid in the given @tour_agent_collection_sids, that @agent_collection_sid will have an empty slice in @wfm_agent_sids.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the tour agent collections.
	ListTourAgentCollectionWFMAgents(ctx context.Context, in *ListTourAgentCollectionWFMAgentsReq, opts ...grpc.CallOption) (*ListTourAgentCollectionWFMAgentsRes, error)
	// Deletes association between the @wfm_agent_sids and @tour_agent_collection_sid for the org sending the request.
	// If no @wfm_agent_sids are provided, all existing @wfm_agent_sids for the given @tour_agent_collection_sid will be deleted.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: there are no WFM Agent associations to delete for @tour_agent_collection_sid.
	//   - grpc.Internal: error occurs when getting the tour agent collections.
	DeleteTourAgentCollectionWFMAgents(ctx context.Context, in *DeleteTourAgentCollectionWFMAgentsReq, opts ...grpc.CallOption) (*DeleteTourAgentCollectionWFMAgentsRes, error)
	// Generates a list of tour week patterns for @target_shift_template_sid and the org sending the request.
	// Sets the member_tour_week_patterns with a tour week pattern for each of the @num_weeks_in_tour.
	// Each of the tour week patterns will be set with tour shift instances and segment configs based on
	//
	//	the forecasted call data over the next @num_weeks_in_tour, starting on the next Monday.
	//
	// The returned data will not be persisted. This method will not effect any existing tour week patterns in the database.
	// The @tour_week_patterns returned by this method are intended to replace, not append, all currenly existing tour week patterns for @target_shift_template_sid, once persisted.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: there is no call center node or @shift_template_sid associated with @schedule_scenario_sid.
	//   - grpc.Internal: error occurs when generating the tour week patterns.
	GenerateTourWeekPatterns(ctx context.Context, in *GenerateTourWeekPatternsReq, opts ...grpc.CallOption) (*GenerateTourWeekPatternsRes, error)
}

type wFMClient struct {
	cc grpc.ClientConnInterface
}

func NewWFMClient(cc grpc.ClientConnInterface) WFMClient {
	return &wFMClient{cc}
}

func (c *wFMClient) ListSkillProfiles(ctx context.Context, in *ListSkillProfilesReq, opts ...grpc.CallOption) (*ListSkillProfilesRes, error) {
	out := new(ListSkillProfilesRes)
	err := c.cc.Invoke(ctx, WFM_ListSkillProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateSkillProfile(ctx context.Context, in *UpdateSkillProfileReq, opts ...grpc.CallOption) (*UpdateSkillProfileRes, error) {
	out := new(UpdateSkillProfileRes)
	err := c.cc.Invoke(ctx, WFM_UpdateSkillProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateSkillProfileProficiencies(ctx context.Context, in *UpdateSkillProfileProficienciesReq, opts ...grpc.CallOption) (*UpdateSkillProfileProficienciesRes, error) {
	out := new(UpdateSkillProfileProficienciesRes)
	err := c.cc.Invoke(ctx, WFM_UpdateSkillProfileProficiencies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetSkillProfile(ctx context.Context, in *GetSkillProfileReq, opts ...grpc.CallOption) (*GetSkillProfileRes, error) {
	out := new(GetSkillProfileRes)
	err := c.cc.Invoke(ctx, WFM_GetSkillProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ResyncSkillProfiles(ctx context.Context, in *ResyncSkillProfilesReq, opts ...grpc.CallOption) (*ResyncSkillProfilesRes, error) {
	out := new(ResyncSkillProfilesRes)
	err := c.cc.Invoke(ctx, WFM_ResyncSkillProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetLastSkillProfileResyncDate(ctx context.Context, in *GetLastSkillProfileResyncDateReq, opts ...grpc.CallOption) (*GetLastSkillProfileResyncDateRes, error) {
	out := new(GetLastSkillProfileResyncDateRes)
	err := c.cc.Invoke(ctx, WFM_GetLastSkillProfileResyncDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpsertForecastingParameters(ctx context.Context, in *UpsertForecastingParametersReq, opts ...grpc.CallOption) (*UpsertForecastingParametersRes, error) {
	out := new(UpsertForecastingParametersRes)
	err := c.cc.Invoke(ctx, WFM_UpsertForecastingParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetForecastingParameters(ctx context.Context, in *GetForecastingParametersReq, opts ...grpc.CallOption) (*GetForecastingParametersRes, error) {
	out := new(GetForecastingParametersRes)
	err := c.cc.Invoke(ctx, WFM_GetForecastingParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListHistoricalData(ctx context.Context, in *ListHistoricalDataReq, opts ...grpc.CallOption) (*ListHistoricalDataRes, error) {
	out := new(ListHistoricalDataRes)
	err := c.cc.Invoke(ctx, WFM_ListHistoricalData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpsertHistoricalDataDelta(ctx context.Context, in *UpsertHistoricalDataDeltaReq, opts ...grpc.CallOption) (*UpsertHistoricalDataDeltaRes, error) {
	out := new(UpsertHistoricalDataDeltaRes)
	err := c.cc.Invoke(ctx, WFM_UpsertHistoricalDataDelta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpsertHistoricalDataDeltas(ctx context.Context, in *UpsertHistoricalDataDeltasReq, opts ...grpc.CallOption) (*UpsertHistoricalDataDeltasRes, error) {
	out := new(UpsertHistoricalDataDeltasRes)
	err := c.cc.Invoke(ctx, WFM_UpsertHistoricalDataDeltas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListSkills(ctx context.Context, in *ListSkillsReq, opts ...grpc.CallOption) (*ListSkillsRes, error) {
	out := new(ListSkillsRes)
	err := c.cc.Invoke(ctx, WFM_ListSkills_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *wFMClient) BuildCallProfileTemplateForSkillProfile(ctx context.Context, in *BuildCallProfileTemplateForSkillProfileReq, opts ...grpc.CallOption) (*BuildCallProfileTemplateForSkillProfileRes, error) {
	out := new(BuildCallProfileTemplateForSkillProfileRes)
	err := c.cc.Invoke(ctx, WFM_BuildCallProfileTemplateForSkillProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) BuildCallProfileTemplate(ctx context.Context, in *BuildCallProfileTemplateReq, opts ...grpc.CallOption) (*BuildCallProfileTemplateRes, error) {
	out := new(BuildCallProfileTemplateRes)
	err := c.cc.Invoke(ctx, WFM_BuildCallProfileTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *wFMClient) CreateInactiveSkillProfileMapping(ctx context.Context, in *CreateInactiveSkillProfileMappingReq, opts ...grpc.CallOption) (*CreateInactiveSkillProfileMappingRes, error) {
	out := new(CreateInactiveSkillProfileMappingRes)
	err := c.cc.Invoke(ctx, WFM_CreateInactiveSkillProfileMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetAvailableRegressionForecasterModelTypes(ctx context.Context, in *GetAvailableRegressionForecasterModelTypesReq, opts ...grpc.CallOption) (*GetAvailableRegressionForecasterModelTypesRes, error) {
	out := new(GetAvailableRegressionForecasterModelTypesRes)
	err := c.cc.Invoke(ctx, WFM_GetAvailableRegressionForecasterModelTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *wFMClient) DisconnectInactiveSkillProfileMapping(ctx context.Context, in *DisconnectInactiveSkillProfileMappingReq, opts ...grpc.CallOption) (*DisconnectInactiveSkillProfileMappingRes, error) {
	out := new(DisconnectInactiveSkillProfileMappingRes)
	err := c.cc.Invoke(ctx, WFM_DisconnectInactiveSkillProfileMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateSkillProfileGroup(ctx context.Context, in *CreateSkillProfileGroupReq, opts ...grpc.CallOption) (*CreateSkillProfileGroupRes, error) {
	out := new(CreateSkillProfileGroupRes)
	err := c.cc.Invoke(ctx, WFM_CreateSkillProfileGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateSkillProfileGroup(ctx context.Context, in *UpdateSkillProfileGroupReq, opts ...grpc.CallOption) (*UpdateSkillProfileGroupRes, error) {
	out := new(UpdateSkillProfileGroupRes)
	err := c.cc.Invoke(ctx, WFM_UpdateSkillProfileGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListSkillProfileGroups(ctx context.Context, in *ListSkillProfileGroupsReq, opts ...grpc.CallOption) (*ListSkillProfileGroupsRes, error) {
	out := new(ListSkillProfileGroupsRes)
	err := c.cc.Invoke(ctx, WFM_ListSkillProfileGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateSkillProfileGroupAssociations(ctx context.Context, in *UpdateSkillProfileGroupAssociationsReq, opts ...grpc.CallOption) (*UpdateSkillProfileGroupAssociationsRes, error) {
	out := new(UpdateSkillProfileGroupAssociationsRes)
	err := c.cc.Invoke(ctx, WFM_UpdateSkillProfileGroupAssociations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteHistoricalDataDeltas(ctx context.Context, in *DeleteHistoricalDataDeltasReq, opts ...grpc.CallOption) (*DeleteHistoricalDataDeltasRes, error) {
	out := new(DeleteHistoricalDataDeltasRes)
	err := c.cc.Invoke(ctx, WFM_DeleteHistoricalDataDeltas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListTopSkillProfiles(ctx context.Context, in *ListTopSkillProfilesReq, opts ...grpc.CallOption) (*ListTopSkillProfilesRes, error) {
	out := new(ListTopSkillProfilesRes)
	err := c.cc.Invoke(ctx, WFM_ListTopSkillProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetSkillProfilesCount(ctx context.Context, in *GetSkillProfilesCountReq, opts ...grpc.CallOption) (*GetSkillProfilesCountRes, error) {
	out := new(GetSkillProfilesCountRes)
	err := c.cc.Invoke(ctx, WFM_GetSkillProfilesCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) BuildProfileForecastByInterval(ctx context.Context, in *BuildProfileForecastByIntervalReq, opts ...grpc.CallOption) (WFM_BuildProfileForecastByIntervalClient, error) {
	stream, err := c.cc.NewStream(ctx, &WFM_ServiceDesc.Streams[0], WFM_BuildProfileForecastByInterval_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &wFMBuildProfileForecastByIntervalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WFM_BuildProfileForecastByIntervalClient interface {
	Recv() (*CallDataByInterval, error)
	grpc.ClientStream
}

type wFMBuildProfileForecastByIntervalClient struct {
	grpc.ClientStream
}

func (x *wFMBuildProfileForecastByIntervalClient) Recv() (*CallDataByInterval, error) {
	m := new(CallDataByInterval)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wFMClient) BuildProfileForecastByIntervalWithStats(ctx context.Context, in *BuildProfileForecastByIntervalWithStatsReq, opts ...grpc.CallOption) (WFM_BuildProfileForecastByIntervalWithStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WFM_ServiceDesc.Streams[1], WFM_BuildProfileForecastByIntervalWithStats_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &wFMBuildProfileForecastByIntervalWithStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WFM_BuildProfileForecastByIntervalWithStatsClient interface {
	Recv() (*BuildProfileForecastByIntervalWithStatsRes, error)
	grpc.ClientStream
}

type wFMBuildProfileForecastByIntervalWithStatsClient struct {
	grpc.ClientStream
}

func (x *wFMBuildProfileForecastByIntervalWithStatsClient) Recv() (*BuildProfileForecastByIntervalWithStatsRes, error) {
	m := new(BuildProfileForecastByIntervalWithStatsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wFMClient) UpsertProfileForecast(ctx context.Context, in *UpsertProfileForecastReq, opts ...grpc.CallOption) (*UpsertProfileForecastRes, error) {
	out := new(UpsertProfileForecastRes)
	err := c.cc.Invoke(ctx, WFM_UpsertProfileForecast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateCallProfileTemplate(ctx context.Context, in *CreateCallProfileTemplateReq, opts ...grpc.CallOption) (*CreateCallProfileTemplateRes, error) {
	out := new(CreateCallProfileTemplateRes)
	err := c.cc.Invoke(ctx, WFM_CreateCallProfileTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteCallProfileTemplate(ctx context.Context, in *DeleteCallProfileTemplateReq, opts ...grpc.CallOption) (*DeleteCallProfileTemplateRes, error) {
	out := new(DeleteCallProfileTemplateRes)
	err := c.cc.Invoke(ctx, WFM_DeleteCallProfileTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateRegressionTemplate(ctx context.Context, in *CreateRegressionTemplateReq, opts ...grpc.CallOption) (*CreateRegressionTemplateRes, error) {
	out := new(CreateRegressionTemplateRes)
	err := c.cc.Invoke(ctx, WFM_CreateRegressionTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteRegressionTemplate(ctx context.Context, in *DeleteRegressionTemplateReq, opts ...grpc.CallOption) (*DeleteRegressionTemplateRes, error) {
	out := new(DeleteRegressionTemplateRes)
	err := c.cc.Invoke(ctx, WFM_DeleteRegressionTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListRegressionTemplates(ctx context.Context, in *ListRegressionTemplatesReq, opts ...grpc.CallOption) (*ListRegressionTemplatesRes, error) {
	out := new(ListRegressionTemplatesRes)
	err := c.cc.Invoke(ctx, WFM_ListRegressionTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *wFMClient) ListForecastIntervalsForSkillProfile(ctx context.Context, in *ListForecastIntervalsForSkillProfileReq, opts ...grpc.CallOption) (WFM_ListForecastIntervalsForSkillProfileClient, error) {
	stream, err := c.cc.NewStream(ctx, &WFM_ServiceDesc.Streams[2], WFM_ListForecastIntervalsForSkillProfile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &wFMListForecastIntervalsForSkillProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WFM_ListForecastIntervalsForSkillProfileClient interface {
	Recv() (*CallDataByInterval, error)
	grpc.ClientStream
}

type wFMListForecastIntervalsForSkillProfileClient struct {
	grpc.ClientStream
}

func (x *wFMListForecastIntervalsForSkillProfileClient) Recv() (*CallDataByInterval, error) {
	m := new(CallDataByInterval)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wFMClient) ListForecastIntervals(ctx context.Context, in *ListForecastIntervalsReq, opts ...grpc.CallOption) (WFM_ListForecastIntervalsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WFM_ServiceDesc.Streams[3], WFM_ListForecastIntervals_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &wFMListForecastIntervalsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WFM_ListForecastIntervalsClient interface {
	Recv() (*CallDataByInterval, error)
	grpc.ClientStream
}

type wFMListForecastIntervalsClient struct {
	grpc.ClientStream
}

func (x *wFMListForecastIntervalsClient) Recv() (*CallDataByInterval, error) {
	m := new(CallDataByInterval)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wFMClient) BuildRegressionForecastByInterval(ctx context.Context, in *BuildRegressionForecastByIntervalReq, opts ...grpc.CallOption) (WFM_BuildRegressionForecastByIntervalClient, error) {
	stream, err := c.cc.NewStream(ctx, &WFM_ServiceDesc.Streams[4], WFM_BuildRegressionForecastByInterval_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &wFMBuildRegressionForecastByIntervalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WFM_BuildRegressionForecastByIntervalClient interface {
	Recv() (*CallDataByInterval, error)
	grpc.ClientStream
}

type wFMBuildRegressionForecastByIntervalClient struct {
	grpc.ClientStream
}

func (x *wFMBuildRegressionForecastByIntervalClient) Recv() (*CallDataByInterval, error) {
	m := new(CallDataByInterval)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wFMClient) BuildRegressionForecastByIntervalWithStats(ctx context.Context, in *BuildRegressionForecastByIntervalWithStatsReq, opts ...grpc.CallOption) (WFM_BuildRegressionForecastByIntervalWithStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WFM_ServiceDesc.Streams[5], WFM_BuildRegressionForecastByIntervalWithStats_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &wFMBuildRegressionForecastByIntervalWithStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WFM_BuildRegressionForecastByIntervalWithStatsClient interface {
	Recv() (*BuildRegressionForecastByIntervalWithStatsRes, error)
	grpc.ClientStream
}

type wFMBuildRegressionForecastByIntervalWithStatsClient struct {
	grpc.ClientStream
}

func (x *wFMBuildRegressionForecastByIntervalWithStatsClient) Recv() (*BuildRegressionForecastByIntervalWithStatsRes, error) {
	m := new(BuildRegressionForecastByIntervalWithStatsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wFMClient) ListCallProfileTemplates(ctx context.Context, in *ListCallProfileTemplatesReq, opts ...grpc.CallOption) (*ListCallProfileTemplatesRes, error) {
	out := new(ListCallProfileTemplatesRes)
	err := c.cc.Invoke(ctx, WFM_ListCallProfileTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpsertRegressionForecast(ctx context.Context, in *UpsertRegressionForecastReq, opts ...grpc.CallOption) (*UpsertRegressionForecastRes, error) {
	out := new(UpsertRegressionForecastRes)
	err := c.cc.Invoke(ctx, WFM_UpsertRegressionForecast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpsertForecastDataDelta(ctx context.Context, in *UpsertForecastDataDeltaReq, opts ...grpc.CallOption) (*UpsertForecastDataDeltaRes, error) {
	out := new(UpsertForecastDataDeltaRes)
	err := c.cc.Invoke(ctx, WFM_UpsertForecastDataDelta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpsertForecastDataDeltas(ctx context.Context, in *UpsertForecastDataDeltasReq, opts ...grpc.CallOption) (*UpsertForecastDataDeltasRes, error) {
	out := new(UpsertForecastDataDeltasRes)
	err := c.cc.Invoke(ctx, WFM_UpsertForecastDataDeltas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteForecastIntervals(ctx context.Context, in *DeleteForecastIntervalsReq, opts ...grpc.CallOption) (*DeleteForecastIntervalsRes, error) {
	out := new(DeleteForecastIntervalsRes)
	err := c.cc.Invoke(ctx, WFM_DeleteForecastIntervals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListHistoricalDataForAllSkillProfiles(ctx context.Context, in *ListHistoricalDataForAllSkillProfilesReq, opts ...grpc.CallOption) (*ListHistoricalDataForAllSkillProfilesRes, error) {
	out := new(ListHistoricalDataForAllSkillProfilesRes)
	err := c.cc.Invoke(ctx, WFM_ListHistoricalDataForAllSkillProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) BuildDOWAndMOYProfiles(ctx context.Context, in *BuildDOWAndMOYProfilesReq, opts ...grpc.CallOption) (*BuildDOWAndMOYProfilesRes, error) {
	out := new(BuildDOWAndMOYProfilesRes)
	err := c.cc.Invoke(ctx, WFM_BuildDOWAndMOYProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CalculateTrainingDataAveragesForSkillProfile(ctx context.Context, in *CalculateTrainingDataAveragesForSkillProfileReq, opts ...grpc.CallOption) (*CalculateTrainingDataAveragesForSkillProfileRes, error) {
	out := new(CalculateTrainingDataAveragesForSkillProfileRes)
	err := c.cc.Invoke(ctx, WFM_CalculateTrainingDataAveragesForSkillProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateSkillProfileAveragesUsingHistoricalData(ctx context.Context, in *UpdateSkillProfileAveragesUsingHistoricalDataReq, opts ...grpc.CallOption) (*UpdateSkillProfileAveragesUsingHistoricalDataRes, error) {
	out := new(UpdateSkillProfileAveragesUsingHistoricalDataRes)
	err := c.cc.Invoke(ctx, WFM_UpdateSkillProfileAveragesUsingHistoricalData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateCallCenterNode(ctx context.Context, in *UpdateCallCenterNodeReq, opts ...grpc.CallOption) (*UpdateCallCenterNodeRes, error) {
	out := new(UpdateCallCenterNodeRes)
	err := c.cc.Invoke(ctx, WFM_UpdateCallCenterNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateClientNode(ctx context.Context, in *CreateClientNodeReq, opts ...grpc.CallOption) (*CreateClientNodeRes, error) {
	out := new(CreateClientNodeRes)
	err := c.cc.Invoke(ctx, WFM_CreateClientNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateClientNode(ctx context.Context, in *UpdateClientNodeReq, opts ...grpc.CallOption) (*UpdateClientNodeRes, error) {
	out := new(UpdateClientNodeRes)
	err := c.cc.Invoke(ctx, WFM_UpdateClientNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateLocationNode(ctx context.Context, in *CreateLocationNodeReq, opts ...grpc.CallOption) (*CreateLocationNodeRes, error) {
	out := new(CreateLocationNodeRes)
	err := c.cc.Invoke(ctx, WFM_CreateLocationNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateLocationNode(ctx context.Context, in *UpdateLocationNodeReq, opts ...grpc.CallOption) (*UpdateLocationNodeRes, error) {
	out := new(UpdateLocationNodeRes)
	err := c.cc.Invoke(ctx, WFM_UpdateLocationNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateProgramNode(ctx context.Context, in *CreateProgramNodeReq, opts ...grpc.CallOption) (*CreateProgramNodeRes, error) {
	out := new(CreateProgramNodeRes)
	err := c.cc.Invoke(ctx, WFM_CreateProgramNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateProgramNode(ctx context.Context, in *UpdateProgramNodeReq, opts ...grpc.CallOption) (*UpdateProgramNodeRes, error) {
	out := new(UpdateProgramNodeRes)
	err := c.cc.Invoke(ctx, WFM_UpdateProgramNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListProgramNodesBySid(ctx context.Context, in *ListProgramNodesBySidReq, opts ...grpc.CallOption) (*ListProgramNodesBySidRes, error) {
	out := new(ListProgramNodesBySidRes)
	err := c.cc.Invoke(ctx, WFM_ListProgramNodesBySid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateConstraintRule(ctx context.Context, in *CreateConstraintRuleReq, opts ...grpc.CallOption) (*CreateConstraintRuleRes, error) {
	out := new(CreateConstraintRuleRes)
	err := c.cc.Invoke(ctx, WFM_CreateConstraintRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateConstraintRule(ctx context.Context, in *UpdateConstraintRuleReq, opts ...grpc.CallOption) (*UpdateConstraintRuleRes, error) {
	out := new(UpdateConstraintRuleRes)
	err := c.cc.Invoke(ctx, WFM_UpdateConstraintRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteConstraintRule(ctx context.Context, in *DeleteConstraintRuleReq, opts ...grpc.CallOption) (*DeleteConstraintRuleRes, error) {
	out := new(DeleteConstraintRuleRes)
	err := c.cc.Invoke(ctx, WFM_DeleteConstraintRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateNonSkillActivity(ctx context.Context, in *CreateNonSkillActivityReq, opts ...grpc.CallOption) (*CreateNonSkillActivityRes, error) {
	out := new(CreateNonSkillActivityRes)
	err := c.cc.Invoke(ctx, WFM_CreateNonSkillActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateNonSkillActivity(ctx context.Context, in *UpdateNonSkillActivityReq, opts ...grpc.CallOption) (*UpdateNonSkillActivityRes, error) {
	out := new(UpdateNonSkillActivityRes)
	err := c.cc.Invoke(ctx, WFM_UpdateNonSkillActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListNonSkillActivities(ctx context.Context, in *ListNonSkillActivitiesReq, opts ...grpc.CallOption) (*ListNonSkillActivitiesRes, error) {
	out := new(ListNonSkillActivitiesRes)
	err := c.cc.Invoke(ctx, WFM_ListNonSkillActivities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListNonSkillActivityAssociations(ctx context.Context, in *ListNonSkillActivityAssociationsReq, opts ...grpc.CallOption) (*ListNonSkillActivityAssociationsRes, error) {
	out := new(ListNonSkillActivityAssociationsRes)
	err := c.cc.Invoke(ctx, WFM_ListNonSkillActivityAssociations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListCandidateSchedulingActivities(ctx context.Context, in *ListCandidateSchedulingActivitiesReq, opts ...grpc.CallOption) (*ListCandidateSchedulingActivitiesRes, error) {
	out := new(ListCandidateSchedulingActivitiesRes)
	err := c.cc.Invoke(ctx, WFM_ListCandidateSchedulingActivities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateAgentGroup(ctx context.Context, in *CreateAgentGroupReq, opts ...grpc.CallOption) (*CreateAgentGroupRes, error) {
	out := new(CreateAgentGroupRes)
	err := c.cc.Invoke(ctx, WFM_CreateAgentGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateAgentGroup(ctx context.Context, in *UpdateAgentGroupReq, opts ...grpc.CallOption) (*UpdateAgentGroupRes, error) {
	out := new(UpdateAgentGroupRes)
	err := c.cc.Invoke(ctx, WFM_UpdateAgentGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateWFMAgent(ctx context.Context, in *UpdateWFMAgentReq, opts ...grpc.CallOption) (*UpdateWFMAgentRes, error) {
	out := new(UpdateWFMAgentRes)
	err := c.cc.Invoke(ctx, WFM_UpdateWFMAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListAllWFMAgents(ctx context.Context, in *ListAllWFMAgentsReq, opts ...grpc.CallOption) (*ListAllWFMAgentsRes, error) {
	out := new(ListAllWFMAgentsRes)
	err := c.cc.Invoke(ctx, WFM_ListAllWFMAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListCandidateWFMAgents(ctx context.Context, in *ListCandidateWFMAgentsReq, opts ...grpc.CallOption) (*ListCandidateWFMAgentsRes, error) {
	out := new(ListCandidateWFMAgentsRes)
	err := c.cc.Invoke(ctx, WFM_ListCandidateWFMAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListUngroupedWFMAgents(ctx context.Context, in *ListUngroupedWFMAgentsReq, opts ...grpc.CallOption) (*ListUngroupedWFMAgentsRes, error) {
	out := new(ListUngroupedWFMAgentsRes)
	err := c.cc.Invoke(ctx, WFM_ListUngroupedWFMAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListWFMAgentSids(ctx context.Context, in *ListWFMAgentSidsReq, opts ...grpc.CallOption) (*ListWFMAgentSidsRes, error) {
	out := new(ListWFMAgentSidsRes)
	err := c.cc.Invoke(ctx, WFM_ListWFMAgentSids_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListWFMAgentsAssociatedWithAgentGroup(ctx context.Context, in *ListWFMAgentsAssociatedWithAgentGroupReq, opts ...grpc.CallOption) (*ListWFMAgentsAssociatedWithAgentGroupRes, error) {
	out := new(ListWFMAgentsAssociatedWithAgentGroupRes)
	err := c.cc.Invoke(ctx, WFM_ListWFMAgentsAssociatedWithAgentGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateWFMAgentMemberships(ctx context.Context, in *CreateWFMAgentMembershipsReq, opts ...grpc.CallOption) (*CreateWFMAgentMembershipsRes, error) {
	out := new(CreateWFMAgentMembershipsRes)
	err := c.cc.Invoke(ctx, WFM_CreateWFMAgentMemberships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteWFMAgentMemberships(ctx context.Context, in *DeleteWFMAgentMembershipsReq, opts ...grpc.CallOption) (*DeleteWFMAgentMembershipsRes, error) {
	out := new(DeleteWFMAgentMembershipsRes)
	err := c.cc.Invoke(ctx, WFM_DeleteWFMAgentMemberships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteWFMAgentsMemberships(ctx context.Context, in *DeleteWFMAgentsMembershipsReq, opts ...grpc.CallOption) (*DeleteWFMAgentsMembershipsRes, error) {
	out := new(DeleteWFMAgentsMembershipsRes)
	err := c.cc.Invoke(ctx, WFM_DeleteWFMAgentsMemberships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) BuildAgentDiagnostics(ctx context.Context, in *BuildAgentDiagnosticsReq, opts ...grpc.CallOption) (*BuildAgentDiagnosticsRes, error) {
	out := new(BuildAgentDiagnosticsRes)
	err := c.cc.Invoke(ctx, WFM_BuildAgentDiagnostics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateShiftTemplate(ctx context.Context, in *CreateShiftTemplateReq, opts ...grpc.CallOption) (*CreateShiftTemplateRes, error) {
	out := new(CreateShiftTemplateRes)
	err := c.cc.Invoke(ctx, WFM_CreateShiftTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateShiftTemplate(ctx context.Context, in *UpdateShiftTemplateReq, opts ...grpc.CallOption) (*UpdateShiftTemplateRes, error) {
	out := new(UpdateShiftTemplateRes)
	err := c.cc.Invoke(ctx, WFM_UpdateShiftTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListShiftTemplatesBySids(ctx context.Context, in *ListShiftTemplatesBySidsReq, opts ...grpc.CallOption) (*ListShiftTemplatesBySidsRes, error) {
	out := new(ListShiftTemplatesBySidsRes)
	err := c.cc.Invoke(ctx, WFM_ListShiftTemplatesBySids_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) BuildShiftTemplateDiagnostics(ctx context.Context, in *BuildShiftTemplateDiagnosticsReq, opts ...grpc.CallOption) (*BuildShiftTemplateDiagnosticsRes, error) {
	out := new(BuildShiftTemplateDiagnosticsRes)
	err := c.cc.Invoke(ctx, WFM_BuildShiftTemplateDiagnostics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreatePlacementRule(ctx context.Context, in *CreatePlacementRuleReq, opts ...grpc.CallOption) (*CreatePlacementRuleRes, error) {
	out := new(CreatePlacementRuleRes)
	err := c.cc.Invoke(ctx, WFM_CreatePlacementRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdatePlacementRule(ctx context.Context, in *UpdatePlacementRuleReq, opts ...grpc.CallOption) (*UpdatePlacementRuleRes, error) {
	out := new(UpdatePlacementRuleRes)
	err := c.cc.Invoke(ctx, WFM_UpdatePlacementRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeletePlacementRule(ctx context.Context, in *DeletePlacementRuleReq, opts ...grpc.CallOption) (*DeletePlacementRuleRes, error) {
	out := new(DeletePlacementRuleRes)
	err := c.cc.Invoke(ctx, WFM_DeletePlacementRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateOpenTimesPattern(ctx context.Context, in *CreateOpenTimesPatternReq, opts ...grpc.CallOption) (*CreateOpenTimesPatternRes, error) {
	out := new(CreateOpenTimesPatternRes)
	err := c.cc.Invoke(ctx, WFM_CreateOpenTimesPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateOpenTimesPattern(ctx context.Context, in *UpdateOpenTimesPatternReq, opts ...grpc.CallOption) (*UpdateOpenTimesPatternRes, error) {
	out := new(UpdateOpenTimesPatternRes)
	err := c.cc.Invoke(ctx, WFM_UpdateOpenTimesPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteOpenTimesPattern(ctx context.Context, in *DeleteOpenTimesPatternReq, opts ...grpc.CallOption) (*DeleteOpenTimesPatternRes, error) {
	out := new(DeleteOpenTimesPatternRes)
	err := c.cc.Invoke(ctx, WFM_DeleteOpenTimesPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetOpenTimesBitmaps(ctx context.Context, in *GetOpenTimesBitmapsReq, opts ...grpc.CallOption) (*GetOpenTimesBitmapsRes, error) {
	out := new(GetOpenTimesBitmapsRes)
	err := c.cc.Invoke(ctx, WFM_GetOpenTimesBitmaps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateAgentAvailabilityPattern(ctx context.Context, in *CreateAgentAvailabilityPatternReq, opts ...grpc.CallOption) (*CreateAgentAvailabilityPatternRes, error) {
	out := new(CreateAgentAvailabilityPatternRes)
	err := c.cc.Invoke(ctx, WFM_CreateAgentAvailabilityPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateAgentAvailabilityPattern(ctx context.Context, in *UpdateAgentAvailabilityPatternReq, opts ...grpc.CallOption) (*UpdateAgentAvailabilityPatternRes, error) {
	out := new(UpdateAgentAvailabilityPatternRes)
	err := c.cc.Invoke(ctx, WFM_UpdateAgentAvailabilityPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteAgentAvailabilityPattern(ctx context.Context, in *DeleteAgentAvailabilityPatternReq, opts ...grpc.CallOption) (*DeleteAgentAvailabilityPatternRes, error) {
	out := new(DeleteAgentAvailabilityPatternRes)
	err := c.cc.Invoke(ctx, WFM_DeleteAgentAvailabilityPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetAvailabilityBitmaps(ctx context.Context, in *GetAvailabilityBitmapsReq, opts ...grpc.CallOption) (*GetAvailabilityBitmapsRes, error) {
	out := new(GetAvailabilityBitmapsRes)
	err := c.cc.Invoke(ctx, WFM_GetAvailabilityBitmaps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpsertNonSkillActivityAssociation(ctx context.Context, in *UpsertNonSkillActivityAssociationReq, opts ...grpc.CallOption) (*UpsertNonSkillActivityAssociationRes, error) {
	out := new(UpsertNonSkillActivityAssociationRes)
	err := c.cc.Invoke(ctx, WFM_UpsertNonSkillActivityAssociation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateSkillProficiencies(ctx context.Context, in *CreateSkillProficienciesReq, opts ...grpc.CallOption) (*CreateSkillProficienciesRes, error) {
	out := new(CreateSkillProficienciesRes)
	err := c.cc.Invoke(ctx, WFM_CreateSkillProficiencies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateSkillProficiencies(ctx context.Context, in *UpdateSkillProficienciesReq, opts ...grpc.CallOption) (*UpdateSkillProficienciesRes, error) {
	out := new(UpdateSkillProficienciesRes)
	err := c.cc.Invoke(ctx, WFM_UpdateSkillProficiencies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteSkillProficiency(ctx context.Context, in *DeleteSkillProficiencyReq, opts ...grpc.CallOption) (*DeleteSkillProficiencyRes, error) {
	out := new(DeleteSkillProficiencyRes)
	err := c.cc.Invoke(ctx, WFM_DeleteSkillProficiency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CopyScenario(ctx context.Context, in *CopyScenarioReq, opts ...grpc.CallOption) (*CopyScenarioRes, error) {
	out := new(CopyScenarioRes)
	err := c.cc.Invoke(ctx, WFM_CopyScenario_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateScheduleScenarioWithNodes(ctx context.Context, in *CreateScheduleScenarioWithNodesReq, opts ...grpc.CallOption) (*CreateScheduleScenarioWithNodesRes, error) {
	out := new(CreateScheduleScenarioWithNodesRes)
	err := c.cc.Invoke(ctx, WFM_CreateScheduleScenarioWithNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateScheduleScenario(ctx context.Context, in *UpdateScheduleScenarioReq, opts ...grpc.CallOption) (*UpdateScheduleScenarioRes, error) {
	out := new(UpdateScheduleScenarioRes)
	err := c.cc.Invoke(ctx, WFM_UpdateScheduleScenario_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListConfigEntities(ctx context.Context, in *ListConfigEntitiesReq, opts ...grpc.CallOption) (*ListConfigEntitiesRes, error) {
	out := new(ListConfigEntitiesRes)
	err := c.cc.Invoke(ctx, WFM_ListConfigEntities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteShiftInstances(ctx context.Context, in *DeleteShiftInstancesReq, opts ...grpc.CallOption) (*DeleteShiftInstancesRes, error) {
	out := new(DeleteShiftInstancesRes)
	err := c.cc.Invoke(ctx, WFM_DeleteShiftInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) BuildNodeDiagnostics(ctx context.Context, in *BuildNodeDiagnosticsReq, opts ...grpc.CallOption) (*BuildNodeDiagnosticsRes, error) {
	out := new(BuildNodeDiagnosticsRes)
	err := c.cc.Invoke(ctx, WFM_BuildNodeDiagnostics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) BuildGlobalDiagnostics(ctx context.Context, in *BuildGlobalDiagnosticsReq, opts ...grpc.CallOption) (*BuildGlobalDiagnosticsRes, error) {
	out := new(BuildGlobalDiagnosticsRes)
	err := c.cc.Invoke(ctx, WFM_BuildGlobalDiagnostics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetPublishedSchedule(ctx context.Context, in *GetPublishedScheduleReq, opts ...grpc.CallOption) (*GetPublishedScheduleRes, error) {
	out := new(GetPublishedScheduleRes)
	err := c.cc.Invoke(ctx, WFM_GetPublishedSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetPublishedScheduleRequiredCalls(ctx context.Context, in *GetPublishedScheduleRequiredCallsReq, opts ...grpc.CallOption) (*GetPublishedScheduleRequiredCallsRes, error) {
	out := new(GetPublishedScheduleRequiredCallsRes)
	err := c.cc.Invoke(ctx, WFM_GetPublishedScheduleRequiredCalls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetDraftScheduleRequiredCalls(ctx context.Context, in *GetDraftScheduleRequiredCallsReq, opts ...grpc.CallOption) (*GetDraftScheduleRequiredCallsRes, error) {
	out := new(GetDraftScheduleRequiredCallsRes)
	err := c.cc.Invoke(ctx, WFM_GetDraftScheduleRequiredCalls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateDraftSchedule(ctx context.Context, in *CreateDraftScheduleReq, opts ...grpc.CallOption) (*CreateDraftScheduleRes, error) {
	out := new(CreateDraftScheduleRes)
	err := c.cc.Invoke(ctx, WFM_CreateDraftSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateDraftSchedule(ctx context.Context, in *UpdateDraftScheduleReq, opts ...grpc.CallOption) (*UpdateDraftScheduleRes, error) {
	out := new(UpdateDraftScheduleRes)
	err := c.cc.Invoke(ctx, WFM_UpdateDraftSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) BuildDraftSchedule(ctx context.Context, in *BuildDraftScheduleReq, opts ...grpc.CallOption) (*BuildDraftScheduleRes, error) {
	out := new(BuildDraftScheduleRes)
	err := c.cc.Invoke(ctx, WFM_BuildDraftSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) PublishDraftSchedule(ctx context.Context, in *PublishDraftScheduleReq, opts ...grpc.CallOption) (*PublishDraftScheduleRes, error) {
	out := new(PublishDraftScheduleRes)
	err := c.cc.Invoke(ctx, WFM_PublishDraftSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ResetDraftSchedule(ctx context.Context, in *ResetDraftScheduleReq, opts ...grpc.CallOption) (*ResetDraftScheduleRes, error) {
	out := new(ResetDraftScheduleRes)
	err := c.cc.Invoke(ctx, WFM_ResetDraftSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetDraftSchedule(ctx context.Context, in *GetDraftScheduleReq, opts ...grpc.CallOption) (*GetDraftScheduleRes, error) {
	out := new(GetDraftScheduleRes)
	err := c.cc.Invoke(ctx, WFM_GetDraftSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListDraftSchedules(ctx context.Context, in *ListDraftSchedulesReq, opts ...grpc.CallOption) (*ListDraftSchedulesRes, error) {
	out := new(ListDraftSchedulesRes)
	err := c.cc.Invoke(ctx, WFM_ListDraftSchedules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ClearSchedule(ctx context.Context, in *ClearScheduleReq, opts ...grpc.CallOption) (*ClearScheduleRes, error) {
	out := new(ClearScheduleRes)
	err := c.cc.Invoke(ctx, WFM_ClearSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteDraftSchedule(ctx context.Context, in *DeleteDraftScheduleReq, opts ...grpc.CallOption) (*DeleteDraftScheduleRes, error) {
	out := new(DeleteDraftScheduleRes)
	err := c.cc.Invoke(ctx, WFM_DeleteDraftSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListShiftInstancesBySid(ctx context.Context, in *ListShiftInstancesBySidReq, opts ...grpc.CallOption) (*ListShiftInstancesBySidRes, error) {
	out := new(ListShiftInstancesBySidRes)
	err := c.cc.Invoke(ctx, WFM_ListShiftInstancesBySid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CopyScheduleToSchedule(ctx context.Context, in *CopyScheduleToScheduleReq, opts ...grpc.CallOption) (*CopyScheduleToScheduleRes, error) {
	out := new(CopyScheduleToScheduleRes)
	err := c.cc.Invoke(ctx, WFM_CopyScheduleToSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateShiftInstance(ctx context.Context, in *CreateShiftInstanceReq, opts ...grpc.CallOption) (*CreateShiftInstanceRes, error) {
	out := new(CreateShiftInstanceRes)
	err := c.cc.Invoke(ctx, WFM_CreateShiftInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateShiftInstanceV2(ctx context.Context, in *CreateShiftInstanceV2Req, opts ...grpc.CallOption) (*CreateShiftInstanceV2Res, error) {
	out := new(CreateShiftInstanceV2Res)
	err := c.cc.Invoke(ctx, WFM_CreateShiftInstanceV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) SwapShiftInstances(ctx context.Context, in *SwapShiftInstancesReq, opts ...grpc.CallOption) (*SwapShiftInstancesRes, error) {
	out := new(SwapShiftInstancesRes)
	err := c.cc.Invoke(ctx, WFM_SwapShiftInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateShiftInstance(ctx context.Context, in *UpdateShiftInstanceReq, opts ...grpc.CallOption) (*UpdateShiftInstanceRes, error) {
	out := new(UpdateShiftInstanceRes)
	err := c.cc.Invoke(ctx, WFM_UpdateShiftInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateShiftInstanceV2(ctx context.Context, in *UpdateShiftInstanceV2Req, opts ...grpc.CallOption) (*UpdateShiftInstanceV2Res, error) {
	out := new(UpdateShiftInstanceV2Res)
	err := c.cc.Invoke(ctx, WFM_UpdateShiftInstanceV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CopyShiftInstancesToSchedule(ctx context.Context, in *CopyShiftInstancesToScheduleReq, opts ...grpc.CallOption) (*CopyShiftInstancesToScheduleRes, error) {
	out := new(CopyShiftInstancesToScheduleRes)
	err := c.cc.Invoke(ctx, WFM_CopyShiftInstancesToSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListShiftInstanceSidsForAgent(ctx context.Context, in *ListShiftInstanceSidsForAgentReq, opts ...grpc.CallOption) (*ListShiftInstanceSidsForAgentRes, error) {
	out := new(ListShiftInstanceSidsForAgentRes)
	err := c.cc.Invoke(ctx, WFM_ListShiftInstanceSidsForAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListShiftSegmentsByShiftInstanceSids(ctx context.Context, in *ListShiftSegmentsByShiftInstanceSidsReq, opts ...grpc.CallOption) (*ListShiftSegmentsByShiftInstanceSidsRes, error) {
	out := new(ListShiftSegmentsByShiftInstanceSidsRes)
	err := c.cc.Invoke(ctx, WFM_ListShiftSegmentsByShiftInstanceSids_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) SetSchedulingTarget(ctx context.Context, in *SetSchedulingTargetReq, opts ...grpc.CallOption) (*SetSchedulingTargetRes, error) {
	out := new(SetSchedulingTargetRes)
	err := c.cc.Invoke(ctx, WFM_SetSchedulingTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetSchedulingTarget(ctx context.Context, in *GetSchedulingTargetReq, opts ...grpc.CallOption) (*GetSchedulingTargetRes, error) {
	out := new(GetSchedulingTargetRes)
	err := c.cc.Invoke(ctx, WFM_GetSchedulingTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteSchedulingTarget(ctx context.Context, in *DeleteSchedulingTargetReq, opts ...grpc.CallOption) (*DeleteSchedulingTargetRes, error) {
	out := new(DeleteSchedulingTargetRes)
	err := c.cc.Invoke(ctx, WFM_DeleteSchedulingTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetDefaultSchedulingTarget(ctx context.Context, in *GetDefaultSchedulingTargetReq, opts ...grpc.CallOption) (*GetDefaultSchedulingTargetRes, error) {
	out := new(GetDefaultSchedulingTargetRes)
	err := c.cc.Invoke(ctx, WFM_GetDefaultSchedulingTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) SetDefaultSchedulingTarget(ctx context.Context, in *SetDefaultSchedulingTargetReq, opts ...grpc.CallOption) (*SetDefaultSchedulingTargetRes, error) {
	out := new(SetDefaultSchedulingTargetRes)
	err := c.cc.Invoke(ctx, WFM_SetDefaultSchedulingTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetPerformanceMetrics(ctx context.Context, in *GetPerformanceMetricsReq, opts ...grpc.CallOption) (*GetPerformanceMetricsRes, error) {
	out := new(GetPerformanceMetricsRes)
	err := c.cc.Invoke(ctx, WFM_GetPerformanceMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListRequiredCallsIntervals(ctx context.Context, in *ListRequiredCallsIntervalsReq, opts ...grpc.CallOption) (*ListRequiredCallsIntervalsRes, error) {
	out := new(ListRequiredCallsIntervalsRes)
	err := c.cc.Invoke(ctx, WFM_ListRequiredCallsIntervals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateTourPattern(ctx context.Context, in *CreateTourPatternReq, opts ...grpc.CallOption) (*CreateTourPatternRes, error) {
	out := new(CreateTourPatternRes)
	err := c.cc.Invoke(ctx, WFM_CreateTourPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetTourPatternDiagnostics(ctx context.Context, in *GetTourPatternDiagnosticsReq, opts ...grpc.CallOption) (*GetTourPatternDiagnosticsRes, error) {
	out := new(GetTourPatternDiagnosticsRes)
	err := c.cc.Invoke(ctx, WFM_GetTourPatternDiagnostics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpsertTourPatternWithMembers(ctx context.Context, in *UpsertTourPatternWithMembersReq, opts ...grpc.CallOption) (*UpsertTourPatternWithMembersRes, error) {
	out := new(UpsertTourPatternWithMembersRes)
	err := c.cc.Invoke(ctx, WFM_UpsertTourPatternWithMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GetTourPattern(ctx context.Context, in *GetTourPatternReq, opts ...grpc.CallOption) (*GetTourPatternRes, error) {
	out := new(GetTourPatternRes)
	err := c.cc.Invoke(ctx, WFM_GetTourPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteTourPattern(ctx context.Context, in *DeleteTourPatternReq, opts ...grpc.CallOption) (*DeleteTourPatternRes, error) {
	out := new(DeleteTourPatternRes)
	err := c.cc.Invoke(ctx, WFM_DeleteTourPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateTourWeekPattern(ctx context.Context, in *CreateTourWeekPatternReq, opts ...grpc.CallOption) (*CreateTourWeekPatternRes, error) {
	out := new(CreateTourWeekPatternRes)
	err := c.cc.Invoke(ctx, WFM_CreateTourWeekPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListTourWeekPatterns(ctx context.Context, in *ListTourWeekPatternsReq, opts ...grpc.CallOption) (*ListTourWeekPatternsRes, error) {
	out := new(ListTourWeekPatternsRes)
	err := c.cc.Invoke(ctx, WFM_ListTourWeekPatterns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteTourWeekPatterns(ctx context.Context, in *DeleteTourWeekPatternsReq, opts ...grpc.CallOption) (*DeleteTourWeekPatternsRes, error) {
	out := new(DeleteTourWeekPatternsRes)
	err := c.cc.Invoke(ctx, WFM_DeleteTourWeekPatterns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateTourShiftInstanceConfig(ctx context.Context, in *CreateTourShiftInstanceConfigReq, opts ...grpc.CallOption) (*CreateTourShiftInstanceConfigRes, error) {
	out := new(CreateTourShiftInstanceConfigRes)
	err := c.cc.Invoke(ctx, WFM_CreateTourShiftInstanceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateTourShiftInstanceConfig(ctx context.Context, in *UpdateTourShiftInstanceConfigReq, opts ...grpc.CallOption) (*UpdateTourShiftInstanceConfigRes, error) {
	out := new(UpdateTourShiftInstanceConfigRes)
	err := c.cc.Invoke(ctx, WFM_UpdateTourShiftInstanceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListTourShiftInstanceConfigs(ctx context.Context, in *ListTourShiftInstanceConfigsReq, opts ...grpc.CallOption) (*ListTourShiftInstanceConfigsRes, error) {
	out := new(ListTourShiftInstanceConfigsRes)
	err := c.cc.Invoke(ctx, WFM_ListTourShiftInstanceConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteTourShiftInstanceConfigs(ctx context.Context, in *DeleteTourShiftInstanceConfigsReq, opts ...grpc.CallOption) (*DeleteTourShiftInstanceConfigsRes, error) {
	out := new(DeleteTourShiftInstanceConfigsRes)
	err := c.cc.Invoke(ctx, WFM_DeleteTourShiftInstanceConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateTourShiftSegmentConfig(ctx context.Context, in *CreateTourShiftSegmentConfigReq, opts ...grpc.CallOption) (*CreateTourShiftSegmentConfigRes, error) {
	out := new(CreateTourShiftSegmentConfigRes)
	err := c.cc.Invoke(ctx, WFM_CreateTourShiftSegmentConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateTourShiftSegmentConfig(ctx context.Context, in *UpdateTourShiftSegmentConfigReq, opts ...grpc.CallOption) (*UpdateTourShiftSegmentConfigRes, error) {
	out := new(UpdateTourShiftSegmentConfigRes)
	err := c.cc.Invoke(ctx, WFM_UpdateTourShiftSegmentConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListTourShiftSegmentConfigs(ctx context.Context, in *ListTourShiftSegmentConfigsReq, opts ...grpc.CallOption) (*ListTourShiftSegmentConfigsRes, error) {
	out := new(ListTourShiftSegmentConfigsRes)
	err := c.cc.Invoke(ctx, WFM_ListTourShiftSegmentConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteTourShiftSegmentConfigs(ctx context.Context, in *DeleteTourShiftSegmentConfigsReq, opts ...grpc.CallOption) (*DeleteTourShiftSegmentConfigsRes, error) {
	out := new(DeleteTourShiftSegmentConfigsRes)
	err := c.cc.Invoke(ctx, WFM_DeleteTourShiftSegmentConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateTourAgentCollection(ctx context.Context, in *CreateTourAgentCollectionReq, opts ...grpc.CallOption) (*CreateTourAgentCollectionRes, error) {
	out := new(CreateTourAgentCollectionRes)
	err := c.cc.Invoke(ctx, WFM_CreateTourAgentCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) UpdateTourAgentCollection(ctx context.Context, in *UpdateTourAgentCollectionReq, opts ...grpc.CallOption) (*UpdateTourAgentCollectionRes, error) {
	out := new(UpdateTourAgentCollectionRes)
	err := c.cc.Invoke(ctx, WFM_UpdateTourAgentCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListTourAgentCollections(ctx context.Context, in *ListTourAgentCollectionsReq, opts ...grpc.CallOption) (*ListTourAgentCollectionsRes, error) {
	out := new(ListTourAgentCollectionsRes)
	err := c.cc.Invoke(ctx, WFM_ListTourAgentCollections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteTourAgentCollections(ctx context.Context, in *DeleteTourAgentCollectionsReq, opts ...grpc.CallOption) (*DeleteTourAgentCollectionsRes, error) {
	out := new(DeleteTourAgentCollectionsRes)
	err := c.cc.Invoke(ctx, WFM_DeleteTourAgentCollections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) CreateTourAgentCollectionWFMAgents(ctx context.Context, in *CreateTourAgentCollectionWFMAgentsReq, opts ...grpc.CallOption) (*CreateTourAgentCollectionWFMAgentsRes, error) {
	out := new(CreateTourAgentCollectionWFMAgentsRes)
	err := c.cc.Invoke(ctx, WFM_CreateTourAgentCollectionWFMAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) ListTourAgentCollectionWFMAgents(ctx context.Context, in *ListTourAgentCollectionWFMAgentsReq, opts ...grpc.CallOption) (*ListTourAgentCollectionWFMAgentsRes, error) {
	out := new(ListTourAgentCollectionWFMAgentsRes)
	err := c.cc.Invoke(ctx, WFM_ListTourAgentCollectionWFMAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) DeleteTourAgentCollectionWFMAgents(ctx context.Context, in *DeleteTourAgentCollectionWFMAgentsReq, opts ...grpc.CallOption) (*DeleteTourAgentCollectionWFMAgentsRes, error) {
	out := new(DeleteTourAgentCollectionWFMAgentsRes)
	err := c.cc.Invoke(ctx, WFM_DeleteTourAgentCollectionWFMAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wFMClient) GenerateTourWeekPatterns(ctx context.Context, in *GenerateTourWeekPatternsReq, opts ...grpc.CallOption) (*GenerateTourWeekPatternsRes, error) {
	out := new(GenerateTourWeekPatternsRes)
	err := c.cc.Invoke(ctx, WFM_GenerateTourWeekPatterns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WFMServer is the server API for WFM service.
// All implementations must embed UnimplementedWFMServer
// for forward compatibility
type WFMServer interface {
	// Retrieves all the skill profiles of the org sending the request.
	// Also it can return the skills of each of the returned profiles.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	ListSkillProfiles(context.Context, *ListSkillProfilesReq) (*ListSkillProfilesRes, error)
	// Updates the @name, and averages of a skill profile that has the given @skill_profile_sid.
	// It also updates it to no longer be unnamed.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid, @name or averages in the request are invalid.
	//   - grpc.Internal: error occurs when updating the skill profile.
	//   - grpc.NotFound: entry to be updated doesn't exist.
	UpdateSkillProfile(context.Context, *UpdateSkillProfileReq) (*UpdateSkillProfileRes, error)
	// Updates the @proficiencies for the given skill profile's skills that belong the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @proficiencies in the request are invalid.
	//   - grpc.Internal: error occurs when updating the skill profiles proficiencies.
	UpdateSkillProfileProficiencies(context.Context, *UpdateSkillProfileProficienciesReq) (*UpdateSkillProfileProficienciesRes, error)
	// Get a skill profile that has the given @skill_profile_sid.
	// It also gets all the skills and the mappings associated with that profile.
	// If the @inactive_as_of_date of the skill profile is nil then the mapping is of inactive profiles to this one,
	// otherwise the mapping is of this profile to an active one.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.Internal: error occurs when getting the skill profile.
	//   - grpc.NotFound: skill profile doesn't exist.
	GetSkillProfile(context.Context, *GetSkillProfileReq) (*GetSkillProfileRes, error)
	// Resyncs the skill profiles of the org sending the request.
	// It will add skills and skill profiles based on that client's historical call data.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when creating the new skills and skill profiles.
	ResyncSkillProfiles(context.Context, *ResyncSkillProfilesReq) (*ResyncSkillProfilesRes, error)
	// Gets the last date of a skill profile resync for the org seding the request.
	// If the org has never done a skill profile resync @resync_date will not be set.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the resync date.
	GetLastSkillProfileResyncDate(context.Context, *GetLastSkillProfileResyncDateReq) (*GetLastSkillProfileResyncDateRes, error)
	// Tries to create an entry for the given forecasting parameters for the org sending the request.
	// If the org already has an entry for them, it will update the already existing entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @forecasting_parameters in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the parameters.
	UpsertForecastingParameters(context.Context, *UpsertForecastingParametersReq) (*UpsertForecastingParametersRes, error)
	// Gets the forecasting parameters for the org sending the request.
	// If the org hasn't created any parameters, it will return the default parameters.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the parameters.
	GetForecastingParameters(context.Context, *GetForecastingParametersReq) (*GetForecastingParametersRes, error)
	// Gets the historical data for the org sending the request and the given @skill_profile_category.
	// It will look through the client's call history and generate the historical data by using their configured forecasting parameters (historical data period and interval width).
	// The duration of each interval will be the interval width of the org's forecasting parameters.
	// It also applies any deltas that the client has stored for the given @skill_profile_category, if the category is a group it will use the deltas of the skill profiles part of that group.
	// If the client has no historical data, only the deltas will be applied to the returned intervals, all other intervals will have nil averages.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_category in the request is invalid.
	//   - grpc.NotFound: the @skill_profile_category given is not found for the org.
	//   - grpc.Internal: error occurs when getting the historical data.
	ListHistoricalData(context.Context, *ListHistoricalDataReq) (*ListHistoricalDataRes, error)
	// Tries to create an entry for the given @delta for the org sending the request.
	// If the org already has an entry for it, it will update the already exisiting entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @delta in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the historical data interval.
	UpsertHistoricalDataDelta(context.Context, *UpsertHistoricalDataDeltaReq) (*UpsertHistoricalDataDeltaRes, error)
	// Tries to create entries for the given @deltas.
	// If the given org already has an entry for any of the deltas, it will replace the already existing entries.
	// This is made into a unary due to the UI's lack of support for client streams.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @deltas in the request are invalid.
	//   - grpc.Internal: error occurs when upserting the historical data deltas.
	UpsertHistoricalDataDeltas(context.Context, *UpsertHistoricalDataDeltasReq) (*UpsertHistoricalDataDeltasRes, error)
	// Gets all the skills that the org sending the request has.
	// Skills returned will be sorted by @skill_sid in ascending order.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the skills.
	ListSkills(context.Context, *ListSkillsReq) (*ListSkillsRes, error)
	// Deprecated: Do not use.
	// Builds and returns a call profile template for the org sending the request and the given @skill_profile_sid.
	// The template will be generated using the training data for said skill profile using the @training_data_range and @averages_calculation_range_in_months
	// from the client's saved forecasting parameters.
	// The @total_calls in the returned template be summed from the (@training_data_start_datetime - @averages_calculation_range_in_months) to @training_data_end_datetime,
	// or from @training_data_start_datetime to @training_data_end_datetime if @averages_calculation_range_in_months is 0.
	// The fixed averages fields in the call profile template, will be set to the averages that the skill profile has.
	// DEPRECATED as of Sep/7/2023 - Use BuildCallProfileTemplate instead.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.NotFound: the @skill_profile_sid given is not found for the org.
	//   - grpc.Internal: error occurs when building the call profile template.
	BuildCallProfileTemplateForSkillProfile(context.Context, *BuildCallProfileTemplateForSkillProfileReq) (*BuildCallProfileTemplateForSkillProfileRes, error)
	// Builds and returns a call profile template for the org sending the request and the given @skill_profile_category.
	// The template will be generated using the training data for said skill profile category using the @training_data_range and @averages_calculation_range_in_months
	// from the client's saved forecasting parameters.
	// The @total_calls in the returned template be summed from the (@training_data_start_datetime - @averages_calculation_range_in_months) to @training_data_end_datetime,
	// or from @training_data_start_datetime to @training_data_end_datetime if @averages_calculation_range_in_months is 0.
	// The fixed averages fields in the call profile template, will be set to the averages that the skill profile category has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_category in the request is invalid.
	//   - grpc.NotFound: the @skill_profile_category given is not found for the org.
	//   - grpc.Internal: error occurs when building the call profile template.
	BuildCallProfileTemplate(context.Context, *BuildCallProfileTemplateReq) (*BuildCallProfileTemplateRes, error)
	// Deprecated: Do not use.
	// Creates a mapping entry for the @inactive_skill_profile_sid to the @active_skill_profile_sid for the org sending the request.
	// DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @inactive_skill_profile_sid, or @active_skill_profile_sid in the request are invalid.
	//     the @inactive_skill_profile_sid given is of an active skill profile.
	//     the @active_skill_profile_sid given is of an inactive skill profile.
	//   - grpc.Internal: error occurs when creating the inactive skill profile mapping.
	CreateInactiveSkillProfileMapping(context.Context, *CreateInactiveSkillProfileMappingReq) (*CreateInactiveSkillProfileMappingRes, error)
	// Gets a list of enums that represent all of the forecaster types that are currently available for use
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Internal: error occurs when contacting the forecaster to get the available forecaster types.
	GetAvailableRegressionForecasterModelTypes(context.Context, *GetAvailableRegressionForecasterModelTypesReq) (*GetAvailableRegressionForecasterModelTypesRes, error)
	// Deprecated: Do not use.
	// Changes the current mapping for the given @inactive_skill_profile_sid to be disconnected.
	// DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @inactive_skill_profile_sid in the request is invalid.
	//   - grpc.NotFound: the skill profile is not found for the org.
	//   - grpc.Internal: the current mapping for the given @inactive_skill_profile_sid is already disconnected,
	//     the given @inactive_skill_profile_sid is of an active skill profile.
	DisconnectInactiveSkillProfileMapping(context.Context, *DisconnectInactiveSkillProfileMappingReq) (*DisconnectInactiveSkillProfileMappingRes, error)
	// Creates the given @skill_profile_group.
	// @skill_profile_group_sids will be ignored since associations cannot be created by this method.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_group in the request is invalid.
	//   - grpc.Internal: error occurs creating the skill profile group.
	CreateSkillProfileGroup(context.Context, *CreateSkillProfileGroupReq) (*CreateSkillProfileGroupRes, error)
	// Updates the given @skill_profile_group that has the @skill_profile_group_sid for the org sending the request.
	// @skill_profile_group_sids will be ignored since associations cannot be updated by this method.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_group in the request is invalid.
	//   - grpc.NotFound: the skill profile group to update doesn't exist.
	//   - grpc.Internal: error occurs updating the skill profile group.
	UpdateSkillProfileGroup(context.Context, *UpdateSkillProfileGroupReq) (*UpdateSkillProfileGroupRes, error)
	// Gets the skill profile groups that have the @skill_profile_group_sids for the org sending the request.
	// if @include_inactive is true then inactive groups will also be included, otherwise only active groups will be returned.
	// If @skill_profile_group_sids is empty it will get all the skill profile groups for the org.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_group_sids in the request is invalid.
	//   - grpc.Internal: error occurs getting the skill profile groups.
	ListSkillProfileGroups(context.Context, *ListSkillProfileGroupsReq) (*ListSkillProfileGroupsRes, error)
	// Updates associations of the given @skill_profile_group_sid for the org sending the request.
	// It will create the associations with the @skill_profile_sids_to_associate, and remove the associations with the @skill_profile_sids_to_disassociate.
	// Only one of the skill_profile_sids fields needs to be set, but both can be set on the same request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the values in the request are invalid.
	//   - grpc.Internal: error occurs updating the skill profile group associations.
	UpdateSkillProfileGroupAssociations(context.Context, *UpdateSkillProfileGroupAssociationsReq) (*UpdateSkillProfileGroupAssociationsRes, error)
	// Deletes deltas whose dates match the given @start_datetimes for the given @skill_profile_sid.
	// If no @start_datetimes are given, it will delete all the deltas that the given @skill_profile_sid has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid, or @start_datetimes in the request are invalid.
	//   - grpc.NotFound: no matching deltas are found for deletion.
	//   - grpc.Internal: error occurs during the deletion of the historical data interval.
	DeleteHistoricalDataDeltas(context.Context, *DeleteHistoricalDataDeltasReq) (*DeleteHistoricalDataDeltasRes, error)
	// Gets the top N skill profiles with the highest calls_count for org sending the request where N is @max_number_of_profiles.
	// It will also return the number of skills found for that profile.
	// Individual skills that each profile has will not be returned.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @max_number_of_profiles in the request is invalid.
	//   - grpc.Internal: error occurs when getting the skill profiles.
	ListTopSkillProfiles(context.Context, *ListTopSkillProfilesReq) (*ListTopSkillProfilesRes, error)
	// Gets the total number of skill profiles associated with the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the skill profiles count.
	GetSkillProfilesCount(context.Context, *GetSkillProfilesCountReq) (*GetSkillProfilesCountRes, error)
	// Builds a profile forecast using the provided @call_profile_template.
	// The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
	// (@training_data_range_end_datetime - @forecast_test_range_in_weeks) to @forecast_range_end_datetime.
	// The @total_calls in the @call_profile_template will be scaled using the same ranges as BuildCallProfileTemplate.
	// The @fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_category or @call_profile_template in the request is invalid.
	//   - grpc.Internal: error occurs during the building of the profile forecast.
	BuildProfileForecastByInterval(*BuildProfileForecastByIntervalReq, WFM_BuildProfileForecastByIntervalServer) error
	// Builds a profile forecast using the provided @call_profile_template.
	// The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
	// (@training_data_range_end_datetime - @forecast_test_range_in_weeks) to @forecast_range_end_datetime.
	// The @total_calls in the @call_profile_template will be scaled using the same ranges as BuildCallProfileTemplate.
	// The @fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
	// It also returns the statistics of the produced forecast by using the test data of the given @skill_profile_category.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_category or @call_profile_template in the request is invalid.
	//   - grpc.Internal: error occurs during the building of the profile forecast.
	BuildProfileForecastByIntervalWithStats(*BuildProfileForecastByIntervalWithStatsReq, WFM_BuildProfileForecastByIntervalWithStatsServer) error
	// Builds a profile forecast for the given @skill_profile_sid and org sending the request using the given @call_profile_template.
	// The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
	// @forecast_range_start_datetime to @forecast_range_end_datetime.
	// The @total_calls in the @call_profile_template will be scaled using the same ranges as BuildCallProfileTemplateForSkillProfile.
	// The intervals produced will be saved in the database.
	// The @fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid or @call_profile_template in the request are invalid.
	//   - grpc.NotFound: the @skill_profile_sid doesn't exist.
	//   - grpc.Internal: error occurs when upserting the profile forecast.
	UpsertProfileForecast(context.Context, *UpsertProfileForecastReq) (*UpsertProfileForecastRes, error)
	// Creates the given @call_profile_template for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @call_profile_template in the request is invalid.
	//   - grpc.Internal: error occurs during the creation of the call profile.
	CreateCallProfileTemplate(context.Context, *CreateCallProfileTemplateReq) (*CreateCallProfileTemplateRes, error)
	// Deletes a call profile template for the requesting org that has the given @call_profile_template_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @call_profile_template_sid in the request is invalid.
	//   - grpc.Internal: error occurs during the deletion of the call profile.
	DeleteCallProfileTemplate(context.Context, *DeleteCallProfileTemplateReq) (*DeleteCallProfileTemplateRes, error)
	// Creates an entry for the @regression_template for the requesting org.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs when creating the regression template.
	CreateRegressionTemplate(context.Context, *CreateRegressionTemplateReq) (*CreateRegressionTemplateRes, error)
	// Deletes a regression template for the requesting org that has the given @regression_template_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @regression_template_sid in the request is invalid.
	//   - grpc.Internal: error occurs during the deletion of the regression template.
	DeleteRegressionTemplate(context.Context, *DeleteRegressionTemplateReq) (*DeleteRegressionTemplateRes, error)
	// Gets all the regression templates that the org sending the request has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the regression templates.
	ListRegressionTemplates(context.Context, *ListRegressionTemplatesReq) (*ListRegressionTemplatesRes, error)
	// Deprecated: Do not use.
	// Gets the forecast data intervals for the given @skill_profile_sid.
	// DEPRECATED as of Sep/13/2023 - Use ListForecastIntervals instead.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.Internal: error occurs when getting the forecast data intervals.
	ListForecastIntervalsForSkillProfile(*ListForecastIntervalsForSkillProfileReq, WFM_ListForecastIntervalsForSkillProfileServer) error
	// Gets the forecast data intervals for the given @skill_profile_category.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_category in the request is invalid.
	//   - grpc.Internal: error occurs when getting the forecast data intervals.
	ListForecastIntervals(*ListForecastIntervalsReq, WFM_ListForecastIntervalsServer) error
	// Generates a regression forecast using the provided @regression_template.
	// It will generate forecast intervals for the skill profiles sids in @skill_profile_sids_to_forecast.
	// It will use the client's saved forecasting test range as the start datetime and the forecast range as the end datetime of the forecasted data.
	// It will use the client's saved interval width to divide the resulting forecast intervals.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: no @skill_profile_sids_to_forecast are given or the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs during the building of the regression forecast.
	BuildRegressionForecastByInterval(*BuildRegressionForecastByIntervalReq, WFM_BuildRegressionForecastByIntervalServer) error
	// Generates a regression forecast and calculates forecast statistics using the provided @regression_template.
	// It will generate forecast intervals for the skill profiles sids in @skill_profile_sids_to_forecast.
	// It will use the client's saved forecasting test range as the start datetime and the forecast range as the end datetime of the forecasted data.
	// It will use the client's saved interval width to divide the resulting forecast intervals.
	// The first message received will be the forecast statistics while all subsequent ones will be the forecast intervals.
	//
	// Errors:
	//   - grpc.Invalid: no @skill_profile_sids_to_forecast are given or the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs either during the when building the forecast or calculating the stats.
	BuildRegressionForecastByIntervalWithStats(*BuildRegressionForecastByIntervalWithStatsReq, WFM_BuildRegressionForecastByIntervalWithStatsServer) error
	// Gets the call profile templates that the org sending the request has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the templates.
	ListCallProfileTemplates(context.Context, *ListCallProfileTemplatesReq) (*ListCallProfileTemplatesRes, error)
	// Builds a regression forecast for the org using the given @regression_template and saves the resulting intervals in the db.
	// It will generate forecast intervals for the skill profiles sids in @save_forecasts_for_skill_profile_sids,
	// if the list is empty or has no valid skill profile sids, it will generate and save forecasts for all active skill profiles.
	// If any intervals produced already exist in the db, they will be replaced with the ones produced.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the regression forecast.
	UpsertRegressionForecast(context.Context, *UpsertRegressionForecastReq) (*UpsertRegressionForecastRes, error)
	// Tries to create an entry for the given @delta for the org sending the request.
	// If the org already has an entry for it, it will update the already exisiting entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @delta in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the forecast data delta.
	UpsertForecastDataDelta(context.Context, *UpsertForecastDataDeltaReq) (*UpsertForecastDataDeltaRes, error)
	// Tries to create entries for the given @deltas.
	// If the org already has entries for any of them, it will update the already existing entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @deltas in the request are invalid.
	//   - grpc.Internal: error occurs when upserting the forecast data deltas.
	UpsertForecastDataDeltas(context.Context, *UpsertForecastDataDeltasReq) (*UpsertForecastDataDeltasRes, error)
	// Deletes forecast data intervals/deltas based on the parameters provided.
	// If @delete_param is type skill_profile_category, then the intervals/deltas to be deleted will be
	// associated with that id. If @delete_param is type interval_sids, then the intervals/deltas to be
	// deleted will be contained in the list @interval_sids. The @delete_type field determines which
	// table(s) in the database the intervals/deltas will be deleted from.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one of the @delete_params is invalid
	//   - grpc.NotFound: no matching intervals/deltas are found for deletion.
	//   - grpc.Internal: error occurs during the deletion of the forecast data intervals/deltas.
	DeleteForecastIntervals(context.Context, *DeleteForecastIntervalsReq) (*DeleteForecastIntervalsRes, error)
	// Retrieves the history for all the skill profiles of the requesting org.
	// Each value in every interval that has the same @start_datetime of each skill profile will be summed then averaged and made into a single one.
	// When calculating the averages, each interval's values will be weighted by the number of @total_calls it has.
	// History will be sorted by @start_datetime in ascending order, and the range is determined by the client's historical range.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when retriving the history.
	ListHistoricalDataForAllSkillProfiles(context.Context, *ListHistoricalDataForAllSkillProfilesReq) (*ListHistoricalDataForAllSkillProfilesRes, error)
	// Converts the given @profile_tod and @profile_woms to a ProfileDOW and ProfileMOY.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @profile_tod or @profile_woms in the request are invalid.
	//   - grpc.Internal: error occurs when building the ProfileDOW or ProfileMOY.
	BuildDOWAndMOYProfiles(context.Context, *BuildDOWAndMOYProfilesReq) (*BuildDOWAndMOYProfilesRes, error)
	// Calculates and returns the averages in the training data for the given @skill_profile_sid.
	// Averages to be returned will be weighted by the number of calls that each training data interval has.
	// The start time that the training data will be averaged can be modified based on the forecasting parameter @averages_calculation_range_in_months,
	// which will subtract that many months from the training data range end datetime and set it as the start time.
	// If @averages_calculation_range_in_months is 0, it will use the training data range start datetime.
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.NotFound: the @skill_profile_sid given is not found.
	//   - grpc.Internal: error occurs when calculating the averages from the training data.
	CalculateTrainingDataAveragesForSkillProfile(context.Context, *CalculateTrainingDataAveragesForSkillProfileReq) (*CalculateTrainingDataAveragesForSkillProfileRes, error)
	// Calculates the averages for call characteristics using the historical data of the given @skill_profile_sids, @skill_profile_group_sids and org sending the request.
	// If no @skill_profile_sids are given, it will calculate the averages for all skill profiles for the org sending the request.
	// If no @skill_profile_group_sids are given, it will calculate the averages for all skill profile groups for the org sending the request.
	// Averages will be weighted by the number of calls that each historical data interval has.
	// Once the averages are calculated, they will be updated in the db for those skill profiles.
	//
	// If a nil @datetime_range is given then the range used will be @training_data_range_end_datetime - @averages_calculation_range_in_months to the @training_data_range_end_datetime from the forecasting parameters.
	// If @averages_calculation_range_in_months is 0, it will use the @training_data_range_start_datetime as the start datetime of the range.
	//
	// If @exclude_skill_profiles_with_manual_averages is true, it will exclude skill profiles and groups that have manual averages from the calculation
	// even if those skill profiles and groups are in @skill_profile_sids or @skill_profile_group_sids respectively.
	//
	// Errors:
	//   - grpc.Internal: error occurs when calculating the averages from the historical data.
	UpdateSkillProfileAveragesUsingHistoricalData(context.Context, *UpdateSkillProfileAveragesUsingHistoricalDataReq) (*UpdateSkillProfileAveragesUsingHistoricalDataRes, error)
	// Updates the call center @node that has the given @call_center_node_sid.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this call center node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the one or more of the fields in the request are invalid.
	//   - grpc.Internal: error occurs when updating the call center node.
	//   - grpc.NotFound: entry to be updated doesn't exist.
	UpdateCallCenterNode(context.Context, *UpdateCallCenterNodeReq) (*UpdateCallCenterNodeRes, error)
	// Creates the given client @node for the org sending the request and @parent_sid in the node.
	// The @client_node_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent call center node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// The @origin_sid must be set to nil, since this method can only make an original node.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @name, @parent_sid, or @time_zone_val is invalid.
	//   - grpc.NotFound: parent call center node doesn't exist, or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the client node.
	CreateClientNode(context.Context, *CreateClientNodeReq) (*CreateClientNodeRes, error)
	// Updates a client node for the org sending the request that has the given @client_node_sid and @schedule_scenario_sid.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this client node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @node have invalid values.
	//   - grpc.Internal: error occurs when updating the client @node.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the given @parent_sid (call_center_node_sid) belongs to a different scenario than this @node.
	UpdateClientNode(context.Context, *UpdateClientNodeReq) (*UpdateClientNodeRes, error)
	// Creates the given location @node for the org sending the request and parent @client_node_sid.
	// The @location_node_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent client node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// The @origin_sid must be set to nil, since this method can only make an original node.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @node have invalid values.
	//   - grpc.NotFound: parent client node doesn't exist or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the location node.
	CreateLocationNode(context.Context, *CreateLocationNodeReq) (*CreateLocationNodeRes, error)
	// Updates a location node corresponding to the given @location_node_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this location node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @location_node have invalid values.
	//   - grpc.Internal: error occurs when updating the location node.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the given parent @client_node_sid belongs to a different scenario than the node to update.
	UpdateLocationNode(context.Context, *UpdateLocationNodeReq) (*UpdateLocationNodeRes, error)
	// Creates the given program @node for the org sending the request and parent @location_node_sid.
	// The @program_node_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent location node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// The @origin_sid must be set to nil, since this method can only make an original node.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @node have invalid values.
	//   - grpc.NotFound: parent location node doesn't exist or belongs to a different scenario than the one given.
	//     the @skill_profile_category does not exist.
	//   - grpc.Internal: error occurs when creating the program node.
	CreateProgramNode(context.Context, *CreateProgramNodeReq) (*CreateProgramNodeRes, error)
	// Updates a program node for the given @program_node_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this program node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @program_node have invalid values.
	//   - grpc.Internal: error occurs when updating the program node.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the given parent @location_node_sid belongs to a different scenario than the program node to update.
	//     the @skill_profile_category does not exist.
	UpdateProgramNode(context.Context, *UpdateProgramNodeReq) (*UpdateProgramNodeRes, error)
	// Lists the program nodes with the given @program_node_sids for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the given @program_node_sids are invalid.
	//   - grpc.Internal: error occurs when listing the program nodes.
	ListProgramNodesBySid(context.Context, *ListProgramNodesBySidReq) (*ListProgramNodesBySidRes, error)
	// Creates the given @constraint_rule for the org sending the request.
	// The @constraint_rule_sid and @skill_proficiency_sid (if one was created) of the new entities will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// If @rule_type is set to MIN_SKILL_LEVEL, the @member_target_entity field must be set with a skill proficiency and the @constraint_rule.target_sid will be ignored.
	// If the @member_target_entity is for a skill proficiency, that skill proficiency will be created with the given @constraint_rule as parent.
	// If @rule_type is NOT MIN_SKILL_LEVEL then the @target_sid must be that of a scheduling activity.
	// The all other @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @constraint_rule have invalid values.
	//   - grpc.NotFound: the given @target_sid for the given @rule_type, or @parent_entity don't exist.
	//   - grpc.Internal: error occurs when creating the constraint rule.
	CreateConstraintRule(context.Context, *CreateConstraintRuleReq) (*CreateConstraintRuleRes, error)
	// Updates the constraint rule corresponding for given @contraint_rule_sid for the org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this constraint rule since it cannot be changed.
	// If @rule_type is set to MIN_SKILL_LEVEL, the @member_target_entity field must be set with a skill proficiency, otherwise it should not be set and field will be ignored.
	// If the @target_sid is for a different skill proficiency than the current one the constraint rule has as a target,
	// the old one will be deleted and a new one will be created for the given @member_target_entity.
	// If @rule_type is NOT MIN_SKILL_LEVEL then the @target_sid must be that of a scheduling activity.
	// The all other @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @constraint_rule have invalid values.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the @parent_entity has a different @schedule_scenario_sid than the constraint rule.
	//     : the given @target_sid for the given @rule_type, or @parent_entity don't exist.
	//   - grpc.Internal: error occurs when updating the constraint rule.
	UpdateConstraintRule(context.Context, *UpdateConstraintRuleReq) (*UpdateConstraintRuleRes, error)
	// Deletes a constraint rule with the coresponding @constraint_rule_sid for the org sending the request.
	// It also deletes the entity referenced by the @target_sid and @rule_type if said entity is not a member of any other entity or the on call scheduling activity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @constraint_rule_sid is invalid for the org making the request.
	//   - grpc.NotFound: the given @constraint_rule doesn't exist.
	//   - grpc.Internal: error occurs when removing the constraint rule.
	DeleteConstraintRule(context.Context, *DeleteConstraintRuleReq) (*DeleteConstraintRuleRes, error)
	// Creates the given @non_skill_activity for the org sending the request.
	// Will also create a scheduling activity wrapper for the non skill activity.
	// The @non_skill_activity_sid and @scheduling_activity_sid of the new entities will be returned in the response.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @non_skill_activity have invalid values.
	//   - grpc.NotFound: the @schedule_scenario_sid doesn't exist.
	//   - grpc.Internal: error occurs when creating the non skill activity or scheduling activity.
	CreateNonSkillActivity(context.Context, *CreateNonSkillActivityReq) (*CreateNonSkillActivityRes, error)
	// Updates a non skill activity that has the given @non_skill_activity_sid with the given values.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: @non_skill_activity fields have invalid values.
	//   - grpc.NotFound: non skill activity for the given @non_skill_activity_sid doesn't exist.
	//   - grpc.Internal: error occurs when updating the non skill activity.
	UpdateNonSkillActivity(context.Context, *UpdateNonSkillActivityReq) (*UpdateNonSkillActivityRes, error)
	// Lists the non skill activities that belong to the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:.
	//   - grpc.Internal: error occurs when listing the activites.
	ListNonSkillActivities(context.Context, *ListNonSkillActivitiesReq) (*ListNonSkillActivitiesRes, error)
	// Lists the IDs of non skill activities that belong to the org sending the request which have the given @relationship_type with the @associated_entity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @associated_entity or @relationship_type are invalid.
	//   - grpc.Internal: error occurs when listing the associations.
	ListNonSkillActivityAssociations(context.Context, *ListNonSkillActivityAssociationsReq) (*ListNonSkillActivityAssociationsRes, error)
	// Lists the candidate scheduling activities for a constraint or placement rule, inherited through given @parent_of_rule for @schedule_scenario_sid for the org making the request.
	// @parent_of_rule may be any type of node, agent group, or shift template which the rule will belong to.
	// If the rule will belong to a wfm agent, the agent group must be supplied instead to get a relevant set of candidate scheduling activities.
	// Member non skill activity of each scheduling activity will be included in the response.
	// The on call scheduling activity will always be included.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @parent_of_rule is invalid.
	//   - grpc.NotFound: @parent_of_rule doesn't exist
	//   - grpc.Internal: error occurs when applying inheritance or getting the nodes from @parent_of_rule.
	ListCandidateSchedulingActivities(context.Context, *ListCandidateSchedulingActivitiesReq) (*ListCandidateSchedulingActivitiesRes, error)
	// Creates an agent group with the provided parameters.
	// A successful response should contain the @agent_group_sid of the newly created entity.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @name, or @parent_entity are invalid.
	//   - grpc.NotFound: @parent_entity doesn't exist
	//   - grpc.Internal: error occurs when creating the agent group.
	CreateAgentGroup(context.Context, *CreateAgentGroupReq) (*CreateAgentGroupRes, error)
	// Updates the agent group corresponding to the @agent_group_sid, @name, and @parent_entity.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this agent group since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @agent_group_sid, @parent_entity, or @name in the request are invalid.
	//   - grpc.Internal: error occurs when updating the agent group.
	//   - grpc.AlreadyExists: an agent group with the given @name already exists.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the @parent_entity has a different @schedule_scenario_sid than the agent group.
	UpdateAgentGroup(context.Context, *UpdateAgentGroupReq) (*UpdateAgentGroupRes, error)
	// Updates a wfm agent for the given @wfm_agent_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// The @tcn_agent_sid cannot be updated.
	// Required permission:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @wfm_agent have invalid values.
	//   - grpc.NotFound: WFM agent with the given @wfm_agent_sid doesn't exist.
	//   - grpc.Internal: error occurs when updating the wfm agent.
	UpdateWFMAgent(context.Context, *UpdateWFMAgentReq) (*UpdateWFMAgentRes, error)
	// Lists all wfm agents for the org sending the request.
	// if @include_inactive is true then inactive agents will also be included, otherwise only active agents will be returned.
	// if @include_skill_proficiencies is true then agents returned will include their skill proficiencies.
	// if @include_agent_groups is true then the @agent_groups_by_agent response field will be set with a list of agent groups correlating to each agents index in the @wfm_agents field.
	// if @include_agent_groups is set to true, the @agent_group_schedule_scenario_sid field must be set, so that the agent groups for the correct scenario are returned.
	// if @include_agent_groups is set to true, and @agent_group_schedule_scenario_sid is not set, the agent groups will not be filtered by schedule scenario.
	// if @include_agent_groups is set to false, the @agent_group_schedule_scenario_sid will be ignored.
	// @agent_group_schedule_scenario_sid does not effect which @wfm_agents are returned.
	// WFM agents with no associated agent_groups will have an empty slice in agent_groups_by_agent at their correlated index.
	// Required Permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the wfm agents.
	ListAllWFMAgents(context.Context, *ListAllWFMAgentsReq) (*ListAllWFMAgentsRes, error)
	// Lists all candidate wfm agents for the org sending the request and given @agent_group_sid.
	// A WFM agent is considered a candidate when it's active and it doesn't already belong to the given agent group.
	// Member entities will not be returned.
	// Required Permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: @agent_group_sid has an invalid value.
	//   - grpc.Internal: error occurs when getting the wfm agents.
	ListCandidateWFMAgents(context.Context, *ListCandidateWFMAgentsReq) (*ListCandidateWFMAgentsRes, error)
	// Lists all wfm agents who are not grouped with any agent group for the given org sending the request that were created at or after the given @created_after_datetime.
	// If @schedule_scenario_sid is positive, it will filter further to get only agents who are not grouped with any agent group for that scenario.
	// if @include_skill_proficiencies is true then agents returned will include their skill proficiencies.
	// Member entities will not be returned.
	// Required Permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: @created_after_datetime has an invalid value.
	//   - grpc.Internal: error occurs when getting the wfm agents.
	ListUngroupedWFMAgents(context.Context, *ListUngroupedWFMAgentsReq) (*ListUngroupedWFMAgentsRes, error)
	// Gets the wfm_agent_sids with the given @tcn_agent_sids for the org sending the request.
	// Returns a map where Key: tcn_agent_sid - Value: wfm_agent_sid.
	// If the wfm_agent_sid is not found for any @tcn_agent_sids, they will not have an entry in the returned @sids.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @tcn_agent_sids are invalid.
	//   - grpc.Internal: error occours while listing the wfm_agent_sids.
	ListWFMAgentSids(context.Context, *ListWFMAgentSidsReq) (*ListWFMAgentSidsRes, error)
	// Lists the IDs of wfm agents that belong to the org sending the request which are associated with the given @agent_group_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @agent_group_sid is invalid.
	//   - grpc.Internal: error occurs when listing the wfm agents.
	ListWFMAgentsAssociatedWithAgentGroup(context.Context, *ListWFMAgentsAssociatedWithAgentGroupReq) (*ListWFMAgentsAssociatedWithAgentGroupRes, error)
	// Creates a membership association for each of the given @wfm_agent_sids with the given @agent_group_sid.
	// The @schedule_scenario_sid must match the scenario of the agent group and wfm agents.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @wfm_agent_sids, or @agent_group_sid are invalid.
	//   - grpc.NotFound: the @wfm_agent_sids or @agent_group_sid don't exist for the org or given @schedule_scenario_sid.
	//   - grpc.Internal: error occurs when creating the association.
	CreateWFMAgentMemberships(context.Context, *CreateWFMAgentMembershipsReq) (*CreateWFMAgentMembershipsRes, error)
	// Deletes a membership association for each of the given @wfm_agent_sids with the given @agent_group_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @wfm_agent_sids, or @agent_group_sid are invalid.
	//   - grpc.NotFound: any of the given memberships to delete do not exist.
	//   - grpc.Internal: error occurs when deleting the association.
	DeleteWFMAgentMemberships(context.Context, *DeleteWFMAgentMembershipsReq) (*DeleteWFMAgentMembershipsRes, error)
	// Deletes all membership associations for the given @wfm_agent_sids with the given @agent_group_sids.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @wfm_agent_sids, or @agent_group_sids are invalid.
	//   - grpc.Internal: error occurs when deleting the associations.
	DeleteWFMAgentsMemberships(context.Context, *DeleteWFMAgentsMembershipsReq) (*DeleteWFMAgentsMembershipsRes, error)
	// Builds and returns the diagnostics for the wfm agent associated with the given @wfm_agent_sid or @agent_group_sid for the org sending the request.
	// Response will only contain:
	//
	//	one element if build for a single @wfm_agent_sid.
	//	one element for each WFM agent if build for an @agent_group_sid.
	//
	// Required permissions:
	//
	//	NONE
	//	- grpc.Invalid: the @wfm_agent_sid, or @agent_group_sid is invalid.
	//	- grpc.NotFound: the given @wfm_agent_sid doesn't exist or the @agent_group_sid has no agents.
	//	- grpc.Internal: error occurs building the diagnostics.
	BuildAgentDiagnostics(context.Context, *BuildAgentDiagnosticsReq) (*BuildAgentDiagnosticsRes, error)
	// Creates a shift template for the org sending the request with the provided parameters
	// The @shift_template_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent program node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @name, or @program_node_sid are invalid.
	//   - grpc.AlreadyExists: a shift template with the given @name already exists.
	//   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the shift template.
	CreateShiftTemplate(context.Context, *CreateShiftTemplateReq) (*CreateShiftTemplateRes, error)
	// Updates a shift template for the given @shift_template_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this shift template since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @shift_template_sid, @name, @program_node_sid are invalid.
	//   - grpc.AlreadyExists: a shift template with the given @name already exists.
	//   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the shift template to update.
	//   - grpc.Internal: error occurs when updating the shift template.
	UpdateShiftTemplate(context.Context, *UpdateShiftTemplateReq) (*UpdateShiftTemplateRes, error)
	// Lists the shift templates matching the specified @shift_template_sids for the org sending the request.
	// If @include_placement_rules is set to true, the @shift_templates will be returned with their member placement rules.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @shift_template_sids are invalid.
	//   - grpc.Internal: error occurs when getting the data.
	ListShiftTemplatesBySids(context.Context, *ListShiftTemplatesBySidsReq) (*ListShiftTemplatesBySidsRes, error)
	// Builds and returns the diagnostics for the shift template associated with the given @shift_template_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//	- grpc.Invalid: the @shift_template_sid is invalid.
	//	- grpc.NotFound: the given @shift_template_sid doesn't exist for the org sending the request.
	//	- grpc.Internal: error occours building the diagnostics for the shift template.
	BuildShiftTemplateDiagnostics(context.Context, *BuildShiftTemplateDiagnosticsReq) (*BuildShiftTemplateDiagnosticsRes, error)
	// Creates a placement rule for org sending the request with the provided parameters.
	// The @placement_rule_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent shift template.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in the @placement_rule are invalid.
	//   - grpc.NotFound: the parent shift template doesn't exist or belongs to a different scenario than the one given.
	//     the scheduling activity to associate with the placement rule doesn't exist or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the placement rule.
	CreatePlacementRule(context.Context, *CreatePlacementRuleReq) (*CreatePlacementRuleRes, error)
	// Updates a placement rule corresponding with the given @placement_rule_sid for the org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this placement rule since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the one or more of the fields in the @placement_rule are invalid.
	//   - grpc.Internal: error occurs when updating the placement rule.
	//   - grpc.NotFound: entry to be updated doesn't exist.
	//     : the parent shift template or related scheduling activity don't exist or belong to a different scenario than the placement rule to update.
	UpdatePlacementRule(context.Context, *UpdatePlacementRuleReq) (*UpdatePlacementRuleRes, error)
	// Deletes a placement rule with the coresponding @placement_rule_sid for the org sending the request.
	// It also deletes the scheduling activity referenced by the @scheduling_activity_sid if said activity is not a member of any other entity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @placement_rule_sid is invalid for the org making the request.
	//   - grpc.NotFound: the given @placement_rule doesn't exist.
	//   - grpc.Internal: error occurs when removing the placement rule.
	DeletePlacementRule(context.Context, *DeletePlacementRuleReq) (*DeletePlacementRuleRes, error)
	// Creates an open times pattern for the org sending the request with the provided parameters.
	// The @open_times_pattern_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in the @open_times_pattern are invalid.
	//   - grpc.NotFound: the parent entity doesn't exist.
	//   - grpc.Internal: error occurs when creating the open times pattern.
	CreateOpenTimesPattern(context.Context, *CreateOpenTimesPatternReq) (*CreateOpenTimesPatternRes, error)
	// Updates an open times pattern for the given @open_times_pattern_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this open times pattern since it cannot be changed.
	// Required permission:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @open_times_pattern have invalid values.
	//   - grpc.NotFound: the given @open_times_pattern or it's @parent_entity doesn't exist.
	//   - grpc.Internal: error occurs when updating the open times pattern.
	UpdateOpenTimesPattern(context.Context, *UpdateOpenTimesPatternReq) (*UpdateOpenTimesPatternRes, error)
	// Deletes an open times pattern with the coresponding @open_times_pattern_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @open_times_pattern_sid is invalid for the org making the request.
	//   - grpc.NotFound: the given @open_times_pattern doesn't exist.
	//   - grpc.Internal: error occurs when removing the open times pattern.
	DeleteOpenTimesPattern(context.Context, *DeleteOpenTimesPatternReq) (*DeleteOpenTimesPatternRes, error)
	// Gets the inherited, own, and resulting bitmaps for the open times patterns of @node_to_check for @schedule_scenario_sid and the org sending the request.
	// The @schedule_scenario_sid must match the scenario of the @node_to_check.
	// If @bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
	// If @bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the open times patterns.
	// If @bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the open times patterns.
	// The bitmaps will be generated for the span of @datetime_range.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_to_check is invalid for @schedule_scenario_sid and the org making the request.
	//     : the @datetime_range is invalid.
	//   - grpc.NotFound: the given @node_to_check doesn't exist.
	//   - grpc.Internal: error occurs when getting the open times pattern bitmaps.
	GetOpenTimesBitmaps(context.Context, *GetOpenTimesBitmapsReq) (*GetOpenTimesBitmapsRes, error)
	// Creates an agent availability pattern for the org sending the request with the provided parameters.
	// The @agent_availability_pattern_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: the parameters in the @agent_availability_pattern are invalid.
	//   - grpc.NotFound: the parent entity doesn't exist.
	//   - grpc.Internal: error occurs when creating the agent availability pattern.
	CreateAgentAvailabilityPattern(context.Context, *CreateAgentAvailabilityPatternReq) (*CreateAgentAvailabilityPatternRes, error)
	// Updates an agent availability pattern for the given @agent_availability_pattern_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this agent availability pattern since it cannot be changed.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @agent_availability_pattern have invalid values.
	//   - grpc.Internal: error occurs when updating the agent avilability pattern.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the @parent_entity has a different @schedule_scenario_sid than the agent availability pattern.
	UpdateAgentAvailabilityPattern(context.Context, *UpdateAgentAvailabilityPatternReq) (*UpdateAgentAvailabilityPatternRes, error)
	// Deletes an agent availability pattern with the coresponding @agent_availability_pattern_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @agent_availability_pattern_sid has an invalid value.
	//   - grpc.NotFound: the @agent_availability_pattern with the given sid doesn't exist.
	//   - grpc.Internal: error occurs when removing the agent availability pattern.
	DeleteAgentAvailabilityPattern(context.Context, *DeleteAgentAvailabilityPatternReq) (*DeleteAgentAvailabilityPatternRes, error)
	// Gets the inherited, own, and resulting bitmaps for the agent availability patterns of @entities_to_check for @schedule_scenario_sid and the org sending the request.
	// The @schedule_scenario_sid must match the scenario of the @entities_to_check.
	// @entities_to_check must have the entity_type field set with a wfm agent, agent group or a type of node.
	// If an availability bitmap is requested for an agent group, the bitmaps for all of it's member agents will be returned instead.
	// The bitmaps will be generated for the span of @datetime_range.
	// If @bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
	// If @bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the availability patterns.
	// If @bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the availability patterns.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @entities_to_check is invalid for @schedule_scenario_sid and the org making the request.
	//     : the @datetime_range is invalid.
	//   - grpc.NotFound: the given @entities_to_check don't exist.
	//   - grpc.Internal: error occurs when getting the agent availability pattern bitmaps.
	GetAvailabilityBitmaps(context.Context, *GetAvailabilityBitmapsReq) (*GetAvailabilityBitmapsRes, error)
	// Upserts an association for the given @non_skill_activity_sid to the given @node.
	// All downstream members of the entity will have their inheritance state cleared, and inherit the given association.
	// If an association already exists between the non skill activity and the @node then their @relationship_type will be updated.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// If a NOT_ASSOCIATED_WITH relationship is being created, the tree will be checked for conflicting downstream effects.
	// If any member rules, are referencing the non skill activity and @relationship_type is NOT_ASSOCIATED_WITH, then the upsert will not take effect, and the list of related entities to be updated/removed first will be returned.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @non_skill_activity_sid, @node or @association_type are invalid.
	//     : the non skill activity and @node belong to different scenarios.
	//   - grpc.NotFound: the @non_skill_activity_sid or @node don't exist.
	//   - grpc.Internal: error occurs when upserting the association.
	UpsertNonSkillActivityAssociation(context.Context, *UpsertNonSkillActivityAssociationReq) (*UpsertNonSkillActivityAssociationRes, error)
	// Creates skill proficiencies for the org sending the request with the provided parameters.
	// The @schedule_scenario_sid must match the scenario of the @parent_entities.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in a @proficiency, or the @schedule_scenario_sid are invalid.
	//   - grpc.NotFound: for any of the given @skill_proficiencies:
	//     the @parent_entity doesn't exist.
	//     the @skill_sid doesn't exist.
	//     the skill profile with @preferred_skill_profile_sid doesn't contain the given @skill_sid.
	//   - grpc.AlreadyExists: a skill proficiency with the given @skill_sid and @parent_entity already exists.
	//   - grpc.Internal: error occurs when creating the skill proficiencies.
	CreateSkillProficiencies(context.Context, *CreateSkillProficienciesReq) (*CreateSkillProficienciesRes, error)
	// Updates skill proficiencies corresponding to the given @skill_proficiency_sids and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @skill_sid and @parent_entity field of each proficiency will be ignored since it cannot be updated.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @skill_proficiencies have invalid values.
	//   - grpc.Internal: error occurs when updating the skill proficiencies.
	//   - grpc.NotFound: for any of the given @skill_proficiencies:
	//     the @skill_sid doesn't exist.
	//     the skill profile with @preferred_skill_profile_sid doesn't contain the skill of the given skill proficiency.
	//   - grpc.AlreadyExists: a skill proficiency with the given @skill_sid and @parent_entity already exists.
	UpdateSkillProficiencies(context.Context, *UpdateSkillProficienciesReq) (*UpdateSkillProficienciesRes, error)
	// Deletes a skill proficiency with the corresponding @skill_proficiency_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: the @skill_proficiency_sid is invalid for the org making the request.
	//	-grpc.NotFound: the skill proficiency with the given @skill_proficiency_sid doesn't exist.
	//	-grpc.Internal: error occurs when removing the skill proficiency.
	DeleteSkillProficiency(context.Context, *DeleteSkillProficiencyReq) (*DeleteSkillProficiencyRes, error)
	// Copies the existing scenario with the @scenario_sid_to_copy for the org sending the request using the provided parameters.
	// Scheduling targets of entities in the scenario to copy will also be copied.
	// The new @schedule_scenario_sid of the new entity will be returned in the response.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:gg
	//   - grpc.Invalid: the parameters @scenario_sid_to_copy or any others are invalid.
	//   - grpc.NotFound: the scenario corresponding to the @scenario_sid_to_copy doesn't exist.
	//   - grpc.Internal: error occurs when creating/coping the new scenario.
	CopyScenario(context.Context, *CopyScenarioReq) (*CopyScenarioRes, error)
	// Creates a new schedule scenario for the org sending the request with the provided parameters.
	// The new @schedule_scenario_sid of the new entity will be returned in the response.
	// It also creates 1 of each of the following: call center, client, program, location node, and on call scheduling activity (if it doesn't exist already for the org).
	// The @node_description fields may optionally be left blank.
	// The @copied_from_scenario_sid field will be ignored, as it will be set to nil in the newly created scenario.
	// The @creation_datetime and @is_default fields will also be ignored and set as the current time and false respectively.
	// The @skill_profile_category will be associated with the created program node.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: parameters in the @req are invalid for the org making the request.
	//   - grpc.NotFound: the @skill_profile_category does not exist.
	//   - grpc.Internal: error occurs when creating the new scenario, or any of the node entities.
	CreateScheduleScenarioWithNodes(context.Context, *CreateScheduleScenarioWithNodesReq) (*CreateScheduleScenarioWithNodesRes, error)
	// Updates a schedule scenario corresponding to the given @schedule_scenario_sid and org sending the request with the provided parameters.
	// Only the @name, @description and @datetime_set_to_inactive fields may be updated, and must be filled in with current value if updating the field is not desired.
	// The @schedule_scenario_sid must be the original for the schedule scenario since it cannot be updated.
	// All other fields will be ignored since they cannot be updated.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: one or more fields in the @scenario have invalid values.
	//	-grpc.NotFound: the scenario with the given @schedule_scenario_sid doesn't exist.
	//	-grpc.Internal: error occurs when updating the scenario.
	UpdateScheduleScenario(context.Context, *UpdateScheduleScenarioReq) (*UpdateScheduleScenarioRes, error)
	// Gets config entities that match the org sending the request and given @entity_type and that belong to the @belongs_to_entity and @schedule_scenario_sid parameters.
	// If @include_member_lists is set to true the member lists of the entities retrieved will be included.
	// Any nodes in the returned set of entities will have inherited nonskill associations applied to the node's member_nonskill_activity fields.
	// Prior to listing the entities it will Resync TCN Agents and skill proficiencies.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @entity_type, or @belongs_to_entity have invalid values.
	//   - grpc.Internal: error occurs when getting the config entities.
	ListConfigEntities(context.Context, *ListConfigEntitiesReq) (*ListConfigEntitiesRes, error)
	// Deletes shift instances with the corresponding @shift_instance_sids for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: the @shift_instance_sids are invalid for the org making the request.
	//	-grpc.NotFound: the shift instances with the given @shift_instance_sids don't exist.
	//	-grpc.Internal: error occurs when removing the shift instances.
	DeleteShiftInstances(context.Context, *DeleteShiftInstancesReq) (*DeleteShiftInstancesRes, error)
	// Builds and returns the diagnostics and @nodes_checked for the @node_to_check for @schedule_scenario_sid and the org sending the request.
	// The @schedule_scenario_sid must match the scenario of the @node_to_check.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_to_check is invalid for @schedule_scenario_sid and the org making the request.
	//   - grpc.NotFound: the given @node_to_check doesn't exist.
	//   - grpc.Internal: error occurs when building the diagnostics.
	BuildNodeDiagnostics(context.Context, *BuildNodeDiagnosticsReq) (*BuildNodeDiagnosticsRes, error)
	// Builds and returns the global diagnostics and @nodes_checked for the @schedule_scenario_sid and the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @schedule_scenario_sid has an invalid values.
	//   - grpc.NotFound: the given @schedule_scenario_sid doesn't exist for the org making the request.
	//   - grpc.Internal: error occurs when building the diagnostics.
	BuildGlobalDiagnostics(context.Context, *BuildGlobalDiagnosticsReq) (*BuildGlobalDiagnosticsRes, error)
	// Gets the published schedule for the corresponding @datetime_range for the org sending the request.
	// Will create a published schedule if it does not exist already for the org sending the request.
	// if @include_shift_instances is true, the shift instances associated within @datetime_range for the published schedule will be returned in the published schedules shift_instances field.
	// if @node_selector is set, then only instances belonging to the origin of @node_selector and its children node will be returned, otherwise all matching shift instances will be included.
	// if @include_shift_template is true, any returned shift instances will have their orginating shift template returned in their origin_shift_template field.
	// if @include_shift_segments is true, any returned shift instances will have their shift_segments field set, otherwise the field will be left nil.
	// if @include_scheduling_activity is true, any returned shift segments will have their scheduling_activity field set, otherwise the field will be left nil.
	// if @include_activity is true, any returned scheduling activities will have their member_non_skill_activity field set, otherwise the field will be left nil.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range, @metric_types are invalid.
	//   - grpc.NotFound: the @node_selector doesn't exist.
	//   - grpc.Internal: error occurs when getting the published schedule.
	GetPublishedSchedule(context.Context, *GetPublishedScheduleReq) (*GetPublishedScheduleRes, error)
	// Gets the required calls intervals for the published schedule for the corresponding @viewing_range, for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the published schedule doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	GetPublishedScheduleRequiredCalls(context.Context, *GetPublishedScheduleRequiredCallsReq) (*GetPublishedScheduleRequiredCallsRes, error)
	// Gets the required calls intervals for the specified draft schedule for the corresponding @viewing_range, for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the draft schedule doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	GetDraftScheduleRequiredCalls(context.Context, *GetDraftScheduleRequiredCallsReq) (*GetDraftScheduleRequiredCallsRes, error)
	// Creates a draft schedule for the org sending the request with the provided parameters.
	// The @draft_schedule_sid of the new entity will be returned in the response.
	// The @created_at and @last_updated_at fields will be set to the current time and null respectively.
	// The draft schedule will include the published schedule's shift instances and shift segments.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: the @name, @description or @scheduling_range are invalid.
	//   - grpc.Internal: error occurs when creating the draft schedule.
	CreateDraftSchedule(context.Context, *CreateDraftScheduleReq) (*CreateDraftScheduleRes, error)
	// Updates the @name, @description, and @datetime_range of the given @draft_schedule_sid for the org sending the request.
	// The @name, @description, and @datetime_range fields must all be set with their desired values.
	// If @delete_shifts_not_in_range if true, then any instances outside of the @datetime_range will be permenantly deleted with no recovery option.
	// If @delete_shifts_not_in_range is false, instances outside of the new @datetime_range will be retained, for use if the datetime range is expanded to cover the instances in the future.
	// If @copy_shifts_into_new_range time is true, then new the portion of an expanded @datetime_range which has no instances will copy the instances from the published schedule. If false, no instances will be created for an expanded @scheduling_range.
	// If @get_updated_shifts is true, then the returned draft schedule will also contain the shift instances and segments in the given @datetime_range.
	// Errors:
	//   - grpc.Invalid: the @name, @description or @datetime_range are invalid.
	//   - grpc.Internal: error occurs when updating the schedule or its instances.
	UpdateDraftSchedule(context.Context, *UpdateDraftScheduleReq) (*UpdateDraftScheduleRes, error)
	// Builds a draft schedule for the given @node_selector in @schedule_scenario_sid over @schedule_scenario_scheduling_range for @draft_schedule_sid and the org making the request.
	// The @schedule_scenario_scheduling_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
	// @include parameters are used when retrieving the resulting draft schedule, and work in the same way as for GetDraftSchedule.
	// Will return diagnostics for the newly built schedule, or just diagnostics if the schedule cannot be built successfully due to diagnostic error.
	BuildDraftSchedule(context.Context, *BuildDraftScheduleReq) (*BuildDraftScheduleRes, error)
	// Publishes the shift instances of the given @draft_schedule_sid to the published schedule of the org sending the request.
	// Overlapping shift instances that aren't locked will be replaced with the instances from the draft schedule.
	// If @ignore_diagnostics_errors is set to true, it will publish the schedule regardless of any diagnostics errors,
	// otherwise it will return those diagnostic errors and not publish the schedule.
	// @include parameters are used when retrieving the resulting published schedule, and work in the same way as for GetDraftSchedule.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in the @req are invalid..
	//   - grpc.NotFound: @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when publishing the draft schedule.
	PublishDraftSchedule(context.Context, *PublishDraftScheduleReq) (*PublishDraftScheduleRes, error)
	// Resets the shifts on the @draft_schedule_sid for the org sending the request.
	// Shifts overlapping the @datetime_range will be deleted, then that @datetime_range will be populated with shifts from the published schedule.
	// If no @datetime_range is provided, all shifts will be removed from the @draft_schedule_sid, and published shifts will be copied across the draft's datetime range.
	// If @unlocked_only is set to true, only unlocked shifts will be deleted, and the locked shift instances will remain.
	//
	//	The published schedule will still be copied, so any newly overlapping shifts will result in an overlap warning.
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range or @draft_schedule_sid are invalid for the org sending the request.
	//   - grpc.NotFound: the @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when resetting the schedule.
	ResetDraftSchedule(context.Context, *ResetDraftScheduleReq) (*ResetDraftScheduleRes, error)
	// Gets the draft schedule with @draft_schedule_sid for the corresponding @datetime_range for the org sending the request.
	// The @datetime_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
	// if @include_shift_instances is true, the shift instances associated within @datetime_range for the draft schedule will be returned in the draft schedules shift_instances field.
	// if @node_selector is set then only instances belonging to the origin of @node_selector and its children node will be returned, otherwise all matching shift instances will be included.
	// @node_selector must be for a node that belongs to the same schedule scenario as @draft_schedule_sid.
	// if @include_shift_template is true, any returned shift instances will have their orginating shift template returned in their origin_shift_template field.
	// if @include_shift_segments is true, any returned shift instances will have their shift_segments field set, otherwise the field will be left nil.
	// if @include_scheduling_activity is true, any returned shift segments will have their scheduling_activity field set, otherwise the field will be left nil.
	// if @include_activity is true, any returned scheduling activities will have their member_non_skill_activity field set, otherwise the field will be left nil.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range or @draft_schedule_sid are invalid.
	//   - grpc.NotFound: the @node_selector or @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when getting the draft schedule.
	GetDraftSchedule(context.Context, *GetDraftScheduleReq) (*GetDraftScheduleRes, error)
	// Lists the draft schedules whose scheduling_range overlaps the given @datetime_range for the org sending the request.
	// If @datetime_range is not set, all draft schedules for the org will be returned.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range is invalid.
	//   - grpc.Internal: error occurs when listing the draft schedules.
	ListDraftSchedules(context.Context, *ListDraftSchedulesReq) (*ListDraftSchedulesRes, error)
	// Clears shift instances from the @schedule_selector for the org sending the request.
	// If @node_selector is set, only shifts related to the given @node_selector will be cleared.
	// If @node_selector is not set, all shifts on the @schedule_selector may be cleared, regardless of the shift template they are associated with.
	// If @datetime_range is set, only the shifts overlapping the @datetime_range will be cleared.
	// If @datetime_range is not set, all shifts on the schedule will be considered in range to be deleted and @invert_datetime_range and @start_datetimes_only must be set to false.
	// If @invert_datetime_range is set to true, the shifts overlapping the range before and after the provided @datetime_range will be deleted.
	// If @invert_datetime_range is set to false, the provided @datetime_range will be used.
	// If @start_datetimes_only is set to true, deletes the shifts that start within the @datetime range, or start before or after @datetime_range if @invert_datetime_range is true.
	// If @start_datetimes_only is set to false, deletes the shifts that overlap with the @datetime range, or overlap the range before or after @datetime_range if @invert_datetime_range is true.
	// If @delete_locked is set to true, both locked and unlocked shifts will be cleared.
	// If @delete_locked is set to false, only shifts with @is_locked set to false may be cleared.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_selector, @schedule_selector, or @datetime_range in the request are invalid.
	//   - grpc.NotFound: the draft schedule with the given @schedule_selector doesn't exist.
	//   - grpc.Internal: error occurs when removing the shifts from the schedule.
	ClearSchedule(context.Context, *ClearScheduleReq) (*ClearScheduleRes, error)
	// Deletes a draft schedule with the corresponding @draft_schedule_sid for the org sending the request.
	// It also deletes all of its shift instances and segments.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @draft_schedule_sid is invalid for the org making the request.
	//   - grpc.NotFound: the draft schedule with the given @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when removing the draft schedule.
	DeleteDraftSchedule(context.Context, *DeleteDraftScheduleReq) (*DeleteDraftScheduleRes, error)
	// Lists the shift instances with the corresponding @shift_instance_sids for the org sending the request.
	// If @include_shift_template is set to true then the related shift template for the shift instances will be returned in the shift template field.
	// If @include_shift_segments is set to true then the related shift segments for the shift instances will be returned in the shift segments field.
	// If @include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
	// @include_shift_segments must be true to take effect.
	// If @include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling
	// activities member non skill activity field. @include_scheduling_activity must be true to take effect.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: @shift_instance_sids in the request are invalid.
	//   - grpc.Internal: error occurs when listing the shift instances or their shift segments.
	ListShiftInstancesBySid(context.Context, *ListShiftInstancesBySidReq) (*ListShiftInstancesBySidRes, error)
	// Copies the shifts from @source_schedule_selector to @destination_schedule_selector, constrained by the given parameters for the org sending the request.
	// If @datetime_range is set, all shifts within the datetime range will be copied.
	// If @datetime_range is not set, all shifts in the @source_schedule_selector within the schedule range of the @destination_schedule_selector will be copied. However if one of them is a published schedule, it will use the schedule range of the draft schedule.
	// If @start_datetimes_only is set to false, then shifts are considered to be within the @datetime range if any portion of them is within the range.
	// If @start_datetimes_only is set to true, then only shifts with start times within the @datetime range will be copied.
	// If @overlap_as_warning is set to false, any overlapping shifts for a given agent will return a diagnostic error, and prevent any shifts from being copied.
	// If @overlap_as_warning is set to true, the shifts will be copied regardless of overlap conflicts, and any conflicts will cause a diagnostic warning to be returned after.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: one or more fields in the request have invalid values.
	//	-grpc.NotFound: the @source_schedule_selector or @destination_schedule_selector don't exist for the org sending the request.
	//	-grpc.Internal: error occurs when creating the copied shift instances.
	CopyScheduleToSchedule(context.Context, *CopyScheduleToScheduleReq) (*CopyScheduleToScheduleRes, error)
	// Creates a shift instance for the org sending the request with the provided parameters.
	// This method is not implemented. Do not use.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when creating the shift instance.
	CreateShiftInstance(context.Context, *CreateShiftInstanceReq) (*CreateShiftInstanceRes, error)
	// Creates a shift instance for the org sending the request with the provided parameters.
	// If @wfm_agent_sids is empty, then the shift instance will be created for a newly created unassigned agent.
	// A shift instance will be created for each wfm agent sid provided.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when creating the shift instance.
	//   - grpc.NotFound: the @draft_schedule_sid, @shift_template_sid, or @wfm_agent_sids do not exist for the org sending the request.
	CreateShiftInstanceV2(context.Context, *CreateShiftInstanceV2Req) (*CreateShiftInstanceV2Res, error)
	// Swaps shift instances with the given @shift_instance_sids that belong to @wfm_agent_sid1 to belong to @wfm_agent_sid2 (and viceversa).
	// Returns the swapped @shift_instances after they are succesfully updated.
	// If there are other shifts for the given @wfm_agent_sids with an overlap conflict, diagnostics will be returned instead.
	// All @shift_instance_sids must belong to the same schedule, and be from a draft schedule.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.NotFound: wfm_agent_sid_1, wfm_agent_sid_2, or shift_instance_sids do not exist for the org sending the request.
	//   - grpc.Internal: error occurs when swapping the shift instances.
	SwapShiftInstances(context.Context, *SwapShiftInstancesReq) (*SwapShiftInstancesRes, error)
	// Updates a shift instance for the org sending the request with the provided parameters.
	// This method is not implemented. Do not use.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when updating the shift instance.
	UpdateShiftInstance(context.Context, *UpdateShiftInstanceReq) (*UpdateShiftInstanceRes, error)
	// Updates a shift instance for the org sending the request with the provided parameters.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when updating the shift instance.
	UpdateShiftInstanceV2(context.Context, *UpdateShiftInstanceV2Req) (*UpdateShiftInstanceV2Res, error)
	// Copies the given @shift_instance_sids to @destination_schedule for the org sending the request.
	// If there are any overlap conflicts on @destination_schedule and @overlap_as_warning is set to false,
	//
	//	then @shift_instance_sids will not be copied, and a list of diagnostics detailing the overlaps will be returned.
	//
	// If @overlap_as_warning is set to true, overlap conflicts will not prevent the shifts from being copied, and the overlap diagnostics will be returned after as warning messages instead.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.NotFound: the @shift_instance_sids or @destination_schedule does not exist for the org sending the request.
	//   - grpc.Internal: error occurs when copying the shift instances.
	CopyShiftInstancesToSchedule(context.Context, *CopyShiftInstancesToScheduleReq) (*CopyShiftInstancesToScheduleRes, error)
	// Lists the shift_instance_sids for the Shift Instances associated with @wfm_agent_sid over the given @datetime_range and @schedule_selector.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the data.
	ListShiftInstanceSidsForAgent(context.Context, *ListShiftInstanceSidsForAgentReq) (*ListShiftInstanceSidsForAgentRes, error)
	// Lists shift segments for the specified shift instances for the org sending the request.
	// If @include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
	// If @include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling activities member non skill activity field.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: a shift instance doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	ListShiftSegmentsByShiftInstanceSids(context.Context, *ListShiftSegmentsByShiftInstanceSidsReq) (*ListShiftSegmentsByShiftInstanceSidsRes, error)
	// Creates the given @scheduling_target for the org making the request.
	// The @scheduling_target_sid of the new entity will be returned in the response.
	// Any preexisting scheduling target for @node_entity will be removed upon creation of the new @scheduling_target.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @scheduling_target is invalid.
	//   - grpc.NotFound: @node_entity doesn't exist for @schedule_scenario_sid and the org making the request.
	//   - grpc.Internal: error occours when setting the scheduling target.
	SetSchedulingTarget(context.Context, *SetSchedulingTargetReq) (*SetSchedulingTargetRes, error)
	// Gets the @own_scheduling_target, @inherited_scheduling_target, and @resulting_scheduling_target for the given @node_selector and the org making the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_selector is invalid.
	//   - grpc.NotFound: the given @node_selector doesn't exist for the org making the request.
	//   - grpc.Internal: error occours when getting the scheduling target.
	GetSchedulingTarget(context.Context, *GetSchedulingTargetReq) (*GetSchedulingTargetRes, error)
	// Deletes the scheduling target of the corresponding @node_selector for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: the @node_selector is invalid.
	//	-grpc.NotFound: the scheduling target for the given @node_selector doesn't exist for the org making the request.
	//	-grpc.Internal: error occurs when removing the scheduling target.
	DeleteSchedulingTarget(context.Context, *DeleteSchedulingTargetReq) (*DeleteSchedulingTargetRes, error)
	// Gets the scheduling-target values for the org making the request.
	// Errors:
	//   - grpc.Internal: error occours when getting the scheduling-target values.
	GetDefaultSchedulingTarget(context.Context, *GetDefaultSchedulingTargetReq) (*GetDefaultSchedulingTargetRes, error)
	// Sets the scheduling-target values for the org making the request.
	// Errors:
	//   - grpc.Invalid: any of the given values are invalid.
	//   - grpc.Internal: error occours when setting the scheduling-target values.
	SetDefaultSchedulingTarget(context.Context, *SetDefaultSchedulingTargetReq) (*SetDefaultSchedulingTargetRes, error)
	// Gets the performance metrics across @datetime_range for shift instances in @schedule_selector associated with @node_selector for the org making the request.
	// Performance metrics will be generated for each of the given @metric_params.
	// The @interval_width_in_minutes must be a multiple of 5.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the @node_selector, @schedule_selector, or their shift instances doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	GetPerformanceMetrics(context.Context, *GetPerformanceMetricsReq) (*GetPerformanceMetricsRes, error)
	// Lists the required calls intervals for the given @node_selector over the given @datetime_range for the org making the request.
	// The @interval_width_in_minutes must be a multiple of 5.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the data.
	ListRequiredCallsIntervals(context.Context, *ListRequiredCallsIntervalsReq) (*ListRequiredCallsIntervalsRes, error)
	// Creates a Tour Pattern for @shift_template_sid and the org sending the request, returning @tour_pattern_sid.
	// If there is already a Tour Pattern for @shift_template_sid then the method call will fail to create a new Tour Pattern.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.AlreadyExists: A Tour Pattern already exists for @shift_template_sid.
	//   - grpc.Internal: error occurs when creating the Tour Pattern.
	CreateTourPattern(context.Context, *CreateTourPatternReq) (*CreateTourPatternRes, error)
	// Returns a list of diagnostics describing any issues with the given @tour_pattern.
	// Checks the internal consistency between the pattern and all members, as well as making sure required fields are set with valid values.
	// Ignores sid fields, except for @shift_template_sid and @scheduling_activity_sid.
	// Does not query the database to check that foreign keys exist.
	// Returns a single diagnostic with an OK code if the given @tour_pattern has no issues.
	// The @member_tour_week_patterns and @member_tour_agent_collections fields must be set on @tour_pattern.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when validating the tour pattern or members.
	GetTourPatternDiagnostics(context.Context, *GetTourPatternDiagnosticsReq) (*GetTourPatternDiagnosticsRes, error)
	// Replaces the existing Tour Pattern and members with @tour_pattern for the @tour_pattern.shift_template_sid and the org sending the request.
	// Returns the newly created Tour Pattern and members with their updated SIDs and Week Pattern Numbers.
	// Any existing Tour Week Patterns, Tour Shift Instance and Segment Configs, Tour Agent Collections and their WFM Agent SIDs
	//
	//	belonging to @tour_pattern.shift_template_sid will be replaced with the members on the provided @tour_pattern.
	//
	// At least one Tour Agent Collection and one Tour Week Pattern must be provided in the member fields.
	// If the tour pattern data or members have issues that prevent them from being persisted, a list of diagnostics will be returned describing the issues that must be resolved.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the @tour_pattern.shift_template_sid does not exist.
	//   - grpc.Internal: error occurs when upserting the tour pattern or members.
	UpsertTourPatternWithMembers(context.Context, *UpsertTourPatternWithMembersReq) (*UpsertTourPatternWithMembersRes, error)
	// Gets the Tour Pattern belonging to @shift_template_sid and the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the requested Tour Pattern does not exist.
	//   - grpc.Internal: error occurs when getting the data.
	GetTourPattern(context.Context, *GetTourPatternReq) (*GetTourPatternRes, error)
	// Deletes the Tour Pattern belonging to @tour_pattern_sid and the org sending the request.
	// Any member Tour Week Patterns or Agent Collections will be deleted as well.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when deleting the data or it's children.
	DeleteTourPattern(context.Context, *DeleteTourPatternReq) (*DeleteTourPatternRes, error)
	// Creates a Tour Week Pattern for @tour_pattern_sid for the org sending the request, returning @tour_week_pattern_sid.
	// The newly created Tour Week Pattern will be placed at the end of the existing sequence of tour week patterns for @tour_pattern_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the given @tour_pattern_sid does not exist for the org sending the request.
	//   - grpc.Internal: error occurs when creating the Tour Week Pattern.
	CreateTourWeekPattern(context.Context, *CreateTourWeekPatternReq) (*CreateTourWeekPatternRes, error)
	// Lists the Tour Week Patterns with @tour_pattern_sid for the org sending the request
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the Tour Week Patterns.
	ListTourWeekPatterns(context.Context, *ListTourWeekPatternsReq) (*ListTourWeekPatternsRes, error)
	// Deletes the Tour Week Patterns with the given @tour_week_pattern_sids for the org sending the request.
	// Any Tour Week Instance or Segment Configs using @tour_week_pattern_sids will be deleted.
	// Request will error if any @tour_week_pattern_sids are in use by a Tour Agent Collection, as those must be removed first.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.FailedPrecondition: a @tour_week_pattern_sid is in use by a Tour Agent Collection.
	//   - grpc.Internal: error occurs when deleting the tour week patterns or configs.
	DeleteTourWeekPatterns(context.Context, *DeleteTourWeekPatternsReq) (*DeleteTourWeekPatternsRes, error)
	// Creates the @tour_shift_instance_config for the org sending the request, returning @tour_shift_instance_config_sid.
	// The given @tour_shift_instance_config will not be created if it will overlap another tour shift instance config belonging to @tour_week_pattern_sid.
	// The @member_tour_shift_segment_configs field will be ignored, and will not be created if passed through this endpoint.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid or a preexisting tour shift instance config would overlap @tour_shift_instance_config.
	//   - grpc.Internal: error occurs when creating the data.
	CreateTourShiftInstanceConfig(context.Context, *CreateTourShiftInstanceConfigReq) (*CreateTourShiftInstanceConfigRes, error)
	// Updates the @tour_shift_instance_config for the org sending the request, returning @tour_shift_instance_config_sid.
	// The given @tour_shift_instance_config will not be created if it will overlap another tour shift instance config belonging to @tour_week_pattern_sid.
	// The @member_tour_shift_segment_configs field will be ignored, and will not be updated if passed through this endpoint.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid or a preexisting Tour Shift Instance Config would overlap @tour_shift_instance_config.
	//   - grpc.Internal: error occurs when updating the data.
	UpdateTourShiftInstanceConfig(context.Context, *UpdateTourShiftInstanceConfigReq) (*UpdateTourShiftInstanceConfigRes, error)
	// Lists the Tour Shift Instance Configs belonging to @tour_week_pattern_sids for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the Tour Shift Instance Configs.
	ListTourShiftInstanceConfigs(context.Context, *ListTourShiftInstanceConfigsReq) (*ListTourShiftInstanceConfigsRes, error)
	// Deletes the Tour Shift Instance Configs matching @tour_shift_instance_config_sids for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the Tour Shift Instance Configs.
	DeleteTourShiftInstanceConfigs(context.Context, *DeleteTourShiftInstanceConfigsReq) (*DeleteTourShiftInstanceConfigsRes, error)
	// Creates the given @tour_shift_segment_config for the org sending the request, returning @tour_shift_segment_config_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the @tour_shift_instance_config_sid does not exist for the org sending the request.
	//   - grpc.Internal: error occurs when creating the entity.
	CreateTourShiftSegmentConfig(context.Context, *CreateTourShiftSegmentConfigReq) (*CreateTourShiftSegmentConfigRes, error)
	// Updates the given @tour_shift_segment_config matching @tour_shift_segment_config_sid for the org sending the request.
	// If the updated Tour Shift Segment Config overlaps another segment or does not fit within the parent Tour Shift Instance Config the update will fail.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid or the resulting update would result in a conflict.
	//   - grpc.NotFound: the @tour_shift_instance_config_sid does not exist for the org sending the request.
	//   - grpc.Internal: error occurs when updating the entity.
	UpdateTourShiftSegmentConfig(context.Context, *UpdateTourShiftSegmentConfigReq) (*UpdateTourShiftSegmentConfigRes, error)
	// Lists the Tour Shift Segment Configs belonging to @tour_shift_instance_config_sids for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the Tour Shift Segment Configs.
	ListTourShiftSegmentConfigs(context.Context, *ListTourShiftSegmentConfigsReq) (*ListTourShiftSegmentConfigsRes, error)
	// Deletes the Tour Shift Segment Configs associated with the given @tour_shift_segment_config_sids for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when deleting the Tour Shift Segment Configs.
	DeleteTourShiftSegmentConfigs(context.Context, *DeleteTourShiftSegmentConfigsReq) (*DeleteTourShiftSegmentConfigsRes, error)
	// Creates the given @tour_agent_collection for the org sending the request and return the @tour_agent_collection_sid.
	// The @wfm_agent_sids will be ignored and will not be created through this endpoint.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.AlreadyExists: the first_week_pattern_number for @tour_pattern_sid is already in use by another tour agent collection.
	//   - grpc.NotFound: the given @tour_pattern_sid does not exist for the org sending the request.
	//   - grpc.Internal: error occurs when creating the entity.
	CreateTourAgentCollection(context.Context, *CreateTourAgentCollectionReq) (*CreateTourAgentCollectionRes, error)
	// Updates the given @tour_agent_collection matching the @tour_agent_collection_sid for the org sending the request.
	// The @wfm_agent_sids will be ignored and will not be updated through this endpoint.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.AlreadyExists: the first_week_pattern_number for @tour_pattern_sid is already in use by another tour agent collection.
	//   - grpc.NotFound: the given @tour_pattern_sid does not exist for the org sending the request.
	//   - grpc.Internal: error occurs when updating the entity.
	UpdateTourAgentCollection(context.Context, *UpdateTourAgentCollectionReq) (*UpdateTourAgentCollectionRes, error)
	// Lists the Tour Agent Collections belonging to @tour_pattern_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the tour agent collections.
	ListTourAgentCollections(context.Context, *ListTourAgentCollectionsReq) (*ListTourAgentCollectionsRes, error)
	// Deletes the Tour Agent collections matching @tour_agent_collection_sids for the org sending the request.
	// Any existing associations with WFM Agent Sids will be deleted as well.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when deleting the tour agent collections.
	DeleteTourAgentCollections(context.Context, *DeleteTourAgentCollectionsReq) (*DeleteTourAgentCollectionsRes, error)
	// Creates an assocation between the @tour_agent_collection_sid and the @wfm_agent_sids for the org sending the request.
	// If there is already an association between any of the @wfm_agent_sids and the Tour Pattern that @tour_agent_collection_sid belongs to, the method will fail and no associations will be created.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid
	//   - grpc.AlreadyExists: an association already exists for at least one SID in @wfm_agent_sids.
	//   - grpc.Internal: error occurs when creating the association.
	CreateTourAgentCollectionWFMAgents(context.Context, *CreateTourAgentCollectionWFMAgentsReq) (*CreateTourAgentCollectionWFMAgentsRes, error)
	// Lists the WFM Agent SIDs belonging to @tour_agent_collection_sids for the org sending the request.
	// The resulting sids will be returned in @wfm_agent_pairings each containing an @agent_collection_sid and @wfm_agent_sids.
	// If no agents are found for a sid in the given @tour_agent_collection_sids, that @agent_collection_sid will have an empty slice in @wfm_agent_sids.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the tour agent collections.
	ListTourAgentCollectionWFMAgents(context.Context, *ListTourAgentCollectionWFMAgentsReq) (*ListTourAgentCollectionWFMAgentsRes, error)
	// Deletes association between the @wfm_agent_sids and @tour_agent_collection_sid for the org sending the request.
	// If no @wfm_agent_sids are provided, all existing @wfm_agent_sids for the given @tour_agent_collection_sid will be deleted.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: there are no WFM Agent associations to delete for @tour_agent_collection_sid.
	//   - grpc.Internal: error occurs when getting the tour agent collections.
	DeleteTourAgentCollectionWFMAgents(context.Context, *DeleteTourAgentCollectionWFMAgentsReq) (*DeleteTourAgentCollectionWFMAgentsRes, error)
	// Generates a list of tour week patterns for @target_shift_template_sid and the org sending the request.
	// Sets the member_tour_week_patterns with a tour week pattern for each of the @num_weeks_in_tour.
	// Each of the tour week patterns will be set with tour shift instances and segment configs based on
	//
	//	the forecasted call data over the next @num_weeks_in_tour, starting on the next Monday.
	//
	// The returned data will not be persisted. This method will not effect any existing tour week patterns in the database.
	// The @tour_week_patterns returned by this method are intended to replace, not append, all currenly existing tour week patterns for @target_shift_template_sid, once persisted.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: there is no call center node or @shift_template_sid associated with @schedule_scenario_sid.
	//   - grpc.Internal: error occurs when generating the tour week patterns.
	GenerateTourWeekPatterns(context.Context, *GenerateTourWeekPatternsReq) (*GenerateTourWeekPatternsRes, error)
	mustEmbedUnimplementedWFMServer()
}

// UnimplementedWFMServer must be embedded to have forward compatible implementations.
type UnimplementedWFMServer struct {
}

func (UnimplementedWFMServer) ListSkillProfiles(context.Context, *ListSkillProfilesReq) (*ListSkillProfilesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkillProfiles not implemented")
}
func (UnimplementedWFMServer) UpdateSkillProfile(context.Context, *UpdateSkillProfileReq) (*UpdateSkillProfileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkillProfile not implemented")
}
func (UnimplementedWFMServer) UpdateSkillProfileProficiencies(context.Context, *UpdateSkillProfileProficienciesReq) (*UpdateSkillProfileProficienciesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkillProfileProficiencies not implemented")
}
func (UnimplementedWFMServer) GetSkillProfile(context.Context, *GetSkillProfileReq) (*GetSkillProfileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkillProfile not implemented")
}
func (UnimplementedWFMServer) ResyncSkillProfiles(context.Context, *ResyncSkillProfilesReq) (*ResyncSkillProfilesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResyncSkillProfiles not implemented")
}
func (UnimplementedWFMServer) GetLastSkillProfileResyncDate(context.Context, *GetLastSkillProfileResyncDateReq) (*GetLastSkillProfileResyncDateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastSkillProfileResyncDate not implemented")
}
func (UnimplementedWFMServer) UpsertForecastingParameters(context.Context, *UpsertForecastingParametersReq) (*UpsertForecastingParametersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertForecastingParameters not implemented")
}
func (UnimplementedWFMServer) GetForecastingParameters(context.Context, *GetForecastingParametersReq) (*GetForecastingParametersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecastingParameters not implemented")
}
func (UnimplementedWFMServer) ListHistoricalData(context.Context, *ListHistoricalDataReq) (*ListHistoricalDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoricalData not implemented")
}
func (UnimplementedWFMServer) UpsertHistoricalDataDelta(context.Context, *UpsertHistoricalDataDeltaReq) (*UpsertHistoricalDataDeltaRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertHistoricalDataDelta not implemented")
}
func (UnimplementedWFMServer) UpsertHistoricalDataDeltas(context.Context, *UpsertHistoricalDataDeltasReq) (*UpsertHistoricalDataDeltasRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertHistoricalDataDeltas not implemented")
}
func (UnimplementedWFMServer) ListSkills(context.Context, *ListSkillsReq) (*ListSkillsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkills not implemented")
}
func (UnimplementedWFMServer) BuildCallProfileTemplateForSkillProfile(context.Context, *BuildCallProfileTemplateForSkillProfileReq) (*BuildCallProfileTemplateForSkillProfileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildCallProfileTemplateForSkillProfile not implemented")
}
func (UnimplementedWFMServer) BuildCallProfileTemplate(context.Context, *BuildCallProfileTemplateReq) (*BuildCallProfileTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildCallProfileTemplate not implemented")
}
func (UnimplementedWFMServer) CreateInactiveSkillProfileMapping(context.Context, *CreateInactiveSkillProfileMappingReq) (*CreateInactiveSkillProfileMappingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInactiveSkillProfileMapping not implemented")
}
func (UnimplementedWFMServer) GetAvailableRegressionForecasterModelTypes(context.Context, *GetAvailableRegressionForecasterModelTypesReq) (*GetAvailableRegressionForecasterModelTypesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableRegressionForecasterModelTypes not implemented")
}
func (UnimplementedWFMServer) DisconnectInactiveSkillProfileMapping(context.Context, *DisconnectInactiveSkillProfileMappingReq) (*DisconnectInactiveSkillProfileMappingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectInactiveSkillProfileMapping not implemented")
}
func (UnimplementedWFMServer) CreateSkillProfileGroup(context.Context, *CreateSkillProfileGroupReq) (*CreateSkillProfileGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSkillProfileGroup not implemented")
}
func (UnimplementedWFMServer) UpdateSkillProfileGroup(context.Context, *UpdateSkillProfileGroupReq) (*UpdateSkillProfileGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkillProfileGroup not implemented")
}
func (UnimplementedWFMServer) ListSkillProfileGroups(context.Context, *ListSkillProfileGroupsReq) (*ListSkillProfileGroupsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkillProfileGroups not implemented")
}
func (UnimplementedWFMServer) UpdateSkillProfileGroupAssociations(context.Context, *UpdateSkillProfileGroupAssociationsReq) (*UpdateSkillProfileGroupAssociationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkillProfileGroupAssociations not implemented")
}
func (UnimplementedWFMServer) DeleteHistoricalDataDeltas(context.Context, *DeleteHistoricalDataDeltasReq) (*DeleteHistoricalDataDeltasRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistoricalDataDeltas not implemented")
}
func (UnimplementedWFMServer) ListTopSkillProfiles(context.Context, *ListTopSkillProfilesReq) (*ListTopSkillProfilesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopSkillProfiles not implemented")
}
func (UnimplementedWFMServer) GetSkillProfilesCount(context.Context, *GetSkillProfilesCountReq) (*GetSkillProfilesCountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkillProfilesCount not implemented")
}
func (UnimplementedWFMServer) BuildProfileForecastByInterval(*BuildProfileForecastByIntervalReq, WFM_BuildProfileForecastByIntervalServer) error {
	return status.Errorf(codes.Unimplemented, "method BuildProfileForecastByInterval not implemented")
}
func (UnimplementedWFMServer) BuildProfileForecastByIntervalWithStats(*BuildProfileForecastByIntervalWithStatsReq, WFM_BuildProfileForecastByIntervalWithStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method BuildProfileForecastByIntervalWithStats not implemented")
}
func (UnimplementedWFMServer) UpsertProfileForecast(context.Context, *UpsertProfileForecastReq) (*UpsertProfileForecastRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertProfileForecast not implemented")
}
func (UnimplementedWFMServer) CreateCallProfileTemplate(context.Context, *CreateCallProfileTemplateReq) (*CreateCallProfileTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCallProfileTemplate not implemented")
}
func (UnimplementedWFMServer) DeleteCallProfileTemplate(context.Context, *DeleteCallProfileTemplateReq) (*DeleteCallProfileTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCallProfileTemplate not implemented")
}
func (UnimplementedWFMServer) CreateRegressionTemplate(context.Context, *CreateRegressionTemplateReq) (*CreateRegressionTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegressionTemplate not implemented")
}
func (UnimplementedWFMServer) DeleteRegressionTemplate(context.Context, *DeleteRegressionTemplateReq) (*DeleteRegressionTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegressionTemplate not implemented")
}
func (UnimplementedWFMServer) ListRegressionTemplates(context.Context, *ListRegressionTemplatesReq) (*ListRegressionTemplatesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegressionTemplates not implemented")
}
func (UnimplementedWFMServer) ListForecastIntervalsForSkillProfile(*ListForecastIntervalsForSkillProfileReq, WFM_ListForecastIntervalsForSkillProfileServer) error {
	return status.Errorf(codes.Unimplemented, "method ListForecastIntervalsForSkillProfile not implemented")
}
func (UnimplementedWFMServer) ListForecastIntervals(*ListForecastIntervalsReq, WFM_ListForecastIntervalsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListForecastIntervals not implemented")
}
func (UnimplementedWFMServer) BuildRegressionForecastByInterval(*BuildRegressionForecastByIntervalReq, WFM_BuildRegressionForecastByIntervalServer) error {
	return status.Errorf(codes.Unimplemented, "method BuildRegressionForecastByInterval not implemented")
}
func (UnimplementedWFMServer) BuildRegressionForecastByIntervalWithStats(*BuildRegressionForecastByIntervalWithStatsReq, WFM_BuildRegressionForecastByIntervalWithStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method BuildRegressionForecastByIntervalWithStats not implemented")
}
func (UnimplementedWFMServer) ListCallProfileTemplates(context.Context, *ListCallProfileTemplatesReq) (*ListCallProfileTemplatesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCallProfileTemplates not implemented")
}
func (UnimplementedWFMServer) UpsertRegressionForecast(context.Context, *UpsertRegressionForecastReq) (*UpsertRegressionForecastRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRegressionForecast not implemented")
}
func (UnimplementedWFMServer) UpsertForecastDataDelta(context.Context, *UpsertForecastDataDeltaReq) (*UpsertForecastDataDeltaRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertForecastDataDelta not implemented")
}
func (UnimplementedWFMServer) UpsertForecastDataDeltas(context.Context, *UpsertForecastDataDeltasReq) (*UpsertForecastDataDeltasRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertForecastDataDeltas not implemented")
}
func (UnimplementedWFMServer) DeleteForecastIntervals(context.Context, *DeleteForecastIntervalsReq) (*DeleteForecastIntervalsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteForecastIntervals not implemented")
}
func (UnimplementedWFMServer) ListHistoricalDataForAllSkillProfiles(context.Context, *ListHistoricalDataForAllSkillProfilesReq) (*ListHistoricalDataForAllSkillProfilesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoricalDataForAllSkillProfiles not implemented")
}
func (UnimplementedWFMServer) BuildDOWAndMOYProfiles(context.Context, *BuildDOWAndMOYProfilesReq) (*BuildDOWAndMOYProfilesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildDOWAndMOYProfiles not implemented")
}
func (UnimplementedWFMServer) CalculateTrainingDataAveragesForSkillProfile(context.Context, *CalculateTrainingDataAveragesForSkillProfileReq) (*CalculateTrainingDataAveragesForSkillProfileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateTrainingDataAveragesForSkillProfile not implemented")
}
func (UnimplementedWFMServer) UpdateSkillProfileAveragesUsingHistoricalData(context.Context, *UpdateSkillProfileAveragesUsingHistoricalDataReq) (*UpdateSkillProfileAveragesUsingHistoricalDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkillProfileAveragesUsingHistoricalData not implemented")
}
func (UnimplementedWFMServer) UpdateCallCenterNode(context.Context, *UpdateCallCenterNodeReq) (*UpdateCallCenterNodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCallCenterNode not implemented")
}
func (UnimplementedWFMServer) CreateClientNode(context.Context, *CreateClientNodeReq) (*CreateClientNodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClientNode not implemented")
}
func (UnimplementedWFMServer) UpdateClientNode(context.Context, *UpdateClientNodeReq) (*UpdateClientNodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientNode not implemented")
}
func (UnimplementedWFMServer) CreateLocationNode(context.Context, *CreateLocationNodeReq) (*CreateLocationNodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocationNode not implemented")
}
func (UnimplementedWFMServer) UpdateLocationNode(context.Context, *UpdateLocationNodeReq) (*UpdateLocationNodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocationNode not implemented")
}
func (UnimplementedWFMServer) CreateProgramNode(context.Context, *CreateProgramNodeReq) (*CreateProgramNodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgramNode not implemented")
}
func (UnimplementedWFMServer) UpdateProgramNode(context.Context, *UpdateProgramNodeReq) (*UpdateProgramNodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgramNode not implemented")
}
func (UnimplementedWFMServer) ListProgramNodesBySid(context.Context, *ListProgramNodesBySidReq) (*ListProgramNodesBySidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProgramNodesBySid not implemented")
}
func (UnimplementedWFMServer) CreateConstraintRule(context.Context, *CreateConstraintRuleReq) (*CreateConstraintRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConstraintRule not implemented")
}
func (UnimplementedWFMServer) UpdateConstraintRule(context.Context, *UpdateConstraintRuleReq) (*UpdateConstraintRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConstraintRule not implemented")
}
func (UnimplementedWFMServer) DeleteConstraintRule(context.Context, *DeleteConstraintRuleReq) (*DeleteConstraintRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConstraintRule not implemented")
}
func (UnimplementedWFMServer) CreateNonSkillActivity(context.Context, *CreateNonSkillActivityReq) (*CreateNonSkillActivityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNonSkillActivity not implemented")
}
func (UnimplementedWFMServer) UpdateNonSkillActivity(context.Context, *UpdateNonSkillActivityReq) (*UpdateNonSkillActivityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNonSkillActivity not implemented")
}
func (UnimplementedWFMServer) ListNonSkillActivities(context.Context, *ListNonSkillActivitiesReq) (*ListNonSkillActivitiesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNonSkillActivities not implemented")
}
func (UnimplementedWFMServer) ListNonSkillActivityAssociations(context.Context, *ListNonSkillActivityAssociationsReq) (*ListNonSkillActivityAssociationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNonSkillActivityAssociations not implemented")
}
func (UnimplementedWFMServer) ListCandidateSchedulingActivities(context.Context, *ListCandidateSchedulingActivitiesReq) (*ListCandidateSchedulingActivitiesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCandidateSchedulingActivities not implemented")
}
func (UnimplementedWFMServer) CreateAgentGroup(context.Context, *CreateAgentGroupReq) (*CreateAgentGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentGroup not implemented")
}
func (UnimplementedWFMServer) UpdateAgentGroup(context.Context, *UpdateAgentGroupReq) (*UpdateAgentGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentGroup not implemented")
}
func (UnimplementedWFMServer) UpdateWFMAgent(context.Context, *UpdateWFMAgentReq) (*UpdateWFMAgentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWFMAgent not implemented")
}
func (UnimplementedWFMServer) ListAllWFMAgents(context.Context, *ListAllWFMAgentsReq) (*ListAllWFMAgentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllWFMAgents not implemented")
}
func (UnimplementedWFMServer) ListCandidateWFMAgents(context.Context, *ListCandidateWFMAgentsReq) (*ListCandidateWFMAgentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCandidateWFMAgents not implemented")
}
func (UnimplementedWFMServer) ListUngroupedWFMAgents(context.Context, *ListUngroupedWFMAgentsReq) (*ListUngroupedWFMAgentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUngroupedWFMAgents not implemented")
}
func (UnimplementedWFMServer) ListWFMAgentSids(context.Context, *ListWFMAgentSidsReq) (*ListWFMAgentSidsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWFMAgentSids not implemented")
}
func (UnimplementedWFMServer) ListWFMAgentsAssociatedWithAgentGroup(context.Context, *ListWFMAgentsAssociatedWithAgentGroupReq) (*ListWFMAgentsAssociatedWithAgentGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWFMAgentsAssociatedWithAgentGroup not implemented")
}
func (UnimplementedWFMServer) CreateWFMAgentMemberships(context.Context, *CreateWFMAgentMembershipsReq) (*CreateWFMAgentMembershipsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWFMAgentMemberships not implemented")
}
func (UnimplementedWFMServer) DeleteWFMAgentMemberships(context.Context, *DeleteWFMAgentMembershipsReq) (*DeleteWFMAgentMembershipsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWFMAgentMemberships not implemented")
}
func (UnimplementedWFMServer) DeleteWFMAgentsMemberships(context.Context, *DeleteWFMAgentsMembershipsReq) (*DeleteWFMAgentsMembershipsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWFMAgentsMemberships not implemented")
}
func (UnimplementedWFMServer) BuildAgentDiagnostics(context.Context, *BuildAgentDiagnosticsReq) (*BuildAgentDiagnosticsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildAgentDiagnostics not implemented")
}
func (UnimplementedWFMServer) CreateShiftTemplate(context.Context, *CreateShiftTemplateReq) (*CreateShiftTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShiftTemplate not implemented")
}
func (UnimplementedWFMServer) UpdateShiftTemplate(context.Context, *UpdateShiftTemplateReq) (*UpdateShiftTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShiftTemplate not implemented")
}
func (UnimplementedWFMServer) ListShiftTemplatesBySids(context.Context, *ListShiftTemplatesBySidsReq) (*ListShiftTemplatesBySidsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShiftTemplatesBySids not implemented")
}
func (UnimplementedWFMServer) BuildShiftTemplateDiagnostics(context.Context, *BuildShiftTemplateDiagnosticsReq) (*BuildShiftTemplateDiagnosticsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildShiftTemplateDiagnostics not implemented")
}
func (UnimplementedWFMServer) CreatePlacementRule(context.Context, *CreatePlacementRuleReq) (*CreatePlacementRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlacementRule not implemented")
}
func (UnimplementedWFMServer) UpdatePlacementRule(context.Context, *UpdatePlacementRuleReq) (*UpdatePlacementRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlacementRule not implemented")
}
func (UnimplementedWFMServer) DeletePlacementRule(context.Context, *DeletePlacementRuleReq) (*DeletePlacementRuleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlacementRule not implemented")
}
func (UnimplementedWFMServer) CreateOpenTimesPattern(context.Context, *CreateOpenTimesPatternReq) (*CreateOpenTimesPatternRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOpenTimesPattern not implemented")
}
func (UnimplementedWFMServer) UpdateOpenTimesPattern(context.Context, *UpdateOpenTimesPatternReq) (*UpdateOpenTimesPatternRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOpenTimesPattern not implemented")
}
func (UnimplementedWFMServer) DeleteOpenTimesPattern(context.Context, *DeleteOpenTimesPatternReq) (*DeleteOpenTimesPatternRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOpenTimesPattern not implemented")
}
func (UnimplementedWFMServer) GetOpenTimesBitmaps(context.Context, *GetOpenTimesBitmapsReq) (*GetOpenTimesBitmapsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenTimesBitmaps not implemented")
}
func (UnimplementedWFMServer) CreateAgentAvailabilityPattern(context.Context, *CreateAgentAvailabilityPatternReq) (*CreateAgentAvailabilityPatternRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentAvailabilityPattern not implemented")
}
func (UnimplementedWFMServer) UpdateAgentAvailabilityPattern(context.Context, *UpdateAgentAvailabilityPatternReq) (*UpdateAgentAvailabilityPatternRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentAvailabilityPattern not implemented")
}
func (UnimplementedWFMServer) DeleteAgentAvailabilityPattern(context.Context, *DeleteAgentAvailabilityPatternReq) (*DeleteAgentAvailabilityPatternRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgentAvailabilityPattern not implemented")
}
func (UnimplementedWFMServer) GetAvailabilityBitmaps(context.Context, *GetAvailabilityBitmapsReq) (*GetAvailabilityBitmapsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailabilityBitmaps not implemented")
}
func (UnimplementedWFMServer) UpsertNonSkillActivityAssociation(context.Context, *UpsertNonSkillActivityAssociationReq) (*UpsertNonSkillActivityAssociationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertNonSkillActivityAssociation not implemented")
}
func (UnimplementedWFMServer) CreateSkillProficiencies(context.Context, *CreateSkillProficienciesReq) (*CreateSkillProficienciesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSkillProficiencies not implemented")
}
func (UnimplementedWFMServer) UpdateSkillProficiencies(context.Context, *UpdateSkillProficienciesReq) (*UpdateSkillProficienciesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkillProficiencies not implemented")
}
func (UnimplementedWFMServer) DeleteSkillProficiency(context.Context, *DeleteSkillProficiencyReq) (*DeleteSkillProficiencyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSkillProficiency not implemented")
}
func (UnimplementedWFMServer) CopyScenario(context.Context, *CopyScenarioReq) (*CopyScenarioRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyScenario not implemented")
}
func (UnimplementedWFMServer) CreateScheduleScenarioWithNodes(context.Context, *CreateScheduleScenarioWithNodesReq) (*CreateScheduleScenarioWithNodesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduleScenarioWithNodes not implemented")
}
func (UnimplementedWFMServer) UpdateScheduleScenario(context.Context, *UpdateScheduleScenarioReq) (*UpdateScheduleScenarioRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduleScenario not implemented")
}
func (UnimplementedWFMServer) ListConfigEntities(context.Context, *ListConfigEntitiesReq) (*ListConfigEntitiesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigEntities not implemented")
}
func (UnimplementedWFMServer) DeleteShiftInstances(context.Context, *DeleteShiftInstancesReq) (*DeleteShiftInstancesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShiftInstances not implemented")
}
func (UnimplementedWFMServer) BuildNodeDiagnostics(context.Context, *BuildNodeDiagnosticsReq) (*BuildNodeDiagnosticsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildNodeDiagnostics not implemented")
}
func (UnimplementedWFMServer) BuildGlobalDiagnostics(context.Context, *BuildGlobalDiagnosticsReq) (*BuildGlobalDiagnosticsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildGlobalDiagnostics not implemented")
}
func (UnimplementedWFMServer) GetPublishedSchedule(context.Context, *GetPublishedScheduleReq) (*GetPublishedScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishedSchedule not implemented")
}
func (UnimplementedWFMServer) GetPublishedScheduleRequiredCalls(context.Context, *GetPublishedScheduleRequiredCallsReq) (*GetPublishedScheduleRequiredCallsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishedScheduleRequiredCalls not implemented")
}
func (UnimplementedWFMServer) GetDraftScheduleRequiredCalls(context.Context, *GetDraftScheduleRequiredCallsReq) (*GetDraftScheduleRequiredCallsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDraftScheduleRequiredCalls not implemented")
}
func (UnimplementedWFMServer) CreateDraftSchedule(context.Context, *CreateDraftScheduleReq) (*CreateDraftScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDraftSchedule not implemented")
}
func (UnimplementedWFMServer) UpdateDraftSchedule(context.Context, *UpdateDraftScheduleReq) (*UpdateDraftScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDraftSchedule not implemented")
}
func (UnimplementedWFMServer) BuildDraftSchedule(context.Context, *BuildDraftScheduleReq) (*BuildDraftScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildDraftSchedule not implemented")
}
func (UnimplementedWFMServer) PublishDraftSchedule(context.Context, *PublishDraftScheduleReq) (*PublishDraftScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishDraftSchedule not implemented")
}
func (UnimplementedWFMServer) ResetDraftSchedule(context.Context, *ResetDraftScheduleReq) (*ResetDraftScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetDraftSchedule not implemented")
}
func (UnimplementedWFMServer) GetDraftSchedule(context.Context, *GetDraftScheduleReq) (*GetDraftScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDraftSchedule not implemented")
}
func (UnimplementedWFMServer) ListDraftSchedules(context.Context, *ListDraftSchedulesReq) (*ListDraftSchedulesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDraftSchedules not implemented")
}
func (UnimplementedWFMServer) ClearSchedule(context.Context, *ClearScheduleReq) (*ClearScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSchedule not implemented")
}
func (UnimplementedWFMServer) DeleteDraftSchedule(context.Context, *DeleteDraftScheduleReq) (*DeleteDraftScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDraftSchedule not implemented")
}
func (UnimplementedWFMServer) ListShiftInstancesBySid(context.Context, *ListShiftInstancesBySidReq) (*ListShiftInstancesBySidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShiftInstancesBySid not implemented")
}
func (UnimplementedWFMServer) CopyScheduleToSchedule(context.Context, *CopyScheduleToScheduleReq) (*CopyScheduleToScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyScheduleToSchedule not implemented")
}
func (UnimplementedWFMServer) CreateShiftInstance(context.Context, *CreateShiftInstanceReq) (*CreateShiftInstanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShiftInstance not implemented")
}
func (UnimplementedWFMServer) CreateShiftInstanceV2(context.Context, *CreateShiftInstanceV2Req) (*CreateShiftInstanceV2Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShiftInstanceV2 not implemented")
}
func (UnimplementedWFMServer) SwapShiftInstances(context.Context, *SwapShiftInstancesReq) (*SwapShiftInstancesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapShiftInstances not implemented")
}
func (UnimplementedWFMServer) UpdateShiftInstance(context.Context, *UpdateShiftInstanceReq) (*UpdateShiftInstanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShiftInstance not implemented")
}
func (UnimplementedWFMServer) UpdateShiftInstanceV2(context.Context, *UpdateShiftInstanceV2Req) (*UpdateShiftInstanceV2Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShiftInstanceV2 not implemented")
}
func (UnimplementedWFMServer) CopyShiftInstancesToSchedule(context.Context, *CopyShiftInstancesToScheduleReq) (*CopyShiftInstancesToScheduleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyShiftInstancesToSchedule not implemented")
}
func (UnimplementedWFMServer) ListShiftInstanceSidsForAgent(context.Context, *ListShiftInstanceSidsForAgentReq) (*ListShiftInstanceSidsForAgentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShiftInstanceSidsForAgent not implemented")
}
func (UnimplementedWFMServer) ListShiftSegmentsByShiftInstanceSids(context.Context, *ListShiftSegmentsByShiftInstanceSidsReq) (*ListShiftSegmentsByShiftInstanceSidsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShiftSegmentsByShiftInstanceSids not implemented")
}
func (UnimplementedWFMServer) SetSchedulingTarget(context.Context, *SetSchedulingTargetReq) (*SetSchedulingTargetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSchedulingTarget not implemented")
}
func (UnimplementedWFMServer) GetSchedulingTarget(context.Context, *GetSchedulingTargetReq) (*GetSchedulingTargetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulingTarget not implemented")
}
func (UnimplementedWFMServer) DeleteSchedulingTarget(context.Context, *DeleteSchedulingTargetReq) (*DeleteSchedulingTargetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchedulingTarget not implemented")
}
func (UnimplementedWFMServer) GetDefaultSchedulingTarget(context.Context, *GetDefaultSchedulingTargetReq) (*GetDefaultSchedulingTargetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultSchedulingTarget not implemented")
}
func (UnimplementedWFMServer) SetDefaultSchedulingTarget(context.Context, *SetDefaultSchedulingTargetReq) (*SetDefaultSchedulingTargetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultSchedulingTarget not implemented")
}
func (UnimplementedWFMServer) GetPerformanceMetrics(context.Context, *GetPerformanceMetricsReq) (*GetPerformanceMetricsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerformanceMetrics not implemented")
}
func (UnimplementedWFMServer) ListRequiredCallsIntervals(context.Context, *ListRequiredCallsIntervalsReq) (*ListRequiredCallsIntervalsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRequiredCallsIntervals not implemented")
}
func (UnimplementedWFMServer) CreateTourPattern(context.Context, *CreateTourPatternReq) (*CreateTourPatternRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTourPattern not implemented")
}
func (UnimplementedWFMServer) GetTourPatternDiagnostics(context.Context, *GetTourPatternDiagnosticsReq) (*GetTourPatternDiagnosticsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourPatternDiagnostics not implemented")
}
func (UnimplementedWFMServer) UpsertTourPatternWithMembers(context.Context, *UpsertTourPatternWithMembersReq) (*UpsertTourPatternWithMembersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTourPatternWithMembers not implemented")
}
func (UnimplementedWFMServer) GetTourPattern(context.Context, *GetTourPatternReq) (*GetTourPatternRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourPattern not implemented")
}
func (UnimplementedWFMServer) DeleteTourPattern(context.Context, *DeleteTourPatternReq) (*DeleteTourPatternRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTourPattern not implemented")
}
func (UnimplementedWFMServer) CreateTourWeekPattern(context.Context, *CreateTourWeekPatternReq) (*CreateTourWeekPatternRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTourWeekPattern not implemented")
}
func (UnimplementedWFMServer) ListTourWeekPatterns(context.Context, *ListTourWeekPatternsReq) (*ListTourWeekPatternsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTourWeekPatterns not implemented")
}
func (UnimplementedWFMServer) DeleteTourWeekPatterns(context.Context, *DeleteTourWeekPatternsReq) (*DeleteTourWeekPatternsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTourWeekPatterns not implemented")
}
func (UnimplementedWFMServer) CreateTourShiftInstanceConfig(context.Context, *CreateTourShiftInstanceConfigReq) (*CreateTourShiftInstanceConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTourShiftInstanceConfig not implemented")
}
func (UnimplementedWFMServer) UpdateTourShiftInstanceConfig(context.Context, *UpdateTourShiftInstanceConfigReq) (*UpdateTourShiftInstanceConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTourShiftInstanceConfig not implemented")
}
func (UnimplementedWFMServer) ListTourShiftInstanceConfigs(context.Context, *ListTourShiftInstanceConfigsReq) (*ListTourShiftInstanceConfigsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTourShiftInstanceConfigs not implemented")
}
func (UnimplementedWFMServer) DeleteTourShiftInstanceConfigs(context.Context, *DeleteTourShiftInstanceConfigsReq) (*DeleteTourShiftInstanceConfigsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTourShiftInstanceConfigs not implemented")
}
func (UnimplementedWFMServer) CreateTourShiftSegmentConfig(context.Context, *CreateTourShiftSegmentConfigReq) (*CreateTourShiftSegmentConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTourShiftSegmentConfig not implemented")
}
func (UnimplementedWFMServer) UpdateTourShiftSegmentConfig(context.Context, *UpdateTourShiftSegmentConfigReq) (*UpdateTourShiftSegmentConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTourShiftSegmentConfig not implemented")
}
func (UnimplementedWFMServer) ListTourShiftSegmentConfigs(context.Context, *ListTourShiftSegmentConfigsReq) (*ListTourShiftSegmentConfigsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTourShiftSegmentConfigs not implemented")
}
func (UnimplementedWFMServer) DeleteTourShiftSegmentConfigs(context.Context, *DeleteTourShiftSegmentConfigsReq) (*DeleteTourShiftSegmentConfigsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTourShiftSegmentConfigs not implemented")
}
func (UnimplementedWFMServer) CreateTourAgentCollection(context.Context, *CreateTourAgentCollectionReq) (*CreateTourAgentCollectionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTourAgentCollection not implemented")
}
func (UnimplementedWFMServer) UpdateTourAgentCollection(context.Context, *UpdateTourAgentCollectionReq) (*UpdateTourAgentCollectionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTourAgentCollection not implemented")
}
func (UnimplementedWFMServer) ListTourAgentCollections(context.Context, *ListTourAgentCollectionsReq) (*ListTourAgentCollectionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTourAgentCollections not implemented")
}
func (UnimplementedWFMServer) DeleteTourAgentCollections(context.Context, *DeleteTourAgentCollectionsReq) (*DeleteTourAgentCollectionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTourAgentCollections not implemented")
}
func (UnimplementedWFMServer) CreateTourAgentCollectionWFMAgents(context.Context, *CreateTourAgentCollectionWFMAgentsReq) (*CreateTourAgentCollectionWFMAgentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTourAgentCollectionWFMAgents not implemented")
}
func (UnimplementedWFMServer) ListTourAgentCollectionWFMAgents(context.Context, *ListTourAgentCollectionWFMAgentsReq) (*ListTourAgentCollectionWFMAgentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTourAgentCollectionWFMAgents not implemented")
}
func (UnimplementedWFMServer) DeleteTourAgentCollectionWFMAgents(context.Context, *DeleteTourAgentCollectionWFMAgentsReq) (*DeleteTourAgentCollectionWFMAgentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTourAgentCollectionWFMAgents not implemented")
}
func (UnimplementedWFMServer) GenerateTourWeekPatterns(context.Context, *GenerateTourWeekPatternsReq) (*GenerateTourWeekPatternsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTourWeekPatterns not implemented")
}
func (UnimplementedWFMServer) mustEmbedUnimplementedWFMServer() {}

// UnsafeWFMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WFMServer will
// result in compilation errors.
type UnsafeWFMServer interface {
	mustEmbedUnimplementedWFMServer()
}

func RegisterWFMServer(s grpc.ServiceRegistrar, srv WFMServer) {
	s.RegisterService(&WFM_ServiceDesc, srv)
}

func _WFM_ListSkillProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkillProfilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListSkillProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListSkillProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListSkillProfiles(ctx, req.(*ListSkillProfilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateSkillProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkillProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateSkillProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateSkillProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateSkillProfile(ctx, req.(*UpdateSkillProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateSkillProfileProficiencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkillProfileProficienciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateSkillProfileProficiencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateSkillProfileProficiencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateSkillProfileProficiencies(ctx, req.(*UpdateSkillProfileProficienciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetSkillProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkillProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetSkillProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetSkillProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetSkillProfile(ctx, req.(*GetSkillProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ResyncSkillProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResyncSkillProfilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ResyncSkillProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ResyncSkillProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ResyncSkillProfiles(ctx, req.(*ResyncSkillProfilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetLastSkillProfileResyncDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastSkillProfileResyncDateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetLastSkillProfileResyncDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetLastSkillProfileResyncDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetLastSkillProfileResyncDate(ctx, req.(*GetLastSkillProfileResyncDateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpsertForecastingParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertForecastingParametersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpsertForecastingParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpsertForecastingParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpsertForecastingParameters(ctx, req.(*UpsertForecastingParametersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetForecastingParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecastingParametersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetForecastingParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetForecastingParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetForecastingParameters(ctx, req.(*GetForecastingParametersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListHistoricalData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHistoricalDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListHistoricalData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListHistoricalData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListHistoricalData(ctx, req.(*ListHistoricalDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpsertHistoricalDataDelta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertHistoricalDataDeltaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpsertHistoricalDataDelta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpsertHistoricalDataDelta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpsertHistoricalDataDelta(ctx, req.(*UpsertHistoricalDataDeltaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpsertHistoricalDataDeltas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertHistoricalDataDeltasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpsertHistoricalDataDeltas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpsertHistoricalDataDeltas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpsertHistoricalDataDeltas(ctx, req.(*UpsertHistoricalDataDeltasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkillsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListSkills(ctx, req.(*ListSkillsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_BuildCallProfileTemplateForSkillProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildCallProfileTemplateForSkillProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).BuildCallProfileTemplateForSkillProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_BuildCallProfileTemplateForSkillProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).BuildCallProfileTemplateForSkillProfile(ctx, req.(*BuildCallProfileTemplateForSkillProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_BuildCallProfileTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildCallProfileTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).BuildCallProfileTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_BuildCallProfileTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).BuildCallProfileTemplate(ctx, req.(*BuildCallProfileTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateInactiveSkillProfileMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInactiveSkillProfileMappingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateInactiveSkillProfileMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateInactiveSkillProfileMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateInactiveSkillProfileMapping(ctx, req.(*CreateInactiveSkillProfileMappingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetAvailableRegressionForecasterModelTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableRegressionForecasterModelTypesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetAvailableRegressionForecasterModelTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetAvailableRegressionForecasterModelTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetAvailableRegressionForecasterModelTypes(ctx, req.(*GetAvailableRegressionForecasterModelTypesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DisconnectInactiveSkillProfileMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectInactiveSkillProfileMappingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DisconnectInactiveSkillProfileMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DisconnectInactiveSkillProfileMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DisconnectInactiveSkillProfileMapping(ctx, req.(*DisconnectInactiveSkillProfileMappingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateSkillProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSkillProfileGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateSkillProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateSkillProfileGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateSkillProfileGroup(ctx, req.(*CreateSkillProfileGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateSkillProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkillProfileGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateSkillProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateSkillProfileGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateSkillProfileGroup(ctx, req.(*UpdateSkillProfileGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListSkillProfileGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkillProfileGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListSkillProfileGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListSkillProfileGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListSkillProfileGroups(ctx, req.(*ListSkillProfileGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateSkillProfileGroupAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkillProfileGroupAssociationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateSkillProfileGroupAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateSkillProfileGroupAssociations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateSkillProfileGroupAssociations(ctx, req.(*UpdateSkillProfileGroupAssociationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteHistoricalDataDeltas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHistoricalDataDeltasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteHistoricalDataDeltas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteHistoricalDataDeltas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteHistoricalDataDeltas(ctx, req.(*DeleteHistoricalDataDeltasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListTopSkillProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopSkillProfilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListTopSkillProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListTopSkillProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListTopSkillProfiles(ctx, req.(*ListTopSkillProfilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetSkillProfilesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkillProfilesCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetSkillProfilesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetSkillProfilesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetSkillProfilesCount(ctx, req.(*GetSkillProfilesCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_BuildProfileForecastByInterval_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildProfileForecastByIntervalReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WFMServer).BuildProfileForecastByInterval(m, &wFMBuildProfileForecastByIntervalServer{stream})
}

type WFM_BuildProfileForecastByIntervalServer interface {
	Send(*CallDataByInterval) error
	grpc.ServerStream
}

type wFMBuildProfileForecastByIntervalServer struct {
	grpc.ServerStream
}

func (x *wFMBuildProfileForecastByIntervalServer) Send(m *CallDataByInterval) error {
	return x.ServerStream.SendMsg(m)
}

func _WFM_BuildProfileForecastByIntervalWithStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildProfileForecastByIntervalWithStatsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WFMServer).BuildProfileForecastByIntervalWithStats(m, &wFMBuildProfileForecastByIntervalWithStatsServer{stream})
}

type WFM_BuildProfileForecastByIntervalWithStatsServer interface {
	Send(*BuildProfileForecastByIntervalWithStatsRes) error
	grpc.ServerStream
}

type wFMBuildProfileForecastByIntervalWithStatsServer struct {
	grpc.ServerStream
}

func (x *wFMBuildProfileForecastByIntervalWithStatsServer) Send(m *BuildProfileForecastByIntervalWithStatsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _WFM_UpsertProfileForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertProfileForecastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpsertProfileForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpsertProfileForecast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpsertProfileForecast(ctx, req.(*UpsertProfileForecastReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateCallProfileTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCallProfileTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateCallProfileTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateCallProfileTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateCallProfileTemplate(ctx, req.(*CreateCallProfileTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteCallProfileTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCallProfileTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteCallProfileTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteCallProfileTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteCallProfileTemplate(ctx, req.(*DeleteCallProfileTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateRegressionTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegressionTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateRegressionTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateRegressionTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateRegressionTemplate(ctx, req.(*CreateRegressionTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteRegressionTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegressionTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteRegressionTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteRegressionTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteRegressionTemplate(ctx, req.(*DeleteRegressionTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListRegressionTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegressionTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListRegressionTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListRegressionTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListRegressionTemplates(ctx, req.(*ListRegressionTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListForecastIntervalsForSkillProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListForecastIntervalsForSkillProfileReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WFMServer).ListForecastIntervalsForSkillProfile(m, &wFMListForecastIntervalsForSkillProfileServer{stream})
}

type WFM_ListForecastIntervalsForSkillProfileServer interface {
	Send(*CallDataByInterval) error
	grpc.ServerStream
}

type wFMListForecastIntervalsForSkillProfileServer struct {
	grpc.ServerStream
}

func (x *wFMListForecastIntervalsForSkillProfileServer) Send(m *CallDataByInterval) error {
	return x.ServerStream.SendMsg(m)
}

func _WFM_ListForecastIntervals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListForecastIntervalsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WFMServer).ListForecastIntervals(m, &wFMListForecastIntervalsServer{stream})
}

type WFM_ListForecastIntervalsServer interface {
	Send(*CallDataByInterval) error
	grpc.ServerStream
}

type wFMListForecastIntervalsServer struct {
	grpc.ServerStream
}

func (x *wFMListForecastIntervalsServer) Send(m *CallDataByInterval) error {
	return x.ServerStream.SendMsg(m)
}

func _WFM_BuildRegressionForecastByInterval_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildRegressionForecastByIntervalReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WFMServer).BuildRegressionForecastByInterval(m, &wFMBuildRegressionForecastByIntervalServer{stream})
}

type WFM_BuildRegressionForecastByIntervalServer interface {
	Send(*CallDataByInterval) error
	grpc.ServerStream
}

type wFMBuildRegressionForecastByIntervalServer struct {
	grpc.ServerStream
}

func (x *wFMBuildRegressionForecastByIntervalServer) Send(m *CallDataByInterval) error {
	return x.ServerStream.SendMsg(m)
}

func _WFM_BuildRegressionForecastByIntervalWithStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildRegressionForecastByIntervalWithStatsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WFMServer).BuildRegressionForecastByIntervalWithStats(m, &wFMBuildRegressionForecastByIntervalWithStatsServer{stream})
}

type WFM_BuildRegressionForecastByIntervalWithStatsServer interface {
	Send(*BuildRegressionForecastByIntervalWithStatsRes) error
	grpc.ServerStream
}

type wFMBuildRegressionForecastByIntervalWithStatsServer struct {
	grpc.ServerStream
}

func (x *wFMBuildRegressionForecastByIntervalWithStatsServer) Send(m *BuildRegressionForecastByIntervalWithStatsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _WFM_ListCallProfileTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCallProfileTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListCallProfileTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListCallProfileTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListCallProfileTemplates(ctx, req.(*ListCallProfileTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpsertRegressionForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRegressionForecastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpsertRegressionForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpsertRegressionForecast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpsertRegressionForecast(ctx, req.(*UpsertRegressionForecastReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpsertForecastDataDelta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertForecastDataDeltaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpsertForecastDataDelta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpsertForecastDataDelta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpsertForecastDataDelta(ctx, req.(*UpsertForecastDataDeltaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpsertForecastDataDeltas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertForecastDataDeltasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpsertForecastDataDeltas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpsertForecastDataDeltas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpsertForecastDataDeltas(ctx, req.(*UpsertForecastDataDeltasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteForecastIntervals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteForecastIntervalsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteForecastIntervals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteForecastIntervals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteForecastIntervals(ctx, req.(*DeleteForecastIntervalsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListHistoricalDataForAllSkillProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHistoricalDataForAllSkillProfilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListHistoricalDataForAllSkillProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListHistoricalDataForAllSkillProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListHistoricalDataForAllSkillProfiles(ctx, req.(*ListHistoricalDataForAllSkillProfilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_BuildDOWAndMOYProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildDOWAndMOYProfilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).BuildDOWAndMOYProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_BuildDOWAndMOYProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).BuildDOWAndMOYProfiles(ctx, req.(*BuildDOWAndMOYProfilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CalculateTrainingDataAveragesForSkillProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateTrainingDataAveragesForSkillProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CalculateTrainingDataAveragesForSkillProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CalculateTrainingDataAveragesForSkillProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CalculateTrainingDataAveragesForSkillProfile(ctx, req.(*CalculateTrainingDataAveragesForSkillProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateSkillProfileAveragesUsingHistoricalData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkillProfileAveragesUsingHistoricalDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateSkillProfileAveragesUsingHistoricalData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateSkillProfileAveragesUsingHistoricalData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateSkillProfileAveragesUsingHistoricalData(ctx, req.(*UpdateSkillProfileAveragesUsingHistoricalDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateCallCenterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCallCenterNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateCallCenterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateCallCenterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateCallCenterNode(ctx, req.(*UpdateCallCenterNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateClientNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateClientNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateClientNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateClientNode(ctx, req.(*CreateClientNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateClientNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateClientNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateClientNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateClientNode(ctx, req.(*UpdateClientNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateLocationNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateLocationNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateLocationNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateLocationNode(ctx, req.(*CreateLocationNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateLocationNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateLocationNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateLocationNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateLocationNode(ctx, req.(*UpdateLocationNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateProgramNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProgramNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateProgramNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateProgramNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateProgramNode(ctx, req.(*CreateProgramNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateProgramNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgramNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateProgramNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateProgramNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateProgramNode(ctx, req.(*UpdateProgramNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListProgramNodesBySid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProgramNodesBySidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListProgramNodesBySid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListProgramNodesBySid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListProgramNodesBySid(ctx, req.(*ListProgramNodesBySidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateConstraintRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConstraintRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateConstraintRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateConstraintRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateConstraintRule(ctx, req.(*CreateConstraintRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateConstraintRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConstraintRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateConstraintRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateConstraintRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateConstraintRule(ctx, req.(*UpdateConstraintRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteConstraintRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConstraintRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteConstraintRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteConstraintRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteConstraintRule(ctx, req.(*DeleteConstraintRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateNonSkillActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNonSkillActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateNonSkillActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateNonSkillActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateNonSkillActivity(ctx, req.(*CreateNonSkillActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateNonSkillActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNonSkillActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateNonSkillActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateNonSkillActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateNonSkillActivity(ctx, req.(*UpdateNonSkillActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListNonSkillActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNonSkillActivitiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListNonSkillActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListNonSkillActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListNonSkillActivities(ctx, req.(*ListNonSkillActivitiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListNonSkillActivityAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNonSkillActivityAssociationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListNonSkillActivityAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListNonSkillActivityAssociations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListNonSkillActivityAssociations(ctx, req.(*ListNonSkillActivityAssociationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListCandidateSchedulingActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCandidateSchedulingActivitiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListCandidateSchedulingActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListCandidateSchedulingActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListCandidateSchedulingActivities(ctx, req.(*ListCandidateSchedulingActivitiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateAgentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateAgentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateAgentGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateAgentGroup(ctx, req.(*CreateAgentGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateAgentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateAgentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateAgentGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateAgentGroup(ctx, req.(*UpdateAgentGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateWFMAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWFMAgentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateWFMAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateWFMAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateWFMAgent(ctx, req.(*UpdateWFMAgentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListAllWFMAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllWFMAgentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListAllWFMAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListAllWFMAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListAllWFMAgents(ctx, req.(*ListAllWFMAgentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListCandidateWFMAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCandidateWFMAgentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListCandidateWFMAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListCandidateWFMAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListCandidateWFMAgents(ctx, req.(*ListCandidateWFMAgentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListUngroupedWFMAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUngroupedWFMAgentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListUngroupedWFMAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListUngroupedWFMAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListUngroupedWFMAgents(ctx, req.(*ListUngroupedWFMAgentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListWFMAgentSids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWFMAgentSidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListWFMAgentSids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListWFMAgentSids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListWFMAgentSids(ctx, req.(*ListWFMAgentSidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListWFMAgentsAssociatedWithAgentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWFMAgentsAssociatedWithAgentGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListWFMAgentsAssociatedWithAgentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListWFMAgentsAssociatedWithAgentGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListWFMAgentsAssociatedWithAgentGroup(ctx, req.(*ListWFMAgentsAssociatedWithAgentGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateWFMAgentMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWFMAgentMembershipsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateWFMAgentMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateWFMAgentMemberships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateWFMAgentMemberships(ctx, req.(*CreateWFMAgentMembershipsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteWFMAgentMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWFMAgentMembershipsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteWFMAgentMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteWFMAgentMemberships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteWFMAgentMemberships(ctx, req.(*DeleteWFMAgentMembershipsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteWFMAgentsMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWFMAgentsMembershipsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteWFMAgentsMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteWFMAgentsMemberships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteWFMAgentsMemberships(ctx, req.(*DeleteWFMAgentsMembershipsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_BuildAgentDiagnostics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildAgentDiagnosticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).BuildAgentDiagnostics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_BuildAgentDiagnostics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).BuildAgentDiagnostics(ctx, req.(*BuildAgentDiagnosticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateShiftTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShiftTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateShiftTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateShiftTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateShiftTemplate(ctx, req.(*CreateShiftTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateShiftTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShiftTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateShiftTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateShiftTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateShiftTemplate(ctx, req.(*UpdateShiftTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListShiftTemplatesBySids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShiftTemplatesBySidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListShiftTemplatesBySids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListShiftTemplatesBySids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListShiftTemplatesBySids(ctx, req.(*ListShiftTemplatesBySidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_BuildShiftTemplateDiagnostics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildShiftTemplateDiagnosticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).BuildShiftTemplateDiagnostics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_BuildShiftTemplateDiagnostics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).BuildShiftTemplateDiagnostics(ctx, req.(*BuildShiftTemplateDiagnosticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreatePlacementRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlacementRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreatePlacementRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreatePlacementRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreatePlacementRule(ctx, req.(*CreatePlacementRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdatePlacementRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlacementRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdatePlacementRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdatePlacementRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdatePlacementRule(ctx, req.(*UpdatePlacementRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeletePlacementRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlacementRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeletePlacementRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeletePlacementRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeletePlacementRule(ctx, req.(*DeletePlacementRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateOpenTimesPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOpenTimesPatternReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateOpenTimesPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateOpenTimesPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateOpenTimesPattern(ctx, req.(*CreateOpenTimesPatternReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateOpenTimesPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpenTimesPatternReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateOpenTimesPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateOpenTimesPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateOpenTimesPattern(ctx, req.(*UpdateOpenTimesPatternReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteOpenTimesPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOpenTimesPatternReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteOpenTimesPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteOpenTimesPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteOpenTimesPattern(ctx, req.(*DeleteOpenTimesPatternReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetOpenTimesBitmaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenTimesBitmapsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetOpenTimesBitmaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetOpenTimesBitmaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetOpenTimesBitmaps(ctx, req.(*GetOpenTimesBitmapsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateAgentAvailabilityPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentAvailabilityPatternReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateAgentAvailabilityPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateAgentAvailabilityPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateAgentAvailabilityPattern(ctx, req.(*CreateAgentAvailabilityPatternReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateAgentAvailabilityPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentAvailabilityPatternReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateAgentAvailabilityPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateAgentAvailabilityPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateAgentAvailabilityPattern(ctx, req.(*UpdateAgentAvailabilityPatternReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteAgentAvailabilityPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentAvailabilityPatternReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteAgentAvailabilityPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteAgentAvailabilityPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteAgentAvailabilityPattern(ctx, req.(*DeleteAgentAvailabilityPatternReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetAvailabilityBitmaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailabilityBitmapsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetAvailabilityBitmaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetAvailabilityBitmaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetAvailabilityBitmaps(ctx, req.(*GetAvailabilityBitmapsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpsertNonSkillActivityAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertNonSkillActivityAssociationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpsertNonSkillActivityAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpsertNonSkillActivityAssociation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpsertNonSkillActivityAssociation(ctx, req.(*UpsertNonSkillActivityAssociationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateSkillProficiencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSkillProficienciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateSkillProficiencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateSkillProficiencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateSkillProficiencies(ctx, req.(*CreateSkillProficienciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateSkillProficiencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkillProficienciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateSkillProficiencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateSkillProficiencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateSkillProficiencies(ctx, req.(*UpdateSkillProficienciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteSkillProficiency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSkillProficiencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteSkillProficiency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteSkillProficiency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteSkillProficiency(ctx, req.(*DeleteSkillProficiencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CopyScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyScenarioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CopyScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CopyScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CopyScenario(ctx, req.(*CopyScenarioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateScheduleScenarioWithNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduleScenarioWithNodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateScheduleScenarioWithNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateScheduleScenarioWithNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateScheduleScenarioWithNodes(ctx, req.(*CreateScheduleScenarioWithNodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateScheduleScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduleScenarioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateScheduleScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateScheduleScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateScheduleScenario(ctx, req.(*UpdateScheduleScenarioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListConfigEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigEntitiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListConfigEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListConfigEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListConfigEntities(ctx, req.(*ListConfigEntitiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteShiftInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShiftInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteShiftInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteShiftInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteShiftInstances(ctx, req.(*DeleteShiftInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_BuildNodeDiagnostics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildNodeDiagnosticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).BuildNodeDiagnostics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_BuildNodeDiagnostics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).BuildNodeDiagnostics(ctx, req.(*BuildNodeDiagnosticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_BuildGlobalDiagnostics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildGlobalDiagnosticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).BuildGlobalDiagnostics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_BuildGlobalDiagnostics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).BuildGlobalDiagnostics(ctx, req.(*BuildGlobalDiagnosticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetPublishedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishedScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetPublishedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetPublishedSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetPublishedSchedule(ctx, req.(*GetPublishedScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetPublishedScheduleRequiredCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishedScheduleRequiredCallsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetPublishedScheduleRequiredCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetPublishedScheduleRequiredCalls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetPublishedScheduleRequiredCalls(ctx, req.(*GetPublishedScheduleRequiredCallsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetDraftScheduleRequiredCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDraftScheduleRequiredCallsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetDraftScheduleRequiredCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetDraftScheduleRequiredCalls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetDraftScheduleRequiredCalls(ctx, req.(*GetDraftScheduleRequiredCallsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateDraftSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDraftScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateDraftSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateDraftSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateDraftSchedule(ctx, req.(*CreateDraftScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateDraftSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDraftScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateDraftSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateDraftSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateDraftSchedule(ctx, req.(*UpdateDraftScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_BuildDraftSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildDraftScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).BuildDraftSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_BuildDraftSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).BuildDraftSchedule(ctx, req.(*BuildDraftScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_PublishDraftSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDraftScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).PublishDraftSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_PublishDraftSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).PublishDraftSchedule(ctx, req.(*PublishDraftScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ResetDraftSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetDraftScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ResetDraftSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ResetDraftSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ResetDraftSchedule(ctx, req.(*ResetDraftScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetDraftSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDraftScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetDraftSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetDraftSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetDraftSchedule(ctx, req.(*GetDraftScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListDraftSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDraftSchedulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListDraftSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListDraftSchedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListDraftSchedules(ctx, req.(*ListDraftSchedulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ClearSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ClearSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ClearSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ClearSchedule(ctx, req.(*ClearScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteDraftSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDraftScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteDraftSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteDraftSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteDraftSchedule(ctx, req.(*DeleteDraftScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListShiftInstancesBySid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShiftInstancesBySidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListShiftInstancesBySid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListShiftInstancesBySid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListShiftInstancesBySid(ctx, req.(*ListShiftInstancesBySidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CopyScheduleToSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyScheduleToScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CopyScheduleToSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CopyScheduleToSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CopyScheduleToSchedule(ctx, req.(*CopyScheduleToScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateShiftInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShiftInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateShiftInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateShiftInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateShiftInstance(ctx, req.(*CreateShiftInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateShiftInstanceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShiftInstanceV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateShiftInstanceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateShiftInstanceV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateShiftInstanceV2(ctx, req.(*CreateShiftInstanceV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_SwapShiftInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapShiftInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).SwapShiftInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_SwapShiftInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).SwapShiftInstances(ctx, req.(*SwapShiftInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateShiftInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShiftInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateShiftInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateShiftInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateShiftInstance(ctx, req.(*UpdateShiftInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateShiftInstanceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShiftInstanceV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateShiftInstanceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateShiftInstanceV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateShiftInstanceV2(ctx, req.(*UpdateShiftInstanceV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CopyShiftInstancesToSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyShiftInstancesToScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CopyShiftInstancesToSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CopyShiftInstancesToSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CopyShiftInstancesToSchedule(ctx, req.(*CopyShiftInstancesToScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListShiftInstanceSidsForAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShiftInstanceSidsForAgentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListShiftInstanceSidsForAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListShiftInstanceSidsForAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListShiftInstanceSidsForAgent(ctx, req.(*ListShiftInstanceSidsForAgentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListShiftSegmentsByShiftInstanceSids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShiftSegmentsByShiftInstanceSidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListShiftSegmentsByShiftInstanceSids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListShiftSegmentsByShiftInstanceSids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListShiftSegmentsByShiftInstanceSids(ctx, req.(*ListShiftSegmentsByShiftInstanceSidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_SetSchedulingTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSchedulingTargetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).SetSchedulingTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_SetSchedulingTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).SetSchedulingTarget(ctx, req.(*SetSchedulingTargetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetSchedulingTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulingTargetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetSchedulingTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetSchedulingTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetSchedulingTarget(ctx, req.(*GetSchedulingTargetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteSchedulingTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchedulingTargetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteSchedulingTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteSchedulingTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteSchedulingTarget(ctx, req.(*DeleteSchedulingTargetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetDefaultSchedulingTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultSchedulingTargetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetDefaultSchedulingTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetDefaultSchedulingTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetDefaultSchedulingTarget(ctx, req.(*GetDefaultSchedulingTargetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_SetDefaultSchedulingTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultSchedulingTargetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).SetDefaultSchedulingTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_SetDefaultSchedulingTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).SetDefaultSchedulingTarget(ctx, req.(*SetDefaultSchedulingTargetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetPerformanceMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPerformanceMetricsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetPerformanceMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetPerformanceMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetPerformanceMetrics(ctx, req.(*GetPerformanceMetricsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListRequiredCallsIntervals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequiredCallsIntervalsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListRequiredCallsIntervals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListRequiredCallsIntervals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListRequiredCallsIntervals(ctx, req.(*ListRequiredCallsIntervalsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateTourPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourPatternReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateTourPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateTourPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateTourPattern(ctx, req.(*CreateTourPatternReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetTourPatternDiagnostics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTourPatternDiagnosticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetTourPatternDiagnostics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetTourPatternDiagnostics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetTourPatternDiagnostics(ctx, req.(*GetTourPatternDiagnosticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpsertTourPatternWithMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTourPatternWithMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpsertTourPatternWithMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpsertTourPatternWithMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpsertTourPatternWithMembers(ctx, req.(*UpsertTourPatternWithMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GetTourPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTourPatternReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GetTourPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GetTourPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GetTourPattern(ctx, req.(*GetTourPatternReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteTourPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTourPatternReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteTourPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteTourPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteTourPattern(ctx, req.(*DeleteTourPatternReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateTourWeekPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourWeekPatternReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateTourWeekPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateTourWeekPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateTourWeekPattern(ctx, req.(*CreateTourWeekPatternReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListTourWeekPatterns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTourWeekPatternsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListTourWeekPatterns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListTourWeekPatterns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListTourWeekPatterns(ctx, req.(*ListTourWeekPatternsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteTourWeekPatterns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTourWeekPatternsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteTourWeekPatterns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteTourWeekPatterns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteTourWeekPatterns(ctx, req.(*DeleteTourWeekPatternsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateTourShiftInstanceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourShiftInstanceConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateTourShiftInstanceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateTourShiftInstanceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateTourShiftInstanceConfig(ctx, req.(*CreateTourShiftInstanceConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateTourShiftInstanceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTourShiftInstanceConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateTourShiftInstanceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateTourShiftInstanceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateTourShiftInstanceConfig(ctx, req.(*UpdateTourShiftInstanceConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListTourShiftInstanceConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTourShiftInstanceConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListTourShiftInstanceConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListTourShiftInstanceConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListTourShiftInstanceConfigs(ctx, req.(*ListTourShiftInstanceConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteTourShiftInstanceConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTourShiftInstanceConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteTourShiftInstanceConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteTourShiftInstanceConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteTourShiftInstanceConfigs(ctx, req.(*DeleteTourShiftInstanceConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateTourShiftSegmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourShiftSegmentConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateTourShiftSegmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateTourShiftSegmentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateTourShiftSegmentConfig(ctx, req.(*CreateTourShiftSegmentConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateTourShiftSegmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTourShiftSegmentConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateTourShiftSegmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateTourShiftSegmentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateTourShiftSegmentConfig(ctx, req.(*UpdateTourShiftSegmentConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListTourShiftSegmentConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTourShiftSegmentConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListTourShiftSegmentConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListTourShiftSegmentConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListTourShiftSegmentConfigs(ctx, req.(*ListTourShiftSegmentConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteTourShiftSegmentConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTourShiftSegmentConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteTourShiftSegmentConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteTourShiftSegmentConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteTourShiftSegmentConfigs(ctx, req.(*DeleteTourShiftSegmentConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateTourAgentCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourAgentCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateTourAgentCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateTourAgentCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateTourAgentCollection(ctx, req.(*CreateTourAgentCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_UpdateTourAgentCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTourAgentCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).UpdateTourAgentCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_UpdateTourAgentCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).UpdateTourAgentCollection(ctx, req.(*UpdateTourAgentCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListTourAgentCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTourAgentCollectionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListTourAgentCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListTourAgentCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListTourAgentCollections(ctx, req.(*ListTourAgentCollectionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteTourAgentCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTourAgentCollectionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteTourAgentCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteTourAgentCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteTourAgentCollections(ctx, req.(*DeleteTourAgentCollectionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_CreateTourAgentCollectionWFMAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourAgentCollectionWFMAgentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).CreateTourAgentCollectionWFMAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_CreateTourAgentCollectionWFMAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).CreateTourAgentCollectionWFMAgents(ctx, req.(*CreateTourAgentCollectionWFMAgentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_ListTourAgentCollectionWFMAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTourAgentCollectionWFMAgentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).ListTourAgentCollectionWFMAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_ListTourAgentCollectionWFMAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).ListTourAgentCollectionWFMAgents(ctx, req.(*ListTourAgentCollectionWFMAgentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_DeleteTourAgentCollectionWFMAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTourAgentCollectionWFMAgentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).DeleteTourAgentCollectionWFMAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_DeleteTourAgentCollectionWFMAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).DeleteTourAgentCollectionWFMAgents(ctx, req.(*DeleteTourAgentCollectionWFMAgentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WFM_GenerateTourWeekPatterns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTourWeekPatternsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WFMServer).GenerateTourWeekPatterns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WFM_GenerateTourWeekPatterns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WFMServer).GenerateTourWeekPatterns(ctx, req.(*GenerateTourWeekPatternsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WFM_ServiceDesc is the grpc.ServiceDesc for WFM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WFM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.wfm.WFM",
	HandlerType: (*WFMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSkillProfiles",
			Handler:    _WFM_ListSkillProfiles_Handler,
		},
		{
			MethodName: "UpdateSkillProfile",
			Handler:    _WFM_UpdateSkillProfile_Handler,
		},
		{
			MethodName: "UpdateSkillProfileProficiencies",
			Handler:    _WFM_UpdateSkillProfileProficiencies_Handler,
		},
		{
			MethodName: "GetSkillProfile",
			Handler:    _WFM_GetSkillProfile_Handler,
		},
		{
			MethodName: "ResyncSkillProfiles",
			Handler:    _WFM_ResyncSkillProfiles_Handler,
		},
		{
			MethodName: "GetLastSkillProfileResyncDate",
			Handler:    _WFM_GetLastSkillProfileResyncDate_Handler,
		},
		{
			MethodName: "UpsertForecastingParameters",
			Handler:    _WFM_UpsertForecastingParameters_Handler,
		},
		{
			MethodName: "GetForecastingParameters",
			Handler:    _WFM_GetForecastingParameters_Handler,
		},
		{
			MethodName: "ListHistoricalData",
			Handler:    _WFM_ListHistoricalData_Handler,
		},
		{
			MethodName: "UpsertHistoricalDataDelta",
			Handler:    _WFM_UpsertHistoricalDataDelta_Handler,
		},
		{
			MethodName: "UpsertHistoricalDataDeltas",
			Handler:    _WFM_UpsertHistoricalDataDeltas_Handler,
		},
		{
			MethodName: "ListSkills",
			Handler:    _WFM_ListSkills_Handler,
		},
		{
			MethodName: "BuildCallProfileTemplateForSkillProfile",
			Handler:    _WFM_BuildCallProfileTemplateForSkillProfile_Handler,
		},
		{
			MethodName: "BuildCallProfileTemplate",
			Handler:    _WFM_BuildCallProfileTemplate_Handler,
		},
		{
			MethodName: "CreateInactiveSkillProfileMapping",
			Handler:    _WFM_CreateInactiveSkillProfileMapping_Handler,
		},
		{
			MethodName: "GetAvailableRegressionForecasterModelTypes",
			Handler:    _WFM_GetAvailableRegressionForecasterModelTypes_Handler,
		},
		{
			MethodName: "DisconnectInactiveSkillProfileMapping",
			Handler:    _WFM_DisconnectInactiveSkillProfileMapping_Handler,
		},
		{
			MethodName: "CreateSkillProfileGroup",
			Handler:    _WFM_CreateSkillProfileGroup_Handler,
		},
		{
			MethodName: "UpdateSkillProfileGroup",
			Handler:    _WFM_UpdateSkillProfileGroup_Handler,
		},
		{
			MethodName: "ListSkillProfileGroups",
			Handler:    _WFM_ListSkillProfileGroups_Handler,
		},
		{
			MethodName: "UpdateSkillProfileGroupAssociations",
			Handler:    _WFM_UpdateSkillProfileGroupAssociations_Handler,
		},
		{
			MethodName: "DeleteHistoricalDataDeltas",
			Handler:    _WFM_DeleteHistoricalDataDeltas_Handler,
		},
		{
			MethodName: "ListTopSkillProfiles",
			Handler:    _WFM_ListTopSkillProfiles_Handler,
		},
		{
			MethodName: "GetSkillProfilesCount",
			Handler:    _WFM_GetSkillProfilesCount_Handler,
		},
		{
			MethodName: "UpsertProfileForecast",
			Handler:    _WFM_UpsertProfileForecast_Handler,
		},
		{
			MethodName: "CreateCallProfileTemplate",
			Handler:    _WFM_CreateCallProfileTemplate_Handler,
		},
		{
			MethodName: "DeleteCallProfileTemplate",
			Handler:    _WFM_DeleteCallProfileTemplate_Handler,
		},
		{
			MethodName: "CreateRegressionTemplate",
			Handler:    _WFM_CreateRegressionTemplate_Handler,
		},
		{
			MethodName: "DeleteRegressionTemplate",
			Handler:    _WFM_DeleteRegressionTemplate_Handler,
		},
		{
			MethodName: "ListRegressionTemplates",
			Handler:    _WFM_ListRegressionTemplates_Handler,
		},
		{
			MethodName: "ListCallProfileTemplates",
			Handler:    _WFM_ListCallProfileTemplates_Handler,
		},
		{
			MethodName: "UpsertRegressionForecast",
			Handler:    _WFM_UpsertRegressionForecast_Handler,
		},
		{
			MethodName: "UpsertForecastDataDelta",
			Handler:    _WFM_UpsertForecastDataDelta_Handler,
		},
		{
			MethodName: "UpsertForecastDataDeltas",
			Handler:    _WFM_UpsertForecastDataDeltas_Handler,
		},
		{
			MethodName: "DeleteForecastIntervals",
			Handler:    _WFM_DeleteForecastIntervals_Handler,
		},
		{
			MethodName: "ListHistoricalDataForAllSkillProfiles",
			Handler:    _WFM_ListHistoricalDataForAllSkillProfiles_Handler,
		},
		{
			MethodName: "BuildDOWAndMOYProfiles",
			Handler:    _WFM_BuildDOWAndMOYProfiles_Handler,
		},
		{
			MethodName: "CalculateTrainingDataAveragesForSkillProfile",
			Handler:    _WFM_CalculateTrainingDataAveragesForSkillProfile_Handler,
		},
		{
			MethodName: "UpdateSkillProfileAveragesUsingHistoricalData",
			Handler:    _WFM_UpdateSkillProfileAveragesUsingHistoricalData_Handler,
		},
		{
			MethodName: "UpdateCallCenterNode",
			Handler:    _WFM_UpdateCallCenterNode_Handler,
		},
		{
			MethodName: "CreateClientNode",
			Handler:    _WFM_CreateClientNode_Handler,
		},
		{
			MethodName: "UpdateClientNode",
			Handler:    _WFM_UpdateClientNode_Handler,
		},
		{
			MethodName: "CreateLocationNode",
			Handler:    _WFM_CreateLocationNode_Handler,
		},
		{
			MethodName: "UpdateLocationNode",
			Handler:    _WFM_UpdateLocationNode_Handler,
		},
		{
			MethodName: "CreateProgramNode",
			Handler:    _WFM_CreateProgramNode_Handler,
		},
		{
			MethodName: "UpdateProgramNode",
			Handler:    _WFM_UpdateProgramNode_Handler,
		},
		{
			MethodName: "ListProgramNodesBySid",
			Handler:    _WFM_ListProgramNodesBySid_Handler,
		},
		{
			MethodName: "CreateConstraintRule",
			Handler:    _WFM_CreateConstraintRule_Handler,
		},
		{
			MethodName: "UpdateConstraintRule",
			Handler:    _WFM_UpdateConstraintRule_Handler,
		},
		{
			MethodName: "DeleteConstraintRule",
			Handler:    _WFM_DeleteConstraintRule_Handler,
		},
		{
			MethodName: "CreateNonSkillActivity",
			Handler:    _WFM_CreateNonSkillActivity_Handler,
		},
		{
			MethodName: "UpdateNonSkillActivity",
			Handler:    _WFM_UpdateNonSkillActivity_Handler,
		},
		{
			MethodName: "ListNonSkillActivities",
			Handler:    _WFM_ListNonSkillActivities_Handler,
		},
		{
			MethodName: "ListNonSkillActivityAssociations",
			Handler:    _WFM_ListNonSkillActivityAssociations_Handler,
		},
		{
			MethodName: "ListCandidateSchedulingActivities",
			Handler:    _WFM_ListCandidateSchedulingActivities_Handler,
		},
		{
			MethodName: "CreateAgentGroup",
			Handler:    _WFM_CreateAgentGroup_Handler,
		},
		{
			MethodName: "UpdateAgentGroup",
			Handler:    _WFM_UpdateAgentGroup_Handler,
		},
		{
			MethodName: "UpdateWFMAgent",
			Handler:    _WFM_UpdateWFMAgent_Handler,
		},
		{
			MethodName: "ListAllWFMAgents",
			Handler:    _WFM_ListAllWFMAgents_Handler,
		},
		{
			MethodName: "ListCandidateWFMAgents",
			Handler:    _WFM_ListCandidateWFMAgents_Handler,
		},
		{
			MethodName: "ListUngroupedWFMAgents",
			Handler:    _WFM_ListUngroupedWFMAgents_Handler,
		},
		{
			MethodName: "ListWFMAgentSids",
			Handler:    _WFM_ListWFMAgentSids_Handler,
		},
		{
			MethodName: "ListWFMAgentsAssociatedWithAgentGroup",
			Handler:    _WFM_ListWFMAgentsAssociatedWithAgentGroup_Handler,
		},
		{
			MethodName: "CreateWFMAgentMemberships",
			Handler:    _WFM_CreateWFMAgentMemberships_Handler,
		},
		{
			MethodName: "DeleteWFMAgentMemberships",
			Handler:    _WFM_DeleteWFMAgentMemberships_Handler,
		},
		{
			MethodName: "DeleteWFMAgentsMemberships",
			Handler:    _WFM_DeleteWFMAgentsMemberships_Handler,
		},
		{
			MethodName: "BuildAgentDiagnostics",
			Handler:    _WFM_BuildAgentDiagnostics_Handler,
		},
		{
			MethodName: "CreateShiftTemplate",
			Handler:    _WFM_CreateShiftTemplate_Handler,
		},
		{
			MethodName: "UpdateShiftTemplate",
			Handler:    _WFM_UpdateShiftTemplate_Handler,
		},
		{
			MethodName: "ListShiftTemplatesBySids",
			Handler:    _WFM_ListShiftTemplatesBySids_Handler,
		},
		{
			MethodName: "BuildShiftTemplateDiagnostics",
			Handler:    _WFM_BuildShiftTemplateDiagnostics_Handler,
		},
		{
			MethodName: "CreatePlacementRule",
			Handler:    _WFM_CreatePlacementRule_Handler,
		},
		{
			MethodName: "UpdatePlacementRule",
			Handler:    _WFM_UpdatePlacementRule_Handler,
		},
		{
			MethodName: "DeletePlacementRule",
			Handler:    _WFM_DeletePlacementRule_Handler,
		},
		{
			MethodName: "CreateOpenTimesPattern",
			Handler:    _WFM_CreateOpenTimesPattern_Handler,
		},
		{
			MethodName: "UpdateOpenTimesPattern",
			Handler:    _WFM_UpdateOpenTimesPattern_Handler,
		},
		{
			MethodName: "DeleteOpenTimesPattern",
			Handler:    _WFM_DeleteOpenTimesPattern_Handler,
		},
		{
			MethodName: "GetOpenTimesBitmaps",
			Handler:    _WFM_GetOpenTimesBitmaps_Handler,
		},
		{
			MethodName: "CreateAgentAvailabilityPattern",
			Handler:    _WFM_CreateAgentAvailabilityPattern_Handler,
		},
		{
			MethodName: "UpdateAgentAvailabilityPattern",
			Handler:    _WFM_UpdateAgentAvailabilityPattern_Handler,
		},
		{
			MethodName: "DeleteAgentAvailabilityPattern",
			Handler:    _WFM_DeleteAgentAvailabilityPattern_Handler,
		},
		{
			MethodName: "GetAvailabilityBitmaps",
			Handler:    _WFM_GetAvailabilityBitmaps_Handler,
		},
		{
			MethodName: "UpsertNonSkillActivityAssociation",
			Handler:    _WFM_UpsertNonSkillActivityAssociation_Handler,
		},
		{
			MethodName: "CreateSkillProficiencies",
			Handler:    _WFM_CreateSkillProficiencies_Handler,
		},
		{
			MethodName: "UpdateSkillProficiencies",
			Handler:    _WFM_UpdateSkillProficiencies_Handler,
		},
		{
			MethodName: "DeleteSkillProficiency",
			Handler:    _WFM_DeleteSkillProficiency_Handler,
		},
		{
			MethodName: "CopyScenario",
			Handler:    _WFM_CopyScenario_Handler,
		},
		{
			MethodName: "CreateScheduleScenarioWithNodes",
			Handler:    _WFM_CreateScheduleScenarioWithNodes_Handler,
		},
		{
			MethodName: "UpdateScheduleScenario",
			Handler:    _WFM_UpdateScheduleScenario_Handler,
		},
		{
			MethodName: "ListConfigEntities",
			Handler:    _WFM_ListConfigEntities_Handler,
		},
		{
			MethodName: "DeleteShiftInstances",
			Handler:    _WFM_DeleteShiftInstances_Handler,
		},
		{
			MethodName: "BuildNodeDiagnostics",
			Handler:    _WFM_BuildNodeDiagnostics_Handler,
		},
		{
			MethodName: "BuildGlobalDiagnostics",
			Handler:    _WFM_BuildGlobalDiagnostics_Handler,
		},
		{
			MethodName: "GetPublishedSchedule",
			Handler:    _WFM_GetPublishedSchedule_Handler,
		},
		{
			MethodName: "GetPublishedScheduleRequiredCalls",
			Handler:    _WFM_GetPublishedScheduleRequiredCalls_Handler,
		},
		{
			MethodName: "GetDraftScheduleRequiredCalls",
			Handler:    _WFM_GetDraftScheduleRequiredCalls_Handler,
		},
		{
			MethodName: "CreateDraftSchedule",
			Handler:    _WFM_CreateDraftSchedule_Handler,
		},
		{
			MethodName: "UpdateDraftSchedule",
			Handler:    _WFM_UpdateDraftSchedule_Handler,
		},
		{
			MethodName: "BuildDraftSchedule",
			Handler:    _WFM_BuildDraftSchedule_Handler,
		},
		{
			MethodName: "PublishDraftSchedule",
			Handler:    _WFM_PublishDraftSchedule_Handler,
		},
		{
			MethodName: "ResetDraftSchedule",
			Handler:    _WFM_ResetDraftSchedule_Handler,
		},
		{
			MethodName: "GetDraftSchedule",
			Handler:    _WFM_GetDraftSchedule_Handler,
		},
		{
			MethodName: "ListDraftSchedules",
			Handler:    _WFM_ListDraftSchedules_Handler,
		},
		{
			MethodName: "ClearSchedule",
			Handler:    _WFM_ClearSchedule_Handler,
		},
		{
			MethodName: "DeleteDraftSchedule",
			Handler:    _WFM_DeleteDraftSchedule_Handler,
		},
		{
			MethodName: "ListShiftInstancesBySid",
			Handler:    _WFM_ListShiftInstancesBySid_Handler,
		},
		{
			MethodName: "CopyScheduleToSchedule",
			Handler:    _WFM_CopyScheduleToSchedule_Handler,
		},
		{
			MethodName: "CreateShiftInstance",
			Handler:    _WFM_CreateShiftInstance_Handler,
		},
		{
			MethodName: "CreateShiftInstanceV2",
			Handler:    _WFM_CreateShiftInstanceV2_Handler,
		},
		{
			MethodName: "SwapShiftInstances",
			Handler:    _WFM_SwapShiftInstances_Handler,
		},
		{
			MethodName: "UpdateShiftInstance",
			Handler:    _WFM_UpdateShiftInstance_Handler,
		},
		{
			MethodName: "UpdateShiftInstanceV2",
			Handler:    _WFM_UpdateShiftInstanceV2_Handler,
		},
		{
			MethodName: "CopyShiftInstancesToSchedule",
			Handler:    _WFM_CopyShiftInstancesToSchedule_Handler,
		},
		{
			MethodName: "ListShiftInstanceSidsForAgent",
			Handler:    _WFM_ListShiftInstanceSidsForAgent_Handler,
		},
		{
			MethodName: "ListShiftSegmentsByShiftInstanceSids",
			Handler:    _WFM_ListShiftSegmentsByShiftInstanceSids_Handler,
		},
		{
			MethodName: "SetSchedulingTarget",
			Handler:    _WFM_SetSchedulingTarget_Handler,
		},
		{
			MethodName: "GetSchedulingTarget",
			Handler:    _WFM_GetSchedulingTarget_Handler,
		},
		{
			MethodName: "DeleteSchedulingTarget",
			Handler:    _WFM_DeleteSchedulingTarget_Handler,
		},
		{
			MethodName: "GetDefaultSchedulingTarget",
			Handler:    _WFM_GetDefaultSchedulingTarget_Handler,
		},
		{
			MethodName: "SetDefaultSchedulingTarget",
			Handler:    _WFM_SetDefaultSchedulingTarget_Handler,
		},
		{
			MethodName: "GetPerformanceMetrics",
			Handler:    _WFM_GetPerformanceMetrics_Handler,
		},
		{
			MethodName: "ListRequiredCallsIntervals",
			Handler:    _WFM_ListRequiredCallsIntervals_Handler,
		},
		{
			MethodName: "CreateTourPattern",
			Handler:    _WFM_CreateTourPattern_Handler,
		},
		{
			MethodName: "GetTourPatternDiagnostics",
			Handler:    _WFM_GetTourPatternDiagnostics_Handler,
		},
		{
			MethodName: "UpsertTourPatternWithMembers",
			Handler:    _WFM_UpsertTourPatternWithMembers_Handler,
		},
		{
			MethodName: "GetTourPattern",
			Handler:    _WFM_GetTourPattern_Handler,
		},
		{
			MethodName: "DeleteTourPattern",
			Handler:    _WFM_DeleteTourPattern_Handler,
		},
		{
			MethodName: "CreateTourWeekPattern",
			Handler:    _WFM_CreateTourWeekPattern_Handler,
		},
		{
			MethodName: "ListTourWeekPatterns",
			Handler:    _WFM_ListTourWeekPatterns_Handler,
		},
		{
			MethodName: "DeleteTourWeekPatterns",
			Handler:    _WFM_DeleteTourWeekPatterns_Handler,
		},
		{
			MethodName: "CreateTourShiftInstanceConfig",
			Handler:    _WFM_CreateTourShiftInstanceConfig_Handler,
		},
		{
			MethodName: "UpdateTourShiftInstanceConfig",
			Handler:    _WFM_UpdateTourShiftInstanceConfig_Handler,
		},
		{
			MethodName: "ListTourShiftInstanceConfigs",
			Handler:    _WFM_ListTourShiftInstanceConfigs_Handler,
		},
		{
			MethodName: "DeleteTourShiftInstanceConfigs",
			Handler:    _WFM_DeleteTourShiftInstanceConfigs_Handler,
		},
		{
			MethodName: "CreateTourShiftSegmentConfig",
			Handler:    _WFM_CreateTourShiftSegmentConfig_Handler,
		},
		{
			MethodName: "UpdateTourShiftSegmentConfig",
			Handler:    _WFM_UpdateTourShiftSegmentConfig_Handler,
		},
		{
			MethodName: "ListTourShiftSegmentConfigs",
			Handler:    _WFM_ListTourShiftSegmentConfigs_Handler,
		},
		{
			MethodName: "DeleteTourShiftSegmentConfigs",
			Handler:    _WFM_DeleteTourShiftSegmentConfigs_Handler,
		},
		{
			MethodName: "CreateTourAgentCollection",
			Handler:    _WFM_CreateTourAgentCollection_Handler,
		},
		{
			MethodName: "UpdateTourAgentCollection",
			Handler:    _WFM_UpdateTourAgentCollection_Handler,
		},
		{
			MethodName: "ListTourAgentCollections",
			Handler:    _WFM_ListTourAgentCollections_Handler,
		},
		{
			MethodName: "DeleteTourAgentCollections",
			Handler:    _WFM_DeleteTourAgentCollections_Handler,
		},
		{
			MethodName: "CreateTourAgentCollectionWFMAgents",
			Handler:    _WFM_CreateTourAgentCollectionWFMAgents_Handler,
		},
		{
			MethodName: "ListTourAgentCollectionWFMAgents",
			Handler:    _WFM_ListTourAgentCollectionWFMAgents_Handler,
		},
		{
			MethodName: "DeleteTourAgentCollectionWFMAgents",
			Handler:    _WFM_DeleteTourAgentCollectionWFMAgents_Handler,
		},
		{
			MethodName: "GenerateTourWeekPatterns",
			Handler:    _WFM_GenerateTourWeekPatterns_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BuildProfileForecastByInterval",
			Handler:       _WFM_BuildProfileForecastByInterval_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuildProfileForecastByIntervalWithStats",
			Handler:       _WFM_BuildProfileForecastByIntervalWithStats_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListForecastIntervalsForSkillProfile",
			Handler:       _WFM_ListForecastIntervalsForSkillProfile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListForecastIntervals",
			Handler:       _WFM_ListForecastIntervals_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuildRegressionForecastByInterval",
			Handler:       _WFM_BuildRegressionForecastByInterval_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuildRegressionForecastByIntervalWithStats",
			Handler:       _WFM_BuildRegressionForecastByIntervalWithStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1alpha1/wfm/wfm.proto",
}
