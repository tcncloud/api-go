// Copyright (c) 2020, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/wfm/wfm.proto

package wfmconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	wfm "github.com/tcncloud/api-go/api/v1alpha1/wfm"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WFMName is the fully-qualified name of the WFM service.
	WFMName = "api.v1alpha1.wfm.WFM"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WFMListSkillProfilesProcedure is the fully-qualified name of the WFM's ListSkillProfiles RPC.
	WFMListSkillProfilesProcedure = "/api.v1alpha1.wfm.WFM/ListSkillProfiles"
	// WFMUpdateSkillProfileProcedure is the fully-qualified name of the WFM's UpdateSkillProfile RPC.
	WFMUpdateSkillProfileProcedure = "/api.v1alpha1.wfm.WFM/UpdateSkillProfile"
	// WFMUpdateSkillProfileProficienciesProcedure is the fully-qualified name of the WFM's
	// UpdateSkillProfileProficiencies RPC.
	WFMUpdateSkillProfileProficienciesProcedure = "/api.v1alpha1.wfm.WFM/UpdateSkillProfileProficiencies"
	// WFMGetSkillProfileProcedure is the fully-qualified name of the WFM's GetSkillProfile RPC.
	WFMGetSkillProfileProcedure = "/api.v1alpha1.wfm.WFM/GetSkillProfile"
	// WFMResyncSkillProfilesProcedure is the fully-qualified name of the WFM's ResyncSkillProfiles RPC.
	WFMResyncSkillProfilesProcedure = "/api.v1alpha1.wfm.WFM/ResyncSkillProfiles"
	// WFMGetLastSkillProfileResyncDateProcedure is the fully-qualified name of the WFM's
	// GetLastSkillProfileResyncDate RPC.
	WFMGetLastSkillProfileResyncDateProcedure = "/api.v1alpha1.wfm.WFM/GetLastSkillProfileResyncDate"
	// WFMUpsertForecastingParametersProcedure is the fully-qualified name of the WFM's
	// UpsertForecastingParameters RPC.
	WFMUpsertForecastingParametersProcedure = "/api.v1alpha1.wfm.WFM/UpsertForecastingParameters"
	// WFMGetForecastingParametersProcedure is the fully-qualified name of the WFM's
	// GetForecastingParameters RPC.
	WFMGetForecastingParametersProcedure = "/api.v1alpha1.wfm.WFM/GetForecastingParameters"
	// WFMListHistoricalDataProcedure is the fully-qualified name of the WFM's ListHistoricalData RPC.
	WFMListHistoricalDataProcedure = "/api.v1alpha1.wfm.WFM/ListHistoricalData"
	// WFMUpsertHistoricalDataDeltaProcedure is the fully-qualified name of the WFM's
	// UpsertHistoricalDataDelta RPC.
	WFMUpsertHistoricalDataDeltaProcedure = "/api.v1alpha1.wfm.WFM/UpsertHistoricalDataDelta"
	// WFMUpsertHistoricalDataDeltasProcedure is the fully-qualified name of the WFM's
	// UpsertHistoricalDataDeltas RPC.
	WFMUpsertHistoricalDataDeltasProcedure = "/api.v1alpha1.wfm.WFM/UpsertHistoricalDataDeltas"
	// WFMListSkillsProcedure is the fully-qualified name of the WFM's ListSkills RPC.
	WFMListSkillsProcedure = "/api.v1alpha1.wfm.WFM/ListSkills"
	// WFMBuildCallProfileTemplateForSkillProfileProcedure is the fully-qualified name of the WFM's
	// BuildCallProfileTemplateForSkillProfile RPC.
	WFMBuildCallProfileTemplateForSkillProfileProcedure = "/api.v1alpha1.wfm.WFM/BuildCallProfileTemplateForSkillProfile"
	// WFMCreateInactiveSkillProfileMappingProcedure is the fully-qualified name of the WFM's
	// CreateInactiveSkillProfileMapping RPC.
	WFMCreateInactiveSkillProfileMappingProcedure = "/api.v1alpha1.wfm.WFM/CreateInactiveSkillProfileMapping"
	// WFMGetAvailableRegressionForecasterModelTypesProcedure is the fully-qualified name of the WFM's
	// GetAvailableRegressionForecasterModelTypes RPC.
	WFMGetAvailableRegressionForecasterModelTypesProcedure = "/api.v1alpha1.wfm.WFM/GetAvailableRegressionForecasterModelTypes"
	// WFMDisconnectInactiveSkillProfileMappingProcedure is the fully-qualified name of the WFM's
	// DisconnectInactiveSkillProfileMapping RPC.
	WFMDisconnectInactiveSkillProfileMappingProcedure = "/api.v1alpha1.wfm.WFM/DisconnectInactiveSkillProfileMapping"
	// WFMDeleteHistoricalDataDeltasProcedure is the fully-qualified name of the WFM's
	// DeleteHistoricalDataDeltas RPC.
	WFMDeleteHistoricalDataDeltasProcedure = "/api.v1alpha1.wfm.WFM/DeleteHistoricalDataDeltas"
	// WFMListTopSkillProfilesProcedure is the fully-qualified name of the WFM's ListTopSkillProfiles
	// RPC.
	WFMListTopSkillProfilesProcedure = "/api.v1alpha1.wfm.WFM/ListTopSkillProfiles"
	// WFMGetSkillProfilesCountProcedure is the fully-qualified name of the WFM's GetSkillProfilesCount
	// RPC.
	WFMGetSkillProfilesCountProcedure = "/api.v1alpha1.wfm.WFM/GetSkillProfilesCount"
	// WFMBuildProfileForecastByIntervalProcedure is the fully-qualified name of the WFM's
	// BuildProfileForecastByInterval RPC.
	WFMBuildProfileForecastByIntervalProcedure = "/api.v1alpha1.wfm.WFM/BuildProfileForecastByInterval"
	// WFMBuildProfileForecastByIntervalWithStatsProcedure is the fully-qualified name of the WFM's
	// BuildProfileForecastByIntervalWithStats RPC.
	WFMBuildProfileForecastByIntervalWithStatsProcedure = "/api.v1alpha1.wfm.WFM/BuildProfileForecastByIntervalWithStats"
	// WFMUpsertProfileForecastProcedure is the fully-qualified name of the WFM's UpsertProfileForecast
	// RPC.
	WFMUpsertProfileForecastProcedure = "/api.v1alpha1.wfm.WFM/UpsertProfileForecast"
	// WFMCreateCallProfileTemplateProcedure is the fully-qualified name of the WFM's
	// CreateCallProfileTemplate RPC.
	WFMCreateCallProfileTemplateProcedure = "/api.v1alpha1.wfm.WFM/CreateCallProfileTemplate"
	// WFMDeleteCallProfileTemplateProcedure is the fully-qualified name of the WFM's
	// DeleteCallProfileTemplate RPC.
	WFMDeleteCallProfileTemplateProcedure = "/api.v1alpha1.wfm.WFM/DeleteCallProfileTemplate"
	// WFMCreateRegressionTemplateProcedure is the fully-qualified name of the WFM's
	// CreateRegressionTemplate RPC.
	WFMCreateRegressionTemplateProcedure = "/api.v1alpha1.wfm.WFM/CreateRegressionTemplate"
	// WFMDeleteRegressionTemplateProcedure is the fully-qualified name of the WFM's
	// DeleteRegressionTemplate RPC.
	WFMDeleteRegressionTemplateProcedure = "/api.v1alpha1.wfm.WFM/DeleteRegressionTemplate"
	// WFMListRegressionTemplatesProcedure is the fully-qualified name of the WFM's
	// ListRegressionTemplates RPC.
	WFMListRegressionTemplatesProcedure = "/api.v1alpha1.wfm.WFM/ListRegressionTemplates"
	// WFMListForecastIntervalsForSkillProfileProcedure is the fully-qualified name of the WFM's
	// ListForecastIntervalsForSkillProfile RPC.
	WFMListForecastIntervalsForSkillProfileProcedure = "/api.v1alpha1.wfm.WFM/ListForecastIntervalsForSkillProfile"
	// WFMBuildRegressionForecastByIntervalProcedure is the fully-qualified name of the WFM's
	// BuildRegressionForecastByInterval RPC.
	WFMBuildRegressionForecastByIntervalProcedure = "/api.v1alpha1.wfm.WFM/BuildRegressionForecastByInterval"
	// WFMBuildRegressionForecastByIntervalWithStatsProcedure is the fully-qualified name of the WFM's
	// BuildRegressionForecastByIntervalWithStats RPC.
	WFMBuildRegressionForecastByIntervalWithStatsProcedure = "/api.v1alpha1.wfm.WFM/BuildRegressionForecastByIntervalWithStats"
	// WFMListCallProfileTemplatesProcedure is the fully-qualified name of the WFM's
	// ListCallProfileTemplates RPC.
	WFMListCallProfileTemplatesProcedure = "/api.v1alpha1.wfm.WFM/ListCallProfileTemplates"
	// WFMUpsertRegressionForecastProcedure is the fully-qualified name of the WFM's
	// UpsertRegressionForecast RPC.
	WFMUpsertRegressionForecastProcedure = "/api.v1alpha1.wfm.WFM/UpsertRegressionForecast"
	// WFMUpsertForecastDataDeltaProcedure is the fully-qualified name of the WFM's
	// UpsertForecastDataDelta RPC.
	WFMUpsertForecastDataDeltaProcedure = "/api.v1alpha1.wfm.WFM/UpsertForecastDataDelta"
	// WFMUpsertForecastDataDeltasProcedure is the fully-qualified name of the WFM's
	// UpsertForecastDataDeltas RPC.
	WFMUpsertForecastDataDeltasProcedure = "/api.v1alpha1.wfm.WFM/UpsertForecastDataDeltas"
	// WFMDeleteForecastIntervalsProcedure is the fully-qualified name of the WFM's
	// DeleteForecastIntervals RPC.
	WFMDeleteForecastIntervalsProcedure = "/api.v1alpha1.wfm.WFM/DeleteForecastIntervals"
	// WFMListHistoricalDataForAllSkillProfilesProcedure is the fully-qualified name of the WFM's
	// ListHistoricalDataForAllSkillProfiles RPC.
	WFMListHistoricalDataForAllSkillProfilesProcedure = "/api.v1alpha1.wfm.WFM/ListHistoricalDataForAllSkillProfiles"
	// WFMBuildDOWAndMOYProfilesProcedure is the fully-qualified name of the WFM's
	// BuildDOWAndMOYProfiles RPC.
	WFMBuildDOWAndMOYProfilesProcedure = "/api.v1alpha1.wfm.WFM/BuildDOWAndMOYProfiles"
	// WFMCalculateTrainingDataAveragesForSkillProfileProcedure is the fully-qualified name of the WFM's
	// CalculateTrainingDataAveragesForSkillProfile RPC.
	WFMCalculateTrainingDataAveragesForSkillProfileProcedure = "/api.v1alpha1.wfm.WFM/CalculateTrainingDataAveragesForSkillProfile"
	// WFMUpdateSkillProfileAveragesUsingHistoricalDataProcedure is the fully-qualified name of the
	// WFM's UpdateSkillProfileAveragesUsingHistoricalData RPC.
	WFMUpdateSkillProfileAveragesUsingHistoricalDataProcedure = "/api.v1alpha1.wfm.WFM/UpdateSkillProfileAveragesUsingHistoricalData"
	// WFMUpdateCallCenterNodeProcedure is the fully-qualified name of the WFM's UpdateCallCenterNode
	// RPC.
	WFMUpdateCallCenterNodeProcedure = "/api.v1alpha1.wfm.WFM/UpdateCallCenterNode"
	// WFMCreateClientNodeProcedure is the fully-qualified name of the WFM's CreateClientNode RPC.
	WFMCreateClientNodeProcedure = "/api.v1alpha1.wfm.WFM/CreateClientNode"
	// WFMUpdateClientNodeProcedure is the fully-qualified name of the WFM's UpdateClientNode RPC.
	WFMUpdateClientNodeProcedure = "/api.v1alpha1.wfm.WFM/UpdateClientNode"
	// WFMCreateLocationNodeProcedure is the fully-qualified name of the WFM's CreateLocationNode RPC.
	WFMCreateLocationNodeProcedure = "/api.v1alpha1.wfm.WFM/CreateLocationNode"
	// WFMUpdateLocationNodeProcedure is the fully-qualified name of the WFM's UpdateLocationNode RPC.
	WFMUpdateLocationNodeProcedure = "/api.v1alpha1.wfm.WFM/UpdateLocationNode"
	// WFMCreateProgramNodeProcedure is the fully-qualified name of the WFM's CreateProgramNode RPC.
	WFMCreateProgramNodeProcedure = "/api.v1alpha1.wfm.WFM/CreateProgramNode"
	// WFMUpdateProgramNodeProcedure is the fully-qualified name of the WFM's UpdateProgramNode RPC.
	WFMUpdateProgramNodeProcedure = "/api.v1alpha1.wfm.WFM/UpdateProgramNode"
	// WFMCreateConstraintRuleProcedure is the fully-qualified name of the WFM's CreateConstraintRule
	// RPC.
	WFMCreateConstraintRuleProcedure = "/api.v1alpha1.wfm.WFM/CreateConstraintRule"
	// WFMUpdateConstraintRuleProcedure is the fully-qualified name of the WFM's UpdateConstraintRule
	// RPC.
	WFMUpdateConstraintRuleProcedure = "/api.v1alpha1.wfm.WFM/UpdateConstraintRule"
	// WFMDeleteConstraintRuleProcedure is the fully-qualified name of the WFM's DeleteConstraintRule
	// RPC.
	WFMDeleteConstraintRuleProcedure = "/api.v1alpha1.wfm.WFM/DeleteConstraintRule"
	// WFMCreateNonSkillActivityProcedure is the fully-qualified name of the WFM's
	// CreateNonSkillActivity RPC.
	WFMCreateNonSkillActivityProcedure = "/api.v1alpha1.wfm.WFM/CreateNonSkillActivity"
	// WFMUpdateNonSkillActivityProcedure is the fully-qualified name of the WFM's
	// UpdateNonSkillActivity RPC.
	WFMUpdateNonSkillActivityProcedure = "/api.v1alpha1.wfm.WFM/UpdateNonSkillActivity"
	// WFMListNonSkillActivitiesProcedure is the fully-qualified name of the WFM's
	// ListNonSkillActivities RPC.
	WFMListNonSkillActivitiesProcedure = "/api.v1alpha1.wfm.WFM/ListNonSkillActivities"
	// WFMListNonSkillActivityAssociationsProcedure is the fully-qualified name of the WFM's
	// ListNonSkillActivityAssociations RPC.
	WFMListNonSkillActivityAssociationsProcedure = "/api.v1alpha1.wfm.WFM/ListNonSkillActivityAssociations"
	// WFMListCandidateSchedulingActivitiesProcedure is the fully-qualified name of the WFM's
	// ListCandidateSchedulingActivities RPC.
	WFMListCandidateSchedulingActivitiesProcedure = "/api.v1alpha1.wfm.WFM/ListCandidateSchedulingActivities"
	// WFMCreateAgentGroupProcedure is the fully-qualified name of the WFM's CreateAgentGroup RPC.
	WFMCreateAgentGroupProcedure = "/api.v1alpha1.wfm.WFM/CreateAgentGroup"
	// WFMUpdateAgentGroupProcedure is the fully-qualified name of the WFM's UpdateAgentGroup RPC.
	WFMUpdateAgentGroupProcedure = "/api.v1alpha1.wfm.WFM/UpdateAgentGroup"
	// WFMUpdateWFMAgentProcedure is the fully-qualified name of the WFM's UpdateWFMAgent RPC.
	WFMUpdateWFMAgentProcedure = "/api.v1alpha1.wfm.WFM/UpdateWFMAgent"
	// WFMListAllWFMAgentsProcedure is the fully-qualified name of the WFM's ListAllWFMAgents RPC.
	WFMListAllWFMAgentsProcedure = "/api.v1alpha1.wfm.WFM/ListAllWFMAgents"
	// WFMListCandidateWFMAgentsProcedure is the fully-qualified name of the WFM's
	// ListCandidateWFMAgents RPC.
	WFMListCandidateWFMAgentsProcedure = "/api.v1alpha1.wfm.WFM/ListCandidateWFMAgents"
	// WFMListUngroupedWFMAgentsProcedure is the fully-qualified name of the WFM's
	// ListUngroupedWFMAgents RPC.
	WFMListUngroupedWFMAgentsProcedure = "/api.v1alpha1.wfm.WFM/ListUngroupedWFMAgents"
	// WFMListWFMAgentsAssociatedWithAgentGroupProcedure is the fully-qualified name of the WFM's
	// ListWFMAgentsAssociatedWithAgentGroup RPC.
	WFMListWFMAgentsAssociatedWithAgentGroupProcedure = "/api.v1alpha1.wfm.WFM/ListWFMAgentsAssociatedWithAgentGroup"
	// WFMCreateWFMAgentMembershipsProcedure is the fully-qualified name of the WFM's
	// CreateWFMAgentMemberships RPC.
	WFMCreateWFMAgentMembershipsProcedure = "/api.v1alpha1.wfm.WFM/CreateWFMAgentMemberships"
	// WFMDeleteWFMAgentMembershipsProcedure is the fully-qualified name of the WFM's
	// DeleteWFMAgentMemberships RPC.
	WFMDeleteWFMAgentMembershipsProcedure = "/api.v1alpha1.wfm.WFM/DeleteWFMAgentMemberships"
	// WFMDeleteWFMAgentsMembershipsProcedure is the fully-qualified name of the WFM's
	// DeleteWFMAgentsMemberships RPC.
	WFMDeleteWFMAgentsMembershipsProcedure = "/api.v1alpha1.wfm.WFM/DeleteWFMAgentsMemberships"
	// WFMBuildAgentDiagnosticsProcedure is the fully-qualified name of the WFM's BuildAgentDiagnostics
	// RPC.
	WFMBuildAgentDiagnosticsProcedure = "/api.v1alpha1.wfm.WFM/BuildAgentDiagnostics"
	// WFMCreateShiftTemplateProcedure is the fully-qualified name of the WFM's CreateShiftTemplate RPC.
	WFMCreateShiftTemplateProcedure = "/api.v1alpha1.wfm.WFM/CreateShiftTemplate"
	// WFMUpdateShiftTemplateProcedure is the fully-qualified name of the WFM's UpdateShiftTemplate RPC.
	WFMUpdateShiftTemplateProcedure = "/api.v1alpha1.wfm.WFM/UpdateShiftTemplate"
	// WFMListShiftTemplatesBySidsProcedure is the fully-qualified name of the WFM's
	// ListShiftTemplatesBySids RPC.
	WFMListShiftTemplatesBySidsProcedure = "/api.v1alpha1.wfm.WFM/ListShiftTemplatesBySids"
	// WFMBuildShiftTemplateDiagnosticsProcedure is the fully-qualified name of the WFM's
	// BuildShiftTemplateDiagnostics RPC.
	WFMBuildShiftTemplateDiagnosticsProcedure = "/api.v1alpha1.wfm.WFM/BuildShiftTemplateDiagnostics"
	// WFMCreatePlacementRuleProcedure is the fully-qualified name of the WFM's CreatePlacementRule RPC.
	WFMCreatePlacementRuleProcedure = "/api.v1alpha1.wfm.WFM/CreatePlacementRule"
	// WFMUpdatePlacementRuleProcedure is the fully-qualified name of the WFM's UpdatePlacementRule RPC.
	WFMUpdatePlacementRuleProcedure = "/api.v1alpha1.wfm.WFM/UpdatePlacementRule"
	// WFMDeletePlacementRuleProcedure is the fully-qualified name of the WFM's DeletePlacementRule RPC.
	WFMDeletePlacementRuleProcedure = "/api.v1alpha1.wfm.WFM/DeletePlacementRule"
	// WFMCreateOpenTimesPatternProcedure is the fully-qualified name of the WFM's
	// CreateOpenTimesPattern RPC.
	WFMCreateOpenTimesPatternProcedure = "/api.v1alpha1.wfm.WFM/CreateOpenTimesPattern"
	// WFMUpdateOpenTimesPatternProcedure is the fully-qualified name of the WFM's
	// UpdateOpenTimesPattern RPC.
	WFMUpdateOpenTimesPatternProcedure = "/api.v1alpha1.wfm.WFM/UpdateOpenTimesPattern"
	// WFMDeleteOpenTimesPatternProcedure is the fully-qualified name of the WFM's
	// DeleteOpenTimesPattern RPC.
	WFMDeleteOpenTimesPatternProcedure = "/api.v1alpha1.wfm.WFM/DeleteOpenTimesPattern"
	// WFMGetOpenTimesBitmapsProcedure is the fully-qualified name of the WFM's GetOpenTimesBitmaps RPC.
	WFMGetOpenTimesBitmapsProcedure = "/api.v1alpha1.wfm.WFM/GetOpenTimesBitmaps"
	// WFMCreateAgentAvailabilityPatternProcedure is the fully-qualified name of the WFM's
	// CreateAgentAvailabilityPattern RPC.
	WFMCreateAgentAvailabilityPatternProcedure = "/api.v1alpha1.wfm.WFM/CreateAgentAvailabilityPattern"
	// WFMUpdateAgentAvailabilityPatternProcedure is the fully-qualified name of the WFM's
	// UpdateAgentAvailabilityPattern RPC.
	WFMUpdateAgentAvailabilityPatternProcedure = "/api.v1alpha1.wfm.WFM/UpdateAgentAvailabilityPattern"
	// WFMDeleteAgentAvailabilityPatternProcedure is the fully-qualified name of the WFM's
	// DeleteAgentAvailabilityPattern RPC.
	WFMDeleteAgentAvailabilityPatternProcedure = "/api.v1alpha1.wfm.WFM/DeleteAgentAvailabilityPattern"
	// WFMGetAvailabilityBitmapsProcedure is the fully-qualified name of the WFM's
	// GetAvailabilityBitmaps RPC.
	WFMGetAvailabilityBitmapsProcedure = "/api.v1alpha1.wfm.WFM/GetAvailabilityBitmaps"
	// WFMUpsertNonSkillActivityAssociationProcedure is the fully-qualified name of the WFM's
	// UpsertNonSkillActivityAssociation RPC.
	WFMUpsertNonSkillActivityAssociationProcedure = "/api.v1alpha1.wfm.WFM/UpsertNonSkillActivityAssociation"
	// WFMCreateSkillProficienciesProcedure is the fully-qualified name of the WFM's
	// CreateSkillProficiencies RPC.
	WFMCreateSkillProficienciesProcedure = "/api.v1alpha1.wfm.WFM/CreateSkillProficiencies"
	// WFMUpdateSkillProficienciesProcedure is the fully-qualified name of the WFM's
	// UpdateSkillProficiencies RPC.
	WFMUpdateSkillProficienciesProcedure = "/api.v1alpha1.wfm.WFM/UpdateSkillProficiencies"
	// WFMDeleteSkillProficiencyProcedure is the fully-qualified name of the WFM's
	// DeleteSkillProficiency RPC.
	WFMDeleteSkillProficiencyProcedure = "/api.v1alpha1.wfm.WFM/DeleteSkillProficiency"
	// WFMCopyScenarioProcedure is the fully-qualified name of the WFM's CopyScenario RPC.
	WFMCopyScenarioProcedure = "/api.v1alpha1.wfm.WFM/CopyScenario"
	// WFMCreateScheduleScenarioWithNodesProcedure is the fully-qualified name of the WFM's
	// CreateScheduleScenarioWithNodes RPC.
	WFMCreateScheduleScenarioWithNodesProcedure = "/api.v1alpha1.wfm.WFM/CreateScheduleScenarioWithNodes"
	// WFMUpdateScheduleScenarioProcedure is the fully-qualified name of the WFM's
	// UpdateScheduleScenario RPC.
	WFMUpdateScheduleScenarioProcedure = "/api.v1alpha1.wfm.WFM/UpdateScheduleScenario"
	// WFMListConfigEntitiesProcedure is the fully-qualified name of the WFM's ListConfigEntities RPC.
	WFMListConfigEntitiesProcedure = "/api.v1alpha1.wfm.WFM/ListConfigEntities"
	// WFMDeleteShiftInstancesProcedure is the fully-qualified name of the WFM's DeleteShiftInstances
	// RPC.
	WFMDeleteShiftInstancesProcedure = "/api.v1alpha1.wfm.WFM/DeleteShiftInstances"
	// WFMBuildNodeDiagnosticsProcedure is the fully-qualified name of the WFM's BuildNodeDiagnostics
	// RPC.
	WFMBuildNodeDiagnosticsProcedure = "/api.v1alpha1.wfm.WFM/BuildNodeDiagnostics"
	// WFMBuildGlobalDiagnosticsProcedure is the fully-qualified name of the WFM's
	// BuildGlobalDiagnostics RPC.
	WFMBuildGlobalDiagnosticsProcedure = "/api.v1alpha1.wfm.WFM/BuildGlobalDiagnostics"
	// WFMGetPublishedScheduleProcedure is the fully-qualified name of the WFM's GetPublishedSchedule
	// RPC.
	WFMGetPublishedScheduleProcedure = "/api.v1alpha1.wfm.WFM/GetPublishedSchedule"
	// WFMGetPublishedScheduleRequiredCallsProcedure is the fully-qualified name of the WFM's
	// GetPublishedScheduleRequiredCalls RPC.
	WFMGetPublishedScheduleRequiredCallsProcedure = "/api.v1alpha1.wfm.WFM/GetPublishedScheduleRequiredCalls"
	// WFMGetDraftScheduleRequiredCallsProcedure is the fully-qualified name of the WFM's
	// GetDraftScheduleRequiredCalls RPC.
	WFMGetDraftScheduleRequiredCallsProcedure = "/api.v1alpha1.wfm.WFM/GetDraftScheduleRequiredCalls"
	// WFMCreateDraftScheduleProcedure is the fully-qualified name of the WFM's CreateDraftSchedule RPC.
	WFMCreateDraftScheduleProcedure = "/api.v1alpha1.wfm.WFM/CreateDraftSchedule"
	// WFMUpdateDraftScheduleProcedure is the fully-qualified name of the WFM's UpdateDraftSchedule RPC.
	WFMUpdateDraftScheduleProcedure = "/api.v1alpha1.wfm.WFM/UpdateDraftSchedule"
	// WFMBuildDraftScheduleProcedure is the fully-qualified name of the WFM's BuildDraftSchedule RPC.
	WFMBuildDraftScheduleProcedure = "/api.v1alpha1.wfm.WFM/BuildDraftSchedule"
	// WFMPublishDraftScheduleProcedure is the fully-qualified name of the WFM's PublishDraftSchedule
	// RPC.
	WFMPublishDraftScheduleProcedure = "/api.v1alpha1.wfm.WFM/PublishDraftSchedule"
	// WFMResetDraftScheduleProcedure is the fully-qualified name of the WFM's ResetDraftSchedule RPC.
	WFMResetDraftScheduleProcedure = "/api.v1alpha1.wfm.WFM/ResetDraftSchedule"
	// WFMGetDraftScheduleProcedure is the fully-qualified name of the WFM's GetDraftSchedule RPC.
	WFMGetDraftScheduleProcedure = "/api.v1alpha1.wfm.WFM/GetDraftSchedule"
	// WFMListDraftSchedulesProcedure is the fully-qualified name of the WFM's ListDraftSchedules RPC.
	WFMListDraftSchedulesProcedure = "/api.v1alpha1.wfm.WFM/ListDraftSchedules"
	// WFMClearScheduleProcedure is the fully-qualified name of the WFM's ClearSchedule RPC.
	WFMClearScheduleProcedure = "/api.v1alpha1.wfm.WFM/ClearSchedule"
	// WFMDeleteDraftScheduleProcedure is the fully-qualified name of the WFM's DeleteDraftSchedule RPC.
	WFMDeleteDraftScheduleProcedure = "/api.v1alpha1.wfm.WFM/DeleteDraftSchedule"
	// WFMListShiftInstancesBySidProcedure is the fully-qualified name of the WFM's
	// ListShiftInstancesBySid RPC.
	WFMListShiftInstancesBySidProcedure = "/api.v1alpha1.wfm.WFM/ListShiftInstancesBySid"
	// WFMCopyScheduleToScheduleProcedure is the fully-qualified name of the WFM's
	// CopyScheduleToSchedule RPC.
	WFMCopyScheduleToScheduleProcedure = "/api.v1alpha1.wfm.WFM/CopyScheduleToSchedule"
	// WFMCreateShiftInstanceProcedure is the fully-qualified name of the WFM's CreateShiftInstance RPC.
	WFMCreateShiftInstanceProcedure = "/api.v1alpha1.wfm.WFM/CreateShiftInstance"
	// WFMCreateShiftInstanceV2Procedure is the fully-qualified name of the WFM's CreateShiftInstanceV2
	// RPC.
	WFMCreateShiftInstanceV2Procedure = "/api.v1alpha1.wfm.WFM/CreateShiftInstanceV2"
	// WFMSwapShiftInstancesProcedure is the fully-qualified name of the WFM's SwapShiftInstances RPC.
	WFMSwapShiftInstancesProcedure = "/api.v1alpha1.wfm.WFM/SwapShiftInstances"
	// WFMUpdateShiftInstanceProcedure is the fully-qualified name of the WFM's UpdateShiftInstance RPC.
	WFMUpdateShiftInstanceProcedure = "/api.v1alpha1.wfm.WFM/UpdateShiftInstance"
	// WFMUpdateShiftInstanceV2Procedure is the fully-qualified name of the WFM's UpdateShiftInstanceV2
	// RPC.
	WFMUpdateShiftInstanceV2Procedure = "/api.v1alpha1.wfm.WFM/UpdateShiftInstanceV2"
	// WFMCopyShiftInstancesToScheduleProcedure is the fully-qualified name of the WFM's
	// CopyShiftInstancesToSchedule RPC.
	WFMCopyShiftInstancesToScheduleProcedure = "/api.v1alpha1.wfm.WFM/CopyShiftInstancesToSchedule"
	// WFMListShiftInstanceSidsForAgentProcedure is the fully-qualified name of the WFM's
	// ListShiftInstanceSidsForAgent RPC.
	WFMListShiftInstanceSidsForAgentProcedure = "/api.v1alpha1.wfm.WFM/ListShiftInstanceSidsForAgent"
	// WFMListShiftSegmentsByShiftInstanceSidsProcedure is the fully-qualified name of the WFM's
	// ListShiftSegmentsByShiftInstanceSids RPC.
	WFMListShiftSegmentsByShiftInstanceSidsProcedure = "/api.v1alpha1.wfm.WFM/ListShiftSegmentsByShiftInstanceSids"
	// WFMSetSchedulingTargetProcedure is the fully-qualified name of the WFM's SetSchedulingTarget RPC.
	WFMSetSchedulingTargetProcedure = "/api.v1alpha1.wfm.WFM/SetSchedulingTarget"
	// WFMGetSchedulingTargetProcedure is the fully-qualified name of the WFM's GetSchedulingTarget RPC.
	WFMGetSchedulingTargetProcedure = "/api.v1alpha1.wfm.WFM/GetSchedulingTarget"
	// WFMDeleteSchedulingTargetProcedure is the fully-qualified name of the WFM's
	// DeleteSchedulingTarget RPC.
	WFMDeleteSchedulingTargetProcedure = "/api.v1alpha1.wfm.WFM/DeleteSchedulingTarget"
	// WFMGetPerformanceMetricsProcedure is the fully-qualified name of the WFM's GetPerformanceMetrics
	// RPC.
	WFMGetPerformanceMetricsProcedure = "/api.v1alpha1.wfm.WFM/GetPerformanceMetrics"
	// WFMListRequiredCallsIntervalsProcedure is the fully-qualified name of the WFM's
	// ListRequiredCallsIntervals RPC.
	WFMListRequiredCallsIntervalsProcedure = "/api.v1alpha1.wfm.WFM/ListRequiredCallsIntervals"
)

// WFMClient is a client for the api.v1alpha1.wfm.WFM service.
type WFMClient interface {
	// Retrieves all the skill profiles of the org sending the request.
	// Also it can return the skills of each of the returned profiles.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	ListSkillProfiles(context.Context, *connect_go.Request[wfm.ListSkillProfilesReq]) (*connect_go.Response[wfm.ListSkillProfilesRes], error)
	// Updates the @name, and averages of a skill profile that has the given @skill_profile_sid.
	// It also updates it to no longer be unnamed.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid, @name or averages in the request are invalid.
	//   - grpc.Internal: error occurs when updating the skill profile.
	//   - grpc.NotFound: entry to be updated doesn't exist.
	UpdateSkillProfile(context.Context, *connect_go.Request[wfm.UpdateSkillProfileReq]) (*connect_go.Response[wfm.UpdateSkillProfileRes], error)
	// Updates the @proficiencies for the given skill profile's skills that belong the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @proficiencies in the request are invalid.
	//   - grpc.Internal: error occurs when updating the skill profiles proficiencies.
	UpdateSkillProfileProficiencies(context.Context, *connect_go.Request[wfm.UpdateSkillProfileProficienciesReq]) (*connect_go.Response[wfm.UpdateSkillProfileProficienciesRes], error)
	// Get a skill profile that has the given @skill_profile_sid.
	// It also gets all the skills and the mappings associated with that profile.
	// If the @inactive_as_of_date of the skill profile is nil then the mapping is of inactive profiles to this one,
	// otherwise the mapping is of this profile to an active one.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.Internal: error occurs when getting the skill profile.
	//   - grpc.NotFound: skill profile doesn't exist.
	GetSkillProfile(context.Context, *connect_go.Request[wfm.GetSkillProfileReq]) (*connect_go.Response[wfm.GetSkillProfileRes], error)
	// Resyncs the skill profiles of the org sending the request.
	// It will add skills and skill profiles based on that client's historical call data.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when creating the new skills and skill profiles.
	ResyncSkillProfiles(context.Context, *connect_go.Request[wfm.ResyncSkillProfilesReq]) (*connect_go.Response[wfm.ResyncSkillProfilesRes], error)
	// Gets the last date of a skill profile resync for the org seding the request.
	// If the org has never done a skill profile resync @resync_date will not be set.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the resync date.
	GetLastSkillProfileResyncDate(context.Context, *connect_go.Request[wfm.GetLastSkillProfileResyncDateReq]) (*connect_go.Response[wfm.GetLastSkillProfileResyncDateRes], error)
	// Tries to create an entry for the given forecasting parameters for the org sending the request.
	// If the org already has an entry for them, it will update the already existing entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @forecasting_parameters in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the parameters.
	UpsertForecastingParameters(context.Context, *connect_go.Request[wfm.UpsertForecastingParametersReq]) (*connect_go.Response[wfm.UpsertForecastingParametersRes], error)
	// Gets the forecasting parameters for the org sending the request.
	// If the org hasn't created any parameters, it will return the default parameters.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the parameters.
	GetForecastingParameters(context.Context, *connect_go.Request[wfm.GetForecastingParametersReq]) (*connect_go.Response[wfm.GetForecastingParametersRes], error)
	// Gets the historical data for the org sending the request and the given @skill_profile_sid.
	// It will look through the client's call history and generate the historical data by using their configured forecasting parameters (historical data period and interval width).
	// The duration of each interval will be the interval width of the org's forecasting parameters.
	// It also applies any deltas that the client has stored for the given @SkillProfileSid.
	// If the client has no historical data, only the deltas will be applied to the returned intervals, all other intervals will have nil averages.
	// If any inactive skill profiles are mapped to the given @skill_profile_sid, the call history and deltas of those skill profiles will be included for the historical data calculation.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.NotFound: the @skill_profile_sid given is not found for the org.
	//   - grpc.Internal: error occurs when getting the historical data.
	ListHistoricalData(context.Context, *connect_go.Request[wfm.ListHistoricalDataReq]) (*connect_go.Response[wfm.ListHistoricalDataRes], error)
	// Tries to create an entry for the given @delta for the org sending the request.
	// If the org already has an entry for it, it will update the already exisiting entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @delta in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the historical data interval.
	UpsertHistoricalDataDelta(context.Context, *connect_go.Request[wfm.UpsertHistoricalDataDeltaReq]) (*connect_go.Response[wfm.UpsertHistoricalDataDeltaRes], error)
	// Tries to create entries for the given @deltas.
	// If the given org already has an entry for any of the deltas, it will replace the already existing entries.
	// This is made into a unary due to the UI's lack of support for client streams.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @deltas in the request are invalid.
	//   - grpc.Internal: error occurs when upserting the historical data deltas.
	UpsertHistoricalDataDeltas(context.Context, *connect_go.Request[wfm.UpsertHistoricalDataDeltasReq]) (*connect_go.Response[wfm.UpsertHistoricalDataDeltasRes], error)
	// Gets all the skills that the org sending the request has.
	// Skills returned will be sorted by @skill_sid in ascending order.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the skills.
	ListSkills(context.Context, *connect_go.Request[wfm.ListSkillsReq]) (*connect_go.Response[wfm.ListSkillsRes], error)
	// Builds and returns a call profile template for the org sending the request and the given @skill_profile_sid.
	// The template will be generated using the training data for said skill profile using the @training_data_range and @averages_calculation_range_in_months
	// from the client's saved forecasting parameters.
	// The @total_calls in the returned template be summed from the (@training_data_start_datetime - @averages_calculation_range_in_months) to @training_data_end_datetime,
	// or from @training_data_start_datetime to @training_data_end_datetime if @averages_calculation_range_in_months is 0.
	// The fixed averages fields in the call profile template, will be set to the averages that the skill profile has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.NotFound: the @skill_profile_sid given is not found for the org.
	//   - grpc.Internal: error occurs when building the call profile template.
	BuildCallProfileTemplateForSkillProfile(context.Context, *connect_go.Request[wfm.BuildCallProfileTemplateForSkillProfileReq]) (*connect_go.Response[wfm.BuildCallProfileTemplateForSkillProfileRes], error)
	// Creates a mapping entry for the @inactive_skill_profile_sid to the @active_skill_profile_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @inactive_skill_profile_sid, or @active_skill_profile_sid in the request are invalid.
	//     the @inactive_skill_profile_sid given is of an active skill profile.
	//     the @active_skill_profile_sid given is of an inactive skill profile.
	//   - grpc.Internal: error occurs when creating the inactive skill profile mapping.
	CreateInactiveSkillProfileMapping(context.Context, *connect_go.Request[wfm.CreateInactiveSkillProfileMappingReq]) (*connect_go.Response[wfm.CreateInactiveSkillProfileMappingRes], error)
	// Gets a list of enums that represent all of the forecaster types that are currently available for use
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Internal: error occurs when contacting the forecaster to get the available forecaster types.
	GetAvailableRegressionForecasterModelTypes(context.Context, *connect_go.Request[wfm.GetAvailableRegressionForecasterModelTypesReq]) (*connect_go.Response[wfm.GetAvailableRegressionForecasterModelTypesRes], error)
	// Changes the current mapping for the given @inactive_skill_profile_sid to be disconnected.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @inactive_skill_profile_sid in the request is invalid.
	//   - grpc.NotFound: the skill profile is not found for the org.
	//   - grpc.Internal: the current mapping for the given @inactive_skill_profile_sid is already disconnected,
	//     the given @inactive_skill_profile_sid is of an active skill profile.
	DisconnectInactiveSkillProfileMapping(context.Context, *connect_go.Request[wfm.DisconnectInactiveSkillProfileMappingReq]) (*connect_go.Response[wfm.DisconnectInactiveSkillProfileMappingRes], error)
	// Deletes deltas whose dates match the given @start_datetimes for the given @skill_profile_sid.
	// If no @start_datetimes are given, it will delete all the deltas that the given @skill_profile_sid has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid, or @start_datetimes in the request are invalid.
	//   - grpc.NotFound: no matching deltas are found for deletion.
	//   - grpc.Internal: error occurs during the deletion of the historical data interval.
	DeleteHistoricalDataDeltas(context.Context, *connect_go.Request[wfm.DeleteHistoricalDataDeltasReq]) (*connect_go.Response[wfm.DeleteHistoricalDataDeltasRes], error)
	// Gets the top N skill profiles with the highest calls_count for org sending the request where N is @max_number_of_profiles.
	// It will also return the number of skills found for that profile.
	// Individual skills that each profile has will not be returned.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @max_number_of_profiles in the request is invalid.
	//   - grpc.Internal: error occurs when getting the skill profiles.
	ListTopSkillProfiles(context.Context, *connect_go.Request[wfm.ListTopSkillProfilesReq]) (*connect_go.Response[wfm.ListTopSkillProfilesRes], error)
	// Gets the total number of skill profiles associated with the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the skill profiles count.
	GetSkillProfilesCount(context.Context, *connect_go.Request[wfm.GetSkillProfilesCountReq]) (*connect_go.Response[wfm.GetSkillProfilesCountRes], error)
	// Builds a profile forecast using the provided @call_profile_template.
	// The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
	// (@training_data_range_end_datetime - @forecast_test_range_in_weeks) to @forecast_range_end_datetime.
	// The @total_calls in the @call_profile_template will be scaled using the same ranges as BuildCallProfileTemplateForSkillProfile.
	// The @fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid or @call_profile_template in the request is invalid.
	//   - grpc.Internal: error occurs during the building of the profile forecast.
	BuildProfileForecastByInterval(context.Context, *connect_go.Request[wfm.BuildProfileForecastByIntervalReq]) (*connect_go.ServerStreamForClient[wfm.CallDataByInterval], error)
	// Builds a profile forecast using the provided @call_profile_template.
	// The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
	// (@training_data_range_end_datetime - @forecast_test_range_in_weeks) to @forecast_range_end_datetime.
	// The @total_calls in the @call_profile_template will be scaled using the same ranges as BuildCallProfileTemplateForSkillProfile.
	// The @fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
	// It also returns the statistics of the produced forecast by using the test data of the given @skill_profile_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid or @call_profile_template in the request is invalid.
	//   - grpc.Internal: error occurs during the building of the profile forecast.
	BuildProfileForecastByIntervalWithStats(context.Context, *connect_go.Request[wfm.BuildProfileForecastByIntervalWithStatsReq]) (*connect_go.ServerStreamForClient[wfm.BuildProfileForecastByIntervalWithStatsRes], error)
	// Builds a profile forecast for the given @skill_profile_sid and org sending the request using the given @call_profile_template.
	// The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
	// @forecast_range_start_datetime to @forecast_range_end_datetime.
	// The @total_calls in the @call_profile_template will be scaled using the same ranges as BuildCallProfileTemplateForSkillProfile.
	// The intervals produced will be saved in the database.
	// The @fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid or @call_profile_template in the request are invalid.
	//   - grpc.NotFound: the @skill_profile_sid doesn't exist.
	//   - grpc.Internal: error occurs when upserting the profile forecast.
	UpsertProfileForecast(context.Context, *connect_go.Request[wfm.UpsertProfileForecastReq]) (*connect_go.Response[wfm.UpsertProfileForecastRes], error)
	// Creates the given @call_profile_template for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @call_profile_template in the request is invalid.
	//   - grpc.Internal: error occurs during the creation of the call profile.
	CreateCallProfileTemplate(context.Context, *connect_go.Request[wfm.CreateCallProfileTemplateReq]) (*connect_go.Response[wfm.CreateCallProfileTemplateRes], error)
	// Deletes a call profile template for the requesting org that has the given @call_profile_template_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @call_profile_template_sid in the request is invalid.
	//   - grpc.Internal: error occurs during the deletion of the call profile.
	DeleteCallProfileTemplate(context.Context, *connect_go.Request[wfm.DeleteCallProfileTemplateReq]) (*connect_go.Response[wfm.DeleteCallProfileTemplateRes], error)
	// Creates an entry for the @regression_template for the requesting org.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs when creating the regression template.
	CreateRegressionTemplate(context.Context, *connect_go.Request[wfm.CreateRegressionTemplateReq]) (*connect_go.Response[wfm.CreateRegressionTemplateRes], error)
	// Deletes a regression template for the requesting org that has the given @regression_template_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @regression_template_sid in the request is invalid.
	//   - grpc.Internal: error occurs during the deletion of the regression template.
	DeleteRegressionTemplate(context.Context, *connect_go.Request[wfm.DeleteRegressionTemplateReq]) (*connect_go.Response[wfm.DeleteRegressionTemplateRes], error)
	// Gets all the regression templates that the org sending the request has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the regression templates.
	ListRegressionTemplates(context.Context, *connect_go.Request[wfm.ListRegressionTemplatesReq]) (*connect_go.Response[wfm.ListRegressionTemplatesRes], error)
	// Gets the forecast data intervals for the given @skill_profile_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.Internal: error occurs when getting the forecast data intervals.
	ListForecastIntervalsForSkillProfile(context.Context, *connect_go.Request[wfm.ListForecastIntervalsForSkillProfileReq]) (*connect_go.ServerStreamForClient[wfm.CallDataByInterval], error)
	// Generates a regression forecast using the provided @regression_template.
	// It will generate forecast intervals for the skill profiles sids in @skill_profile_sids_to_forecast.
	// It will use the client's saved forecasting test range as the start datetime and the forecast range as the end datetime of the forecasted data.
	// It will use the client's saved interval width to divide the resulting forecast intervals.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: no @skill_profile_sids_to_forecast are given or the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs during the building of the regression forecast.
	BuildRegressionForecastByInterval(context.Context, *connect_go.Request[wfm.BuildRegressionForecastByIntervalReq]) (*connect_go.ServerStreamForClient[wfm.CallDataByInterval], error)
	// Generates a regression forecast and calculates forecast statistics using the provided @regression_template.
	// It will generate forecast intervals for the skill profiles sids in @skill_profile_sids_to_forecast.
	// It will use the client's saved forecasting test range as the start datetime and the forecast range as the end datetime of the forecasted data.
	// It will use the client's saved interval width to divide the resulting forecast intervals.
	// The first message received will be the forecast statistics while all subsequent ones will be the forecast intervals.
	//
	// Errors:
	//   - grpc.Invalid: no @skill_profile_sids_to_forecast are given or the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs either during the when building the forecast or calculating the stats.
	BuildRegressionForecastByIntervalWithStats(context.Context, *connect_go.Request[wfm.BuildRegressionForecastByIntervalWithStatsReq]) (*connect_go.ServerStreamForClient[wfm.BuildRegressionForecastByIntervalWithStatsRes], error)
	// Gets the call profile templates that the org sending the request has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the templates.
	ListCallProfileTemplates(context.Context, *connect_go.Request[wfm.ListCallProfileTemplatesReq]) (*connect_go.Response[wfm.ListCallProfileTemplatesRes], error)
	// Builds a regression forecast for the org using the given @regression_template and saves the resulting intervals in the db.
	// It will generate forecast intervals for the skill profiles sids in @save_forecasts_for_skill_profile_sids,
	// if the list is empty or has no valid skill profile sids, it will generate and save forecasts for all active skill profiles.
	// If any intervals produced already exist in the db, they will be replaced with the ones produced.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the regression forecast.
	UpsertRegressionForecast(context.Context, *connect_go.Request[wfm.UpsertRegressionForecastReq]) (*connect_go.Response[wfm.UpsertRegressionForecastRes], error)
	// Tries to create an entry for the given @delta for the org sending the request.
	// If the org already has an entry for it, it will update the already exisiting entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @delta in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the forecast data delta.
	UpsertForecastDataDelta(context.Context, *connect_go.Request[wfm.UpsertForecastDataDeltaReq]) (*connect_go.Response[wfm.UpsertForecastDataDeltaRes], error)
	// Tries to create entries for the given @deltas.
	// If the org already has entries for any of them, it will update the already existing entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @deltas in the request are invalid.
	//   - grpc.Internal: error occurs when upserting the forecast data deltas.
	UpsertForecastDataDeltas(context.Context, *connect_go.Request[wfm.UpsertForecastDataDeltasReq]) (*connect_go.Response[wfm.UpsertForecastDataDeltasRes], error)
	// Deletes forecast data intervals/deltas based on the parameters provided.
	// If @delete_param is type skill_profile_sid, then the intervals/deltas to be deleted will be
	// associated with that id. If @delete_param is type interval_sids, then the intervals/deltas to be
	// deleted will be contained in the list @interval_sids. The @delete_type field determines which
	// table(s) in the database the intervals/deltas will be deleted from.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one of the @delete_params is invalid
	//   - grpc.NotFound: no matching intervals/deltas are found for deletion.
	//   - grpc.Internal: error occurs during the deletion of the forecast data intervals/deltas.
	DeleteForecastIntervals(context.Context, *connect_go.Request[wfm.DeleteForecastIntervalsReq]) (*connect_go.Response[wfm.DeleteForecastIntervalsRes], error)
	// Retrieves the history for all the skill profiles of the requesting org.
	// Each value in every interval that has the same @start_datetime of each skill profile will be summed then averaged and made into a single one.
	// When calculating the averages, each interval's values will be weighted by the number of @total_calls it has.
	// History will be sorted by @start_datetime in ascending order, and the range is determined by the client's historical range.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when retriving the history.
	ListHistoricalDataForAllSkillProfiles(context.Context, *connect_go.Request[wfm.ListHistoricalDataForAllSkillProfilesReq]) (*connect_go.Response[wfm.ListHistoricalDataForAllSkillProfilesRes], error)
	// Converts the given @profile_tod and @profile_woms to a ProfileDOW and ProfileMOY.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @profile_tod or @profile_woms in the request are invalid.
	//   - grpc.Internal: error occurs when building the ProfileDOW or ProfileMOY.
	BuildDOWAndMOYProfiles(context.Context, *connect_go.Request[wfm.BuildDOWAndMOYProfilesReq]) (*connect_go.Response[wfm.BuildDOWAndMOYProfilesRes], error)
	// Calculates and returns the averages in the training data for the given @skill_profile_sid.
	// Averages to be returned will be weighted by the number of calls that each training data interval has.
	// The start time that the training data will be averaged can be modified based on the forecasting parameter @averages_calculation_range_in_months,
	// which will subtract that many months from the training data range end datetime and set it as the start time.
	// If @averages_calculation_range_in_months is 0, it will use the training data range start datetime.
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.NotFound: the @skill_profile_sid given is not found.
	//   - grpc.Internal: error occurs when calculating the averages from the training data.
	CalculateTrainingDataAveragesForSkillProfile(context.Context, *connect_go.Request[wfm.CalculateTrainingDataAveragesForSkillProfileReq]) (*connect_go.Response[wfm.CalculateTrainingDataAveragesForSkillProfileRes], error)
	// Calculates the averages for call characteristics using the historical data of the given @skill_profile_sids and org sending the request.
	// If no @skill_profile_sids are given, it will calculate the averages for all skill profiles for the org sending the request.
	// Averages will be weighted by the number of calls that each historical data interval has.
	// Once the averages are calculated, they will be updated in the db for those skill profiles.
	//
	// If a nil @datetime_range is given then the range used will be @training_data_range_end_datetime - @averages_calculation_range_in_months to the @training_data_range_end_datetime from the forecasting parameters.
	// If @averages_calculation_range_in_months is 0, it will use the @training_data_range_start_datetime as the start datetime of the range.
	//
	// If @exclude_skill_profiles_with_manual_averages is true, it will exclude skill profiles that have manual averages from the calculation
	// even if those skill profiles are in @skill_profile_sids.
	//
	// Errors:
	//   - grpc.Internal: error occurs when calculating the averages from the historical data.
	UpdateSkillProfileAveragesUsingHistoricalData(context.Context, *connect_go.Request[wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq]) (*connect_go.Response[wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes], error)
	// Updates the call center @node that has the given @call_center_node_sid.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this call center node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the one or more of the fields in the request are invalid.
	//   - grpc.Internal: error occurs when updating the call center node.
	//   - grpc.NotFound: entry to be updated doesn't exist.
	UpdateCallCenterNode(context.Context, *connect_go.Request[wfm.UpdateCallCenterNodeReq]) (*connect_go.Response[wfm.UpdateCallCenterNodeRes], error)
	// Creates the given client @node for the org sending the request and @parent_sid in the node.
	// The @client_node_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent call center node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// The @origin_sid must be set to nil, since this method can only make an original node.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @name, @parent_sid, or @time_zone_val is invalid.
	//   - grpc.NotFound: parent call center node doesn't exist, or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the client node.
	CreateClientNode(context.Context, *connect_go.Request[wfm.CreateClientNodeReq]) (*connect_go.Response[wfm.CreateClientNodeRes], error)
	// Updates a client node for the org sending the request that has the given @client_node_sid and @schedule_scenario_sid.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this client node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @node have invalid values.
	//   - grpc.Internal: error occurs when updating the client @node.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the given @parent_sid (call_center_node_sid) belongs to a different scenario than this @node.
	UpdateClientNode(context.Context, *connect_go.Request[wfm.UpdateClientNodeReq]) (*connect_go.Response[wfm.UpdateClientNodeRes], error)
	// Creates the given location @node for the org sending the request and parent @client_node_sid.
	// The @location_node_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent client node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// The @origin_sid must be set to nil, since this method can only make an original node.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @node have invalid values.
	//   - grpc.NotFound: parent client node doesn't exist or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the location node.
	CreateLocationNode(context.Context, *connect_go.Request[wfm.CreateLocationNodeReq]) (*connect_go.Response[wfm.CreateLocationNodeRes], error)
	// Updates a location node corresponding to the given @location_node_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this location node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @location_node have invalid values.
	//   - grpc.Internal: error occurs when updating the location node.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the given parent @client_node_sid belongs to a different scenario than the node to update.
	UpdateLocationNode(context.Context, *connect_go.Request[wfm.UpdateLocationNodeReq]) (*connect_go.Response[wfm.UpdateLocationNodeRes], error)
	// Creates the given program @node for the org sending the request and parent @location_node_sid.
	// The @program_node_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent location node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// The @origin_sid must be set to nil, since this method can only make an original node.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @node have invalid values.
	//   - grpc.NotFound: parent location node doesn't exist or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the program node.
	CreateProgramNode(context.Context, *connect_go.Request[wfm.CreateProgramNodeReq]) (*connect_go.Response[wfm.CreateProgramNodeRes], error)
	// Updates a program node for the given @program_node_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this program node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @program_node have invalid values.
	//   - grpc.Internal: error occurs when updating the program node.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the given parent @location_node_sid belongs to a different scenario than the program node to update.
	UpdateProgramNode(context.Context, *connect_go.Request[wfm.UpdateProgramNodeReq]) (*connect_go.Response[wfm.UpdateProgramNodeRes], error)
	// Creates the given @constraint_rule for the org sending the request.
	// The @constraint_rule_sid and @skill_proficiency_sid (if one was created) of the new entities will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// If @rule_type is set to MIN_SKILL_LEVEL, the @member_target_entity field must be set with a skill proficiency and the @constraint_rule.target_sid will be ignored.
	// If the @member_target_entity is for a skill proficiency, that skill proficiency will be created with the given @constraint_rule as parent.
	// If @rule_type is NOT MIN_SKILL_LEVEL then the @target_sid must be that of a scheduling activity.
	// The all other @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @constraint_rule have invalid values.
	//   - grpc.NotFound: the given @target_sid for the given @rule_type, or @parent_entity don't exist.
	//   - grpc.Internal: error occurs when creating the constraint rule.
	CreateConstraintRule(context.Context, *connect_go.Request[wfm.CreateConstraintRuleReq]) (*connect_go.Response[wfm.CreateConstraintRuleRes], error)
	// Updates the constraint rule corresponding for given @contraint_rule_sid for the org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this constraint rule since it cannot be changed.
	// If @rule_type is set to MIN_SKILL_LEVEL, the @member_target_entity field must be set with a skill proficiency, otherwise it should not be set and field will be ignored.
	// If the @target_sid is for a different skill proficiency than the current one the constraint rule has as a target,
	// the old one will be deleted and a new one will be created for the given @member_target_entity.
	// If @rule_type is NOT MIN_SKILL_LEVEL then the @target_sid must be that of a scheduling activity.
	// The all other @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @constraint_rule have invalid values.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the @parent_entity has a different @schedule_scenario_sid than the constraint rule.
	//     : the given @target_sid for the given @rule_type, or @parent_entity don't exist.
	//   - grpc.Internal: error occurs when updating the constraint rule.
	UpdateConstraintRule(context.Context, *connect_go.Request[wfm.UpdateConstraintRuleReq]) (*connect_go.Response[wfm.UpdateConstraintRuleRes], error)
	// Deletes a constraint rule with the coresponding @constraint_rule_sid for the org sending the request.
	// It also deletes the entity referenced by the @target_sid and @rule_type if said entity is not a member of any other entity or the on call scheduling activity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @constraint_rule_sid is invalid for the org making the request.
	//   - grpc.NotFound: the given @constraint_rule doesn't exist.
	//   - grpc.Internal: error occurs when removing the constraint rule.
	DeleteConstraintRule(context.Context, *connect_go.Request[wfm.DeleteConstraintRuleReq]) (*connect_go.Response[wfm.DeleteConstraintRuleRes], error)
	// Creates the given @non_skill_activity for the org sending the request.
	// Will also create a scheduling activity wrapper for the non skill activity.
	// The @non_skill_activity_sid and @scheduling_activity_sid of the new entities will be returned in the response.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @non_skill_activity have invalid values.
	//   - grpc.NotFound: the @schedule_scenario_sid doesn't exist.
	//   - grpc.Internal: error occurs when creating the non skill activity or scheduling activity.
	CreateNonSkillActivity(context.Context, *connect_go.Request[wfm.CreateNonSkillActivityReq]) (*connect_go.Response[wfm.CreateNonSkillActivityRes], error)
	// Updates a non skill activity that has the given @non_skill_activity_sid with the given values.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: @non_skill_activity fields have invalid values.
	//   - grpc.NotFound: non skill activity for the given @non_skill_activity_sid doesn't exist.
	//   - grpc.Internal: error occurs when updating the non skill activity.
	UpdateNonSkillActivity(context.Context, *connect_go.Request[wfm.UpdateNonSkillActivityReq]) (*connect_go.Response[wfm.UpdateNonSkillActivityRes], error)
	// Lists the non skill activities that belong to the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:.
	//   - grpc.Internal: error occurs when listing the activites.
	ListNonSkillActivities(context.Context, *connect_go.Request[wfm.ListNonSkillActivitiesReq]) (*connect_go.Response[wfm.ListNonSkillActivitiesRes], error)
	// Lists the IDs of non skill activities that belong to the org sending the request which have the given @relationship_type with the @associated_entity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @associated_entity or @relationship_type are invalid.
	//   - grpc.Internal: error occurs when listing the associations.
	ListNonSkillActivityAssociations(context.Context, *connect_go.Request[wfm.ListNonSkillActivityAssociationsReq]) (*connect_go.Response[wfm.ListNonSkillActivityAssociationsRes], error)
	// Lists the candidate scheduling activities for a constraint or placement rule, inherited through given @parent_of_rule for @schedule_scenario_sid for the org making the request.
	// @parent_of_rule may be any type of node, agent group, or shift template which the rule will belong to.
	// If the rule will belong to a wfm agent, the agent group must be supplied instead to get a relevant set of candidate scheduling activities.
	// Member non skill activity of each scheduling activity will be included in the response.
	// The on call scheduling activity will always be included.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @parent_of_rule is invalid.
	//   - grpc.NotFound: @parent_of_rule doesn't exist
	//   - grpc.Internal: error occurs when applying inheritance or getting the nodes from @parent_of_rule.
	ListCandidateSchedulingActivities(context.Context, *connect_go.Request[wfm.ListCandidateSchedulingActivitiesReq]) (*connect_go.Response[wfm.ListCandidateSchedulingActivitiesRes], error)
	// Creates an agent group with the provided parameters.
	// A successful response should contain the @agent_group_sid of the newly created entity.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @name, or @parent_entity are invalid.
	//   - grpc.NotFound: @parent_entity doesn't exist
	//   - grpc.Internal: error occurs when creating the agent group.
	CreateAgentGroup(context.Context, *connect_go.Request[wfm.CreateAgentGroupReq]) (*connect_go.Response[wfm.CreateAgentGroupRes], error)
	// Updates the agent group corresponding to the @agent_group_sid, @name, and @parent_entity.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this agent group since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @agent_group_sid, @parent_entity, or @name in the request are invalid.
	//   - grpc.Internal: error occurs when updating the agent group.
	//   - grpc.AlreadyExists: an agent group with the given @name already exists.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the @parent_entity has a different @schedule_scenario_sid than the agent group.
	UpdateAgentGroup(context.Context, *connect_go.Request[wfm.UpdateAgentGroupReq]) (*connect_go.Response[wfm.UpdateAgentGroupRes], error)
	// Updates a wfm agent for the given @wfm_agent_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// The @tcn_agent_sid cannot be updated.
	// Required permission:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @wfm_agent have invalid values.
	//   - grpc.NotFound: WFM agent with the given @wfm_agent_sid doesn't exist.
	//   - grpc.Internal: error occurs when updating the wfm agent.
	UpdateWFMAgent(context.Context, *connect_go.Request[wfm.UpdateWFMAgentReq]) (*connect_go.Response[wfm.UpdateWFMAgentRes], error)
	// Lists all wfm agents for the org sending the request.
	// if @include_inactive is true then inactive agents will also be included, otherwise only active agents will be returned.
	// if @include_skill_proficiencies is true then agents returned will include their skill proficiencies.
	// if @include_agent_groups is true then the @agent_groups_by_agent response field will be set with a list of agent groups correlating to each agents index in the @wfm_agents field.
	// WFM agents with no associated agent_groups will have an empty slice in agent_groups_by_agent at their correlated index.
	// Required Permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the wfm agents.
	ListAllWFMAgents(context.Context, *connect_go.Request[wfm.ListAllWFMAgentsReq]) (*connect_go.Response[wfm.ListAllWFMAgentsRes], error)
	// Lists all candidate wfm agents for the org sending the request and given @agent_group_sid.
	// A WFM agent is considered a candidate when it's active and it doesn't already belong to the given agent group.
	// Member entities will not be returned.
	// Required Permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: @agent_group_sid has an invalid value.
	//   - grpc.Internal: error occurs when getting the wfm agents.
	ListCandidateWFMAgents(context.Context, *connect_go.Request[wfm.ListCandidateWFMAgentsReq]) (*connect_go.Response[wfm.ListCandidateWFMAgentsRes], error)
	// Lists all wfm agents who are not grouped with any agent group for the given org sending the request that were created at or after the given @created_after_datetime.
	// If @schedule_scenario_sid is positive, it will filter further to get only agents who are not grouped with any agent group for that scenario.
	// if @include_skill_proficiencies is true then agents returned will include their skill proficiencies.
	// Member entities will not be returned.
	// Required Permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: @created_after_datetime has an invalid value.
	//   - grpc.Internal: error occurs when getting the wfm agents.
	ListUngroupedWFMAgents(context.Context, *connect_go.Request[wfm.ListUngroupedWFMAgentsReq]) (*connect_go.Response[wfm.ListUngroupedWFMAgentsRes], error)
	// Lists the IDs of wfm agents that belong to the org sending the request which are associated with the given @agent_group_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @agent_group_sid is invalid.
	//   - grpc.Internal: error occurs when listing the wfm agents.
	ListWFMAgentsAssociatedWithAgentGroup(context.Context, *connect_go.Request[wfm.ListWFMAgentsAssociatedWithAgentGroupReq]) (*connect_go.Response[wfm.ListWFMAgentsAssociatedWithAgentGroupRes], error)
	// Creates a membership association for each of the given @wfm_agent_sids with the given @agent_group_sid.
	// The @schedule_scenario_sid must match the scenario of the agent group and wfm agents.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @wfm_agent_sids, or @agent_group_sid are invalid.
	//   - grpc.NotFound: the @wfm_agent_sids or @agent_group_sid don't exist for the org or given @schedule_scenario_sid.
	//   - grpc.Internal: error occurs when creating the association.
	CreateWFMAgentMemberships(context.Context, *connect_go.Request[wfm.CreateWFMAgentMembershipsReq]) (*connect_go.Response[wfm.CreateWFMAgentMembershipsRes], error)
	// Deletes a membership association for each of the given @wfm_agent_sids with the given @agent_group_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @wfm_agent_sids, or @agent_group_sid are invalid.
	//   - grpc.NotFound: any of the given memberships to delete do not exist.
	//   - grpc.Internal: error occurs when deleting the association.
	DeleteWFMAgentMemberships(context.Context, *connect_go.Request[wfm.DeleteWFMAgentMembershipsReq]) (*connect_go.Response[wfm.DeleteWFMAgentMembershipsRes], error)
	// Deletes all membership associations for the given @wfm_agent_sids with the given @agent_group_sids.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @wfm_agent_sids, or @agent_group_sids are invalid.
	//   - grpc.Internal: error occurs when deleting the associations.
	DeleteWFMAgentsMemberships(context.Context, *connect_go.Request[wfm.DeleteWFMAgentsMembershipsReq]) (*connect_go.Response[wfm.DeleteWFMAgentsMembershipsRes], error)
	// Builds and returns the diagnostics for the wfm agent associated with the given @wfm_agent_sid or @agent_group_sid for the org sending the request.
	// Response will only contain:
	//
	//	one element if build for a single @wfm_agent_sid.
	//	one element for each WFM agent if build for an @agent_group_sid.
	//
	// Required permissions:
	//
	//	NONE
	//	- grpc.Invalid: the @wfm_agent_sid, or @agent_group_sid is invalid.
	//	- grpc.NotFound: the given @wfm_agent_sid doesn't exist or the @agent_group_sid has no agents.
	//	- grpc.Internal: error occurs building the diagnostics.
	BuildAgentDiagnostics(context.Context, *connect_go.Request[wfm.BuildAgentDiagnosticsReq]) (*connect_go.Response[wfm.BuildAgentDiagnosticsRes], error)
	// Creates a shift template for the org sending the request with the provided parameters
	// The @shift_template_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent program node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @name, or @program_node_sid are invalid.
	//   - grpc.AlreadyExists: a shift template with the given @name already exists.
	//   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the shift template.
	CreateShiftTemplate(context.Context, *connect_go.Request[wfm.CreateShiftTemplateReq]) (*connect_go.Response[wfm.CreateShiftTemplateRes], error)
	// Updates a shift template for the given @shift_template_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this shift template since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @shift_template_sid, @name, @program_node_sid are invalid.
	//   - grpc.AlreadyExists: a shift template with the given @name already exists.
	//   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the shift template to update.
	//   - grpc.Internal: error occurs when updating the shift template.
	UpdateShiftTemplate(context.Context, *connect_go.Request[wfm.UpdateShiftTemplateReq]) (*connect_go.Response[wfm.UpdateShiftTemplateRes], error)
	// Lists the shift templates matching the specified @shift_template_sids for the org sending the request.
	// If @include_placement_rules is set to true, the @shift_templates will be returned with their member placement rules.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @shift_template_sids are invalid.
	//   - grpc.Internal: error occurs when getting the data.
	ListShiftTemplatesBySids(context.Context, *connect_go.Request[wfm.ListShiftTemplatesBySidsReq]) (*connect_go.Response[wfm.ListShiftTemplatesBySidsRes], error)
	// Builds and returns the diagnostics for the shift template associated with the given @shift_template_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//	- grpc.Invalid: the @shift_template_sid is invalid.
	//	- grpc.NotFound: the given @shift_template_sid doesn't exist for the org sending the request.
	//	- grpc.Internal: error occours building the diagnostics for the shift template.
	BuildShiftTemplateDiagnostics(context.Context, *connect_go.Request[wfm.BuildShiftTemplateDiagnosticsReq]) (*connect_go.Response[wfm.BuildShiftTemplateDiagnosticsRes], error)
	// Creates a placement rule for org sending the request with the provided parameters.
	// The @placement_rule_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent shift template.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in the @placement_rule are invalid.
	//   - grpc.NotFound: the parent shift template doesn't exist or belongs to a different scenario than the one given.
	//     the scheduling activity to associate with the placement rule doesn't exist or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the placement rule.
	CreatePlacementRule(context.Context, *connect_go.Request[wfm.CreatePlacementRuleReq]) (*connect_go.Response[wfm.CreatePlacementRuleRes], error)
	// Updates a placement rule corresponding with the given @placement_rule_sid for the org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this placement rule since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the one or more of the fields in the @placement_rule are invalid.
	//   - grpc.Internal: error occurs when updating the placement rule.
	//   - grpc.NotFound: entry to be updated doesn't exist.
	//     : the parent shift template or related scheduling activity don't exist or belong to a different scenario than the placement rule to update.
	UpdatePlacementRule(context.Context, *connect_go.Request[wfm.UpdatePlacementRuleReq]) (*connect_go.Response[wfm.UpdatePlacementRuleRes], error)
	// Deletes a placement rule with the coresponding @placement_rule_sid for the org sending the request.
	// It also deletes the scheduling activity referenced by the @scheduling_activity_sid if said activity is not a member of any other entity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @placement_rule_sid is invalid for the org making the request.
	//   - grpc.NotFound: the given @placement_rule doesn't exist.
	//   - grpc.Internal: error occurs when removing the placement rule.
	DeletePlacementRule(context.Context, *connect_go.Request[wfm.DeletePlacementRuleReq]) (*connect_go.Response[wfm.DeletePlacementRuleRes], error)
	// Creates an open times pattern for the org sending the request with the provided parameters.
	// The @open_times_pattern_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in the @open_times_pattern are invalid.
	//   - grpc.NotFound: the parent entity doesn't exist.
	//   - grpc.Internal: error occurs when creating the open times pattern.
	CreateOpenTimesPattern(context.Context, *connect_go.Request[wfm.CreateOpenTimesPatternReq]) (*connect_go.Response[wfm.CreateOpenTimesPatternRes], error)
	// Updates an open times pattern for the given @open_times_pattern_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this open times pattern since it cannot be changed.
	// Required permission:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @open_times_pattern have invalid values.
	//   - grpc.NotFound: the given @open_times_pattern or it's @parent_entity doesn't exist.
	//   - grpc.Internal: error occurs when updating the open times pattern.
	UpdateOpenTimesPattern(context.Context, *connect_go.Request[wfm.UpdateOpenTimesPatternReq]) (*connect_go.Response[wfm.UpdateOpenTimesPatternRes], error)
	// Deletes an open times pattern with the coresponding @open_times_pattern_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @open_times_pattern_sid is invalid for the org making the request.
	//   - grpc.NotFound: the given @open_times_pattern doesn't exist.
	//   - grpc.Internal: error occurs when removing the open times pattern.
	DeleteOpenTimesPattern(context.Context, *connect_go.Request[wfm.DeleteOpenTimesPatternReq]) (*connect_go.Response[wfm.DeleteOpenTimesPatternRes], error)
	// Gets the inherited, own, and resulting bitmaps for the open times patterns of @node_to_check for @schedule_scenario_sid and the org sending the request.
	// The @schedule_scenario_sid must match the scenario of the @node_to_check.
	// If @bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
	// If @bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the open times patterns.
	// If @bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the open times patterns.
	// The bitmaps will be generated for the span of @datetime_range.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_to_check is invalid for @schedule_scenario_sid and the org making the request.
	//     : the @datetime_range is invalid.
	//   - grpc.NotFound: the given @node_to_check doesn't exist.
	//   - grpc.Internal: error occurs when getting the open times pattern bitmaps.
	GetOpenTimesBitmaps(context.Context, *connect_go.Request[wfm.GetOpenTimesBitmapsReq]) (*connect_go.Response[wfm.GetOpenTimesBitmapsRes], error)
	// Creates an agent availability pattern for the org sending the request with the provided parameters.
	// The @agent_availability_pattern_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: the parameters in the @agent_availability_pattern are invalid.
	//   - grpc.NotFound: the parent entity doesn't exist.
	//   - grpc.Internal: error occurs when creating the agent availability pattern.
	CreateAgentAvailabilityPattern(context.Context, *connect_go.Request[wfm.CreateAgentAvailabilityPatternReq]) (*connect_go.Response[wfm.CreateAgentAvailabilityPatternRes], error)
	// Updates an agent availability pattern for the given @agent_availability_pattern_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this agent availability pattern since it cannot be changed.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @agent_availability_pattern have invalid values.
	//   - grpc.Internal: error occurs when updating the agent avilability pattern.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the @parent_entity has a different @schedule_scenario_sid than the agent availability pattern.
	UpdateAgentAvailabilityPattern(context.Context, *connect_go.Request[wfm.UpdateAgentAvailabilityPatternReq]) (*connect_go.Response[wfm.UpdateAgentAvailabilityPatternRes], error)
	// Deletes an agent availability pattern with the coresponding @agent_availability_pattern_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @agent_availability_pattern_sid has an invalid value.
	//   - grpc.NotFound: the @agent_availability_pattern with the given sid doesn't exist.
	//   - grpc.Internal: error occurs when removing the agent availability pattern.
	DeleteAgentAvailabilityPattern(context.Context, *connect_go.Request[wfm.DeleteAgentAvailabilityPatternReq]) (*connect_go.Response[wfm.DeleteAgentAvailabilityPatternRes], error)
	// Gets the inherited, own, and resulting bitmaps for the agent availability patterns of @entities_to_check for @schedule_scenario_sid and the org sending the request.
	// The @schedule_scenario_sid must match the scenario of the @entities_to_check.
	// @entities_to_check must have the entity_type field set with a wfm agent, agent group or a type of node.
	// If an availability bitmap is requested for an agent group, the bitmaps for all of it's member agents will be returned instead.
	// The bitmaps will be generated for the span of @datetime_range.
	// If @bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
	// If @bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the availability patterns.
	// If @bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the availability patterns.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @entities_to_check is invalid for @schedule_scenario_sid and the org making the request.
	//     : the @datetime_range is invalid.
	//   - grpc.NotFound: the given @entities_to_check don't exist.
	//   - grpc.Internal: error occurs when getting the agent availability pattern bitmaps.
	GetAvailabilityBitmaps(context.Context, *connect_go.Request[wfm.GetAvailabilityBitmapsReq]) (*connect_go.Response[wfm.GetAvailabilityBitmapsRes], error)
	// Upserts an association for the given @non_skill_activity_sid to the given @node.
	// All downstream members of the entity will have their inheritance state cleared, and inherit the given association.
	// If an association already exists between the non skill activity and the @node then their @relationship_type will be updated.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// If a NOT_ASSOCIATED_WITH relationship is being created, the tree will be checked for conflicting downstream effects.
	// If any member rules, are referencing the non skill activity and @relationship_type is NOT_ASSOCIATED_WITH, then the upsert will not take effect, and the list of related entities to be updated/removed first will be returned.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @non_skill_activity_sid, @node or @association_type are invalid.
	//     : the non skill activity and @node belong to different scenarios.
	//   - grpc.NotFound: the @non_skill_activity_sid or @node don't exist.
	//   - grpc.Internal: error occurs when upserting the association.
	UpsertNonSkillActivityAssociation(context.Context, *connect_go.Request[wfm.UpsertNonSkillActivityAssociationReq]) (*connect_go.Response[wfm.UpsertNonSkillActivityAssociationRes], error)
	// Creates skill proficiencies for the org sending the request with the provided parameters.
	// The @schedule_scenario_sid must match the scenario of the @parent_entities.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in a @proficiency, or the @schedule_scenario_sid are invalid.
	//   - grpc.NotFound: for any of the given @skill_proficiencies:
	//     the @parent_entity doesn't exist.
	//     the @skill_sid doesn't exist.
	//     the skill profile with @preferred_skill_profile_sid doesn't contain the given @skill_sid.
	//   - grpc.AlreadyExists: a skill proficiency with the given @skill_sid and @parent_entity already exists.
	//   - grpc.Internal: error occurs when creating the skill proficiencies.
	CreateSkillProficiencies(context.Context, *connect_go.Request[wfm.CreateSkillProficienciesReq]) (*connect_go.Response[wfm.CreateSkillProficienciesRes], error)
	// Updates skill proficiencies corresponding to the given @skill_proficiency_sids and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @skill_sid and @parent_entity field of each proficiency will be ignored since it cannot be updated.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @skill_proficiencies have invalid values.
	//   - grpc.Internal: error occurs when updating the skill proficiencies.
	//   - grpc.NotFound: for any of the given @skill_proficiencies:
	//     the @skill_sid doesn't exist.
	//     the skill profile with @preferred_skill_profile_sid doesn't contain the skill of the given skill proficiency.
	//   - grpc.AlreadyExists: a skill proficiency with the given @skill_sid and @parent_entity already exists.
	UpdateSkillProficiencies(context.Context, *connect_go.Request[wfm.UpdateSkillProficienciesReq]) (*connect_go.Response[wfm.UpdateSkillProficienciesRes], error)
	// Deletes a skill proficiency with the corresponding @skill_proficiency_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: the @skill_proficiency_sid is invalid for the org making the request.
	//	-grpc.NotFound: the skill proficiency with the given @skill_proficiency_sid doesn't exist.
	//	-grpc.Internal: error occurs when removing the skill proficiency.
	DeleteSkillProficiency(context.Context, *connect_go.Request[wfm.DeleteSkillProficiencyReq]) (*connect_go.Response[wfm.DeleteSkillProficiencyRes], error)
	// Copies the existing scenario with the @scenario_sid_to_copy for the org sending the request using the provided parameters.
	// Scheduling targets of entities in the scenario to copy will also be copied.
	// The new @schedule_scenario_sid of the new entity will be returned in the response.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:gg
	//   - grpc.Invalid: the parameters @scenario_sid_to_copy or any others are invalid.
	//   - grpc.NotFound: the scenario corresponding to the @scenario_sid_to_copy doesn't exist.
	//   - grpc.Internal: error occurs when creating/coping the new scenario.
	CopyScenario(context.Context, *connect_go.Request[wfm.CopyScenarioReq]) (*connect_go.Response[wfm.CopyScenarioRes], error)
	// Creates a new schedule scenario for the org sending the request with the provided parameters.
	// The new @schedule_scenario_sid of the new entity will be returned in the response.
	// It also creates 1 of each of the following: call center, client, program, location node, and on call scheduling activity (if it doesn't exist already for the org).
	// The @node_description fields may optionally be left blank.
	// The @copied_from_scenario_sid field will be ignored, as it will be set to nil in the newly created scenario.
	// The @creation_datetime and @is_default fields will also be ignored and set as the current time and false respectively.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: parameters in the @req are invalid for the org making the request.
	//   - grpc.Internal: error occurs when creating the new scenario, or any of the node entities.
	CreateScheduleScenarioWithNodes(context.Context, *connect_go.Request[wfm.CreateScheduleScenarioWithNodesReq]) (*connect_go.Response[wfm.CreateScheduleScenarioWithNodesRes], error)
	// Updates a schedule scenario corresponding to the given @schedule_scenario_sid and org sending the request with the provided parameters.
	// Only the @name, @description and @datetime_set_to_inactive fields may be updated, and must be filled in with current value if updating the field is not desired.
	// The @schedule_scenario_sid must be the original for the schedule scenario since it cannot be updated.
	// All other fields will be ignored since they cannot be updated.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: one or more fields in the @scenario have invalid values.
	//	-grpc.NotFound: the scenario with the given @schedule_scenario_sid doesn't exist.
	//	-grpc.Internal: error occurs when updating the scenario.
	UpdateScheduleScenario(context.Context, *connect_go.Request[wfm.UpdateScheduleScenarioReq]) (*connect_go.Response[wfm.UpdateScheduleScenarioRes], error)
	// Gets config entities that match the org sending the request and given @entity_type and that belong to the @belongs_to_entity and @schedule_scenario_sid parameters.
	// If @include_member_lists is set to true the member lists of the entities retrieved will be included.
	// Any nodes in the returned set of entities will have inherited nonskill associations applied to the node's member_nonskill_activity fields.
	// Prior to listing the entities it will Resync TCN Agents and skill proficiencies.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @entity_type, or @belongs_to_entity have invalid values.
	//   - grpc.Internal: error occurs when getting the config entities.
	ListConfigEntities(context.Context, *connect_go.Request[wfm.ListConfigEntitiesReq]) (*connect_go.Response[wfm.ListConfigEntitiesRes], error)
	// Deletes shift instances with the corresponding @shift_instance_sids for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: the @shift_instance_sids are invalid for the org making the request.
	//	-grpc.NotFound: the shift instances with the given @shift_instance_sids don't exist.
	//	-grpc.Internal: error occurs when removing the shift instances.
	DeleteShiftInstances(context.Context, *connect_go.Request[wfm.DeleteShiftInstancesReq]) (*connect_go.Response[wfm.DeleteShiftInstancesRes], error)
	// Builds and returns the diagnostics and @nodes_checked for the @node_to_check for @schedule_scenario_sid and the org sending the request.
	// The @schedule_scenario_sid must match the scenario of the @node_to_check.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_to_check is invalid for @schedule_scenario_sid and the org making the request.
	//   - grpc.NotFound: the given @node_to_check doesn't exist.
	//   - grpc.Internal: error occurs when building the diagnostics.
	BuildNodeDiagnostics(context.Context, *connect_go.Request[wfm.BuildNodeDiagnosticsReq]) (*connect_go.Response[wfm.BuildNodeDiagnosticsRes], error)
	// Builds and returns the global diagnostics and @nodes_checked for the @schedule_scenario_sid and the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @schedule_scenario_sid has an invalid values.
	//   - grpc.NotFound: the given @schedule_scenario_sid doesn't exist for the org making the request.
	//   - grpc.Internal: error occurs when building the diagnostics.
	BuildGlobalDiagnostics(context.Context, *connect_go.Request[wfm.BuildGlobalDiagnosticsReq]) (*connect_go.Response[wfm.BuildGlobalDiagnosticsRes], error)
	// Gets the published schedule for the corresponding @datetime_range for the org sending the request.
	// Will create a published schedule if it does not exist already for the org sending the request.
	// if @include_shift_instances is true, the shift instances associated within @datetime_range for the published schedule will be returned in the published schedules shift_instances field.
	// if @node_selector is set, then only instances belonging to the origin of @node_selector and its children node will be returned, otherwise all matching shift instances will be included.
	// if @include_shift_template is true, any returned shift instances will have their orginating shift template returned in their origin_shift_template field.
	// if @include_shift_segments is true, any returned shift instances will have their shift_segments field set, otherwise the field will be left nil.
	// if @include_scheduling_activity is true, any returned shift segments will have their scheduling_activity field set, otherwise the field will be left nil.
	// if @include_activity is true, any returned scheduling activities will have their member_non_skill_activity field set, otherwise the field will be left nil.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range, @metric_types are invalid.
	//   - grpc.NotFound: the @node_selector doesn't exist.
	//   - grpc.Internal: error occurs when getting the published schedule.
	GetPublishedSchedule(context.Context, *connect_go.Request[wfm.GetPublishedScheduleReq]) (*connect_go.Response[wfm.GetPublishedScheduleRes], error)
	// Gets the required calls intervals for the published schedule for the corresponding @viewing_range, for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the published schedule doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	GetPublishedScheduleRequiredCalls(context.Context, *connect_go.Request[wfm.GetPublishedScheduleRequiredCallsReq]) (*connect_go.Response[wfm.GetPublishedScheduleRequiredCallsRes], error)
	// Gets the required calls intervals for the specified draft schedule for the corresponding @viewing_range, for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the draft schedule doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	GetDraftScheduleRequiredCalls(context.Context, *connect_go.Request[wfm.GetDraftScheduleRequiredCallsReq]) (*connect_go.Response[wfm.GetDraftScheduleRequiredCallsRes], error)
	// Creates a draft schedule for the org sending the request with the provided parameters.
	// The @draft_schedule_sid of the new entity will be returned in the response.
	// The @created_at and @last_updated_at fields will be set to the current time and null respectively.
	// The draft schedule will include the published schedule's shift instances and shift segments.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: the @name, @description or @scheduling_range are invalid.
	//   - grpc.Internal: error occurs when creating the draft schedule.
	CreateDraftSchedule(context.Context, *connect_go.Request[wfm.CreateDraftScheduleReq]) (*connect_go.Response[wfm.CreateDraftScheduleRes], error)
	// Updates the @name, @description, and @datetime_range of the given @draft_schedule_sid for the org sending the request.
	// The @name, @description, and @datetime_range fields must all be set with their desired values.
	// If @delete_shifts_not_in_range if true, then any instances outside of the @datetime_range will be permenantly deleted with no recovery option.
	// If @delete_shifts_not_in_range is false, instances outside of the new @datetime_range will be retained, for use if the datetime range is expanded to cover the instances in the future.
	// If @copy_shifts_into_new_range time is true, then new the portion of an expanded @datetime_range which has no instances will copy the instances from the published schedule. If false, no instances will be created for an expanded @scheduling_range.
	// If @get_updated_shifts is true, then the returned draft schedule will also contain the shift instances and segments in the given @datetime_range.
	// Errors:
	//   - grpc.Invalid: the @name, @description or @datetime_range are invalid.
	//   - grpc.Internal: error occurs when updating the schedule or its instances.
	UpdateDraftSchedule(context.Context, *connect_go.Request[wfm.UpdateDraftScheduleReq]) (*connect_go.Response[wfm.UpdateDraftScheduleRes], error)
	// Builds a draft schedule for the given @node_selector in @schedule_scenario_sid over @schedule_scenario_scheduling_range for @draft_schedule_sid and the org making the request.
	// The @schedule_scenario_scheduling_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
	// @include parameters are used when retrieving the resulting draft schedule, and work in the same way as for GetDraftSchedule.
	// Will return diagnostics for the newly built schedule, or just diagnostics if the schedule cannot be built successfully due to diagnostic error.
	BuildDraftSchedule(context.Context, *connect_go.Request[wfm.BuildDraftScheduleReq]) (*connect_go.Response[wfm.BuildDraftScheduleRes], error)
	// Publishes the shift instances of the given @draft_schedule_sid to the published schedule of the org sending the request.
	// Overlapping shift instances that aren't locked will be replaced with the instances from the draft schedule.
	// If @ignore_diagnostics_errors is set to true, it will publish the schedule regardless of any diagnostics errors,
	// otherwise it will return those diagnostic errors and not publish the schedule.
	// @include parameters are used when retrieving the resulting published schedule, and work in the same way as for GetDraftSchedule.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in the @req are invalid..
	//   - grpc.NotFound: @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when publishing the draft schedule.
	PublishDraftSchedule(context.Context, *connect_go.Request[wfm.PublishDraftScheduleReq]) (*connect_go.Response[wfm.PublishDraftScheduleRes], error)
	// Resets the shifts on the @draft_schedule_sid for the org sending the request.
	// Shifts overlapping the @datetime_range will be deleted, then that @datetime_range will be populated with shifts from the published schedule.
	// If no @datetime_range is provided, all shifts will be removed from the @draft_schedule_sid, and published shifts will be copied across the draft's datetime range.
	// If @unlocked_only is set to true, only unlocked shifts will be deleted, and the locked shift instances will remain.
	//
	//	The published schedule will still be copied, so any newly overlapping shifts will result in an overlap warning.
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range or @draft_schedule_sid are invalid for the org sending the request.
	//   - grpc.NotFound: the @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when resetting the schedule.
	ResetDraftSchedule(context.Context, *connect_go.Request[wfm.ResetDraftScheduleReq]) (*connect_go.Response[wfm.ResetDraftScheduleRes], error)
	// Gets the draft schedule with @draft_schedule_sid for the corresponding @datetime_range for the org sending the request.
	// The @datetime_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
	// if @include_shift_instances is true, the shift instances associated within @datetime_range for the draft schedule will be returned in the draft schedules shift_instances field.
	// if @node_selector is set then only instances belonging to the origin of @node_selector and its children node will be returned, otherwise all matching shift instances will be included.
	// @node_selector must be for a node that belongs to the same schedule scenario as @draft_schedule_sid.
	// if @include_shift_template is true, any returned shift instances will have their orginating shift template returned in their origin_shift_template field.
	// if @include_shift_segments is true, any returned shift instances will have their shift_segments field set, otherwise the field will be left nil.
	// if @include_scheduling_activity is true, any returned shift segments will have their scheduling_activity field set, otherwise the field will be left nil.
	// if @include_activity is true, any returned scheduling activities will have their member_non_skill_activity field set, otherwise the field will be left nil.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range or @draft_schedule_sid are invalid.
	//   - grpc.NotFound: the @node_selector or @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when getting the draft schedule.
	GetDraftSchedule(context.Context, *connect_go.Request[wfm.GetDraftScheduleReq]) (*connect_go.Response[wfm.GetDraftScheduleRes], error)
	// Lists the draft schedules whose scheduling_range overlaps the given @datetime_range for the org sending the request.
	// If @datetime_range is not set, all draft schedules for the org will be returned.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range is invalid.
	//   - grpc.Internal: error occurs when listing the draft schedules.
	ListDraftSchedules(context.Context, *connect_go.Request[wfm.ListDraftSchedulesReq]) (*connect_go.Response[wfm.ListDraftSchedulesRes], error)
	// Clears shift instances from the @schedule_selector for the org sending the request.
	// If @node_selector is set, only shifts related to the given @node_selector will be cleared.
	// If @node_selector is not set, all shifts on the @schedule_selector may be cleared, regardless of the shift template they are associated with.
	// If @datetime_range is set, only the shifts overlapping the @datetime_range will be cleared.
	// If @datetime_range is not set, all shifts on the schedule will be considered in range to be deleted and @invert_datetime_range and @start_datetimes_only must be set to false.
	// If @invert_datetime_range is set to true, the shifts overlapping the range before and after the provided @datetime_range will be deleted.
	// If @invert_datetime_range is set to false, the provided @datetime_range will be used.
	// If @start_datetimes_only is set to true, deletes the shifts that start within the @datetime range, or start before or after @datetime_range if @invert_datetime_range is true.
	// If @start_datetimes_only is set to false, deletes the shifts that overlap with the @datetime range, or overlap the range before or after @datetime_range if @invert_datetime_range is true.
	// If @delete_locked is set to true, both locked and unlocked shifts will be cleared.
	// If @delete_locked is set to false, only shifts with @is_locked set to false may be cleared.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_selector, @schedule_selector, or @datetime_range in the request are invalid.
	//   - grpc.NotFound: the draft schedule with the given @schedule_selector doesn't exist.
	//   - grpc.Internal: error occurs when removing the shifts from the schedule.
	ClearSchedule(context.Context, *connect_go.Request[wfm.ClearScheduleReq]) (*connect_go.Response[wfm.ClearScheduleRes], error)
	// Deletes a draft schedule with the corresponding @draft_schedule_sid for the org sending the request.
	// It also deletes all of its shift instances and segments.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @draft_schedule_sid is invalid for the org making the request.
	//   - grpc.NotFound: the draft schedule with the given @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when removing the draft schedule.
	DeleteDraftSchedule(context.Context, *connect_go.Request[wfm.DeleteDraftScheduleReq]) (*connect_go.Response[wfm.DeleteDraftScheduleRes], error)
	// Lists the shift instances with the corresponding @shift_instance_sids for the org sending the request.
	// If @include_shift_template is set to true then the related shift template for the shift instances will be returned in the shift template field.
	// If @include_shift_segments is set to true then the related shift segments for the shift instances will be returned in the shift segments field.
	// If @include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
	// @include_shift_segments must be true to take effect.
	// If @include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling
	// activities member non skill activity field. @include_scheduling_activity must be true to take effect.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @org_id or @shift_instance_sids in the request are invalid.
	//   - grpc.Internal: error occurs when listing the shift instances or their shift segments.
	ListShiftInstancesBySid(context.Context, *connect_go.Request[wfm.ListShiftInstancesBySidReq]) (*connect_go.Response[wfm.ListShiftInstancesBySidRes], error)
	// Copies the shifts from @source_schedule_selector to @destination_schedule_selector, constrained by the given parameters for the org sending the request.
	// If @datetime_range is set, all shifts within the datetime range will be copied.
	// If @datetime_range is not set, all shifts in the @source_schedule_selector within the schedule range of the @destination_schedule_selector will be copied. However if one of them is a published schedule, it will use the schedule range of the draft schedule.
	// If @start_datetimes_only is set to false, then shifts are considered to be within the @datetime range if any portion of them is within the range.
	// If @start_datetimes_only is set to true, then only shifts with start times within the @datetime range will be copied.
	// If @overlap_as_warning is set to false, any overlapping shifts for a given agent will return a diagnostic error, and prevent any shifts from being copied.
	// If @overlap_as_warning is set to true, the shifts will be copied regardless of overlap conflicts, and any conflicts will cause a diagnostic warning to be returned after.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: one or more fields in the request have invalid values.
	//	-grpc.NotFound: the @source_schedule_selector or @destination_schedule_selector don't exist for the org sending the request.
	//	-grpc.Internal: error occurs when creating the copied shift instances.
	CopyScheduleToSchedule(context.Context, *connect_go.Request[wfm.CopyScheduleToScheduleReq]) (*connect_go.Response[wfm.CopyScheduleToScheduleRes], error)
	// Creates a shift instance for the org sending the request with the provided parameters.
	// This method is not implemented. Do not use.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when creating the shift instance.
	CreateShiftInstance(context.Context, *connect_go.Request[wfm.CreateShiftInstanceReq]) (*connect_go.Response[wfm.CreateShiftInstanceRes], error)
	// Creates a shift instance for the org sending the request with the provided parameters.
	// If @wfm_agent_sids is empty, then the shift instance will be created for a newly created unassigned agent.
	// A shift instance will be created for each wfm agent sid provided.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when creating the shift instance.
	//   - grpc.NotFound: the @draft_schedule_sid, @shift_template_sid, or @wfm_agent_sids do not exist for the org sending the request.
	CreateShiftInstanceV2(context.Context, *connect_go.Request[wfm.CreateShiftInstanceV2Req]) (*connect_go.Response[wfm.CreateShiftInstanceV2Res], error)
	// Swaps shift instances with the given @shift_instance_sids that belong to @wfm_agent_sid1 to belong to @wfm_agent_sid2 (and viceversa).
	// Returns the swapped @shift_instances after they are succesfully updated.
	// If there are other shifts for the given @wfm_agent_sids with an overlap conflict, diagnostics will be returned instead.
	// All @shift_instance_sids must belong to the same schedule, and be from a draft schedule.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.NotFound: wfm_agent_sid_1, wfm_agent_sid_2, or shift_instance_sids do not exist for the org sending the request.
	//   - grpc.Internal: error occurs when swapping the shift instances.
	SwapShiftInstances(context.Context, *connect_go.Request[wfm.SwapShiftInstancesReq]) (*connect_go.Response[wfm.SwapShiftInstancesRes], error)
	// Updates a shift instance for the org sending the request with the provided parameters.
	// This method is not implemented. Do not use.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when updating the shift instance.
	UpdateShiftInstance(context.Context, *connect_go.Request[wfm.UpdateShiftInstanceReq]) (*connect_go.Response[wfm.UpdateShiftInstanceRes], error)
	// Updates a shift instance for the org sending the request with the provided parameters.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when updating the shift instance.
	UpdateShiftInstanceV2(context.Context, *connect_go.Request[wfm.UpdateShiftInstanceV2Req]) (*connect_go.Response[wfm.UpdateShiftInstanceV2Res], error)
	// Copies the given @shift_instance_sids to @destination_schedule for the org sending the request.
	// If there are any overlap conflicts on @destination_schedule and @overlap_as_warning is set to false,
	//
	//	then @shift_instance_sids will not be copied, and a list of diagnostics detailing the overlaps will be returned.
	//
	// If @overlap_as_warning is set to true, overlap conflicts will not prevent the shifts from being copied, and the overlap diagnostics will be returned after as warning messages instead.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.NotFound: the @shift_instance_sids or @destination_schedule does not exist for the org sending the request.
	//   - grpc.Internal: error occurs when copying the shift instances.
	CopyShiftInstancesToSchedule(context.Context, *connect_go.Request[wfm.CopyShiftInstancesToScheduleReq]) (*connect_go.Response[wfm.CopyShiftInstancesToScheduleRes], error)
	// Lists the shift_instance_sids for the Shift Instances associated with @wfm_agent_sid over the given @datetime_range and @schedule_selector.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the data.
	ListShiftInstanceSidsForAgent(context.Context, *connect_go.Request[wfm.ListShiftInstanceSidsForAgentReq]) (*connect_go.Response[wfm.ListShiftInstanceSidsForAgentRes], error)
	// Lists shift segments for the specified shift instances for the org sending the request.
	// If @include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
	// If @include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling activities member non skill activity field.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: a shift instance doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	ListShiftSegmentsByShiftInstanceSids(context.Context, *connect_go.Request[wfm.ListShiftSegmentsByShiftInstanceSidsReq]) (*connect_go.Response[wfm.ListShiftSegmentsByShiftInstanceSidsRes], error)
	// Creates the given @scheduling_target for the org making the request.
	// The @scheduling_target_sid of the new entity will be returned in the response.
	// Any preexisting scheduling target for @node_entity will be removed upon creation of the new @scheduling_target.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @scheduling_target is invalid.
	//   - grpc.NotFound: @node_entity doesn't exist for @schedule_scenario_sid and the org making the request.
	//   - grpc.Internal: error occours when setting the scheduling target.
	SetSchedulingTarget(context.Context, *connect_go.Request[wfm.SetSchedulingTargetReq]) (*connect_go.Response[wfm.SetSchedulingTargetRes], error)
	// Gets the @own_scheduling_target, @inherited_scheduling_target, and @resulting_scheduling_target for the given @node_selector and the org making the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_selector is invalid.
	//   - grpc.NotFound: the given @node_selector doesn't exist for the org making the request.
	//   - grpc.Internal: error occours when getting the scheduling target.
	GetSchedulingTarget(context.Context, *connect_go.Request[wfm.GetSchedulingTargetReq]) (*connect_go.Response[wfm.GetSchedulingTargetRes], error)
	// Deletes the scheduling target of the corresponding @node_selector for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: the @node_selector is invalid.
	//	-grpc.NotFound: the scheduling target for the given @node_selector doesn't exist for the org making the request.
	//	-grpc.Internal: error occurs when removing the scheduling target.
	DeleteSchedulingTarget(context.Context, *connect_go.Request[wfm.DeleteSchedulingTargetReq]) (*connect_go.Response[wfm.DeleteSchedulingTargetRes], error)
	// Gets the performance metrics across @datetime_range for shift instances in @schedule_selector associated with @node_selector for the org making the request.
	// Performance metrics will be generated for each of the given @metric_params.
	// The @interval_width_in_minutes must be a multiple of 5.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the @node_selector, @schedule_selector, or their shift instances doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	GetPerformanceMetrics(context.Context, *connect_go.Request[wfm.GetPerformanceMetricsReq]) (*connect_go.Response[wfm.GetPerformanceMetricsRes], error)
	// Lists the required calls intervals for the given @node_selector over the given @datetime_range for the org making the request.
	// The @interval_width_in_minutes must be a multiple of 5.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the data.
	ListRequiredCallsIntervals(context.Context, *connect_go.Request[wfm.ListRequiredCallsIntervalsReq]) (*connect_go.Response[wfm.ListRequiredCallsIntervalsRes], error)
}

// NewWFMClient constructs a client for the api.v1alpha1.wfm.WFM service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWFMClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WFMClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &wFMClient{
		listSkillProfiles: connect_go.NewClient[wfm.ListSkillProfilesReq, wfm.ListSkillProfilesRes](
			httpClient,
			baseURL+WFMListSkillProfilesProcedure,
			opts...,
		),
		updateSkillProfile: connect_go.NewClient[wfm.UpdateSkillProfileReq, wfm.UpdateSkillProfileRes](
			httpClient,
			baseURL+WFMUpdateSkillProfileProcedure,
			opts...,
		),
		updateSkillProfileProficiencies: connect_go.NewClient[wfm.UpdateSkillProfileProficienciesReq, wfm.UpdateSkillProfileProficienciesRes](
			httpClient,
			baseURL+WFMUpdateSkillProfileProficienciesProcedure,
			opts...,
		),
		getSkillProfile: connect_go.NewClient[wfm.GetSkillProfileReq, wfm.GetSkillProfileRes](
			httpClient,
			baseURL+WFMGetSkillProfileProcedure,
			opts...,
		),
		resyncSkillProfiles: connect_go.NewClient[wfm.ResyncSkillProfilesReq, wfm.ResyncSkillProfilesRes](
			httpClient,
			baseURL+WFMResyncSkillProfilesProcedure,
			opts...,
		),
		getLastSkillProfileResyncDate: connect_go.NewClient[wfm.GetLastSkillProfileResyncDateReq, wfm.GetLastSkillProfileResyncDateRes](
			httpClient,
			baseURL+WFMGetLastSkillProfileResyncDateProcedure,
			opts...,
		),
		upsertForecastingParameters: connect_go.NewClient[wfm.UpsertForecastingParametersReq, wfm.UpsertForecastingParametersRes](
			httpClient,
			baseURL+WFMUpsertForecastingParametersProcedure,
			opts...,
		),
		getForecastingParameters: connect_go.NewClient[wfm.GetForecastingParametersReq, wfm.GetForecastingParametersRes](
			httpClient,
			baseURL+WFMGetForecastingParametersProcedure,
			opts...,
		),
		listHistoricalData: connect_go.NewClient[wfm.ListHistoricalDataReq, wfm.ListHistoricalDataRes](
			httpClient,
			baseURL+WFMListHistoricalDataProcedure,
			opts...,
		),
		upsertHistoricalDataDelta: connect_go.NewClient[wfm.UpsertHistoricalDataDeltaReq, wfm.UpsertHistoricalDataDeltaRes](
			httpClient,
			baseURL+WFMUpsertHistoricalDataDeltaProcedure,
			opts...,
		),
		upsertHistoricalDataDeltas: connect_go.NewClient[wfm.UpsertHistoricalDataDeltasReq, wfm.UpsertHistoricalDataDeltasRes](
			httpClient,
			baseURL+WFMUpsertHistoricalDataDeltasProcedure,
			opts...,
		),
		listSkills: connect_go.NewClient[wfm.ListSkillsReq, wfm.ListSkillsRes](
			httpClient,
			baseURL+WFMListSkillsProcedure,
			opts...,
		),
		buildCallProfileTemplateForSkillProfile: connect_go.NewClient[wfm.BuildCallProfileTemplateForSkillProfileReq, wfm.BuildCallProfileTemplateForSkillProfileRes](
			httpClient,
			baseURL+WFMBuildCallProfileTemplateForSkillProfileProcedure,
			opts...,
		),
		createInactiveSkillProfileMapping: connect_go.NewClient[wfm.CreateInactiveSkillProfileMappingReq, wfm.CreateInactiveSkillProfileMappingRes](
			httpClient,
			baseURL+WFMCreateInactiveSkillProfileMappingProcedure,
			opts...,
		),
		getAvailableRegressionForecasterModelTypes: connect_go.NewClient[wfm.GetAvailableRegressionForecasterModelTypesReq, wfm.GetAvailableRegressionForecasterModelTypesRes](
			httpClient,
			baseURL+WFMGetAvailableRegressionForecasterModelTypesProcedure,
			opts...,
		),
		disconnectInactiveSkillProfileMapping: connect_go.NewClient[wfm.DisconnectInactiveSkillProfileMappingReq, wfm.DisconnectInactiveSkillProfileMappingRes](
			httpClient,
			baseURL+WFMDisconnectInactiveSkillProfileMappingProcedure,
			opts...,
		),
		deleteHistoricalDataDeltas: connect_go.NewClient[wfm.DeleteHistoricalDataDeltasReq, wfm.DeleteHistoricalDataDeltasRes](
			httpClient,
			baseURL+WFMDeleteHistoricalDataDeltasProcedure,
			opts...,
		),
		listTopSkillProfiles: connect_go.NewClient[wfm.ListTopSkillProfilesReq, wfm.ListTopSkillProfilesRes](
			httpClient,
			baseURL+WFMListTopSkillProfilesProcedure,
			opts...,
		),
		getSkillProfilesCount: connect_go.NewClient[wfm.GetSkillProfilesCountReq, wfm.GetSkillProfilesCountRes](
			httpClient,
			baseURL+WFMGetSkillProfilesCountProcedure,
			opts...,
		),
		buildProfileForecastByInterval: connect_go.NewClient[wfm.BuildProfileForecastByIntervalReq, wfm.CallDataByInterval](
			httpClient,
			baseURL+WFMBuildProfileForecastByIntervalProcedure,
			opts...,
		),
		buildProfileForecastByIntervalWithStats: connect_go.NewClient[wfm.BuildProfileForecastByIntervalWithStatsReq, wfm.BuildProfileForecastByIntervalWithStatsRes](
			httpClient,
			baseURL+WFMBuildProfileForecastByIntervalWithStatsProcedure,
			opts...,
		),
		upsertProfileForecast: connect_go.NewClient[wfm.UpsertProfileForecastReq, wfm.UpsertProfileForecastRes](
			httpClient,
			baseURL+WFMUpsertProfileForecastProcedure,
			opts...,
		),
		createCallProfileTemplate: connect_go.NewClient[wfm.CreateCallProfileTemplateReq, wfm.CreateCallProfileTemplateRes](
			httpClient,
			baseURL+WFMCreateCallProfileTemplateProcedure,
			opts...,
		),
		deleteCallProfileTemplate: connect_go.NewClient[wfm.DeleteCallProfileTemplateReq, wfm.DeleteCallProfileTemplateRes](
			httpClient,
			baseURL+WFMDeleteCallProfileTemplateProcedure,
			opts...,
		),
		createRegressionTemplate: connect_go.NewClient[wfm.CreateRegressionTemplateReq, wfm.CreateRegressionTemplateRes](
			httpClient,
			baseURL+WFMCreateRegressionTemplateProcedure,
			opts...,
		),
		deleteRegressionTemplate: connect_go.NewClient[wfm.DeleteRegressionTemplateReq, wfm.DeleteRegressionTemplateRes](
			httpClient,
			baseURL+WFMDeleteRegressionTemplateProcedure,
			opts...,
		),
		listRegressionTemplates: connect_go.NewClient[wfm.ListRegressionTemplatesReq, wfm.ListRegressionTemplatesRes](
			httpClient,
			baseURL+WFMListRegressionTemplatesProcedure,
			opts...,
		),
		listForecastIntervalsForSkillProfile: connect_go.NewClient[wfm.ListForecastIntervalsForSkillProfileReq, wfm.CallDataByInterval](
			httpClient,
			baseURL+WFMListForecastIntervalsForSkillProfileProcedure,
			opts...,
		),
		buildRegressionForecastByInterval: connect_go.NewClient[wfm.BuildRegressionForecastByIntervalReq, wfm.CallDataByInterval](
			httpClient,
			baseURL+WFMBuildRegressionForecastByIntervalProcedure,
			opts...,
		),
		buildRegressionForecastByIntervalWithStats: connect_go.NewClient[wfm.BuildRegressionForecastByIntervalWithStatsReq, wfm.BuildRegressionForecastByIntervalWithStatsRes](
			httpClient,
			baseURL+WFMBuildRegressionForecastByIntervalWithStatsProcedure,
			opts...,
		),
		listCallProfileTemplates: connect_go.NewClient[wfm.ListCallProfileTemplatesReq, wfm.ListCallProfileTemplatesRes](
			httpClient,
			baseURL+WFMListCallProfileTemplatesProcedure,
			opts...,
		),
		upsertRegressionForecast: connect_go.NewClient[wfm.UpsertRegressionForecastReq, wfm.UpsertRegressionForecastRes](
			httpClient,
			baseURL+WFMUpsertRegressionForecastProcedure,
			opts...,
		),
		upsertForecastDataDelta: connect_go.NewClient[wfm.UpsertForecastDataDeltaReq, wfm.UpsertForecastDataDeltaRes](
			httpClient,
			baseURL+WFMUpsertForecastDataDeltaProcedure,
			opts...,
		),
		upsertForecastDataDeltas: connect_go.NewClient[wfm.UpsertForecastDataDeltasReq, wfm.UpsertForecastDataDeltasRes](
			httpClient,
			baseURL+WFMUpsertForecastDataDeltasProcedure,
			opts...,
		),
		deleteForecastIntervals: connect_go.NewClient[wfm.DeleteForecastIntervalsReq, wfm.DeleteForecastIntervalsRes](
			httpClient,
			baseURL+WFMDeleteForecastIntervalsProcedure,
			opts...,
		),
		listHistoricalDataForAllSkillProfiles: connect_go.NewClient[wfm.ListHistoricalDataForAllSkillProfilesReq, wfm.ListHistoricalDataForAllSkillProfilesRes](
			httpClient,
			baseURL+WFMListHistoricalDataForAllSkillProfilesProcedure,
			opts...,
		),
		buildDOWAndMOYProfiles: connect_go.NewClient[wfm.BuildDOWAndMOYProfilesReq, wfm.BuildDOWAndMOYProfilesRes](
			httpClient,
			baseURL+WFMBuildDOWAndMOYProfilesProcedure,
			opts...,
		),
		calculateTrainingDataAveragesForSkillProfile: connect_go.NewClient[wfm.CalculateTrainingDataAveragesForSkillProfileReq, wfm.CalculateTrainingDataAveragesForSkillProfileRes](
			httpClient,
			baseURL+WFMCalculateTrainingDataAveragesForSkillProfileProcedure,
			opts...,
		),
		updateSkillProfileAveragesUsingHistoricalData: connect_go.NewClient[wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq, wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes](
			httpClient,
			baseURL+WFMUpdateSkillProfileAveragesUsingHistoricalDataProcedure,
			opts...,
		),
		updateCallCenterNode: connect_go.NewClient[wfm.UpdateCallCenterNodeReq, wfm.UpdateCallCenterNodeRes](
			httpClient,
			baseURL+WFMUpdateCallCenterNodeProcedure,
			opts...,
		),
		createClientNode: connect_go.NewClient[wfm.CreateClientNodeReq, wfm.CreateClientNodeRes](
			httpClient,
			baseURL+WFMCreateClientNodeProcedure,
			opts...,
		),
		updateClientNode: connect_go.NewClient[wfm.UpdateClientNodeReq, wfm.UpdateClientNodeRes](
			httpClient,
			baseURL+WFMUpdateClientNodeProcedure,
			opts...,
		),
		createLocationNode: connect_go.NewClient[wfm.CreateLocationNodeReq, wfm.CreateLocationNodeRes](
			httpClient,
			baseURL+WFMCreateLocationNodeProcedure,
			opts...,
		),
		updateLocationNode: connect_go.NewClient[wfm.UpdateLocationNodeReq, wfm.UpdateLocationNodeRes](
			httpClient,
			baseURL+WFMUpdateLocationNodeProcedure,
			opts...,
		),
		createProgramNode: connect_go.NewClient[wfm.CreateProgramNodeReq, wfm.CreateProgramNodeRes](
			httpClient,
			baseURL+WFMCreateProgramNodeProcedure,
			opts...,
		),
		updateProgramNode: connect_go.NewClient[wfm.UpdateProgramNodeReq, wfm.UpdateProgramNodeRes](
			httpClient,
			baseURL+WFMUpdateProgramNodeProcedure,
			opts...,
		),
		createConstraintRule: connect_go.NewClient[wfm.CreateConstraintRuleReq, wfm.CreateConstraintRuleRes](
			httpClient,
			baseURL+WFMCreateConstraintRuleProcedure,
			opts...,
		),
		updateConstraintRule: connect_go.NewClient[wfm.UpdateConstraintRuleReq, wfm.UpdateConstraintRuleRes](
			httpClient,
			baseURL+WFMUpdateConstraintRuleProcedure,
			opts...,
		),
		deleteConstraintRule: connect_go.NewClient[wfm.DeleteConstraintRuleReq, wfm.DeleteConstraintRuleRes](
			httpClient,
			baseURL+WFMDeleteConstraintRuleProcedure,
			opts...,
		),
		createNonSkillActivity: connect_go.NewClient[wfm.CreateNonSkillActivityReq, wfm.CreateNonSkillActivityRes](
			httpClient,
			baseURL+WFMCreateNonSkillActivityProcedure,
			opts...,
		),
		updateNonSkillActivity: connect_go.NewClient[wfm.UpdateNonSkillActivityReq, wfm.UpdateNonSkillActivityRes](
			httpClient,
			baseURL+WFMUpdateNonSkillActivityProcedure,
			opts...,
		),
		listNonSkillActivities: connect_go.NewClient[wfm.ListNonSkillActivitiesReq, wfm.ListNonSkillActivitiesRes](
			httpClient,
			baseURL+WFMListNonSkillActivitiesProcedure,
			opts...,
		),
		listNonSkillActivityAssociations: connect_go.NewClient[wfm.ListNonSkillActivityAssociationsReq, wfm.ListNonSkillActivityAssociationsRes](
			httpClient,
			baseURL+WFMListNonSkillActivityAssociationsProcedure,
			opts...,
		),
		listCandidateSchedulingActivities: connect_go.NewClient[wfm.ListCandidateSchedulingActivitiesReq, wfm.ListCandidateSchedulingActivitiesRes](
			httpClient,
			baseURL+WFMListCandidateSchedulingActivitiesProcedure,
			opts...,
		),
		createAgentGroup: connect_go.NewClient[wfm.CreateAgentGroupReq, wfm.CreateAgentGroupRes](
			httpClient,
			baseURL+WFMCreateAgentGroupProcedure,
			opts...,
		),
		updateAgentGroup: connect_go.NewClient[wfm.UpdateAgentGroupReq, wfm.UpdateAgentGroupRes](
			httpClient,
			baseURL+WFMUpdateAgentGroupProcedure,
			opts...,
		),
		updateWFMAgent: connect_go.NewClient[wfm.UpdateWFMAgentReq, wfm.UpdateWFMAgentRes](
			httpClient,
			baseURL+WFMUpdateWFMAgentProcedure,
			opts...,
		),
		listAllWFMAgents: connect_go.NewClient[wfm.ListAllWFMAgentsReq, wfm.ListAllWFMAgentsRes](
			httpClient,
			baseURL+WFMListAllWFMAgentsProcedure,
			opts...,
		),
		listCandidateWFMAgents: connect_go.NewClient[wfm.ListCandidateWFMAgentsReq, wfm.ListCandidateWFMAgentsRes](
			httpClient,
			baseURL+WFMListCandidateWFMAgentsProcedure,
			opts...,
		),
		listUngroupedWFMAgents: connect_go.NewClient[wfm.ListUngroupedWFMAgentsReq, wfm.ListUngroupedWFMAgentsRes](
			httpClient,
			baseURL+WFMListUngroupedWFMAgentsProcedure,
			opts...,
		),
		listWFMAgentsAssociatedWithAgentGroup: connect_go.NewClient[wfm.ListWFMAgentsAssociatedWithAgentGroupReq, wfm.ListWFMAgentsAssociatedWithAgentGroupRes](
			httpClient,
			baseURL+WFMListWFMAgentsAssociatedWithAgentGroupProcedure,
			opts...,
		),
		createWFMAgentMemberships: connect_go.NewClient[wfm.CreateWFMAgentMembershipsReq, wfm.CreateWFMAgentMembershipsRes](
			httpClient,
			baseURL+WFMCreateWFMAgentMembershipsProcedure,
			opts...,
		),
		deleteWFMAgentMemberships: connect_go.NewClient[wfm.DeleteWFMAgentMembershipsReq, wfm.DeleteWFMAgentMembershipsRes](
			httpClient,
			baseURL+WFMDeleteWFMAgentMembershipsProcedure,
			opts...,
		),
		deleteWFMAgentsMemberships: connect_go.NewClient[wfm.DeleteWFMAgentsMembershipsReq, wfm.DeleteWFMAgentsMembershipsRes](
			httpClient,
			baseURL+WFMDeleteWFMAgentsMembershipsProcedure,
			opts...,
		),
		buildAgentDiagnostics: connect_go.NewClient[wfm.BuildAgentDiagnosticsReq, wfm.BuildAgentDiagnosticsRes](
			httpClient,
			baseURL+WFMBuildAgentDiagnosticsProcedure,
			opts...,
		),
		createShiftTemplate: connect_go.NewClient[wfm.CreateShiftTemplateReq, wfm.CreateShiftTemplateRes](
			httpClient,
			baseURL+WFMCreateShiftTemplateProcedure,
			opts...,
		),
		updateShiftTemplate: connect_go.NewClient[wfm.UpdateShiftTemplateReq, wfm.UpdateShiftTemplateRes](
			httpClient,
			baseURL+WFMUpdateShiftTemplateProcedure,
			opts...,
		),
		listShiftTemplatesBySids: connect_go.NewClient[wfm.ListShiftTemplatesBySidsReq, wfm.ListShiftTemplatesBySidsRes](
			httpClient,
			baseURL+WFMListShiftTemplatesBySidsProcedure,
			opts...,
		),
		buildShiftTemplateDiagnostics: connect_go.NewClient[wfm.BuildShiftTemplateDiagnosticsReq, wfm.BuildShiftTemplateDiagnosticsRes](
			httpClient,
			baseURL+WFMBuildShiftTemplateDiagnosticsProcedure,
			opts...,
		),
		createPlacementRule: connect_go.NewClient[wfm.CreatePlacementRuleReq, wfm.CreatePlacementRuleRes](
			httpClient,
			baseURL+WFMCreatePlacementRuleProcedure,
			opts...,
		),
		updatePlacementRule: connect_go.NewClient[wfm.UpdatePlacementRuleReq, wfm.UpdatePlacementRuleRes](
			httpClient,
			baseURL+WFMUpdatePlacementRuleProcedure,
			opts...,
		),
		deletePlacementRule: connect_go.NewClient[wfm.DeletePlacementRuleReq, wfm.DeletePlacementRuleRes](
			httpClient,
			baseURL+WFMDeletePlacementRuleProcedure,
			opts...,
		),
		createOpenTimesPattern: connect_go.NewClient[wfm.CreateOpenTimesPatternReq, wfm.CreateOpenTimesPatternRes](
			httpClient,
			baseURL+WFMCreateOpenTimesPatternProcedure,
			opts...,
		),
		updateOpenTimesPattern: connect_go.NewClient[wfm.UpdateOpenTimesPatternReq, wfm.UpdateOpenTimesPatternRes](
			httpClient,
			baseURL+WFMUpdateOpenTimesPatternProcedure,
			opts...,
		),
		deleteOpenTimesPattern: connect_go.NewClient[wfm.DeleteOpenTimesPatternReq, wfm.DeleteOpenTimesPatternRes](
			httpClient,
			baseURL+WFMDeleteOpenTimesPatternProcedure,
			opts...,
		),
		getOpenTimesBitmaps: connect_go.NewClient[wfm.GetOpenTimesBitmapsReq, wfm.GetOpenTimesBitmapsRes](
			httpClient,
			baseURL+WFMGetOpenTimesBitmapsProcedure,
			opts...,
		),
		createAgentAvailabilityPattern: connect_go.NewClient[wfm.CreateAgentAvailabilityPatternReq, wfm.CreateAgentAvailabilityPatternRes](
			httpClient,
			baseURL+WFMCreateAgentAvailabilityPatternProcedure,
			opts...,
		),
		updateAgentAvailabilityPattern: connect_go.NewClient[wfm.UpdateAgentAvailabilityPatternReq, wfm.UpdateAgentAvailabilityPatternRes](
			httpClient,
			baseURL+WFMUpdateAgentAvailabilityPatternProcedure,
			opts...,
		),
		deleteAgentAvailabilityPattern: connect_go.NewClient[wfm.DeleteAgentAvailabilityPatternReq, wfm.DeleteAgentAvailabilityPatternRes](
			httpClient,
			baseURL+WFMDeleteAgentAvailabilityPatternProcedure,
			opts...,
		),
		getAvailabilityBitmaps: connect_go.NewClient[wfm.GetAvailabilityBitmapsReq, wfm.GetAvailabilityBitmapsRes](
			httpClient,
			baseURL+WFMGetAvailabilityBitmapsProcedure,
			opts...,
		),
		upsertNonSkillActivityAssociation: connect_go.NewClient[wfm.UpsertNonSkillActivityAssociationReq, wfm.UpsertNonSkillActivityAssociationRes](
			httpClient,
			baseURL+WFMUpsertNonSkillActivityAssociationProcedure,
			opts...,
		),
		createSkillProficiencies: connect_go.NewClient[wfm.CreateSkillProficienciesReq, wfm.CreateSkillProficienciesRes](
			httpClient,
			baseURL+WFMCreateSkillProficienciesProcedure,
			opts...,
		),
		updateSkillProficiencies: connect_go.NewClient[wfm.UpdateSkillProficienciesReq, wfm.UpdateSkillProficienciesRes](
			httpClient,
			baseURL+WFMUpdateSkillProficienciesProcedure,
			opts...,
		),
		deleteSkillProficiency: connect_go.NewClient[wfm.DeleteSkillProficiencyReq, wfm.DeleteSkillProficiencyRes](
			httpClient,
			baseURL+WFMDeleteSkillProficiencyProcedure,
			opts...,
		),
		copyScenario: connect_go.NewClient[wfm.CopyScenarioReq, wfm.CopyScenarioRes](
			httpClient,
			baseURL+WFMCopyScenarioProcedure,
			opts...,
		),
		createScheduleScenarioWithNodes: connect_go.NewClient[wfm.CreateScheduleScenarioWithNodesReq, wfm.CreateScheduleScenarioWithNodesRes](
			httpClient,
			baseURL+WFMCreateScheduleScenarioWithNodesProcedure,
			opts...,
		),
		updateScheduleScenario: connect_go.NewClient[wfm.UpdateScheduleScenarioReq, wfm.UpdateScheduleScenarioRes](
			httpClient,
			baseURL+WFMUpdateScheduleScenarioProcedure,
			opts...,
		),
		listConfigEntities: connect_go.NewClient[wfm.ListConfigEntitiesReq, wfm.ListConfigEntitiesRes](
			httpClient,
			baseURL+WFMListConfigEntitiesProcedure,
			opts...,
		),
		deleteShiftInstances: connect_go.NewClient[wfm.DeleteShiftInstancesReq, wfm.DeleteShiftInstancesRes](
			httpClient,
			baseURL+WFMDeleteShiftInstancesProcedure,
			opts...,
		),
		buildNodeDiagnostics: connect_go.NewClient[wfm.BuildNodeDiagnosticsReq, wfm.BuildNodeDiagnosticsRes](
			httpClient,
			baseURL+WFMBuildNodeDiagnosticsProcedure,
			opts...,
		),
		buildGlobalDiagnostics: connect_go.NewClient[wfm.BuildGlobalDiagnosticsReq, wfm.BuildGlobalDiagnosticsRes](
			httpClient,
			baseURL+WFMBuildGlobalDiagnosticsProcedure,
			opts...,
		),
		getPublishedSchedule: connect_go.NewClient[wfm.GetPublishedScheduleReq, wfm.GetPublishedScheduleRes](
			httpClient,
			baseURL+WFMGetPublishedScheduleProcedure,
			opts...,
		),
		getPublishedScheduleRequiredCalls: connect_go.NewClient[wfm.GetPublishedScheduleRequiredCallsReq, wfm.GetPublishedScheduleRequiredCallsRes](
			httpClient,
			baseURL+WFMGetPublishedScheduleRequiredCallsProcedure,
			opts...,
		),
		getDraftScheduleRequiredCalls: connect_go.NewClient[wfm.GetDraftScheduleRequiredCallsReq, wfm.GetDraftScheduleRequiredCallsRes](
			httpClient,
			baseURL+WFMGetDraftScheduleRequiredCallsProcedure,
			opts...,
		),
		createDraftSchedule: connect_go.NewClient[wfm.CreateDraftScheduleReq, wfm.CreateDraftScheduleRes](
			httpClient,
			baseURL+WFMCreateDraftScheduleProcedure,
			opts...,
		),
		updateDraftSchedule: connect_go.NewClient[wfm.UpdateDraftScheduleReq, wfm.UpdateDraftScheduleRes](
			httpClient,
			baseURL+WFMUpdateDraftScheduleProcedure,
			opts...,
		),
		buildDraftSchedule: connect_go.NewClient[wfm.BuildDraftScheduleReq, wfm.BuildDraftScheduleRes](
			httpClient,
			baseURL+WFMBuildDraftScheduleProcedure,
			opts...,
		),
		publishDraftSchedule: connect_go.NewClient[wfm.PublishDraftScheduleReq, wfm.PublishDraftScheduleRes](
			httpClient,
			baseURL+WFMPublishDraftScheduleProcedure,
			opts...,
		),
		resetDraftSchedule: connect_go.NewClient[wfm.ResetDraftScheduleReq, wfm.ResetDraftScheduleRes](
			httpClient,
			baseURL+WFMResetDraftScheduleProcedure,
			opts...,
		),
		getDraftSchedule: connect_go.NewClient[wfm.GetDraftScheduleReq, wfm.GetDraftScheduleRes](
			httpClient,
			baseURL+WFMGetDraftScheduleProcedure,
			opts...,
		),
		listDraftSchedules: connect_go.NewClient[wfm.ListDraftSchedulesReq, wfm.ListDraftSchedulesRes](
			httpClient,
			baseURL+WFMListDraftSchedulesProcedure,
			opts...,
		),
		clearSchedule: connect_go.NewClient[wfm.ClearScheduleReq, wfm.ClearScheduleRes](
			httpClient,
			baseURL+WFMClearScheduleProcedure,
			opts...,
		),
		deleteDraftSchedule: connect_go.NewClient[wfm.DeleteDraftScheduleReq, wfm.DeleteDraftScheduleRes](
			httpClient,
			baseURL+WFMDeleteDraftScheduleProcedure,
			opts...,
		),
		listShiftInstancesBySid: connect_go.NewClient[wfm.ListShiftInstancesBySidReq, wfm.ListShiftInstancesBySidRes](
			httpClient,
			baseURL+WFMListShiftInstancesBySidProcedure,
			opts...,
		),
		copyScheduleToSchedule: connect_go.NewClient[wfm.CopyScheduleToScheduleReq, wfm.CopyScheduleToScheduleRes](
			httpClient,
			baseURL+WFMCopyScheduleToScheduleProcedure,
			opts...,
		),
		createShiftInstance: connect_go.NewClient[wfm.CreateShiftInstanceReq, wfm.CreateShiftInstanceRes](
			httpClient,
			baseURL+WFMCreateShiftInstanceProcedure,
			opts...,
		),
		createShiftInstanceV2: connect_go.NewClient[wfm.CreateShiftInstanceV2Req, wfm.CreateShiftInstanceV2Res](
			httpClient,
			baseURL+WFMCreateShiftInstanceV2Procedure,
			opts...,
		),
		swapShiftInstances: connect_go.NewClient[wfm.SwapShiftInstancesReq, wfm.SwapShiftInstancesRes](
			httpClient,
			baseURL+WFMSwapShiftInstancesProcedure,
			opts...,
		),
		updateShiftInstance: connect_go.NewClient[wfm.UpdateShiftInstanceReq, wfm.UpdateShiftInstanceRes](
			httpClient,
			baseURL+WFMUpdateShiftInstanceProcedure,
			opts...,
		),
		updateShiftInstanceV2: connect_go.NewClient[wfm.UpdateShiftInstanceV2Req, wfm.UpdateShiftInstanceV2Res](
			httpClient,
			baseURL+WFMUpdateShiftInstanceV2Procedure,
			opts...,
		),
		copyShiftInstancesToSchedule: connect_go.NewClient[wfm.CopyShiftInstancesToScheduleReq, wfm.CopyShiftInstancesToScheduleRes](
			httpClient,
			baseURL+WFMCopyShiftInstancesToScheduleProcedure,
			opts...,
		),
		listShiftInstanceSidsForAgent: connect_go.NewClient[wfm.ListShiftInstanceSidsForAgentReq, wfm.ListShiftInstanceSidsForAgentRes](
			httpClient,
			baseURL+WFMListShiftInstanceSidsForAgentProcedure,
			opts...,
		),
		listShiftSegmentsByShiftInstanceSids: connect_go.NewClient[wfm.ListShiftSegmentsByShiftInstanceSidsReq, wfm.ListShiftSegmentsByShiftInstanceSidsRes](
			httpClient,
			baseURL+WFMListShiftSegmentsByShiftInstanceSidsProcedure,
			opts...,
		),
		setSchedulingTarget: connect_go.NewClient[wfm.SetSchedulingTargetReq, wfm.SetSchedulingTargetRes](
			httpClient,
			baseURL+WFMSetSchedulingTargetProcedure,
			opts...,
		),
		getSchedulingTarget: connect_go.NewClient[wfm.GetSchedulingTargetReq, wfm.GetSchedulingTargetRes](
			httpClient,
			baseURL+WFMGetSchedulingTargetProcedure,
			opts...,
		),
		deleteSchedulingTarget: connect_go.NewClient[wfm.DeleteSchedulingTargetReq, wfm.DeleteSchedulingTargetRes](
			httpClient,
			baseURL+WFMDeleteSchedulingTargetProcedure,
			opts...,
		),
		getPerformanceMetrics: connect_go.NewClient[wfm.GetPerformanceMetricsReq, wfm.GetPerformanceMetricsRes](
			httpClient,
			baseURL+WFMGetPerformanceMetricsProcedure,
			opts...,
		),
		listRequiredCallsIntervals: connect_go.NewClient[wfm.ListRequiredCallsIntervalsReq, wfm.ListRequiredCallsIntervalsRes](
			httpClient,
			baseURL+WFMListRequiredCallsIntervalsProcedure,
			opts...,
		),
	}
}

// wFMClient implements WFMClient.
type wFMClient struct {
	listSkillProfiles                             *connect_go.Client[wfm.ListSkillProfilesReq, wfm.ListSkillProfilesRes]
	updateSkillProfile                            *connect_go.Client[wfm.UpdateSkillProfileReq, wfm.UpdateSkillProfileRes]
	updateSkillProfileProficiencies               *connect_go.Client[wfm.UpdateSkillProfileProficienciesReq, wfm.UpdateSkillProfileProficienciesRes]
	getSkillProfile                               *connect_go.Client[wfm.GetSkillProfileReq, wfm.GetSkillProfileRes]
	resyncSkillProfiles                           *connect_go.Client[wfm.ResyncSkillProfilesReq, wfm.ResyncSkillProfilesRes]
	getLastSkillProfileResyncDate                 *connect_go.Client[wfm.GetLastSkillProfileResyncDateReq, wfm.GetLastSkillProfileResyncDateRes]
	upsertForecastingParameters                   *connect_go.Client[wfm.UpsertForecastingParametersReq, wfm.UpsertForecastingParametersRes]
	getForecastingParameters                      *connect_go.Client[wfm.GetForecastingParametersReq, wfm.GetForecastingParametersRes]
	listHistoricalData                            *connect_go.Client[wfm.ListHistoricalDataReq, wfm.ListHistoricalDataRes]
	upsertHistoricalDataDelta                     *connect_go.Client[wfm.UpsertHistoricalDataDeltaReq, wfm.UpsertHistoricalDataDeltaRes]
	upsertHistoricalDataDeltas                    *connect_go.Client[wfm.UpsertHistoricalDataDeltasReq, wfm.UpsertHistoricalDataDeltasRes]
	listSkills                                    *connect_go.Client[wfm.ListSkillsReq, wfm.ListSkillsRes]
	buildCallProfileTemplateForSkillProfile       *connect_go.Client[wfm.BuildCallProfileTemplateForSkillProfileReq, wfm.BuildCallProfileTemplateForSkillProfileRes]
	createInactiveSkillProfileMapping             *connect_go.Client[wfm.CreateInactiveSkillProfileMappingReq, wfm.CreateInactiveSkillProfileMappingRes]
	getAvailableRegressionForecasterModelTypes    *connect_go.Client[wfm.GetAvailableRegressionForecasterModelTypesReq, wfm.GetAvailableRegressionForecasterModelTypesRes]
	disconnectInactiveSkillProfileMapping         *connect_go.Client[wfm.DisconnectInactiveSkillProfileMappingReq, wfm.DisconnectInactiveSkillProfileMappingRes]
	deleteHistoricalDataDeltas                    *connect_go.Client[wfm.DeleteHistoricalDataDeltasReq, wfm.DeleteHistoricalDataDeltasRes]
	listTopSkillProfiles                          *connect_go.Client[wfm.ListTopSkillProfilesReq, wfm.ListTopSkillProfilesRes]
	getSkillProfilesCount                         *connect_go.Client[wfm.GetSkillProfilesCountReq, wfm.GetSkillProfilesCountRes]
	buildProfileForecastByInterval                *connect_go.Client[wfm.BuildProfileForecastByIntervalReq, wfm.CallDataByInterval]
	buildProfileForecastByIntervalWithStats       *connect_go.Client[wfm.BuildProfileForecastByIntervalWithStatsReq, wfm.BuildProfileForecastByIntervalWithStatsRes]
	upsertProfileForecast                         *connect_go.Client[wfm.UpsertProfileForecastReq, wfm.UpsertProfileForecastRes]
	createCallProfileTemplate                     *connect_go.Client[wfm.CreateCallProfileTemplateReq, wfm.CreateCallProfileTemplateRes]
	deleteCallProfileTemplate                     *connect_go.Client[wfm.DeleteCallProfileTemplateReq, wfm.DeleteCallProfileTemplateRes]
	createRegressionTemplate                      *connect_go.Client[wfm.CreateRegressionTemplateReq, wfm.CreateRegressionTemplateRes]
	deleteRegressionTemplate                      *connect_go.Client[wfm.DeleteRegressionTemplateReq, wfm.DeleteRegressionTemplateRes]
	listRegressionTemplates                       *connect_go.Client[wfm.ListRegressionTemplatesReq, wfm.ListRegressionTemplatesRes]
	listForecastIntervalsForSkillProfile          *connect_go.Client[wfm.ListForecastIntervalsForSkillProfileReq, wfm.CallDataByInterval]
	buildRegressionForecastByInterval             *connect_go.Client[wfm.BuildRegressionForecastByIntervalReq, wfm.CallDataByInterval]
	buildRegressionForecastByIntervalWithStats    *connect_go.Client[wfm.BuildRegressionForecastByIntervalWithStatsReq, wfm.BuildRegressionForecastByIntervalWithStatsRes]
	listCallProfileTemplates                      *connect_go.Client[wfm.ListCallProfileTemplatesReq, wfm.ListCallProfileTemplatesRes]
	upsertRegressionForecast                      *connect_go.Client[wfm.UpsertRegressionForecastReq, wfm.UpsertRegressionForecastRes]
	upsertForecastDataDelta                       *connect_go.Client[wfm.UpsertForecastDataDeltaReq, wfm.UpsertForecastDataDeltaRes]
	upsertForecastDataDeltas                      *connect_go.Client[wfm.UpsertForecastDataDeltasReq, wfm.UpsertForecastDataDeltasRes]
	deleteForecastIntervals                       *connect_go.Client[wfm.DeleteForecastIntervalsReq, wfm.DeleteForecastIntervalsRes]
	listHistoricalDataForAllSkillProfiles         *connect_go.Client[wfm.ListHistoricalDataForAllSkillProfilesReq, wfm.ListHistoricalDataForAllSkillProfilesRes]
	buildDOWAndMOYProfiles                        *connect_go.Client[wfm.BuildDOWAndMOYProfilesReq, wfm.BuildDOWAndMOYProfilesRes]
	calculateTrainingDataAveragesForSkillProfile  *connect_go.Client[wfm.CalculateTrainingDataAveragesForSkillProfileReq, wfm.CalculateTrainingDataAveragesForSkillProfileRes]
	updateSkillProfileAveragesUsingHistoricalData *connect_go.Client[wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq, wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes]
	updateCallCenterNode                          *connect_go.Client[wfm.UpdateCallCenterNodeReq, wfm.UpdateCallCenterNodeRes]
	createClientNode                              *connect_go.Client[wfm.CreateClientNodeReq, wfm.CreateClientNodeRes]
	updateClientNode                              *connect_go.Client[wfm.UpdateClientNodeReq, wfm.UpdateClientNodeRes]
	createLocationNode                            *connect_go.Client[wfm.CreateLocationNodeReq, wfm.CreateLocationNodeRes]
	updateLocationNode                            *connect_go.Client[wfm.UpdateLocationNodeReq, wfm.UpdateLocationNodeRes]
	createProgramNode                             *connect_go.Client[wfm.CreateProgramNodeReq, wfm.CreateProgramNodeRes]
	updateProgramNode                             *connect_go.Client[wfm.UpdateProgramNodeReq, wfm.UpdateProgramNodeRes]
	createConstraintRule                          *connect_go.Client[wfm.CreateConstraintRuleReq, wfm.CreateConstraintRuleRes]
	updateConstraintRule                          *connect_go.Client[wfm.UpdateConstraintRuleReq, wfm.UpdateConstraintRuleRes]
	deleteConstraintRule                          *connect_go.Client[wfm.DeleteConstraintRuleReq, wfm.DeleteConstraintRuleRes]
	createNonSkillActivity                        *connect_go.Client[wfm.CreateNonSkillActivityReq, wfm.CreateNonSkillActivityRes]
	updateNonSkillActivity                        *connect_go.Client[wfm.UpdateNonSkillActivityReq, wfm.UpdateNonSkillActivityRes]
	listNonSkillActivities                        *connect_go.Client[wfm.ListNonSkillActivitiesReq, wfm.ListNonSkillActivitiesRes]
	listNonSkillActivityAssociations              *connect_go.Client[wfm.ListNonSkillActivityAssociationsReq, wfm.ListNonSkillActivityAssociationsRes]
	listCandidateSchedulingActivities             *connect_go.Client[wfm.ListCandidateSchedulingActivitiesReq, wfm.ListCandidateSchedulingActivitiesRes]
	createAgentGroup                              *connect_go.Client[wfm.CreateAgentGroupReq, wfm.CreateAgentGroupRes]
	updateAgentGroup                              *connect_go.Client[wfm.UpdateAgentGroupReq, wfm.UpdateAgentGroupRes]
	updateWFMAgent                                *connect_go.Client[wfm.UpdateWFMAgentReq, wfm.UpdateWFMAgentRes]
	listAllWFMAgents                              *connect_go.Client[wfm.ListAllWFMAgentsReq, wfm.ListAllWFMAgentsRes]
	listCandidateWFMAgents                        *connect_go.Client[wfm.ListCandidateWFMAgentsReq, wfm.ListCandidateWFMAgentsRes]
	listUngroupedWFMAgents                        *connect_go.Client[wfm.ListUngroupedWFMAgentsReq, wfm.ListUngroupedWFMAgentsRes]
	listWFMAgentsAssociatedWithAgentGroup         *connect_go.Client[wfm.ListWFMAgentsAssociatedWithAgentGroupReq, wfm.ListWFMAgentsAssociatedWithAgentGroupRes]
	createWFMAgentMemberships                     *connect_go.Client[wfm.CreateWFMAgentMembershipsReq, wfm.CreateWFMAgentMembershipsRes]
	deleteWFMAgentMemberships                     *connect_go.Client[wfm.DeleteWFMAgentMembershipsReq, wfm.DeleteWFMAgentMembershipsRes]
	deleteWFMAgentsMemberships                    *connect_go.Client[wfm.DeleteWFMAgentsMembershipsReq, wfm.DeleteWFMAgentsMembershipsRes]
	buildAgentDiagnostics                         *connect_go.Client[wfm.BuildAgentDiagnosticsReq, wfm.BuildAgentDiagnosticsRes]
	createShiftTemplate                           *connect_go.Client[wfm.CreateShiftTemplateReq, wfm.CreateShiftTemplateRes]
	updateShiftTemplate                           *connect_go.Client[wfm.UpdateShiftTemplateReq, wfm.UpdateShiftTemplateRes]
	listShiftTemplatesBySids                      *connect_go.Client[wfm.ListShiftTemplatesBySidsReq, wfm.ListShiftTemplatesBySidsRes]
	buildShiftTemplateDiagnostics                 *connect_go.Client[wfm.BuildShiftTemplateDiagnosticsReq, wfm.BuildShiftTemplateDiagnosticsRes]
	createPlacementRule                           *connect_go.Client[wfm.CreatePlacementRuleReq, wfm.CreatePlacementRuleRes]
	updatePlacementRule                           *connect_go.Client[wfm.UpdatePlacementRuleReq, wfm.UpdatePlacementRuleRes]
	deletePlacementRule                           *connect_go.Client[wfm.DeletePlacementRuleReq, wfm.DeletePlacementRuleRes]
	createOpenTimesPattern                        *connect_go.Client[wfm.CreateOpenTimesPatternReq, wfm.CreateOpenTimesPatternRes]
	updateOpenTimesPattern                        *connect_go.Client[wfm.UpdateOpenTimesPatternReq, wfm.UpdateOpenTimesPatternRes]
	deleteOpenTimesPattern                        *connect_go.Client[wfm.DeleteOpenTimesPatternReq, wfm.DeleteOpenTimesPatternRes]
	getOpenTimesBitmaps                           *connect_go.Client[wfm.GetOpenTimesBitmapsReq, wfm.GetOpenTimesBitmapsRes]
	createAgentAvailabilityPattern                *connect_go.Client[wfm.CreateAgentAvailabilityPatternReq, wfm.CreateAgentAvailabilityPatternRes]
	updateAgentAvailabilityPattern                *connect_go.Client[wfm.UpdateAgentAvailabilityPatternReq, wfm.UpdateAgentAvailabilityPatternRes]
	deleteAgentAvailabilityPattern                *connect_go.Client[wfm.DeleteAgentAvailabilityPatternReq, wfm.DeleteAgentAvailabilityPatternRes]
	getAvailabilityBitmaps                        *connect_go.Client[wfm.GetAvailabilityBitmapsReq, wfm.GetAvailabilityBitmapsRes]
	upsertNonSkillActivityAssociation             *connect_go.Client[wfm.UpsertNonSkillActivityAssociationReq, wfm.UpsertNonSkillActivityAssociationRes]
	createSkillProficiencies                      *connect_go.Client[wfm.CreateSkillProficienciesReq, wfm.CreateSkillProficienciesRes]
	updateSkillProficiencies                      *connect_go.Client[wfm.UpdateSkillProficienciesReq, wfm.UpdateSkillProficienciesRes]
	deleteSkillProficiency                        *connect_go.Client[wfm.DeleteSkillProficiencyReq, wfm.DeleteSkillProficiencyRes]
	copyScenario                                  *connect_go.Client[wfm.CopyScenarioReq, wfm.CopyScenarioRes]
	createScheduleScenarioWithNodes               *connect_go.Client[wfm.CreateScheduleScenarioWithNodesReq, wfm.CreateScheduleScenarioWithNodesRes]
	updateScheduleScenario                        *connect_go.Client[wfm.UpdateScheduleScenarioReq, wfm.UpdateScheduleScenarioRes]
	listConfigEntities                            *connect_go.Client[wfm.ListConfigEntitiesReq, wfm.ListConfigEntitiesRes]
	deleteShiftInstances                          *connect_go.Client[wfm.DeleteShiftInstancesReq, wfm.DeleteShiftInstancesRes]
	buildNodeDiagnostics                          *connect_go.Client[wfm.BuildNodeDiagnosticsReq, wfm.BuildNodeDiagnosticsRes]
	buildGlobalDiagnostics                        *connect_go.Client[wfm.BuildGlobalDiagnosticsReq, wfm.BuildGlobalDiagnosticsRes]
	getPublishedSchedule                          *connect_go.Client[wfm.GetPublishedScheduleReq, wfm.GetPublishedScheduleRes]
	getPublishedScheduleRequiredCalls             *connect_go.Client[wfm.GetPublishedScheduleRequiredCallsReq, wfm.GetPublishedScheduleRequiredCallsRes]
	getDraftScheduleRequiredCalls                 *connect_go.Client[wfm.GetDraftScheduleRequiredCallsReq, wfm.GetDraftScheduleRequiredCallsRes]
	createDraftSchedule                           *connect_go.Client[wfm.CreateDraftScheduleReq, wfm.CreateDraftScheduleRes]
	updateDraftSchedule                           *connect_go.Client[wfm.UpdateDraftScheduleReq, wfm.UpdateDraftScheduleRes]
	buildDraftSchedule                            *connect_go.Client[wfm.BuildDraftScheduleReq, wfm.BuildDraftScheduleRes]
	publishDraftSchedule                          *connect_go.Client[wfm.PublishDraftScheduleReq, wfm.PublishDraftScheduleRes]
	resetDraftSchedule                            *connect_go.Client[wfm.ResetDraftScheduleReq, wfm.ResetDraftScheduleRes]
	getDraftSchedule                              *connect_go.Client[wfm.GetDraftScheduleReq, wfm.GetDraftScheduleRes]
	listDraftSchedules                            *connect_go.Client[wfm.ListDraftSchedulesReq, wfm.ListDraftSchedulesRes]
	clearSchedule                                 *connect_go.Client[wfm.ClearScheduleReq, wfm.ClearScheduleRes]
	deleteDraftSchedule                           *connect_go.Client[wfm.DeleteDraftScheduleReq, wfm.DeleteDraftScheduleRes]
	listShiftInstancesBySid                       *connect_go.Client[wfm.ListShiftInstancesBySidReq, wfm.ListShiftInstancesBySidRes]
	copyScheduleToSchedule                        *connect_go.Client[wfm.CopyScheduleToScheduleReq, wfm.CopyScheduleToScheduleRes]
	createShiftInstance                           *connect_go.Client[wfm.CreateShiftInstanceReq, wfm.CreateShiftInstanceRes]
	createShiftInstanceV2                         *connect_go.Client[wfm.CreateShiftInstanceV2Req, wfm.CreateShiftInstanceV2Res]
	swapShiftInstances                            *connect_go.Client[wfm.SwapShiftInstancesReq, wfm.SwapShiftInstancesRes]
	updateShiftInstance                           *connect_go.Client[wfm.UpdateShiftInstanceReq, wfm.UpdateShiftInstanceRes]
	updateShiftInstanceV2                         *connect_go.Client[wfm.UpdateShiftInstanceV2Req, wfm.UpdateShiftInstanceV2Res]
	copyShiftInstancesToSchedule                  *connect_go.Client[wfm.CopyShiftInstancesToScheduleReq, wfm.CopyShiftInstancesToScheduleRes]
	listShiftInstanceSidsForAgent                 *connect_go.Client[wfm.ListShiftInstanceSidsForAgentReq, wfm.ListShiftInstanceSidsForAgentRes]
	listShiftSegmentsByShiftInstanceSids          *connect_go.Client[wfm.ListShiftSegmentsByShiftInstanceSidsReq, wfm.ListShiftSegmentsByShiftInstanceSidsRes]
	setSchedulingTarget                           *connect_go.Client[wfm.SetSchedulingTargetReq, wfm.SetSchedulingTargetRes]
	getSchedulingTarget                           *connect_go.Client[wfm.GetSchedulingTargetReq, wfm.GetSchedulingTargetRes]
	deleteSchedulingTarget                        *connect_go.Client[wfm.DeleteSchedulingTargetReq, wfm.DeleteSchedulingTargetRes]
	getPerformanceMetrics                         *connect_go.Client[wfm.GetPerformanceMetricsReq, wfm.GetPerformanceMetricsRes]
	listRequiredCallsIntervals                    *connect_go.Client[wfm.ListRequiredCallsIntervalsReq, wfm.ListRequiredCallsIntervalsRes]
}

// ListSkillProfiles calls api.v1alpha1.wfm.WFM.ListSkillProfiles.
func (c *wFMClient) ListSkillProfiles(ctx context.Context, req *connect_go.Request[wfm.ListSkillProfilesReq]) (*connect_go.Response[wfm.ListSkillProfilesRes], error) {
	return c.listSkillProfiles.CallUnary(ctx, req)
}

// UpdateSkillProfile calls api.v1alpha1.wfm.WFM.UpdateSkillProfile.
func (c *wFMClient) UpdateSkillProfile(ctx context.Context, req *connect_go.Request[wfm.UpdateSkillProfileReq]) (*connect_go.Response[wfm.UpdateSkillProfileRes], error) {
	return c.updateSkillProfile.CallUnary(ctx, req)
}

// UpdateSkillProfileProficiencies calls api.v1alpha1.wfm.WFM.UpdateSkillProfileProficiencies.
func (c *wFMClient) UpdateSkillProfileProficiencies(ctx context.Context, req *connect_go.Request[wfm.UpdateSkillProfileProficienciesReq]) (*connect_go.Response[wfm.UpdateSkillProfileProficienciesRes], error) {
	return c.updateSkillProfileProficiencies.CallUnary(ctx, req)
}

// GetSkillProfile calls api.v1alpha1.wfm.WFM.GetSkillProfile.
func (c *wFMClient) GetSkillProfile(ctx context.Context, req *connect_go.Request[wfm.GetSkillProfileReq]) (*connect_go.Response[wfm.GetSkillProfileRes], error) {
	return c.getSkillProfile.CallUnary(ctx, req)
}

// ResyncSkillProfiles calls api.v1alpha1.wfm.WFM.ResyncSkillProfiles.
func (c *wFMClient) ResyncSkillProfiles(ctx context.Context, req *connect_go.Request[wfm.ResyncSkillProfilesReq]) (*connect_go.Response[wfm.ResyncSkillProfilesRes], error) {
	return c.resyncSkillProfiles.CallUnary(ctx, req)
}

// GetLastSkillProfileResyncDate calls api.v1alpha1.wfm.WFM.GetLastSkillProfileResyncDate.
func (c *wFMClient) GetLastSkillProfileResyncDate(ctx context.Context, req *connect_go.Request[wfm.GetLastSkillProfileResyncDateReq]) (*connect_go.Response[wfm.GetLastSkillProfileResyncDateRes], error) {
	return c.getLastSkillProfileResyncDate.CallUnary(ctx, req)
}

// UpsertForecastingParameters calls api.v1alpha1.wfm.WFM.UpsertForecastingParameters.
func (c *wFMClient) UpsertForecastingParameters(ctx context.Context, req *connect_go.Request[wfm.UpsertForecastingParametersReq]) (*connect_go.Response[wfm.UpsertForecastingParametersRes], error) {
	return c.upsertForecastingParameters.CallUnary(ctx, req)
}

// GetForecastingParameters calls api.v1alpha1.wfm.WFM.GetForecastingParameters.
func (c *wFMClient) GetForecastingParameters(ctx context.Context, req *connect_go.Request[wfm.GetForecastingParametersReq]) (*connect_go.Response[wfm.GetForecastingParametersRes], error) {
	return c.getForecastingParameters.CallUnary(ctx, req)
}

// ListHistoricalData calls api.v1alpha1.wfm.WFM.ListHistoricalData.
func (c *wFMClient) ListHistoricalData(ctx context.Context, req *connect_go.Request[wfm.ListHistoricalDataReq]) (*connect_go.Response[wfm.ListHistoricalDataRes], error) {
	return c.listHistoricalData.CallUnary(ctx, req)
}

// UpsertHistoricalDataDelta calls api.v1alpha1.wfm.WFM.UpsertHistoricalDataDelta.
func (c *wFMClient) UpsertHistoricalDataDelta(ctx context.Context, req *connect_go.Request[wfm.UpsertHistoricalDataDeltaReq]) (*connect_go.Response[wfm.UpsertHistoricalDataDeltaRes], error) {
	return c.upsertHistoricalDataDelta.CallUnary(ctx, req)
}

// UpsertHistoricalDataDeltas calls api.v1alpha1.wfm.WFM.UpsertHistoricalDataDeltas.
func (c *wFMClient) UpsertHistoricalDataDeltas(ctx context.Context, req *connect_go.Request[wfm.UpsertHistoricalDataDeltasReq]) (*connect_go.Response[wfm.UpsertHistoricalDataDeltasRes], error) {
	return c.upsertHistoricalDataDeltas.CallUnary(ctx, req)
}

// ListSkills calls api.v1alpha1.wfm.WFM.ListSkills.
func (c *wFMClient) ListSkills(ctx context.Context, req *connect_go.Request[wfm.ListSkillsReq]) (*connect_go.Response[wfm.ListSkillsRes], error) {
	return c.listSkills.CallUnary(ctx, req)
}

// BuildCallProfileTemplateForSkillProfile calls
// api.v1alpha1.wfm.WFM.BuildCallProfileTemplateForSkillProfile.
func (c *wFMClient) BuildCallProfileTemplateForSkillProfile(ctx context.Context, req *connect_go.Request[wfm.BuildCallProfileTemplateForSkillProfileReq]) (*connect_go.Response[wfm.BuildCallProfileTemplateForSkillProfileRes], error) {
	return c.buildCallProfileTemplateForSkillProfile.CallUnary(ctx, req)
}

// CreateInactiveSkillProfileMapping calls api.v1alpha1.wfm.WFM.CreateInactiveSkillProfileMapping.
func (c *wFMClient) CreateInactiveSkillProfileMapping(ctx context.Context, req *connect_go.Request[wfm.CreateInactiveSkillProfileMappingReq]) (*connect_go.Response[wfm.CreateInactiveSkillProfileMappingRes], error) {
	return c.createInactiveSkillProfileMapping.CallUnary(ctx, req)
}

// GetAvailableRegressionForecasterModelTypes calls
// api.v1alpha1.wfm.WFM.GetAvailableRegressionForecasterModelTypes.
func (c *wFMClient) GetAvailableRegressionForecasterModelTypes(ctx context.Context, req *connect_go.Request[wfm.GetAvailableRegressionForecasterModelTypesReq]) (*connect_go.Response[wfm.GetAvailableRegressionForecasterModelTypesRes], error) {
	return c.getAvailableRegressionForecasterModelTypes.CallUnary(ctx, req)
}

// DisconnectInactiveSkillProfileMapping calls
// api.v1alpha1.wfm.WFM.DisconnectInactiveSkillProfileMapping.
func (c *wFMClient) DisconnectInactiveSkillProfileMapping(ctx context.Context, req *connect_go.Request[wfm.DisconnectInactiveSkillProfileMappingReq]) (*connect_go.Response[wfm.DisconnectInactiveSkillProfileMappingRes], error) {
	return c.disconnectInactiveSkillProfileMapping.CallUnary(ctx, req)
}

// DeleteHistoricalDataDeltas calls api.v1alpha1.wfm.WFM.DeleteHistoricalDataDeltas.
func (c *wFMClient) DeleteHistoricalDataDeltas(ctx context.Context, req *connect_go.Request[wfm.DeleteHistoricalDataDeltasReq]) (*connect_go.Response[wfm.DeleteHistoricalDataDeltasRes], error) {
	return c.deleteHistoricalDataDeltas.CallUnary(ctx, req)
}

// ListTopSkillProfiles calls api.v1alpha1.wfm.WFM.ListTopSkillProfiles.
func (c *wFMClient) ListTopSkillProfiles(ctx context.Context, req *connect_go.Request[wfm.ListTopSkillProfilesReq]) (*connect_go.Response[wfm.ListTopSkillProfilesRes], error) {
	return c.listTopSkillProfiles.CallUnary(ctx, req)
}

// GetSkillProfilesCount calls api.v1alpha1.wfm.WFM.GetSkillProfilesCount.
func (c *wFMClient) GetSkillProfilesCount(ctx context.Context, req *connect_go.Request[wfm.GetSkillProfilesCountReq]) (*connect_go.Response[wfm.GetSkillProfilesCountRes], error) {
	return c.getSkillProfilesCount.CallUnary(ctx, req)
}

// BuildProfileForecastByInterval calls api.v1alpha1.wfm.WFM.BuildProfileForecastByInterval.
func (c *wFMClient) BuildProfileForecastByInterval(ctx context.Context, req *connect_go.Request[wfm.BuildProfileForecastByIntervalReq]) (*connect_go.ServerStreamForClient[wfm.CallDataByInterval], error) {
	return c.buildProfileForecastByInterval.CallServerStream(ctx, req)
}

// BuildProfileForecastByIntervalWithStats calls
// api.v1alpha1.wfm.WFM.BuildProfileForecastByIntervalWithStats.
func (c *wFMClient) BuildProfileForecastByIntervalWithStats(ctx context.Context, req *connect_go.Request[wfm.BuildProfileForecastByIntervalWithStatsReq]) (*connect_go.ServerStreamForClient[wfm.BuildProfileForecastByIntervalWithStatsRes], error) {
	return c.buildProfileForecastByIntervalWithStats.CallServerStream(ctx, req)
}

// UpsertProfileForecast calls api.v1alpha1.wfm.WFM.UpsertProfileForecast.
func (c *wFMClient) UpsertProfileForecast(ctx context.Context, req *connect_go.Request[wfm.UpsertProfileForecastReq]) (*connect_go.Response[wfm.UpsertProfileForecastRes], error) {
	return c.upsertProfileForecast.CallUnary(ctx, req)
}

// CreateCallProfileTemplate calls api.v1alpha1.wfm.WFM.CreateCallProfileTemplate.
func (c *wFMClient) CreateCallProfileTemplate(ctx context.Context, req *connect_go.Request[wfm.CreateCallProfileTemplateReq]) (*connect_go.Response[wfm.CreateCallProfileTemplateRes], error) {
	return c.createCallProfileTemplate.CallUnary(ctx, req)
}

// DeleteCallProfileTemplate calls api.v1alpha1.wfm.WFM.DeleteCallProfileTemplate.
func (c *wFMClient) DeleteCallProfileTemplate(ctx context.Context, req *connect_go.Request[wfm.DeleteCallProfileTemplateReq]) (*connect_go.Response[wfm.DeleteCallProfileTemplateRes], error) {
	return c.deleteCallProfileTemplate.CallUnary(ctx, req)
}

// CreateRegressionTemplate calls api.v1alpha1.wfm.WFM.CreateRegressionTemplate.
func (c *wFMClient) CreateRegressionTemplate(ctx context.Context, req *connect_go.Request[wfm.CreateRegressionTemplateReq]) (*connect_go.Response[wfm.CreateRegressionTemplateRes], error) {
	return c.createRegressionTemplate.CallUnary(ctx, req)
}

// DeleteRegressionTemplate calls api.v1alpha1.wfm.WFM.DeleteRegressionTemplate.
func (c *wFMClient) DeleteRegressionTemplate(ctx context.Context, req *connect_go.Request[wfm.DeleteRegressionTemplateReq]) (*connect_go.Response[wfm.DeleteRegressionTemplateRes], error) {
	return c.deleteRegressionTemplate.CallUnary(ctx, req)
}

// ListRegressionTemplates calls api.v1alpha1.wfm.WFM.ListRegressionTemplates.
func (c *wFMClient) ListRegressionTemplates(ctx context.Context, req *connect_go.Request[wfm.ListRegressionTemplatesReq]) (*connect_go.Response[wfm.ListRegressionTemplatesRes], error) {
	return c.listRegressionTemplates.CallUnary(ctx, req)
}

// ListForecastIntervalsForSkillProfile calls
// api.v1alpha1.wfm.WFM.ListForecastIntervalsForSkillProfile.
func (c *wFMClient) ListForecastIntervalsForSkillProfile(ctx context.Context, req *connect_go.Request[wfm.ListForecastIntervalsForSkillProfileReq]) (*connect_go.ServerStreamForClient[wfm.CallDataByInterval], error) {
	return c.listForecastIntervalsForSkillProfile.CallServerStream(ctx, req)
}

// BuildRegressionForecastByInterval calls api.v1alpha1.wfm.WFM.BuildRegressionForecastByInterval.
func (c *wFMClient) BuildRegressionForecastByInterval(ctx context.Context, req *connect_go.Request[wfm.BuildRegressionForecastByIntervalReq]) (*connect_go.ServerStreamForClient[wfm.CallDataByInterval], error) {
	return c.buildRegressionForecastByInterval.CallServerStream(ctx, req)
}

// BuildRegressionForecastByIntervalWithStats calls
// api.v1alpha1.wfm.WFM.BuildRegressionForecastByIntervalWithStats.
func (c *wFMClient) BuildRegressionForecastByIntervalWithStats(ctx context.Context, req *connect_go.Request[wfm.BuildRegressionForecastByIntervalWithStatsReq]) (*connect_go.ServerStreamForClient[wfm.BuildRegressionForecastByIntervalWithStatsRes], error) {
	return c.buildRegressionForecastByIntervalWithStats.CallServerStream(ctx, req)
}

// ListCallProfileTemplates calls api.v1alpha1.wfm.WFM.ListCallProfileTemplates.
func (c *wFMClient) ListCallProfileTemplates(ctx context.Context, req *connect_go.Request[wfm.ListCallProfileTemplatesReq]) (*connect_go.Response[wfm.ListCallProfileTemplatesRes], error) {
	return c.listCallProfileTemplates.CallUnary(ctx, req)
}

// UpsertRegressionForecast calls api.v1alpha1.wfm.WFM.UpsertRegressionForecast.
func (c *wFMClient) UpsertRegressionForecast(ctx context.Context, req *connect_go.Request[wfm.UpsertRegressionForecastReq]) (*connect_go.Response[wfm.UpsertRegressionForecastRes], error) {
	return c.upsertRegressionForecast.CallUnary(ctx, req)
}

// UpsertForecastDataDelta calls api.v1alpha1.wfm.WFM.UpsertForecastDataDelta.
func (c *wFMClient) UpsertForecastDataDelta(ctx context.Context, req *connect_go.Request[wfm.UpsertForecastDataDeltaReq]) (*connect_go.Response[wfm.UpsertForecastDataDeltaRes], error) {
	return c.upsertForecastDataDelta.CallUnary(ctx, req)
}

// UpsertForecastDataDeltas calls api.v1alpha1.wfm.WFM.UpsertForecastDataDeltas.
func (c *wFMClient) UpsertForecastDataDeltas(ctx context.Context, req *connect_go.Request[wfm.UpsertForecastDataDeltasReq]) (*connect_go.Response[wfm.UpsertForecastDataDeltasRes], error) {
	return c.upsertForecastDataDeltas.CallUnary(ctx, req)
}

// DeleteForecastIntervals calls api.v1alpha1.wfm.WFM.DeleteForecastIntervals.
func (c *wFMClient) DeleteForecastIntervals(ctx context.Context, req *connect_go.Request[wfm.DeleteForecastIntervalsReq]) (*connect_go.Response[wfm.DeleteForecastIntervalsRes], error) {
	return c.deleteForecastIntervals.CallUnary(ctx, req)
}

// ListHistoricalDataForAllSkillProfiles calls
// api.v1alpha1.wfm.WFM.ListHistoricalDataForAllSkillProfiles.
func (c *wFMClient) ListHistoricalDataForAllSkillProfiles(ctx context.Context, req *connect_go.Request[wfm.ListHistoricalDataForAllSkillProfilesReq]) (*connect_go.Response[wfm.ListHistoricalDataForAllSkillProfilesRes], error) {
	return c.listHistoricalDataForAllSkillProfiles.CallUnary(ctx, req)
}

// BuildDOWAndMOYProfiles calls api.v1alpha1.wfm.WFM.BuildDOWAndMOYProfiles.
func (c *wFMClient) BuildDOWAndMOYProfiles(ctx context.Context, req *connect_go.Request[wfm.BuildDOWAndMOYProfilesReq]) (*connect_go.Response[wfm.BuildDOWAndMOYProfilesRes], error) {
	return c.buildDOWAndMOYProfiles.CallUnary(ctx, req)
}

// CalculateTrainingDataAveragesForSkillProfile calls
// api.v1alpha1.wfm.WFM.CalculateTrainingDataAveragesForSkillProfile.
func (c *wFMClient) CalculateTrainingDataAveragesForSkillProfile(ctx context.Context, req *connect_go.Request[wfm.CalculateTrainingDataAveragesForSkillProfileReq]) (*connect_go.Response[wfm.CalculateTrainingDataAveragesForSkillProfileRes], error) {
	return c.calculateTrainingDataAveragesForSkillProfile.CallUnary(ctx, req)
}

// UpdateSkillProfileAveragesUsingHistoricalData calls
// api.v1alpha1.wfm.WFM.UpdateSkillProfileAveragesUsingHistoricalData.
func (c *wFMClient) UpdateSkillProfileAveragesUsingHistoricalData(ctx context.Context, req *connect_go.Request[wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq]) (*connect_go.Response[wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes], error) {
	return c.updateSkillProfileAveragesUsingHistoricalData.CallUnary(ctx, req)
}

// UpdateCallCenterNode calls api.v1alpha1.wfm.WFM.UpdateCallCenterNode.
func (c *wFMClient) UpdateCallCenterNode(ctx context.Context, req *connect_go.Request[wfm.UpdateCallCenterNodeReq]) (*connect_go.Response[wfm.UpdateCallCenterNodeRes], error) {
	return c.updateCallCenterNode.CallUnary(ctx, req)
}

// CreateClientNode calls api.v1alpha1.wfm.WFM.CreateClientNode.
func (c *wFMClient) CreateClientNode(ctx context.Context, req *connect_go.Request[wfm.CreateClientNodeReq]) (*connect_go.Response[wfm.CreateClientNodeRes], error) {
	return c.createClientNode.CallUnary(ctx, req)
}

// UpdateClientNode calls api.v1alpha1.wfm.WFM.UpdateClientNode.
func (c *wFMClient) UpdateClientNode(ctx context.Context, req *connect_go.Request[wfm.UpdateClientNodeReq]) (*connect_go.Response[wfm.UpdateClientNodeRes], error) {
	return c.updateClientNode.CallUnary(ctx, req)
}

// CreateLocationNode calls api.v1alpha1.wfm.WFM.CreateLocationNode.
func (c *wFMClient) CreateLocationNode(ctx context.Context, req *connect_go.Request[wfm.CreateLocationNodeReq]) (*connect_go.Response[wfm.CreateLocationNodeRes], error) {
	return c.createLocationNode.CallUnary(ctx, req)
}

// UpdateLocationNode calls api.v1alpha1.wfm.WFM.UpdateLocationNode.
func (c *wFMClient) UpdateLocationNode(ctx context.Context, req *connect_go.Request[wfm.UpdateLocationNodeReq]) (*connect_go.Response[wfm.UpdateLocationNodeRes], error) {
	return c.updateLocationNode.CallUnary(ctx, req)
}

// CreateProgramNode calls api.v1alpha1.wfm.WFM.CreateProgramNode.
func (c *wFMClient) CreateProgramNode(ctx context.Context, req *connect_go.Request[wfm.CreateProgramNodeReq]) (*connect_go.Response[wfm.CreateProgramNodeRes], error) {
	return c.createProgramNode.CallUnary(ctx, req)
}

// UpdateProgramNode calls api.v1alpha1.wfm.WFM.UpdateProgramNode.
func (c *wFMClient) UpdateProgramNode(ctx context.Context, req *connect_go.Request[wfm.UpdateProgramNodeReq]) (*connect_go.Response[wfm.UpdateProgramNodeRes], error) {
	return c.updateProgramNode.CallUnary(ctx, req)
}

// CreateConstraintRule calls api.v1alpha1.wfm.WFM.CreateConstraintRule.
func (c *wFMClient) CreateConstraintRule(ctx context.Context, req *connect_go.Request[wfm.CreateConstraintRuleReq]) (*connect_go.Response[wfm.CreateConstraintRuleRes], error) {
	return c.createConstraintRule.CallUnary(ctx, req)
}

// UpdateConstraintRule calls api.v1alpha1.wfm.WFM.UpdateConstraintRule.
func (c *wFMClient) UpdateConstraintRule(ctx context.Context, req *connect_go.Request[wfm.UpdateConstraintRuleReq]) (*connect_go.Response[wfm.UpdateConstraintRuleRes], error) {
	return c.updateConstraintRule.CallUnary(ctx, req)
}

// DeleteConstraintRule calls api.v1alpha1.wfm.WFM.DeleteConstraintRule.
func (c *wFMClient) DeleteConstraintRule(ctx context.Context, req *connect_go.Request[wfm.DeleteConstraintRuleReq]) (*connect_go.Response[wfm.DeleteConstraintRuleRes], error) {
	return c.deleteConstraintRule.CallUnary(ctx, req)
}

// CreateNonSkillActivity calls api.v1alpha1.wfm.WFM.CreateNonSkillActivity.
func (c *wFMClient) CreateNonSkillActivity(ctx context.Context, req *connect_go.Request[wfm.CreateNonSkillActivityReq]) (*connect_go.Response[wfm.CreateNonSkillActivityRes], error) {
	return c.createNonSkillActivity.CallUnary(ctx, req)
}

// UpdateNonSkillActivity calls api.v1alpha1.wfm.WFM.UpdateNonSkillActivity.
func (c *wFMClient) UpdateNonSkillActivity(ctx context.Context, req *connect_go.Request[wfm.UpdateNonSkillActivityReq]) (*connect_go.Response[wfm.UpdateNonSkillActivityRes], error) {
	return c.updateNonSkillActivity.CallUnary(ctx, req)
}

// ListNonSkillActivities calls api.v1alpha1.wfm.WFM.ListNonSkillActivities.
func (c *wFMClient) ListNonSkillActivities(ctx context.Context, req *connect_go.Request[wfm.ListNonSkillActivitiesReq]) (*connect_go.Response[wfm.ListNonSkillActivitiesRes], error) {
	return c.listNonSkillActivities.CallUnary(ctx, req)
}

// ListNonSkillActivityAssociations calls api.v1alpha1.wfm.WFM.ListNonSkillActivityAssociations.
func (c *wFMClient) ListNonSkillActivityAssociations(ctx context.Context, req *connect_go.Request[wfm.ListNonSkillActivityAssociationsReq]) (*connect_go.Response[wfm.ListNonSkillActivityAssociationsRes], error) {
	return c.listNonSkillActivityAssociations.CallUnary(ctx, req)
}

// ListCandidateSchedulingActivities calls api.v1alpha1.wfm.WFM.ListCandidateSchedulingActivities.
func (c *wFMClient) ListCandidateSchedulingActivities(ctx context.Context, req *connect_go.Request[wfm.ListCandidateSchedulingActivitiesReq]) (*connect_go.Response[wfm.ListCandidateSchedulingActivitiesRes], error) {
	return c.listCandidateSchedulingActivities.CallUnary(ctx, req)
}

// CreateAgentGroup calls api.v1alpha1.wfm.WFM.CreateAgentGroup.
func (c *wFMClient) CreateAgentGroup(ctx context.Context, req *connect_go.Request[wfm.CreateAgentGroupReq]) (*connect_go.Response[wfm.CreateAgentGroupRes], error) {
	return c.createAgentGroup.CallUnary(ctx, req)
}

// UpdateAgentGroup calls api.v1alpha1.wfm.WFM.UpdateAgentGroup.
func (c *wFMClient) UpdateAgentGroup(ctx context.Context, req *connect_go.Request[wfm.UpdateAgentGroupReq]) (*connect_go.Response[wfm.UpdateAgentGroupRes], error) {
	return c.updateAgentGroup.CallUnary(ctx, req)
}

// UpdateWFMAgent calls api.v1alpha1.wfm.WFM.UpdateWFMAgent.
func (c *wFMClient) UpdateWFMAgent(ctx context.Context, req *connect_go.Request[wfm.UpdateWFMAgentReq]) (*connect_go.Response[wfm.UpdateWFMAgentRes], error) {
	return c.updateWFMAgent.CallUnary(ctx, req)
}

// ListAllWFMAgents calls api.v1alpha1.wfm.WFM.ListAllWFMAgents.
func (c *wFMClient) ListAllWFMAgents(ctx context.Context, req *connect_go.Request[wfm.ListAllWFMAgentsReq]) (*connect_go.Response[wfm.ListAllWFMAgentsRes], error) {
	return c.listAllWFMAgents.CallUnary(ctx, req)
}

// ListCandidateWFMAgents calls api.v1alpha1.wfm.WFM.ListCandidateWFMAgents.
func (c *wFMClient) ListCandidateWFMAgents(ctx context.Context, req *connect_go.Request[wfm.ListCandidateWFMAgentsReq]) (*connect_go.Response[wfm.ListCandidateWFMAgentsRes], error) {
	return c.listCandidateWFMAgents.CallUnary(ctx, req)
}

// ListUngroupedWFMAgents calls api.v1alpha1.wfm.WFM.ListUngroupedWFMAgents.
func (c *wFMClient) ListUngroupedWFMAgents(ctx context.Context, req *connect_go.Request[wfm.ListUngroupedWFMAgentsReq]) (*connect_go.Response[wfm.ListUngroupedWFMAgentsRes], error) {
	return c.listUngroupedWFMAgents.CallUnary(ctx, req)
}

// ListWFMAgentsAssociatedWithAgentGroup calls
// api.v1alpha1.wfm.WFM.ListWFMAgentsAssociatedWithAgentGroup.
func (c *wFMClient) ListWFMAgentsAssociatedWithAgentGroup(ctx context.Context, req *connect_go.Request[wfm.ListWFMAgentsAssociatedWithAgentGroupReq]) (*connect_go.Response[wfm.ListWFMAgentsAssociatedWithAgentGroupRes], error) {
	return c.listWFMAgentsAssociatedWithAgentGroup.CallUnary(ctx, req)
}

// CreateWFMAgentMemberships calls api.v1alpha1.wfm.WFM.CreateWFMAgentMemberships.
func (c *wFMClient) CreateWFMAgentMemberships(ctx context.Context, req *connect_go.Request[wfm.CreateWFMAgentMembershipsReq]) (*connect_go.Response[wfm.CreateWFMAgentMembershipsRes], error) {
	return c.createWFMAgentMemberships.CallUnary(ctx, req)
}

// DeleteWFMAgentMemberships calls api.v1alpha1.wfm.WFM.DeleteWFMAgentMemberships.
func (c *wFMClient) DeleteWFMAgentMemberships(ctx context.Context, req *connect_go.Request[wfm.DeleteWFMAgentMembershipsReq]) (*connect_go.Response[wfm.DeleteWFMAgentMembershipsRes], error) {
	return c.deleteWFMAgentMemberships.CallUnary(ctx, req)
}

// DeleteWFMAgentsMemberships calls api.v1alpha1.wfm.WFM.DeleteWFMAgentsMemberships.
func (c *wFMClient) DeleteWFMAgentsMemberships(ctx context.Context, req *connect_go.Request[wfm.DeleteWFMAgentsMembershipsReq]) (*connect_go.Response[wfm.DeleteWFMAgentsMembershipsRes], error) {
	return c.deleteWFMAgentsMemberships.CallUnary(ctx, req)
}

// BuildAgentDiagnostics calls api.v1alpha1.wfm.WFM.BuildAgentDiagnostics.
func (c *wFMClient) BuildAgentDiagnostics(ctx context.Context, req *connect_go.Request[wfm.BuildAgentDiagnosticsReq]) (*connect_go.Response[wfm.BuildAgentDiagnosticsRes], error) {
	return c.buildAgentDiagnostics.CallUnary(ctx, req)
}

// CreateShiftTemplate calls api.v1alpha1.wfm.WFM.CreateShiftTemplate.
func (c *wFMClient) CreateShiftTemplate(ctx context.Context, req *connect_go.Request[wfm.CreateShiftTemplateReq]) (*connect_go.Response[wfm.CreateShiftTemplateRes], error) {
	return c.createShiftTemplate.CallUnary(ctx, req)
}

// UpdateShiftTemplate calls api.v1alpha1.wfm.WFM.UpdateShiftTemplate.
func (c *wFMClient) UpdateShiftTemplate(ctx context.Context, req *connect_go.Request[wfm.UpdateShiftTemplateReq]) (*connect_go.Response[wfm.UpdateShiftTemplateRes], error) {
	return c.updateShiftTemplate.CallUnary(ctx, req)
}

// ListShiftTemplatesBySids calls api.v1alpha1.wfm.WFM.ListShiftTemplatesBySids.
func (c *wFMClient) ListShiftTemplatesBySids(ctx context.Context, req *connect_go.Request[wfm.ListShiftTemplatesBySidsReq]) (*connect_go.Response[wfm.ListShiftTemplatesBySidsRes], error) {
	return c.listShiftTemplatesBySids.CallUnary(ctx, req)
}

// BuildShiftTemplateDiagnostics calls api.v1alpha1.wfm.WFM.BuildShiftTemplateDiagnostics.
func (c *wFMClient) BuildShiftTemplateDiagnostics(ctx context.Context, req *connect_go.Request[wfm.BuildShiftTemplateDiagnosticsReq]) (*connect_go.Response[wfm.BuildShiftTemplateDiagnosticsRes], error) {
	return c.buildShiftTemplateDiagnostics.CallUnary(ctx, req)
}

// CreatePlacementRule calls api.v1alpha1.wfm.WFM.CreatePlacementRule.
func (c *wFMClient) CreatePlacementRule(ctx context.Context, req *connect_go.Request[wfm.CreatePlacementRuleReq]) (*connect_go.Response[wfm.CreatePlacementRuleRes], error) {
	return c.createPlacementRule.CallUnary(ctx, req)
}

// UpdatePlacementRule calls api.v1alpha1.wfm.WFM.UpdatePlacementRule.
func (c *wFMClient) UpdatePlacementRule(ctx context.Context, req *connect_go.Request[wfm.UpdatePlacementRuleReq]) (*connect_go.Response[wfm.UpdatePlacementRuleRes], error) {
	return c.updatePlacementRule.CallUnary(ctx, req)
}

// DeletePlacementRule calls api.v1alpha1.wfm.WFM.DeletePlacementRule.
func (c *wFMClient) DeletePlacementRule(ctx context.Context, req *connect_go.Request[wfm.DeletePlacementRuleReq]) (*connect_go.Response[wfm.DeletePlacementRuleRes], error) {
	return c.deletePlacementRule.CallUnary(ctx, req)
}

// CreateOpenTimesPattern calls api.v1alpha1.wfm.WFM.CreateOpenTimesPattern.
func (c *wFMClient) CreateOpenTimesPattern(ctx context.Context, req *connect_go.Request[wfm.CreateOpenTimesPatternReq]) (*connect_go.Response[wfm.CreateOpenTimesPatternRes], error) {
	return c.createOpenTimesPattern.CallUnary(ctx, req)
}

// UpdateOpenTimesPattern calls api.v1alpha1.wfm.WFM.UpdateOpenTimesPattern.
func (c *wFMClient) UpdateOpenTimesPattern(ctx context.Context, req *connect_go.Request[wfm.UpdateOpenTimesPatternReq]) (*connect_go.Response[wfm.UpdateOpenTimesPatternRes], error) {
	return c.updateOpenTimesPattern.CallUnary(ctx, req)
}

// DeleteOpenTimesPattern calls api.v1alpha1.wfm.WFM.DeleteOpenTimesPattern.
func (c *wFMClient) DeleteOpenTimesPattern(ctx context.Context, req *connect_go.Request[wfm.DeleteOpenTimesPatternReq]) (*connect_go.Response[wfm.DeleteOpenTimesPatternRes], error) {
	return c.deleteOpenTimesPattern.CallUnary(ctx, req)
}

// GetOpenTimesBitmaps calls api.v1alpha1.wfm.WFM.GetOpenTimesBitmaps.
func (c *wFMClient) GetOpenTimesBitmaps(ctx context.Context, req *connect_go.Request[wfm.GetOpenTimesBitmapsReq]) (*connect_go.Response[wfm.GetOpenTimesBitmapsRes], error) {
	return c.getOpenTimesBitmaps.CallUnary(ctx, req)
}

// CreateAgentAvailabilityPattern calls api.v1alpha1.wfm.WFM.CreateAgentAvailabilityPattern.
func (c *wFMClient) CreateAgentAvailabilityPattern(ctx context.Context, req *connect_go.Request[wfm.CreateAgentAvailabilityPatternReq]) (*connect_go.Response[wfm.CreateAgentAvailabilityPatternRes], error) {
	return c.createAgentAvailabilityPattern.CallUnary(ctx, req)
}

// UpdateAgentAvailabilityPattern calls api.v1alpha1.wfm.WFM.UpdateAgentAvailabilityPattern.
func (c *wFMClient) UpdateAgentAvailabilityPattern(ctx context.Context, req *connect_go.Request[wfm.UpdateAgentAvailabilityPatternReq]) (*connect_go.Response[wfm.UpdateAgentAvailabilityPatternRes], error) {
	return c.updateAgentAvailabilityPattern.CallUnary(ctx, req)
}

// DeleteAgentAvailabilityPattern calls api.v1alpha1.wfm.WFM.DeleteAgentAvailabilityPattern.
func (c *wFMClient) DeleteAgentAvailabilityPattern(ctx context.Context, req *connect_go.Request[wfm.DeleteAgentAvailabilityPatternReq]) (*connect_go.Response[wfm.DeleteAgentAvailabilityPatternRes], error) {
	return c.deleteAgentAvailabilityPattern.CallUnary(ctx, req)
}

// GetAvailabilityBitmaps calls api.v1alpha1.wfm.WFM.GetAvailabilityBitmaps.
func (c *wFMClient) GetAvailabilityBitmaps(ctx context.Context, req *connect_go.Request[wfm.GetAvailabilityBitmapsReq]) (*connect_go.Response[wfm.GetAvailabilityBitmapsRes], error) {
	return c.getAvailabilityBitmaps.CallUnary(ctx, req)
}

// UpsertNonSkillActivityAssociation calls api.v1alpha1.wfm.WFM.UpsertNonSkillActivityAssociation.
func (c *wFMClient) UpsertNonSkillActivityAssociation(ctx context.Context, req *connect_go.Request[wfm.UpsertNonSkillActivityAssociationReq]) (*connect_go.Response[wfm.UpsertNonSkillActivityAssociationRes], error) {
	return c.upsertNonSkillActivityAssociation.CallUnary(ctx, req)
}

// CreateSkillProficiencies calls api.v1alpha1.wfm.WFM.CreateSkillProficiencies.
func (c *wFMClient) CreateSkillProficiencies(ctx context.Context, req *connect_go.Request[wfm.CreateSkillProficienciesReq]) (*connect_go.Response[wfm.CreateSkillProficienciesRes], error) {
	return c.createSkillProficiencies.CallUnary(ctx, req)
}

// UpdateSkillProficiencies calls api.v1alpha1.wfm.WFM.UpdateSkillProficiencies.
func (c *wFMClient) UpdateSkillProficiencies(ctx context.Context, req *connect_go.Request[wfm.UpdateSkillProficienciesReq]) (*connect_go.Response[wfm.UpdateSkillProficienciesRes], error) {
	return c.updateSkillProficiencies.CallUnary(ctx, req)
}

// DeleteSkillProficiency calls api.v1alpha1.wfm.WFM.DeleteSkillProficiency.
func (c *wFMClient) DeleteSkillProficiency(ctx context.Context, req *connect_go.Request[wfm.DeleteSkillProficiencyReq]) (*connect_go.Response[wfm.DeleteSkillProficiencyRes], error) {
	return c.deleteSkillProficiency.CallUnary(ctx, req)
}

// CopyScenario calls api.v1alpha1.wfm.WFM.CopyScenario.
func (c *wFMClient) CopyScenario(ctx context.Context, req *connect_go.Request[wfm.CopyScenarioReq]) (*connect_go.Response[wfm.CopyScenarioRes], error) {
	return c.copyScenario.CallUnary(ctx, req)
}

// CreateScheduleScenarioWithNodes calls api.v1alpha1.wfm.WFM.CreateScheduleScenarioWithNodes.
func (c *wFMClient) CreateScheduleScenarioWithNodes(ctx context.Context, req *connect_go.Request[wfm.CreateScheduleScenarioWithNodesReq]) (*connect_go.Response[wfm.CreateScheduleScenarioWithNodesRes], error) {
	return c.createScheduleScenarioWithNodes.CallUnary(ctx, req)
}

// UpdateScheduleScenario calls api.v1alpha1.wfm.WFM.UpdateScheduleScenario.
func (c *wFMClient) UpdateScheduleScenario(ctx context.Context, req *connect_go.Request[wfm.UpdateScheduleScenarioReq]) (*connect_go.Response[wfm.UpdateScheduleScenarioRes], error) {
	return c.updateScheduleScenario.CallUnary(ctx, req)
}

// ListConfigEntities calls api.v1alpha1.wfm.WFM.ListConfigEntities.
func (c *wFMClient) ListConfigEntities(ctx context.Context, req *connect_go.Request[wfm.ListConfigEntitiesReq]) (*connect_go.Response[wfm.ListConfigEntitiesRes], error) {
	return c.listConfigEntities.CallUnary(ctx, req)
}

// DeleteShiftInstances calls api.v1alpha1.wfm.WFM.DeleteShiftInstances.
func (c *wFMClient) DeleteShiftInstances(ctx context.Context, req *connect_go.Request[wfm.DeleteShiftInstancesReq]) (*connect_go.Response[wfm.DeleteShiftInstancesRes], error) {
	return c.deleteShiftInstances.CallUnary(ctx, req)
}

// BuildNodeDiagnostics calls api.v1alpha1.wfm.WFM.BuildNodeDiagnostics.
func (c *wFMClient) BuildNodeDiagnostics(ctx context.Context, req *connect_go.Request[wfm.BuildNodeDiagnosticsReq]) (*connect_go.Response[wfm.BuildNodeDiagnosticsRes], error) {
	return c.buildNodeDiagnostics.CallUnary(ctx, req)
}

// BuildGlobalDiagnostics calls api.v1alpha1.wfm.WFM.BuildGlobalDiagnostics.
func (c *wFMClient) BuildGlobalDiagnostics(ctx context.Context, req *connect_go.Request[wfm.BuildGlobalDiagnosticsReq]) (*connect_go.Response[wfm.BuildGlobalDiagnosticsRes], error) {
	return c.buildGlobalDiagnostics.CallUnary(ctx, req)
}

// GetPublishedSchedule calls api.v1alpha1.wfm.WFM.GetPublishedSchedule.
func (c *wFMClient) GetPublishedSchedule(ctx context.Context, req *connect_go.Request[wfm.GetPublishedScheduleReq]) (*connect_go.Response[wfm.GetPublishedScheduleRes], error) {
	return c.getPublishedSchedule.CallUnary(ctx, req)
}

// GetPublishedScheduleRequiredCalls calls api.v1alpha1.wfm.WFM.GetPublishedScheduleRequiredCalls.
func (c *wFMClient) GetPublishedScheduleRequiredCalls(ctx context.Context, req *connect_go.Request[wfm.GetPublishedScheduleRequiredCallsReq]) (*connect_go.Response[wfm.GetPublishedScheduleRequiredCallsRes], error) {
	return c.getPublishedScheduleRequiredCalls.CallUnary(ctx, req)
}

// GetDraftScheduleRequiredCalls calls api.v1alpha1.wfm.WFM.GetDraftScheduleRequiredCalls.
func (c *wFMClient) GetDraftScheduleRequiredCalls(ctx context.Context, req *connect_go.Request[wfm.GetDraftScheduleRequiredCallsReq]) (*connect_go.Response[wfm.GetDraftScheduleRequiredCallsRes], error) {
	return c.getDraftScheduleRequiredCalls.CallUnary(ctx, req)
}

// CreateDraftSchedule calls api.v1alpha1.wfm.WFM.CreateDraftSchedule.
func (c *wFMClient) CreateDraftSchedule(ctx context.Context, req *connect_go.Request[wfm.CreateDraftScheduleReq]) (*connect_go.Response[wfm.CreateDraftScheduleRes], error) {
	return c.createDraftSchedule.CallUnary(ctx, req)
}

// UpdateDraftSchedule calls api.v1alpha1.wfm.WFM.UpdateDraftSchedule.
func (c *wFMClient) UpdateDraftSchedule(ctx context.Context, req *connect_go.Request[wfm.UpdateDraftScheduleReq]) (*connect_go.Response[wfm.UpdateDraftScheduleRes], error) {
	return c.updateDraftSchedule.CallUnary(ctx, req)
}

// BuildDraftSchedule calls api.v1alpha1.wfm.WFM.BuildDraftSchedule.
func (c *wFMClient) BuildDraftSchedule(ctx context.Context, req *connect_go.Request[wfm.BuildDraftScheduleReq]) (*connect_go.Response[wfm.BuildDraftScheduleRes], error) {
	return c.buildDraftSchedule.CallUnary(ctx, req)
}

// PublishDraftSchedule calls api.v1alpha1.wfm.WFM.PublishDraftSchedule.
func (c *wFMClient) PublishDraftSchedule(ctx context.Context, req *connect_go.Request[wfm.PublishDraftScheduleReq]) (*connect_go.Response[wfm.PublishDraftScheduleRes], error) {
	return c.publishDraftSchedule.CallUnary(ctx, req)
}

// ResetDraftSchedule calls api.v1alpha1.wfm.WFM.ResetDraftSchedule.
func (c *wFMClient) ResetDraftSchedule(ctx context.Context, req *connect_go.Request[wfm.ResetDraftScheduleReq]) (*connect_go.Response[wfm.ResetDraftScheduleRes], error) {
	return c.resetDraftSchedule.CallUnary(ctx, req)
}

// GetDraftSchedule calls api.v1alpha1.wfm.WFM.GetDraftSchedule.
func (c *wFMClient) GetDraftSchedule(ctx context.Context, req *connect_go.Request[wfm.GetDraftScheduleReq]) (*connect_go.Response[wfm.GetDraftScheduleRes], error) {
	return c.getDraftSchedule.CallUnary(ctx, req)
}

// ListDraftSchedules calls api.v1alpha1.wfm.WFM.ListDraftSchedules.
func (c *wFMClient) ListDraftSchedules(ctx context.Context, req *connect_go.Request[wfm.ListDraftSchedulesReq]) (*connect_go.Response[wfm.ListDraftSchedulesRes], error) {
	return c.listDraftSchedules.CallUnary(ctx, req)
}

// ClearSchedule calls api.v1alpha1.wfm.WFM.ClearSchedule.
func (c *wFMClient) ClearSchedule(ctx context.Context, req *connect_go.Request[wfm.ClearScheduleReq]) (*connect_go.Response[wfm.ClearScheduleRes], error) {
	return c.clearSchedule.CallUnary(ctx, req)
}

// DeleteDraftSchedule calls api.v1alpha1.wfm.WFM.DeleteDraftSchedule.
func (c *wFMClient) DeleteDraftSchedule(ctx context.Context, req *connect_go.Request[wfm.DeleteDraftScheduleReq]) (*connect_go.Response[wfm.DeleteDraftScheduleRes], error) {
	return c.deleteDraftSchedule.CallUnary(ctx, req)
}

// ListShiftInstancesBySid calls api.v1alpha1.wfm.WFM.ListShiftInstancesBySid.
func (c *wFMClient) ListShiftInstancesBySid(ctx context.Context, req *connect_go.Request[wfm.ListShiftInstancesBySidReq]) (*connect_go.Response[wfm.ListShiftInstancesBySidRes], error) {
	return c.listShiftInstancesBySid.CallUnary(ctx, req)
}

// CopyScheduleToSchedule calls api.v1alpha1.wfm.WFM.CopyScheduleToSchedule.
func (c *wFMClient) CopyScheduleToSchedule(ctx context.Context, req *connect_go.Request[wfm.CopyScheduleToScheduleReq]) (*connect_go.Response[wfm.CopyScheduleToScheduleRes], error) {
	return c.copyScheduleToSchedule.CallUnary(ctx, req)
}

// CreateShiftInstance calls api.v1alpha1.wfm.WFM.CreateShiftInstance.
func (c *wFMClient) CreateShiftInstance(ctx context.Context, req *connect_go.Request[wfm.CreateShiftInstanceReq]) (*connect_go.Response[wfm.CreateShiftInstanceRes], error) {
	return c.createShiftInstance.CallUnary(ctx, req)
}

// CreateShiftInstanceV2 calls api.v1alpha1.wfm.WFM.CreateShiftInstanceV2.
func (c *wFMClient) CreateShiftInstanceV2(ctx context.Context, req *connect_go.Request[wfm.CreateShiftInstanceV2Req]) (*connect_go.Response[wfm.CreateShiftInstanceV2Res], error) {
	return c.createShiftInstanceV2.CallUnary(ctx, req)
}

// SwapShiftInstances calls api.v1alpha1.wfm.WFM.SwapShiftInstances.
func (c *wFMClient) SwapShiftInstances(ctx context.Context, req *connect_go.Request[wfm.SwapShiftInstancesReq]) (*connect_go.Response[wfm.SwapShiftInstancesRes], error) {
	return c.swapShiftInstances.CallUnary(ctx, req)
}

// UpdateShiftInstance calls api.v1alpha1.wfm.WFM.UpdateShiftInstance.
func (c *wFMClient) UpdateShiftInstance(ctx context.Context, req *connect_go.Request[wfm.UpdateShiftInstanceReq]) (*connect_go.Response[wfm.UpdateShiftInstanceRes], error) {
	return c.updateShiftInstance.CallUnary(ctx, req)
}

// UpdateShiftInstanceV2 calls api.v1alpha1.wfm.WFM.UpdateShiftInstanceV2.
func (c *wFMClient) UpdateShiftInstanceV2(ctx context.Context, req *connect_go.Request[wfm.UpdateShiftInstanceV2Req]) (*connect_go.Response[wfm.UpdateShiftInstanceV2Res], error) {
	return c.updateShiftInstanceV2.CallUnary(ctx, req)
}

// CopyShiftInstancesToSchedule calls api.v1alpha1.wfm.WFM.CopyShiftInstancesToSchedule.
func (c *wFMClient) CopyShiftInstancesToSchedule(ctx context.Context, req *connect_go.Request[wfm.CopyShiftInstancesToScheduleReq]) (*connect_go.Response[wfm.CopyShiftInstancesToScheduleRes], error) {
	return c.copyShiftInstancesToSchedule.CallUnary(ctx, req)
}

// ListShiftInstanceSidsForAgent calls api.v1alpha1.wfm.WFM.ListShiftInstanceSidsForAgent.
func (c *wFMClient) ListShiftInstanceSidsForAgent(ctx context.Context, req *connect_go.Request[wfm.ListShiftInstanceSidsForAgentReq]) (*connect_go.Response[wfm.ListShiftInstanceSidsForAgentRes], error) {
	return c.listShiftInstanceSidsForAgent.CallUnary(ctx, req)
}

// ListShiftSegmentsByShiftInstanceSids calls
// api.v1alpha1.wfm.WFM.ListShiftSegmentsByShiftInstanceSids.
func (c *wFMClient) ListShiftSegmentsByShiftInstanceSids(ctx context.Context, req *connect_go.Request[wfm.ListShiftSegmentsByShiftInstanceSidsReq]) (*connect_go.Response[wfm.ListShiftSegmentsByShiftInstanceSidsRes], error) {
	return c.listShiftSegmentsByShiftInstanceSids.CallUnary(ctx, req)
}

// SetSchedulingTarget calls api.v1alpha1.wfm.WFM.SetSchedulingTarget.
func (c *wFMClient) SetSchedulingTarget(ctx context.Context, req *connect_go.Request[wfm.SetSchedulingTargetReq]) (*connect_go.Response[wfm.SetSchedulingTargetRes], error) {
	return c.setSchedulingTarget.CallUnary(ctx, req)
}

// GetSchedulingTarget calls api.v1alpha1.wfm.WFM.GetSchedulingTarget.
func (c *wFMClient) GetSchedulingTarget(ctx context.Context, req *connect_go.Request[wfm.GetSchedulingTargetReq]) (*connect_go.Response[wfm.GetSchedulingTargetRes], error) {
	return c.getSchedulingTarget.CallUnary(ctx, req)
}

// DeleteSchedulingTarget calls api.v1alpha1.wfm.WFM.DeleteSchedulingTarget.
func (c *wFMClient) DeleteSchedulingTarget(ctx context.Context, req *connect_go.Request[wfm.DeleteSchedulingTargetReq]) (*connect_go.Response[wfm.DeleteSchedulingTargetRes], error) {
	return c.deleteSchedulingTarget.CallUnary(ctx, req)
}

// GetPerformanceMetrics calls api.v1alpha1.wfm.WFM.GetPerformanceMetrics.
func (c *wFMClient) GetPerformanceMetrics(ctx context.Context, req *connect_go.Request[wfm.GetPerformanceMetricsReq]) (*connect_go.Response[wfm.GetPerformanceMetricsRes], error) {
	return c.getPerformanceMetrics.CallUnary(ctx, req)
}

// ListRequiredCallsIntervals calls api.v1alpha1.wfm.WFM.ListRequiredCallsIntervals.
func (c *wFMClient) ListRequiredCallsIntervals(ctx context.Context, req *connect_go.Request[wfm.ListRequiredCallsIntervalsReq]) (*connect_go.Response[wfm.ListRequiredCallsIntervalsRes], error) {
	return c.listRequiredCallsIntervals.CallUnary(ctx, req)
}

// WFMHandler is an implementation of the api.v1alpha1.wfm.WFM service.
type WFMHandler interface {
	// Retrieves all the skill profiles of the org sending the request.
	// Also it can return the skills of each of the returned profiles.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	ListSkillProfiles(context.Context, *connect_go.Request[wfm.ListSkillProfilesReq]) (*connect_go.Response[wfm.ListSkillProfilesRes], error)
	// Updates the @name, and averages of a skill profile that has the given @skill_profile_sid.
	// It also updates it to no longer be unnamed.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid, @name or averages in the request are invalid.
	//   - grpc.Internal: error occurs when updating the skill profile.
	//   - grpc.NotFound: entry to be updated doesn't exist.
	UpdateSkillProfile(context.Context, *connect_go.Request[wfm.UpdateSkillProfileReq]) (*connect_go.Response[wfm.UpdateSkillProfileRes], error)
	// Updates the @proficiencies for the given skill profile's skills that belong the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @proficiencies in the request are invalid.
	//   - grpc.Internal: error occurs when updating the skill profiles proficiencies.
	UpdateSkillProfileProficiencies(context.Context, *connect_go.Request[wfm.UpdateSkillProfileProficienciesReq]) (*connect_go.Response[wfm.UpdateSkillProfileProficienciesRes], error)
	// Get a skill profile that has the given @skill_profile_sid.
	// It also gets all the skills and the mappings associated with that profile.
	// If the @inactive_as_of_date of the skill profile is nil then the mapping is of inactive profiles to this one,
	// otherwise the mapping is of this profile to an active one.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.Internal: error occurs when getting the skill profile.
	//   - grpc.NotFound: skill profile doesn't exist.
	GetSkillProfile(context.Context, *connect_go.Request[wfm.GetSkillProfileReq]) (*connect_go.Response[wfm.GetSkillProfileRes], error)
	// Resyncs the skill profiles of the org sending the request.
	// It will add skills and skill profiles based on that client's historical call data.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when creating the new skills and skill profiles.
	ResyncSkillProfiles(context.Context, *connect_go.Request[wfm.ResyncSkillProfilesReq]) (*connect_go.Response[wfm.ResyncSkillProfilesRes], error)
	// Gets the last date of a skill profile resync for the org seding the request.
	// If the org has never done a skill profile resync @resync_date will not be set.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the resync date.
	GetLastSkillProfileResyncDate(context.Context, *connect_go.Request[wfm.GetLastSkillProfileResyncDateReq]) (*connect_go.Response[wfm.GetLastSkillProfileResyncDateRes], error)
	// Tries to create an entry for the given forecasting parameters for the org sending the request.
	// If the org already has an entry for them, it will update the already existing entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @forecasting_parameters in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the parameters.
	UpsertForecastingParameters(context.Context, *connect_go.Request[wfm.UpsertForecastingParametersReq]) (*connect_go.Response[wfm.UpsertForecastingParametersRes], error)
	// Gets the forecasting parameters for the org sending the request.
	// If the org hasn't created any parameters, it will return the default parameters.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the parameters.
	GetForecastingParameters(context.Context, *connect_go.Request[wfm.GetForecastingParametersReq]) (*connect_go.Response[wfm.GetForecastingParametersRes], error)
	// Gets the historical data for the org sending the request and the given @skill_profile_sid.
	// It will look through the client's call history and generate the historical data by using their configured forecasting parameters (historical data period and interval width).
	// The duration of each interval will be the interval width of the org's forecasting parameters.
	// It also applies any deltas that the client has stored for the given @SkillProfileSid.
	// If the client has no historical data, only the deltas will be applied to the returned intervals, all other intervals will have nil averages.
	// If any inactive skill profiles are mapped to the given @skill_profile_sid, the call history and deltas of those skill profiles will be included for the historical data calculation.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.NotFound: the @skill_profile_sid given is not found for the org.
	//   - grpc.Internal: error occurs when getting the historical data.
	ListHistoricalData(context.Context, *connect_go.Request[wfm.ListHistoricalDataReq]) (*connect_go.Response[wfm.ListHistoricalDataRes], error)
	// Tries to create an entry for the given @delta for the org sending the request.
	// If the org already has an entry for it, it will update the already exisiting entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @delta in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the historical data interval.
	UpsertHistoricalDataDelta(context.Context, *connect_go.Request[wfm.UpsertHistoricalDataDeltaReq]) (*connect_go.Response[wfm.UpsertHistoricalDataDeltaRes], error)
	// Tries to create entries for the given @deltas.
	// If the given org already has an entry for any of the deltas, it will replace the already existing entries.
	// This is made into a unary due to the UI's lack of support for client streams.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @deltas in the request are invalid.
	//   - grpc.Internal: error occurs when upserting the historical data deltas.
	UpsertHistoricalDataDeltas(context.Context, *connect_go.Request[wfm.UpsertHistoricalDataDeltasReq]) (*connect_go.Response[wfm.UpsertHistoricalDataDeltasRes], error)
	// Gets all the skills that the org sending the request has.
	// Skills returned will be sorted by @skill_sid in ascending order.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the skills.
	ListSkills(context.Context, *connect_go.Request[wfm.ListSkillsReq]) (*connect_go.Response[wfm.ListSkillsRes], error)
	// Builds and returns a call profile template for the org sending the request and the given @skill_profile_sid.
	// The template will be generated using the training data for said skill profile using the @training_data_range and @averages_calculation_range_in_months
	// from the client's saved forecasting parameters.
	// The @total_calls in the returned template be summed from the (@training_data_start_datetime - @averages_calculation_range_in_months) to @training_data_end_datetime,
	// or from @training_data_start_datetime to @training_data_end_datetime if @averages_calculation_range_in_months is 0.
	// The fixed averages fields in the call profile template, will be set to the averages that the skill profile has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.NotFound: the @skill_profile_sid given is not found for the org.
	//   - grpc.Internal: error occurs when building the call profile template.
	BuildCallProfileTemplateForSkillProfile(context.Context, *connect_go.Request[wfm.BuildCallProfileTemplateForSkillProfileReq]) (*connect_go.Response[wfm.BuildCallProfileTemplateForSkillProfileRes], error)
	// Creates a mapping entry for the @inactive_skill_profile_sid to the @active_skill_profile_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @inactive_skill_profile_sid, or @active_skill_profile_sid in the request are invalid.
	//     the @inactive_skill_profile_sid given is of an active skill profile.
	//     the @active_skill_profile_sid given is of an inactive skill profile.
	//   - grpc.Internal: error occurs when creating the inactive skill profile mapping.
	CreateInactiveSkillProfileMapping(context.Context, *connect_go.Request[wfm.CreateInactiveSkillProfileMappingReq]) (*connect_go.Response[wfm.CreateInactiveSkillProfileMappingRes], error)
	// Gets a list of enums that represent all of the forecaster types that are currently available for use
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Internal: error occurs when contacting the forecaster to get the available forecaster types.
	GetAvailableRegressionForecasterModelTypes(context.Context, *connect_go.Request[wfm.GetAvailableRegressionForecasterModelTypesReq]) (*connect_go.Response[wfm.GetAvailableRegressionForecasterModelTypesRes], error)
	// Changes the current mapping for the given @inactive_skill_profile_sid to be disconnected.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @inactive_skill_profile_sid in the request is invalid.
	//   - grpc.NotFound: the skill profile is not found for the org.
	//   - grpc.Internal: the current mapping for the given @inactive_skill_profile_sid is already disconnected,
	//     the given @inactive_skill_profile_sid is of an active skill profile.
	DisconnectInactiveSkillProfileMapping(context.Context, *connect_go.Request[wfm.DisconnectInactiveSkillProfileMappingReq]) (*connect_go.Response[wfm.DisconnectInactiveSkillProfileMappingRes], error)
	// Deletes deltas whose dates match the given @start_datetimes for the given @skill_profile_sid.
	// If no @start_datetimes are given, it will delete all the deltas that the given @skill_profile_sid has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid, or @start_datetimes in the request are invalid.
	//   - grpc.NotFound: no matching deltas are found for deletion.
	//   - grpc.Internal: error occurs during the deletion of the historical data interval.
	DeleteHistoricalDataDeltas(context.Context, *connect_go.Request[wfm.DeleteHistoricalDataDeltasReq]) (*connect_go.Response[wfm.DeleteHistoricalDataDeltasRes], error)
	// Gets the top N skill profiles with the highest calls_count for org sending the request where N is @max_number_of_profiles.
	// It will also return the number of skills found for that profile.
	// Individual skills that each profile has will not be returned.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @max_number_of_profiles in the request is invalid.
	//   - grpc.Internal: error occurs when getting the skill profiles.
	ListTopSkillProfiles(context.Context, *connect_go.Request[wfm.ListTopSkillProfilesReq]) (*connect_go.Response[wfm.ListTopSkillProfilesRes], error)
	// Gets the total number of skill profiles associated with the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the skill profiles count.
	GetSkillProfilesCount(context.Context, *connect_go.Request[wfm.GetSkillProfilesCountReq]) (*connect_go.Response[wfm.GetSkillProfilesCountRes], error)
	// Builds a profile forecast using the provided @call_profile_template.
	// The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
	// (@training_data_range_end_datetime - @forecast_test_range_in_weeks) to @forecast_range_end_datetime.
	// The @total_calls in the @call_profile_template will be scaled using the same ranges as BuildCallProfileTemplateForSkillProfile.
	// The @fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid or @call_profile_template in the request is invalid.
	//   - grpc.Internal: error occurs during the building of the profile forecast.
	BuildProfileForecastByInterval(context.Context, *connect_go.Request[wfm.BuildProfileForecastByIntervalReq], *connect_go.ServerStream[wfm.CallDataByInterval]) error
	// Builds a profile forecast using the provided @call_profile_template.
	// The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
	// (@training_data_range_end_datetime - @forecast_test_range_in_weeks) to @forecast_range_end_datetime.
	// The @total_calls in the @call_profile_template will be scaled using the same ranges as BuildCallProfileTemplateForSkillProfile.
	// The @fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
	// It also returns the statistics of the produced forecast by using the test data of the given @skill_profile_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid or @call_profile_template in the request is invalid.
	//   - grpc.Internal: error occurs during the building of the profile forecast.
	BuildProfileForecastByIntervalWithStats(context.Context, *connect_go.Request[wfm.BuildProfileForecastByIntervalWithStatsReq], *connect_go.ServerStream[wfm.BuildProfileForecastByIntervalWithStatsRes]) error
	// Builds a profile forecast for the given @skill_profile_sid and org sending the request using the given @call_profile_template.
	// The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
	// @forecast_range_start_datetime to @forecast_range_end_datetime.
	// The @total_calls in the @call_profile_template will be scaled using the same ranges as BuildCallProfileTemplateForSkillProfile.
	// The intervals produced will be saved in the database.
	// The @fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid or @call_profile_template in the request are invalid.
	//   - grpc.NotFound: the @skill_profile_sid doesn't exist.
	//   - grpc.Internal: error occurs when upserting the profile forecast.
	UpsertProfileForecast(context.Context, *connect_go.Request[wfm.UpsertProfileForecastReq]) (*connect_go.Response[wfm.UpsertProfileForecastRes], error)
	// Creates the given @call_profile_template for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @call_profile_template in the request is invalid.
	//   - grpc.Internal: error occurs during the creation of the call profile.
	CreateCallProfileTemplate(context.Context, *connect_go.Request[wfm.CreateCallProfileTemplateReq]) (*connect_go.Response[wfm.CreateCallProfileTemplateRes], error)
	// Deletes a call profile template for the requesting org that has the given @call_profile_template_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @call_profile_template_sid in the request is invalid.
	//   - grpc.Internal: error occurs during the deletion of the call profile.
	DeleteCallProfileTemplate(context.Context, *connect_go.Request[wfm.DeleteCallProfileTemplateReq]) (*connect_go.Response[wfm.DeleteCallProfileTemplateRes], error)
	// Creates an entry for the @regression_template for the requesting org.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs when creating the regression template.
	CreateRegressionTemplate(context.Context, *connect_go.Request[wfm.CreateRegressionTemplateReq]) (*connect_go.Response[wfm.CreateRegressionTemplateRes], error)
	// Deletes a regression template for the requesting org that has the given @regression_template_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @regression_template_sid in the request is invalid.
	//   - grpc.Internal: error occurs during the deletion of the regression template.
	DeleteRegressionTemplate(context.Context, *connect_go.Request[wfm.DeleteRegressionTemplateReq]) (*connect_go.Response[wfm.DeleteRegressionTemplateRes], error)
	// Gets all the regression templates that the org sending the request has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the regression templates.
	ListRegressionTemplates(context.Context, *connect_go.Request[wfm.ListRegressionTemplatesReq]) (*connect_go.Response[wfm.ListRegressionTemplatesRes], error)
	// Gets the forecast data intervals for the given @skill_profile_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.Internal: error occurs when getting the forecast data intervals.
	ListForecastIntervalsForSkillProfile(context.Context, *connect_go.Request[wfm.ListForecastIntervalsForSkillProfileReq], *connect_go.ServerStream[wfm.CallDataByInterval]) error
	// Generates a regression forecast using the provided @regression_template.
	// It will generate forecast intervals for the skill profiles sids in @skill_profile_sids_to_forecast.
	// It will use the client's saved forecasting test range as the start datetime and the forecast range as the end datetime of the forecasted data.
	// It will use the client's saved interval width to divide the resulting forecast intervals.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: no @skill_profile_sids_to_forecast are given or the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs during the building of the regression forecast.
	BuildRegressionForecastByInterval(context.Context, *connect_go.Request[wfm.BuildRegressionForecastByIntervalReq], *connect_go.ServerStream[wfm.CallDataByInterval]) error
	// Generates a regression forecast and calculates forecast statistics using the provided @regression_template.
	// It will generate forecast intervals for the skill profiles sids in @skill_profile_sids_to_forecast.
	// It will use the client's saved forecasting test range as the start datetime and the forecast range as the end datetime of the forecasted data.
	// It will use the client's saved interval width to divide the resulting forecast intervals.
	// The first message received will be the forecast statistics while all subsequent ones will be the forecast intervals.
	//
	// Errors:
	//   - grpc.Invalid: no @skill_profile_sids_to_forecast are given or the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs either during the when building the forecast or calculating the stats.
	BuildRegressionForecastByIntervalWithStats(context.Context, *connect_go.Request[wfm.BuildRegressionForecastByIntervalWithStatsReq], *connect_go.ServerStream[wfm.BuildRegressionForecastByIntervalWithStatsRes]) error
	// Gets the call profile templates that the org sending the request has.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the templates.
	ListCallProfileTemplates(context.Context, *connect_go.Request[wfm.ListCallProfileTemplatesReq]) (*connect_go.Response[wfm.ListCallProfileTemplatesRes], error)
	// Builds a regression forecast for the org using the given @regression_template and saves the resulting intervals in the db.
	// It will generate forecast intervals for the skill profiles sids in @save_forecasts_for_skill_profile_sids,
	// if the list is empty or has no valid skill profile sids, it will generate and save forecasts for all active skill profiles.
	// If any intervals produced already exist in the db, they will be replaced with the ones produced.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @regression_template in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the regression forecast.
	UpsertRegressionForecast(context.Context, *connect_go.Request[wfm.UpsertRegressionForecastReq]) (*connect_go.Response[wfm.UpsertRegressionForecastRes], error)
	// Tries to create an entry for the given @delta for the org sending the request.
	// If the org already has an entry for it, it will update the already exisiting entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @delta in the request is invalid.
	//   - grpc.Internal: error occurs when upserting the forecast data delta.
	UpsertForecastDataDelta(context.Context, *connect_go.Request[wfm.UpsertForecastDataDeltaReq]) (*connect_go.Response[wfm.UpsertForecastDataDeltaRes], error)
	// Tries to create entries for the given @deltas.
	// If the org already has entries for any of them, it will update the already existing entry.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @deltas in the request are invalid.
	//   - grpc.Internal: error occurs when upserting the forecast data deltas.
	UpsertForecastDataDeltas(context.Context, *connect_go.Request[wfm.UpsertForecastDataDeltasReq]) (*connect_go.Response[wfm.UpsertForecastDataDeltasRes], error)
	// Deletes forecast data intervals/deltas based on the parameters provided.
	// If @delete_param is type skill_profile_sid, then the intervals/deltas to be deleted will be
	// associated with that id. If @delete_param is type interval_sids, then the intervals/deltas to be
	// deleted will be contained in the list @interval_sids. The @delete_type field determines which
	// table(s) in the database the intervals/deltas will be deleted from.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one of the @delete_params is invalid
	//   - grpc.NotFound: no matching intervals/deltas are found for deletion.
	//   - grpc.Internal: error occurs during the deletion of the forecast data intervals/deltas.
	DeleteForecastIntervals(context.Context, *connect_go.Request[wfm.DeleteForecastIntervalsReq]) (*connect_go.Response[wfm.DeleteForecastIntervalsRes], error)
	// Retrieves the history for all the skill profiles of the requesting org.
	// Each value in every interval that has the same @start_datetime of each skill profile will be summed then averaged and made into a single one.
	// When calculating the averages, each interval's values will be weighted by the number of @total_calls it has.
	// History will be sorted by @start_datetime in ascending order, and the range is determined by the client's historical range.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when retriving the history.
	ListHistoricalDataForAllSkillProfiles(context.Context, *connect_go.Request[wfm.ListHistoricalDataForAllSkillProfilesReq]) (*connect_go.Response[wfm.ListHistoricalDataForAllSkillProfilesRes], error)
	// Converts the given @profile_tod and @profile_woms to a ProfileDOW and ProfileMOY.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @profile_tod or @profile_woms in the request are invalid.
	//   - grpc.Internal: error occurs when building the ProfileDOW or ProfileMOY.
	BuildDOWAndMOYProfiles(context.Context, *connect_go.Request[wfm.BuildDOWAndMOYProfilesReq]) (*connect_go.Response[wfm.BuildDOWAndMOYProfilesRes], error)
	// Calculates and returns the averages in the training data for the given @skill_profile_sid.
	// Averages to be returned will be weighted by the number of calls that each training data interval has.
	// The start time that the training data will be averaged can be modified based on the forecasting parameter @averages_calculation_range_in_months,
	// which will subtract that many months from the training data range end datetime and set it as the start time.
	// If @averages_calculation_range_in_months is 0, it will use the training data range start datetime.
	//
	// Errors:
	//   - grpc.Invalid: the @skill_profile_sid in the request is invalid.
	//   - grpc.NotFound: the @skill_profile_sid given is not found.
	//   - grpc.Internal: error occurs when calculating the averages from the training data.
	CalculateTrainingDataAveragesForSkillProfile(context.Context, *connect_go.Request[wfm.CalculateTrainingDataAveragesForSkillProfileReq]) (*connect_go.Response[wfm.CalculateTrainingDataAveragesForSkillProfileRes], error)
	// Calculates the averages for call characteristics using the historical data of the given @skill_profile_sids and org sending the request.
	// If no @skill_profile_sids are given, it will calculate the averages for all skill profiles for the org sending the request.
	// Averages will be weighted by the number of calls that each historical data interval has.
	// Once the averages are calculated, they will be updated in the db for those skill profiles.
	//
	// If a nil @datetime_range is given then the range used will be @training_data_range_end_datetime - @averages_calculation_range_in_months to the @training_data_range_end_datetime from the forecasting parameters.
	// If @averages_calculation_range_in_months is 0, it will use the @training_data_range_start_datetime as the start datetime of the range.
	//
	// If @exclude_skill_profiles_with_manual_averages is true, it will exclude skill profiles that have manual averages from the calculation
	// even if those skill profiles are in @skill_profile_sids.
	//
	// Errors:
	//   - grpc.Internal: error occurs when calculating the averages from the historical data.
	UpdateSkillProfileAveragesUsingHistoricalData(context.Context, *connect_go.Request[wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq]) (*connect_go.Response[wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes], error)
	// Updates the call center @node that has the given @call_center_node_sid.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this call center node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the one or more of the fields in the request are invalid.
	//   - grpc.Internal: error occurs when updating the call center node.
	//   - grpc.NotFound: entry to be updated doesn't exist.
	UpdateCallCenterNode(context.Context, *connect_go.Request[wfm.UpdateCallCenterNodeReq]) (*connect_go.Response[wfm.UpdateCallCenterNodeRes], error)
	// Creates the given client @node for the org sending the request and @parent_sid in the node.
	// The @client_node_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent call center node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// The @origin_sid must be set to nil, since this method can only make an original node.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @name, @parent_sid, or @time_zone_val is invalid.
	//   - grpc.NotFound: parent call center node doesn't exist, or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the client node.
	CreateClientNode(context.Context, *connect_go.Request[wfm.CreateClientNodeReq]) (*connect_go.Response[wfm.CreateClientNodeRes], error)
	// Updates a client node for the org sending the request that has the given @client_node_sid and @schedule_scenario_sid.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this client node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @node have invalid values.
	//   - grpc.Internal: error occurs when updating the client @node.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the given @parent_sid (call_center_node_sid) belongs to a different scenario than this @node.
	UpdateClientNode(context.Context, *connect_go.Request[wfm.UpdateClientNodeReq]) (*connect_go.Response[wfm.UpdateClientNodeRes], error)
	// Creates the given location @node for the org sending the request and parent @client_node_sid.
	// The @location_node_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent client node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// The @origin_sid must be set to nil, since this method can only make an original node.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @node have invalid values.
	//   - grpc.NotFound: parent client node doesn't exist or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the location node.
	CreateLocationNode(context.Context, *connect_go.Request[wfm.CreateLocationNodeReq]) (*connect_go.Response[wfm.CreateLocationNodeRes], error)
	// Updates a location node corresponding to the given @location_node_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this location node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @location_node have invalid values.
	//   - grpc.Internal: error occurs when updating the location node.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the given parent @client_node_sid belongs to a different scenario than the node to update.
	UpdateLocationNode(context.Context, *connect_go.Request[wfm.UpdateLocationNodeReq]) (*connect_go.Response[wfm.UpdateLocationNodeRes], error)
	// Creates the given program @node for the org sending the request and parent @location_node_sid.
	// The @program_node_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent location node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// The @origin_sid must be set to nil, since this method can only make an original node.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @node have invalid values.
	//   - grpc.NotFound: parent location node doesn't exist or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the program node.
	CreateProgramNode(context.Context, *connect_go.Request[wfm.CreateProgramNodeReq]) (*connect_go.Response[wfm.CreateProgramNodeRes], error)
	// Updates a program node for the given @program_node_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this program node since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @program_node have invalid values.
	//   - grpc.Internal: error occurs when updating the program node.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the given parent @location_node_sid belongs to a different scenario than the program node to update.
	UpdateProgramNode(context.Context, *connect_go.Request[wfm.UpdateProgramNodeReq]) (*connect_go.Response[wfm.UpdateProgramNodeRes], error)
	// Creates the given @constraint_rule for the org sending the request.
	// The @constraint_rule_sid and @skill_proficiency_sid (if one was created) of the new entities will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// If @rule_type is set to MIN_SKILL_LEVEL, the @member_target_entity field must be set with a skill proficiency and the @constraint_rule.target_sid will be ignored.
	// If the @member_target_entity is for a skill proficiency, that skill proficiency will be created with the given @constraint_rule as parent.
	// If @rule_type is NOT MIN_SKILL_LEVEL then the @target_sid must be that of a scheduling activity.
	// The all other @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @constraint_rule have invalid values.
	//   - grpc.NotFound: the given @target_sid for the given @rule_type, or @parent_entity don't exist.
	//   - grpc.Internal: error occurs when creating the constraint rule.
	CreateConstraintRule(context.Context, *connect_go.Request[wfm.CreateConstraintRuleReq]) (*connect_go.Response[wfm.CreateConstraintRuleRes], error)
	// Updates the constraint rule corresponding for given @contraint_rule_sid for the org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this constraint rule since it cannot be changed.
	// If @rule_type is set to MIN_SKILL_LEVEL, the @member_target_entity field must be set with a skill proficiency, otherwise it should not be set and field will be ignored.
	// If the @target_sid is for a different skill proficiency than the current one the constraint rule has as a target,
	// the old one will be deleted and a new one will be created for the given @member_target_entity.
	// If @rule_type is NOT MIN_SKILL_LEVEL then the @target_sid must be that of a scheduling activity.
	// The all other @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @constraint_rule have invalid values.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the @parent_entity has a different @schedule_scenario_sid than the constraint rule.
	//     : the given @target_sid for the given @rule_type, or @parent_entity don't exist.
	//   - grpc.Internal: error occurs when updating the constraint rule.
	UpdateConstraintRule(context.Context, *connect_go.Request[wfm.UpdateConstraintRuleReq]) (*connect_go.Response[wfm.UpdateConstraintRuleRes], error)
	// Deletes a constraint rule with the coresponding @constraint_rule_sid for the org sending the request.
	// It also deletes the entity referenced by the @target_sid and @rule_type if said entity is not a member of any other entity or the on call scheduling activity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @constraint_rule_sid is invalid for the org making the request.
	//   - grpc.NotFound: the given @constraint_rule doesn't exist.
	//   - grpc.Internal: error occurs when removing the constraint rule.
	DeleteConstraintRule(context.Context, *connect_go.Request[wfm.DeleteConstraintRuleReq]) (*connect_go.Response[wfm.DeleteConstraintRuleRes], error)
	// Creates the given @non_skill_activity for the org sending the request.
	// Will also create a scheduling activity wrapper for the non skill activity.
	// The @non_skill_activity_sid and @scheduling_activity_sid of the new entities will be returned in the response.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @non_skill_activity have invalid values.
	//   - grpc.NotFound: the @schedule_scenario_sid doesn't exist.
	//   - grpc.Internal: error occurs when creating the non skill activity or scheduling activity.
	CreateNonSkillActivity(context.Context, *connect_go.Request[wfm.CreateNonSkillActivityReq]) (*connect_go.Response[wfm.CreateNonSkillActivityRes], error)
	// Updates a non skill activity that has the given @non_skill_activity_sid with the given values.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: @non_skill_activity fields have invalid values.
	//   - grpc.NotFound: non skill activity for the given @non_skill_activity_sid doesn't exist.
	//   - grpc.Internal: error occurs when updating the non skill activity.
	UpdateNonSkillActivity(context.Context, *connect_go.Request[wfm.UpdateNonSkillActivityReq]) (*connect_go.Response[wfm.UpdateNonSkillActivityRes], error)
	// Lists the non skill activities that belong to the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:.
	//   - grpc.Internal: error occurs when listing the activites.
	ListNonSkillActivities(context.Context, *connect_go.Request[wfm.ListNonSkillActivitiesReq]) (*connect_go.Response[wfm.ListNonSkillActivitiesRes], error)
	// Lists the IDs of non skill activities that belong to the org sending the request which have the given @relationship_type with the @associated_entity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @associated_entity or @relationship_type are invalid.
	//   - grpc.Internal: error occurs when listing the associations.
	ListNonSkillActivityAssociations(context.Context, *connect_go.Request[wfm.ListNonSkillActivityAssociationsReq]) (*connect_go.Response[wfm.ListNonSkillActivityAssociationsRes], error)
	// Lists the candidate scheduling activities for a constraint or placement rule, inherited through given @parent_of_rule for @schedule_scenario_sid for the org making the request.
	// @parent_of_rule may be any type of node, agent group, or shift template which the rule will belong to.
	// If the rule will belong to a wfm agent, the agent group must be supplied instead to get a relevant set of candidate scheduling activities.
	// Member non skill activity of each scheduling activity will be included in the response.
	// The on call scheduling activity will always be included.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @parent_of_rule is invalid.
	//   - grpc.NotFound: @parent_of_rule doesn't exist
	//   - grpc.Internal: error occurs when applying inheritance or getting the nodes from @parent_of_rule.
	ListCandidateSchedulingActivities(context.Context, *connect_go.Request[wfm.ListCandidateSchedulingActivitiesReq]) (*connect_go.Response[wfm.ListCandidateSchedulingActivitiesRes], error)
	// Creates an agent group with the provided parameters.
	// A successful response should contain the @agent_group_sid of the newly created entity.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @name, or @parent_entity are invalid.
	//   - grpc.NotFound: @parent_entity doesn't exist
	//   - grpc.Internal: error occurs when creating the agent group.
	CreateAgentGroup(context.Context, *connect_go.Request[wfm.CreateAgentGroupReq]) (*connect_go.Response[wfm.CreateAgentGroupRes], error)
	// Updates the agent group corresponding to the @agent_group_sid, @name, and @parent_entity.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this agent group since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @agent_group_sid, @parent_entity, or @name in the request are invalid.
	//   - grpc.Internal: error occurs when updating the agent group.
	//   - grpc.AlreadyExists: an agent group with the given @name already exists.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the @parent_entity has a different @schedule_scenario_sid than the agent group.
	UpdateAgentGroup(context.Context, *connect_go.Request[wfm.UpdateAgentGroupReq]) (*connect_go.Response[wfm.UpdateAgentGroupRes], error)
	// Updates a wfm agent for the given @wfm_agent_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// The @tcn_agent_sid cannot be updated.
	// Required permission:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @wfm_agent have invalid values.
	//   - grpc.NotFound: WFM agent with the given @wfm_agent_sid doesn't exist.
	//   - grpc.Internal: error occurs when updating the wfm agent.
	UpdateWFMAgent(context.Context, *connect_go.Request[wfm.UpdateWFMAgentReq]) (*connect_go.Response[wfm.UpdateWFMAgentRes], error)
	// Lists all wfm agents for the org sending the request.
	// if @include_inactive is true then inactive agents will also be included, otherwise only active agents will be returned.
	// if @include_skill_proficiencies is true then agents returned will include their skill proficiencies.
	// if @include_agent_groups is true then the @agent_groups_by_agent response field will be set with a list of agent groups correlating to each agents index in the @wfm_agents field.
	// WFM agents with no associated agent_groups will have an empty slice in agent_groups_by_agent at their correlated index.
	// Required Permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Internal: error occurs when getting the wfm agents.
	ListAllWFMAgents(context.Context, *connect_go.Request[wfm.ListAllWFMAgentsReq]) (*connect_go.Response[wfm.ListAllWFMAgentsRes], error)
	// Lists all candidate wfm agents for the org sending the request and given @agent_group_sid.
	// A WFM agent is considered a candidate when it's active and it doesn't already belong to the given agent group.
	// Member entities will not be returned.
	// Required Permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: @agent_group_sid has an invalid value.
	//   - grpc.Internal: error occurs when getting the wfm agents.
	ListCandidateWFMAgents(context.Context, *connect_go.Request[wfm.ListCandidateWFMAgentsReq]) (*connect_go.Response[wfm.ListCandidateWFMAgentsRes], error)
	// Lists all wfm agents who are not grouped with any agent group for the given org sending the request that were created at or after the given @created_after_datetime.
	// If @schedule_scenario_sid is positive, it will filter further to get only agents who are not grouped with any agent group for that scenario.
	// if @include_skill_proficiencies is true then agents returned will include their skill proficiencies.
	// Member entities will not be returned.
	// Required Permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: @created_after_datetime has an invalid value.
	//   - grpc.Internal: error occurs when getting the wfm agents.
	ListUngroupedWFMAgents(context.Context, *connect_go.Request[wfm.ListUngroupedWFMAgentsReq]) (*connect_go.Response[wfm.ListUngroupedWFMAgentsRes], error)
	// Lists the IDs of wfm agents that belong to the org sending the request which are associated with the given @agent_group_sid.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @agent_group_sid is invalid.
	//   - grpc.Internal: error occurs when listing the wfm agents.
	ListWFMAgentsAssociatedWithAgentGroup(context.Context, *connect_go.Request[wfm.ListWFMAgentsAssociatedWithAgentGroupReq]) (*connect_go.Response[wfm.ListWFMAgentsAssociatedWithAgentGroupRes], error)
	// Creates a membership association for each of the given @wfm_agent_sids with the given @agent_group_sid.
	// The @schedule_scenario_sid must match the scenario of the agent group and wfm agents.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @wfm_agent_sids, or @agent_group_sid are invalid.
	//   - grpc.NotFound: the @wfm_agent_sids or @agent_group_sid don't exist for the org or given @schedule_scenario_sid.
	//   - grpc.Internal: error occurs when creating the association.
	CreateWFMAgentMemberships(context.Context, *connect_go.Request[wfm.CreateWFMAgentMembershipsReq]) (*connect_go.Response[wfm.CreateWFMAgentMembershipsRes], error)
	// Deletes a membership association for each of the given @wfm_agent_sids with the given @agent_group_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @wfm_agent_sids, or @agent_group_sid are invalid.
	//   - grpc.NotFound: any of the given memberships to delete do not exist.
	//   - grpc.Internal: error occurs when deleting the association.
	DeleteWFMAgentMemberships(context.Context, *connect_go.Request[wfm.DeleteWFMAgentMembershipsReq]) (*connect_go.Response[wfm.DeleteWFMAgentMembershipsRes], error)
	// Deletes all membership associations for the given @wfm_agent_sids with the given @agent_group_sids.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @wfm_agent_sids, or @agent_group_sids are invalid.
	//   - grpc.Internal: error occurs when deleting the associations.
	DeleteWFMAgentsMemberships(context.Context, *connect_go.Request[wfm.DeleteWFMAgentsMembershipsReq]) (*connect_go.Response[wfm.DeleteWFMAgentsMembershipsRes], error)
	// Builds and returns the diagnostics for the wfm agent associated with the given @wfm_agent_sid or @agent_group_sid for the org sending the request.
	// Response will only contain:
	//
	//	one element if build for a single @wfm_agent_sid.
	//	one element for each WFM agent if build for an @agent_group_sid.
	//
	// Required permissions:
	//
	//	NONE
	//	- grpc.Invalid: the @wfm_agent_sid, or @agent_group_sid is invalid.
	//	- grpc.NotFound: the given @wfm_agent_sid doesn't exist or the @agent_group_sid has no agents.
	//	- grpc.Internal: error occurs building the diagnostics.
	BuildAgentDiagnostics(context.Context, *connect_go.Request[wfm.BuildAgentDiagnosticsReq]) (*connect_go.Response[wfm.BuildAgentDiagnosticsRes], error)
	// Creates a shift template for the org sending the request with the provided parameters
	// The @shift_template_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent program node.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @name, or @program_node_sid are invalid.
	//   - grpc.AlreadyExists: a shift template with the given @name already exists.
	//   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the shift template.
	CreateShiftTemplate(context.Context, *connect_go.Request[wfm.CreateShiftTemplateReq]) (*connect_go.Response[wfm.CreateShiftTemplateRes], error)
	// Updates a shift template for the given @shift_template_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this shift template since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @shift_template_sid, @name, @program_node_sid are invalid.
	//   - grpc.AlreadyExists: a shift template with the given @name already exists.
	//   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the shift template to update.
	//   - grpc.Internal: error occurs when updating the shift template.
	UpdateShiftTemplate(context.Context, *connect_go.Request[wfm.UpdateShiftTemplateReq]) (*connect_go.Response[wfm.UpdateShiftTemplateRes], error)
	// Lists the shift templates matching the specified @shift_template_sids for the org sending the request.
	// If @include_placement_rules is set to true, the @shift_templates will be returned with their member placement rules.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @shift_template_sids are invalid.
	//   - grpc.Internal: error occurs when getting the data.
	ListShiftTemplatesBySids(context.Context, *connect_go.Request[wfm.ListShiftTemplatesBySidsReq]) (*connect_go.Response[wfm.ListShiftTemplatesBySidsRes], error)
	// Builds and returns the diagnostics for the shift template associated with the given @shift_template_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//	- grpc.Invalid: the @shift_template_sid is invalid.
	//	- grpc.NotFound: the given @shift_template_sid doesn't exist for the org sending the request.
	//	- grpc.Internal: error occours building the diagnostics for the shift template.
	BuildShiftTemplateDiagnostics(context.Context, *connect_go.Request[wfm.BuildShiftTemplateDiagnosticsReq]) (*connect_go.Response[wfm.BuildShiftTemplateDiagnosticsRes], error)
	// Creates a placement rule for org sending the request with the provided parameters.
	// The @placement_rule_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the parent shift template.
	// The @member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in the @placement_rule are invalid.
	//   - grpc.NotFound: the parent shift template doesn't exist or belongs to a different scenario than the one given.
	//     the scheduling activity to associate with the placement rule doesn't exist or belongs to a different scenario than the one given.
	//   - grpc.Internal: error occurs when creating the placement rule.
	CreatePlacementRule(context.Context, *connect_go.Request[wfm.CreatePlacementRuleReq]) (*connect_go.Response[wfm.CreatePlacementRuleRes], error)
	// Updates a placement rule corresponding with the given @placement_rule_sid for the org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this placement rule since it cannot be changed.
	// The @member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the one or more of the fields in the @placement_rule are invalid.
	//   - grpc.Internal: error occurs when updating the placement rule.
	//   - grpc.NotFound: entry to be updated doesn't exist.
	//     : the parent shift template or related scheduling activity don't exist or belong to a different scenario than the placement rule to update.
	UpdatePlacementRule(context.Context, *connect_go.Request[wfm.UpdatePlacementRuleReq]) (*connect_go.Response[wfm.UpdatePlacementRuleRes], error)
	// Deletes a placement rule with the coresponding @placement_rule_sid for the org sending the request.
	// It also deletes the scheduling activity referenced by the @scheduling_activity_sid if said activity is not a member of any other entity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @placement_rule_sid is invalid for the org making the request.
	//   - grpc.NotFound: the given @placement_rule doesn't exist.
	//   - grpc.Internal: error occurs when removing the placement rule.
	DeletePlacementRule(context.Context, *connect_go.Request[wfm.DeletePlacementRuleReq]) (*connect_go.Response[wfm.DeletePlacementRuleRes], error)
	// Creates an open times pattern for the org sending the request with the provided parameters.
	// The @open_times_pattern_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in the @open_times_pattern are invalid.
	//   - grpc.NotFound: the parent entity doesn't exist.
	//   - grpc.Internal: error occurs when creating the open times pattern.
	CreateOpenTimesPattern(context.Context, *connect_go.Request[wfm.CreateOpenTimesPatternReq]) (*connect_go.Response[wfm.CreateOpenTimesPatternRes], error)
	// Updates an open times pattern for the given @open_times_pattern_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this open times pattern since it cannot be changed.
	// Required permission:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @open_times_pattern have invalid values.
	//   - grpc.NotFound: the given @open_times_pattern or it's @parent_entity doesn't exist.
	//   - grpc.Internal: error occurs when updating the open times pattern.
	UpdateOpenTimesPattern(context.Context, *connect_go.Request[wfm.UpdateOpenTimesPatternReq]) (*connect_go.Response[wfm.UpdateOpenTimesPatternRes], error)
	// Deletes an open times pattern with the coresponding @open_times_pattern_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @open_times_pattern_sid is invalid for the org making the request.
	//   - grpc.NotFound: the given @open_times_pattern doesn't exist.
	//   - grpc.Internal: error occurs when removing the open times pattern.
	DeleteOpenTimesPattern(context.Context, *connect_go.Request[wfm.DeleteOpenTimesPatternReq]) (*connect_go.Response[wfm.DeleteOpenTimesPatternRes], error)
	// Gets the inherited, own, and resulting bitmaps for the open times patterns of @node_to_check for @schedule_scenario_sid and the org sending the request.
	// The @schedule_scenario_sid must match the scenario of the @node_to_check.
	// If @bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
	// If @bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the open times patterns.
	// If @bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the open times patterns.
	// The bitmaps will be generated for the span of @datetime_range.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_to_check is invalid for @schedule_scenario_sid and the org making the request.
	//     : the @datetime_range is invalid.
	//   - grpc.NotFound: the given @node_to_check doesn't exist.
	//   - grpc.Internal: error occurs when getting the open times pattern bitmaps.
	GetOpenTimesBitmaps(context.Context, *connect_go.Request[wfm.GetOpenTimesBitmapsReq]) (*connect_go.Response[wfm.GetOpenTimesBitmapsRes], error)
	// Creates an agent availability pattern for the org sending the request with the provided parameters.
	// The @agent_availability_pattern_sid of the new entity will be returned in the response.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: the parameters in the @agent_availability_pattern are invalid.
	//   - grpc.NotFound: the parent entity doesn't exist.
	//   - grpc.Internal: error occurs when creating the agent availability pattern.
	CreateAgentAvailabilityPattern(context.Context, *connect_go.Request[wfm.CreateAgentAvailabilityPatternReq]) (*connect_go.Response[wfm.CreateAgentAvailabilityPatternRes], error)
	// Updates an agent availability pattern for the given @agent_availability_pattern_sid and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @schedule_scenario_sid must be the original for this agent availability pattern since it cannot be changed.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @agent_availability_pattern have invalid values.
	//   - grpc.Internal: error occurs when updating the agent avilability pattern.
	//   - grpc.NotFound: entry to be updated doesn't exist, or the @parent_entity has a different @schedule_scenario_sid than the agent availability pattern.
	UpdateAgentAvailabilityPattern(context.Context, *connect_go.Request[wfm.UpdateAgentAvailabilityPatternReq]) (*connect_go.Response[wfm.UpdateAgentAvailabilityPatternRes], error)
	// Deletes an agent availability pattern with the coresponding @agent_availability_pattern_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @agent_availability_pattern_sid has an invalid value.
	//   - grpc.NotFound: the @agent_availability_pattern with the given sid doesn't exist.
	//   - grpc.Internal: error occurs when removing the agent availability pattern.
	DeleteAgentAvailabilityPattern(context.Context, *connect_go.Request[wfm.DeleteAgentAvailabilityPatternReq]) (*connect_go.Response[wfm.DeleteAgentAvailabilityPatternRes], error)
	// Gets the inherited, own, and resulting bitmaps for the agent availability patterns of @entities_to_check for @schedule_scenario_sid and the org sending the request.
	// The @schedule_scenario_sid must match the scenario of the @entities_to_check.
	// @entities_to_check must have the entity_type field set with a wfm agent, agent group or a type of node.
	// If an availability bitmap is requested for an agent group, the bitmaps for all of it's member agents will be returned instead.
	// The bitmaps will be generated for the span of @datetime_range.
	// If @bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
	// If @bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the availability patterns.
	// If @bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the availability patterns.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @entities_to_check is invalid for @schedule_scenario_sid and the org making the request.
	//     : the @datetime_range is invalid.
	//   - grpc.NotFound: the given @entities_to_check don't exist.
	//   - grpc.Internal: error occurs when getting the agent availability pattern bitmaps.
	GetAvailabilityBitmaps(context.Context, *connect_go.Request[wfm.GetAvailabilityBitmapsReq]) (*connect_go.Response[wfm.GetAvailabilityBitmapsRes], error)
	// Upserts an association for the given @non_skill_activity_sid to the given @node.
	// All downstream members of the entity will have their inheritance state cleared, and inherit the given association.
	// If an association already exists between the non skill activity and the @node then their @relationship_type will be updated.
	// The @schedule_scenario_sid must match the scenario of the @parent_entity.
	// If a NOT_ASSOCIATED_WITH relationship is being created, the tree will be checked for conflicting downstream effects.
	// If any member rules, are referencing the non skill activity and @relationship_type is NOT_ASSOCIATED_WITH, then the upsert will not take effect, and the list of related entities to be updated/removed first will be returned.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @non_skill_activity_sid, @node or @association_type are invalid.
	//     : the non skill activity and @node belong to different scenarios.
	//   - grpc.NotFound: the @non_skill_activity_sid or @node don't exist.
	//   - grpc.Internal: error occurs when upserting the association.
	UpsertNonSkillActivityAssociation(context.Context, *connect_go.Request[wfm.UpsertNonSkillActivityAssociationReq]) (*connect_go.Response[wfm.UpsertNonSkillActivityAssociationRes], error)
	// Creates skill proficiencies for the org sending the request with the provided parameters.
	// The @schedule_scenario_sid must match the scenario of the @parent_entities.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in a @proficiency, or the @schedule_scenario_sid are invalid.
	//   - grpc.NotFound: for any of the given @skill_proficiencies:
	//     the @parent_entity doesn't exist.
	//     the @skill_sid doesn't exist.
	//     the skill profile with @preferred_skill_profile_sid doesn't contain the given @skill_sid.
	//   - grpc.AlreadyExists: a skill proficiency with the given @skill_sid and @parent_entity already exists.
	//   - grpc.Internal: error occurs when creating the skill proficiencies.
	CreateSkillProficiencies(context.Context, *connect_go.Request[wfm.CreateSkillProficienciesReq]) (*connect_go.Response[wfm.CreateSkillProficienciesRes], error)
	// Updates skill proficiencies corresponding to the given @skill_proficiency_sids and org sending the request with the provided parameters.
	// All of the entity's parameters that are not desired to be updated must be filled with their current values.
	// The @skill_sid and @parent_entity field of each proficiency will be ignored since it cannot be updated.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: one or more fields in the @skill_proficiencies have invalid values.
	//   - grpc.Internal: error occurs when updating the skill proficiencies.
	//   - grpc.NotFound: for any of the given @skill_proficiencies:
	//     the @skill_sid doesn't exist.
	//     the skill profile with @preferred_skill_profile_sid doesn't contain the skill of the given skill proficiency.
	//   - grpc.AlreadyExists: a skill proficiency with the given @skill_sid and @parent_entity already exists.
	UpdateSkillProficiencies(context.Context, *connect_go.Request[wfm.UpdateSkillProficienciesReq]) (*connect_go.Response[wfm.UpdateSkillProficienciesRes], error)
	// Deletes a skill proficiency with the corresponding @skill_proficiency_sid for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: the @skill_proficiency_sid is invalid for the org making the request.
	//	-grpc.NotFound: the skill proficiency with the given @skill_proficiency_sid doesn't exist.
	//	-grpc.Internal: error occurs when removing the skill proficiency.
	DeleteSkillProficiency(context.Context, *connect_go.Request[wfm.DeleteSkillProficiencyReq]) (*connect_go.Response[wfm.DeleteSkillProficiencyRes], error)
	// Copies the existing scenario with the @scenario_sid_to_copy for the org sending the request using the provided parameters.
	// Scheduling targets of entities in the scenario to copy will also be copied.
	// The new @schedule_scenario_sid of the new entity will be returned in the response.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:gg
	//   - grpc.Invalid: the parameters @scenario_sid_to_copy or any others are invalid.
	//   - grpc.NotFound: the scenario corresponding to the @scenario_sid_to_copy doesn't exist.
	//   - grpc.Internal: error occurs when creating/coping the new scenario.
	CopyScenario(context.Context, *connect_go.Request[wfm.CopyScenarioReq]) (*connect_go.Response[wfm.CopyScenarioRes], error)
	// Creates a new schedule scenario for the org sending the request with the provided parameters.
	// The new @schedule_scenario_sid of the new entity will be returned in the response.
	// It also creates 1 of each of the following: call center, client, program, location node, and on call scheduling activity (if it doesn't exist already for the org).
	// The @node_description fields may optionally be left blank.
	// The @copied_from_scenario_sid field will be ignored, as it will be set to nil in the newly created scenario.
	// The @creation_datetime and @is_default fields will also be ignored and set as the current time and false respectively.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: parameters in the @req are invalid for the org making the request.
	//   - grpc.Internal: error occurs when creating the new scenario, or any of the node entities.
	CreateScheduleScenarioWithNodes(context.Context, *connect_go.Request[wfm.CreateScheduleScenarioWithNodesReq]) (*connect_go.Response[wfm.CreateScheduleScenarioWithNodesRes], error)
	// Updates a schedule scenario corresponding to the given @schedule_scenario_sid and org sending the request with the provided parameters.
	// Only the @name, @description and @datetime_set_to_inactive fields may be updated, and must be filled in with current value if updating the field is not desired.
	// The @schedule_scenario_sid must be the original for the schedule scenario since it cannot be updated.
	// All other fields will be ignored since they cannot be updated.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: one or more fields in the @scenario have invalid values.
	//	-grpc.NotFound: the scenario with the given @schedule_scenario_sid doesn't exist.
	//	-grpc.Internal: error occurs when updating the scenario.
	UpdateScheduleScenario(context.Context, *connect_go.Request[wfm.UpdateScheduleScenarioReq]) (*connect_go.Response[wfm.UpdateScheduleScenarioRes], error)
	// Gets config entities that match the org sending the request and given @entity_type and that belong to the @belongs_to_entity and @schedule_scenario_sid parameters.
	// If @include_member_lists is set to true the member lists of the entities retrieved will be included.
	// Any nodes in the returned set of entities will have inherited nonskill associations applied to the node's member_nonskill_activity fields.
	// Prior to listing the entities it will Resync TCN Agents and skill proficiencies.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @entity_type, or @belongs_to_entity have invalid values.
	//   - grpc.Internal: error occurs when getting the config entities.
	ListConfigEntities(context.Context, *connect_go.Request[wfm.ListConfigEntitiesReq]) (*connect_go.Response[wfm.ListConfigEntitiesRes], error)
	// Deletes shift instances with the corresponding @shift_instance_sids for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: the @shift_instance_sids are invalid for the org making the request.
	//	-grpc.NotFound: the shift instances with the given @shift_instance_sids don't exist.
	//	-grpc.Internal: error occurs when removing the shift instances.
	DeleteShiftInstances(context.Context, *connect_go.Request[wfm.DeleteShiftInstancesReq]) (*connect_go.Response[wfm.DeleteShiftInstancesRes], error)
	// Builds and returns the diagnostics and @nodes_checked for the @node_to_check for @schedule_scenario_sid and the org sending the request.
	// The @schedule_scenario_sid must match the scenario of the @node_to_check.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_to_check is invalid for @schedule_scenario_sid and the org making the request.
	//   - grpc.NotFound: the given @node_to_check doesn't exist.
	//   - grpc.Internal: error occurs when building the diagnostics.
	BuildNodeDiagnostics(context.Context, *connect_go.Request[wfm.BuildNodeDiagnosticsReq]) (*connect_go.Response[wfm.BuildNodeDiagnosticsRes], error)
	// Builds and returns the global diagnostics and @nodes_checked for the @schedule_scenario_sid and the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @schedule_scenario_sid has an invalid values.
	//   - grpc.NotFound: the given @schedule_scenario_sid doesn't exist for the org making the request.
	//   - grpc.Internal: error occurs when building the diagnostics.
	BuildGlobalDiagnostics(context.Context, *connect_go.Request[wfm.BuildGlobalDiagnosticsReq]) (*connect_go.Response[wfm.BuildGlobalDiagnosticsRes], error)
	// Gets the published schedule for the corresponding @datetime_range for the org sending the request.
	// Will create a published schedule if it does not exist already for the org sending the request.
	// if @include_shift_instances is true, the shift instances associated within @datetime_range for the published schedule will be returned in the published schedules shift_instances field.
	// if @node_selector is set, then only instances belonging to the origin of @node_selector and its children node will be returned, otherwise all matching shift instances will be included.
	// if @include_shift_template is true, any returned shift instances will have their orginating shift template returned in their origin_shift_template field.
	// if @include_shift_segments is true, any returned shift instances will have their shift_segments field set, otherwise the field will be left nil.
	// if @include_scheduling_activity is true, any returned shift segments will have their scheduling_activity field set, otherwise the field will be left nil.
	// if @include_activity is true, any returned scheduling activities will have their member_non_skill_activity field set, otherwise the field will be left nil.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range, @metric_types are invalid.
	//   - grpc.NotFound: the @node_selector doesn't exist.
	//   - grpc.Internal: error occurs when getting the published schedule.
	GetPublishedSchedule(context.Context, *connect_go.Request[wfm.GetPublishedScheduleReq]) (*connect_go.Response[wfm.GetPublishedScheduleRes], error)
	// Gets the required calls intervals for the published schedule for the corresponding @viewing_range, for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the published schedule doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	GetPublishedScheduleRequiredCalls(context.Context, *connect_go.Request[wfm.GetPublishedScheduleRequiredCallsReq]) (*connect_go.Response[wfm.GetPublishedScheduleRequiredCallsRes], error)
	// Gets the required calls intervals for the specified draft schedule for the corresponding @viewing_range, for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the draft schedule doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	GetDraftScheduleRequiredCalls(context.Context, *connect_go.Request[wfm.GetDraftScheduleRequiredCallsReq]) (*connect_go.Response[wfm.GetDraftScheduleRequiredCallsRes], error)
	// Creates a draft schedule for the org sending the request with the provided parameters.
	// The @draft_schedule_sid of the new entity will be returned in the response.
	// The @created_at and @last_updated_at fields will be set to the current time and null respectively.
	// The draft schedule will include the published schedule's shift instances and shift segments.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: the @name, @description or @scheduling_range are invalid.
	//   - grpc.Internal: error occurs when creating the draft schedule.
	CreateDraftSchedule(context.Context, *connect_go.Request[wfm.CreateDraftScheduleReq]) (*connect_go.Response[wfm.CreateDraftScheduleRes], error)
	// Updates the @name, @description, and @datetime_range of the given @draft_schedule_sid for the org sending the request.
	// The @name, @description, and @datetime_range fields must all be set with their desired values.
	// If @delete_shifts_not_in_range if true, then any instances outside of the @datetime_range will be permenantly deleted with no recovery option.
	// If @delete_shifts_not_in_range is false, instances outside of the new @datetime_range will be retained, for use if the datetime range is expanded to cover the instances in the future.
	// If @copy_shifts_into_new_range time is true, then new the portion of an expanded @datetime_range which has no instances will copy the instances from the published schedule. If false, no instances will be created for an expanded @scheduling_range.
	// If @get_updated_shifts is true, then the returned draft schedule will also contain the shift instances and segments in the given @datetime_range.
	// Errors:
	//   - grpc.Invalid: the @name, @description or @datetime_range are invalid.
	//   - grpc.Internal: error occurs when updating the schedule or its instances.
	UpdateDraftSchedule(context.Context, *connect_go.Request[wfm.UpdateDraftScheduleReq]) (*connect_go.Response[wfm.UpdateDraftScheduleRes], error)
	// Builds a draft schedule for the given @node_selector in @schedule_scenario_sid over @schedule_scenario_scheduling_range for @draft_schedule_sid and the org making the request.
	// The @schedule_scenario_scheduling_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
	// @include parameters are used when retrieving the resulting draft schedule, and work in the same way as for GetDraftSchedule.
	// Will return diagnostics for the newly built schedule, or just diagnostics if the schedule cannot be built successfully due to diagnostic error.
	BuildDraftSchedule(context.Context, *connect_go.Request[wfm.BuildDraftScheduleReq]) (*connect_go.Response[wfm.BuildDraftScheduleRes], error)
	// Publishes the shift instances of the given @draft_schedule_sid to the published schedule of the org sending the request.
	// Overlapping shift instances that aren't locked will be replaced with the instances from the draft schedule.
	// If @ignore_diagnostics_errors is set to true, it will publish the schedule regardless of any diagnostics errors,
	// otherwise it will return those diagnostic errors and not publish the schedule.
	// @include parameters are used when retrieving the resulting published schedule, and work in the same way as for GetDraftSchedule.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the parameters in the @req are invalid..
	//   - grpc.NotFound: @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when publishing the draft schedule.
	PublishDraftSchedule(context.Context, *connect_go.Request[wfm.PublishDraftScheduleReq]) (*connect_go.Response[wfm.PublishDraftScheduleRes], error)
	// Resets the shifts on the @draft_schedule_sid for the org sending the request.
	// Shifts overlapping the @datetime_range will be deleted, then that @datetime_range will be populated with shifts from the published schedule.
	// If no @datetime_range is provided, all shifts will be removed from the @draft_schedule_sid, and published shifts will be copied across the draft's datetime range.
	// If @unlocked_only is set to true, only unlocked shifts will be deleted, and the locked shift instances will remain.
	//
	//	The published schedule will still be copied, so any newly overlapping shifts will result in an overlap warning.
	//
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range or @draft_schedule_sid are invalid for the org sending the request.
	//   - grpc.NotFound: the @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when resetting the schedule.
	ResetDraftSchedule(context.Context, *connect_go.Request[wfm.ResetDraftScheduleReq]) (*connect_go.Response[wfm.ResetDraftScheduleRes], error)
	// Gets the draft schedule with @draft_schedule_sid for the corresponding @datetime_range for the org sending the request.
	// The @datetime_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
	// if @include_shift_instances is true, the shift instances associated within @datetime_range for the draft schedule will be returned in the draft schedules shift_instances field.
	// if @node_selector is set then only instances belonging to the origin of @node_selector and its children node will be returned, otherwise all matching shift instances will be included.
	// @node_selector must be for a node that belongs to the same schedule scenario as @draft_schedule_sid.
	// if @include_shift_template is true, any returned shift instances will have their orginating shift template returned in their origin_shift_template field.
	// if @include_shift_segments is true, any returned shift instances will have their shift_segments field set, otherwise the field will be left nil.
	// if @include_scheduling_activity is true, any returned shift segments will have their scheduling_activity field set, otherwise the field will be left nil.
	// if @include_activity is true, any returned scheduling activities will have their member_non_skill_activity field set, otherwise the field will be left nil.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range or @draft_schedule_sid are invalid.
	//   - grpc.NotFound: the @node_selector or @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when getting the draft schedule.
	GetDraftSchedule(context.Context, *connect_go.Request[wfm.GetDraftScheduleReq]) (*connect_go.Response[wfm.GetDraftScheduleRes], error)
	// Lists the draft schedules whose scheduling_range overlaps the given @datetime_range for the org sending the request.
	// If @datetime_range is not set, all draft schedules for the org will be returned.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @datetime_range is invalid.
	//   - grpc.Internal: error occurs when listing the draft schedules.
	ListDraftSchedules(context.Context, *connect_go.Request[wfm.ListDraftSchedulesReq]) (*connect_go.Response[wfm.ListDraftSchedulesRes], error)
	// Clears shift instances from the @schedule_selector for the org sending the request.
	// If @node_selector is set, only shifts related to the given @node_selector will be cleared.
	// If @node_selector is not set, all shifts on the @schedule_selector may be cleared, regardless of the shift template they are associated with.
	// If @datetime_range is set, only the shifts overlapping the @datetime_range will be cleared.
	// If @datetime_range is not set, all shifts on the schedule will be considered in range to be deleted and @invert_datetime_range and @start_datetimes_only must be set to false.
	// If @invert_datetime_range is set to true, the shifts overlapping the range before and after the provided @datetime_range will be deleted.
	// If @invert_datetime_range is set to false, the provided @datetime_range will be used.
	// If @start_datetimes_only is set to true, deletes the shifts that start within the @datetime range, or start before or after @datetime_range if @invert_datetime_range is true.
	// If @start_datetimes_only is set to false, deletes the shifts that overlap with the @datetime range, or overlap the range before or after @datetime_range if @invert_datetime_range is true.
	// If @delete_locked is set to true, both locked and unlocked shifts will be cleared.
	// If @delete_locked is set to false, only shifts with @is_locked set to false may be cleared.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_selector, @schedule_selector, or @datetime_range in the request are invalid.
	//   - grpc.NotFound: the draft schedule with the given @schedule_selector doesn't exist.
	//   - grpc.Internal: error occurs when removing the shifts from the schedule.
	ClearSchedule(context.Context, *connect_go.Request[wfm.ClearScheduleReq]) (*connect_go.Response[wfm.ClearScheduleRes], error)
	// Deletes a draft schedule with the corresponding @draft_schedule_sid for the org sending the request.
	// It also deletes all of its shift instances and segments.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @draft_schedule_sid is invalid for the org making the request.
	//   - grpc.NotFound: the draft schedule with the given @draft_schedule_sid doesn't exist.
	//   - grpc.Internal: error occurs when removing the draft schedule.
	DeleteDraftSchedule(context.Context, *connect_go.Request[wfm.DeleteDraftScheduleReq]) (*connect_go.Response[wfm.DeleteDraftScheduleRes], error)
	// Lists the shift instances with the corresponding @shift_instance_sids for the org sending the request.
	// If @include_shift_template is set to true then the related shift template for the shift instances will be returned in the shift template field.
	// If @include_shift_segments is set to true then the related shift segments for the shift instances will be returned in the shift segments field.
	// If @include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
	// @include_shift_segments must be true to take effect.
	// If @include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling
	// activities member non skill activity field. @include_scheduling_activity must be true to take effect.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @org_id or @shift_instance_sids in the request are invalid.
	//   - grpc.Internal: error occurs when listing the shift instances or their shift segments.
	ListShiftInstancesBySid(context.Context, *connect_go.Request[wfm.ListShiftInstancesBySidReq]) (*connect_go.Response[wfm.ListShiftInstancesBySidRes], error)
	// Copies the shifts from @source_schedule_selector to @destination_schedule_selector, constrained by the given parameters for the org sending the request.
	// If @datetime_range is set, all shifts within the datetime range will be copied.
	// If @datetime_range is not set, all shifts in the @source_schedule_selector within the schedule range of the @destination_schedule_selector will be copied. However if one of them is a published schedule, it will use the schedule range of the draft schedule.
	// If @start_datetimes_only is set to false, then shifts are considered to be within the @datetime range if any portion of them is within the range.
	// If @start_datetimes_only is set to true, then only shifts with start times within the @datetime range will be copied.
	// If @overlap_as_warning is set to false, any overlapping shifts for a given agent will return a diagnostic error, and prevent any shifts from being copied.
	// If @overlap_as_warning is set to true, the shifts will be copied regardless of overlap conflicts, and any conflicts will cause a diagnostic warning to be returned after.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: one or more fields in the request have invalid values.
	//	-grpc.NotFound: the @source_schedule_selector or @destination_schedule_selector don't exist for the org sending the request.
	//	-grpc.Internal: error occurs when creating the copied shift instances.
	CopyScheduleToSchedule(context.Context, *connect_go.Request[wfm.CopyScheduleToScheduleReq]) (*connect_go.Response[wfm.CopyScheduleToScheduleRes], error)
	// Creates a shift instance for the org sending the request with the provided parameters.
	// This method is not implemented. Do not use.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when creating the shift instance.
	CreateShiftInstance(context.Context, *connect_go.Request[wfm.CreateShiftInstanceReq]) (*connect_go.Response[wfm.CreateShiftInstanceRes], error)
	// Creates a shift instance for the org sending the request with the provided parameters.
	// If @wfm_agent_sids is empty, then the shift instance will be created for a newly created unassigned agent.
	// A shift instance will be created for each wfm agent sid provided.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when creating the shift instance.
	//   - grpc.NotFound: the @draft_schedule_sid, @shift_template_sid, or @wfm_agent_sids do not exist for the org sending the request.
	CreateShiftInstanceV2(context.Context, *connect_go.Request[wfm.CreateShiftInstanceV2Req]) (*connect_go.Response[wfm.CreateShiftInstanceV2Res], error)
	// Swaps shift instances with the given @shift_instance_sids that belong to @wfm_agent_sid1 to belong to @wfm_agent_sid2 (and viceversa).
	// Returns the swapped @shift_instances after they are succesfully updated.
	// If there are other shifts for the given @wfm_agent_sids with an overlap conflict, diagnostics will be returned instead.
	// All @shift_instance_sids must belong to the same schedule, and be from a draft schedule.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.NotFound: wfm_agent_sid_1, wfm_agent_sid_2, or shift_instance_sids do not exist for the org sending the request.
	//   - grpc.Internal: error occurs when swapping the shift instances.
	SwapShiftInstances(context.Context, *connect_go.Request[wfm.SwapShiftInstancesReq]) (*connect_go.Response[wfm.SwapShiftInstancesRes], error)
	// Updates a shift instance for the org sending the request with the provided parameters.
	// This method is not implemented. Do not use.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when updating the shift instance.
	UpdateShiftInstance(context.Context, *connect_go.Request[wfm.UpdateShiftInstanceReq]) (*connect_go.Response[wfm.UpdateShiftInstanceRes], error)
	// Updates a shift instance for the org sending the request with the provided parameters.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.Internal: error occurs when updating the shift instance.
	UpdateShiftInstanceV2(context.Context, *connect_go.Request[wfm.UpdateShiftInstanceV2Req]) (*connect_go.Response[wfm.UpdateShiftInstanceV2Res], error)
	// Copies the given @shift_instance_sids to @destination_schedule for the org sending the request.
	// If there are any overlap conflicts on @destination_schedule and @overlap_as_warning is set to false,
	//
	//	then @shift_instance_sids will not be copied, and a list of diagnostics detailing the overlaps will be returned.
	//
	// If @overlap_as_warning is set to true, overlap conflicts will not prevent the shifts from being copied, and the overlap diagnostics will be returned after as warning messages instead.
	// Required permissions:
	// NONE
	// Errors:
	//   - grpc.Invalid: one or more fields in the request have invalid values.
	//   - grpc.NotFound: the @shift_instance_sids or @destination_schedule does not exist for the org sending the request.
	//   - grpc.Internal: error occurs when copying the shift instances.
	CopyShiftInstancesToSchedule(context.Context, *connect_go.Request[wfm.CopyShiftInstancesToScheduleReq]) (*connect_go.Response[wfm.CopyShiftInstancesToScheduleRes], error)
	// Lists the shift_instance_sids for the Shift Instances associated with @wfm_agent_sid over the given @datetime_range and @schedule_selector.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the data.
	ListShiftInstanceSidsForAgent(context.Context, *connect_go.Request[wfm.ListShiftInstanceSidsForAgentReq]) (*connect_go.Response[wfm.ListShiftInstanceSidsForAgentRes], error)
	// Lists shift segments for the specified shift instances for the org sending the request.
	// If @include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
	// If @include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling activities member non skill activity field.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: a shift instance doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	ListShiftSegmentsByShiftInstanceSids(context.Context, *connect_go.Request[wfm.ListShiftSegmentsByShiftInstanceSidsReq]) (*connect_go.Response[wfm.ListShiftSegmentsByShiftInstanceSidsRes], error)
	// Creates the given @scheduling_target for the org making the request.
	// The @scheduling_target_sid of the new entity will be returned in the response.
	// Any preexisting scheduling target for @node_entity will be removed upon creation of the new @scheduling_target.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @scheduling_target is invalid.
	//   - grpc.NotFound: @node_entity doesn't exist for @schedule_scenario_sid and the org making the request.
	//   - grpc.Internal: error occours when setting the scheduling target.
	SetSchedulingTarget(context.Context, *connect_go.Request[wfm.SetSchedulingTargetReq]) (*connect_go.Response[wfm.SetSchedulingTargetRes], error)
	// Gets the @own_scheduling_target, @inherited_scheduling_target, and @resulting_scheduling_target for the given @node_selector and the org making the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the @node_selector is invalid.
	//   - grpc.NotFound: the given @node_selector doesn't exist for the org making the request.
	//   - grpc.Internal: error occours when getting the scheduling target.
	GetSchedulingTarget(context.Context, *connect_go.Request[wfm.GetSchedulingTargetReq]) (*connect_go.Response[wfm.GetSchedulingTargetRes], error)
	// Deletes the scheduling target of the corresponding @node_selector for the org sending the request.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//
	//	-grpc.Invalid: the @node_selector is invalid.
	//	-grpc.NotFound: the scheduling target for the given @node_selector doesn't exist for the org making the request.
	//	-grpc.Internal: error occurs when removing the scheduling target.
	DeleteSchedulingTarget(context.Context, *connect_go.Request[wfm.DeleteSchedulingTargetReq]) (*connect_go.Response[wfm.DeleteSchedulingTargetRes], error)
	// Gets the performance metrics across @datetime_range for shift instances in @schedule_selector associated with @node_selector for the org making the request.
	// Performance metrics will be generated for each of the given @metric_params.
	// The @interval_width_in_minutes must be a multiple of 5.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.NotFound: the @node_selector, @schedule_selector, or their shift instances doesn't exist.
	//   - grpc.Internal: error occurs when getting the data.
	GetPerformanceMetrics(context.Context, *connect_go.Request[wfm.GetPerformanceMetricsReq]) (*connect_go.Response[wfm.GetPerformanceMetricsRes], error)
	// Lists the required calls intervals for the given @node_selector over the given @datetime_range for the org making the request.
	// The @interval_width_in_minutes must be a multiple of 5.
	// Required permissions:
	//
	//	NONE
	//
	// Errors:
	//   - grpc.Invalid: the request data is invalid.
	//   - grpc.Internal: error occurs when getting the data.
	ListRequiredCallsIntervals(context.Context, *connect_go.Request[wfm.ListRequiredCallsIntervalsReq]) (*connect_go.Response[wfm.ListRequiredCallsIntervalsRes], error)
}

// NewWFMHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWFMHandler(svc WFMHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	wFMListSkillProfilesHandler := connect_go.NewUnaryHandler(
		WFMListSkillProfilesProcedure,
		svc.ListSkillProfiles,
		opts...,
	)
	wFMUpdateSkillProfileHandler := connect_go.NewUnaryHandler(
		WFMUpdateSkillProfileProcedure,
		svc.UpdateSkillProfile,
		opts...,
	)
	wFMUpdateSkillProfileProficienciesHandler := connect_go.NewUnaryHandler(
		WFMUpdateSkillProfileProficienciesProcedure,
		svc.UpdateSkillProfileProficiencies,
		opts...,
	)
	wFMGetSkillProfileHandler := connect_go.NewUnaryHandler(
		WFMGetSkillProfileProcedure,
		svc.GetSkillProfile,
		opts...,
	)
	wFMResyncSkillProfilesHandler := connect_go.NewUnaryHandler(
		WFMResyncSkillProfilesProcedure,
		svc.ResyncSkillProfiles,
		opts...,
	)
	wFMGetLastSkillProfileResyncDateHandler := connect_go.NewUnaryHandler(
		WFMGetLastSkillProfileResyncDateProcedure,
		svc.GetLastSkillProfileResyncDate,
		opts...,
	)
	wFMUpsertForecastingParametersHandler := connect_go.NewUnaryHandler(
		WFMUpsertForecastingParametersProcedure,
		svc.UpsertForecastingParameters,
		opts...,
	)
	wFMGetForecastingParametersHandler := connect_go.NewUnaryHandler(
		WFMGetForecastingParametersProcedure,
		svc.GetForecastingParameters,
		opts...,
	)
	wFMListHistoricalDataHandler := connect_go.NewUnaryHandler(
		WFMListHistoricalDataProcedure,
		svc.ListHistoricalData,
		opts...,
	)
	wFMUpsertHistoricalDataDeltaHandler := connect_go.NewUnaryHandler(
		WFMUpsertHistoricalDataDeltaProcedure,
		svc.UpsertHistoricalDataDelta,
		opts...,
	)
	wFMUpsertHistoricalDataDeltasHandler := connect_go.NewUnaryHandler(
		WFMUpsertHistoricalDataDeltasProcedure,
		svc.UpsertHistoricalDataDeltas,
		opts...,
	)
	wFMListSkillsHandler := connect_go.NewUnaryHandler(
		WFMListSkillsProcedure,
		svc.ListSkills,
		opts...,
	)
	wFMBuildCallProfileTemplateForSkillProfileHandler := connect_go.NewUnaryHandler(
		WFMBuildCallProfileTemplateForSkillProfileProcedure,
		svc.BuildCallProfileTemplateForSkillProfile,
		opts...,
	)
	wFMCreateInactiveSkillProfileMappingHandler := connect_go.NewUnaryHandler(
		WFMCreateInactiveSkillProfileMappingProcedure,
		svc.CreateInactiveSkillProfileMapping,
		opts...,
	)
	wFMGetAvailableRegressionForecasterModelTypesHandler := connect_go.NewUnaryHandler(
		WFMGetAvailableRegressionForecasterModelTypesProcedure,
		svc.GetAvailableRegressionForecasterModelTypes,
		opts...,
	)
	wFMDisconnectInactiveSkillProfileMappingHandler := connect_go.NewUnaryHandler(
		WFMDisconnectInactiveSkillProfileMappingProcedure,
		svc.DisconnectInactiveSkillProfileMapping,
		opts...,
	)
	wFMDeleteHistoricalDataDeltasHandler := connect_go.NewUnaryHandler(
		WFMDeleteHistoricalDataDeltasProcedure,
		svc.DeleteHistoricalDataDeltas,
		opts...,
	)
	wFMListTopSkillProfilesHandler := connect_go.NewUnaryHandler(
		WFMListTopSkillProfilesProcedure,
		svc.ListTopSkillProfiles,
		opts...,
	)
	wFMGetSkillProfilesCountHandler := connect_go.NewUnaryHandler(
		WFMGetSkillProfilesCountProcedure,
		svc.GetSkillProfilesCount,
		opts...,
	)
	wFMBuildProfileForecastByIntervalHandler := connect_go.NewServerStreamHandler(
		WFMBuildProfileForecastByIntervalProcedure,
		svc.BuildProfileForecastByInterval,
		opts...,
	)
	wFMBuildProfileForecastByIntervalWithStatsHandler := connect_go.NewServerStreamHandler(
		WFMBuildProfileForecastByIntervalWithStatsProcedure,
		svc.BuildProfileForecastByIntervalWithStats,
		opts...,
	)
	wFMUpsertProfileForecastHandler := connect_go.NewUnaryHandler(
		WFMUpsertProfileForecastProcedure,
		svc.UpsertProfileForecast,
		opts...,
	)
	wFMCreateCallProfileTemplateHandler := connect_go.NewUnaryHandler(
		WFMCreateCallProfileTemplateProcedure,
		svc.CreateCallProfileTemplate,
		opts...,
	)
	wFMDeleteCallProfileTemplateHandler := connect_go.NewUnaryHandler(
		WFMDeleteCallProfileTemplateProcedure,
		svc.DeleteCallProfileTemplate,
		opts...,
	)
	wFMCreateRegressionTemplateHandler := connect_go.NewUnaryHandler(
		WFMCreateRegressionTemplateProcedure,
		svc.CreateRegressionTemplate,
		opts...,
	)
	wFMDeleteRegressionTemplateHandler := connect_go.NewUnaryHandler(
		WFMDeleteRegressionTemplateProcedure,
		svc.DeleteRegressionTemplate,
		opts...,
	)
	wFMListRegressionTemplatesHandler := connect_go.NewUnaryHandler(
		WFMListRegressionTemplatesProcedure,
		svc.ListRegressionTemplates,
		opts...,
	)
	wFMListForecastIntervalsForSkillProfileHandler := connect_go.NewServerStreamHandler(
		WFMListForecastIntervalsForSkillProfileProcedure,
		svc.ListForecastIntervalsForSkillProfile,
		opts...,
	)
	wFMBuildRegressionForecastByIntervalHandler := connect_go.NewServerStreamHandler(
		WFMBuildRegressionForecastByIntervalProcedure,
		svc.BuildRegressionForecastByInterval,
		opts...,
	)
	wFMBuildRegressionForecastByIntervalWithStatsHandler := connect_go.NewServerStreamHandler(
		WFMBuildRegressionForecastByIntervalWithStatsProcedure,
		svc.BuildRegressionForecastByIntervalWithStats,
		opts...,
	)
	wFMListCallProfileTemplatesHandler := connect_go.NewUnaryHandler(
		WFMListCallProfileTemplatesProcedure,
		svc.ListCallProfileTemplates,
		opts...,
	)
	wFMUpsertRegressionForecastHandler := connect_go.NewUnaryHandler(
		WFMUpsertRegressionForecastProcedure,
		svc.UpsertRegressionForecast,
		opts...,
	)
	wFMUpsertForecastDataDeltaHandler := connect_go.NewUnaryHandler(
		WFMUpsertForecastDataDeltaProcedure,
		svc.UpsertForecastDataDelta,
		opts...,
	)
	wFMUpsertForecastDataDeltasHandler := connect_go.NewUnaryHandler(
		WFMUpsertForecastDataDeltasProcedure,
		svc.UpsertForecastDataDeltas,
		opts...,
	)
	wFMDeleteForecastIntervalsHandler := connect_go.NewUnaryHandler(
		WFMDeleteForecastIntervalsProcedure,
		svc.DeleteForecastIntervals,
		opts...,
	)
	wFMListHistoricalDataForAllSkillProfilesHandler := connect_go.NewUnaryHandler(
		WFMListHistoricalDataForAllSkillProfilesProcedure,
		svc.ListHistoricalDataForAllSkillProfiles,
		opts...,
	)
	wFMBuildDOWAndMOYProfilesHandler := connect_go.NewUnaryHandler(
		WFMBuildDOWAndMOYProfilesProcedure,
		svc.BuildDOWAndMOYProfiles,
		opts...,
	)
	wFMCalculateTrainingDataAveragesForSkillProfileHandler := connect_go.NewUnaryHandler(
		WFMCalculateTrainingDataAveragesForSkillProfileProcedure,
		svc.CalculateTrainingDataAveragesForSkillProfile,
		opts...,
	)
	wFMUpdateSkillProfileAveragesUsingHistoricalDataHandler := connect_go.NewUnaryHandler(
		WFMUpdateSkillProfileAveragesUsingHistoricalDataProcedure,
		svc.UpdateSkillProfileAveragesUsingHistoricalData,
		opts...,
	)
	wFMUpdateCallCenterNodeHandler := connect_go.NewUnaryHandler(
		WFMUpdateCallCenterNodeProcedure,
		svc.UpdateCallCenterNode,
		opts...,
	)
	wFMCreateClientNodeHandler := connect_go.NewUnaryHandler(
		WFMCreateClientNodeProcedure,
		svc.CreateClientNode,
		opts...,
	)
	wFMUpdateClientNodeHandler := connect_go.NewUnaryHandler(
		WFMUpdateClientNodeProcedure,
		svc.UpdateClientNode,
		opts...,
	)
	wFMCreateLocationNodeHandler := connect_go.NewUnaryHandler(
		WFMCreateLocationNodeProcedure,
		svc.CreateLocationNode,
		opts...,
	)
	wFMUpdateLocationNodeHandler := connect_go.NewUnaryHandler(
		WFMUpdateLocationNodeProcedure,
		svc.UpdateLocationNode,
		opts...,
	)
	wFMCreateProgramNodeHandler := connect_go.NewUnaryHandler(
		WFMCreateProgramNodeProcedure,
		svc.CreateProgramNode,
		opts...,
	)
	wFMUpdateProgramNodeHandler := connect_go.NewUnaryHandler(
		WFMUpdateProgramNodeProcedure,
		svc.UpdateProgramNode,
		opts...,
	)
	wFMCreateConstraintRuleHandler := connect_go.NewUnaryHandler(
		WFMCreateConstraintRuleProcedure,
		svc.CreateConstraintRule,
		opts...,
	)
	wFMUpdateConstraintRuleHandler := connect_go.NewUnaryHandler(
		WFMUpdateConstraintRuleProcedure,
		svc.UpdateConstraintRule,
		opts...,
	)
	wFMDeleteConstraintRuleHandler := connect_go.NewUnaryHandler(
		WFMDeleteConstraintRuleProcedure,
		svc.DeleteConstraintRule,
		opts...,
	)
	wFMCreateNonSkillActivityHandler := connect_go.NewUnaryHandler(
		WFMCreateNonSkillActivityProcedure,
		svc.CreateNonSkillActivity,
		opts...,
	)
	wFMUpdateNonSkillActivityHandler := connect_go.NewUnaryHandler(
		WFMUpdateNonSkillActivityProcedure,
		svc.UpdateNonSkillActivity,
		opts...,
	)
	wFMListNonSkillActivitiesHandler := connect_go.NewUnaryHandler(
		WFMListNonSkillActivitiesProcedure,
		svc.ListNonSkillActivities,
		opts...,
	)
	wFMListNonSkillActivityAssociationsHandler := connect_go.NewUnaryHandler(
		WFMListNonSkillActivityAssociationsProcedure,
		svc.ListNonSkillActivityAssociations,
		opts...,
	)
	wFMListCandidateSchedulingActivitiesHandler := connect_go.NewUnaryHandler(
		WFMListCandidateSchedulingActivitiesProcedure,
		svc.ListCandidateSchedulingActivities,
		opts...,
	)
	wFMCreateAgentGroupHandler := connect_go.NewUnaryHandler(
		WFMCreateAgentGroupProcedure,
		svc.CreateAgentGroup,
		opts...,
	)
	wFMUpdateAgentGroupHandler := connect_go.NewUnaryHandler(
		WFMUpdateAgentGroupProcedure,
		svc.UpdateAgentGroup,
		opts...,
	)
	wFMUpdateWFMAgentHandler := connect_go.NewUnaryHandler(
		WFMUpdateWFMAgentProcedure,
		svc.UpdateWFMAgent,
		opts...,
	)
	wFMListAllWFMAgentsHandler := connect_go.NewUnaryHandler(
		WFMListAllWFMAgentsProcedure,
		svc.ListAllWFMAgents,
		opts...,
	)
	wFMListCandidateWFMAgentsHandler := connect_go.NewUnaryHandler(
		WFMListCandidateWFMAgentsProcedure,
		svc.ListCandidateWFMAgents,
		opts...,
	)
	wFMListUngroupedWFMAgentsHandler := connect_go.NewUnaryHandler(
		WFMListUngroupedWFMAgentsProcedure,
		svc.ListUngroupedWFMAgents,
		opts...,
	)
	wFMListWFMAgentsAssociatedWithAgentGroupHandler := connect_go.NewUnaryHandler(
		WFMListWFMAgentsAssociatedWithAgentGroupProcedure,
		svc.ListWFMAgentsAssociatedWithAgentGroup,
		opts...,
	)
	wFMCreateWFMAgentMembershipsHandler := connect_go.NewUnaryHandler(
		WFMCreateWFMAgentMembershipsProcedure,
		svc.CreateWFMAgentMemberships,
		opts...,
	)
	wFMDeleteWFMAgentMembershipsHandler := connect_go.NewUnaryHandler(
		WFMDeleteWFMAgentMembershipsProcedure,
		svc.DeleteWFMAgentMemberships,
		opts...,
	)
	wFMDeleteWFMAgentsMembershipsHandler := connect_go.NewUnaryHandler(
		WFMDeleteWFMAgentsMembershipsProcedure,
		svc.DeleteWFMAgentsMemberships,
		opts...,
	)
	wFMBuildAgentDiagnosticsHandler := connect_go.NewUnaryHandler(
		WFMBuildAgentDiagnosticsProcedure,
		svc.BuildAgentDiagnostics,
		opts...,
	)
	wFMCreateShiftTemplateHandler := connect_go.NewUnaryHandler(
		WFMCreateShiftTemplateProcedure,
		svc.CreateShiftTemplate,
		opts...,
	)
	wFMUpdateShiftTemplateHandler := connect_go.NewUnaryHandler(
		WFMUpdateShiftTemplateProcedure,
		svc.UpdateShiftTemplate,
		opts...,
	)
	wFMListShiftTemplatesBySidsHandler := connect_go.NewUnaryHandler(
		WFMListShiftTemplatesBySidsProcedure,
		svc.ListShiftTemplatesBySids,
		opts...,
	)
	wFMBuildShiftTemplateDiagnosticsHandler := connect_go.NewUnaryHandler(
		WFMBuildShiftTemplateDiagnosticsProcedure,
		svc.BuildShiftTemplateDiagnostics,
		opts...,
	)
	wFMCreatePlacementRuleHandler := connect_go.NewUnaryHandler(
		WFMCreatePlacementRuleProcedure,
		svc.CreatePlacementRule,
		opts...,
	)
	wFMUpdatePlacementRuleHandler := connect_go.NewUnaryHandler(
		WFMUpdatePlacementRuleProcedure,
		svc.UpdatePlacementRule,
		opts...,
	)
	wFMDeletePlacementRuleHandler := connect_go.NewUnaryHandler(
		WFMDeletePlacementRuleProcedure,
		svc.DeletePlacementRule,
		opts...,
	)
	wFMCreateOpenTimesPatternHandler := connect_go.NewUnaryHandler(
		WFMCreateOpenTimesPatternProcedure,
		svc.CreateOpenTimesPattern,
		opts...,
	)
	wFMUpdateOpenTimesPatternHandler := connect_go.NewUnaryHandler(
		WFMUpdateOpenTimesPatternProcedure,
		svc.UpdateOpenTimesPattern,
		opts...,
	)
	wFMDeleteOpenTimesPatternHandler := connect_go.NewUnaryHandler(
		WFMDeleteOpenTimesPatternProcedure,
		svc.DeleteOpenTimesPattern,
		opts...,
	)
	wFMGetOpenTimesBitmapsHandler := connect_go.NewUnaryHandler(
		WFMGetOpenTimesBitmapsProcedure,
		svc.GetOpenTimesBitmaps,
		opts...,
	)
	wFMCreateAgentAvailabilityPatternHandler := connect_go.NewUnaryHandler(
		WFMCreateAgentAvailabilityPatternProcedure,
		svc.CreateAgentAvailabilityPattern,
		opts...,
	)
	wFMUpdateAgentAvailabilityPatternHandler := connect_go.NewUnaryHandler(
		WFMUpdateAgentAvailabilityPatternProcedure,
		svc.UpdateAgentAvailabilityPattern,
		opts...,
	)
	wFMDeleteAgentAvailabilityPatternHandler := connect_go.NewUnaryHandler(
		WFMDeleteAgentAvailabilityPatternProcedure,
		svc.DeleteAgentAvailabilityPattern,
		opts...,
	)
	wFMGetAvailabilityBitmapsHandler := connect_go.NewUnaryHandler(
		WFMGetAvailabilityBitmapsProcedure,
		svc.GetAvailabilityBitmaps,
		opts...,
	)
	wFMUpsertNonSkillActivityAssociationHandler := connect_go.NewUnaryHandler(
		WFMUpsertNonSkillActivityAssociationProcedure,
		svc.UpsertNonSkillActivityAssociation,
		opts...,
	)
	wFMCreateSkillProficienciesHandler := connect_go.NewUnaryHandler(
		WFMCreateSkillProficienciesProcedure,
		svc.CreateSkillProficiencies,
		opts...,
	)
	wFMUpdateSkillProficienciesHandler := connect_go.NewUnaryHandler(
		WFMUpdateSkillProficienciesProcedure,
		svc.UpdateSkillProficiencies,
		opts...,
	)
	wFMDeleteSkillProficiencyHandler := connect_go.NewUnaryHandler(
		WFMDeleteSkillProficiencyProcedure,
		svc.DeleteSkillProficiency,
		opts...,
	)
	wFMCopyScenarioHandler := connect_go.NewUnaryHandler(
		WFMCopyScenarioProcedure,
		svc.CopyScenario,
		opts...,
	)
	wFMCreateScheduleScenarioWithNodesHandler := connect_go.NewUnaryHandler(
		WFMCreateScheduleScenarioWithNodesProcedure,
		svc.CreateScheduleScenarioWithNodes,
		opts...,
	)
	wFMUpdateScheduleScenarioHandler := connect_go.NewUnaryHandler(
		WFMUpdateScheduleScenarioProcedure,
		svc.UpdateScheduleScenario,
		opts...,
	)
	wFMListConfigEntitiesHandler := connect_go.NewUnaryHandler(
		WFMListConfigEntitiesProcedure,
		svc.ListConfigEntities,
		opts...,
	)
	wFMDeleteShiftInstancesHandler := connect_go.NewUnaryHandler(
		WFMDeleteShiftInstancesProcedure,
		svc.DeleteShiftInstances,
		opts...,
	)
	wFMBuildNodeDiagnosticsHandler := connect_go.NewUnaryHandler(
		WFMBuildNodeDiagnosticsProcedure,
		svc.BuildNodeDiagnostics,
		opts...,
	)
	wFMBuildGlobalDiagnosticsHandler := connect_go.NewUnaryHandler(
		WFMBuildGlobalDiagnosticsProcedure,
		svc.BuildGlobalDiagnostics,
		opts...,
	)
	wFMGetPublishedScheduleHandler := connect_go.NewUnaryHandler(
		WFMGetPublishedScheduleProcedure,
		svc.GetPublishedSchedule,
		opts...,
	)
	wFMGetPublishedScheduleRequiredCallsHandler := connect_go.NewUnaryHandler(
		WFMGetPublishedScheduleRequiredCallsProcedure,
		svc.GetPublishedScheduleRequiredCalls,
		opts...,
	)
	wFMGetDraftScheduleRequiredCallsHandler := connect_go.NewUnaryHandler(
		WFMGetDraftScheduleRequiredCallsProcedure,
		svc.GetDraftScheduleRequiredCalls,
		opts...,
	)
	wFMCreateDraftScheduleHandler := connect_go.NewUnaryHandler(
		WFMCreateDraftScheduleProcedure,
		svc.CreateDraftSchedule,
		opts...,
	)
	wFMUpdateDraftScheduleHandler := connect_go.NewUnaryHandler(
		WFMUpdateDraftScheduleProcedure,
		svc.UpdateDraftSchedule,
		opts...,
	)
	wFMBuildDraftScheduleHandler := connect_go.NewUnaryHandler(
		WFMBuildDraftScheduleProcedure,
		svc.BuildDraftSchedule,
		opts...,
	)
	wFMPublishDraftScheduleHandler := connect_go.NewUnaryHandler(
		WFMPublishDraftScheduleProcedure,
		svc.PublishDraftSchedule,
		opts...,
	)
	wFMResetDraftScheduleHandler := connect_go.NewUnaryHandler(
		WFMResetDraftScheduleProcedure,
		svc.ResetDraftSchedule,
		opts...,
	)
	wFMGetDraftScheduleHandler := connect_go.NewUnaryHandler(
		WFMGetDraftScheduleProcedure,
		svc.GetDraftSchedule,
		opts...,
	)
	wFMListDraftSchedulesHandler := connect_go.NewUnaryHandler(
		WFMListDraftSchedulesProcedure,
		svc.ListDraftSchedules,
		opts...,
	)
	wFMClearScheduleHandler := connect_go.NewUnaryHandler(
		WFMClearScheduleProcedure,
		svc.ClearSchedule,
		opts...,
	)
	wFMDeleteDraftScheduleHandler := connect_go.NewUnaryHandler(
		WFMDeleteDraftScheduleProcedure,
		svc.DeleteDraftSchedule,
		opts...,
	)
	wFMListShiftInstancesBySidHandler := connect_go.NewUnaryHandler(
		WFMListShiftInstancesBySidProcedure,
		svc.ListShiftInstancesBySid,
		opts...,
	)
	wFMCopyScheduleToScheduleHandler := connect_go.NewUnaryHandler(
		WFMCopyScheduleToScheduleProcedure,
		svc.CopyScheduleToSchedule,
		opts...,
	)
	wFMCreateShiftInstanceHandler := connect_go.NewUnaryHandler(
		WFMCreateShiftInstanceProcedure,
		svc.CreateShiftInstance,
		opts...,
	)
	wFMCreateShiftInstanceV2Handler := connect_go.NewUnaryHandler(
		WFMCreateShiftInstanceV2Procedure,
		svc.CreateShiftInstanceV2,
		opts...,
	)
	wFMSwapShiftInstancesHandler := connect_go.NewUnaryHandler(
		WFMSwapShiftInstancesProcedure,
		svc.SwapShiftInstances,
		opts...,
	)
	wFMUpdateShiftInstanceHandler := connect_go.NewUnaryHandler(
		WFMUpdateShiftInstanceProcedure,
		svc.UpdateShiftInstance,
		opts...,
	)
	wFMUpdateShiftInstanceV2Handler := connect_go.NewUnaryHandler(
		WFMUpdateShiftInstanceV2Procedure,
		svc.UpdateShiftInstanceV2,
		opts...,
	)
	wFMCopyShiftInstancesToScheduleHandler := connect_go.NewUnaryHandler(
		WFMCopyShiftInstancesToScheduleProcedure,
		svc.CopyShiftInstancesToSchedule,
		opts...,
	)
	wFMListShiftInstanceSidsForAgentHandler := connect_go.NewUnaryHandler(
		WFMListShiftInstanceSidsForAgentProcedure,
		svc.ListShiftInstanceSidsForAgent,
		opts...,
	)
	wFMListShiftSegmentsByShiftInstanceSidsHandler := connect_go.NewUnaryHandler(
		WFMListShiftSegmentsByShiftInstanceSidsProcedure,
		svc.ListShiftSegmentsByShiftInstanceSids,
		opts...,
	)
	wFMSetSchedulingTargetHandler := connect_go.NewUnaryHandler(
		WFMSetSchedulingTargetProcedure,
		svc.SetSchedulingTarget,
		opts...,
	)
	wFMGetSchedulingTargetHandler := connect_go.NewUnaryHandler(
		WFMGetSchedulingTargetProcedure,
		svc.GetSchedulingTarget,
		opts...,
	)
	wFMDeleteSchedulingTargetHandler := connect_go.NewUnaryHandler(
		WFMDeleteSchedulingTargetProcedure,
		svc.DeleteSchedulingTarget,
		opts...,
	)
	wFMGetPerformanceMetricsHandler := connect_go.NewUnaryHandler(
		WFMGetPerformanceMetricsProcedure,
		svc.GetPerformanceMetrics,
		opts...,
	)
	wFMListRequiredCallsIntervalsHandler := connect_go.NewUnaryHandler(
		WFMListRequiredCallsIntervalsProcedure,
		svc.ListRequiredCallsIntervals,
		opts...,
	)
	return "/api.v1alpha1.wfm.WFM/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WFMListSkillProfilesProcedure:
			wFMListSkillProfilesHandler.ServeHTTP(w, r)
		case WFMUpdateSkillProfileProcedure:
			wFMUpdateSkillProfileHandler.ServeHTTP(w, r)
		case WFMUpdateSkillProfileProficienciesProcedure:
			wFMUpdateSkillProfileProficienciesHandler.ServeHTTP(w, r)
		case WFMGetSkillProfileProcedure:
			wFMGetSkillProfileHandler.ServeHTTP(w, r)
		case WFMResyncSkillProfilesProcedure:
			wFMResyncSkillProfilesHandler.ServeHTTP(w, r)
		case WFMGetLastSkillProfileResyncDateProcedure:
			wFMGetLastSkillProfileResyncDateHandler.ServeHTTP(w, r)
		case WFMUpsertForecastingParametersProcedure:
			wFMUpsertForecastingParametersHandler.ServeHTTP(w, r)
		case WFMGetForecastingParametersProcedure:
			wFMGetForecastingParametersHandler.ServeHTTP(w, r)
		case WFMListHistoricalDataProcedure:
			wFMListHistoricalDataHandler.ServeHTTP(w, r)
		case WFMUpsertHistoricalDataDeltaProcedure:
			wFMUpsertHistoricalDataDeltaHandler.ServeHTTP(w, r)
		case WFMUpsertHistoricalDataDeltasProcedure:
			wFMUpsertHistoricalDataDeltasHandler.ServeHTTP(w, r)
		case WFMListSkillsProcedure:
			wFMListSkillsHandler.ServeHTTP(w, r)
		case WFMBuildCallProfileTemplateForSkillProfileProcedure:
			wFMBuildCallProfileTemplateForSkillProfileHandler.ServeHTTP(w, r)
		case WFMCreateInactiveSkillProfileMappingProcedure:
			wFMCreateInactiveSkillProfileMappingHandler.ServeHTTP(w, r)
		case WFMGetAvailableRegressionForecasterModelTypesProcedure:
			wFMGetAvailableRegressionForecasterModelTypesHandler.ServeHTTP(w, r)
		case WFMDisconnectInactiveSkillProfileMappingProcedure:
			wFMDisconnectInactiveSkillProfileMappingHandler.ServeHTTP(w, r)
		case WFMDeleteHistoricalDataDeltasProcedure:
			wFMDeleteHistoricalDataDeltasHandler.ServeHTTP(w, r)
		case WFMListTopSkillProfilesProcedure:
			wFMListTopSkillProfilesHandler.ServeHTTP(w, r)
		case WFMGetSkillProfilesCountProcedure:
			wFMGetSkillProfilesCountHandler.ServeHTTP(w, r)
		case WFMBuildProfileForecastByIntervalProcedure:
			wFMBuildProfileForecastByIntervalHandler.ServeHTTP(w, r)
		case WFMBuildProfileForecastByIntervalWithStatsProcedure:
			wFMBuildProfileForecastByIntervalWithStatsHandler.ServeHTTP(w, r)
		case WFMUpsertProfileForecastProcedure:
			wFMUpsertProfileForecastHandler.ServeHTTP(w, r)
		case WFMCreateCallProfileTemplateProcedure:
			wFMCreateCallProfileTemplateHandler.ServeHTTP(w, r)
		case WFMDeleteCallProfileTemplateProcedure:
			wFMDeleteCallProfileTemplateHandler.ServeHTTP(w, r)
		case WFMCreateRegressionTemplateProcedure:
			wFMCreateRegressionTemplateHandler.ServeHTTP(w, r)
		case WFMDeleteRegressionTemplateProcedure:
			wFMDeleteRegressionTemplateHandler.ServeHTTP(w, r)
		case WFMListRegressionTemplatesProcedure:
			wFMListRegressionTemplatesHandler.ServeHTTP(w, r)
		case WFMListForecastIntervalsForSkillProfileProcedure:
			wFMListForecastIntervalsForSkillProfileHandler.ServeHTTP(w, r)
		case WFMBuildRegressionForecastByIntervalProcedure:
			wFMBuildRegressionForecastByIntervalHandler.ServeHTTP(w, r)
		case WFMBuildRegressionForecastByIntervalWithStatsProcedure:
			wFMBuildRegressionForecastByIntervalWithStatsHandler.ServeHTTP(w, r)
		case WFMListCallProfileTemplatesProcedure:
			wFMListCallProfileTemplatesHandler.ServeHTTP(w, r)
		case WFMUpsertRegressionForecastProcedure:
			wFMUpsertRegressionForecastHandler.ServeHTTP(w, r)
		case WFMUpsertForecastDataDeltaProcedure:
			wFMUpsertForecastDataDeltaHandler.ServeHTTP(w, r)
		case WFMUpsertForecastDataDeltasProcedure:
			wFMUpsertForecastDataDeltasHandler.ServeHTTP(w, r)
		case WFMDeleteForecastIntervalsProcedure:
			wFMDeleteForecastIntervalsHandler.ServeHTTP(w, r)
		case WFMListHistoricalDataForAllSkillProfilesProcedure:
			wFMListHistoricalDataForAllSkillProfilesHandler.ServeHTTP(w, r)
		case WFMBuildDOWAndMOYProfilesProcedure:
			wFMBuildDOWAndMOYProfilesHandler.ServeHTTP(w, r)
		case WFMCalculateTrainingDataAveragesForSkillProfileProcedure:
			wFMCalculateTrainingDataAveragesForSkillProfileHandler.ServeHTTP(w, r)
		case WFMUpdateSkillProfileAveragesUsingHistoricalDataProcedure:
			wFMUpdateSkillProfileAveragesUsingHistoricalDataHandler.ServeHTTP(w, r)
		case WFMUpdateCallCenterNodeProcedure:
			wFMUpdateCallCenterNodeHandler.ServeHTTP(w, r)
		case WFMCreateClientNodeProcedure:
			wFMCreateClientNodeHandler.ServeHTTP(w, r)
		case WFMUpdateClientNodeProcedure:
			wFMUpdateClientNodeHandler.ServeHTTP(w, r)
		case WFMCreateLocationNodeProcedure:
			wFMCreateLocationNodeHandler.ServeHTTP(w, r)
		case WFMUpdateLocationNodeProcedure:
			wFMUpdateLocationNodeHandler.ServeHTTP(w, r)
		case WFMCreateProgramNodeProcedure:
			wFMCreateProgramNodeHandler.ServeHTTP(w, r)
		case WFMUpdateProgramNodeProcedure:
			wFMUpdateProgramNodeHandler.ServeHTTP(w, r)
		case WFMCreateConstraintRuleProcedure:
			wFMCreateConstraintRuleHandler.ServeHTTP(w, r)
		case WFMUpdateConstraintRuleProcedure:
			wFMUpdateConstraintRuleHandler.ServeHTTP(w, r)
		case WFMDeleteConstraintRuleProcedure:
			wFMDeleteConstraintRuleHandler.ServeHTTP(w, r)
		case WFMCreateNonSkillActivityProcedure:
			wFMCreateNonSkillActivityHandler.ServeHTTP(w, r)
		case WFMUpdateNonSkillActivityProcedure:
			wFMUpdateNonSkillActivityHandler.ServeHTTP(w, r)
		case WFMListNonSkillActivitiesProcedure:
			wFMListNonSkillActivitiesHandler.ServeHTTP(w, r)
		case WFMListNonSkillActivityAssociationsProcedure:
			wFMListNonSkillActivityAssociationsHandler.ServeHTTP(w, r)
		case WFMListCandidateSchedulingActivitiesProcedure:
			wFMListCandidateSchedulingActivitiesHandler.ServeHTTP(w, r)
		case WFMCreateAgentGroupProcedure:
			wFMCreateAgentGroupHandler.ServeHTTP(w, r)
		case WFMUpdateAgentGroupProcedure:
			wFMUpdateAgentGroupHandler.ServeHTTP(w, r)
		case WFMUpdateWFMAgentProcedure:
			wFMUpdateWFMAgentHandler.ServeHTTP(w, r)
		case WFMListAllWFMAgentsProcedure:
			wFMListAllWFMAgentsHandler.ServeHTTP(w, r)
		case WFMListCandidateWFMAgentsProcedure:
			wFMListCandidateWFMAgentsHandler.ServeHTTP(w, r)
		case WFMListUngroupedWFMAgentsProcedure:
			wFMListUngroupedWFMAgentsHandler.ServeHTTP(w, r)
		case WFMListWFMAgentsAssociatedWithAgentGroupProcedure:
			wFMListWFMAgentsAssociatedWithAgentGroupHandler.ServeHTTP(w, r)
		case WFMCreateWFMAgentMembershipsProcedure:
			wFMCreateWFMAgentMembershipsHandler.ServeHTTP(w, r)
		case WFMDeleteWFMAgentMembershipsProcedure:
			wFMDeleteWFMAgentMembershipsHandler.ServeHTTP(w, r)
		case WFMDeleteWFMAgentsMembershipsProcedure:
			wFMDeleteWFMAgentsMembershipsHandler.ServeHTTP(w, r)
		case WFMBuildAgentDiagnosticsProcedure:
			wFMBuildAgentDiagnosticsHandler.ServeHTTP(w, r)
		case WFMCreateShiftTemplateProcedure:
			wFMCreateShiftTemplateHandler.ServeHTTP(w, r)
		case WFMUpdateShiftTemplateProcedure:
			wFMUpdateShiftTemplateHandler.ServeHTTP(w, r)
		case WFMListShiftTemplatesBySidsProcedure:
			wFMListShiftTemplatesBySidsHandler.ServeHTTP(w, r)
		case WFMBuildShiftTemplateDiagnosticsProcedure:
			wFMBuildShiftTemplateDiagnosticsHandler.ServeHTTP(w, r)
		case WFMCreatePlacementRuleProcedure:
			wFMCreatePlacementRuleHandler.ServeHTTP(w, r)
		case WFMUpdatePlacementRuleProcedure:
			wFMUpdatePlacementRuleHandler.ServeHTTP(w, r)
		case WFMDeletePlacementRuleProcedure:
			wFMDeletePlacementRuleHandler.ServeHTTP(w, r)
		case WFMCreateOpenTimesPatternProcedure:
			wFMCreateOpenTimesPatternHandler.ServeHTTP(w, r)
		case WFMUpdateOpenTimesPatternProcedure:
			wFMUpdateOpenTimesPatternHandler.ServeHTTP(w, r)
		case WFMDeleteOpenTimesPatternProcedure:
			wFMDeleteOpenTimesPatternHandler.ServeHTTP(w, r)
		case WFMGetOpenTimesBitmapsProcedure:
			wFMGetOpenTimesBitmapsHandler.ServeHTTP(w, r)
		case WFMCreateAgentAvailabilityPatternProcedure:
			wFMCreateAgentAvailabilityPatternHandler.ServeHTTP(w, r)
		case WFMUpdateAgentAvailabilityPatternProcedure:
			wFMUpdateAgentAvailabilityPatternHandler.ServeHTTP(w, r)
		case WFMDeleteAgentAvailabilityPatternProcedure:
			wFMDeleteAgentAvailabilityPatternHandler.ServeHTTP(w, r)
		case WFMGetAvailabilityBitmapsProcedure:
			wFMGetAvailabilityBitmapsHandler.ServeHTTP(w, r)
		case WFMUpsertNonSkillActivityAssociationProcedure:
			wFMUpsertNonSkillActivityAssociationHandler.ServeHTTP(w, r)
		case WFMCreateSkillProficienciesProcedure:
			wFMCreateSkillProficienciesHandler.ServeHTTP(w, r)
		case WFMUpdateSkillProficienciesProcedure:
			wFMUpdateSkillProficienciesHandler.ServeHTTP(w, r)
		case WFMDeleteSkillProficiencyProcedure:
			wFMDeleteSkillProficiencyHandler.ServeHTTP(w, r)
		case WFMCopyScenarioProcedure:
			wFMCopyScenarioHandler.ServeHTTP(w, r)
		case WFMCreateScheduleScenarioWithNodesProcedure:
			wFMCreateScheduleScenarioWithNodesHandler.ServeHTTP(w, r)
		case WFMUpdateScheduleScenarioProcedure:
			wFMUpdateScheduleScenarioHandler.ServeHTTP(w, r)
		case WFMListConfigEntitiesProcedure:
			wFMListConfigEntitiesHandler.ServeHTTP(w, r)
		case WFMDeleteShiftInstancesProcedure:
			wFMDeleteShiftInstancesHandler.ServeHTTP(w, r)
		case WFMBuildNodeDiagnosticsProcedure:
			wFMBuildNodeDiagnosticsHandler.ServeHTTP(w, r)
		case WFMBuildGlobalDiagnosticsProcedure:
			wFMBuildGlobalDiagnosticsHandler.ServeHTTP(w, r)
		case WFMGetPublishedScheduleProcedure:
			wFMGetPublishedScheduleHandler.ServeHTTP(w, r)
		case WFMGetPublishedScheduleRequiredCallsProcedure:
			wFMGetPublishedScheduleRequiredCallsHandler.ServeHTTP(w, r)
		case WFMGetDraftScheduleRequiredCallsProcedure:
			wFMGetDraftScheduleRequiredCallsHandler.ServeHTTP(w, r)
		case WFMCreateDraftScheduleProcedure:
			wFMCreateDraftScheduleHandler.ServeHTTP(w, r)
		case WFMUpdateDraftScheduleProcedure:
			wFMUpdateDraftScheduleHandler.ServeHTTP(w, r)
		case WFMBuildDraftScheduleProcedure:
			wFMBuildDraftScheduleHandler.ServeHTTP(w, r)
		case WFMPublishDraftScheduleProcedure:
			wFMPublishDraftScheduleHandler.ServeHTTP(w, r)
		case WFMResetDraftScheduleProcedure:
			wFMResetDraftScheduleHandler.ServeHTTP(w, r)
		case WFMGetDraftScheduleProcedure:
			wFMGetDraftScheduleHandler.ServeHTTP(w, r)
		case WFMListDraftSchedulesProcedure:
			wFMListDraftSchedulesHandler.ServeHTTP(w, r)
		case WFMClearScheduleProcedure:
			wFMClearScheduleHandler.ServeHTTP(w, r)
		case WFMDeleteDraftScheduleProcedure:
			wFMDeleteDraftScheduleHandler.ServeHTTP(w, r)
		case WFMListShiftInstancesBySidProcedure:
			wFMListShiftInstancesBySidHandler.ServeHTTP(w, r)
		case WFMCopyScheduleToScheduleProcedure:
			wFMCopyScheduleToScheduleHandler.ServeHTTP(w, r)
		case WFMCreateShiftInstanceProcedure:
			wFMCreateShiftInstanceHandler.ServeHTTP(w, r)
		case WFMCreateShiftInstanceV2Procedure:
			wFMCreateShiftInstanceV2Handler.ServeHTTP(w, r)
		case WFMSwapShiftInstancesProcedure:
			wFMSwapShiftInstancesHandler.ServeHTTP(w, r)
		case WFMUpdateShiftInstanceProcedure:
			wFMUpdateShiftInstanceHandler.ServeHTTP(w, r)
		case WFMUpdateShiftInstanceV2Procedure:
			wFMUpdateShiftInstanceV2Handler.ServeHTTP(w, r)
		case WFMCopyShiftInstancesToScheduleProcedure:
			wFMCopyShiftInstancesToScheduleHandler.ServeHTTP(w, r)
		case WFMListShiftInstanceSidsForAgentProcedure:
			wFMListShiftInstanceSidsForAgentHandler.ServeHTTP(w, r)
		case WFMListShiftSegmentsByShiftInstanceSidsProcedure:
			wFMListShiftSegmentsByShiftInstanceSidsHandler.ServeHTTP(w, r)
		case WFMSetSchedulingTargetProcedure:
			wFMSetSchedulingTargetHandler.ServeHTTP(w, r)
		case WFMGetSchedulingTargetProcedure:
			wFMGetSchedulingTargetHandler.ServeHTTP(w, r)
		case WFMDeleteSchedulingTargetProcedure:
			wFMDeleteSchedulingTargetHandler.ServeHTTP(w, r)
		case WFMGetPerformanceMetricsProcedure:
			wFMGetPerformanceMetricsHandler.ServeHTTP(w, r)
		case WFMListRequiredCallsIntervalsProcedure:
			wFMListRequiredCallsIntervalsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWFMHandler returns CodeUnimplemented from all methods.
type UnimplementedWFMHandler struct{}

func (UnimplementedWFMHandler) ListSkillProfiles(context.Context, *connect_go.Request[wfm.ListSkillProfilesReq]) (*connect_go.Response[wfm.ListSkillProfilesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListSkillProfiles is not implemented"))
}

func (UnimplementedWFMHandler) UpdateSkillProfile(context.Context, *connect_go.Request[wfm.UpdateSkillProfileReq]) (*connect_go.Response[wfm.UpdateSkillProfileRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateSkillProfile is not implemented"))
}

func (UnimplementedWFMHandler) UpdateSkillProfileProficiencies(context.Context, *connect_go.Request[wfm.UpdateSkillProfileProficienciesReq]) (*connect_go.Response[wfm.UpdateSkillProfileProficienciesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateSkillProfileProficiencies is not implemented"))
}

func (UnimplementedWFMHandler) GetSkillProfile(context.Context, *connect_go.Request[wfm.GetSkillProfileReq]) (*connect_go.Response[wfm.GetSkillProfileRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.GetSkillProfile is not implemented"))
}

func (UnimplementedWFMHandler) ResyncSkillProfiles(context.Context, *connect_go.Request[wfm.ResyncSkillProfilesReq]) (*connect_go.Response[wfm.ResyncSkillProfilesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ResyncSkillProfiles is not implemented"))
}

func (UnimplementedWFMHandler) GetLastSkillProfileResyncDate(context.Context, *connect_go.Request[wfm.GetLastSkillProfileResyncDateReq]) (*connect_go.Response[wfm.GetLastSkillProfileResyncDateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.GetLastSkillProfileResyncDate is not implemented"))
}

func (UnimplementedWFMHandler) UpsertForecastingParameters(context.Context, *connect_go.Request[wfm.UpsertForecastingParametersReq]) (*connect_go.Response[wfm.UpsertForecastingParametersRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpsertForecastingParameters is not implemented"))
}

func (UnimplementedWFMHandler) GetForecastingParameters(context.Context, *connect_go.Request[wfm.GetForecastingParametersReq]) (*connect_go.Response[wfm.GetForecastingParametersRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.GetForecastingParameters is not implemented"))
}

func (UnimplementedWFMHandler) ListHistoricalData(context.Context, *connect_go.Request[wfm.ListHistoricalDataReq]) (*connect_go.Response[wfm.ListHistoricalDataRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListHistoricalData is not implemented"))
}

func (UnimplementedWFMHandler) UpsertHistoricalDataDelta(context.Context, *connect_go.Request[wfm.UpsertHistoricalDataDeltaReq]) (*connect_go.Response[wfm.UpsertHistoricalDataDeltaRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpsertHistoricalDataDelta is not implemented"))
}

func (UnimplementedWFMHandler) UpsertHistoricalDataDeltas(context.Context, *connect_go.Request[wfm.UpsertHistoricalDataDeltasReq]) (*connect_go.Response[wfm.UpsertHistoricalDataDeltasRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpsertHistoricalDataDeltas is not implemented"))
}

func (UnimplementedWFMHandler) ListSkills(context.Context, *connect_go.Request[wfm.ListSkillsReq]) (*connect_go.Response[wfm.ListSkillsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListSkills is not implemented"))
}

func (UnimplementedWFMHandler) BuildCallProfileTemplateForSkillProfile(context.Context, *connect_go.Request[wfm.BuildCallProfileTemplateForSkillProfileReq]) (*connect_go.Response[wfm.BuildCallProfileTemplateForSkillProfileRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.BuildCallProfileTemplateForSkillProfile is not implemented"))
}

func (UnimplementedWFMHandler) CreateInactiveSkillProfileMapping(context.Context, *connect_go.Request[wfm.CreateInactiveSkillProfileMappingReq]) (*connect_go.Response[wfm.CreateInactiveSkillProfileMappingRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateInactiveSkillProfileMapping is not implemented"))
}

func (UnimplementedWFMHandler) GetAvailableRegressionForecasterModelTypes(context.Context, *connect_go.Request[wfm.GetAvailableRegressionForecasterModelTypesReq]) (*connect_go.Response[wfm.GetAvailableRegressionForecasterModelTypesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.GetAvailableRegressionForecasterModelTypes is not implemented"))
}

func (UnimplementedWFMHandler) DisconnectInactiveSkillProfileMapping(context.Context, *connect_go.Request[wfm.DisconnectInactiveSkillProfileMappingReq]) (*connect_go.Response[wfm.DisconnectInactiveSkillProfileMappingRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DisconnectInactiveSkillProfileMapping is not implemented"))
}

func (UnimplementedWFMHandler) DeleteHistoricalDataDeltas(context.Context, *connect_go.Request[wfm.DeleteHistoricalDataDeltasReq]) (*connect_go.Response[wfm.DeleteHistoricalDataDeltasRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DeleteHistoricalDataDeltas is not implemented"))
}

func (UnimplementedWFMHandler) ListTopSkillProfiles(context.Context, *connect_go.Request[wfm.ListTopSkillProfilesReq]) (*connect_go.Response[wfm.ListTopSkillProfilesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListTopSkillProfiles is not implemented"))
}

func (UnimplementedWFMHandler) GetSkillProfilesCount(context.Context, *connect_go.Request[wfm.GetSkillProfilesCountReq]) (*connect_go.Response[wfm.GetSkillProfilesCountRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.GetSkillProfilesCount is not implemented"))
}

func (UnimplementedWFMHandler) BuildProfileForecastByInterval(context.Context, *connect_go.Request[wfm.BuildProfileForecastByIntervalReq], *connect_go.ServerStream[wfm.CallDataByInterval]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.BuildProfileForecastByInterval is not implemented"))
}

func (UnimplementedWFMHandler) BuildProfileForecastByIntervalWithStats(context.Context, *connect_go.Request[wfm.BuildProfileForecastByIntervalWithStatsReq], *connect_go.ServerStream[wfm.BuildProfileForecastByIntervalWithStatsRes]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.BuildProfileForecastByIntervalWithStats is not implemented"))
}

func (UnimplementedWFMHandler) UpsertProfileForecast(context.Context, *connect_go.Request[wfm.UpsertProfileForecastReq]) (*connect_go.Response[wfm.UpsertProfileForecastRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpsertProfileForecast is not implemented"))
}

func (UnimplementedWFMHandler) CreateCallProfileTemplate(context.Context, *connect_go.Request[wfm.CreateCallProfileTemplateReq]) (*connect_go.Response[wfm.CreateCallProfileTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateCallProfileTemplate is not implemented"))
}

func (UnimplementedWFMHandler) DeleteCallProfileTemplate(context.Context, *connect_go.Request[wfm.DeleteCallProfileTemplateReq]) (*connect_go.Response[wfm.DeleteCallProfileTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DeleteCallProfileTemplate is not implemented"))
}

func (UnimplementedWFMHandler) CreateRegressionTemplate(context.Context, *connect_go.Request[wfm.CreateRegressionTemplateReq]) (*connect_go.Response[wfm.CreateRegressionTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateRegressionTemplate is not implemented"))
}

func (UnimplementedWFMHandler) DeleteRegressionTemplate(context.Context, *connect_go.Request[wfm.DeleteRegressionTemplateReq]) (*connect_go.Response[wfm.DeleteRegressionTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DeleteRegressionTemplate is not implemented"))
}

func (UnimplementedWFMHandler) ListRegressionTemplates(context.Context, *connect_go.Request[wfm.ListRegressionTemplatesReq]) (*connect_go.Response[wfm.ListRegressionTemplatesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListRegressionTemplates is not implemented"))
}

func (UnimplementedWFMHandler) ListForecastIntervalsForSkillProfile(context.Context, *connect_go.Request[wfm.ListForecastIntervalsForSkillProfileReq], *connect_go.ServerStream[wfm.CallDataByInterval]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListForecastIntervalsForSkillProfile is not implemented"))
}

func (UnimplementedWFMHandler) BuildRegressionForecastByInterval(context.Context, *connect_go.Request[wfm.BuildRegressionForecastByIntervalReq], *connect_go.ServerStream[wfm.CallDataByInterval]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.BuildRegressionForecastByInterval is not implemented"))
}

func (UnimplementedWFMHandler) BuildRegressionForecastByIntervalWithStats(context.Context, *connect_go.Request[wfm.BuildRegressionForecastByIntervalWithStatsReq], *connect_go.ServerStream[wfm.BuildRegressionForecastByIntervalWithStatsRes]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.BuildRegressionForecastByIntervalWithStats is not implemented"))
}

func (UnimplementedWFMHandler) ListCallProfileTemplates(context.Context, *connect_go.Request[wfm.ListCallProfileTemplatesReq]) (*connect_go.Response[wfm.ListCallProfileTemplatesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListCallProfileTemplates is not implemented"))
}

func (UnimplementedWFMHandler) UpsertRegressionForecast(context.Context, *connect_go.Request[wfm.UpsertRegressionForecastReq]) (*connect_go.Response[wfm.UpsertRegressionForecastRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpsertRegressionForecast is not implemented"))
}

func (UnimplementedWFMHandler) UpsertForecastDataDelta(context.Context, *connect_go.Request[wfm.UpsertForecastDataDeltaReq]) (*connect_go.Response[wfm.UpsertForecastDataDeltaRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpsertForecastDataDelta is not implemented"))
}

func (UnimplementedWFMHandler) UpsertForecastDataDeltas(context.Context, *connect_go.Request[wfm.UpsertForecastDataDeltasReq]) (*connect_go.Response[wfm.UpsertForecastDataDeltasRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpsertForecastDataDeltas is not implemented"))
}

func (UnimplementedWFMHandler) DeleteForecastIntervals(context.Context, *connect_go.Request[wfm.DeleteForecastIntervalsReq]) (*connect_go.Response[wfm.DeleteForecastIntervalsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DeleteForecastIntervals is not implemented"))
}

func (UnimplementedWFMHandler) ListHistoricalDataForAllSkillProfiles(context.Context, *connect_go.Request[wfm.ListHistoricalDataForAllSkillProfilesReq]) (*connect_go.Response[wfm.ListHistoricalDataForAllSkillProfilesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListHistoricalDataForAllSkillProfiles is not implemented"))
}

func (UnimplementedWFMHandler) BuildDOWAndMOYProfiles(context.Context, *connect_go.Request[wfm.BuildDOWAndMOYProfilesReq]) (*connect_go.Response[wfm.BuildDOWAndMOYProfilesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.BuildDOWAndMOYProfiles is not implemented"))
}

func (UnimplementedWFMHandler) CalculateTrainingDataAveragesForSkillProfile(context.Context, *connect_go.Request[wfm.CalculateTrainingDataAveragesForSkillProfileReq]) (*connect_go.Response[wfm.CalculateTrainingDataAveragesForSkillProfileRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CalculateTrainingDataAveragesForSkillProfile is not implemented"))
}

func (UnimplementedWFMHandler) UpdateSkillProfileAveragesUsingHistoricalData(context.Context, *connect_go.Request[wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq]) (*connect_go.Response[wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateSkillProfileAveragesUsingHistoricalData is not implemented"))
}

func (UnimplementedWFMHandler) UpdateCallCenterNode(context.Context, *connect_go.Request[wfm.UpdateCallCenterNodeReq]) (*connect_go.Response[wfm.UpdateCallCenterNodeRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateCallCenterNode is not implemented"))
}

func (UnimplementedWFMHandler) CreateClientNode(context.Context, *connect_go.Request[wfm.CreateClientNodeReq]) (*connect_go.Response[wfm.CreateClientNodeRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateClientNode is not implemented"))
}

func (UnimplementedWFMHandler) UpdateClientNode(context.Context, *connect_go.Request[wfm.UpdateClientNodeReq]) (*connect_go.Response[wfm.UpdateClientNodeRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateClientNode is not implemented"))
}

func (UnimplementedWFMHandler) CreateLocationNode(context.Context, *connect_go.Request[wfm.CreateLocationNodeReq]) (*connect_go.Response[wfm.CreateLocationNodeRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateLocationNode is not implemented"))
}

func (UnimplementedWFMHandler) UpdateLocationNode(context.Context, *connect_go.Request[wfm.UpdateLocationNodeReq]) (*connect_go.Response[wfm.UpdateLocationNodeRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateLocationNode is not implemented"))
}

func (UnimplementedWFMHandler) CreateProgramNode(context.Context, *connect_go.Request[wfm.CreateProgramNodeReq]) (*connect_go.Response[wfm.CreateProgramNodeRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateProgramNode is not implemented"))
}

func (UnimplementedWFMHandler) UpdateProgramNode(context.Context, *connect_go.Request[wfm.UpdateProgramNodeReq]) (*connect_go.Response[wfm.UpdateProgramNodeRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateProgramNode is not implemented"))
}

func (UnimplementedWFMHandler) CreateConstraintRule(context.Context, *connect_go.Request[wfm.CreateConstraintRuleReq]) (*connect_go.Response[wfm.CreateConstraintRuleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateConstraintRule is not implemented"))
}

func (UnimplementedWFMHandler) UpdateConstraintRule(context.Context, *connect_go.Request[wfm.UpdateConstraintRuleReq]) (*connect_go.Response[wfm.UpdateConstraintRuleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateConstraintRule is not implemented"))
}

func (UnimplementedWFMHandler) DeleteConstraintRule(context.Context, *connect_go.Request[wfm.DeleteConstraintRuleReq]) (*connect_go.Response[wfm.DeleteConstraintRuleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DeleteConstraintRule is not implemented"))
}

func (UnimplementedWFMHandler) CreateNonSkillActivity(context.Context, *connect_go.Request[wfm.CreateNonSkillActivityReq]) (*connect_go.Response[wfm.CreateNonSkillActivityRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateNonSkillActivity is not implemented"))
}

func (UnimplementedWFMHandler) UpdateNonSkillActivity(context.Context, *connect_go.Request[wfm.UpdateNonSkillActivityReq]) (*connect_go.Response[wfm.UpdateNonSkillActivityRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateNonSkillActivity is not implemented"))
}

func (UnimplementedWFMHandler) ListNonSkillActivities(context.Context, *connect_go.Request[wfm.ListNonSkillActivitiesReq]) (*connect_go.Response[wfm.ListNonSkillActivitiesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListNonSkillActivities is not implemented"))
}

func (UnimplementedWFMHandler) ListNonSkillActivityAssociations(context.Context, *connect_go.Request[wfm.ListNonSkillActivityAssociationsReq]) (*connect_go.Response[wfm.ListNonSkillActivityAssociationsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListNonSkillActivityAssociations is not implemented"))
}

func (UnimplementedWFMHandler) ListCandidateSchedulingActivities(context.Context, *connect_go.Request[wfm.ListCandidateSchedulingActivitiesReq]) (*connect_go.Response[wfm.ListCandidateSchedulingActivitiesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListCandidateSchedulingActivities is not implemented"))
}

func (UnimplementedWFMHandler) CreateAgentGroup(context.Context, *connect_go.Request[wfm.CreateAgentGroupReq]) (*connect_go.Response[wfm.CreateAgentGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateAgentGroup is not implemented"))
}

func (UnimplementedWFMHandler) UpdateAgentGroup(context.Context, *connect_go.Request[wfm.UpdateAgentGroupReq]) (*connect_go.Response[wfm.UpdateAgentGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateAgentGroup is not implemented"))
}

func (UnimplementedWFMHandler) UpdateWFMAgent(context.Context, *connect_go.Request[wfm.UpdateWFMAgentReq]) (*connect_go.Response[wfm.UpdateWFMAgentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateWFMAgent is not implemented"))
}

func (UnimplementedWFMHandler) ListAllWFMAgents(context.Context, *connect_go.Request[wfm.ListAllWFMAgentsReq]) (*connect_go.Response[wfm.ListAllWFMAgentsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListAllWFMAgents is not implemented"))
}

func (UnimplementedWFMHandler) ListCandidateWFMAgents(context.Context, *connect_go.Request[wfm.ListCandidateWFMAgentsReq]) (*connect_go.Response[wfm.ListCandidateWFMAgentsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListCandidateWFMAgents is not implemented"))
}

func (UnimplementedWFMHandler) ListUngroupedWFMAgents(context.Context, *connect_go.Request[wfm.ListUngroupedWFMAgentsReq]) (*connect_go.Response[wfm.ListUngroupedWFMAgentsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListUngroupedWFMAgents is not implemented"))
}

func (UnimplementedWFMHandler) ListWFMAgentsAssociatedWithAgentGroup(context.Context, *connect_go.Request[wfm.ListWFMAgentsAssociatedWithAgentGroupReq]) (*connect_go.Response[wfm.ListWFMAgentsAssociatedWithAgentGroupRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListWFMAgentsAssociatedWithAgentGroup is not implemented"))
}

func (UnimplementedWFMHandler) CreateWFMAgentMemberships(context.Context, *connect_go.Request[wfm.CreateWFMAgentMembershipsReq]) (*connect_go.Response[wfm.CreateWFMAgentMembershipsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateWFMAgentMemberships is not implemented"))
}

func (UnimplementedWFMHandler) DeleteWFMAgentMemberships(context.Context, *connect_go.Request[wfm.DeleteWFMAgentMembershipsReq]) (*connect_go.Response[wfm.DeleteWFMAgentMembershipsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DeleteWFMAgentMemberships is not implemented"))
}

func (UnimplementedWFMHandler) DeleteWFMAgentsMemberships(context.Context, *connect_go.Request[wfm.DeleteWFMAgentsMembershipsReq]) (*connect_go.Response[wfm.DeleteWFMAgentsMembershipsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DeleteWFMAgentsMemberships is not implemented"))
}

func (UnimplementedWFMHandler) BuildAgentDiagnostics(context.Context, *connect_go.Request[wfm.BuildAgentDiagnosticsReq]) (*connect_go.Response[wfm.BuildAgentDiagnosticsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.BuildAgentDiagnostics is not implemented"))
}

func (UnimplementedWFMHandler) CreateShiftTemplate(context.Context, *connect_go.Request[wfm.CreateShiftTemplateReq]) (*connect_go.Response[wfm.CreateShiftTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateShiftTemplate is not implemented"))
}

func (UnimplementedWFMHandler) UpdateShiftTemplate(context.Context, *connect_go.Request[wfm.UpdateShiftTemplateReq]) (*connect_go.Response[wfm.UpdateShiftTemplateRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateShiftTemplate is not implemented"))
}

func (UnimplementedWFMHandler) ListShiftTemplatesBySids(context.Context, *connect_go.Request[wfm.ListShiftTemplatesBySidsReq]) (*connect_go.Response[wfm.ListShiftTemplatesBySidsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListShiftTemplatesBySids is not implemented"))
}

func (UnimplementedWFMHandler) BuildShiftTemplateDiagnostics(context.Context, *connect_go.Request[wfm.BuildShiftTemplateDiagnosticsReq]) (*connect_go.Response[wfm.BuildShiftTemplateDiagnosticsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.BuildShiftTemplateDiagnostics is not implemented"))
}

func (UnimplementedWFMHandler) CreatePlacementRule(context.Context, *connect_go.Request[wfm.CreatePlacementRuleReq]) (*connect_go.Response[wfm.CreatePlacementRuleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreatePlacementRule is not implemented"))
}

func (UnimplementedWFMHandler) UpdatePlacementRule(context.Context, *connect_go.Request[wfm.UpdatePlacementRuleReq]) (*connect_go.Response[wfm.UpdatePlacementRuleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdatePlacementRule is not implemented"))
}

func (UnimplementedWFMHandler) DeletePlacementRule(context.Context, *connect_go.Request[wfm.DeletePlacementRuleReq]) (*connect_go.Response[wfm.DeletePlacementRuleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DeletePlacementRule is not implemented"))
}

func (UnimplementedWFMHandler) CreateOpenTimesPattern(context.Context, *connect_go.Request[wfm.CreateOpenTimesPatternReq]) (*connect_go.Response[wfm.CreateOpenTimesPatternRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateOpenTimesPattern is not implemented"))
}

func (UnimplementedWFMHandler) UpdateOpenTimesPattern(context.Context, *connect_go.Request[wfm.UpdateOpenTimesPatternReq]) (*connect_go.Response[wfm.UpdateOpenTimesPatternRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateOpenTimesPattern is not implemented"))
}

func (UnimplementedWFMHandler) DeleteOpenTimesPattern(context.Context, *connect_go.Request[wfm.DeleteOpenTimesPatternReq]) (*connect_go.Response[wfm.DeleteOpenTimesPatternRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DeleteOpenTimesPattern is not implemented"))
}

func (UnimplementedWFMHandler) GetOpenTimesBitmaps(context.Context, *connect_go.Request[wfm.GetOpenTimesBitmapsReq]) (*connect_go.Response[wfm.GetOpenTimesBitmapsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.GetOpenTimesBitmaps is not implemented"))
}

func (UnimplementedWFMHandler) CreateAgentAvailabilityPattern(context.Context, *connect_go.Request[wfm.CreateAgentAvailabilityPatternReq]) (*connect_go.Response[wfm.CreateAgentAvailabilityPatternRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateAgentAvailabilityPattern is not implemented"))
}

func (UnimplementedWFMHandler) UpdateAgentAvailabilityPattern(context.Context, *connect_go.Request[wfm.UpdateAgentAvailabilityPatternReq]) (*connect_go.Response[wfm.UpdateAgentAvailabilityPatternRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateAgentAvailabilityPattern is not implemented"))
}

func (UnimplementedWFMHandler) DeleteAgentAvailabilityPattern(context.Context, *connect_go.Request[wfm.DeleteAgentAvailabilityPatternReq]) (*connect_go.Response[wfm.DeleteAgentAvailabilityPatternRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DeleteAgentAvailabilityPattern is not implemented"))
}

func (UnimplementedWFMHandler) GetAvailabilityBitmaps(context.Context, *connect_go.Request[wfm.GetAvailabilityBitmapsReq]) (*connect_go.Response[wfm.GetAvailabilityBitmapsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.GetAvailabilityBitmaps is not implemented"))
}

func (UnimplementedWFMHandler) UpsertNonSkillActivityAssociation(context.Context, *connect_go.Request[wfm.UpsertNonSkillActivityAssociationReq]) (*connect_go.Response[wfm.UpsertNonSkillActivityAssociationRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpsertNonSkillActivityAssociation is not implemented"))
}

func (UnimplementedWFMHandler) CreateSkillProficiencies(context.Context, *connect_go.Request[wfm.CreateSkillProficienciesReq]) (*connect_go.Response[wfm.CreateSkillProficienciesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateSkillProficiencies is not implemented"))
}

func (UnimplementedWFMHandler) UpdateSkillProficiencies(context.Context, *connect_go.Request[wfm.UpdateSkillProficienciesReq]) (*connect_go.Response[wfm.UpdateSkillProficienciesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateSkillProficiencies is not implemented"))
}

func (UnimplementedWFMHandler) DeleteSkillProficiency(context.Context, *connect_go.Request[wfm.DeleteSkillProficiencyReq]) (*connect_go.Response[wfm.DeleteSkillProficiencyRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DeleteSkillProficiency is not implemented"))
}

func (UnimplementedWFMHandler) CopyScenario(context.Context, *connect_go.Request[wfm.CopyScenarioReq]) (*connect_go.Response[wfm.CopyScenarioRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CopyScenario is not implemented"))
}

func (UnimplementedWFMHandler) CreateScheduleScenarioWithNodes(context.Context, *connect_go.Request[wfm.CreateScheduleScenarioWithNodesReq]) (*connect_go.Response[wfm.CreateScheduleScenarioWithNodesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateScheduleScenarioWithNodes is not implemented"))
}

func (UnimplementedWFMHandler) UpdateScheduleScenario(context.Context, *connect_go.Request[wfm.UpdateScheduleScenarioReq]) (*connect_go.Response[wfm.UpdateScheduleScenarioRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateScheduleScenario is not implemented"))
}

func (UnimplementedWFMHandler) ListConfigEntities(context.Context, *connect_go.Request[wfm.ListConfigEntitiesReq]) (*connect_go.Response[wfm.ListConfigEntitiesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListConfigEntities is not implemented"))
}

func (UnimplementedWFMHandler) DeleteShiftInstances(context.Context, *connect_go.Request[wfm.DeleteShiftInstancesReq]) (*connect_go.Response[wfm.DeleteShiftInstancesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DeleteShiftInstances is not implemented"))
}

func (UnimplementedWFMHandler) BuildNodeDiagnostics(context.Context, *connect_go.Request[wfm.BuildNodeDiagnosticsReq]) (*connect_go.Response[wfm.BuildNodeDiagnosticsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.BuildNodeDiagnostics is not implemented"))
}

func (UnimplementedWFMHandler) BuildGlobalDiagnostics(context.Context, *connect_go.Request[wfm.BuildGlobalDiagnosticsReq]) (*connect_go.Response[wfm.BuildGlobalDiagnosticsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.BuildGlobalDiagnostics is not implemented"))
}

func (UnimplementedWFMHandler) GetPublishedSchedule(context.Context, *connect_go.Request[wfm.GetPublishedScheduleReq]) (*connect_go.Response[wfm.GetPublishedScheduleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.GetPublishedSchedule is not implemented"))
}

func (UnimplementedWFMHandler) GetPublishedScheduleRequiredCalls(context.Context, *connect_go.Request[wfm.GetPublishedScheduleRequiredCallsReq]) (*connect_go.Response[wfm.GetPublishedScheduleRequiredCallsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.GetPublishedScheduleRequiredCalls is not implemented"))
}

func (UnimplementedWFMHandler) GetDraftScheduleRequiredCalls(context.Context, *connect_go.Request[wfm.GetDraftScheduleRequiredCallsReq]) (*connect_go.Response[wfm.GetDraftScheduleRequiredCallsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.GetDraftScheduleRequiredCalls is not implemented"))
}

func (UnimplementedWFMHandler) CreateDraftSchedule(context.Context, *connect_go.Request[wfm.CreateDraftScheduleReq]) (*connect_go.Response[wfm.CreateDraftScheduleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateDraftSchedule is not implemented"))
}

func (UnimplementedWFMHandler) UpdateDraftSchedule(context.Context, *connect_go.Request[wfm.UpdateDraftScheduleReq]) (*connect_go.Response[wfm.UpdateDraftScheduleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateDraftSchedule is not implemented"))
}

func (UnimplementedWFMHandler) BuildDraftSchedule(context.Context, *connect_go.Request[wfm.BuildDraftScheduleReq]) (*connect_go.Response[wfm.BuildDraftScheduleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.BuildDraftSchedule is not implemented"))
}

func (UnimplementedWFMHandler) PublishDraftSchedule(context.Context, *connect_go.Request[wfm.PublishDraftScheduleReq]) (*connect_go.Response[wfm.PublishDraftScheduleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.PublishDraftSchedule is not implemented"))
}

func (UnimplementedWFMHandler) ResetDraftSchedule(context.Context, *connect_go.Request[wfm.ResetDraftScheduleReq]) (*connect_go.Response[wfm.ResetDraftScheduleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ResetDraftSchedule is not implemented"))
}

func (UnimplementedWFMHandler) GetDraftSchedule(context.Context, *connect_go.Request[wfm.GetDraftScheduleReq]) (*connect_go.Response[wfm.GetDraftScheduleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.GetDraftSchedule is not implemented"))
}

func (UnimplementedWFMHandler) ListDraftSchedules(context.Context, *connect_go.Request[wfm.ListDraftSchedulesReq]) (*connect_go.Response[wfm.ListDraftSchedulesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListDraftSchedules is not implemented"))
}

func (UnimplementedWFMHandler) ClearSchedule(context.Context, *connect_go.Request[wfm.ClearScheduleReq]) (*connect_go.Response[wfm.ClearScheduleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ClearSchedule is not implemented"))
}

func (UnimplementedWFMHandler) DeleteDraftSchedule(context.Context, *connect_go.Request[wfm.DeleteDraftScheduleReq]) (*connect_go.Response[wfm.DeleteDraftScheduleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DeleteDraftSchedule is not implemented"))
}

func (UnimplementedWFMHandler) ListShiftInstancesBySid(context.Context, *connect_go.Request[wfm.ListShiftInstancesBySidReq]) (*connect_go.Response[wfm.ListShiftInstancesBySidRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListShiftInstancesBySid is not implemented"))
}

func (UnimplementedWFMHandler) CopyScheduleToSchedule(context.Context, *connect_go.Request[wfm.CopyScheduleToScheduleReq]) (*connect_go.Response[wfm.CopyScheduleToScheduleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CopyScheduleToSchedule is not implemented"))
}

func (UnimplementedWFMHandler) CreateShiftInstance(context.Context, *connect_go.Request[wfm.CreateShiftInstanceReq]) (*connect_go.Response[wfm.CreateShiftInstanceRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateShiftInstance is not implemented"))
}

func (UnimplementedWFMHandler) CreateShiftInstanceV2(context.Context, *connect_go.Request[wfm.CreateShiftInstanceV2Req]) (*connect_go.Response[wfm.CreateShiftInstanceV2Res], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CreateShiftInstanceV2 is not implemented"))
}

func (UnimplementedWFMHandler) SwapShiftInstances(context.Context, *connect_go.Request[wfm.SwapShiftInstancesReq]) (*connect_go.Response[wfm.SwapShiftInstancesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.SwapShiftInstances is not implemented"))
}

func (UnimplementedWFMHandler) UpdateShiftInstance(context.Context, *connect_go.Request[wfm.UpdateShiftInstanceReq]) (*connect_go.Response[wfm.UpdateShiftInstanceRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateShiftInstance is not implemented"))
}

func (UnimplementedWFMHandler) UpdateShiftInstanceV2(context.Context, *connect_go.Request[wfm.UpdateShiftInstanceV2Req]) (*connect_go.Response[wfm.UpdateShiftInstanceV2Res], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.UpdateShiftInstanceV2 is not implemented"))
}

func (UnimplementedWFMHandler) CopyShiftInstancesToSchedule(context.Context, *connect_go.Request[wfm.CopyShiftInstancesToScheduleReq]) (*connect_go.Response[wfm.CopyShiftInstancesToScheduleRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.CopyShiftInstancesToSchedule is not implemented"))
}

func (UnimplementedWFMHandler) ListShiftInstanceSidsForAgent(context.Context, *connect_go.Request[wfm.ListShiftInstanceSidsForAgentReq]) (*connect_go.Response[wfm.ListShiftInstanceSidsForAgentRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListShiftInstanceSidsForAgent is not implemented"))
}

func (UnimplementedWFMHandler) ListShiftSegmentsByShiftInstanceSids(context.Context, *connect_go.Request[wfm.ListShiftSegmentsByShiftInstanceSidsReq]) (*connect_go.Response[wfm.ListShiftSegmentsByShiftInstanceSidsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListShiftSegmentsByShiftInstanceSids is not implemented"))
}

func (UnimplementedWFMHandler) SetSchedulingTarget(context.Context, *connect_go.Request[wfm.SetSchedulingTargetReq]) (*connect_go.Response[wfm.SetSchedulingTargetRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.SetSchedulingTarget is not implemented"))
}

func (UnimplementedWFMHandler) GetSchedulingTarget(context.Context, *connect_go.Request[wfm.GetSchedulingTargetReq]) (*connect_go.Response[wfm.GetSchedulingTargetRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.GetSchedulingTarget is not implemented"))
}

func (UnimplementedWFMHandler) DeleteSchedulingTarget(context.Context, *connect_go.Request[wfm.DeleteSchedulingTargetReq]) (*connect_go.Response[wfm.DeleteSchedulingTargetRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.DeleteSchedulingTarget is not implemented"))
}

func (UnimplementedWFMHandler) GetPerformanceMetrics(context.Context, *connect_go.Request[wfm.GetPerformanceMetricsReq]) (*connect_go.Response[wfm.GetPerformanceMetricsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.GetPerformanceMetrics is not implemented"))
}

func (UnimplementedWFMHandler) ListRequiredCallsIntervals(context.Context, *connect_go.Request[wfm.ListRequiredCallsIntervalsReq]) (*connect_go.Response[wfm.ListRequiredCallsIntervalsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.wfm.WFM.ListRequiredCallsIntervals is not implemented"))
}
