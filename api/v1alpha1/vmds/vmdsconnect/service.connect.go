// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/vmds/service.proto

package vmdsconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	vmds "github.com/tcncloud/api-go/api/v1alpha1/vmds"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// VmdsServiceName is the fully-qualified name of the VmdsService service.
	VmdsServiceName = "api.v1alpha1.vmds.VmdsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VmdsServiceDownloadSpecifiedMessagesProcedure is the fully-qualified name of the VmdsService's
	// DownloadSpecifiedMessages RPC.
	VmdsServiceDownloadSpecifiedMessagesProcedure = "/api.v1alpha1.vmds.VmdsService/DownloadSpecifiedMessages"
)

// VmdsServiceClient is a client for the api.v1alpha1.vmds.VmdsService service.
type VmdsServiceClient interface {
	DownloadSpecifiedMessages(context.Context, *connect_go.Request[vmds.DownloadSpecifiedMessagesRequest]) (*connect_go.Response[vmds.DownloadSpecifiedMessagesResponse], error)
}

// NewVmdsServiceClient constructs a client for the api.v1alpha1.vmds.VmdsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVmdsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) VmdsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vmdsServiceClient{
		downloadSpecifiedMessages: connect_go.NewClient[vmds.DownloadSpecifiedMessagesRequest, vmds.DownloadSpecifiedMessagesResponse](
			httpClient,
			baseURL+VmdsServiceDownloadSpecifiedMessagesProcedure,
			opts...,
		),
	}
}

// vmdsServiceClient implements VmdsServiceClient.
type vmdsServiceClient struct {
	downloadSpecifiedMessages *connect_go.Client[vmds.DownloadSpecifiedMessagesRequest, vmds.DownloadSpecifiedMessagesResponse]
}

// DownloadSpecifiedMessages calls api.v1alpha1.vmds.VmdsService.DownloadSpecifiedMessages.
func (c *vmdsServiceClient) DownloadSpecifiedMessages(ctx context.Context, req *connect_go.Request[vmds.DownloadSpecifiedMessagesRequest]) (*connect_go.Response[vmds.DownloadSpecifiedMessagesResponse], error) {
	return c.downloadSpecifiedMessages.CallUnary(ctx, req)
}

// VmdsServiceHandler is an implementation of the api.v1alpha1.vmds.VmdsService service.
type VmdsServiceHandler interface {
	DownloadSpecifiedMessages(context.Context, *connect_go.Request[vmds.DownloadSpecifiedMessagesRequest]) (*connect_go.Response[vmds.DownloadSpecifiedMessagesResponse], error)
}

// NewVmdsServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVmdsServiceHandler(svc VmdsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	vmdsServiceDownloadSpecifiedMessagesHandler := connect_go.NewUnaryHandler(
		VmdsServiceDownloadSpecifiedMessagesProcedure,
		svc.DownloadSpecifiedMessages,
		opts...,
	)
	return "/api.v1alpha1.vmds.VmdsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VmdsServiceDownloadSpecifiedMessagesProcedure:
			vmdsServiceDownloadSpecifiedMessagesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVmdsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVmdsServiceHandler struct{}

func (UnimplementedVmdsServiceHandler) DownloadSpecifiedMessages(context.Context, *connect_go.Request[vmds.DownloadSpecifiedMessagesRequest]) (*connect_go.Response[vmds.DownloadSpecifiedMessagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.vmds.VmdsService.DownloadSpecifiedMessages is not implemented"))
}
