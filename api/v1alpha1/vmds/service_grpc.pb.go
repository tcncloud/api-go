// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/v1alpha1/vmds/service.proto

package vmds

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	VmdsService_DownloadSpecifiedMessages_FullMethodName = "/api.v1alpha1.vmds.VmdsService/DownloadSpecifiedMessages"
)

// VmdsServiceClient is the client API for VmdsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VmdsServiceClient interface {
	DownloadSpecifiedMessages(ctx context.Context, in *DownloadSpecifiedMessagesRequest, opts ...grpc.CallOption) (*DownloadSpecifiedMessagesResponse, error)
}

type vmdsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVmdsServiceClient(cc grpc.ClientConnInterface) VmdsServiceClient {
	return &vmdsServiceClient{cc}
}

func (c *vmdsServiceClient) DownloadSpecifiedMessages(ctx context.Context, in *DownloadSpecifiedMessagesRequest, opts ...grpc.CallOption) (*DownloadSpecifiedMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadSpecifiedMessagesResponse)
	err := c.cc.Invoke(ctx, VmdsService_DownloadSpecifiedMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VmdsServiceServer is the server API for VmdsService service.
// All implementations must embed UnimplementedVmdsServiceServer
// for forward compatibility
type VmdsServiceServer interface {
	DownloadSpecifiedMessages(context.Context, *DownloadSpecifiedMessagesRequest) (*DownloadSpecifiedMessagesResponse, error)
	mustEmbedUnimplementedVmdsServiceServer()
}

// UnimplementedVmdsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVmdsServiceServer struct {
}

func (UnimplementedVmdsServiceServer) DownloadSpecifiedMessages(context.Context, *DownloadSpecifiedMessagesRequest) (*DownloadSpecifiedMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadSpecifiedMessages not implemented")
}
func (UnimplementedVmdsServiceServer) mustEmbedUnimplementedVmdsServiceServer() {}

// UnsafeVmdsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VmdsServiceServer will
// result in compilation errors.
type UnsafeVmdsServiceServer interface {
	mustEmbedUnimplementedVmdsServiceServer()
}

func RegisterVmdsServiceServer(s grpc.ServiceRegistrar, srv VmdsServiceServer) {
	s.RegisterService(&VmdsService_ServiceDesc, srv)
}

func _VmdsService_DownloadSpecifiedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadSpecifiedMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmdsServiceServer).DownloadSpecifiedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmdsService_DownloadSpecifiedMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmdsServiceServer).DownloadSpecifiedMessages(ctx, req.(*DownloadSpecifiedMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VmdsService_ServiceDesc is the grpc.ServiceDesc for VmdsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VmdsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.vmds.VmdsService",
	HandlerType: (*VmdsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadSpecifiedMessages",
			Handler:    _VmdsService_DownloadSpecifiedMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/vmds/service.proto",
}
