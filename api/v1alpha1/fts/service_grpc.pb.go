// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api/v1alpha1/fts/service.proto

package fts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FtsApi_GetUploadFileUrl_FullMethodName = "/api.v1alpha1.fts.FtsApi/GetUploadFileUrl"
)

// FtsApiClient is the client API for FtsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FtsApiClient interface {
	GetUploadFileUrl(ctx context.Context, in *GetUploadFileUrlReq, opts ...grpc.CallOption) (*GetUploadFileUrlRes, error)
}

type ftsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewFtsApiClient(cc grpc.ClientConnInterface) FtsApiClient {
	return &ftsApiClient{cc}
}

func (c *ftsApiClient) GetUploadFileUrl(ctx context.Context, in *GetUploadFileUrlReq, opts ...grpc.CallOption) (*GetUploadFileUrlRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUploadFileUrlRes)
	err := c.cc.Invoke(ctx, FtsApi_GetUploadFileUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FtsApiServer is the server API for FtsApi service.
// All implementations must embed UnimplementedFtsApiServer
// for forward compatibility
type FtsApiServer interface {
	GetUploadFileUrl(context.Context, *GetUploadFileUrlReq) (*GetUploadFileUrlRes, error)
	mustEmbedUnimplementedFtsApiServer()
}

// UnimplementedFtsApiServer must be embedded to have forward compatible implementations.
type UnimplementedFtsApiServer struct {
}

func (UnimplementedFtsApiServer) GetUploadFileUrl(context.Context, *GetUploadFileUrlReq) (*GetUploadFileUrlRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadFileUrl not implemented")
}
func (UnimplementedFtsApiServer) mustEmbedUnimplementedFtsApiServer() {}

// UnsafeFtsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FtsApiServer will
// result in compilation errors.
type UnsafeFtsApiServer interface {
	mustEmbedUnimplementedFtsApiServer()
}

func RegisterFtsApiServer(s grpc.ServiceRegistrar, srv FtsApiServer) {
	s.RegisterService(&FtsApi_ServiceDesc, srv)
}

func _FtsApi_GetUploadFileUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadFileUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtsApiServer).GetUploadFileUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FtsApi_GetUploadFileUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtsApiServer).GetUploadFileUrl(ctx, req.(*GetUploadFileUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FtsApi_ServiceDesc is the grpc.ServiceDesc for FtsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FtsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.fts.FtsApi",
	HandlerType: (*FtsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUploadFileUrl",
			Handler:    _FtsApi_GetUploadFileUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/fts/service.proto",
}
