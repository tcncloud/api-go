// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/fts/service.proto

package ftsconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	fts "github.com/tcncloud/api-go/api/v1alpha1/fts"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FtsApiName is the fully-qualified name of the FtsApi service.
	FtsApiName = "api.v1alpha1.fts.FtsApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FtsApiGetUploadFileUrlProcedure is the fully-qualified name of the FtsApi's GetUploadFileUrl RPC.
	FtsApiGetUploadFileUrlProcedure = "/api.v1alpha1.fts.FtsApi/GetUploadFileUrl"
)

// FtsApiClient is a client for the api.v1alpha1.fts.FtsApi service.
type FtsApiClient interface {
	GetUploadFileUrl(context.Context, *connect_go.Request[fts.GetUploadFileUrlReq]) (*connect_go.Response[fts.GetUploadFileUrlRes], error)
}

// NewFtsApiClient constructs a client for the api.v1alpha1.fts.FtsApi service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFtsApiClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FtsApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ftsApiClient{
		getUploadFileUrl: connect_go.NewClient[fts.GetUploadFileUrlReq, fts.GetUploadFileUrlRes](
			httpClient,
			baseURL+FtsApiGetUploadFileUrlProcedure,
			opts...,
		),
	}
}

// ftsApiClient implements FtsApiClient.
type ftsApiClient struct {
	getUploadFileUrl *connect_go.Client[fts.GetUploadFileUrlReq, fts.GetUploadFileUrlRes]
}

// GetUploadFileUrl calls api.v1alpha1.fts.FtsApi.GetUploadFileUrl.
func (c *ftsApiClient) GetUploadFileUrl(ctx context.Context, req *connect_go.Request[fts.GetUploadFileUrlReq]) (*connect_go.Response[fts.GetUploadFileUrlRes], error) {
	return c.getUploadFileUrl.CallUnary(ctx, req)
}

// FtsApiHandler is an implementation of the api.v1alpha1.fts.FtsApi service.
type FtsApiHandler interface {
	GetUploadFileUrl(context.Context, *connect_go.Request[fts.GetUploadFileUrlReq]) (*connect_go.Response[fts.GetUploadFileUrlRes], error)
}

// NewFtsApiHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFtsApiHandler(svc FtsApiHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	ftsApiGetUploadFileUrlHandler := connect_go.NewUnaryHandler(
		FtsApiGetUploadFileUrlProcedure,
		svc.GetUploadFileUrl,
		opts...,
	)
	return "/api.v1alpha1.fts.FtsApi/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FtsApiGetUploadFileUrlProcedure:
			ftsApiGetUploadFileUrlHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFtsApiHandler returns CodeUnimplemented from all methods.
type UnimplementedFtsApiHandler struct{}

func (UnimplementedFtsApiHandler) GetUploadFileUrl(context.Context, *connect_go.Request[fts.GetUploadFileUrlReq]) (*connect_go.Response[fts.GetUploadFileUrlRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.fts.FtsApi.GetUploadFileUrl is not implemented"))
}
