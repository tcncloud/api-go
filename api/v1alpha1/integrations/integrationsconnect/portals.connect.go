// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/integrations/portals.proto

package integrationsconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	integrations "github.com/tcncloud/api-go/api/v1alpha1/integrations"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PortalManagerApiName is the fully-qualified name of the PortalManagerApi service.
	PortalManagerApiName = "api.v1alpha1.integrations.PortalManagerApi"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PortalManagerApiUpsertPortalConfigProcedure is the fully-qualified name of the PortalManagerApi's
	// UpsertPortalConfig RPC.
	PortalManagerApiUpsertPortalConfigProcedure = "/api.v1alpha1.integrations.PortalManagerApi/UpsertPortalConfig"
	// PortalManagerApiListPortalConfigsProcedure is the fully-qualified name of the PortalManagerApi's
	// ListPortalConfigs RPC.
	PortalManagerApiListPortalConfigsProcedure = "/api.v1alpha1.integrations.PortalManagerApi/ListPortalConfigs"
	// PortalManagerApiGetPortalConfigProcedure is the fully-qualified name of the PortalManagerApi's
	// GetPortalConfig RPC.
	PortalManagerApiGetPortalConfigProcedure = "/api.v1alpha1.integrations.PortalManagerApi/GetPortalConfig"
	// PortalManagerApiDeletePortalConfigProcedure is the fully-qualified name of the PortalManagerApi's
	// DeletePortalConfig RPC.
	PortalManagerApiDeletePortalConfigProcedure = "/api.v1alpha1.integrations.PortalManagerApi/DeletePortalConfig"
	// PortalManagerApiUpdatePortalConfigLogoProcedure is the fully-qualified name of the
	// PortalManagerApi's UpdatePortalConfigLogo RPC.
	PortalManagerApiUpdatePortalConfigLogoProcedure = "/api.v1alpha1.integrations.PortalManagerApi/UpdatePortalConfigLogo"
	// PortalManagerApiGetPortalConfigLogoProcedure is the fully-qualified name of the
	// PortalManagerApi's GetPortalConfigLogo RPC.
	PortalManagerApiGetPortalConfigLogoProcedure = "/api.v1alpha1.integrations.PortalManagerApi/GetPortalConfigLogo"
	// PortalManagerApiListPortalLinksProcedure is the fully-qualified name of the PortalManagerApi's
	// ListPortalLinks RPC.
	PortalManagerApiListPortalLinksProcedure = "/api.v1alpha1.integrations.PortalManagerApi/ListPortalLinks"
	// PortalManagerApiGetPortalLinkProcedure is the fully-qualified name of the PortalManagerApi's
	// GetPortalLink RPC.
	PortalManagerApiGetPortalLinkProcedure = "/api.v1alpha1.integrations.PortalManagerApi/GetPortalLink"
	// PortalManagerApiDeletePortalLinkProcedure is the fully-qualified name of the PortalManagerApi's
	// DeletePortalLink RPC.
	PortalManagerApiDeletePortalLinkProcedure = "/api.v1alpha1.integrations.PortalManagerApi/DeletePortalLink"
	// PortalManagerApiCreatePortalLinksProcedure is the fully-qualified name of the PortalManagerApi's
	// CreatePortalLinks RPC.
	PortalManagerApiCreatePortalLinksProcedure = "/api.v1alpha1.integrations.PortalManagerApi/CreatePortalLinks"
	// PortalManagerApiUpsertPortalProcedure is the fully-qualified name of the PortalManagerApi's
	// UpsertPortal RPC.
	PortalManagerApiUpsertPortalProcedure = "/api.v1alpha1.integrations.PortalManagerApi/UpsertPortal"
	// PortalManagerApiGetPortalProcedure is the fully-qualified name of the PortalManagerApi's
	// GetPortal RPC.
	PortalManagerApiGetPortalProcedure = "/api.v1alpha1.integrations.PortalManagerApi/GetPortal"
	// PortalManagerApiDeletePortalProcedure is the fully-qualified name of the PortalManagerApi's
	// DeletePortal RPC.
	PortalManagerApiDeletePortalProcedure = "/api.v1alpha1.integrations.PortalManagerApi/DeletePortal"
	// PortalManagerApiListPortalsProcedure is the fully-qualified name of the PortalManagerApi's
	// ListPortals RPC.
	PortalManagerApiListPortalsProcedure = "/api.v1alpha1.integrations.PortalManagerApi/ListPortals"
	// PortalManagerApiListDetailedPortalsProcedure is the fully-qualified name of the
	// PortalManagerApi's ListDetailedPortals RPC.
	PortalManagerApiListDetailedPortalsProcedure = "/api.v1alpha1.integrations.PortalManagerApi/ListDetailedPortals"
	// PortalManagerApiGetDetailedPortalProcedure is the fully-qualified name of the PortalManagerApi's
	// GetDetailedPortal RPC.
	PortalManagerApiGetDetailedPortalProcedure = "/api.v1alpha1.integrations.PortalManagerApi/GetDetailedPortal"
	// PortalManagerApiUpsertPluginInstanceProcedure is the fully-qualified name of the
	// PortalManagerApi's UpsertPluginInstance RPC.
	PortalManagerApiUpsertPluginInstanceProcedure = "/api.v1alpha1.integrations.PortalManagerApi/UpsertPluginInstance"
	// PortalManagerApiGetPluginInstanceProcedure is the fully-qualified name of the PortalManagerApi's
	// GetPluginInstance RPC.
	PortalManagerApiGetPluginInstanceProcedure = "/api.v1alpha1.integrations.PortalManagerApi/GetPluginInstance"
	// PortalManagerApiDeletePluginInstanceProcedure is the fully-qualified name of the
	// PortalManagerApi's DeletePluginInstance RPC.
	PortalManagerApiDeletePluginInstanceProcedure = "/api.v1alpha1.integrations.PortalManagerApi/DeletePluginInstance"
	// PortalManagerApiListPluginInstanceProcedure is the fully-qualified name of the PortalManagerApi's
	// ListPluginInstance RPC.
	PortalManagerApiListPluginInstanceProcedure = "/api.v1alpha1.integrations.PortalManagerApi/ListPluginInstance"
	// PortalManagerApiListFlowFieldNamesProcedure is the fully-qualified name of the PortalManagerApi's
	// ListFlowFieldNames RPC.
	PortalManagerApiListFlowFieldNamesProcedure = "/api.v1alpha1.integrations.PortalManagerApi/ListFlowFieldNames"
	// PortalManagerApiListAvailableVerificationFieldsProcedure is the fully-qualified name of the
	// PortalManagerApi's ListAvailableVerificationFields RPC.
	PortalManagerApiListAvailableVerificationFieldsProcedure = "/api.v1alpha1.integrations.PortalManagerApi/ListAvailableVerificationFields"
	// PortalManagerApiListAvailablePaymentFieldsProcedure is the fully-qualified name of the
	// PortalManagerApi's ListAvailablePaymentFields RPC.
	PortalManagerApiListAvailablePaymentFieldsProcedure = "/api.v1alpha1.integrations.PortalManagerApi/ListAvailablePaymentFields"
)

// PortalManagerApiClient is a client for the api.v1alpha1.integrations.PortalManagerApi service.
type PortalManagerApiClient interface {
	UpsertPortalConfig(context.Context, *connect_go.Request[integrations.UpsertPortalConfigReq]) (*connect_go.Response[integrations.UpsertPortalConfigRes], error)
	ListPortalConfigs(context.Context, *connect_go.Request[integrations.ListPortalConfigsReq]) (*connect_go.Response[integrations.ListPortalConfigsRes], error)
	GetPortalConfig(context.Context, *connect_go.Request[integrations.GetPortalConfigReq]) (*connect_go.Response[integrations.GetPortalConfigRes], error)
	DeletePortalConfig(context.Context, *connect_go.Request[integrations.DeletePortalConfigReq]) (*connect_go.Response[integrations.DeletePortalConfigRes], error)
	UpdatePortalConfigLogo(context.Context, *connect_go.Request[integrations.UpdatePortalConfigLogoReq]) (*connect_go.Response[integrations.UpdatePortalConfigLogoRes], error)
	GetPortalConfigLogo(context.Context, *connect_go.Request[integrations.GetPortalConfigLogoReq]) (*connect_go.Response[integrations.GetPortalConfigLogoRes], error)
	// portal links
	ListPortalLinks(context.Context, *connect_go.Request[integrations.ListPortalLinksReq]) (*connect_go.Response[integrations.ListPortalLinksRes], error)
	GetPortalLink(context.Context, *connect_go.Request[integrations.GetPortalLinkReq]) (*connect_go.Response[integrations.GetPortalLinkRes], error)
	DeletePortalLink(context.Context, *connect_go.Request[integrations.DeletePortalLinkReq]) (*connect_go.Response[integrations.DeletePortalLinkRes], error)
	CreatePortalLinks(context.Context, *connect_go.Request[integrations.CreatePortalLinksReq]) (*connect_go.Response[integrations.CreatePortalLinksRes], error)
	// portals
	UpsertPortal(context.Context, *connect_go.Request[integrations.UpsertPortalReq]) (*connect_go.Response[integrations.UpsertPortalRes], error)
	GetPortal(context.Context, *connect_go.Request[integrations.GetPortalReq]) (*connect_go.Response[integrations.GetPortalRes], error)
	DeletePortal(context.Context, *connect_go.Request[integrations.DeletePortalReq]) (*connect_go.Response[integrations.DeletePortalRes], error)
	ListPortals(context.Context, *connect_go.Request[integrations.ListPortalsReq]) (*connect_go.Response[integrations.ListPortalsRes], error)
	ListDetailedPortals(context.Context, *connect_go.Request[integrations.ListDetailedPortalsReq]) (*connect_go.Response[integrations.ListDetailedPortalsRes], error)
	GetDetailedPortal(context.Context, *connect_go.Request[integrations.GetDetailedPortalReq]) (*connect_go.Response[integrations.GetDetailedPortalRes], error)
	// PluginInstances
	UpsertPluginInstance(context.Context, *connect_go.Request[integrations.UpsertPluginInstanceReq]) (*connect_go.Response[integrations.UpsertPluginInstanceRes], error)
	GetPluginInstance(context.Context, *connect_go.Request[integrations.GetPluginInstanceReq]) (*connect_go.Response[integrations.GetPluginInstanceRes], error)
	DeletePluginInstance(context.Context, *connect_go.Request[integrations.DeletePluginInstanceReq]) (*connect_go.Response[integrations.DeletePluginInstanceRes], error)
	ListPluginInstance(context.Context, *connect_go.Request[integrations.ListPluginInstanceReq]) (*connect_go.Response[integrations.ListPluginInstanceRes], error)
	ListFlowFieldNames(context.Context, *connect_go.Request[integrations.ListFlowFieldNamesReq]) (*connect_go.Response[integrations.ListFlowFieldNamesRes], error)
	// returns the default form fields for verification flow
	ListAvailableVerificationFields(context.Context, *connect_go.Request[integrations.ListAvailableVerificationFieldsReq]) (*connect_go.Response[integrations.ListAvailableVerificationFieldsRes], error)
	// returns the default form fields for payment flow
	ListAvailablePaymentFields(context.Context, *connect_go.Request[integrations.ListAvailablePaymentFieldsReq]) (*connect_go.Response[integrations.ListAvailablePaymentFieldsRes], error)
}

// NewPortalManagerApiClient constructs a client for the api.v1alpha1.integrations.PortalManagerApi
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPortalManagerApiClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PortalManagerApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &portalManagerApiClient{
		upsertPortalConfig: connect_go.NewClient[integrations.UpsertPortalConfigReq, integrations.UpsertPortalConfigRes](
			httpClient,
			baseURL+PortalManagerApiUpsertPortalConfigProcedure,
			opts...,
		),
		listPortalConfigs: connect_go.NewClient[integrations.ListPortalConfigsReq, integrations.ListPortalConfigsRes](
			httpClient,
			baseURL+PortalManagerApiListPortalConfigsProcedure,
			opts...,
		),
		getPortalConfig: connect_go.NewClient[integrations.GetPortalConfigReq, integrations.GetPortalConfigRes](
			httpClient,
			baseURL+PortalManagerApiGetPortalConfigProcedure,
			opts...,
		),
		deletePortalConfig: connect_go.NewClient[integrations.DeletePortalConfigReq, integrations.DeletePortalConfigRes](
			httpClient,
			baseURL+PortalManagerApiDeletePortalConfigProcedure,
			opts...,
		),
		updatePortalConfigLogo: connect_go.NewClient[integrations.UpdatePortalConfigLogoReq, integrations.UpdatePortalConfigLogoRes](
			httpClient,
			baseURL+PortalManagerApiUpdatePortalConfigLogoProcedure,
			opts...,
		),
		getPortalConfigLogo: connect_go.NewClient[integrations.GetPortalConfigLogoReq, integrations.GetPortalConfigLogoRes](
			httpClient,
			baseURL+PortalManagerApiGetPortalConfigLogoProcedure,
			opts...,
		),
		listPortalLinks: connect_go.NewClient[integrations.ListPortalLinksReq, integrations.ListPortalLinksRes](
			httpClient,
			baseURL+PortalManagerApiListPortalLinksProcedure,
			opts...,
		),
		getPortalLink: connect_go.NewClient[integrations.GetPortalLinkReq, integrations.GetPortalLinkRes](
			httpClient,
			baseURL+PortalManagerApiGetPortalLinkProcedure,
			opts...,
		),
		deletePortalLink: connect_go.NewClient[integrations.DeletePortalLinkReq, integrations.DeletePortalLinkRes](
			httpClient,
			baseURL+PortalManagerApiDeletePortalLinkProcedure,
			opts...,
		),
		createPortalLinks: connect_go.NewClient[integrations.CreatePortalLinksReq, integrations.CreatePortalLinksRes](
			httpClient,
			baseURL+PortalManagerApiCreatePortalLinksProcedure,
			opts...,
		),
		upsertPortal: connect_go.NewClient[integrations.UpsertPortalReq, integrations.UpsertPortalRes](
			httpClient,
			baseURL+PortalManagerApiUpsertPortalProcedure,
			opts...,
		),
		getPortal: connect_go.NewClient[integrations.GetPortalReq, integrations.GetPortalRes](
			httpClient,
			baseURL+PortalManagerApiGetPortalProcedure,
			opts...,
		),
		deletePortal: connect_go.NewClient[integrations.DeletePortalReq, integrations.DeletePortalRes](
			httpClient,
			baseURL+PortalManagerApiDeletePortalProcedure,
			opts...,
		),
		listPortals: connect_go.NewClient[integrations.ListPortalsReq, integrations.ListPortalsRes](
			httpClient,
			baseURL+PortalManagerApiListPortalsProcedure,
			opts...,
		),
		listDetailedPortals: connect_go.NewClient[integrations.ListDetailedPortalsReq, integrations.ListDetailedPortalsRes](
			httpClient,
			baseURL+PortalManagerApiListDetailedPortalsProcedure,
			opts...,
		),
		getDetailedPortal: connect_go.NewClient[integrations.GetDetailedPortalReq, integrations.GetDetailedPortalRes](
			httpClient,
			baseURL+PortalManagerApiGetDetailedPortalProcedure,
			opts...,
		),
		upsertPluginInstance: connect_go.NewClient[integrations.UpsertPluginInstanceReq, integrations.UpsertPluginInstanceRes](
			httpClient,
			baseURL+PortalManagerApiUpsertPluginInstanceProcedure,
			opts...,
		),
		getPluginInstance: connect_go.NewClient[integrations.GetPluginInstanceReq, integrations.GetPluginInstanceRes](
			httpClient,
			baseURL+PortalManagerApiGetPluginInstanceProcedure,
			opts...,
		),
		deletePluginInstance: connect_go.NewClient[integrations.DeletePluginInstanceReq, integrations.DeletePluginInstanceRes](
			httpClient,
			baseURL+PortalManagerApiDeletePluginInstanceProcedure,
			opts...,
		),
		listPluginInstance: connect_go.NewClient[integrations.ListPluginInstanceReq, integrations.ListPluginInstanceRes](
			httpClient,
			baseURL+PortalManagerApiListPluginInstanceProcedure,
			opts...,
		),
		listFlowFieldNames: connect_go.NewClient[integrations.ListFlowFieldNamesReq, integrations.ListFlowFieldNamesRes](
			httpClient,
			baseURL+PortalManagerApiListFlowFieldNamesProcedure,
			opts...,
		),
		listAvailableVerificationFields: connect_go.NewClient[integrations.ListAvailableVerificationFieldsReq, integrations.ListAvailableVerificationFieldsRes](
			httpClient,
			baseURL+PortalManagerApiListAvailableVerificationFieldsProcedure,
			opts...,
		),
		listAvailablePaymentFields: connect_go.NewClient[integrations.ListAvailablePaymentFieldsReq, integrations.ListAvailablePaymentFieldsRes](
			httpClient,
			baseURL+PortalManagerApiListAvailablePaymentFieldsProcedure,
			opts...,
		),
	}
}

// portalManagerApiClient implements PortalManagerApiClient.
type portalManagerApiClient struct {
	upsertPortalConfig              *connect_go.Client[integrations.UpsertPortalConfigReq, integrations.UpsertPortalConfigRes]
	listPortalConfigs               *connect_go.Client[integrations.ListPortalConfigsReq, integrations.ListPortalConfigsRes]
	getPortalConfig                 *connect_go.Client[integrations.GetPortalConfigReq, integrations.GetPortalConfigRes]
	deletePortalConfig              *connect_go.Client[integrations.DeletePortalConfigReq, integrations.DeletePortalConfigRes]
	updatePortalConfigLogo          *connect_go.Client[integrations.UpdatePortalConfigLogoReq, integrations.UpdatePortalConfigLogoRes]
	getPortalConfigLogo             *connect_go.Client[integrations.GetPortalConfigLogoReq, integrations.GetPortalConfigLogoRes]
	listPortalLinks                 *connect_go.Client[integrations.ListPortalLinksReq, integrations.ListPortalLinksRes]
	getPortalLink                   *connect_go.Client[integrations.GetPortalLinkReq, integrations.GetPortalLinkRes]
	deletePortalLink                *connect_go.Client[integrations.DeletePortalLinkReq, integrations.DeletePortalLinkRes]
	createPortalLinks               *connect_go.Client[integrations.CreatePortalLinksReq, integrations.CreatePortalLinksRes]
	upsertPortal                    *connect_go.Client[integrations.UpsertPortalReq, integrations.UpsertPortalRes]
	getPortal                       *connect_go.Client[integrations.GetPortalReq, integrations.GetPortalRes]
	deletePortal                    *connect_go.Client[integrations.DeletePortalReq, integrations.DeletePortalRes]
	listPortals                     *connect_go.Client[integrations.ListPortalsReq, integrations.ListPortalsRes]
	listDetailedPortals             *connect_go.Client[integrations.ListDetailedPortalsReq, integrations.ListDetailedPortalsRes]
	getDetailedPortal               *connect_go.Client[integrations.GetDetailedPortalReq, integrations.GetDetailedPortalRes]
	upsertPluginInstance            *connect_go.Client[integrations.UpsertPluginInstanceReq, integrations.UpsertPluginInstanceRes]
	getPluginInstance               *connect_go.Client[integrations.GetPluginInstanceReq, integrations.GetPluginInstanceRes]
	deletePluginInstance            *connect_go.Client[integrations.DeletePluginInstanceReq, integrations.DeletePluginInstanceRes]
	listPluginInstance              *connect_go.Client[integrations.ListPluginInstanceReq, integrations.ListPluginInstanceRes]
	listFlowFieldNames              *connect_go.Client[integrations.ListFlowFieldNamesReq, integrations.ListFlowFieldNamesRes]
	listAvailableVerificationFields *connect_go.Client[integrations.ListAvailableVerificationFieldsReq, integrations.ListAvailableVerificationFieldsRes]
	listAvailablePaymentFields      *connect_go.Client[integrations.ListAvailablePaymentFieldsReq, integrations.ListAvailablePaymentFieldsRes]
}

// UpsertPortalConfig calls api.v1alpha1.integrations.PortalManagerApi.UpsertPortalConfig.
func (c *portalManagerApiClient) UpsertPortalConfig(ctx context.Context, req *connect_go.Request[integrations.UpsertPortalConfigReq]) (*connect_go.Response[integrations.UpsertPortalConfigRes], error) {
	return c.upsertPortalConfig.CallUnary(ctx, req)
}

// ListPortalConfigs calls api.v1alpha1.integrations.PortalManagerApi.ListPortalConfigs.
func (c *portalManagerApiClient) ListPortalConfigs(ctx context.Context, req *connect_go.Request[integrations.ListPortalConfigsReq]) (*connect_go.Response[integrations.ListPortalConfigsRes], error) {
	return c.listPortalConfigs.CallUnary(ctx, req)
}

// GetPortalConfig calls api.v1alpha1.integrations.PortalManagerApi.GetPortalConfig.
func (c *portalManagerApiClient) GetPortalConfig(ctx context.Context, req *connect_go.Request[integrations.GetPortalConfigReq]) (*connect_go.Response[integrations.GetPortalConfigRes], error) {
	return c.getPortalConfig.CallUnary(ctx, req)
}

// DeletePortalConfig calls api.v1alpha1.integrations.PortalManagerApi.DeletePortalConfig.
func (c *portalManagerApiClient) DeletePortalConfig(ctx context.Context, req *connect_go.Request[integrations.DeletePortalConfigReq]) (*connect_go.Response[integrations.DeletePortalConfigRes], error) {
	return c.deletePortalConfig.CallUnary(ctx, req)
}

// UpdatePortalConfigLogo calls api.v1alpha1.integrations.PortalManagerApi.UpdatePortalConfigLogo.
func (c *portalManagerApiClient) UpdatePortalConfigLogo(ctx context.Context, req *connect_go.Request[integrations.UpdatePortalConfigLogoReq]) (*connect_go.Response[integrations.UpdatePortalConfigLogoRes], error) {
	return c.updatePortalConfigLogo.CallUnary(ctx, req)
}

// GetPortalConfigLogo calls api.v1alpha1.integrations.PortalManagerApi.GetPortalConfigLogo.
func (c *portalManagerApiClient) GetPortalConfigLogo(ctx context.Context, req *connect_go.Request[integrations.GetPortalConfigLogoReq]) (*connect_go.Response[integrations.GetPortalConfigLogoRes], error) {
	return c.getPortalConfigLogo.CallUnary(ctx, req)
}

// ListPortalLinks calls api.v1alpha1.integrations.PortalManagerApi.ListPortalLinks.
func (c *portalManagerApiClient) ListPortalLinks(ctx context.Context, req *connect_go.Request[integrations.ListPortalLinksReq]) (*connect_go.Response[integrations.ListPortalLinksRes], error) {
	return c.listPortalLinks.CallUnary(ctx, req)
}

// GetPortalLink calls api.v1alpha1.integrations.PortalManagerApi.GetPortalLink.
func (c *portalManagerApiClient) GetPortalLink(ctx context.Context, req *connect_go.Request[integrations.GetPortalLinkReq]) (*connect_go.Response[integrations.GetPortalLinkRes], error) {
	return c.getPortalLink.CallUnary(ctx, req)
}

// DeletePortalLink calls api.v1alpha1.integrations.PortalManagerApi.DeletePortalLink.
func (c *portalManagerApiClient) DeletePortalLink(ctx context.Context, req *connect_go.Request[integrations.DeletePortalLinkReq]) (*connect_go.Response[integrations.DeletePortalLinkRes], error) {
	return c.deletePortalLink.CallUnary(ctx, req)
}

// CreatePortalLinks calls api.v1alpha1.integrations.PortalManagerApi.CreatePortalLinks.
func (c *portalManagerApiClient) CreatePortalLinks(ctx context.Context, req *connect_go.Request[integrations.CreatePortalLinksReq]) (*connect_go.Response[integrations.CreatePortalLinksRes], error) {
	return c.createPortalLinks.CallUnary(ctx, req)
}

// UpsertPortal calls api.v1alpha1.integrations.PortalManagerApi.UpsertPortal.
func (c *portalManagerApiClient) UpsertPortal(ctx context.Context, req *connect_go.Request[integrations.UpsertPortalReq]) (*connect_go.Response[integrations.UpsertPortalRes], error) {
	return c.upsertPortal.CallUnary(ctx, req)
}

// GetPortal calls api.v1alpha1.integrations.PortalManagerApi.GetPortal.
func (c *portalManagerApiClient) GetPortal(ctx context.Context, req *connect_go.Request[integrations.GetPortalReq]) (*connect_go.Response[integrations.GetPortalRes], error) {
	return c.getPortal.CallUnary(ctx, req)
}

// DeletePortal calls api.v1alpha1.integrations.PortalManagerApi.DeletePortal.
func (c *portalManagerApiClient) DeletePortal(ctx context.Context, req *connect_go.Request[integrations.DeletePortalReq]) (*connect_go.Response[integrations.DeletePortalRes], error) {
	return c.deletePortal.CallUnary(ctx, req)
}

// ListPortals calls api.v1alpha1.integrations.PortalManagerApi.ListPortals.
func (c *portalManagerApiClient) ListPortals(ctx context.Context, req *connect_go.Request[integrations.ListPortalsReq]) (*connect_go.Response[integrations.ListPortalsRes], error) {
	return c.listPortals.CallUnary(ctx, req)
}

// ListDetailedPortals calls api.v1alpha1.integrations.PortalManagerApi.ListDetailedPortals.
func (c *portalManagerApiClient) ListDetailedPortals(ctx context.Context, req *connect_go.Request[integrations.ListDetailedPortalsReq]) (*connect_go.Response[integrations.ListDetailedPortalsRes], error) {
	return c.listDetailedPortals.CallUnary(ctx, req)
}

// GetDetailedPortal calls api.v1alpha1.integrations.PortalManagerApi.GetDetailedPortal.
func (c *portalManagerApiClient) GetDetailedPortal(ctx context.Context, req *connect_go.Request[integrations.GetDetailedPortalReq]) (*connect_go.Response[integrations.GetDetailedPortalRes], error) {
	return c.getDetailedPortal.CallUnary(ctx, req)
}

// UpsertPluginInstance calls api.v1alpha1.integrations.PortalManagerApi.UpsertPluginInstance.
func (c *portalManagerApiClient) UpsertPluginInstance(ctx context.Context, req *connect_go.Request[integrations.UpsertPluginInstanceReq]) (*connect_go.Response[integrations.UpsertPluginInstanceRes], error) {
	return c.upsertPluginInstance.CallUnary(ctx, req)
}

// GetPluginInstance calls api.v1alpha1.integrations.PortalManagerApi.GetPluginInstance.
func (c *portalManagerApiClient) GetPluginInstance(ctx context.Context, req *connect_go.Request[integrations.GetPluginInstanceReq]) (*connect_go.Response[integrations.GetPluginInstanceRes], error) {
	return c.getPluginInstance.CallUnary(ctx, req)
}

// DeletePluginInstance calls api.v1alpha1.integrations.PortalManagerApi.DeletePluginInstance.
func (c *portalManagerApiClient) DeletePluginInstance(ctx context.Context, req *connect_go.Request[integrations.DeletePluginInstanceReq]) (*connect_go.Response[integrations.DeletePluginInstanceRes], error) {
	return c.deletePluginInstance.CallUnary(ctx, req)
}

// ListPluginInstance calls api.v1alpha1.integrations.PortalManagerApi.ListPluginInstance.
func (c *portalManagerApiClient) ListPluginInstance(ctx context.Context, req *connect_go.Request[integrations.ListPluginInstanceReq]) (*connect_go.Response[integrations.ListPluginInstanceRes], error) {
	return c.listPluginInstance.CallUnary(ctx, req)
}

// ListFlowFieldNames calls api.v1alpha1.integrations.PortalManagerApi.ListFlowFieldNames.
func (c *portalManagerApiClient) ListFlowFieldNames(ctx context.Context, req *connect_go.Request[integrations.ListFlowFieldNamesReq]) (*connect_go.Response[integrations.ListFlowFieldNamesRes], error) {
	return c.listFlowFieldNames.CallUnary(ctx, req)
}

// ListAvailableVerificationFields calls
// api.v1alpha1.integrations.PortalManagerApi.ListAvailableVerificationFields.
func (c *portalManagerApiClient) ListAvailableVerificationFields(ctx context.Context, req *connect_go.Request[integrations.ListAvailableVerificationFieldsReq]) (*connect_go.Response[integrations.ListAvailableVerificationFieldsRes], error) {
	return c.listAvailableVerificationFields.CallUnary(ctx, req)
}

// ListAvailablePaymentFields calls
// api.v1alpha1.integrations.PortalManagerApi.ListAvailablePaymentFields.
func (c *portalManagerApiClient) ListAvailablePaymentFields(ctx context.Context, req *connect_go.Request[integrations.ListAvailablePaymentFieldsReq]) (*connect_go.Response[integrations.ListAvailablePaymentFieldsRes], error) {
	return c.listAvailablePaymentFields.CallUnary(ctx, req)
}

// PortalManagerApiHandler is an implementation of the api.v1alpha1.integrations.PortalManagerApi
// service.
type PortalManagerApiHandler interface {
	UpsertPortalConfig(context.Context, *connect_go.Request[integrations.UpsertPortalConfigReq]) (*connect_go.Response[integrations.UpsertPortalConfigRes], error)
	ListPortalConfigs(context.Context, *connect_go.Request[integrations.ListPortalConfigsReq]) (*connect_go.Response[integrations.ListPortalConfigsRes], error)
	GetPortalConfig(context.Context, *connect_go.Request[integrations.GetPortalConfigReq]) (*connect_go.Response[integrations.GetPortalConfigRes], error)
	DeletePortalConfig(context.Context, *connect_go.Request[integrations.DeletePortalConfigReq]) (*connect_go.Response[integrations.DeletePortalConfigRes], error)
	UpdatePortalConfigLogo(context.Context, *connect_go.Request[integrations.UpdatePortalConfigLogoReq]) (*connect_go.Response[integrations.UpdatePortalConfigLogoRes], error)
	GetPortalConfigLogo(context.Context, *connect_go.Request[integrations.GetPortalConfigLogoReq]) (*connect_go.Response[integrations.GetPortalConfigLogoRes], error)
	// portal links
	ListPortalLinks(context.Context, *connect_go.Request[integrations.ListPortalLinksReq]) (*connect_go.Response[integrations.ListPortalLinksRes], error)
	GetPortalLink(context.Context, *connect_go.Request[integrations.GetPortalLinkReq]) (*connect_go.Response[integrations.GetPortalLinkRes], error)
	DeletePortalLink(context.Context, *connect_go.Request[integrations.DeletePortalLinkReq]) (*connect_go.Response[integrations.DeletePortalLinkRes], error)
	CreatePortalLinks(context.Context, *connect_go.Request[integrations.CreatePortalLinksReq]) (*connect_go.Response[integrations.CreatePortalLinksRes], error)
	// portals
	UpsertPortal(context.Context, *connect_go.Request[integrations.UpsertPortalReq]) (*connect_go.Response[integrations.UpsertPortalRes], error)
	GetPortal(context.Context, *connect_go.Request[integrations.GetPortalReq]) (*connect_go.Response[integrations.GetPortalRes], error)
	DeletePortal(context.Context, *connect_go.Request[integrations.DeletePortalReq]) (*connect_go.Response[integrations.DeletePortalRes], error)
	ListPortals(context.Context, *connect_go.Request[integrations.ListPortalsReq]) (*connect_go.Response[integrations.ListPortalsRes], error)
	ListDetailedPortals(context.Context, *connect_go.Request[integrations.ListDetailedPortalsReq]) (*connect_go.Response[integrations.ListDetailedPortalsRes], error)
	GetDetailedPortal(context.Context, *connect_go.Request[integrations.GetDetailedPortalReq]) (*connect_go.Response[integrations.GetDetailedPortalRes], error)
	// PluginInstances
	UpsertPluginInstance(context.Context, *connect_go.Request[integrations.UpsertPluginInstanceReq]) (*connect_go.Response[integrations.UpsertPluginInstanceRes], error)
	GetPluginInstance(context.Context, *connect_go.Request[integrations.GetPluginInstanceReq]) (*connect_go.Response[integrations.GetPluginInstanceRes], error)
	DeletePluginInstance(context.Context, *connect_go.Request[integrations.DeletePluginInstanceReq]) (*connect_go.Response[integrations.DeletePluginInstanceRes], error)
	ListPluginInstance(context.Context, *connect_go.Request[integrations.ListPluginInstanceReq]) (*connect_go.Response[integrations.ListPluginInstanceRes], error)
	ListFlowFieldNames(context.Context, *connect_go.Request[integrations.ListFlowFieldNamesReq]) (*connect_go.Response[integrations.ListFlowFieldNamesRes], error)
	// returns the default form fields for verification flow
	ListAvailableVerificationFields(context.Context, *connect_go.Request[integrations.ListAvailableVerificationFieldsReq]) (*connect_go.Response[integrations.ListAvailableVerificationFieldsRes], error)
	// returns the default form fields for payment flow
	ListAvailablePaymentFields(context.Context, *connect_go.Request[integrations.ListAvailablePaymentFieldsReq]) (*connect_go.Response[integrations.ListAvailablePaymentFieldsRes], error)
}

// NewPortalManagerApiHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPortalManagerApiHandler(svc PortalManagerApiHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	portalManagerApiUpsertPortalConfigHandler := connect_go.NewUnaryHandler(
		PortalManagerApiUpsertPortalConfigProcedure,
		svc.UpsertPortalConfig,
		opts...,
	)
	portalManagerApiListPortalConfigsHandler := connect_go.NewUnaryHandler(
		PortalManagerApiListPortalConfigsProcedure,
		svc.ListPortalConfigs,
		opts...,
	)
	portalManagerApiGetPortalConfigHandler := connect_go.NewUnaryHandler(
		PortalManagerApiGetPortalConfigProcedure,
		svc.GetPortalConfig,
		opts...,
	)
	portalManagerApiDeletePortalConfigHandler := connect_go.NewUnaryHandler(
		PortalManagerApiDeletePortalConfigProcedure,
		svc.DeletePortalConfig,
		opts...,
	)
	portalManagerApiUpdatePortalConfigLogoHandler := connect_go.NewUnaryHandler(
		PortalManagerApiUpdatePortalConfigLogoProcedure,
		svc.UpdatePortalConfigLogo,
		opts...,
	)
	portalManagerApiGetPortalConfigLogoHandler := connect_go.NewUnaryHandler(
		PortalManagerApiGetPortalConfigLogoProcedure,
		svc.GetPortalConfigLogo,
		opts...,
	)
	portalManagerApiListPortalLinksHandler := connect_go.NewUnaryHandler(
		PortalManagerApiListPortalLinksProcedure,
		svc.ListPortalLinks,
		opts...,
	)
	portalManagerApiGetPortalLinkHandler := connect_go.NewUnaryHandler(
		PortalManagerApiGetPortalLinkProcedure,
		svc.GetPortalLink,
		opts...,
	)
	portalManagerApiDeletePortalLinkHandler := connect_go.NewUnaryHandler(
		PortalManagerApiDeletePortalLinkProcedure,
		svc.DeletePortalLink,
		opts...,
	)
	portalManagerApiCreatePortalLinksHandler := connect_go.NewUnaryHandler(
		PortalManagerApiCreatePortalLinksProcedure,
		svc.CreatePortalLinks,
		opts...,
	)
	portalManagerApiUpsertPortalHandler := connect_go.NewUnaryHandler(
		PortalManagerApiUpsertPortalProcedure,
		svc.UpsertPortal,
		opts...,
	)
	portalManagerApiGetPortalHandler := connect_go.NewUnaryHandler(
		PortalManagerApiGetPortalProcedure,
		svc.GetPortal,
		opts...,
	)
	portalManagerApiDeletePortalHandler := connect_go.NewUnaryHandler(
		PortalManagerApiDeletePortalProcedure,
		svc.DeletePortal,
		opts...,
	)
	portalManagerApiListPortalsHandler := connect_go.NewUnaryHandler(
		PortalManagerApiListPortalsProcedure,
		svc.ListPortals,
		opts...,
	)
	portalManagerApiListDetailedPortalsHandler := connect_go.NewUnaryHandler(
		PortalManagerApiListDetailedPortalsProcedure,
		svc.ListDetailedPortals,
		opts...,
	)
	portalManagerApiGetDetailedPortalHandler := connect_go.NewUnaryHandler(
		PortalManagerApiGetDetailedPortalProcedure,
		svc.GetDetailedPortal,
		opts...,
	)
	portalManagerApiUpsertPluginInstanceHandler := connect_go.NewUnaryHandler(
		PortalManagerApiUpsertPluginInstanceProcedure,
		svc.UpsertPluginInstance,
		opts...,
	)
	portalManagerApiGetPluginInstanceHandler := connect_go.NewUnaryHandler(
		PortalManagerApiGetPluginInstanceProcedure,
		svc.GetPluginInstance,
		opts...,
	)
	portalManagerApiDeletePluginInstanceHandler := connect_go.NewUnaryHandler(
		PortalManagerApiDeletePluginInstanceProcedure,
		svc.DeletePluginInstance,
		opts...,
	)
	portalManagerApiListPluginInstanceHandler := connect_go.NewUnaryHandler(
		PortalManagerApiListPluginInstanceProcedure,
		svc.ListPluginInstance,
		opts...,
	)
	portalManagerApiListFlowFieldNamesHandler := connect_go.NewUnaryHandler(
		PortalManagerApiListFlowFieldNamesProcedure,
		svc.ListFlowFieldNames,
		opts...,
	)
	portalManagerApiListAvailableVerificationFieldsHandler := connect_go.NewUnaryHandler(
		PortalManagerApiListAvailableVerificationFieldsProcedure,
		svc.ListAvailableVerificationFields,
		opts...,
	)
	portalManagerApiListAvailablePaymentFieldsHandler := connect_go.NewUnaryHandler(
		PortalManagerApiListAvailablePaymentFieldsProcedure,
		svc.ListAvailablePaymentFields,
		opts...,
	)
	return "/api.v1alpha1.integrations.PortalManagerApi/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PortalManagerApiUpsertPortalConfigProcedure:
			portalManagerApiUpsertPortalConfigHandler.ServeHTTP(w, r)
		case PortalManagerApiListPortalConfigsProcedure:
			portalManagerApiListPortalConfigsHandler.ServeHTTP(w, r)
		case PortalManagerApiGetPortalConfigProcedure:
			portalManagerApiGetPortalConfigHandler.ServeHTTP(w, r)
		case PortalManagerApiDeletePortalConfigProcedure:
			portalManagerApiDeletePortalConfigHandler.ServeHTTP(w, r)
		case PortalManagerApiUpdatePortalConfigLogoProcedure:
			portalManagerApiUpdatePortalConfigLogoHandler.ServeHTTP(w, r)
		case PortalManagerApiGetPortalConfigLogoProcedure:
			portalManagerApiGetPortalConfigLogoHandler.ServeHTTP(w, r)
		case PortalManagerApiListPortalLinksProcedure:
			portalManagerApiListPortalLinksHandler.ServeHTTP(w, r)
		case PortalManagerApiGetPortalLinkProcedure:
			portalManagerApiGetPortalLinkHandler.ServeHTTP(w, r)
		case PortalManagerApiDeletePortalLinkProcedure:
			portalManagerApiDeletePortalLinkHandler.ServeHTTP(w, r)
		case PortalManagerApiCreatePortalLinksProcedure:
			portalManagerApiCreatePortalLinksHandler.ServeHTTP(w, r)
		case PortalManagerApiUpsertPortalProcedure:
			portalManagerApiUpsertPortalHandler.ServeHTTP(w, r)
		case PortalManagerApiGetPortalProcedure:
			portalManagerApiGetPortalHandler.ServeHTTP(w, r)
		case PortalManagerApiDeletePortalProcedure:
			portalManagerApiDeletePortalHandler.ServeHTTP(w, r)
		case PortalManagerApiListPortalsProcedure:
			portalManagerApiListPortalsHandler.ServeHTTP(w, r)
		case PortalManagerApiListDetailedPortalsProcedure:
			portalManagerApiListDetailedPortalsHandler.ServeHTTP(w, r)
		case PortalManagerApiGetDetailedPortalProcedure:
			portalManagerApiGetDetailedPortalHandler.ServeHTTP(w, r)
		case PortalManagerApiUpsertPluginInstanceProcedure:
			portalManagerApiUpsertPluginInstanceHandler.ServeHTTP(w, r)
		case PortalManagerApiGetPluginInstanceProcedure:
			portalManagerApiGetPluginInstanceHandler.ServeHTTP(w, r)
		case PortalManagerApiDeletePluginInstanceProcedure:
			portalManagerApiDeletePluginInstanceHandler.ServeHTTP(w, r)
		case PortalManagerApiListPluginInstanceProcedure:
			portalManagerApiListPluginInstanceHandler.ServeHTTP(w, r)
		case PortalManagerApiListFlowFieldNamesProcedure:
			portalManagerApiListFlowFieldNamesHandler.ServeHTTP(w, r)
		case PortalManagerApiListAvailableVerificationFieldsProcedure:
			portalManagerApiListAvailableVerificationFieldsHandler.ServeHTTP(w, r)
		case PortalManagerApiListAvailablePaymentFieldsProcedure:
			portalManagerApiListAvailablePaymentFieldsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPortalManagerApiHandler returns CodeUnimplemented from all methods.
type UnimplementedPortalManagerApiHandler struct{}

func (UnimplementedPortalManagerApiHandler) UpsertPortalConfig(context.Context, *connect_go.Request[integrations.UpsertPortalConfigReq]) (*connect_go.Response[integrations.UpsertPortalConfigRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.UpsertPortalConfig is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) ListPortalConfigs(context.Context, *connect_go.Request[integrations.ListPortalConfigsReq]) (*connect_go.Response[integrations.ListPortalConfigsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.ListPortalConfigs is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) GetPortalConfig(context.Context, *connect_go.Request[integrations.GetPortalConfigReq]) (*connect_go.Response[integrations.GetPortalConfigRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.GetPortalConfig is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) DeletePortalConfig(context.Context, *connect_go.Request[integrations.DeletePortalConfigReq]) (*connect_go.Response[integrations.DeletePortalConfigRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.DeletePortalConfig is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) UpdatePortalConfigLogo(context.Context, *connect_go.Request[integrations.UpdatePortalConfigLogoReq]) (*connect_go.Response[integrations.UpdatePortalConfigLogoRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.UpdatePortalConfigLogo is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) GetPortalConfigLogo(context.Context, *connect_go.Request[integrations.GetPortalConfigLogoReq]) (*connect_go.Response[integrations.GetPortalConfigLogoRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.GetPortalConfigLogo is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) ListPortalLinks(context.Context, *connect_go.Request[integrations.ListPortalLinksReq]) (*connect_go.Response[integrations.ListPortalLinksRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.ListPortalLinks is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) GetPortalLink(context.Context, *connect_go.Request[integrations.GetPortalLinkReq]) (*connect_go.Response[integrations.GetPortalLinkRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.GetPortalLink is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) DeletePortalLink(context.Context, *connect_go.Request[integrations.DeletePortalLinkReq]) (*connect_go.Response[integrations.DeletePortalLinkRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.DeletePortalLink is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) CreatePortalLinks(context.Context, *connect_go.Request[integrations.CreatePortalLinksReq]) (*connect_go.Response[integrations.CreatePortalLinksRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.CreatePortalLinks is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) UpsertPortal(context.Context, *connect_go.Request[integrations.UpsertPortalReq]) (*connect_go.Response[integrations.UpsertPortalRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.UpsertPortal is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) GetPortal(context.Context, *connect_go.Request[integrations.GetPortalReq]) (*connect_go.Response[integrations.GetPortalRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.GetPortal is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) DeletePortal(context.Context, *connect_go.Request[integrations.DeletePortalReq]) (*connect_go.Response[integrations.DeletePortalRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.DeletePortal is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) ListPortals(context.Context, *connect_go.Request[integrations.ListPortalsReq]) (*connect_go.Response[integrations.ListPortalsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.ListPortals is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) ListDetailedPortals(context.Context, *connect_go.Request[integrations.ListDetailedPortalsReq]) (*connect_go.Response[integrations.ListDetailedPortalsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.ListDetailedPortals is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) GetDetailedPortal(context.Context, *connect_go.Request[integrations.GetDetailedPortalReq]) (*connect_go.Response[integrations.GetDetailedPortalRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.GetDetailedPortal is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) UpsertPluginInstance(context.Context, *connect_go.Request[integrations.UpsertPluginInstanceReq]) (*connect_go.Response[integrations.UpsertPluginInstanceRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.UpsertPluginInstance is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) GetPluginInstance(context.Context, *connect_go.Request[integrations.GetPluginInstanceReq]) (*connect_go.Response[integrations.GetPluginInstanceRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.GetPluginInstance is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) DeletePluginInstance(context.Context, *connect_go.Request[integrations.DeletePluginInstanceReq]) (*connect_go.Response[integrations.DeletePluginInstanceRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.DeletePluginInstance is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) ListPluginInstance(context.Context, *connect_go.Request[integrations.ListPluginInstanceReq]) (*connect_go.Response[integrations.ListPluginInstanceRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.ListPluginInstance is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) ListFlowFieldNames(context.Context, *connect_go.Request[integrations.ListFlowFieldNamesReq]) (*connect_go.Response[integrations.ListFlowFieldNamesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.ListFlowFieldNames is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) ListAvailableVerificationFields(context.Context, *connect_go.Request[integrations.ListAvailableVerificationFieldsReq]) (*connect_go.Response[integrations.ListAvailableVerificationFieldsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.ListAvailableVerificationFields is not implemented"))
}

func (UnimplementedPortalManagerApiHandler) ListAvailablePaymentFields(context.Context, *connect_go.Request[integrations.ListAvailablePaymentFieldsReq]) (*connect_go.Response[integrations.ListAvailablePaymentFieldsRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.PortalManagerApi.ListAvailablePaymentFields is not implemented"))
}
