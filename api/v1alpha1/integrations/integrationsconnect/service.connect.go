// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/integrations/service.proto

package integrationsconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	integrations "github.com/tcncloud/api-go/api/v1alpha1/integrations"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IntegrationsName is the fully-qualified name of the Integrations service.
	IntegrationsName = "api.v1alpha1.integrations.Integrations"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IntegrationsProcessProcedure is the fully-qualified name of the Integrations's Process RPC.
	IntegrationsProcessProcedure = "/api.v1alpha1.integrations.Integrations/Process"
	// IntegrationsGetIntegrationTransactionProcedure is the fully-qualified name of the Integrations's
	// GetIntegrationTransaction RPC.
	IntegrationsGetIntegrationTransactionProcedure = "/api.v1alpha1.integrations.Integrations/GetIntegrationTransaction"
	// IntegrationsGetIntegrationTransactionReportProcedure is the fully-qualified name of the
	// Integrations's GetIntegrationTransactionReport RPC.
	IntegrationsGetIntegrationTransactionReportProcedure = "/api.v1alpha1.integrations.Integrations/GetIntegrationTransactionReport"
	// IntegrationsGetIntegrationTransactionReportDataProcedure is the fully-qualified name of the
	// Integrations's GetIntegrationTransactionReportData RPC.
	IntegrationsGetIntegrationTransactionReportDataProcedure = "/api.v1alpha1.integrations.Integrations/GetIntegrationTransactionReportData"
	// IntegrationsSearchPastTransactionsProcedure is the fully-qualified name of the Integrations's
	// SearchPastTransactions RPC.
	IntegrationsSearchPastTransactionsProcedure = "/api.v1alpha1.integrations.Integrations/SearchPastTransactions"
	// IntegrationsGetAggregatedMetadataProcedure is the fully-qualified name of the Integrations's
	// GetAggregatedMetadata RPC.
	IntegrationsGetAggregatedMetadataProcedure = "/api.v1alpha1.integrations.Integrations/GetAggregatedMetadata"
	// IntegrationsGetPortalLinksByDateRangeProcedure is the fully-qualified name of the Integrations's
	// GetPortalLinksByDateRange RPC.
	IntegrationsGetPortalLinksByDateRangeProcedure = "/api.v1alpha1.integrations.Integrations/GetPortalLinksByDateRange"
	// IntegrationsCreateIntegrationConfigProcedure is the fully-qualified name of the Integrations's
	// CreateIntegrationConfig RPC.
	IntegrationsCreateIntegrationConfigProcedure = "/api.v1alpha1.integrations.Integrations/CreateIntegrationConfig"
	// IntegrationsGetIntegrationConfigProcedure is the fully-qualified name of the Integrations's
	// GetIntegrationConfig RPC.
	IntegrationsGetIntegrationConfigProcedure = "/api.v1alpha1.integrations.Integrations/GetIntegrationConfig"
	// IntegrationsUpdateIntegrationConfigProcedure is the fully-qualified name of the Integrations's
	// UpdateIntegrationConfig RPC.
	IntegrationsUpdateIntegrationConfigProcedure = "/api.v1alpha1.integrations.Integrations/UpdateIntegrationConfig"
	// IntegrationsDeleteIntegrationConfigProcedure is the fully-qualified name of the Integrations's
	// DeleteIntegrationConfig RPC.
	IntegrationsDeleteIntegrationConfigProcedure = "/api.v1alpha1.integrations.Integrations/DeleteIntegrationConfig"
	// IntegrationsListIntegrationsProcedure is the fully-qualified name of the Integrations's
	// ListIntegrations RPC.
	IntegrationsListIntegrationsProcedure = "/api.v1alpha1.integrations.Integrations/ListIntegrations"
	// IntegrationsListIntegrationsForOrgProcedure is the fully-qualified name of the Integrations's
	// ListIntegrationsForOrg RPC.
	IntegrationsListIntegrationsForOrgProcedure = "/api.v1alpha1.integrations.Integrations/ListIntegrationsForOrg"
	// IntegrationsListIntegrationConfigNamesProcedure is the fully-qualified name of the Integrations's
	// ListIntegrationConfigNames RPC.
	IntegrationsListIntegrationConfigNamesProcedure = "/api.v1alpha1.integrations.Integrations/ListIntegrationConfigNames"
	// IntegrationsListJourneyConfigsProcedure is the fully-qualified name of the Integrations's
	// ListJourneyConfigs RPC.
	IntegrationsListJourneyConfigsProcedure = "/api.v1alpha1.integrations.Integrations/ListJourneyConfigs"
	// IntegrationsListNonJourneyConfigsProcedure is the fully-qualified name of the Integrations's
	// ListNonJourneyConfigs RPC.
	IntegrationsListNonJourneyConfigsProcedure = "/api.v1alpha1.integrations.Integrations/ListNonJourneyConfigs"
	// IntegrationsCreatePortalConfigProcedure is the fully-qualified name of the Integrations's
	// CreatePortalConfig RPC.
	IntegrationsCreatePortalConfigProcedure = "/api.v1alpha1.integrations.Integrations/CreatePortalConfig"
	// IntegrationsListPortalConfigsProcedure is the fully-qualified name of the Integrations's
	// ListPortalConfigs RPC.
	IntegrationsListPortalConfigsProcedure = "/api.v1alpha1.integrations.Integrations/ListPortalConfigs"
	// IntegrationsUpdatePortalConfigProcedure is the fully-qualified name of the Integrations's
	// UpdatePortalConfig RPC.
	IntegrationsUpdatePortalConfigProcedure = "/api.v1alpha1.integrations.Integrations/UpdatePortalConfig"
	// IntegrationsGetPortalConfigProcedure is the fully-qualified name of the Integrations's
	// GetPortalConfig RPC.
	IntegrationsGetPortalConfigProcedure = "/api.v1alpha1.integrations.Integrations/GetPortalConfig"
	// IntegrationsDeletePortalConfigProcedure is the fully-qualified name of the Integrations's
	// DeletePortalConfig RPC.
	IntegrationsDeletePortalConfigProcedure = "/api.v1alpha1.integrations.Integrations/DeletePortalConfig"
	// IntegrationsUpdatePortalLogoProcedure is the fully-qualified name of the Integrations's
	// UpdatePortalLogo RPC.
	IntegrationsUpdatePortalLogoProcedure = "/api.v1alpha1.integrations.Integrations/UpdatePortalLogo"
	// IntegrationsGetPortalLogoProcedure is the fully-qualified name of the Integrations's
	// GetPortalLogo RPC.
	IntegrationsGetPortalLogoProcedure = "/api.v1alpha1.integrations.Integrations/GetPortalLogo"
	// IntegrationsCreatePaymentPortalLinksProcedure is the fully-qualified name of the Integrations's
	// CreatePaymentPortalLinks RPC.
	IntegrationsCreatePaymentPortalLinksProcedure = "/api.v1alpha1.integrations.Integrations/CreatePaymentPortalLinks"
	// IntegrationsSummaryProcedure is the fully-qualified name of the Integrations's Summary RPC.
	IntegrationsSummaryProcedure = "/api.v1alpha1.integrations.Integrations/Summary"
	// IntegrationsListIntegrationTemplatesByConfigProcedure is the fully-qualified name of the
	// Integrations's ListIntegrationTemplatesByConfig RPC.
	IntegrationsListIntegrationTemplatesByConfigProcedure = "/api.v1alpha1.integrations.Integrations/ListIntegrationTemplatesByConfig"
	// IntegrationsCallEpicPatientProcedure is the fully-qualified name of the Integrations's
	// CallEpicPatient RPC.
	IntegrationsCallEpicPatientProcedure = "/api.v1alpha1.integrations.Integrations/CallEpicPatient"
	// IntegrationsHangUpEpicPatientCallProcedure is the fully-qualified name of the Integrations's
	// HangUpEpicPatientCall RPC.
	IntegrationsHangUpEpicPatientCallProcedure = "/api.v1alpha1.integrations.Integrations/HangUpEpicPatientCall"
	// IntegrationsGenerateEpicKeyPairsProcedure is the fully-qualified name of the Integrations's
	// GenerateEpicKeyPairs RPC.
	IntegrationsGenerateEpicKeyPairsProcedure = "/api.v1alpha1.integrations.Integrations/GenerateEpicKeyPairs"
	// IntegrationsPopulateIntegrationLinkProcedure is the fully-qualified name of the Integrations's
	// PopulateIntegrationLink RPC.
	IntegrationsPopulateIntegrationLinkProcedure = "/api.v1alpha1.integrations.Integrations/PopulateIntegrationLink"
)

// IntegrationsClient is a client for the api.v1alpha1.integrations.Integrations service.
type IntegrationsClient interface {
	// combine rquest parameters with the config parameters and run the integration method
	Process(context.Context, *connect_go.Request[integrations.ProcessReq]) (*connect_go.Response[integrations.ProcessRes], error)
	// get an integration transaction
	GetIntegrationTransaction(context.Context, *connect_go.Request[integrations.GetIntegrationTransactionReq]) (*connect_go.Response[integrations.IntegrationTransaction], error)
	GetIntegrationTransactionReport(context.Context, *connect_go.Request[integrations.GetIntegrationTransactionReportReq]) (*connect_go.Response[integrations.GetIntegrationTransactionReportRes], error)
	GetIntegrationTransactionReportData(context.Context, *connect_go.Request[integrations.GetIntegrationTransactionReportDataReq]) (*connect_go.Response[integrations.GetIntegrationTransactionReportDataRes], error)
	SearchPastTransactions(context.Context, *connect_go.Request[integrations.SearchPastTransactionsRequest]) (*connect_go.Response[integrations.SearchPastTransactionsResponse], error)
	// GetAggregatedMetadata returns the aggregated metrics about the portal links for a specified date range
	GetAggregatedMetadata(context.Context, *connect_go.Request[integrations.GetAggregatedMetadataReq]) (*connect_go.Response[integrations.GetAggregatedMetadataRes], error)
	// GetPortalLinksByDateRange returns portal link metrics and portal linnk data for specific range
	GetPortalLinksByDateRange(context.Context, *connect_go.Request[integrations.GetPortalLinksByDateRangeReq]) (*connect_go.Response[integrations.GetPortalLinksByDateRangeRes], error)
	// create a integration config
	CreateIntegrationConfig(context.Context, *connect_go.Request[integrations.IntegrationConfig]) (*connect_go.Response[integrations.Empty], error)
	// get an integration config
	GetIntegrationConfig(context.Context, *connect_go.Request[integrations.GetIntegrationConfigReq]) (*connect_go.Response[integrations.IntegrationConfig], error)
	// update an integration config
	UpdateIntegrationConfig(context.Context, *connect_go.Request[integrations.UpdateIntegrationConfigReq]) (*connect_go.Response[integrations.Empty], error)
	// delete an integration config
	DeleteIntegrationConfig(context.Context, *connect_go.Request[integrations.DeleteIntegrationConfigReq]) (*connect_go.Response[integrations.Empty], error)
	// list all supported integrations
	ListIntegrations(context.Context, *connect_go.Request[integrations.Empty]) (*connect_go.Response[integrations.IntegrationInfos], error)
	ListIntegrationsForOrg(context.Context, *connect_go.Request[integrations.ListIntegrationsForOrgReq]) (*connect_go.Response[integrations.IntegrationInfos], error)
	// lists all the names of the configs for an org's integration type
	ListIntegrationConfigNames(context.Context, *connect_go.Request[integrations.ListIntegrationConfigNamesReq]) (*connect_go.Response[integrations.ListIntegrationConfigNamesRes], error)
	ListJourneyConfigs(context.Context, *connect_go.Request[integrations.ListJourneyConfigsReq]) (*connect_go.Response[integrations.IntegrationConfigs], error)
	ListNonJourneyConfigs(context.Context, *connect_go.Request[integrations.ListNonJourneyConfigsReq]) (*connect_go.Response[integrations.IntegrationConfigs], error)
	// TODO all services looking for payment portal configs should be using the
	// PortalManagerApi service in this same packages
	// CLUDG for the payment portal configs
	CreatePortalConfig(context.Context, *connect_go.Request[integrations.PortalConfig]) (*connect_go.Response[integrations.Empty], error)
	// TODO better signature
	// rpc ListPortalConfigs(ListPortalConfigsReq) returns (ListPortalConfigsRes);
	ListPortalConfigs(context.Context, *connect_go.Request[integrations.ListPortalConfigsReq]) (*connect_go.Response[integrations.PortalConfigs], error)
	UpdatePortalConfig(context.Context, *connect_go.Request[integrations.PortalConfig]) (*connect_go.Response[integrations.Empty], error)
	// TODO better signature
	// rpc GetPortalConfig(GetPortalConfigReq) returns (GetPortalConfigRes);
	GetPortalConfig(context.Context, *connect_go.Request[integrations.GetPortalConfigReq]) (*connect_go.Response[integrations.PortalConfig], error)
	// TODO better signature
	// rpc DeletePortalConfig(DeletePortalConfigReq) returns (DeletePortalConfigRes);
	DeletePortalConfig(context.Context, *connect_go.Request[integrations.DeletePortalConfigReq]) (*connect_go.Response[integrations.Empty], error)
	// TODO deprecate
	UpdatePortalLogo(context.Context, *connect_go.Request[integrations.UpdatePortalLogoReq]) (*connect_go.Response[integrations.Empty], error)
	// TODO deprecate
	GetPortalLogo(context.Context, *connect_go.Request[integrations.GetPortalLogoReq]) (*connect_go.Response[integrations.Logo], error)
	// TODO deprecate. use CreatePortalLinks on the PortalManagerApi
	// pulls the payment_link_config
	// creates an integration config for each set of data, and generates a url for the specific user
	CreatePaymentPortalLinks(context.Context, *connect_go.Request[integrations.CreatePaymentPortalLinksReq]) (*connect_go.Response[integrations.CreatePaymentPortalLinksRes], error)
	// takes a year in YYYY format and returns the summary of transaction for that year
	Summary(context.Context, *connect_go.Request[integrations.SummaryReq]) (*connect_go.Response[integrations.SummaryRes], error)
	// Lists integration templates that use the passed in integration config
	ListIntegrationTemplatesByConfig(context.Context, *connect_go.Request[integrations.ListIntegrationTemplatesByConfigReq]) (*connect_go.Response[integrations.ListIntegrationTemplatesByConfigRes], error)
	// CallEpicPatient initiates a call to the specified number from the agent using the click to call button within epic
	CallEpicPatient(context.Context, *connect_go.Request[integrations.CallEpicPatientReq]) (*connect_go.Response[integrations.CallEpicPatientRes], error)
	// CallEpicPatient initiates a call to the specified number from the agent using the click to call button within epic
	HangUpEpicPatientCall(context.Context, *connect_go.Request[integrations.HangUpEpicPatientCallReq]) (*connect_go.Response[integrations.Empty], error)
	// GenerateEpicKeyPairs creates 2 key pairs, stores the private keys, and returns the public keys
	GenerateEpicKeyPairs(context.Context, *connect_go.Request[integrations.GenerateEpicKeyPairReq]) (*connect_go.Response[integrations.GenerateEpicKeyPairRes], error)
	PopulateIntegrationLink(context.Context, *connect_go.Request[integrations.PopulateIntegrationLinkReq]) (*connect_go.Response[integrations.PopulateIntegrationLinkRes], error)
}

// NewIntegrationsClient constructs a client for the api.v1alpha1.integrations.Integrations service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIntegrationsClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IntegrationsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &integrationsClient{
		process: connect_go.NewClient[integrations.ProcessReq, integrations.ProcessRes](
			httpClient,
			baseURL+IntegrationsProcessProcedure,
			opts...,
		),
		getIntegrationTransaction: connect_go.NewClient[integrations.GetIntegrationTransactionReq, integrations.IntegrationTransaction](
			httpClient,
			baseURL+IntegrationsGetIntegrationTransactionProcedure,
			opts...,
		),
		getIntegrationTransactionReport: connect_go.NewClient[integrations.GetIntegrationTransactionReportReq, integrations.GetIntegrationTransactionReportRes](
			httpClient,
			baseURL+IntegrationsGetIntegrationTransactionReportProcedure,
			opts...,
		),
		getIntegrationTransactionReportData: connect_go.NewClient[integrations.GetIntegrationTransactionReportDataReq, integrations.GetIntegrationTransactionReportDataRes](
			httpClient,
			baseURL+IntegrationsGetIntegrationTransactionReportDataProcedure,
			opts...,
		),
		searchPastTransactions: connect_go.NewClient[integrations.SearchPastTransactionsRequest, integrations.SearchPastTransactionsResponse](
			httpClient,
			baseURL+IntegrationsSearchPastTransactionsProcedure,
			opts...,
		),
		getAggregatedMetadata: connect_go.NewClient[integrations.GetAggregatedMetadataReq, integrations.GetAggregatedMetadataRes](
			httpClient,
			baseURL+IntegrationsGetAggregatedMetadataProcedure,
			opts...,
		),
		getPortalLinksByDateRange: connect_go.NewClient[integrations.GetPortalLinksByDateRangeReq, integrations.GetPortalLinksByDateRangeRes](
			httpClient,
			baseURL+IntegrationsGetPortalLinksByDateRangeProcedure,
			opts...,
		),
		createIntegrationConfig: connect_go.NewClient[integrations.IntegrationConfig, integrations.Empty](
			httpClient,
			baseURL+IntegrationsCreateIntegrationConfigProcedure,
			opts...,
		),
		getIntegrationConfig: connect_go.NewClient[integrations.GetIntegrationConfigReq, integrations.IntegrationConfig](
			httpClient,
			baseURL+IntegrationsGetIntegrationConfigProcedure,
			opts...,
		),
		updateIntegrationConfig: connect_go.NewClient[integrations.UpdateIntegrationConfigReq, integrations.Empty](
			httpClient,
			baseURL+IntegrationsUpdateIntegrationConfigProcedure,
			opts...,
		),
		deleteIntegrationConfig: connect_go.NewClient[integrations.DeleteIntegrationConfigReq, integrations.Empty](
			httpClient,
			baseURL+IntegrationsDeleteIntegrationConfigProcedure,
			opts...,
		),
		listIntegrations: connect_go.NewClient[integrations.Empty, integrations.IntegrationInfos](
			httpClient,
			baseURL+IntegrationsListIntegrationsProcedure,
			opts...,
		),
		listIntegrationsForOrg: connect_go.NewClient[integrations.ListIntegrationsForOrgReq, integrations.IntegrationInfos](
			httpClient,
			baseURL+IntegrationsListIntegrationsForOrgProcedure,
			opts...,
		),
		listIntegrationConfigNames: connect_go.NewClient[integrations.ListIntegrationConfigNamesReq, integrations.ListIntegrationConfigNamesRes](
			httpClient,
			baseURL+IntegrationsListIntegrationConfigNamesProcedure,
			opts...,
		),
		listJourneyConfigs: connect_go.NewClient[integrations.ListJourneyConfigsReq, integrations.IntegrationConfigs](
			httpClient,
			baseURL+IntegrationsListJourneyConfigsProcedure,
			opts...,
		),
		listNonJourneyConfigs: connect_go.NewClient[integrations.ListNonJourneyConfigsReq, integrations.IntegrationConfigs](
			httpClient,
			baseURL+IntegrationsListNonJourneyConfigsProcedure,
			opts...,
		),
		createPortalConfig: connect_go.NewClient[integrations.PortalConfig, integrations.Empty](
			httpClient,
			baseURL+IntegrationsCreatePortalConfigProcedure,
			opts...,
		),
		listPortalConfigs: connect_go.NewClient[integrations.ListPortalConfigsReq, integrations.PortalConfigs](
			httpClient,
			baseURL+IntegrationsListPortalConfigsProcedure,
			opts...,
		),
		updatePortalConfig: connect_go.NewClient[integrations.PortalConfig, integrations.Empty](
			httpClient,
			baseURL+IntegrationsUpdatePortalConfigProcedure,
			opts...,
		),
		getPortalConfig: connect_go.NewClient[integrations.GetPortalConfigReq, integrations.PortalConfig](
			httpClient,
			baseURL+IntegrationsGetPortalConfigProcedure,
			opts...,
		),
		deletePortalConfig: connect_go.NewClient[integrations.DeletePortalConfigReq, integrations.Empty](
			httpClient,
			baseURL+IntegrationsDeletePortalConfigProcedure,
			opts...,
		),
		updatePortalLogo: connect_go.NewClient[integrations.UpdatePortalLogoReq, integrations.Empty](
			httpClient,
			baseURL+IntegrationsUpdatePortalLogoProcedure,
			opts...,
		),
		getPortalLogo: connect_go.NewClient[integrations.GetPortalLogoReq, integrations.Logo](
			httpClient,
			baseURL+IntegrationsGetPortalLogoProcedure,
			opts...,
		),
		createPaymentPortalLinks: connect_go.NewClient[integrations.CreatePaymentPortalLinksReq, integrations.CreatePaymentPortalLinksRes](
			httpClient,
			baseURL+IntegrationsCreatePaymentPortalLinksProcedure,
			opts...,
		),
		summary: connect_go.NewClient[integrations.SummaryReq, integrations.SummaryRes](
			httpClient,
			baseURL+IntegrationsSummaryProcedure,
			opts...,
		),
		listIntegrationTemplatesByConfig: connect_go.NewClient[integrations.ListIntegrationTemplatesByConfigReq, integrations.ListIntegrationTemplatesByConfigRes](
			httpClient,
			baseURL+IntegrationsListIntegrationTemplatesByConfigProcedure,
			opts...,
		),
		callEpicPatient: connect_go.NewClient[integrations.CallEpicPatientReq, integrations.CallEpicPatientRes](
			httpClient,
			baseURL+IntegrationsCallEpicPatientProcedure,
			opts...,
		),
		hangUpEpicPatientCall: connect_go.NewClient[integrations.HangUpEpicPatientCallReq, integrations.Empty](
			httpClient,
			baseURL+IntegrationsHangUpEpicPatientCallProcedure,
			opts...,
		),
		generateEpicKeyPairs: connect_go.NewClient[integrations.GenerateEpicKeyPairReq, integrations.GenerateEpicKeyPairRes](
			httpClient,
			baseURL+IntegrationsGenerateEpicKeyPairsProcedure,
			opts...,
		),
		populateIntegrationLink: connect_go.NewClient[integrations.PopulateIntegrationLinkReq, integrations.PopulateIntegrationLinkRes](
			httpClient,
			baseURL+IntegrationsPopulateIntegrationLinkProcedure,
			opts...,
		),
	}
}

// integrationsClient implements IntegrationsClient.
type integrationsClient struct {
	process                             *connect_go.Client[integrations.ProcessReq, integrations.ProcessRes]
	getIntegrationTransaction           *connect_go.Client[integrations.GetIntegrationTransactionReq, integrations.IntegrationTransaction]
	getIntegrationTransactionReport     *connect_go.Client[integrations.GetIntegrationTransactionReportReq, integrations.GetIntegrationTransactionReportRes]
	getIntegrationTransactionReportData *connect_go.Client[integrations.GetIntegrationTransactionReportDataReq, integrations.GetIntegrationTransactionReportDataRes]
	searchPastTransactions              *connect_go.Client[integrations.SearchPastTransactionsRequest, integrations.SearchPastTransactionsResponse]
	getAggregatedMetadata               *connect_go.Client[integrations.GetAggregatedMetadataReq, integrations.GetAggregatedMetadataRes]
	getPortalLinksByDateRange           *connect_go.Client[integrations.GetPortalLinksByDateRangeReq, integrations.GetPortalLinksByDateRangeRes]
	createIntegrationConfig             *connect_go.Client[integrations.IntegrationConfig, integrations.Empty]
	getIntegrationConfig                *connect_go.Client[integrations.GetIntegrationConfigReq, integrations.IntegrationConfig]
	updateIntegrationConfig             *connect_go.Client[integrations.UpdateIntegrationConfigReq, integrations.Empty]
	deleteIntegrationConfig             *connect_go.Client[integrations.DeleteIntegrationConfigReq, integrations.Empty]
	listIntegrations                    *connect_go.Client[integrations.Empty, integrations.IntegrationInfos]
	listIntegrationsForOrg              *connect_go.Client[integrations.ListIntegrationsForOrgReq, integrations.IntegrationInfos]
	listIntegrationConfigNames          *connect_go.Client[integrations.ListIntegrationConfigNamesReq, integrations.ListIntegrationConfigNamesRes]
	listJourneyConfigs                  *connect_go.Client[integrations.ListJourneyConfigsReq, integrations.IntegrationConfigs]
	listNonJourneyConfigs               *connect_go.Client[integrations.ListNonJourneyConfigsReq, integrations.IntegrationConfigs]
	createPortalConfig                  *connect_go.Client[integrations.PortalConfig, integrations.Empty]
	listPortalConfigs                   *connect_go.Client[integrations.ListPortalConfigsReq, integrations.PortalConfigs]
	updatePortalConfig                  *connect_go.Client[integrations.PortalConfig, integrations.Empty]
	getPortalConfig                     *connect_go.Client[integrations.GetPortalConfigReq, integrations.PortalConfig]
	deletePortalConfig                  *connect_go.Client[integrations.DeletePortalConfigReq, integrations.Empty]
	updatePortalLogo                    *connect_go.Client[integrations.UpdatePortalLogoReq, integrations.Empty]
	getPortalLogo                       *connect_go.Client[integrations.GetPortalLogoReq, integrations.Logo]
	createPaymentPortalLinks            *connect_go.Client[integrations.CreatePaymentPortalLinksReq, integrations.CreatePaymentPortalLinksRes]
	summary                             *connect_go.Client[integrations.SummaryReq, integrations.SummaryRes]
	listIntegrationTemplatesByConfig    *connect_go.Client[integrations.ListIntegrationTemplatesByConfigReq, integrations.ListIntegrationTemplatesByConfigRes]
	callEpicPatient                     *connect_go.Client[integrations.CallEpicPatientReq, integrations.CallEpicPatientRes]
	hangUpEpicPatientCall               *connect_go.Client[integrations.HangUpEpicPatientCallReq, integrations.Empty]
	generateEpicKeyPairs                *connect_go.Client[integrations.GenerateEpicKeyPairReq, integrations.GenerateEpicKeyPairRes]
	populateIntegrationLink             *connect_go.Client[integrations.PopulateIntegrationLinkReq, integrations.PopulateIntegrationLinkRes]
}

// Process calls api.v1alpha1.integrations.Integrations.Process.
func (c *integrationsClient) Process(ctx context.Context, req *connect_go.Request[integrations.ProcessReq]) (*connect_go.Response[integrations.ProcessRes], error) {
	return c.process.CallUnary(ctx, req)
}

// GetIntegrationTransaction calls api.v1alpha1.integrations.Integrations.GetIntegrationTransaction.
func (c *integrationsClient) GetIntegrationTransaction(ctx context.Context, req *connect_go.Request[integrations.GetIntegrationTransactionReq]) (*connect_go.Response[integrations.IntegrationTransaction], error) {
	return c.getIntegrationTransaction.CallUnary(ctx, req)
}

// GetIntegrationTransactionReport calls
// api.v1alpha1.integrations.Integrations.GetIntegrationTransactionReport.
func (c *integrationsClient) GetIntegrationTransactionReport(ctx context.Context, req *connect_go.Request[integrations.GetIntegrationTransactionReportReq]) (*connect_go.Response[integrations.GetIntegrationTransactionReportRes], error) {
	return c.getIntegrationTransactionReport.CallUnary(ctx, req)
}

// GetIntegrationTransactionReportData calls
// api.v1alpha1.integrations.Integrations.GetIntegrationTransactionReportData.
func (c *integrationsClient) GetIntegrationTransactionReportData(ctx context.Context, req *connect_go.Request[integrations.GetIntegrationTransactionReportDataReq]) (*connect_go.Response[integrations.GetIntegrationTransactionReportDataRes], error) {
	return c.getIntegrationTransactionReportData.CallUnary(ctx, req)
}

// SearchPastTransactions calls api.v1alpha1.integrations.Integrations.SearchPastTransactions.
func (c *integrationsClient) SearchPastTransactions(ctx context.Context, req *connect_go.Request[integrations.SearchPastTransactionsRequest]) (*connect_go.Response[integrations.SearchPastTransactionsResponse], error) {
	return c.searchPastTransactions.CallUnary(ctx, req)
}

// GetAggregatedMetadata calls api.v1alpha1.integrations.Integrations.GetAggregatedMetadata.
func (c *integrationsClient) GetAggregatedMetadata(ctx context.Context, req *connect_go.Request[integrations.GetAggregatedMetadataReq]) (*connect_go.Response[integrations.GetAggregatedMetadataRes], error) {
	return c.getAggregatedMetadata.CallUnary(ctx, req)
}

// GetPortalLinksByDateRange calls api.v1alpha1.integrations.Integrations.GetPortalLinksByDateRange.
func (c *integrationsClient) GetPortalLinksByDateRange(ctx context.Context, req *connect_go.Request[integrations.GetPortalLinksByDateRangeReq]) (*connect_go.Response[integrations.GetPortalLinksByDateRangeRes], error) {
	return c.getPortalLinksByDateRange.CallUnary(ctx, req)
}

// CreateIntegrationConfig calls api.v1alpha1.integrations.Integrations.CreateIntegrationConfig.
func (c *integrationsClient) CreateIntegrationConfig(ctx context.Context, req *connect_go.Request[integrations.IntegrationConfig]) (*connect_go.Response[integrations.Empty], error) {
	return c.createIntegrationConfig.CallUnary(ctx, req)
}

// GetIntegrationConfig calls api.v1alpha1.integrations.Integrations.GetIntegrationConfig.
func (c *integrationsClient) GetIntegrationConfig(ctx context.Context, req *connect_go.Request[integrations.GetIntegrationConfigReq]) (*connect_go.Response[integrations.IntegrationConfig], error) {
	return c.getIntegrationConfig.CallUnary(ctx, req)
}

// UpdateIntegrationConfig calls api.v1alpha1.integrations.Integrations.UpdateIntegrationConfig.
func (c *integrationsClient) UpdateIntegrationConfig(ctx context.Context, req *connect_go.Request[integrations.UpdateIntegrationConfigReq]) (*connect_go.Response[integrations.Empty], error) {
	return c.updateIntegrationConfig.CallUnary(ctx, req)
}

// DeleteIntegrationConfig calls api.v1alpha1.integrations.Integrations.DeleteIntegrationConfig.
func (c *integrationsClient) DeleteIntegrationConfig(ctx context.Context, req *connect_go.Request[integrations.DeleteIntegrationConfigReq]) (*connect_go.Response[integrations.Empty], error) {
	return c.deleteIntegrationConfig.CallUnary(ctx, req)
}

// ListIntegrations calls api.v1alpha1.integrations.Integrations.ListIntegrations.
func (c *integrationsClient) ListIntegrations(ctx context.Context, req *connect_go.Request[integrations.Empty]) (*connect_go.Response[integrations.IntegrationInfos], error) {
	return c.listIntegrations.CallUnary(ctx, req)
}

// ListIntegrationsForOrg calls api.v1alpha1.integrations.Integrations.ListIntegrationsForOrg.
func (c *integrationsClient) ListIntegrationsForOrg(ctx context.Context, req *connect_go.Request[integrations.ListIntegrationsForOrgReq]) (*connect_go.Response[integrations.IntegrationInfos], error) {
	return c.listIntegrationsForOrg.CallUnary(ctx, req)
}

// ListIntegrationConfigNames calls
// api.v1alpha1.integrations.Integrations.ListIntegrationConfigNames.
func (c *integrationsClient) ListIntegrationConfigNames(ctx context.Context, req *connect_go.Request[integrations.ListIntegrationConfigNamesReq]) (*connect_go.Response[integrations.ListIntegrationConfigNamesRes], error) {
	return c.listIntegrationConfigNames.CallUnary(ctx, req)
}

// ListJourneyConfigs calls api.v1alpha1.integrations.Integrations.ListJourneyConfigs.
func (c *integrationsClient) ListJourneyConfigs(ctx context.Context, req *connect_go.Request[integrations.ListJourneyConfigsReq]) (*connect_go.Response[integrations.IntegrationConfigs], error) {
	return c.listJourneyConfigs.CallUnary(ctx, req)
}

// ListNonJourneyConfigs calls api.v1alpha1.integrations.Integrations.ListNonJourneyConfigs.
func (c *integrationsClient) ListNonJourneyConfigs(ctx context.Context, req *connect_go.Request[integrations.ListNonJourneyConfigsReq]) (*connect_go.Response[integrations.IntegrationConfigs], error) {
	return c.listNonJourneyConfigs.CallUnary(ctx, req)
}

// CreatePortalConfig calls api.v1alpha1.integrations.Integrations.CreatePortalConfig.
func (c *integrationsClient) CreatePortalConfig(ctx context.Context, req *connect_go.Request[integrations.PortalConfig]) (*connect_go.Response[integrations.Empty], error) {
	return c.createPortalConfig.CallUnary(ctx, req)
}

// ListPortalConfigs calls api.v1alpha1.integrations.Integrations.ListPortalConfigs.
func (c *integrationsClient) ListPortalConfigs(ctx context.Context, req *connect_go.Request[integrations.ListPortalConfigsReq]) (*connect_go.Response[integrations.PortalConfigs], error) {
	return c.listPortalConfigs.CallUnary(ctx, req)
}

// UpdatePortalConfig calls api.v1alpha1.integrations.Integrations.UpdatePortalConfig.
func (c *integrationsClient) UpdatePortalConfig(ctx context.Context, req *connect_go.Request[integrations.PortalConfig]) (*connect_go.Response[integrations.Empty], error) {
	return c.updatePortalConfig.CallUnary(ctx, req)
}

// GetPortalConfig calls api.v1alpha1.integrations.Integrations.GetPortalConfig.
func (c *integrationsClient) GetPortalConfig(ctx context.Context, req *connect_go.Request[integrations.GetPortalConfigReq]) (*connect_go.Response[integrations.PortalConfig], error) {
	return c.getPortalConfig.CallUnary(ctx, req)
}

// DeletePortalConfig calls api.v1alpha1.integrations.Integrations.DeletePortalConfig.
func (c *integrationsClient) DeletePortalConfig(ctx context.Context, req *connect_go.Request[integrations.DeletePortalConfigReq]) (*connect_go.Response[integrations.Empty], error) {
	return c.deletePortalConfig.CallUnary(ctx, req)
}

// UpdatePortalLogo calls api.v1alpha1.integrations.Integrations.UpdatePortalLogo.
func (c *integrationsClient) UpdatePortalLogo(ctx context.Context, req *connect_go.Request[integrations.UpdatePortalLogoReq]) (*connect_go.Response[integrations.Empty], error) {
	return c.updatePortalLogo.CallUnary(ctx, req)
}

// GetPortalLogo calls api.v1alpha1.integrations.Integrations.GetPortalLogo.
func (c *integrationsClient) GetPortalLogo(ctx context.Context, req *connect_go.Request[integrations.GetPortalLogoReq]) (*connect_go.Response[integrations.Logo], error) {
	return c.getPortalLogo.CallUnary(ctx, req)
}

// CreatePaymentPortalLinks calls api.v1alpha1.integrations.Integrations.CreatePaymentPortalLinks.
func (c *integrationsClient) CreatePaymentPortalLinks(ctx context.Context, req *connect_go.Request[integrations.CreatePaymentPortalLinksReq]) (*connect_go.Response[integrations.CreatePaymentPortalLinksRes], error) {
	return c.createPaymentPortalLinks.CallUnary(ctx, req)
}

// Summary calls api.v1alpha1.integrations.Integrations.Summary.
func (c *integrationsClient) Summary(ctx context.Context, req *connect_go.Request[integrations.SummaryReq]) (*connect_go.Response[integrations.SummaryRes], error) {
	return c.summary.CallUnary(ctx, req)
}

// ListIntegrationTemplatesByConfig calls
// api.v1alpha1.integrations.Integrations.ListIntegrationTemplatesByConfig.
func (c *integrationsClient) ListIntegrationTemplatesByConfig(ctx context.Context, req *connect_go.Request[integrations.ListIntegrationTemplatesByConfigReq]) (*connect_go.Response[integrations.ListIntegrationTemplatesByConfigRes], error) {
	return c.listIntegrationTemplatesByConfig.CallUnary(ctx, req)
}

// CallEpicPatient calls api.v1alpha1.integrations.Integrations.CallEpicPatient.
func (c *integrationsClient) CallEpicPatient(ctx context.Context, req *connect_go.Request[integrations.CallEpicPatientReq]) (*connect_go.Response[integrations.CallEpicPatientRes], error) {
	return c.callEpicPatient.CallUnary(ctx, req)
}

// HangUpEpicPatientCall calls api.v1alpha1.integrations.Integrations.HangUpEpicPatientCall.
func (c *integrationsClient) HangUpEpicPatientCall(ctx context.Context, req *connect_go.Request[integrations.HangUpEpicPatientCallReq]) (*connect_go.Response[integrations.Empty], error) {
	return c.hangUpEpicPatientCall.CallUnary(ctx, req)
}

// GenerateEpicKeyPairs calls api.v1alpha1.integrations.Integrations.GenerateEpicKeyPairs.
func (c *integrationsClient) GenerateEpicKeyPairs(ctx context.Context, req *connect_go.Request[integrations.GenerateEpicKeyPairReq]) (*connect_go.Response[integrations.GenerateEpicKeyPairRes], error) {
	return c.generateEpicKeyPairs.CallUnary(ctx, req)
}

// PopulateIntegrationLink calls api.v1alpha1.integrations.Integrations.PopulateIntegrationLink.
func (c *integrationsClient) PopulateIntegrationLink(ctx context.Context, req *connect_go.Request[integrations.PopulateIntegrationLinkReq]) (*connect_go.Response[integrations.PopulateIntegrationLinkRes], error) {
	return c.populateIntegrationLink.CallUnary(ctx, req)
}

// IntegrationsHandler is an implementation of the api.v1alpha1.integrations.Integrations service.
type IntegrationsHandler interface {
	// combine rquest parameters with the config parameters and run the integration method
	Process(context.Context, *connect_go.Request[integrations.ProcessReq]) (*connect_go.Response[integrations.ProcessRes], error)
	// get an integration transaction
	GetIntegrationTransaction(context.Context, *connect_go.Request[integrations.GetIntegrationTransactionReq]) (*connect_go.Response[integrations.IntegrationTransaction], error)
	GetIntegrationTransactionReport(context.Context, *connect_go.Request[integrations.GetIntegrationTransactionReportReq]) (*connect_go.Response[integrations.GetIntegrationTransactionReportRes], error)
	GetIntegrationTransactionReportData(context.Context, *connect_go.Request[integrations.GetIntegrationTransactionReportDataReq]) (*connect_go.Response[integrations.GetIntegrationTransactionReportDataRes], error)
	SearchPastTransactions(context.Context, *connect_go.Request[integrations.SearchPastTransactionsRequest]) (*connect_go.Response[integrations.SearchPastTransactionsResponse], error)
	// GetAggregatedMetadata returns the aggregated metrics about the portal links for a specified date range
	GetAggregatedMetadata(context.Context, *connect_go.Request[integrations.GetAggregatedMetadataReq]) (*connect_go.Response[integrations.GetAggregatedMetadataRes], error)
	// GetPortalLinksByDateRange returns portal link metrics and portal linnk data for specific range
	GetPortalLinksByDateRange(context.Context, *connect_go.Request[integrations.GetPortalLinksByDateRangeReq]) (*connect_go.Response[integrations.GetPortalLinksByDateRangeRes], error)
	// create a integration config
	CreateIntegrationConfig(context.Context, *connect_go.Request[integrations.IntegrationConfig]) (*connect_go.Response[integrations.Empty], error)
	// get an integration config
	GetIntegrationConfig(context.Context, *connect_go.Request[integrations.GetIntegrationConfigReq]) (*connect_go.Response[integrations.IntegrationConfig], error)
	// update an integration config
	UpdateIntegrationConfig(context.Context, *connect_go.Request[integrations.UpdateIntegrationConfigReq]) (*connect_go.Response[integrations.Empty], error)
	// delete an integration config
	DeleteIntegrationConfig(context.Context, *connect_go.Request[integrations.DeleteIntegrationConfigReq]) (*connect_go.Response[integrations.Empty], error)
	// list all supported integrations
	ListIntegrations(context.Context, *connect_go.Request[integrations.Empty]) (*connect_go.Response[integrations.IntegrationInfos], error)
	ListIntegrationsForOrg(context.Context, *connect_go.Request[integrations.ListIntegrationsForOrgReq]) (*connect_go.Response[integrations.IntegrationInfos], error)
	// lists all the names of the configs for an org's integration type
	ListIntegrationConfigNames(context.Context, *connect_go.Request[integrations.ListIntegrationConfigNamesReq]) (*connect_go.Response[integrations.ListIntegrationConfigNamesRes], error)
	ListJourneyConfigs(context.Context, *connect_go.Request[integrations.ListJourneyConfigsReq]) (*connect_go.Response[integrations.IntegrationConfigs], error)
	ListNonJourneyConfigs(context.Context, *connect_go.Request[integrations.ListNonJourneyConfigsReq]) (*connect_go.Response[integrations.IntegrationConfigs], error)
	// TODO all services looking for payment portal configs should be using the
	// PortalManagerApi service in this same packages
	// CLUDG for the payment portal configs
	CreatePortalConfig(context.Context, *connect_go.Request[integrations.PortalConfig]) (*connect_go.Response[integrations.Empty], error)
	// TODO better signature
	// rpc ListPortalConfigs(ListPortalConfigsReq) returns (ListPortalConfigsRes);
	ListPortalConfigs(context.Context, *connect_go.Request[integrations.ListPortalConfigsReq]) (*connect_go.Response[integrations.PortalConfigs], error)
	UpdatePortalConfig(context.Context, *connect_go.Request[integrations.PortalConfig]) (*connect_go.Response[integrations.Empty], error)
	// TODO better signature
	// rpc GetPortalConfig(GetPortalConfigReq) returns (GetPortalConfigRes);
	GetPortalConfig(context.Context, *connect_go.Request[integrations.GetPortalConfigReq]) (*connect_go.Response[integrations.PortalConfig], error)
	// TODO better signature
	// rpc DeletePortalConfig(DeletePortalConfigReq) returns (DeletePortalConfigRes);
	DeletePortalConfig(context.Context, *connect_go.Request[integrations.DeletePortalConfigReq]) (*connect_go.Response[integrations.Empty], error)
	// TODO deprecate
	UpdatePortalLogo(context.Context, *connect_go.Request[integrations.UpdatePortalLogoReq]) (*connect_go.Response[integrations.Empty], error)
	// TODO deprecate
	GetPortalLogo(context.Context, *connect_go.Request[integrations.GetPortalLogoReq]) (*connect_go.Response[integrations.Logo], error)
	// TODO deprecate. use CreatePortalLinks on the PortalManagerApi
	// pulls the payment_link_config
	// creates an integration config for each set of data, and generates a url for the specific user
	CreatePaymentPortalLinks(context.Context, *connect_go.Request[integrations.CreatePaymentPortalLinksReq]) (*connect_go.Response[integrations.CreatePaymentPortalLinksRes], error)
	// takes a year in YYYY format and returns the summary of transaction for that year
	Summary(context.Context, *connect_go.Request[integrations.SummaryReq]) (*connect_go.Response[integrations.SummaryRes], error)
	// Lists integration templates that use the passed in integration config
	ListIntegrationTemplatesByConfig(context.Context, *connect_go.Request[integrations.ListIntegrationTemplatesByConfigReq]) (*connect_go.Response[integrations.ListIntegrationTemplatesByConfigRes], error)
	// CallEpicPatient initiates a call to the specified number from the agent using the click to call button within epic
	CallEpicPatient(context.Context, *connect_go.Request[integrations.CallEpicPatientReq]) (*connect_go.Response[integrations.CallEpicPatientRes], error)
	// CallEpicPatient initiates a call to the specified number from the agent using the click to call button within epic
	HangUpEpicPatientCall(context.Context, *connect_go.Request[integrations.HangUpEpicPatientCallReq]) (*connect_go.Response[integrations.Empty], error)
	// GenerateEpicKeyPairs creates 2 key pairs, stores the private keys, and returns the public keys
	GenerateEpicKeyPairs(context.Context, *connect_go.Request[integrations.GenerateEpicKeyPairReq]) (*connect_go.Response[integrations.GenerateEpicKeyPairRes], error)
	PopulateIntegrationLink(context.Context, *connect_go.Request[integrations.PopulateIntegrationLinkReq]) (*connect_go.Response[integrations.PopulateIntegrationLinkRes], error)
}

// NewIntegrationsHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIntegrationsHandler(svc IntegrationsHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	integrationsProcessHandler := connect_go.NewUnaryHandler(
		IntegrationsProcessProcedure,
		svc.Process,
		opts...,
	)
	integrationsGetIntegrationTransactionHandler := connect_go.NewUnaryHandler(
		IntegrationsGetIntegrationTransactionProcedure,
		svc.GetIntegrationTransaction,
		opts...,
	)
	integrationsGetIntegrationTransactionReportHandler := connect_go.NewUnaryHandler(
		IntegrationsGetIntegrationTransactionReportProcedure,
		svc.GetIntegrationTransactionReport,
		opts...,
	)
	integrationsGetIntegrationTransactionReportDataHandler := connect_go.NewUnaryHandler(
		IntegrationsGetIntegrationTransactionReportDataProcedure,
		svc.GetIntegrationTransactionReportData,
		opts...,
	)
	integrationsSearchPastTransactionsHandler := connect_go.NewUnaryHandler(
		IntegrationsSearchPastTransactionsProcedure,
		svc.SearchPastTransactions,
		opts...,
	)
	integrationsGetAggregatedMetadataHandler := connect_go.NewUnaryHandler(
		IntegrationsGetAggregatedMetadataProcedure,
		svc.GetAggregatedMetadata,
		opts...,
	)
	integrationsGetPortalLinksByDateRangeHandler := connect_go.NewUnaryHandler(
		IntegrationsGetPortalLinksByDateRangeProcedure,
		svc.GetPortalLinksByDateRange,
		opts...,
	)
	integrationsCreateIntegrationConfigHandler := connect_go.NewUnaryHandler(
		IntegrationsCreateIntegrationConfigProcedure,
		svc.CreateIntegrationConfig,
		opts...,
	)
	integrationsGetIntegrationConfigHandler := connect_go.NewUnaryHandler(
		IntegrationsGetIntegrationConfigProcedure,
		svc.GetIntegrationConfig,
		opts...,
	)
	integrationsUpdateIntegrationConfigHandler := connect_go.NewUnaryHandler(
		IntegrationsUpdateIntegrationConfigProcedure,
		svc.UpdateIntegrationConfig,
		opts...,
	)
	integrationsDeleteIntegrationConfigHandler := connect_go.NewUnaryHandler(
		IntegrationsDeleteIntegrationConfigProcedure,
		svc.DeleteIntegrationConfig,
		opts...,
	)
	integrationsListIntegrationsHandler := connect_go.NewUnaryHandler(
		IntegrationsListIntegrationsProcedure,
		svc.ListIntegrations,
		opts...,
	)
	integrationsListIntegrationsForOrgHandler := connect_go.NewUnaryHandler(
		IntegrationsListIntegrationsForOrgProcedure,
		svc.ListIntegrationsForOrg,
		opts...,
	)
	integrationsListIntegrationConfigNamesHandler := connect_go.NewUnaryHandler(
		IntegrationsListIntegrationConfigNamesProcedure,
		svc.ListIntegrationConfigNames,
		opts...,
	)
	integrationsListJourneyConfigsHandler := connect_go.NewUnaryHandler(
		IntegrationsListJourneyConfigsProcedure,
		svc.ListJourneyConfigs,
		opts...,
	)
	integrationsListNonJourneyConfigsHandler := connect_go.NewUnaryHandler(
		IntegrationsListNonJourneyConfigsProcedure,
		svc.ListNonJourneyConfigs,
		opts...,
	)
	integrationsCreatePortalConfigHandler := connect_go.NewUnaryHandler(
		IntegrationsCreatePortalConfigProcedure,
		svc.CreatePortalConfig,
		opts...,
	)
	integrationsListPortalConfigsHandler := connect_go.NewUnaryHandler(
		IntegrationsListPortalConfigsProcedure,
		svc.ListPortalConfigs,
		opts...,
	)
	integrationsUpdatePortalConfigHandler := connect_go.NewUnaryHandler(
		IntegrationsUpdatePortalConfigProcedure,
		svc.UpdatePortalConfig,
		opts...,
	)
	integrationsGetPortalConfigHandler := connect_go.NewUnaryHandler(
		IntegrationsGetPortalConfigProcedure,
		svc.GetPortalConfig,
		opts...,
	)
	integrationsDeletePortalConfigHandler := connect_go.NewUnaryHandler(
		IntegrationsDeletePortalConfigProcedure,
		svc.DeletePortalConfig,
		opts...,
	)
	integrationsUpdatePortalLogoHandler := connect_go.NewUnaryHandler(
		IntegrationsUpdatePortalLogoProcedure,
		svc.UpdatePortalLogo,
		opts...,
	)
	integrationsGetPortalLogoHandler := connect_go.NewUnaryHandler(
		IntegrationsGetPortalLogoProcedure,
		svc.GetPortalLogo,
		opts...,
	)
	integrationsCreatePaymentPortalLinksHandler := connect_go.NewUnaryHandler(
		IntegrationsCreatePaymentPortalLinksProcedure,
		svc.CreatePaymentPortalLinks,
		opts...,
	)
	integrationsSummaryHandler := connect_go.NewUnaryHandler(
		IntegrationsSummaryProcedure,
		svc.Summary,
		opts...,
	)
	integrationsListIntegrationTemplatesByConfigHandler := connect_go.NewUnaryHandler(
		IntegrationsListIntegrationTemplatesByConfigProcedure,
		svc.ListIntegrationTemplatesByConfig,
		opts...,
	)
	integrationsCallEpicPatientHandler := connect_go.NewUnaryHandler(
		IntegrationsCallEpicPatientProcedure,
		svc.CallEpicPatient,
		opts...,
	)
	integrationsHangUpEpicPatientCallHandler := connect_go.NewUnaryHandler(
		IntegrationsHangUpEpicPatientCallProcedure,
		svc.HangUpEpicPatientCall,
		opts...,
	)
	integrationsGenerateEpicKeyPairsHandler := connect_go.NewUnaryHandler(
		IntegrationsGenerateEpicKeyPairsProcedure,
		svc.GenerateEpicKeyPairs,
		opts...,
	)
	integrationsPopulateIntegrationLinkHandler := connect_go.NewUnaryHandler(
		IntegrationsPopulateIntegrationLinkProcedure,
		svc.PopulateIntegrationLink,
		opts...,
	)
	return "/api.v1alpha1.integrations.Integrations/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IntegrationsProcessProcedure:
			integrationsProcessHandler.ServeHTTP(w, r)
		case IntegrationsGetIntegrationTransactionProcedure:
			integrationsGetIntegrationTransactionHandler.ServeHTTP(w, r)
		case IntegrationsGetIntegrationTransactionReportProcedure:
			integrationsGetIntegrationTransactionReportHandler.ServeHTTP(w, r)
		case IntegrationsGetIntegrationTransactionReportDataProcedure:
			integrationsGetIntegrationTransactionReportDataHandler.ServeHTTP(w, r)
		case IntegrationsSearchPastTransactionsProcedure:
			integrationsSearchPastTransactionsHandler.ServeHTTP(w, r)
		case IntegrationsGetAggregatedMetadataProcedure:
			integrationsGetAggregatedMetadataHandler.ServeHTTP(w, r)
		case IntegrationsGetPortalLinksByDateRangeProcedure:
			integrationsGetPortalLinksByDateRangeHandler.ServeHTTP(w, r)
		case IntegrationsCreateIntegrationConfigProcedure:
			integrationsCreateIntegrationConfigHandler.ServeHTTP(w, r)
		case IntegrationsGetIntegrationConfigProcedure:
			integrationsGetIntegrationConfigHandler.ServeHTTP(w, r)
		case IntegrationsUpdateIntegrationConfigProcedure:
			integrationsUpdateIntegrationConfigHandler.ServeHTTP(w, r)
		case IntegrationsDeleteIntegrationConfigProcedure:
			integrationsDeleteIntegrationConfigHandler.ServeHTTP(w, r)
		case IntegrationsListIntegrationsProcedure:
			integrationsListIntegrationsHandler.ServeHTTP(w, r)
		case IntegrationsListIntegrationsForOrgProcedure:
			integrationsListIntegrationsForOrgHandler.ServeHTTP(w, r)
		case IntegrationsListIntegrationConfigNamesProcedure:
			integrationsListIntegrationConfigNamesHandler.ServeHTTP(w, r)
		case IntegrationsListJourneyConfigsProcedure:
			integrationsListJourneyConfigsHandler.ServeHTTP(w, r)
		case IntegrationsListNonJourneyConfigsProcedure:
			integrationsListNonJourneyConfigsHandler.ServeHTTP(w, r)
		case IntegrationsCreatePortalConfigProcedure:
			integrationsCreatePortalConfigHandler.ServeHTTP(w, r)
		case IntegrationsListPortalConfigsProcedure:
			integrationsListPortalConfigsHandler.ServeHTTP(w, r)
		case IntegrationsUpdatePortalConfigProcedure:
			integrationsUpdatePortalConfigHandler.ServeHTTP(w, r)
		case IntegrationsGetPortalConfigProcedure:
			integrationsGetPortalConfigHandler.ServeHTTP(w, r)
		case IntegrationsDeletePortalConfigProcedure:
			integrationsDeletePortalConfigHandler.ServeHTTP(w, r)
		case IntegrationsUpdatePortalLogoProcedure:
			integrationsUpdatePortalLogoHandler.ServeHTTP(w, r)
		case IntegrationsGetPortalLogoProcedure:
			integrationsGetPortalLogoHandler.ServeHTTP(w, r)
		case IntegrationsCreatePaymentPortalLinksProcedure:
			integrationsCreatePaymentPortalLinksHandler.ServeHTTP(w, r)
		case IntegrationsSummaryProcedure:
			integrationsSummaryHandler.ServeHTTP(w, r)
		case IntegrationsListIntegrationTemplatesByConfigProcedure:
			integrationsListIntegrationTemplatesByConfigHandler.ServeHTTP(w, r)
		case IntegrationsCallEpicPatientProcedure:
			integrationsCallEpicPatientHandler.ServeHTTP(w, r)
		case IntegrationsHangUpEpicPatientCallProcedure:
			integrationsHangUpEpicPatientCallHandler.ServeHTTP(w, r)
		case IntegrationsGenerateEpicKeyPairsProcedure:
			integrationsGenerateEpicKeyPairsHandler.ServeHTTP(w, r)
		case IntegrationsPopulateIntegrationLinkProcedure:
			integrationsPopulateIntegrationLinkHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIntegrationsHandler returns CodeUnimplemented from all methods.
type UnimplementedIntegrationsHandler struct{}

func (UnimplementedIntegrationsHandler) Process(context.Context, *connect_go.Request[integrations.ProcessReq]) (*connect_go.Response[integrations.ProcessRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.Process is not implemented"))
}

func (UnimplementedIntegrationsHandler) GetIntegrationTransaction(context.Context, *connect_go.Request[integrations.GetIntegrationTransactionReq]) (*connect_go.Response[integrations.IntegrationTransaction], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.GetIntegrationTransaction is not implemented"))
}

func (UnimplementedIntegrationsHandler) GetIntegrationTransactionReport(context.Context, *connect_go.Request[integrations.GetIntegrationTransactionReportReq]) (*connect_go.Response[integrations.GetIntegrationTransactionReportRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.GetIntegrationTransactionReport is not implemented"))
}

func (UnimplementedIntegrationsHandler) GetIntegrationTransactionReportData(context.Context, *connect_go.Request[integrations.GetIntegrationTransactionReportDataReq]) (*connect_go.Response[integrations.GetIntegrationTransactionReportDataRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.GetIntegrationTransactionReportData is not implemented"))
}

func (UnimplementedIntegrationsHandler) SearchPastTransactions(context.Context, *connect_go.Request[integrations.SearchPastTransactionsRequest]) (*connect_go.Response[integrations.SearchPastTransactionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.SearchPastTransactions is not implemented"))
}

func (UnimplementedIntegrationsHandler) GetAggregatedMetadata(context.Context, *connect_go.Request[integrations.GetAggregatedMetadataReq]) (*connect_go.Response[integrations.GetAggregatedMetadataRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.GetAggregatedMetadata is not implemented"))
}

func (UnimplementedIntegrationsHandler) GetPortalLinksByDateRange(context.Context, *connect_go.Request[integrations.GetPortalLinksByDateRangeReq]) (*connect_go.Response[integrations.GetPortalLinksByDateRangeRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.GetPortalLinksByDateRange is not implemented"))
}

func (UnimplementedIntegrationsHandler) CreateIntegrationConfig(context.Context, *connect_go.Request[integrations.IntegrationConfig]) (*connect_go.Response[integrations.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.CreateIntegrationConfig is not implemented"))
}

func (UnimplementedIntegrationsHandler) GetIntegrationConfig(context.Context, *connect_go.Request[integrations.GetIntegrationConfigReq]) (*connect_go.Response[integrations.IntegrationConfig], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.GetIntegrationConfig is not implemented"))
}

func (UnimplementedIntegrationsHandler) UpdateIntegrationConfig(context.Context, *connect_go.Request[integrations.UpdateIntegrationConfigReq]) (*connect_go.Response[integrations.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.UpdateIntegrationConfig is not implemented"))
}

func (UnimplementedIntegrationsHandler) DeleteIntegrationConfig(context.Context, *connect_go.Request[integrations.DeleteIntegrationConfigReq]) (*connect_go.Response[integrations.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.DeleteIntegrationConfig is not implemented"))
}

func (UnimplementedIntegrationsHandler) ListIntegrations(context.Context, *connect_go.Request[integrations.Empty]) (*connect_go.Response[integrations.IntegrationInfos], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.ListIntegrations is not implemented"))
}

func (UnimplementedIntegrationsHandler) ListIntegrationsForOrg(context.Context, *connect_go.Request[integrations.ListIntegrationsForOrgReq]) (*connect_go.Response[integrations.IntegrationInfos], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.ListIntegrationsForOrg is not implemented"))
}

func (UnimplementedIntegrationsHandler) ListIntegrationConfigNames(context.Context, *connect_go.Request[integrations.ListIntegrationConfigNamesReq]) (*connect_go.Response[integrations.ListIntegrationConfigNamesRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.ListIntegrationConfigNames is not implemented"))
}

func (UnimplementedIntegrationsHandler) ListJourneyConfigs(context.Context, *connect_go.Request[integrations.ListJourneyConfigsReq]) (*connect_go.Response[integrations.IntegrationConfigs], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.ListJourneyConfigs is not implemented"))
}

func (UnimplementedIntegrationsHandler) ListNonJourneyConfigs(context.Context, *connect_go.Request[integrations.ListNonJourneyConfigsReq]) (*connect_go.Response[integrations.IntegrationConfigs], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.ListNonJourneyConfigs is not implemented"))
}

func (UnimplementedIntegrationsHandler) CreatePortalConfig(context.Context, *connect_go.Request[integrations.PortalConfig]) (*connect_go.Response[integrations.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.CreatePortalConfig is not implemented"))
}

func (UnimplementedIntegrationsHandler) ListPortalConfigs(context.Context, *connect_go.Request[integrations.ListPortalConfigsReq]) (*connect_go.Response[integrations.PortalConfigs], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.ListPortalConfigs is not implemented"))
}

func (UnimplementedIntegrationsHandler) UpdatePortalConfig(context.Context, *connect_go.Request[integrations.PortalConfig]) (*connect_go.Response[integrations.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.UpdatePortalConfig is not implemented"))
}

func (UnimplementedIntegrationsHandler) GetPortalConfig(context.Context, *connect_go.Request[integrations.GetPortalConfigReq]) (*connect_go.Response[integrations.PortalConfig], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.GetPortalConfig is not implemented"))
}

func (UnimplementedIntegrationsHandler) DeletePortalConfig(context.Context, *connect_go.Request[integrations.DeletePortalConfigReq]) (*connect_go.Response[integrations.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.DeletePortalConfig is not implemented"))
}

func (UnimplementedIntegrationsHandler) UpdatePortalLogo(context.Context, *connect_go.Request[integrations.UpdatePortalLogoReq]) (*connect_go.Response[integrations.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.UpdatePortalLogo is not implemented"))
}

func (UnimplementedIntegrationsHandler) GetPortalLogo(context.Context, *connect_go.Request[integrations.GetPortalLogoReq]) (*connect_go.Response[integrations.Logo], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.GetPortalLogo is not implemented"))
}

func (UnimplementedIntegrationsHandler) CreatePaymentPortalLinks(context.Context, *connect_go.Request[integrations.CreatePaymentPortalLinksReq]) (*connect_go.Response[integrations.CreatePaymentPortalLinksRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.CreatePaymentPortalLinks is not implemented"))
}

func (UnimplementedIntegrationsHandler) Summary(context.Context, *connect_go.Request[integrations.SummaryReq]) (*connect_go.Response[integrations.SummaryRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.Summary is not implemented"))
}

func (UnimplementedIntegrationsHandler) ListIntegrationTemplatesByConfig(context.Context, *connect_go.Request[integrations.ListIntegrationTemplatesByConfigReq]) (*connect_go.Response[integrations.ListIntegrationTemplatesByConfigRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.ListIntegrationTemplatesByConfig is not implemented"))
}

func (UnimplementedIntegrationsHandler) CallEpicPatient(context.Context, *connect_go.Request[integrations.CallEpicPatientReq]) (*connect_go.Response[integrations.CallEpicPatientRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.CallEpicPatient is not implemented"))
}

func (UnimplementedIntegrationsHandler) HangUpEpicPatientCall(context.Context, *connect_go.Request[integrations.HangUpEpicPatientCallReq]) (*connect_go.Response[integrations.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.HangUpEpicPatientCall is not implemented"))
}

func (UnimplementedIntegrationsHandler) GenerateEpicKeyPairs(context.Context, *connect_go.Request[integrations.GenerateEpicKeyPairReq]) (*connect_go.Response[integrations.GenerateEpicKeyPairRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.GenerateEpicKeyPairs is not implemented"))
}

func (UnimplementedIntegrationsHandler) PopulateIntegrationLink(context.Context, *connect_go.Request[integrations.PopulateIntegrationLinkReq]) (*connect_go.Response[integrations.PopulateIntegrationLinkRes], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1alpha1.integrations.Integrations.PopulateIntegrationLink is not implemented"))
}
