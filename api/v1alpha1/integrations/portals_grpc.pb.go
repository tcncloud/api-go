// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/integrations/portals.proto

package integrations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PortalManagerApi_UpsertPortalConfig_FullMethodName              = "/api.v1alpha1.integrations.PortalManagerApi/UpsertPortalConfig"
	PortalManagerApi_ListPortalConfigs_FullMethodName               = "/api.v1alpha1.integrations.PortalManagerApi/ListPortalConfigs"
	PortalManagerApi_GetPortalConfig_FullMethodName                 = "/api.v1alpha1.integrations.PortalManagerApi/GetPortalConfig"
	PortalManagerApi_DeletePortalConfig_FullMethodName              = "/api.v1alpha1.integrations.PortalManagerApi/DeletePortalConfig"
	PortalManagerApi_UpdatePortalConfigLogo_FullMethodName          = "/api.v1alpha1.integrations.PortalManagerApi/UpdatePortalConfigLogo"
	PortalManagerApi_GetPortalConfigLogo_FullMethodName             = "/api.v1alpha1.integrations.PortalManagerApi/GetPortalConfigLogo"
	PortalManagerApi_ListPortalLinks_FullMethodName                 = "/api.v1alpha1.integrations.PortalManagerApi/ListPortalLinks"
	PortalManagerApi_GetPortalLink_FullMethodName                   = "/api.v1alpha1.integrations.PortalManagerApi/GetPortalLink"
	PortalManagerApi_DeletePortalLink_FullMethodName                = "/api.v1alpha1.integrations.PortalManagerApi/DeletePortalLink"
	PortalManagerApi_CreatePortalLinks_FullMethodName               = "/api.v1alpha1.integrations.PortalManagerApi/CreatePortalLinks"
	PortalManagerApi_UpsertPortal_FullMethodName                    = "/api.v1alpha1.integrations.PortalManagerApi/UpsertPortal"
	PortalManagerApi_GetPortal_FullMethodName                       = "/api.v1alpha1.integrations.PortalManagerApi/GetPortal"
	PortalManagerApi_DeletePortal_FullMethodName                    = "/api.v1alpha1.integrations.PortalManagerApi/DeletePortal"
	PortalManagerApi_ListPortals_FullMethodName                     = "/api.v1alpha1.integrations.PortalManagerApi/ListPortals"
	PortalManagerApi_ListDetailedPortals_FullMethodName             = "/api.v1alpha1.integrations.PortalManagerApi/ListDetailedPortals"
	PortalManagerApi_GetDetailedPortal_FullMethodName               = "/api.v1alpha1.integrations.PortalManagerApi/GetDetailedPortal"
	PortalManagerApi_UpsertPluginInstance_FullMethodName            = "/api.v1alpha1.integrations.PortalManagerApi/UpsertPluginInstance"
	PortalManagerApi_GetPluginInstance_FullMethodName               = "/api.v1alpha1.integrations.PortalManagerApi/GetPluginInstance"
	PortalManagerApi_DeletePluginInstance_FullMethodName            = "/api.v1alpha1.integrations.PortalManagerApi/DeletePluginInstance"
	PortalManagerApi_ListPluginInstance_FullMethodName              = "/api.v1alpha1.integrations.PortalManagerApi/ListPluginInstance"
	PortalManagerApi_ListFlowFieldNames_FullMethodName              = "/api.v1alpha1.integrations.PortalManagerApi/ListFlowFieldNames"
	PortalManagerApi_ListAvailableVerificationFields_FullMethodName = "/api.v1alpha1.integrations.PortalManagerApi/ListAvailableVerificationFields"
	PortalManagerApi_ListAvailablePaymentFields_FullMethodName      = "/api.v1alpha1.integrations.PortalManagerApi/ListAvailablePaymentFields"
	PortalManagerApi_ListPortalTypes_FullMethodName                 = "/api.v1alpha1.integrations.PortalManagerApi/ListPortalTypes"
	PortalManagerApi_ListPortalWorkflows_FullMethodName             = "/api.v1alpha1.integrations.PortalManagerApi/ListPortalWorkflows"
	PortalManagerApi_ListAllActionDefinitions_FullMethodName        = "/api.v1alpha1.integrations.PortalManagerApi/ListAllActionDefinitions"
	PortalManagerApi_ListPluginsByMethod_FullMethodName             = "/api.v1alpha1.integrations.PortalManagerApi/ListPluginsByMethod"
)

// PortalManagerApiClient is the client API for PortalManagerApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortalManagerApiClient interface {
	UpsertPortalConfig(ctx context.Context, in *UpsertPortalConfigReq, opts ...grpc.CallOption) (*UpsertPortalConfigRes, error)
	ListPortalConfigs(ctx context.Context, in *ListPortalConfigsReq, opts ...grpc.CallOption) (*ListPortalConfigsRes, error)
	GetPortalConfig(ctx context.Context, in *GetPortalConfigReq, opts ...grpc.CallOption) (*GetPortalConfigRes, error)
	DeletePortalConfig(ctx context.Context, in *DeletePortalConfigReq, opts ...grpc.CallOption) (*DeletePortalConfigRes, error)
	UpdatePortalConfigLogo(ctx context.Context, in *UpdatePortalConfigLogoReq, opts ...grpc.CallOption) (*UpdatePortalConfigLogoRes, error)
	GetPortalConfigLogo(ctx context.Context, in *GetPortalConfigLogoReq, opts ...grpc.CallOption) (*GetPortalConfigLogoRes, error)
	// portal links
	ListPortalLinks(ctx context.Context, in *ListPortalLinksReq, opts ...grpc.CallOption) (*ListPortalLinksRes, error)
	GetPortalLink(ctx context.Context, in *GetPortalLinkReq, opts ...grpc.CallOption) (*GetPortalLinkRes, error)
	DeletePortalLink(ctx context.Context, in *DeletePortalLinkReq, opts ...grpc.CallOption) (*DeletePortalLinkRes, error)
	CreatePortalLinks(ctx context.Context, in *CreatePortalLinksReq, opts ...grpc.CallOption) (*CreatePortalLinksRes, error)
	// portals
	UpsertPortal(ctx context.Context, in *UpsertPortalReq, opts ...grpc.CallOption) (*UpsertPortalRes, error)
	GetPortal(ctx context.Context, in *GetPortalReq, opts ...grpc.CallOption) (*GetPortalRes, error)
	DeletePortal(ctx context.Context, in *DeletePortalReq, opts ...grpc.CallOption) (*DeletePortalRes, error)
	ListPortals(ctx context.Context, in *ListPortalsReq, opts ...grpc.CallOption) (*ListPortalsRes, error)
	ListDetailedPortals(ctx context.Context, in *ListDetailedPortalsReq, opts ...grpc.CallOption) (*ListDetailedPortalsRes, error)
	GetDetailedPortal(ctx context.Context, in *GetDetailedPortalReq, opts ...grpc.CallOption) (*GetDetailedPortalRes, error)
	// PluginInstances
	UpsertPluginInstance(ctx context.Context, in *UpsertPluginInstanceReq, opts ...grpc.CallOption) (*UpsertPluginInstanceRes, error)
	GetPluginInstance(ctx context.Context, in *GetPluginInstanceReq, opts ...grpc.CallOption) (*GetPluginInstanceRes, error)
	DeletePluginInstance(ctx context.Context, in *DeletePluginInstanceReq, opts ...grpc.CallOption) (*DeletePluginInstanceRes, error)
	ListPluginInstance(ctx context.Context, in *ListPluginInstanceReq, opts ...grpc.CallOption) (*ListPluginInstanceRes, error)
	ListFlowFieldNames(ctx context.Context, in *ListFlowFieldNamesReq, opts ...grpc.CallOption) (*ListFlowFieldNamesRes, error)
	// returns the default form fields for verification flow
	ListAvailableVerificationFields(ctx context.Context, in *ListAvailableVerificationFieldsReq, opts ...grpc.CallOption) (*ListAvailableVerificationFieldsRes, error)
	// returns the default form fields for payment flow
	ListAvailablePaymentFields(ctx context.Context, in *ListAvailablePaymentFieldsReq, opts ...grpc.CallOption) (*ListAvailablePaymentFieldsRes, error)
	ListPortalTypes(ctx context.Context, in *ListPortalTypesReq, opts ...grpc.CallOption) (*ListPortalTypesResponse, error)
	ListPortalWorkflows(ctx context.Context, in *ListPortalWorkflowsReq, opts ...grpc.CallOption) (*ListPortalWorkflowsResponse, error)
	ListAllActionDefinitions(ctx context.Context, in *ListAllActionDefinitionsReq, opts ...grpc.CallOption) (*ListAllActionDefinitionsResponse, error)
	ListPluginsByMethod(ctx context.Context, in *ListPluginsByMethodReq, opts ...grpc.CallOption) (*ListPluginsByMethodRes, error)
}

type portalManagerApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPortalManagerApiClient(cc grpc.ClientConnInterface) PortalManagerApiClient {
	return &portalManagerApiClient{cc}
}

func (c *portalManagerApiClient) UpsertPortalConfig(ctx context.Context, in *UpsertPortalConfigReq, opts ...grpc.CallOption) (*UpsertPortalConfigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertPortalConfigRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_UpsertPortalConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) ListPortalConfigs(ctx context.Context, in *ListPortalConfigsReq, opts ...grpc.CallOption) (*ListPortalConfigsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPortalConfigsRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_ListPortalConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) GetPortalConfig(ctx context.Context, in *GetPortalConfigReq, opts ...grpc.CallOption) (*GetPortalConfigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortalConfigRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_GetPortalConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) DeletePortalConfig(ctx context.Context, in *DeletePortalConfigReq, opts ...grpc.CallOption) (*DeletePortalConfigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePortalConfigRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_DeletePortalConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) UpdatePortalConfigLogo(ctx context.Context, in *UpdatePortalConfigLogoReq, opts ...grpc.CallOption) (*UpdatePortalConfigLogoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePortalConfigLogoRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_UpdatePortalConfigLogo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) GetPortalConfigLogo(ctx context.Context, in *GetPortalConfigLogoReq, opts ...grpc.CallOption) (*GetPortalConfigLogoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortalConfigLogoRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_GetPortalConfigLogo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) ListPortalLinks(ctx context.Context, in *ListPortalLinksReq, opts ...grpc.CallOption) (*ListPortalLinksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPortalLinksRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_ListPortalLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) GetPortalLink(ctx context.Context, in *GetPortalLinkReq, opts ...grpc.CallOption) (*GetPortalLinkRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortalLinkRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_GetPortalLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) DeletePortalLink(ctx context.Context, in *DeletePortalLinkReq, opts ...grpc.CallOption) (*DeletePortalLinkRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePortalLinkRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_DeletePortalLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) CreatePortalLinks(ctx context.Context, in *CreatePortalLinksReq, opts ...grpc.CallOption) (*CreatePortalLinksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePortalLinksRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_CreatePortalLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) UpsertPortal(ctx context.Context, in *UpsertPortalReq, opts ...grpc.CallOption) (*UpsertPortalRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertPortalRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_UpsertPortal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) GetPortal(ctx context.Context, in *GetPortalReq, opts ...grpc.CallOption) (*GetPortalRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortalRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_GetPortal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) DeletePortal(ctx context.Context, in *DeletePortalReq, opts ...grpc.CallOption) (*DeletePortalRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePortalRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_DeletePortal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) ListPortals(ctx context.Context, in *ListPortalsReq, opts ...grpc.CallOption) (*ListPortalsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPortalsRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_ListPortals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) ListDetailedPortals(ctx context.Context, in *ListDetailedPortalsReq, opts ...grpc.CallOption) (*ListDetailedPortalsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDetailedPortalsRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_ListDetailedPortals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) GetDetailedPortal(ctx context.Context, in *GetDetailedPortalReq, opts ...grpc.CallOption) (*GetDetailedPortalRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailedPortalRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_GetDetailedPortal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) UpsertPluginInstance(ctx context.Context, in *UpsertPluginInstanceReq, opts ...grpc.CallOption) (*UpsertPluginInstanceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertPluginInstanceRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_UpsertPluginInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) GetPluginInstance(ctx context.Context, in *GetPluginInstanceReq, opts ...grpc.CallOption) (*GetPluginInstanceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPluginInstanceRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_GetPluginInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) DeletePluginInstance(ctx context.Context, in *DeletePluginInstanceReq, opts ...grpc.CallOption) (*DeletePluginInstanceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePluginInstanceRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_DeletePluginInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) ListPluginInstance(ctx context.Context, in *ListPluginInstanceReq, opts ...grpc.CallOption) (*ListPluginInstanceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPluginInstanceRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_ListPluginInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) ListFlowFieldNames(ctx context.Context, in *ListFlowFieldNamesReq, opts ...grpc.CallOption) (*ListFlowFieldNamesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFlowFieldNamesRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_ListFlowFieldNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) ListAvailableVerificationFields(ctx context.Context, in *ListAvailableVerificationFieldsReq, opts ...grpc.CallOption) (*ListAvailableVerificationFieldsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAvailableVerificationFieldsRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_ListAvailableVerificationFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) ListAvailablePaymentFields(ctx context.Context, in *ListAvailablePaymentFieldsReq, opts ...grpc.CallOption) (*ListAvailablePaymentFieldsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAvailablePaymentFieldsRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_ListAvailablePaymentFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) ListPortalTypes(ctx context.Context, in *ListPortalTypesReq, opts ...grpc.CallOption) (*ListPortalTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPortalTypesResponse)
	err := c.cc.Invoke(ctx, PortalManagerApi_ListPortalTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) ListPortalWorkflows(ctx context.Context, in *ListPortalWorkflowsReq, opts ...grpc.CallOption) (*ListPortalWorkflowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPortalWorkflowsResponse)
	err := c.cc.Invoke(ctx, PortalManagerApi_ListPortalWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) ListAllActionDefinitions(ctx context.Context, in *ListAllActionDefinitionsReq, opts ...grpc.CallOption) (*ListAllActionDefinitionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllActionDefinitionsResponse)
	err := c.cc.Invoke(ctx, PortalManagerApi_ListAllActionDefinitions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalManagerApiClient) ListPluginsByMethod(ctx context.Context, in *ListPluginsByMethodReq, opts ...grpc.CallOption) (*ListPluginsByMethodRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPluginsByMethodRes)
	err := c.cc.Invoke(ctx, PortalManagerApi_ListPluginsByMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortalManagerApiServer is the server API for PortalManagerApi service.
// All implementations must embed UnimplementedPortalManagerApiServer
// for forward compatibility.
type PortalManagerApiServer interface {
	UpsertPortalConfig(context.Context, *UpsertPortalConfigReq) (*UpsertPortalConfigRes, error)
	ListPortalConfigs(context.Context, *ListPortalConfigsReq) (*ListPortalConfigsRes, error)
	GetPortalConfig(context.Context, *GetPortalConfigReq) (*GetPortalConfigRes, error)
	DeletePortalConfig(context.Context, *DeletePortalConfigReq) (*DeletePortalConfigRes, error)
	UpdatePortalConfigLogo(context.Context, *UpdatePortalConfigLogoReq) (*UpdatePortalConfigLogoRes, error)
	GetPortalConfigLogo(context.Context, *GetPortalConfigLogoReq) (*GetPortalConfigLogoRes, error)
	// portal links
	ListPortalLinks(context.Context, *ListPortalLinksReq) (*ListPortalLinksRes, error)
	GetPortalLink(context.Context, *GetPortalLinkReq) (*GetPortalLinkRes, error)
	DeletePortalLink(context.Context, *DeletePortalLinkReq) (*DeletePortalLinkRes, error)
	CreatePortalLinks(context.Context, *CreatePortalLinksReq) (*CreatePortalLinksRes, error)
	// portals
	UpsertPortal(context.Context, *UpsertPortalReq) (*UpsertPortalRes, error)
	GetPortal(context.Context, *GetPortalReq) (*GetPortalRes, error)
	DeletePortal(context.Context, *DeletePortalReq) (*DeletePortalRes, error)
	ListPortals(context.Context, *ListPortalsReq) (*ListPortalsRes, error)
	ListDetailedPortals(context.Context, *ListDetailedPortalsReq) (*ListDetailedPortalsRes, error)
	GetDetailedPortal(context.Context, *GetDetailedPortalReq) (*GetDetailedPortalRes, error)
	// PluginInstances
	UpsertPluginInstance(context.Context, *UpsertPluginInstanceReq) (*UpsertPluginInstanceRes, error)
	GetPluginInstance(context.Context, *GetPluginInstanceReq) (*GetPluginInstanceRes, error)
	DeletePluginInstance(context.Context, *DeletePluginInstanceReq) (*DeletePluginInstanceRes, error)
	ListPluginInstance(context.Context, *ListPluginInstanceReq) (*ListPluginInstanceRes, error)
	ListFlowFieldNames(context.Context, *ListFlowFieldNamesReq) (*ListFlowFieldNamesRes, error)
	// returns the default form fields for verification flow
	ListAvailableVerificationFields(context.Context, *ListAvailableVerificationFieldsReq) (*ListAvailableVerificationFieldsRes, error)
	// returns the default form fields for payment flow
	ListAvailablePaymentFields(context.Context, *ListAvailablePaymentFieldsReq) (*ListAvailablePaymentFieldsRes, error)
	ListPortalTypes(context.Context, *ListPortalTypesReq) (*ListPortalTypesResponse, error)
	ListPortalWorkflows(context.Context, *ListPortalWorkflowsReq) (*ListPortalWorkflowsResponse, error)
	ListAllActionDefinitions(context.Context, *ListAllActionDefinitionsReq) (*ListAllActionDefinitionsResponse, error)
	ListPluginsByMethod(context.Context, *ListPluginsByMethodReq) (*ListPluginsByMethodRes, error)
	mustEmbedUnimplementedPortalManagerApiServer()
}

// UnimplementedPortalManagerApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPortalManagerApiServer struct{}

func (UnimplementedPortalManagerApiServer) UpsertPortalConfig(context.Context, *UpsertPortalConfigReq) (*UpsertPortalConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPortalConfig not implemented")
}
func (UnimplementedPortalManagerApiServer) ListPortalConfigs(context.Context, *ListPortalConfigsReq) (*ListPortalConfigsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPortalConfigs not implemented")
}
func (UnimplementedPortalManagerApiServer) GetPortalConfig(context.Context, *GetPortalConfigReq) (*GetPortalConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortalConfig not implemented")
}
func (UnimplementedPortalManagerApiServer) DeletePortalConfig(context.Context, *DeletePortalConfigReq) (*DeletePortalConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePortalConfig not implemented")
}
func (UnimplementedPortalManagerApiServer) UpdatePortalConfigLogo(context.Context, *UpdatePortalConfigLogoReq) (*UpdatePortalConfigLogoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePortalConfigLogo not implemented")
}
func (UnimplementedPortalManagerApiServer) GetPortalConfigLogo(context.Context, *GetPortalConfigLogoReq) (*GetPortalConfigLogoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortalConfigLogo not implemented")
}
func (UnimplementedPortalManagerApiServer) ListPortalLinks(context.Context, *ListPortalLinksReq) (*ListPortalLinksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPortalLinks not implemented")
}
func (UnimplementedPortalManagerApiServer) GetPortalLink(context.Context, *GetPortalLinkReq) (*GetPortalLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortalLink not implemented")
}
func (UnimplementedPortalManagerApiServer) DeletePortalLink(context.Context, *DeletePortalLinkReq) (*DeletePortalLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePortalLink not implemented")
}
func (UnimplementedPortalManagerApiServer) CreatePortalLinks(context.Context, *CreatePortalLinksReq) (*CreatePortalLinksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortalLinks not implemented")
}
func (UnimplementedPortalManagerApiServer) UpsertPortal(context.Context, *UpsertPortalReq) (*UpsertPortalRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPortal not implemented")
}
func (UnimplementedPortalManagerApiServer) GetPortal(context.Context, *GetPortalReq) (*GetPortalRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortal not implemented")
}
func (UnimplementedPortalManagerApiServer) DeletePortal(context.Context, *DeletePortalReq) (*DeletePortalRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePortal not implemented")
}
func (UnimplementedPortalManagerApiServer) ListPortals(context.Context, *ListPortalsReq) (*ListPortalsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPortals not implemented")
}
func (UnimplementedPortalManagerApiServer) ListDetailedPortals(context.Context, *ListDetailedPortalsReq) (*ListDetailedPortalsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDetailedPortals not implemented")
}
func (UnimplementedPortalManagerApiServer) GetDetailedPortal(context.Context, *GetDetailedPortalReq) (*GetDetailedPortalRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailedPortal not implemented")
}
func (UnimplementedPortalManagerApiServer) UpsertPluginInstance(context.Context, *UpsertPluginInstanceReq) (*UpsertPluginInstanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPluginInstance not implemented")
}
func (UnimplementedPortalManagerApiServer) GetPluginInstance(context.Context, *GetPluginInstanceReq) (*GetPluginInstanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginInstance not implemented")
}
func (UnimplementedPortalManagerApiServer) DeletePluginInstance(context.Context, *DeletePluginInstanceReq) (*DeletePluginInstanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePluginInstance not implemented")
}
func (UnimplementedPortalManagerApiServer) ListPluginInstance(context.Context, *ListPluginInstanceReq) (*ListPluginInstanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPluginInstance not implemented")
}
func (UnimplementedPortalManagerApiServer) ListFlowFieldNames(context.Context, *ListFlowFieldNamesReq) (*ListFlowFieldNamesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlowFieldNames not implemented")
}
func (UnimplementedPortalManagerApiServer) ListAvailableVerificationFields(context.Context, *ListAvailableVerificationFieldsReq) (*ListAvailableVerificationFieldsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableVerificationFields not implemented")
}
func (UnimplementedPortalManagerApiServer) ListAvailablePaymentFields(context.Context, *ListAvailablePaymentFieldsReq) (*ListAvailablePaymentFieldsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailablePaymentFields not implemented")
}
func (UnimplementedPortalManagerApiServer) ListPortalTypes(context.Context, *ListPortalTypesReq) (*ListPortalTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPortalTypes not implemented")
}
func (UnimplementedPortalManagerApiServer) ListPortalWorkflows(context.Context, *ListPortalWorkflowsReq) (*ListPortalWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPortalWorkflows not implemented")
}
func (UnimplementedPortalManagerApiServer) ListAllActionDefinitions(context.Context, *ListAllActionDefinitionsReq) (*ListAllActionDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllActionDefinitions not implemented")
}
func (UnimplementedPortalManagerApiServer) ListPluginsByMethod(context.Context, *ListPluginsByMethodReq) (*ListPluginsByMethodRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPluginsByMethod not implemented")
}
func (UnimplementedPortalManagerApiServer) mustEmbedUnimplementedPortalManagerApiServer() {}
func (UnimplementedPortalManagerApiServer) testEmbeddedByValue()                          {}

// UnsafePortalManagerApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortalManagerApiServer will
// result in compilation errors.
type UnsafePortalManagerApiServer interface {
	mustEmbedUnimplementedPortalManagerApiServer()
}

func RegisterPortalManagerApiServer(s grpc.ServiceRegistrar, srv PortalManagerApiServer) {
	// If the following call pancis, it indicates UnimplementedPortalManagerApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PortalManagerApi_ServiceDesc, srv)
}

func _PortalManagerApi_UpsertPortalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPortalConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).UpsertPortalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_UpsertPortalConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).UpsertPortalConfig(ctx, req.(*UpsertPortalConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_ListPortalConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortalConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).ListPortalConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_ListPortalConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).ListPortalConfigs(ctx, req.(*ListPortalConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_GetPortalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortalConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).GetPortalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_GetPortalConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).GetPortalConfig(ctx, req.(*GetPortalConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_DeletePortalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortalConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).DeletePortalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_DeletePortalConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).DeletePortalConfig(ctx, req.(*DeletePortalConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_UpdatePortalConfigLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortalConfigLogoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).UpdatePortalConfigLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_UpdatePortalConfigLogo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).UpdatePortalConfigLogo(ctx, req.(*UpdatePortalConfigLogoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_GetPortalConfigLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortalConfigLogoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).GetPortalConfigLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_GetPortalConfigLogo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).GetPortalConfigLogo(ctx, req.(*GetPortalConfigLogoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_ListPortalLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortalLinksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).ListPortalLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_ListPortalLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).ListPortalLinks(ctx, req.(*ListPortalLinksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_GetPortalLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortalLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).GetPortalLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_GetPortalLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).GetPortalLink(ctx, req.(*GetPortalLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_DeletePortalLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortalLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).DeletePortalLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_DeletePortalLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).DeletePortalLink(ctx, req.(*DeletePortalLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_CreatePortalLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortalLinksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).CreatePortalLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_CreatePortalLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).CreatePortalLinks(ctx, req.(*CreatePortalLinksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_UpsertPortal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPortalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).UpsertPortal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_UpsertPortal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).UpsertPortal(ctx, req.(*UpsertPortalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_GetPortal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).GetPortal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_GetPortal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).GetPortal(ctx, req.(*GetPortalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_DeletePortal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).DeletePortal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_DeletePortal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).DeletePortal(ctx, req.(*DeletePortalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_ListPortals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortalsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).ListPortals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_ListPortals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).ListPortals(ctx, req.(*ListPortalsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_ListDetailedPortals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDetailedPortalsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).ListDetailedPortals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_ListDetailedPortals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).ListDetailedPortals(ctx, req.(*ListDetailedPortalsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_GetDetailedPortal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailedPortalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).GetDetailedPortal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_GetDetailedPortal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).GetDetailedPortal(ctx, req.(*GetDetailedPortalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_UpsertPluginInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPluginInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).UpsertPluginInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_UpsertPluginInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).UpsertPluginInstance(ctx, req.(*UpsertPluginInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_GetPluginInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).GetPluginInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_GetPluginInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).GetPluginInstance(ctx, req.(*GetPluginInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_DeletePluginInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePluginInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).DeletePluginInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_DeletePluginInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).DeletePluginInstance(ctx, req.(*DeletePluginInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_ListPluginInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPluginInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).ListPluginInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_ListPluginInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).ListPluginInstance(ctx, req.(*ListPluginInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_ListFlowFieldNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlowFieldNamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).ListFlowFieldNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_ListFlowFieldNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).ListFlowFieldNames(ctx, req.(*ListFlowFieldNamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_ListAvailableVerificationFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableVerificationFieldsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).ListAvailableVerificationFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_ListAvailableVerificationFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).ListAvailableVerificationFields(ctx, req.(*ListAvailableVerificationFieldsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_ListAvailablePaymentFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailablePaymentFieldsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).ListAvailablePaymentFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_ListAvailablePaymentFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).ListAvailablePaymentFields(ctx, req.(*ListAvailablePaymentFieldsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_ListPortalTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortalTypesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).ListPortalTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_ListPortalTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).ListPortalTypes(ctx, req.(*ListPortalTypesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_ListPortalWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortalWorkflowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).ListPortalWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_ListPortalWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).ListPortalWorkflows(ctx, req.(*ListPortalWorkflowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_ListAllActionDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllActionDefinitionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).ListAllActionDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_ListAllActionDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).ListAllActionDefinitions(ctx, req.(*ListAllActionDefinitionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalManagerApi_ListPluginsByMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPluginsByMethodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalManagerApiServer).ListPluginsByMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalManagerApi_ListPluginsByMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalManagerApiServer).ListPluginsByMethod(ctx, req.(*ListPluginsByMethodReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PortalManagerApi_ServiceDesc is the grpc.ServiceDesc for PortalManagerApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortalManagerApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.integrations.PortalManagerApi",
	HandlerType: (*PortalManagerApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertPortalConfig",
			Handler:    _PortalManagerApi_UpsertPortalConfig_Handler,
		},
		{
			MethodName: "ListPortalConfigs",
			Handler:    _PortalManagerApi_ListPortalConfigs_Handler,
		},
		{
			MethodName: "GetPortalConfig",
			Handler:    _PortalManagerApi_GetPortalConfig_Handler,
		},
		{
			MethodName: "DeletePortalConfig",
			Handler:    _PortalManagerApi_DeletePortalConfig_Handler,
		},
		{
			MethodName: "UpdatePortalConfigLogo",
			Handler:    _PortalManagerApi_UpdatePortalConfigLogo_Handler,
		},
		{
			MethodName: "GetPortalConfigLogo",
			Handler:    _PortalManagerApi_GetPortalConfigLogo_Handler,
		},
		{
			MethodName: "ListPortalLinks",
			Handler:    _PortalManagerApi_ListPortalLinks_Handler,
		},
		{
			MethodName: "GetPortalLink",
			Handler:    _PortalManagerApi_GetPortalLink_Handler,
		},
		{
			MethodName: "DeletePortalLink",
			Handler:    _PortalManagerApi_DeletePortalLink_Handler,
		},
		{
			MethodName: "CreatePortalLinks",
			Handler:    _PortalManagerApi_CreatePortalLinks_Handler,
		},
		{
			MethodName: "UpsertPortal",
			Handler:    _PortalManagerApi_UpsertPortal_Handler,
		},
		{
			MethodName: "GetPortal",
			Handler:    _PortalManagerApi_GetPortal_Handler,
		},
		{
			MethodName: "DeletePortal",
			Handler:    _PortalManagerApi_DeletePortal_Handler,
		},
		{
			MethodName: "ListPortals",
			Handler:    _PortalManagerApi_ListPortals_Handler,
		},
		{
			MethodName: "ListDetailedPortals",
			Handler:    _PortalManagerApi_ListDetailedPortals_Handler,
		},
		{
			MethodName: "GetDetailedPortal",
			Handler:    _PortalManagerApi_GetDetailedPortal_Handler,
		},
		{
			MethodName: "UpsertPluginInstance",
			Handler:    _PortalManagerApi_UpsertPluginInstance_Handler,
		},
		{
			MethodName: "GetPluginInstance",
			Handler:    _PortalManagerApi_GetPluginInstance_Handler,
		},
		{
			MethodName: "DeletePluginInstance",
			Handler:    _PortalManagerApi_DeletePluginInstance_Handler,
		},
		{
			MethodName: "ListPluginInstance",
			Handler:    _PortalManagerApi_ListPluginInstance_Handler,
		},
		{
			MethodName: "ListFlowFieldNames",
			Handler:    _PortalManagerApi_ListFlowFieldNames_Handler,
		},
		{
			MethodName: "ListAvailableVerificationFields",
			Handler:    _PortalManagerApi_ListAvailableVerificationFields_Handler,
		},
		{
			MethodName: "ListAvailablePaymentFields",
			Handler:    _PortalManagerApi_ListAvailablePaymentFields_Handler,
		},
		{
			MethodName: "ListPortalTypes",
			Handler:    _PortalManagerApi_ListPortalTypes_Handler,
		},
		{
			MethodName: "ListPortalWorkflows",
			Handler:    _PortalManagerApi_ListPortalWorkflows_Handler,
		},
		{
			MethodName: "ListAllActionDefinitions",
			Handler:    _PortalManagerApi_ListAllActionDefinitions_Handler,
		},
		{
			MethodName: "ListPluginsByMethod",
			Handler:    _PortalManagerApi_ListPluginsByMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/integrations/portals.proto",
}
