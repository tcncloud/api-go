// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1alpha1/integrations/service.proto

package integrations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Integrations_Process_FullMethodName                             = "/api.v1alpha1.integrations.Integrations/Process"
	Integrations_GetIntegrationTransaction_FullMethodName           = "/api.v1alpha1.integrations.Integrations/GetIntegrationTransaction"
	Integrations_GetIntegrationTransactionReport_FullMethodName     = "/api.v1alpha1.integrations.Integrations/GetIntegrationTransactionReport"
	Integrations_GetIntegrationTransactionReportData_FullMethodName = "/api.v1alpha1.integrations.Integrations/GetIntegrationTransactionReportData"
	Integrations_SearchPastTransactions_FullMethodName              = "/api.v1alpha1.integrations.Integrations/SearchPastTransactions"
	Integrations_GetAggregatedMetadata_FullMethodName               = "/api.v1alpha1.integrations.Integrations/GetAggregatedMetadata"
	Integrations_GetPortalLinksByDateRange_FullMethodName           = "/api.v1alpha1.integrations.Integrations/GetPortalLinksByDateRange"
	Integrations_CreateIntegrationConfig_FullMethodName             = "/api.v1alpha1.integrations.Integrations/CreateIntegrationConfig"
	Integrations_GetIntegrationConfig_FullMethodName                = "/api.v1alpha1.integrations.Integrations/GetIntegrationConfig"
	Integrations_UpdateIntegrationConfig_FullMethodName             = "/api.v1alpha1.integrations.Integrations/UpdateIntegrationConfig"
	Integrations_DeleteIntegrationConfig_FullMethodName             = "/api.v1alpha1.integrations.Integrations/DeleteIntegrationConfig"
	Integrations_ListIntegrations_FullMethodName                    = "/api.v1alpha1.integrations.Integrations/ListIntegrations"
	Integrations_ListIntegrationsForOrg_FullMethodName              = "/api.v1alpha1.integrations.Integrations/ListIntegrationsForOrg"
	Integrations_ListIntegrationConfigNames_FullMethodName          = "/api.v1alpha1.integrations.Integrations/ListIntegrationConfigNames"
	Integrations_ListJourneyConfigs_FullMethodName                  = "/api.v1alpha1.integrations.Integrations/ListJourneyConfigs"
	Integrations_ListNonJourneyConfigs_FullMethodName               = "/api.v1alpha1.integrations.Integrations/ListNonJourneyConfigs"
	Integrations_CreatePortalConfig_FullMethodName                  = "/api.v1alpha1.integrations.Integrations/CreatePortalConfig"
	Integrations_ListPortalConfigs_FullMethodName                   = "/api.v1alpha1.integrations.Integrations/ListPortalConfigs"
	Integrations_UpdatePortalConfig_FullMethodName                  = "/api.v1alpha1.integrations.Integrations/UpdatePortalConfig"
	Integrations_GetPortalConfig_FullMethodName                     = "/api.v1alpha1.integrations.Integrations/GetPortalConfig"
	Integrations_DeletePortalConfig_FullMethodName                  = "/api.v1alpha1.integrations.Integrations/DeletePortalConfig"
	Integrations_UpdatePortalLogo_FullMethodName                    = "/api.v1alpha1.integrations.Integrations/UpdatePortalLogo"
	Integrations_GetPortalLogo_FullMethodName                       = "/api.v1alpha1.integrations.Integrations/GetPortalLogo"
	Integrations_CreatePaymentPortalLinks_FullMethodName            = "/api.v1alpha1.integrations.Integrations/CreatePaymentPortalLinks"
	Integrations_Summary_FullMethodName                             = "/api.v1alpha1.integrations.Integrations/Summary"
	Integrations_ListIntegrationTemplatesByConfig_FullMethodName    = "/api.v1alpha1.integrations.Integrations/ListIntegrationTemplatesByConfig"
	Integrations_CallEpicPatient_FullMethodName                     = "/api.v1alpha1.integrations.Integrations/CallEpicPatient"
	Integrations_HangUpEpicPatientCall_FullMethodName               = "/api.v1alpha1.integrations.Integrations/HangUpEpicPatientCall"
	Integrations_GenerateEpicKeyPairs_FullMethodName                = "/api.v1alpha1.integrations.Integrations/GenerateEpicKeyPairs"
	Integrations_PopulateIntegrationLink_FullMethodName             = "/api.v1alpha1.integrations.Integrations/PopulateIntegrationLink"
	Integrations_ProcessWorkflow_FullMethodName                     = "/api.v1alpha1.integrations.Integrations/ProcessWorkflow"
)

// IntegrationsClient is the client API for Integrations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationsClient interface {
	// combine rquest parameters with the config parameters and run the integration method
	Process(ctx context.Context, in *ProcessReq, opts ...grpc.CallOption) (*ProcessRes, error)
	// get an integration transaction
	GetIntegrationTransaction(ctx context.Context, in *GetIntegrationTransactionReq, opts ...grpc.CallOption) (*IntegrationTransaction, error)
	GetIntegrationTransactionReport(ctx context.Context, in *GetIntegrationTransactionReportReq, opts ...grpc.CallOption) (*GetIntegrationTransactionReportRes, error)
	GetIntegrationTransactionReportData(ctx context.Context, in *GetIntegrationTransactionReportDataReq, opts ...grpc.CallOption) (*GetIntegrationTransactionReportDataRes, error)
	SearchPastTransactions(ctx context.Context, in *SearchPastTransactionsRequest, opts ...grpc.CallOption) (*SearchPastTransactionsResponse, error)
	// GetAggregatedMetadata returns the aggregated metrics about the portal links for a specified date range
	GetAggregatedMetadata(ctx context.Context, in *GetAggregatedMetadataReq, opts ...grpc.CallOption) (*GetAggregatedMetadataRes, error)
	// GetPortalLinksByDateRange returns portal link metrics and portal linnk data for specific range
	GetPortalLinksByDateRange(ctx context.Context, in *GetPortalLinksByDateRangeReq, opts ...grpc.CallOption) (*GetPortalLinksByDateRangeRes, error)
	// create a integration config
	CreateIntegrationConfig(ctx context.Context, in *IntegrationConfig, opts ...grpc.CallOption) (*Empty, error)
	// get an integration config
	GetIntegrationConfig(ctx context.Context, in *GetIntegrationConfigReq, opts ...grpc.CallOption) (*IntegrationConfig, error)
	// update an integration config
	UpdateIntegrationConfig(ctx context.Context, in *UpdateIntegrationConfigReq, opts ...grpc.CallOption) (*Empty, error)
	// delete an integration config
	DeleteIntegrationConfig(ctx context.Context, in *DeleteIntegrationConfigReq, opts ...grpc.CallOption) (*Empty, error)
	// list all supported integrations
	ListIntegrations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IntegrationInfos, error)
	ListIntegrationsForOrg(ctx context.Context, in *ListIntegrationsForOrgReq, opts ...grpc.CallOption) (*IntegrationInfos, error)
	// lists all the names of the configs for an org's integration type
	ListIntegrationConfigNames(ctx context.Context, in *ListIntegrationConfigNamesReq, opts ...grpc.CallOption) (*ListIntegrationConfigNamesRes, error)
	ListJourneyConfigs(ctx context.Context, in *ListJourneyConfigsReq, opts ...grpc.CallOption) (*IntegrationConfigs, error)
	ListNonJourneyConfigs(ctx context.Context, in *ListNonJourneyConfigsReq, opts ...grpc.CallOption) (*IntegrationConfigs, error)
	// TODO all services looking for payment portal configs should be using the
	// PortalManagerApi service in this same packages
	// CLUDG for the payment portal configs
	CreatePortalConfig(ctx context.Context, in *PortalConfig, opts ...grpc.CallOption) (*Empty, error)
	// TODO better signature
	// rpc ListPortalConfigs(ListPortalConfigsReq) returns (ListPortalConfigsRes);
	ListPortalConfigs(ctx context.Context, in *ListPortalConfigsReq, opts ...grpc.CallOption) (*PortalConfigs, error)
	UpdatePortalConfig(ctx context.Context, in *PortalConfig, opts ...grpc.CallOption) (*Empty, error)
	// TODO better signature
	// rpc GetPortalConfig(GetPortalConfigReq) returns (GetPortalConfigRes);
	GetPortalConfig(ctx context.Context, in *GetPortalConfigReq, opts ...grpc.CallOption) (*PortalConfig, error)
	// TODO better signature
	// rpc DeletePortalConfig(DeletePortalConfigReq) returns (DeletePortalConfigRes);
	DeletePortalConfig(ctx context.Context, in *DeletePortalConfigReq, opts ...grpc.CallOption) (*Empty, error)
	// TODO deprecate
	UpdatePortalLogo(ctx context.Context, in *UpdatePortalLogoReq, opts ...grpc.CallOption) (*Empty, error)
	// TODO deprecate
	GetPortalLogo(ctx context.Context, in *GetPortalLogoReq, opts ...grpc.CallOption) (*Logo, error)
	// TODO deprecate. use CreatePortalLinks on the PortalManagerApi
	// pulls the payment_link_config
	// creates an integration config for each set of data, and generates a url for the specific user
	CreatePaymentPortalLinks(ctx context.Context, in *CreatePaymentPortalLinksReq, opts ...grpc.CallOption) (*CreatePaymentPortalLinksRes, error)
	// takes a year in YYYY format and returns the summary of transaction for that year
	Summary(ctx context.Context, in *SummaryReq, opts ...grpc.CallOption) (*SummaryRes, error)
	// Lists integration templates that use the passed in integration config
	ListIntegrationTemplatesByConfig(ctx context.Context, in *ListIntegrationTemplatesByConfigReq, opts ...grpc.CallOption) (*ListIntegrationTemplatesByConfigRes, error)
	// CallEpicPatient initiates a call to the specified number from the agent using the click to call button within epic
	CallEpicPatient(ctx context.Context, in *CallEpicPatientReq, opts ...grpc.CallOption) (*CallEpicPatientRes, error)
	// CallEpicPatient initiates a call to the specified number from the agent using the click to call button within epic
	HangUpEpicPatientCall(ctx context.Context, in *HangUpEpicPatientCallReq, opts ...grpc.CallOption) (*Empty, error)
	// GenerateEpicKeyPairs creates 2 key pairs, stores the private keys, and returns the public keys
	GenerateEpicKeyPairs(ctx context.Context, in *GenerateEpicKeyPairReq, opts ...grpc.CallOption) (*GenerateEpicKeyPairRes, error)
	PopulateIntegrationLink(ctx context.Context, in *PopulateIntegrationLinkReq, opts ...grpc.CallOption) (*PopulateIntegrationLinkRes, error)
	ProcessWorkflow(ctx context.Context, in *ProcessWorkflowReq, opts ...grpc.CallOption) (*ProcessWorkflowRes, error)
}

type integrationsClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationsClient(cc grpc.ClientConnInterface) IntegrationsClient {
	return &integrationsClient{cc}
}

func (c *integrationsClient) Process(ctx context.Context, in *ProcessReq, opts ...grpc.CallOption) (*ProcessRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessRes)
	err := c.cc.Invoke(ctx, Integrations_Process_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) GetIntegrationTransaction(ctx context.Context, in *GetIntegrationTransactionReq, opts ...grpc.CallOption) (*IntegrationTransaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntegrationTransaction)
	err := c.cc.Invoke(ctx, Integrations_GetIntegrationTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) GetIntegrationTransactionReport(ctx context.Context, in *GetIntegrationTransactionReportReq, opts ...grpc.CallOption) (*GetIntegrationTransactionReportRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntegrationTransactionReportRes)
	err := c.cc.Invoke(ctx, Integrations_GetIntegrationTransactionReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) GetIntegrationTransactionReportData(ctx context.Context, in *GetIntegrationTransactionReportDataReq, opts ...grpc.CallOption) (*GetIntegrationTransactionReportDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntegrationTransactionReportDataRes)
	err := c.cc.Invoke(ctx, Integrations_GetIntegrationTransactionReportData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) SearchPastTransactions(ctx context.Context, in *SearchPastTransactionsRequest, opts ...grpc.CallOption) (*SearchPastTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPastTransactionsResponse)
	err := c.cc.Invoke(ctx, Integrations_SearchPastTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) GetAggregatedMetadata(ctx context.Context, in *GetAggregatedMetadataReq, opts ...grpc.CallOption) (*GetAggregatedMetadataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAggregatedMetadataRes)
	err := c.cc.Invoke(ctx, Integrations_GetAggregatedMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) GetPortalLinksByDateRange(ctx context.Context, in *GetPortalLinksByDateRangeReq, opts ...grpc.CallOption) (*GetPortalLinksByDateRangeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortalLinksByDateRangeRes)
	err := c.cc.Invoke(ctx, Integrations_GetPortalLinksByDateRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) CreateIntegrationConfig(ctx context.Context, in *IntegrationConfig, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Integrations_CreateIntegrationConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) GetIntegrationConfig(ctx context.Context, in *GetIntegrationConfigReq, opts ...grpc.CallOption) (*IntegrationConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntegrationConfig)
	err := c.cc.Invoke(ctx, Integrations_GetIntegrationConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) UpdateIntegrationConfig(ctx context.Context, in *UpdateIntegrationConfigReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Integrations_UpdateIntegrationConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) DeleteIntegrationConfig(ctx context.Context, in *DeleteIntegrationConfigReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Integrations_DeleteIntegrationConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) ListIntegrations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IntegrationInfos, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntegrationInfos)
	err := c.cc.Invoke(ctx, Integrations_ListIntegrations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) ListIntegrationsForOrg(ctx context.Context, in *ListIntegrationsForOrgReq, opts ...grpc.CallOption) (*IntegrationInfos, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntegrationInfos)
	err := c.cc.Invoke(ctx, Integrations_ListIntegrationsForOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) ListIntegrationConfigNames(ctx context.Context, in *ListIntegrationConfigNamesReq, opts ...grpc.CallOption) (*ListIntegrationConfigNamesRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIntegrationConfigNamesRes)
	err := c.cc.Invoke(ctx, Integrations_ListIntegrationConfigNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) ListJourneyConfigs(ctx context.Context, in *ListJourneyConfigsReq, opts ...grpc.CallOption) (*IntegrationConfigs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntegrationConfigs)
	err := c.cc.Invoke(ctx, Integrations_ListJourneyConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) ListNonJourneyConfigs(ctx context.Context, in *ListNonJourneyConfigsReq, opts ...grpc.CallOption) (*IntegrationConfigs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntegrationConfigs)
	err := c.cc.Invoke(ctx, Integrations_ListNonJourneyConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) CreatePortalConfig(ctx context.Context, in *PortalConfig, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Integrations_CreatePortalConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) ListPortalConfigs(ctx context.Context, in *ListPortalConfigsReq, opts ...grpc.CallOption) (*PortalConfigs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortalConfigs)
	err := c.cc.Invoke(ctx, Integrations_ListPortalConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) UpdatePortalConfig(ctx context.Context, in *PortalConfig, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Integrations_UpdatePortalConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) GetPortalConfig(ctx context.Context, in *GetPortalConfigReq, opts ...grpc.CallOption) (*PortalConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortalConfig)
	err := c.cc.Invoke(ctx, Integrations_GetPortalConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) DeletePortalConfig(ctx context.Context, in *DeletePortalConfigReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Integrations_DeletePortalConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) UpdatePortalLogo(ctx context.Context, in *UpdatePortalLogoReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Integrations_UpdatePortalLogo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) GetPortalLogo(ctx context.Context, in *GetPortalLogoReq, opts ...grpc.CallOption) (*Logo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Logo)
	err := c.cc.Invoke(ctx, Integrations_GetPortalLogo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) CreatePaymentPortalLinks(ctx context.Context, in *CreatePaymentPortalLinksReq, opts ...grpc.CallOption) (*CreatePaymentPortalLinksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentPortalLinksRes)
	err := c.cc.Invoke(ctx, Integrations_CreatePaymentPortalLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) Summary(ctx context.Context, in *SummaryReq, opts ...grpc.CallOption) (*SummaryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryRes)
	err := c.cc.Invoke(ctx, Integrations_Summary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) ListIntegrationTemplatesByConfig(ctx context.Context, in *ListIntegrationTemplatesByConfigReq, opts ...grpc.CallOption) (*ListIntegrationTemplatesByConfigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIntegrationTemplatesByConfigRes)
	err := c.cc.Invoke(ctx, Integrations_ListIntegrationTemplatesByConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) CallEpicPatient(ctx context.Context, in *CallEpicPatientReq, opts ...grpc.CallOption) (*CallEpicPatientRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallEpicPatientRes)
	err := c.cc.Invoke(ctx, Integrations_CallEpicPatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) HangUpEpicPatientCall(ctx context.Context, in *HangUpEpicPatientCallReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Integrations_HangUpEpicPatientCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) GenerateEpicKeyPairs(ctx context.Context, in *GenerateEpicKeyPairReq, opts ...grpc.CallOption) (*GenerateEpicKeyPairRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateEpicKeyPairRes)
	err := c.cc.Invoke(ctx, Integrations_GenerateEpicKeyPairs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) PopulateIntegrationLink(ctx context.Context, in *PopulateIntegrationLinkReq, opts ...grpc.CallOption) (*PopulateIntegrationLinkRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PopulateIntegrationLinkRes)
	err := c.cc.Invoke(ctx, Integrations_PopulateIntegrationLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) ProcessWorkflow(ctx context.Context, in *ProcessWorkflowReq, opts ...grpc.CallOption) (*ProcessWorkflowRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessWorkflowRes)
	err := c.cc.Invoke(ctx, Integrations_ProcessWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationsServer is the server API for Integrations service.
// All implementations must embed UnimplementedIntegrationsServer
// for forward compatibility.
type IntegrationsServer interface {
	// combine rquest parameters with the config parameters and run the integration method
	Process(context.Context, *ProcessReq) (*ProcessRes, error)
	// get an integration transaction
	GetIntegrationTransaction(context.Context, *GetIntegrationTransactionReq) (*IntegrationTransaction, error)
	GetIntegrationTransactionReport(context.Context, *GetIntegrationTransactionReportReq) (*GetIntegrationTransactionReportRes, error)
	GetIntegrationTransactionReportData(context.Context, *GetIntegrationTransactionReportDataReq) (*GetIntegrationTransactionReportDataRes, error)
	SearchPastTransactions(context.Context, *SearchPastTransactionsRequest) (*SearchPastTransactionsResponse, error)
	// GetAggregatedMetadata returns the aggregated metrics about the portal links for a specified date range
	GetAggregatedMetadata(context.Context, *GetAggregatedMetadataReq) (*GetAggregatedMetadataRes, error)
	// GetPortalLinksByDateRange returns portal link metrics and portal linnk data for specific range
	GetPortalLinksByDateRange(context.Context, *GetPortalLinksByDateRangeReq) (*GetPortalLinksByDateRangeRes, error)
	// create a integration config
	CreateIntegrationConfig(context.Context, *IntegrationConfig) (*Empty, error)
	// get an integration config
	GetIntegrationConfig(context.Context, *GetIntegrationConfigReq) (*IntegrationConfig, error)
	// update an integration config
	UpdateIntegrationConfig(context.Context, *UpdateIntegrationConfigReq) (*Empty, error)
	// delete an integration config
	DeleteIntegrationConfig(context.Context, *DeleteIntegrationConfigReq) (*Empty, error)
	// list all supported integrations
	ListIntegrations(context.Context, *Empty) (*IntegrationInfos, error)
	ListIntegrationsForOrg(context.Context, *ListIntegrationsForOrgReq) (*IntegrationInfos, error)
	// lists all the names of the configs for an org's integration type
	ListIntegrationConfigNames(context.Context, *ListIntegrationConfigNamesReq) (*ListIntegrationConfigNamesRes, error)
	ListJourneyConfigs(context.Context, *ListJourneyConfigsReq) (*IntegrationConfigs, error)
	ListNonJourneyConfigs(context.Context, *ListNonJourneyConfigsReq) (*IntegrationConfigs, error)
	// TODO all services looking for payment portal configs should be using the
	// PortalManagerApi service in this same packages
	// CLUDG for the payment portal configs
	CreatePortalConfig(context.Context, *PortalConfig) (*Empty, error)
	// TODO better signature
	// rpc ListPortalConfigs(ListPortalConfigsReq) returns (ListPortalConfigsRes);
	ListPortalConfigs(context.Context, *ListPortalConfigsReq) (*PortalConfigs, error)
	UpdatePortalConfig(context.Context, *PortalConfig) (*Empty, error)
	// TODO better signature
	// rpc GetPortalConfig(GetPortalConfigReq) returns (GetPortalConfigRes);
	GetPortalConfig(context.Context, *GetPortalConfigReq) (*PortalConfig, error)
	// TODO better signature
	// rpc DeletePortalConfig(DeletePortalConfigReq) returns (DeletePortalConfigRes);
	DeletePortalConfig(context.Context, *DeletePortalConfigReq) (*Empty, error)
	// TODO deprecate
	UpdatePortalLogo(context.Context, *UpdatePortalLogoReq) (*Empty, error)
	// TODO deprecate
	GetPortalLogo(context.Context, *GetPortalLogoReq) (*Logo, error)
	// TODO deprecate. use CreatePortalLinks on the PortalManagerApi
	// pulls the payment_link_config
	// creates an integration config for each set of data, and generates a url for the specific user
	CreatePaymentPortalLinks(context.Context, *CreatePaymentPortalLinksReq) (*CreatePaymentPortalLinksRes, error)
	// takes a year in YYYY format and returns the summary of transaction for that year
	Summary(context.Context, *SummaryReq) (*SummaryRes, error)
	// Lists integration templates that use the passed in integration config
	ListIntegrationTemplatesByConfig(context.Context, *ListIntegrationTemplatesByConfigReq) (*ListIntegrationTemplatesByConfigRes, error)
	// CallEpicPatient initiates a call to the specified number from the agent using the click to call button within epic
	CallEpicPatient(context.Context, *CallEpicPatientReq) (*CallEpicPatientRes, error)
	// CallEpicPatient initiates a call to the specified number from the agent using the click to call button within epic
	HangUpEpicPatientCall(context.Context, *HangUpEpicPatientCallReq) (*Empty, error)
	// GenerateEpicKeyPairs creates 2 key pairs, stores the private keys, and returns the public keys
	GenerateEpicKeyPairs(context.Context, *GenerateEpicKeyPairReq) (*GenerateEpicKeyPairRes, error)
	PopulateIntegrationLink(context.Context, *PopulateIntegrationLinkReq) (*PopulateIntegrationLinkRes, error)
	ProcessWorkflow(context.Context, *ProcessWorkflowReq) (*ProcessWorkflowRes, error)
	mustEmbedUnimplementedIntegrationsServer()
}

// UnimplementedIntegrationsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntegrationsServer struct{}

func (UnimplementedIntegrationsServer) Process(context.Context, *ProcessReq) (*ProcessRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedIntegrationsServer) GetIntegrationTransaction(context.Context, *GetIntegrationTransactionReq) (*IntegrationTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationTransaction not implemented")
}
func (UnimplementedIntegrationsServer) GetIntegrationTransactionReport(context.Context, *GetIntegrationTransactionReportReq) (*GetIntegrationTransactionReportRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationTransactionReport not implemented")
}
func (UnimplementedIntegrationsServer) GetIntegrationTransactionReportData(context.Context, *GetIntegrationTransactionReportDataReq) (*GetIntegrationTransactionReportDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationTransactionReportData not implemented")
}
func (UnimplementedIntegrationsServer) SearchPastTransactions(context.Context, *SearchPastTransactionsRequest) (*SearchPastTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPastTransactions not implemented")
}
func (UnimplementedIntegrationsServer) GetAggregatedMetadata(context.Context, *GetAggregatedMetadataReq) (*GetAggregatedMetadataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregatedMetadata not implemented")
}
func (UnimplementedIntegrationsServer) GetPortalLinksByDateRange(context.Context, *GetPortalLinksByDateRangeReq) (*GetPortalLinksByDateRangeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortalLinksByDateRange not implemented")
}
func (UnimplementedIntegrationsServer) CreateIntegrationConfig(context.Context, *IntegrationConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntegrationConfig not implemented")
}
func (UnimplementedIntegrationsServer) GetIntegrationConfig(context.Context, *GetIntegrationConfigReq) (*IntegrationConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationConfig not implemented")
}
func (UnimplementedIntegrationsServer) UpdateIntegrationConfig(context.Context, *UpdateIntegrationConfigReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntegrationConfig not implemented")
}
func (UnimplementedIntegrationsServer) DeleteIntegrationConfig(context.Context, *DeleteIntegrationConfigReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIntegrationConfig not implemented")
}
func (UnimplementedIntegrationsServer) ListIntegrations(context.Context, *Empty) (*IntegrationInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegrations not implemented")
}
func (UnimplementedIntegrationsServer) ListIntegrationsForOrg(context.Context, *ListIntegrationsForOrgReq) (*IntegrationInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegrationsForOrg not implemented")
}
func (UnimplementedIntegrationsServer) ListIntegrationConfigNames(context.Context, *ListIntegrationConfigNamesReq) (*ListIntegrationConfigNamesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegrationConfigNames not implemented")
}
func (UnimplementedIntegrationsServer) ListJourneyConfigs(context.Context, *ListJourneyConfigsReq) (*IntegrationConfigs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJourneyConfigs not implemented")
}
func (UnimplementedIntegrationsServer) ListNonJourneyConfigs(context.Context, *ListNonJourneyConfigsReq) (*IntegrationConfigs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNonJourneyConfigs not implemented")
}
func (UnimplementedIntegrationsServer) CreatePortalConfig(context.Context, *PortalConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortalConfig not implemented")
}
func (UnimplementedIntegrationsServer) ListPortalConfigs(context.Context, *ListPortalConfigsReq) (*PortalConfigs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPortalConfigs not implemented")
}
func (UnimplementedIntegrationsServer) UpdatePortalConfig(context.Context, *PortalConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePortalConfig not implemented")
}
func (UnimplementedIntegrationsServer) GetPortalConfig(context.Context, *GetPortalConfigReq) (*PortalConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortalConfig not implemented")
}
func (UnimplementedIntegrationsServer) DeletePortalConfig(context.Context, *DeletePortalConfigReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePortalConfig not implemented")
}
func (UnimplementedIntegrationsServer) UpdatePortalLogo(context.Context, *UpdatePortalLogoReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePortalLogo not implemented")
}
func (UnimplementedIntegrationsServer) GetPortalLogo(context.Context, *GetPortalLogoReq) (*Logo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortalLogo not implemented")
}
func (UnimplementedIntegrationsServer) CreatePaymentPortalLinks(context.Context, *CreatePaymentPortalLinksReq) (*CreatePaymentPortalLinksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentPortalLinks not implemented")
}
func (UnimplementedIntegrationsServer) Summary(context.Context, *SummaryReq) (*SummaryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summary not implemented")
}
func (UnimplementedIntegrationsServer) ListIntegrationTemplatesByConfig(context.Context, *ListIntegrationTemplatesByConfigReq) (*ListIntegrationTemplatesByConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegrationTemplatesByConfig not implemented")
}
func (UnimplementedIntegrationsServer) CallEpicPatient(context.Context, *CallEpicPatientReq) (*CallEpicPatientRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallEpicPatient not implemented")
}
func (UnimplementedIntegrationsServer) HangUpEpicPatientCall(context.Context, *HangUpEpicPatientCallReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HangUpEpicPatientCall not implemented")
}
func (UnimplementedIntegrationsServer) GenerateEpicKeyPairs(context.Context, *GenerateEpicKeyPairReq) (*GenerateEpicKeyPairRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEpicKeyPairs not implemented")
}
func (UnimplementedIntegrationsServer) PopulateIntegrationLink(context.Context, *PopulateIntegrationLinkReq) (*PopulateIntegrationLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopulateIntegrationLink not implemented")
}
func (UnimplementedIntegrationsServer) ProcessWorkflow(context.Context, *ProcessWorkflowReq) (*ProcessWorkflowRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessWorkflow not implemented")
}
func (UnimplementedIntegrationsServer) mustEmbedUnimplementedIntegrationsServer() {}
func (UnimplementedIntegrationsServer) testEmbeddedByValue()                      {}

// UnsafeIntegrationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationsServer will
// result in compilation errors.
type UnsafeIntegrationsServer interface {
	mustEmbedUnimplementedIntegrationsServer()
}

func RegisterIntegrationsServer(s grpc.ServiceRegistrar, srv IntegrationsServer) {
	// If the following call pancis, it indicates UnimplementedIntegrationsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Integrations_ServiceDesc, srv)
}

func _Integrations_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_Process_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).Process(ctx, req.(*ProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_GetIntegrationTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).GetIntegrationTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_GetIntegrationTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).GetIntegrationTransaction(ctx, req.(*GetIntegrationTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_GetIntegrationTransactionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationTransactionReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).GetIntegrationTransactionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_GetIntegrationTransactionReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).GetIntegrationTransactionReport(ctx, req.(*GetIntegrationTransactionReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_GetIntegrationTransactionReportData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationTransactionReportDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).GetIntegrationTransactionReportData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_GetIntegrationTransactionReportData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).GetIntegrationTransactionReportData(ctx, req.(*GetIntegrationTransactionReportDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_SearchPastTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPastTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).SearchPastTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_SearchPastTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).SearchPastTransactions(ctx, req.(*SearchPastTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_GetAggregatedMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregatedMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).GetAggregatedMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_GetAggregatedMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).GetAggregatedMetadata(ctx, req.(*GetAggregatedMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_GetPortalLinksByDateRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortalLinksByDateRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).GetPortalLinksByDateRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_GetPortalLinksByDateRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).GetPortalLinksByDateRange(ctx, req.(*GetPortalLinksByDateRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_CreateIntegrationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).CreateIntegrationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_CreateIntegrationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).CreateIntegrationConfig(ctx, req.(*IntegrationConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_GetIntegrationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).GetIntegrationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_GetIntegrationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).GetIntegrationConfig(ctx, req.(*GetIntegrationConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_UpdateIntegrationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIntegrationConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).UpdateIntegrationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_UpdateIntegrationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).UpdateIntegrationConfig(ctx, req.(*UpdateIntegrationConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_DeleteIntegrationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntegrationConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).DeleteIntegrationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_DeleteIntegrationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).DeleteIntegrationConfig(ctx, req.(*DeleteIntegrationConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_ListIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).ListIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_ListIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).ListIntegrations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_ListIntegrationsForOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntegrationsForOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).ListIntegrationsForOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_ListIntegrationsForOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).ListIntegrationsForOrg(ctx, req.(*ListIntegrationsForOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_ListIntegrationConfigNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntegrationConfigNamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).ListIntegrationConfigNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_ListIntegrationConfigNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).ListIntegrationConfigNames(ctx, req.(*ListIntegrationConfigNamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_ListJourneyConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJourneyConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).ListJourneyConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_ListJourneyConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).ListJourneyConfigs(ctx, req.(*ListJourneyConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_ListNonJourneyConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNonJourneyConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).ListNonJourneyConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_ListNonJourneyConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).ListNonJourneyConfigs(ctx, req.(*ListNonJourneyConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_CreatePortalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortalConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).CreatePortalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_CreatePortalConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).CreatePortalConfig(ctx, req.(*PortalConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_ListPortalConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortalConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).ListPortalConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_ListPortalConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).ListPortalConfigs(ctx, req.(*ListPortalConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_UpdatePortalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortalConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).UpdatePortalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_UpdatePortalConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).UpdatePortalConfig(ctx, req.(*PortalConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_GetPortalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortalConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).GetPortalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_GetPortalConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).GetPortalConfig(ctx, req.(*GetPortalConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_DeletePortalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortalConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).DeletePortalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_DeletePortalConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).DeletePortalConfig(ctx, req.(*DeletePortalConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_UpdatePortalLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortalLogoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).UpdatePortalLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_UpdatePortalLogo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).UpdatePortalLogo(ctx, req.(*UpdatePortalLogoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_GetPortalLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortalLogoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).GetPortalLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_GetPortalLogo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).GetPortalLogo(ctx, req.(*GetPortalLogoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_CreatePaymentPortalLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentPortalLinksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).CreatePaymentPortalLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_CreatePaymentPortalLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).CreatePaymentPortalLinks(ctx, req.(*CreatePaymentPortalLinksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_Summary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).Summary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_Summary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).Summary(ctx, req.(*SummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_ListIntegrationTemplatesByConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntegrationTemplatesByConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).ListIntegrationTemplatesByConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_ListIntegrationTemplatesByConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).ListIntegrationTemplatesByConfig(ctx, req.(*ListIntegrationTemplatesByConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_CallEpicPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallEpicPatientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).CallEpicPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_CallEpicPatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).CallEpicPatient(ctx, req.(*CallEpicPatientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_HangUpEpicPatientCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HangUpEpicPatientCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).HangUpEpicPatientCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_HangUpEpicPatientCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).HangUpEpicPatientCall(ctx, req.(*HangUpEpicPatientCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_GenerateEpicKeyPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateEpicKeyPairReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).GenerateEpicKeyPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_GenerateEpicKeyPairs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).GenerateEpicKeyPairs(ctx, req.(*GenerateEpicKeyPairReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_PopulateIntegrationLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopulateIntegrationLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).PopulateIntegrationLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_PopulateIntegrationLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).PopulateIntegrationLink(ctx, req.(*PopulateIntegrationLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_ProcessWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessWorkflowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).ProcessWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integrations_ProcessWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).ProcessWorkflow(ctx, req.(*ProcessWorkflowReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Integrations_ServiceDesc is the grpc.ServiceDesc for Integrations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Integrations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.integrations.Integrations",
	HandlerType: (*IntegrationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _Integrations_Process_Handler,
		},
		{
			MethodName: "GetIntegrationTransaction",
			Handler:    _Integrations_GetIntegrationTransaction_Handler,
		},
		{
			MethodName: "GetIntegrationTransactionReport",
			Handler:    _Integrations_GetIntegrationTransactionReport_Handler,
		},
		{
			MethodName: "GetIntegrationTransactionReportData",
			Handler:    _Integrations_GetIntegrationTransactionReportData_Handler,
		},
		{
			MethodName: "SearchPastTransactions",
			Handler:    _Integrations_SearchPastTransactions_Handler,
		},
		{
			MethodName: "GetAggregatedMetadata",
			Handler:    _Integrations_GetAggregatedMetadata_Handler,
		},
		{
			MethodName: "GetPortalLinksByDateRange",
			Handler:    _Integrations_GetPortalLinksByDateRange_Handler,
		},
		{
			MethodName: "CreateIntegrationConfig",
			Handler:    _Integrations_CreateIntegrationConfig_Handler,
		},
		{
			MethodName: "GetIntegrationConfig",
			Handler:    _Integrations_GetIntegrationConfig_Handler,
		},
		{
			MethodName: "UpdateIntegrationConfig",
			Handler:    _Integrations_UpdateIntegrationConfig_Handler,
		},
		{
			MethodName: "DeleteIntegrationConfig",
			Handler:    _Integrations_DeleteIntegrationConfig_Handler,
		},
		{
			MethodName: "ListIntegrations",
			Handler:    _Integrations_ListIntegrations_Handler,
		},
		{
			MethodName: "ListIntegrationsForOrg",
			Handler:    _Integrations_ListIntegrationsForOrg_Handler,
		},
		{
			MethodName: "ListIntegrationConfigNames",
			Handler:    _Integrations_ListIntegrationConfigNames_Handler,
		},
		{
			MethodName: "ListJourneyConfigs",
			Handler:    _Integrations_ListJourneyConfigs_Handler,
		},
		{
			MethodName: "ListNonJourneyConfigs",
			Handler:    _Integrations_ListNonJourneyConfigs_Handler,
		},
		{
			MethodName: "CreatePortalConfig",
			Handler:    _Integrations_CreatePortalConfig_Handler,
		},
		{
			MethodName: "ListPortalConfigs",
			Handler:    _Integrations_ListPortalConfigs_Handler,
		},
		{
			MethodName: "UpdatePortalConfig",
			Handler:    _Integrations_UpdatePortalConfig_Handler,
		},
		{
			MethodName: "GetPortalConfig",
			Handler:    _Integrations_GetPortalConfig_Handler,
		},
		{
			MethodName: "DeletePortalConfig",
			Handler:    _Integrations_DeletePortalConfig_Handler,
		},
		{
			MethodName: "UpdatePortalLogo",
			Handler:    _Integrations_UpdatePortalLogo_Handler,
		},
		{
			MethodName: "GetPortalLogo",
			Handler:    _Integrations_GetPortalLogo_Handler,
		},
		{
			MethodName: "CreatePaymentPortalLinks",
			Handler:    _Integrations_CreatePaymentPortalLinks_Handler,
		},
		{
			MethodName: "Summary",
			Handler:    _Integrations_Summary_Handler,
		},
		{
			MethodName: "ListIntegrationTemplatesByConfig",
			Handler:    _Integrations_ListIntegrationTemplatesByConfig_Handler,
		},
		{
			MethodName: "CallEpicPatient",
			Handler:    _Integrations_CallEpicPatient_Handler,
		},
		{
			MethodName: "HangUpEpicPatientCall",
			Handler:    _Integrations_HangUpEpicPatientCall_Handler,
		},
		{
			MethodName: "GenerateEpicKeyPairs",
			Handler:    _Integrations_GenerateEpicKeyPairs_Handler,
		},
		{
			MethodName: "PopulateIntegrationLink",
			Handler:    _Integrations_PopulateIntegrationLink_Handler,
		},
		{
			MethodName: "ProcessWorkflow",
			Handler:    _Integrations_ProcessWorkflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/integrations/service.proto",
}
