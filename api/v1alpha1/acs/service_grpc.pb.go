// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1alpha1/acs/service.proto

package acs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Acs_CreateScript_FullMethodName         = "/api.v1alpha1.acs.Acs/CreateScript"
	Acs_UpdateScript_FullMethodName         = "/api.v1alpha1.acs.Acs/UpdateScript"
	Acs_GetScriptById_FullMethodName        = "/api.v1alpha1.acs.Acs/GetScriptById"
	Acs_ListScripts_FullMethodName          = "/api.v1alpha1.acs.Acs/ListScripts"
	Acs_SaveResponses_FullMethodName        = "/api.v1alpha1.acs.Acs/SaveResponses"
	Acs_GetResponses_FullMethodName         = "/api.v1alpha1.acs.Acs/GetResponses"
	Acs_CreateRule_FullMethodName           = "/api.v1alpha1.acs.Acs/CreateRule"
	Acs_UpdateRules_FullMethodName          = "/api.v1alpha1.acs.Acs/UpdateRules"
	Acs_ListRules_FullMethodName            = "/api.v1alpha1.acs.Acs/ListRules"
	Acs_CreateRegexEvaluator_FullMethodName = "/api.v1alpha1.acs.Acs/CreateRegexEvaluator"
	Acs_UpdateRegexEvaluator_FullMethodName = "/api.v1alpha1.acs.Acs/UpdateRegexEvaluator"
	Acs_ListRegexEvaluators_FullMethodName  = "/api.v1alpha1.acs.Acs/ListRegexEvaluators"
	Acs_DeleteRule_FullMethodName           = "/api.v1alpha1.acs.Acs/DeleteRule"
	Acs_GetScript_FullMethodName            = "/api.v1alpha1.acs.Acs/GetScript"
)

// AcsClient is the client API for Acs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AcsClient interface {
	CreateScript(ctx context.Context, in *CreateScriptRequest, opts ...grpc.CallOption) (*CreateScriptResponse, error)
	UpdateScript(ctx context.Context, in *UpdateScriptRequest, opts ...grpc.CallOption) (*UpdateScriptResponse, error)
	GetScriptById(ctx context.Context, in *GetScriptByIdRequest, opts ...grpc.CallOption) (*GetScriptByIdResponse, error)
	ListScripts(ctx context.Context, in *ListScriptsRequest, opts ...grpc.CallOption) (Acs_ListScriptsClient, error)
	SaveResponses(ctx context.Context, in *SaveResponsesRequest, opts ...grpc.CallOption) (*SaveResponsesResponse, error)
	GetResponses(ctx context.Context, in *GetResponsesRequest, opts ...grpc.CallOption) (*GetResponsesResponse, error)
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleResponse, error)
	UpdateRules(ctx context.Context, in *UpdateRulesRequest, opts ...grpc.CallOption) (*UpdateRulesResponse, error)
	ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error)
	CreateRegexEvaluator(ctx context.Context, in *CreateRegexEvaluatorRequest, opts ...grpc.CallOption) (*CreateRegexEvaluatorResponse, error)
	UpdateRegexEvaluator(ctx context.Context, in *UpdateRegexEvaluatorRequest, opts ...grpc.CallOption) (*UpdateRegexEvaluatorResponse, error)
	ListRegexEvaluators(ctx context.Context, in *ListRegexEvaluatorsRequest, opts ...grpc.CallOption) (*ListRegexEvaluatorsResponse, error)
	DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error)
	GetScript(ctx context.Context, in *GetScriptRequest, opts ...grpc.CallOption) (*GetScriptResponse, error)
}

type acsClient struct {
	cc grpc.ClientConnInterface
}

func NewAcsClient(cc grpc.ClientConnInterface) AcsClient {
	return &acsClient{cc}
}

func (c *acsClient) CreateScript(ctx context.Context, in *CreateScriptRequest, opts ...grpc.CallOption) (*CreateScriptResponse, error) {
	out := new(CreateScriptResponse)
	err := c.cc.Invoke(ctx, Acs_CreateScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acsClient) UpdateScript(ctx context.Context, in *UpdateScriptRequest, opts ...grpc.CallOption) (*UpdateScriptResponse, error) {
	out := new(UpdateScriptResponse)
	err := c.cc.Invoke(ctx, Acs_UpdateScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acsClient) GetScriptById(ctx context.Context, in *GetScriptByIdRequest, opts ...grpc.CallOption) (*GetScriptByIdResponse, error) {
	out := new(GetScriptByIdResponse)
	err := c.cc.Invoke(ctx, Acs_GetScriptById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acsClient) ListScripts(ctx context.Context, in *ListScriptsRequest, opts ...grpc.CallOption) (Acs_ListScriptsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Acs_ServiceDesc.Streams[0], Acs_ListScripts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &acsListScriptsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Acs_ListScriptsClient interface {
	Recv() (*ScriptDetails, error)
	grpc.ClientStream
}

type acsListScriptsClient struct {
	grpc.ClientStream
}

func (x *acsListScriptsClient) Recv() (*ScriptDetails, error) {
	m := new(ScriptDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *acsClient) SaveResponses(ctx context.Context, in *SaveResponsesRequest, opts ...grpc.CallOption) (*SaveResponsesResponse, error) {
	out := new(SaveResponsesResponse)
	err := c.cc.Invoke(ctx, Acs_SaveResponses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acsClient) GetResponses(ctx context.Context, in *GetResponsesRequest, opts ...grpc.CallOption) (*GetResponsesResponse, error) {
	out := new(GetResponsesResponse)
	err := c.cc.Invoke(ctx, Acs_GetResponses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acsClient) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleResponse, error) {
	out := new(CreateRuleResponse)
	err := c.cc.Invoke(ctx, Acs_CreateRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acsClient) UpdateRules(ctx context.Context, in *UpdateRulesRequest, opts ...grpc.CallOption) (*UpdateRulesResponse, error) {
	out := new(UpdateRulesResponse)
	err := c.cc.Invoke(ctx, Acs_UpdateRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acsClient) ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error) {
	out := new(ListRulesResponse)
	err := c.cc.Invoke(ctx, Acs_ListRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acsClient) CreateRegexEvaluator(ctx context.Context, in *CreateRegexEvaluatorRequest, opts ...grpc.CallOption) (*CreateRegexEvaluatorResponse, error) {
	out := new(CreateRegexEvaluatorResponse)
	err := c.cc.Invoke(ctx, Acs_CreateRegexEvaluator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acsClient) UpdateRegexEvaluator(ctx context.Context, in *UpdateRegexEvaluatorRequest, opts ...grpc.CallOption) (*UpdateRegexEvaluatorResponse, error) {
	out := new(UpdateRegexEvaluatorResponse)
	err := c.cc.Invoke(ctx, Acs_UpdateRegexEvaluator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acsClient) ListRegexEvaluators(ctx context.Context, in *ListRegexEvaluatorsRequest, opts ...grpc.CallOption) (*ListRegexEvaluatorsResponse, error) {
	out := new(ListRegexEvaluatorsResponse)
	err := c.cc.Invoke(ctx, Acs_ListRegexEvaluators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acsClient) DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error) {
	out := new(DeleteRuleResponse)
	err := c.cc.Invoke(ctx, Acs_DeleteRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acsClient) GetScript(ctx context.Context, in *GetScriptRequest, opts ...grpc.CallOption) (*GetScriptResponse, error) {
	out := new(GetScriptResponse)
	err := c.cc.Invoke(ctx, Acs_GetScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcsServer is the server API for Acs service.
// All implementations must embed UnimplementedAcsServer
// for forward compatibility
type AcsServer interface {
	CreateScript(context.Context, *CreateScriptRequest) (*CreateScriptResponse, error)
	UpdateScript(context.Context, *UpdateScriptRequest) (*UpdateScriptResponse, error)
	GetScriptById(context.Context, *GetScriptByIdRequest) (*GetScriptByIdResponse, error)
	ListScripts(*ListScriptsRequest, Acs_ListScriptsServer) error
	SaveResponses(context.Context, *SaveResponsesRequest) (*SaveResponsesResponse, error)
	GetResponses(context.Context, *GetResponsesRequest) (*GetResponsesResponse, error)
	CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleResponse, error)
	UpdateRules(context.Context, *UpdateRulesRequest) (*UpdateRulesResponse, error)
	ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error)
	CreateRegexEvaluator(context.Context, *CreateRegexEvaluatorRequest) (*CreateRegexEvaluatorResponse, error)
	UpdateRegexEvaluator(context.Context, *UpdateRegexEvaluatorRequest) (*UpdateRegexEvaluatorResponse, error)
	ListRegexEvaluators(context.Context, *ListRegexEvaluatorsRequest) (*ListRegexEvaluatorsResponse, error)
	DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error)
	GetScript(context.Context, *GetScriptRequest) (*GetScriptResponse, error)
	mustEmbedUnimplementedAcsServer()
}

// UnimplementedAcsServer must be embedded to have forward compatible implementations.
type UnimplementedAcsServer struct {
}

func (UnimplementedAcsServer) CreateScript(context.Context, *CreateScriptRequest) (*CreateScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScript not implemented")
}
func (UnimplementedAcsServer) UpdateScript(context.Context, *UpdateScriptRequest) (*UpdateScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScript not implemented")
}
func (UnimplementedAcsServer) GetScriptById(context.Context, *GetScriptByIdRequest) (*GetScriptByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScriptById not implemented")
}
func (UnimplementedAcsServer) ListScripts(*ListScriptsRequest, Acs_ListScriptsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListScripts not implemented")
}
func (UnimplementedAcsServer) SaveResponses(context.Context, *SaveResponsesRequest) (*SaveResponsesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveResponses not implemented")
}
func (UnimplementedAcsServer) GetResponses(context.Context, *GetResponsesRequest) (*GetResponsesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResponses not implemented")
}
func (UnimplementedAcsServer) CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (UnimplementedAcsServer) UpdateRules(context.Context, *UpdateRulesRequest) (*UpdateRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRules not implemented")
}
func (UnimplementedAcsServer) ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRules not implemented")
}
func (UnimplementedAcsServer) CreateRegexEvaluator(context.Context, *CreateRegexEvaluatorRequest) (*CreateRegexEvaluatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegexEvaluator not implemented")
}
func (UnimplementedAcsServer) UpdateRegexEvaluator(context.Context, *UpdateRegexEvaluatorRequest) (*UpdateRegexEvaluatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegexEvaluator not implemented")
}
func (UnimplementedAcsServer) ListRegexEvaluators(context.Context, *ListRegexEvaluatorsRequest) (*ListRegexEvaluatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegexEvaluators not implemented")
}
func (UnimplementedAcsServer) DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (UnimplementedAcsServer) GetScript(context.Context, *GetScriptRequest) (*GetScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScript not implemented")
}
func (UnimplementedAcsServer) mustEmbedUnimplementedAcsServer() {}

// UnsafeAcsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AcsServer will
// result in compilation errors.
type UnsafeAcsServer interface {
	mustEmbedUnimplementedAcsServer()
}

func RegisterAcsServer(s grpc.ServiceRegistrar, srv AcsServer) {
	s.RegisterService(&Acs_ServiceDesc, srv)
}

func _Acs_CreateScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcsServer).CreateScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acs_CreateScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcsServer).CreateScript(ctx, req.(*CreateScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acs_UpdateScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcsServer).UpdateScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acs_UpdateScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcsServer).UpdateScript(ctx, req.(*UpdateScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acs_GetScriptById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScriptByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcsServer).GetScriptById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acs_GetScriptById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcsServer).GetScriptById(ctx, req.(*GetScriptByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acs_ListScripts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListScriptsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AcsServer).ListScripts(m, &acsListScriptsServer{stream})
}

type Acs_ListScriptsServer interface {
	Send(*ScriptDetails) error
	grpc.ServerStream
}

type acsListScriptsServer struct {
	grpc.ServerStream
}

func (x *acsListScriptsServer) Send(m *ScriptDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Acs_SaveResponses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveResponsesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcsServer).SaveResponses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acs_SaveResponses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcsServer).SaveResponses(ctx, req.(*SaveResponsesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acs_GetResponses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResponsesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcsServer).GetResponses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acs_GetResponses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcsServer).GetResponses(ctx, req.(*GetResponsesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acs_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcsServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acs_CreateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcsServer).CreateRule(ctx, req.(*CreateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acs_UpdateRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcsServer).UpdateRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acs_UpdateRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcsServer).UpdateRules(ctx, req.(*UpdateRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acs_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcsServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acs_ListRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcsServer).ListRules(ctx, req.(*ListRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acs_CreateRegexEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegexEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcsServer).CreateRegexEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acs_CreateRegexEvaluator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcsServer).CreateRegexEvaluator(ctx, req.(*CreateRegexEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acs_UpdateRegexEvaluator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegexEvaluatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcsServer).UpdateRegexEvaluator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acs_UpdateRegexEvaluator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcsServer).UpdateRegexEvaluator(ctx, req.(*UpdateRegexEvaluatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acs_ListRegexEvaluators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegexEvaluatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcsServer).ListRegexEvaluators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acs_ListRegexEvaluators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcsServer).ListRegexEvaluators(ctx, req.(*ListRegexEvaluatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acs_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcsServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acs_DeleteRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcsServer).DeleteRule(ctx, req.(*DeleteRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acs_GetScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcsServer).GetScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acs_GetScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcsServer).GetScript(ctx, req.(*GetScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Acs_ServiceDesc is the grpc.ServiceDesc for Acs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Acs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.acs.Acs",
	HandlerType: (*AcsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScript",
			Handler:    _Acs_CreateScript_Handler,
		},
		{
			MethodName: "UpdateScript",
			Handler:    _Acs_UpdateScript_Handler,
		},
		{
			MethodName: "GetScriptById",
			Handler:    _Acs_GetScriptById_Handler,
		},
		{
			MethodName: "SaveResponses",
			Handler:    _Acs_SaveResponses_Handler,
		},
		{
			MethodName: "GetResponses",
			Handler:    _Acs_GetResponses_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _Acs_CreateRule_Handler,
		},
		{
			MethodName: "UpdateRules",
			Handler:    _Acs_UpdateRules_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _Acs_ListRules_Handler,
		},
		{
			MethodName: "CreateRegexEvaluator",
			Handler:    _Acs_CreateRegexEvaluator_Handler,
		},
		{
			MethodName: "UpdateRegexEvaluator",
			Handler:    _Acs_UpdateRegexEvaluator_Handler,
		},
		{
			MethodName: "ListRegexEvaluators",
			Handler:    _Acs_ListRegexEvaluators_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _Acs_DeleteRule_Handler,
		},
		{
			MethodName: "GetScript",
			Handler:    _Acs_GetScript_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListScripts",
			Handler:       _Acs_ListScripts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1alpha1/acs/service.proto",
}
