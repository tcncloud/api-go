// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1alpha1/newsroom/service.proto

package newsroom

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NewsroomAPI_CreateNewsArticle_FullMethodName  = "/api.v1alpha1.newsroom.NewsroomAPI/CreateNewsArticle"
	NewsroomAPI_ListNewsArticles_FullMethodName   = "/api.v1alpha1.newsroom.NewsroomAPI/ListNewsArticles"
	NewsroomAPI_GetNewsArticleById_FullMethodName = "/api.v1alpha1.newsroom.NewsroomAPI/GetNewsArticleById"
	NewsroomAPI_UpdateNewsArticle_FullMethodName  = "/api.v1alpha1.newsroom.NewsroomAPI/UpdateNewsArticle"
)

// NewsroomAPIClient is the client API for NewsroomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsroomAPIClient interface {
	// create news article
	CreateNewsArticle(ctx context.Context, in *CreateNewsArticleRequest, opts ...grpc.CallOption) (*CreateNewsArticleResponse, error)
	// list news articles
	ListNewsArticles(ctx context.Context, in *ListNewsArticlesRequest, opts ...grpc.CallOption) (*ListNewsArticlesResponse, error)
	// get news article details by the id
	GetNewsArticleById(ctx context.Context, in *GetNewsArticleByIdRequest, opts ...grpc.CallOption) (*GetNewsArticleByIdResponse, error)
	// update news article
	UpdateNewsArticle(ctx context.Context, in *UpdateNewsArticleRequest, opts ...grpc.CallOption) (*UpdateNewsArticleResponse, error)
}

type newsroomAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsroomAPIClient(cc grpc.ClientConnInterface) NewsroomAPIClient {
	return &newsroomAPIClient{cc}
}

func (c *newsroomAPIClient) CreateNewsArticle(ctx context.Context, in *CreateNewsArticleRequest, opts ...grpc.CallOption) (*CreateNewsArticleResponse, error) {
	out := new(CreateNewsArticleResponse)
	err := c.cc.Invoke(ctx, NewsroomAPI_CreateNewsArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsroomAPIClient) ListNewsArticles(ctx context.Context, in *ListNewsArticlesRequest, opts ...grpc.CallOption) (*ListNewsArticlesResponse, error) {
	out := new(ListNewsArticlesResponse)
	err := c.cc.Invoke(ctx, NewsroomAPI_ListNewsArticles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsroomAPIClient) GetNewsArticleById(ctx context.Context, in *GetNewsArticleByIdRequest, opts ...grpc.CallOption) (*GetNewsArticleByIdResponse, error) {
	out := new(GetNewsArticleByIdResponse)
	err := c.cc.Invoke(ctx, NewsroomAPI_GetNewsArticleById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsroomAPIClient) UpdateNewsArticle(ctx context.Context, in *UpdateNewsArticleRequest, opts ...grpc.CallOption) (*UpdateNewsArticleResponse, error) {
	out := new(UpdateNewsArticleResponse)
	err := c.cc.Invoke(ctx, NewsroomAPI_UpdateNewsArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsroomAPIServer is the server API for NewsroomAPI service.
// All implementations must embed UnimplementedNewsroomAPIServer
// for forward compatibility
type NewsroomAPIServer interface {
	// create news article
	CreateNewsArticle(context.Context, *CreateNewsArticleRequest) (*CreateNewsArticleResponse, error)
	// list news articles
	ListNewsArticles(context.Context, *ListNewsArticlesRequest) (*ListNewsArticlesResponse, error)
	// get news article details by the id
	GetNewsArticleById(context.Context, *GetNewsArticleByIdRequest) (*GetNewsArticleByIdResponse, error)
	// update news article
	UpdateNewsArticle(context.Context, *UpdateNewsArticleRequest) (*UpdateNewsArticleResponse, error)
	mustEmbedUnimplementedNewsroomAPIServer()
}

// UnimplementedNewsroomAPIServer must be embedded to have forward compatible implementations.
type UnimplementedNewsroomAPIServer struct {
}

func (UnimplementedNewsroomAPIServer) CreateNewsArticle(context.Context, *CreateNewsArticleRequest) (*CreateNewsArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewsArticle not implemented")
}
func (UnimplementedNewsroomAPIServer) ListNewsArticles(context.Context, *ListNewsArticlesRequest) (*ListNewsArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNewsArticles not implemented")
}
func (UnimplementedNewsroomAPIServer) GetNewsArticleById(context.Context, *GetNewsArticleByIdRequest) (*GetNewsArticleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsArticleById not implemented")
}
func (UnimplementedNewsroomAPIServer) UpdateNewsArticle(context.Context, *UpdateNewsArticleRequest) (*UpdateNewsArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNewsArticle not implemented")
}
func (UnimplementedNewsroomAPIServer) mustEmbedUnimplementedNewsroomAPIServer() {}

// UnsafeNewsroomAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsroomAPIServer will
// result in compilation errors.
type UnsafeNewsroomAPIServer interface {
	mustEmbedUnimplementedNewsroomAPIServer()
}

func RegisterNewsroomAPIServer(s grpc.ServiceRegistrar, srv NewsroomAPIServer) {
	s.RegisterService(&NewsroomAPI_ServiceDesc, srv)
}

func _NewsroomAPI_CreateNewsArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewsArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsroomAPIServer).CreateNewsArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsroomAPI_CreateNewsArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsroomAPIServer).CreateNewsArticle(ctx, req.(*CreateNewsArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsroomAPI_ListNewsArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNewsArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsroomAPIServer).ListNewsArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsroomAPI_ListNewsArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsroomAPIServer).ListNewsArticles(ctx, req.(*ListNewsArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsroomAPI_GetNewsArticleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsArticleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsroomAPIServer).GetNewsArticleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsroomAPI_GetNewsArticleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsroomAPIServer).GetNewsArticleById(ctx, req.(*GetNewsArticleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsroomAPI_UpdateNewsArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNewsArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsroomAPIServer).UpdateNewsArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsroomAPI_UpdateNewsArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsroomAPIServer).UpdateNewsArticle(ctx, req.(*UpdateNewsArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NewsroomAPI_ServiceDesc is the grpc.ServiceDesc for NewsroomAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewsroomAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.newsroom.NewsroomAPI",
	HandlerType: (*NewsroomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewsArticle",
			Handler:    _NewsroomAPI_CreateNewsArticle_Handler,
		},
		{
			MethodName: "ListNewsArticles",
			Handler:    _NewsroomAPI_ListNewsArticles_Handler,
		},
		{
			MethodName: "GetNewsArticleById",
			Handler:    _NewsroomAPI_GetNewsArticleById_Handler,
		},
		{
			MethodName: "UpdateNewsArticle",
			Handler:    _NewsroomAPI_UpdateNewsArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/newsroom/service.proto",
}
