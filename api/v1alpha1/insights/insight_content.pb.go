// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: api/v1alpha1/insights/insight_content.proto

package insights

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Pipeline contains a set of nodes
// DEPRECATED use api.v1alpha1.explorer.pipeline.Pipeline instead
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type Pipeline struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pipeline nodes
	Nodes         []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{0}
}

func (x *Pipeline) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Node describes the type of operations of a pipeline section
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type Node struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Node id
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// from | filter | derive | group | join | select | aggregate | take
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Node title
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Input ids of other nodes
	InputIds []string `protobuf:"bytes,4,rep,name=input_ids,json=inputIds,proto3" json:"input_ids,omitempty"`
	// Output ids of the node
	OutputIds []string `protobuf:"bytes,5,rep,name=output_ids,json=outputIds,proto3" json:"output_ids,omitempty"`
	// Node body
	//
	// Types that are valid to be assigned to Body:
	//
	//	*Node_FromNode
	//	*Node_FilterNode
	//	*Node_DeriveNode
	//	*Node_GroupNode
	//	*Node_JoinNode
	//	*Node_SelectNode
	//	*Node_AggregateNode
	//	*Node_TakeNode
	//	*Node_JsonNode
	//	*Node_MapNode
	//	*Node_ReplaceNode
	//	*Node_SortNode
	//	*Node_StringManipulationNode
	Body          isNode_Body `protobuf_oneof:"body"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{1}
}

func (x *Node) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Node) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Node) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Node) GetInputIds() []string {
	if x != nil {
		return x.InputIds
	}
	return nil
}

func (x *Node) GetOutputIds() []string {
	if x != nil {
		return x.OutputIds
	}
	return nil
}

func (x *Node) GetBody() isNode_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Node) GetFromNode() *FromNode {
	if x != nil {
		if x, ok := x.Body.(*Node_FromNode); ok {
			return x.FromNode
		}
	}
	return nil
}

func (x *Node) GetFilterNode() *FilterNode {
	if x != nil {
		if x, ok := x.Body.(*Node_FilterNode); ok {
			return x.FilterNode
		}
	}
	return nil
}

func (x *Node) GetDeriveNode() *DeriveNode {
	if x != nil {
		if x, ok := x.Body.(*Node_DeriveNode); ok {
			return x.DeriveNode
		}
	}
	return nil
}

func (x *Node) GetGroupNode() *GroupNode {
	if x != nil {
		if x, ok := x.Body.(*Node_GroupNode); ok {
			return x.GroupNode
		}
	}
	return nil
}

func (x *Node) GetJoinNode() *JoinNode {
	if x != nil {
		if x, ok := x.Body.(*Node_JoinNode); ok {
			return x.JoinNode
		}
	}
	return nil
}

func (x *Node) GetSelectNode() *SelectNode {
	if x != nil {
		if x, ok := x.Body.(*Node_SelectNode); ok {
			return x.SelectNode
		}
	}
	return nil
}

func (x *Node) GetAggregateNode() *AggregateNode {
	if x != nil {
		if x, ok := x.Body.(*Node_AggregateNode); ok {
			return x.AggregateNode
		}
	}
	return nil
}

func (x *Node) GetTakeNode() *TakeNode {
	if x != nil {
		if x, ok := x.Body.(*Node_TakeNode); ok {
			return x.TakeNode
		}
	}
	return nil
}

func (x *Node) GetJsonNode() *JsonNode {
	if x != nil {
		if x, ok := x.Body.(*Node_JsonNode); ok {
			return x.JsonNode
		}
	}
	return nil
}

func (x *Node) GetMapNode() *MapNode {
	if x != nil {
		if x, ok := x.Body.(*Node_MapNode); ok {
			return x.MapNode
		}
	}
	return nil
}

func (x *Node) GetReplaceNode() *ReplaceNode {
	if x != nil {
		if x, ok := x.Body.(*Node_ReplaceNode); ok {
			return x.ReplaceNode
		}
	}
	return nil
}

func (x *Node) GetSortNode() *SortNode {
	if x != nil {
		if x, ok := x.Body.(*Node_SortNode); ok {
			return x.SortNode
		}
	}
	return nil
}

func (x *Node) GetStringManipulationNode() *StringManipulationNode {
	if x != nil {
		if x, ok := x.Body.(*Node_StringManipulationNode); ok {
			return x.StringManipulationNode
		}
	}
	return nil
}

type isNode_Body interface {
	isNode_Body()
}

type Node_FromNode struct {
	// From node
	FromNode *FromNode `protobuf:"bytes,6,opt,name=from_node,json=fromNode,proto3,oneof"`
}

type Node_FilterNode struct {
	// Filter node
	FilterNode *FilterNode `protobuf:"bytes,7,opt,name=filter_node,json=filterNode,proto3,oneof"`
}

type Node_DeriveNode struct {
	// Derive node
	DeriveNode *DeriveNode `protobuf:"bytes,8,opt,name=derive_node,json=deriveNode,proto3,oneof"`
}

type Node_GroupNode struct {
	// Group node
	GroupNode *GroupNode `protobuf:"bytes,9,opt,name=group_node,json=groupNode,proto3,oneof"`
}

type Node_JoinNode struct {
	// Join node
	JoinNode *JoinNode `protobuf:"bytes,10,opt,name=join_node,json=joinNode,proto3,oneof"`
}

type Node_SelectNode struct {
	// Select node
	SelectNode *SelectNode `protobuf:"bytes,11,opt,name=select_node,json=selectNode,proto3,oneof"`
}

type Node_AggregateNode struct {
	// Aggregate node
	AggregateNode *AggregateNode `protobuf:"bytes,12,opt,name=aggregate_node,json=aggregateNode,proto3,oneof"`
}

type Node_TakeNode struct {
	// Take node
	TakeNode *TakeNode `protobuf:"bytes,13,opt,name=take_node,json=takeNode,proto3,oneof"`
}

type Node_JsonNode struct {
	// Json node
	JsonNode *JsonNode `protobuf:"bytes,14,opt,name=json_node,json=jsonNode,proto3,oneof"`
}

type Node_MapNode struct {
	// Map node
	MapNode *MapNode `protobuf:"bytes,15,opt,name=map_node,json=mapNode,proto3,oneof"`
}

type Node_ReplaceNode struct {
	// Replace node
	ReplaceNode *ReplaceNode `protobuf:"bytes,16,opt,name=replace_node,json=replaceNode,proto3,oneof"`
}

type Node_SortNode struct {
	// Sort node
	SortNode *SortNode `protobuf:"bytes,17,opt,name=sort_node,json=sortNode,proto3,oneof"`
}

type Node_StringManipulationNode struct {
	// String manipulation node
	StringManipulationNode *StringManipulationNode `protobuf:"bytes,18,opt,name=string_manipulation_node,json=stringManipulationNode,proto3,oneof"`
}

func (*Node_FromNode) isNode_Body() {}

func (*Node_FilterNode) isNode_Body() {}

func (*Node_DeriveNode) isNode_Body() {}

func (*Node_GroupNode) isNode_Body() {}

func (*Node_JoinNode) isNode_Body() {}

func (*Node_SelectNode) isNode_Body() {}

func (*Node_AggregateNode) isNode_Body() {}

func (*Node_TakeNode) isNode_Body() {}

func (*Node_JsonNode) isNode_Body() {}

func (*Node_MapNode) isNode_Body() {}

func (*Node_ReplaceNode) isNode_Body() {}

func (*Node_SortNode) isNode_Body() {}

func (*Node_StringManipulationNode) isNode_Body() {}

// FromNode describes a dataset to select from
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type FromNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The dataset to select from
	Dataset       string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FromNode) Reset() {
	*x = FromNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FromNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromNode) ProtoMessage() {}

func (x *FromNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromNode.ProtoReflect.Descriptor instead.
func (*FromNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{2}
}

func (x *FromNode) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

// FilterNode filters based on an expression
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type FilterNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The expression to filter by
	Expression    *ExpressionNode `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterNode) Reset() {
	*x = FilterNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterNode) ProtoMessage() {}

func (x *FilterNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterNode.ProtoReflect.Descriptor instead.
func (*FilterNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{3}
}

func (x *FilterNode) GetExpression() *ExpressionNode {
	if x != nil {
		return x.Expression
	}
	return nil
}

// DeriveNode derives a new column
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type DeriveNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resulting column name
	ColumnName string `protobuf:"bytes,3,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	// Expression to apply to the new column
	Expression    *ExpressionNode `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeriveNode) Reset() {
	*x = DeriveNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeriveNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeriveNode) ProtoMessage() {}

func (x *DeriveNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeriveNode.ProtoReflect.Descriptor instead.
func (*DeriveNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{4}
}

func (x *DeriveNode) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *DeriveNode) GetExpression() *ExpressionNode {
	if x != nil {
		return x.Expression
	}
	return nil
}

// GroupNode groups data
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type GroupNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Columns to group by
	GroupByColumns []string `protobuf:"bytes,1,rep,name=group_by_columns,json=groupByColumns,proto3" json:"group_by_columns,omitempty"`
	// The aggregate columns
	AggregationColumns []*AggregationColumn `protobuf:"bytes,2,rep,name=aggregation_columns,json=aggregationColumns,proto3" json:"aggregation_columns,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GroupNode) Reset() {
	*x = GroupNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupNode) ProtoMessage() {}

func (x *GroupNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupNode.ProtoReflect.Descriptor instead.
func (*GroupNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{5}
}

func (x *GroupNode) GetGroupByColumns() []string {
	if x != nil {
		return x.GroupByColumns
	}
	return nil
}

func (x *GroupNode) GetAggregationColumns() []*AggregationColumn {
	if x != nil {
		return x.AggregationColumns
	}
	return nil
}

// TakeNode restricts the number of rows
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type TakeNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// how many to limit by
	Limit         int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeNode) Reset() {
	*x = TakeNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeNode) ProtoMessage() {}

func (x *TakeNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeNode.ProtoReflect.Descriptor instead.
func (*TakeNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{6}
}

func (x *TakeNode) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// AggregateNode describes which columns to aggregate
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type AggregateNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Aggregation columns
	AggregationColumns []*AggregationColumn `protobuf:"bytes,2,rep,name=aggregation_columns,json=aggregationColumns,proto3" json:"aggregation_columns,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AggregateNode) Reset() {
	*x = AggregateNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateNode) ProtoMessage() {}

func (x *AggregateNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateNode.ProtoReflect.Descriptor instead.
func (*AggregateNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{7}
}

func (x *AggregateNode) GetAggregationColumns() []*AggregationColumn {
	if x != nil {
		return x.AggregationColumns
	}
	return nil
}

// AggregationColumn describes the aggregation column
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type AggregationColumn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// column name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// which columns to group by
	GroupByColumns []string `protobuf:"bytes,2,rep,name=group_by_columns,json=groupByColumns,proto3" json:"group_by_columns,omitempty"`
	// which column to aggregate
	ColumnToAggregate string `protobuf:"bytes,3,opt,name=column_to_aggregate,json=columnToAggregate,proto3" json:"column_to_aggregate,omitempty"`
	// the aggregation function to apply
	AggregationFunction string `protobuf:"bytes,4,opt,name=aggregation_function,json=aggregationFunction,proto3" json:"aggregation_function,omitempty"` // sum | avg | count | min | max | combine_string | unique_count
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AggregationColumn) Reset() {
	*x = AggregationColumn{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregationColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationColumn) ProtoMessage() {}

func (x *AggregationColumn) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationColumn.ProtoReflect.Descriptor instead.
func (*AggregationColumn) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{8}
}

func (x *AggregationColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AggregationColumn) GetGroupByColumns() []string {
	if x != nil {
		return x.GroupByColumns
	}
	return nil
}

func (x *AggregationColumn) GetColumnToAggregate() string {
	if x != nil {
		return x.ColumnToAggregate
	}
	return ""
}

func (x *AggregationColumn) GetAggregationFunction() string {
	if x != nil {
		return x.AggregationFunction
	}
	return ""
}

// Column describes a column
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type Column struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// key is the column name
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// data type of column
	DataType      string `protobuf:"bytes,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Column) Reset() {
	*x = Column{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{9}
}

func (x *Column) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Column) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

// ExpressionNode describes a set of expressions
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type ExpressionNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// boolean_expression | number_expression | string_expression | date_extraction
	// json_extraction | open_paren | close_paren | boolean_operand | boolean_expression
	// boolean_operator | boolean_literal | column_name | number_literal | string_literal
	// null | string_expression | date_extraction | json_extraction | number_expression
	// parameter | number_parameter | date_parameter | boolean_parameter | string_parameter
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Expression node value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// list of sub expressions
	Children      []*ExpressionNode `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExpressionNode) Reset() {
	*x = ExpressionNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpressionNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionNode) ProtoMessage() {}

func (x *ExpressionNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionNode.ProtoReflect.Descriptor instead.
func (*ExpressionNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{10}
}

func (x *ExpressionNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExpressionNode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ExpressionNode) GetChildren() []*ExpressionNode {
	if x != nil {
		return x.Children
	}
	return nil
}

// MapNode maps columns
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type MapNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// new column
	NewColumn *Column `protobuf:"bytes,1,opt,name=new_column,json=newColumn,proto3" json:"new_column,omitempty"`
	// column to map
	ColumnToMap *Column `protobuf:"bytes,2,opt,name=column_to_map,json=columnToMap,proto3" json:"column_to_map,omitempty"`
	// mappings
	Mappings []*MapNode_Mapping `protobuf:"bytes,3,rep,name=mappings,proto3" json:"mappings,omitempty"`
	// default expression value
	DefaultValue *ExpressionNode `protobuf:"bytes,4,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// is complex
	IsComplex     bool `protobuf:"varint,5,opt,name=is_complex,json=isComplex,proto3" json:"is_complex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapNode) Reset() {
	*x = MapNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapNode) ProtoMessage() {}

func (x *MapNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapNode.ProtoReflect.Descriptor instead.
func (*MapNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{11}
}

func (x *MapNode) GetNewColumn() *Column {
	if x != nil {
		return x.NewColumn
	}
	return nil
}

func (x *MapNode) GetColumnToMap() *Column {
	if x != nil {
		return x.ColumnToMap
	}
	return nil
}

func (x *MapNode) GetMappings() []*MapNode_Mapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

func (x *MapNode) GetDefaultValue() *ExpressionNode {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *MapNode) GetIsComplex() bool {
	if x != nil {
		return x.IsComplex
	}
	return false
}

// JoinNode joins datasets
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type JoinNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of join
	Side string `protobuf:"bytes,1,opt,name=side,proto3" json:"side,omitempty"` // left | right | full | inner
	// The join columns
	JoinColumns []*JoinColumn `protobuf:"bytes,2,rep,name=join_columns,json=joinColumns,proto3" json:"join_columns,omitempty"`
	// First parent
	FirstParent *Parent `protobuf:"bytes,3,opt,name=first_parent,json=firstParent,proto3" json:"first_parent,omitempty"`
	// Second parent
	SecondParent  *Parent `protobuf:"bytes,4,opt,name=second_parent,json=secondParent,proto3" json:"second_parent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinNode) Reset() {
	*x = JoinNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinNode) ProtoMessage() {}

func (x *JoinNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinNode.ProtoReflect.Descriptor instead.
func (*JoinNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{12}
}

func (x *JoinNode) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *JoinNode) GetJoinColumns() []*JoinColumn {
	if x != nil {
		return x.JoinColumns
	}
	return nil
}

func (x *JoinNode) GetFirstParent() *Parent {
	if x != nil {
		return x.FirstParent
	}
	return nil
}

func (x *JoinNode) GetSecondParent() *Parent {
	if x != nil {
		return x.SecondParent
	}
	return nil
}

// JoinColumn describes a join column
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type JoinColumn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// First parent column
	FirstParentColumn string `protobuf:"bytes,1,opt,name=first_parent_column,json=firstParentColumn,proto3" json:"first_parent_column,omitempty"`
	// second parent column
	SecondParentColumn string `protobuf:"bytes,2,opt,name=second_parent_column,json=secondParentColumn,proto3" json:"second_parent_column,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *JoinColumn) Reset() {
	*x = JoinColumn{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinColumn) ProtoMessage() {}

func (x *JoinColumn) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinColumn.ProtoReflect.Descriptor instead.
func (*JoinColumn) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{13}
}

func (x *JoinColumn) GetFirstParentColumn() string {
	if x != nil {
		return x.FirstParentColumn
	}
	return ""
}

func (x *JoinColumn) GetSecondParentColumn() string {
	if x != nil {
		return x.SecondParentColumn
	}
	return ""
}

// Parent describes a join node parent
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type Parent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parent_id
	ParentId string `protobuf:"bytes,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// parent title
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// map of renamed columns
	RenamedColumns map[string]string `protobuf:"bytes,3,rep,name=renamed_columns,json=renamedColumns,proto3" json:"renamed_columns,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Parent) Reset() {
	*x = Parent{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Parent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parent) ProtoMessage() {}

func (x *Parent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parent.ProtoReflect.Descriptor instead.
func (*Parent) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{14}
}

func (x *Parent) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Parent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Parent) GetRenamedColumns() map[string]string {
	if x != nil {
		return x.RenamedColumns
	}
	return nil
}

// SelectNode selects a set of columns
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type SelectNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Column names to select
	Columns []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	// map of renamed columns
	RenamedColumns map[string]string `protobuf:"bytes,2,rep,name=renamed_columns,json=renamedColumns,proto3" json:"renamed_columns,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SelectNode) Reset() {
	*x = SelectNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectNode) ProtoMessage() {}

func (x *SelectNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectNode.ProtoReflect.Descriptor instead.
func (*SelectNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{15}
}

func (x *SelectNode) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *SelectNode) GetRenamedColumns() map[string]string {
	if x != nil {
		return x.RenamedColumns
	}
	return nil
}

// JsonTarget
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type JsonTarget struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// path parts
	PathParts []string `protobuf:"bytes,1,rep,name=path_parts,json=pathParts,proto3" json:"path_parts,omitempty"`
	// Column name
	ColumnName string `protobuf:"bytes,2,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	// Result type
	ResultType    string `protobuf:"bytes,3,opt,name=result_type,json=resultType,proto3" json:"result_type,omitempty"` // string | number | boolean | array | object
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JsonTarget) Reset() {
	*x = JsonTarget{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonTarget) ProtoMessage() {}

func (x *JsonTarget) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonTarget.ProtoReflect.Descriptor instead.
func (*JsonTarget) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{16}
}

func (x *JsonTarget) GetPathParts() []string {
	if x != nil {
		return x.PathParts
	}
	return nil
}

func (x *JsonTarget) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *JsonTarget) GetResultType() string {
	if x != nil {
		return x.ResultType
	}
	return ""
}

// JsonNode
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type JsonNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of operation
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // unnest_to_columns | unnest | unpack
	// Json column to apply the operation to
	JsonColumn string `protobuf:"bytes,2,opt,name=json_column,json=jsonColumn,proto3" json:"json_column,omitempty"`
	// List of json targets
	Targets []*JsonTarget `protobuf:"bytes,3,rep,name=targets,proto3" json:"targets,omitempty"`
	// Unnest to column node
	UnnestToColumnsNode *UnnestToColumnsNode `protobuf:"bytes,4,opt,name=unnest_to_columns_node,json=unnestToColumnsNode,proto3" json:"unnest_to_columns_node,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *JsonNode) Reset() {
	*x = JsonNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonNode) ProtoMessage() {}

func (x *JsonNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonNode.ProtoReflect.Descriptor instead.
func (*JsonNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{17}
}

func (x *JsonNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *JsonNode) GetJsonColumn() string {
	if x != nil {
		return x.JsonColumn
	}
	return ""
}

func (x *JsonNode) GetTargets() []*JsonTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *JsonNode) GetUnnestToColumnsNode() *UnnestToColumnsNode {
	if x != nil {
		return x.UnnestToColumnsNode
	}
	return nil
}

// UnnestToColumnsNode
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type UnnestToColumnsNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// When the key is a column, take the value from the column
	UnnestTarget *JsonTarget `protobuf:"bytes,1,opt,name=unnest_target,json=unnestTarget,proto3" json:"unnest_target,omitempty"`
	// Key target
	KeyTarget *JsonTarget `protobuf:"bytes,2,opt,name=key_target,json=keyTarget,proto3" json:"key_target,omitempty"`
	// Value target
	ValueTarget *JsonTarget `protobuf:"bytes,3,opt,name=value_target,json=valueTarget,proto3" json:"value_target,omitempty"`
	// Column
	Columns []string `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	// Primary keys
	PrimaryKeys []string `protobuf:"bytes,5,rep,name=primary_keys,json=primaryKeys,proto3" json:"primary_keys,omitempty"`
	// Json columns
	JsonColumns   []*Column `protobuf:"bytes,6,rep,name=json_columns,json=jsonColumns,proto3" json:"json_columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnnestToColumnsNode) Reset() {
	*x = UnnestToColumnsNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnnestToColumnsNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnnestToColumnsNode) ProtoMessage() {}

func (x *UnnestToColumnsNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnnestToColumnsNode.ProtoReflect.Descriptor instead.
func (*UnnestToColumnsNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{18}
}

func (x *UnnestToColumnsNode) GetUnnestTarget() *JsonTarget {
	if x != nil {
		return x.UnnestTarget
	}
	return nil
}

func (x *UnnestToColumnsNode) GetKeyTarget() *JsonTarget {
	if x != nil {
		return x.KeyTarget
	}
	return nil
}

func (x *UnnestToColumnsNode) GetValueTarget() *JsonTarget {
	if x != nil {
		return x.ValueTarget
	}
	return nil
}

func (x *UnnestToColumnsNode) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *UnnestToColumnsNode) GetPrimaryKeys() []string {
	if x != nil {
		return x.PrimaryKeys
	}
	return nil
}

func (x *UnnestToColumnsNode) GetJsonColumns() []*Column {
	if x != nil {
		return x.JsonColumns
	}
	return nil
}

// Parameters
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type Parameters struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Parameters map
	Parameters    map[string]*Parameters_Parameter `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Parameters) Reset() {
	*x = Parameters{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameters) ProtoMessage() {}

func (x *Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameters.ProtoReflect.Descriptor instead.
func (*Parameters) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{19}
}

func (x *Parameters) GetParameters() map[string]*Parameters_Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// ValuesReplacement
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type ValuesReplacement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Value in the column to replace
	TargetValue string `protobuf:"bytes,1,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`
	// Target data type of replacement
	TargetDataType string `protobuf:"bytes,2,opt,name=target_data_type,json=targetDataType,proto3" json:"target_data_type,omitempty"`
	// Result of the replacement
	ReplacementValue *ExpressionNode `protobuf:"bytes,3,opt,name=replacement_value,json=replacementValue,proto3" json:"replacement_value,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ValuesReplacement) Reset() {
	*x = ValuesReplacement{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValuesReplacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesReplacement) ProtoMessage() {}

func (x *ValuesReplacement) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesReplacement.ProtoReflect.Descriptor instead.
func (*ValuesReplacement) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{20}
}

func (x *ValuesReplacement) GetTargetValue() string {
	if x != nil {
		return x.TargetValue
	}
	return ""
}

func (x *ValuesReplacement) GetTargetDataType() string {
	if x != nil {
		return x.TargetDataType
	}
	return ""
}

func (x *ValuesReplacement) GetReplacementValue() *ExpressionNode {
	if x != nil {
		return x.ReplacementValue
	}
	return nil
}

// ColumnReplacement
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type ColumnReplacement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Column to replace values in
	ColumnNames []string `protobuf:"bytes,1,rep,name=column_names,json=columnNames,proto3" json:"column_names,omitempty"`
	// Values to replace
	ValuesReplacements []*ValuesReplacement `protobuf:"bytes,2,rep,name=values_replacements,json=valuesReplacements,proto3" json:"values_replacements,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ColumnReplacement) Reset() {
	*x = ColumnReplacement{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnReplacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnReplacement) ProtoMessage() {}

func (x *ColumnReplacement) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnReplacement.ProtoReflect.Descriptor instead.
func (*ColumnReplacement) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{21}
}

func (x *ColumnReplacement) GetColumnNames() []string {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

func (x *ColumnReplacement) GetValuesReplacements() []*ValuesReplacement {
	if x != nil {
		return x.ValuesReplacements
	}
	return nil
}

// ReplaceNode
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type ReplaceNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of column replacements
	ColumnReplacements []*ColumnReplacement `protobuf:"bytes,1,rep,name=column_replacements,json=columnReplacements,proto3" json:"column_replacements,omitempty"`
	// Is complex
	IsComplex     bool `protobuf:"varint,2,opt,name=is_complex,json=isComplex,proto3" json:"is_complex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaceNode) Reset() {
	*x = ReplaceNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceNode) ProtoMessage() {}

func (x *ReplaceNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceNode.ProtoReflect.Descriptor instead.
func (*ReplaceNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{22}
}

func (x *ReplaceNode) GetColumnReplacements() []*ColumnReplacement {
	if x != nil {
		return x.ColumnReplacements
	}
	return nil
}

func (x *ReplaceNode) GetIsComplex() bool {
	if x != nil {
		return x.IsComplex
	}
	return false
}

// SortColumn
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type SortColumn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Column name to sort
	ColumnName string `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	// Will determine sort direction
	Ascending     bool `protobuf:"varint,2,opt,name=ascending,proto3" json:"ascending,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortColumn) Reset() {
	*x = SortColumn{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortColumn) ProtoMessage() {}

func (x *SortColumn) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortColumn.ProtoReflect.Descriptor instead.
func (*SortColumn) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{23}
}

func (x *SortColumn) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *SortColumn) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

// SortNode describes which columns to sort
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type SortNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Columns to sort
	SortColumns   []*SortColumn `protobuf:"bytes,1,rep,name=sort_columns,json=sortColumns,proto3" json:"sort_columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortNode) Reset() {
	*x = SortNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortNode) ProtoMessage() {}

func (x *SortNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortNode.ProtoReflect.Descriptor instead.
func (*SortNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{24}
}

func (x *SortNode) GetSortColumns() []*SortColumn {
	if x != nil {
		return x.SortColumns
	}
	return nil
}

// StringManipulationSplit describes what value to split by
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type StringManipulationSplit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Split value
	SplitBy string `protobuf:"bytes,2,opt,name=split_by,json=splitBy,proto3" json:"split_by,omitempty"`
	// If true, index_extraction is required
	IsIndexExtraction bool `protobuf:"varint,3,opt,name=is_index_extraction,json=isIndexExtraction,proto3" json:"is_index_extraction,omitempty"`
	// Index to extract after split
	IndexExtraction int32 `protobuf:"varint,4,opt,name=index_extraction,json=indexExtraction,proto3" json:"index_extraction,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StringManipulationSplit) Reset() {
	*x = StringManipulationSplit{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringManipulationSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringManipulationSplit) ProtoMessage() {}

func (x *StringManipulationSplit) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringManipulationSplit.ProtoReflect.Descriptor instead.
func (*StringManipulationSplit) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{25}
}

func (x *StringManipulationSplit) GetSplitBy() string {
	if x != nil {
		return x.SplitBy
	}
	return ""
}

func (x *StringManipulationSplit) GetIsIndexExtraction() bool {
	if x != nil {
		return x.IsIndexExtraction
	}
	return false
}

func (x *StringManipulationSplit) GetIndexExtraction() int32 {
	if x != nil {
		return x.IndexExtraction
	}
	return 0
}

// StringManipulationReplace describes how to replace values
//
// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type StringManipulationReplace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target string to replace
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Value to replace with
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringManipulationReplace) Reset() {
	*x = StringManipulationReplace{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringManipulationReplace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringManipulationReplace) ProtoMessage() {}

func (x *StringManipulationReplace) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringManipulationReplace.ProtoReflect.Descriptor instead.
func (*StringManipulationReplace) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{26}
}

func (x *StringManipulationReplace) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *StringManipulationReplace) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type StringManipulationNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// split | replace | lower | upper
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Column to replace with
	SourceColumnName string `protobuf:"bytes,2,opt,name=source_column_name,json=sourceColumnName,proto3" json:"source_column_name,omitempty"`
	// Target column to replace
	TargetColumnName string `protobuf:"bytes,3,opt,name=target_column_name,json=targetColumnName,proto3" json:"target_column_name,omitempty"`
	// Split operation
	StringManipulationSplit *StringManipulationSplit `protobuf:"bytes,4,opt,name=string_manipulation_split,json=stringManipulationSplit,proto3" json:"string_manipulation_split,omitempty"`
	// Replace operation
	StringManipulationReplace *StringManipulationReplace `protobuf:"bytes,5,opt,name=string_manipulation_replace,json=stringManipulationReplace,proto3" json:"string_manipulation_replace,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *StringManipulationNode) Reset() {
	*x = StringManipulationNode{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringManipulationNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringManipulationNode) ProtoMessage() {}

func (x *StringManipulationNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringManipulationNode.ProtoReflect.Descriptor instead.
func (*StringManipulationNode) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{27}
}

func (x *StringManipulationNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StringManipulationNode) GetSourceColumnName() string {
	if x != nil {
		return x.SourceColumnName
	}
	return ""
}

func (x *StringManipulationNode) GetTargetColumnName() string {
	if x != nil {
		return x.TargetColumnName
	}
	return ""
}

func (x *StringManipulationNode) GetStringManipulationSplit() *StringManipulationSplit {
	if x != nil {
		return x.StringManipulationSplit
	}
	return nil
}

func (x *StringManipulationNode) GetStringManipulationReplace() *StringManipulationReplace {
	if x != nil {
		return x.StringManipulationReplace
	}
	return nil
}

type MapNode_Mapping struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// expression condition
	Condition *ExpressionNode `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// expression result
	Result        *ExpressionNode `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapNode_Mapping) Reset() {
	*x = MapNode_Mapping{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapNode_Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapNode_Mapping) ProtoMessage() {}

func (x *MapNode_Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapNode_Mapping.ProtoReflect.Descriptor instead.
func (*MapNode_Mapping) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{11, 0}
}

func (x *MapNode_Mapping) GetCondition() *ExpressionNode {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *MapNode_Mapping) GetResult() *ExpressionNode {
	if x != nil {
		return x.Result
	}
	return nil
}

// Deprecated: Marked as deprecated in api/v1alpha1/insights/insight_content.proto.
type Parameters_Parameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Parameter value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Parameter data type
	DataType      string `protobuf:"bytes,3,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Parameters_Parameter) Reset() {
	*x = Parameters_Parameter{}
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Parameters_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameters_Parameter) ProtoMessage() {}

func (x *Parameters_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha1_insights_insight_content_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameters_Parameter.ProtoReflect.Descriptor instead.
func (*Parameters_Parameter) Descriptor() ([]byte, []int) {
	return file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP(), []int{19, 0}
}

func (x *Parameters_Parameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Parameters_Parameter) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

var File_api_v1alpha1_insights_insight_content_proto protoreflect.FileDescriptor

var file_api_v1alpha1_insights_insight_content_proto_rawDesc = string([]byte{
	0x0a, 0x2b, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x08, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x31, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xa6, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x3e, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x44, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3e,
	0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x44,
	0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x54,
	0x61, 0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4d, 0x61,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x69, 0x0a, 0x18, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x28, 0x0a, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x57, 0x0a, 0x0a, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x02, 0x18, 0x01, 0x22, 0x78, 0x0a, 0x0a, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x94, 0x01,
	0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x12, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x3a, 0x02, 0x18, 0x01, 0x22, 0x24, 0x0a, 0x08, 0x54, 0x61, 0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x6e, 0x0a, 0x0d, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x13, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x11, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x6f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x31,
	0x0a, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x3b, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x02,
	0x18, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x41, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xcd, 0x03, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x6f,
	0x4d, 0x61, 0x70, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4d, 0x61,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x1a, 0x8d, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x43,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xee, 0x01, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x40, 0x0a,
	0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x42, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x72, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x72, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xcd, 0x01, 0x0a,
	0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x71, 0x0a, 0x0a,
	0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x22,
	0xe1, 0x01, 0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x5f,
	0x0a, 0x16, 0x75, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x55, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x75, 0x6e, 0x6e, 0x65,
	0x73, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x3a,
	0x02, 0x18, 0x01, 0x22, 0xe8, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x54, 0x6f,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x75,
	0x6e, 0x6e, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0c, 0x75, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0b, 0x6a,
	0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x93,
	0x02, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x51, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0x42, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x02, 0x18, 0x01, 0x1a, 0x6a, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x02, 0x18, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x22,
	0x95, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x4f, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x54, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0b, 0x73, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x93, 0x01, 0x0a,
	0x17, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x42, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x02,
	0x18, 0x01, 0x22, 0x4d, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x69,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x18,
	0x01, 0x22, 0xea, 0x02, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x69,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x19,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x17, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x70, 0x0a, 0x1b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x69,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x19, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x42, 0xd8,
	0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x42, 0x13, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0xa2, 0x02, 0x03, 0x41, 0x56, 0x49, 0xaa, 0x02, 0x15, 0x41, 0x70,
	0x69, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0xca, 0x02, 0x15, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x5c, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0xe2, 0x02, 0x21, 0x41, 0x70,
	0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x17, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3a,
	0x3a, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_api_v1alpha1_insights_insight_content_proto_rawDescOnce sync.Once
	file_api_v1alpha1_insights_insight_content_proto_rawDescData []byte
)

func file_api_v1alpha1_insights_insight_content_proto_rawDescGZIP() []byte {
	file_api_v1alpha1_insights_insight_content_proto_rawDescOnce.Do(func() {
		file_api_v1alpha1_insights_insight_content_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_v1alpha1_insights_insight_content_proto_rawDesc), len(file_api_v1alpha1_insights_insight_content_proto_rawDesc)))
	})
	return file_api_v1alpha1_insights_insight_content_proto_rawDescData
}

var file_api_v1alpha1_insights_insight_content_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_api_v1alpha1_insights_insight_content_proto_goTypes = []any{
	(*Pipeline)(nil),                  // 0: api.v1alpha1.insights.Pipeline
	(*Node)(nil),                      // 1: api.v1alpha1.insights.Node
	(*FromNode)(nil),                  // 2: api.v1alpha1.insights.FromNode
	(*FilterNode)(nil),                // 3: api.v1alpha1.insights.FilterNode
	(*DeriveNode)(nil),                // 4: api.v1alpha1.insights.DeriveNode
	(*GroupNode)(nil),                 // 5: api.v1alpha1.insights.GroupNode
	(*TakeNode)(nil),                  // 6: api.v1alpha1.insights.TakeNode
	(*AggregateNode)(nil),             // 7: api.v1alpha1.insights.AggregateNode
	(*AggregationColumn)(nil),         // 8: api.v1alpha1.insights.AggregationColumn
	(*Column)(nil),                    // 9: api.v1alpha1.insights.Column
	(*ExpressionNode)(nil),            // 10: api.v1alpha1.insights.ExpressionNode
	(*MapNode)(nil),                   // 11: api.v1alpha1.insights.MapNode
	(*JoinNode)(nil),                  // 12: api.v1alpha1.insights.JoinNode
	(*JoinColumn)(nil),                // 13: api.v1alpha1.insights.JoinColumn
	(*Parent)(nil),                    // 14: api.v1alpha1.insights.Parent
	(*SelectNode)(nil),                // 15: api.v1alpha1.insights.SelectNode
	(*JsonTarget)(nil),                // 16: api.v1alpha1.insights.JsonTarget
	(*JsonNode)(nil),                  // 17: api.v1alpha1.insights.JsonNode
	(*UnnestToColumnsNode)(nil),       // 18: api.v1alpha1.insights.UnnestToColumnsNode
	(*Parameters)(nil),                // 19: api.v1alpha1.insights.Parameters
	(*ValuesReplacement)(nil),         // 20: api.v1alpha1.insights.ValuesReplacement
	(*ColumnReplacement)(nil),         // 21: api.v1alpha1.insights.ColumnReplacement
	(*ReplaceNode)(nil),               // 22: api.v1alpha1.insights.ReplaceNode
	(*SortColumn)(nil),                // 23: api.v1alpha1.insights.SortColumn
	(*SortNode)(nil),                  // 24: api.v1alpha1.insights.SortNode
	(*StringManipulationSplit)(nil),   // 25: api.v1alpha1.insights.StringManipulationSplit
	(*StringManipulationReplace)(nil), // 26: api.v1alpha1.insights.StringManipulationReplace
	(*StringManipulationNode)(nil),    // 27: api.v1alpha1.insights.StringManipulationNode
	(*MapNode_Mapping)(nil),           // 28: api.v1alpha1.insights.MapNode.Mapping
	nil,                               // 29: api.v1alpha1.insights.Parent.RenamedColumnsEntry
	nil,                               // 30: api.v1alpha1.insights.SelectNode.RenamedColumnsEntry
	(*Parameters_Parameter)(nil),      // 31: api.v1alpha1.insights.Parameters.Parameter
	nil,                               // 32: api.v1alpha1.insights.Parameters.ParametersEntry
}
var file_api_v1alpha1_insights_insight_content_proto_depIdxs = []int32{
	1,  // 0: api.v1alpha1.insights.Pipeline.nodes:type_name -> api.v1alpha1.insights.Node
	2,  // 1: api.v1alpha1.insights.Node.from_node:type_name -> api.v1alpha1.insights.FromNode
	3,  // 2: api.v1alpha1.insights.Node.filter_node:type_name -> api.v1alpha1.insights.FilterNode
	4,  // 3: api.v1alpha1.insights.Node.derive_node:type_name -> api.v1alpha1.insights.DeriveNode
	5,  // 4: api.v1alpha1.insights.Node.group_node:type_name -> api.v1alpha1.insights.GroupNode
	12, // 5: api.v1alpha1.insights.Node.join_node:type_name -> api.v1alpha1.insights.JoinNode
	15, // 6: api.v1alpha1.insights.Node.select_node:type_name -> api.v1alpha1.insights.SelectNode
	7,  // 7: api.v1alpha1.insights.Node.aggregate_node:type_name -> api.v1alpha1.insights.AggregateNode
	6,  // 8: api.v1alpha1.insights.Node.take_node:type_name -> api.v1alpha1.insights.TakeNode
	17, // 9: api.v1alpha1.insights.Node.json_node:type_name -> api.v1alpha1.insights.JsonNode
	11, // 10: api.v1alpha1.insights.Node.map_node:type_name -> api.v1alpha1.insights.MapNode
	22, // 11: api.v1alpha1.insights.Node.replace_node:type_name -> api.v1alpha1.insights.ReplaceNode
	24, // 12: api.v1alpha1.insights.Node.sort_node:type_name -> api.v1alpha1.insights.SortNode
	27, // 13: api.v1alpha1.insights.Node.string_manipulation_node:type_name -> api.v1alpha1.insights.StringManipulationNode
	10, // 14: api.v1alpha1.insights.FilterNode.expression:type_name -> api.v1alpha1.insights.ExpressionNode
	10, // 15: api.v1alpha1.insights.DeriveNode.expression:type_name -> api.v1alpha1.insights.ExpressionNode
	8,  // 16: api.v1alpha1.insights.GroupNode.aggregation_columns:type_name -> api.v1alpha1.insights.AggregationColumn
	8,  // 17: api.v1alpha1.insights.AggregateNode.aggregation_columns:type_name -> api.v1alpha1.insights.AggregationColumn
	10, // 18: api.v1alpha1.insights.ExpressionNode.children:type_name -> api.v1alpha1.insights.ExpressionNode
	9,  // 19: api.v1alpha1.insights.MapNode.new_column:type_name -> api.v1alpha1.insights.Column
	9,  // 20: api.v1alpha1.insights.MapNode.column_to_map:type_name -> api.v1alpha1.insights.Column
	28, // 21: api.v1alpha1.insights.MapNode.mappings:type_name -> api.v1alpha1.insights.MapNode.Mapping
	10, // 22: api.v1alpha1.insights.MapNode.default_value:type_name -> api.v1alpha1.insights.ExpressionNode
	13, // 23: api.v1alpha1.insights.JoinNode.join_columns:type_name -> api.v1alpha1.insights.JoinColumn
	14, // 24: api.v1alpha1.insights.JoinNode.first_parent:type_name -> api.v1alpha1.insights.Parent
	14, // 25: api.v1alpha1.insights.JoinNode.second_parent:type_name -> api.v1alpha1.insights.Parent
	29, // 26: api.v1alpha1.insights.Parent.renamed_columns:type_name -> api.v1alpha1.insights.Parent.RenamedColumnsEntry
	30, // 27: api.v1alpha1.insights.SelectNode.renamed_columns:type_name -> api.v1alpha1.insights.SelectNode.RenamedColumnsEntry
	16, // 28: api.v1alpha1.insights.JsonNode.targets:type_name -> api.v1alpha1.insights.JsonTarget
	18, // 29: api.v1alpha1.insights.JsonNode.unnest_to_columns_node:type_name -> api.v1alpha1.insights.UnnestToColumnsNode
	16, // 30: api.v1alpha1.insights.UnnestToColumnsNode.unnest_target:type_name -> api.v1alpha1.insights.JsonTarget
	16, // 31: api.v1alpha1.insights.UnnestToColumnsNode.key_target:type_name -> api.v1alpha1.insights.JsonTarget
	16, // 32: api.v1alpha1.insights.UnnestToColumnsNode.value_target:type_name -> api.v1alpha1.insights.JsonTarget
	9,  // 33: api.v1alpha1.insights.UnnestToColumnsNode.json_columns:type_name -> api.v1alpha1.insights.Column
	32, // 34: api.v1alpha1.insights.Parameters.parameters:type_name -> api.v1alpha1.insights.Parameters.ParametersEntry
	10, // 35: api.v1alpha1.insights.ValuesReplacement.replacement_value:type_name -> api.v1alpha1.insights.ExpressionNode
	20, // 36: api.v1alpha1.insights.ColumnReplacement.values_replacements:type_name -> api.v1alpha1.insights.ValuesReplacement
	21, // 37: api.v1alpha1.insights.ReplaceNode.column_replacements:type_name -> api.v1alpha1.insights.ColumnReplacement
	23, // 38: api.v1alpha1.insights.SortNode.sort_columns:type_name -> api.v1alpha1.insights.SortColumn
	25, // 39: api.v1alpha1.insights.StringManipulationNode.string_manipulation_split:type_name -> api.v1alpha1.insights.StringManipulationSplit
	26, // 40: api.v1alpha1.insights.StringManipulationNode.string_manipulation_replace:type_name -> api.v1alpha1.insights.StringManipulationReplace
	10, // 41: api.v1alpha1.insights.MapNode.Mapping.condition:type_name -> api.v1alpha1.insights.ExpressionNode
	10, // 42: api.v1alpha1.insights.MapNode.Mapping.result:type_name -> api.v1alpha1.insights.ExpressionNode
	31, // 43: api.v1alpha1.insights.Parameters.ParametersEntry.value:type_name -> api.v1alpha1.insights.Parameters.Parameter
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_api_v1alpha1_insights_insight_content_proto_init() }
func file_api_v1alpha1_insights_insight_content_proto_init() {
	if File_api_v1alpha1_insights_insight_content_proto != nil {
		return
	}
	file_api_v1alpha1_insights_insight_content_proto_msgTypes[1].OneofWrappers = []any{
		(*Node_FromNode)(nil),
		(*Node_FilterNode)(nil),
		(*Node_DeriveNode)(nil),
		(*Node_GroupNode)(nil),
		(*Node_JoinNode)(nil),
		(*Node_SelectNode)(nil),
		(*Node_AggregateNode)(nil),
		(*Node_TakeNode)(nil),
		(*Node_JsonNode)(nil),
		(*Node_MapNode)(nil),
		(*Node_ReplaceNode)(nil),
		(*Node_SortNode)(nil),
		(*Node_StringManipulationNode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v1alpha1_insights_insight_content_proto_rawDesc), len(file_api_v1alpha1_insights_insight_content_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1alpha1_insights_insight_content_proto_goTypes,
		DependencyIndexes: file_api_v1alpha1_insights_insight_content_proto_depIdxs,
		MessageInfos:      file_api_v1alpha1_insights_insight_content_proto_msgTypes,
	}.Build()
	File_api_v1alpha1_insights_insight_content_proto = out.File
	file_api_v1alpha1_insights_insight_content_proto_goTypes = nil
	file_api_v1alpha1_insights_insight_content_proto_depIdxs = nil
}
