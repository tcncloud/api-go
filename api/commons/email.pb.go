// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/commons/email.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmailResult int32

const (
	EmailResult_EMAIL_RESULT_UNKNOWN        EmailResult = 0
	EmailResult_EMAIL_TASK_WAITING          EmailResult = 8600 //, "EMAIL_TASK_WAITING","Waiting","WTG", "Email Task is ready to be sent"),
	EmailResult_EMAIL_TASK_PROCESSING       EmailResult = 8700 //, "EMAIL_TASK_PROCESSING","Sending","PRC", "Email Task is sent to gateway"),
	EmailResult_EMAIL_TASK_DNC              EmailResult = 8710 //, "EMAIL_TASK_DNC","Do Not Call","DNC", "Email has been scrubbed because it is on EMAIL DNC list."),
	EmailResult_EMAIL_TASK_INVALID          EmailResult = 8720 //, "EMAIL_TASK_INVALID", "Invalid","INV", "Email task has been flagged for having an invalid destination number."),
	EmailResult_EMAIL_TASK_ATTACHMENT_ERROR EmailResult = 8730 //, "EMAIL_TASK_ATTACHMENT_ERROR", "Attachment Error", "ATT", "Email task has been cancelled due to attachment file error"),
	EmailResult_EMAIL_TASK_CANCELLED        EmailResult = 8740 //,"EMAIL_TASK_CANCELLED", "Cancelled","CNC","Email Task is cancelled"),
	EmailResult_EMAIL_TASK_QUEUED           EmailResult = 8800 //, "EMAIL_TASK_QUEUED", "Queued", "QED","Email Task is queued in provider"),
	EmailResult_EMAIL_TASK_DELIVERED        EmailResult = 8900 //, "EMAIL_TASK_DELIVERED","Delivered","DLV", "Message has been successfully delivered to the receiving server."),
	EmailResult_EMAIL_TASK_DROPPED          EmailResult = 8910 //, "EMAIL_TASK_DROPPED","Dropped","DRP", "You may see the following drop reasons: Invalid SMTPAPI header, Spam Content (if spam checker app enabled), Unsubscribed Address, Bounced Address, Spam Reporting Address, Invalid, Recipient List over Package Quota"),
	EmailResult_EMAIL_TASK_DEFERRED         EmailResult = 8920 //, "EMAIL_TASK_DEFERRED","Deferred","DFR", "Recipientâ€™s email server temporarily rejected message."),
	EmailResult_EMAIL_TASK_BOUNCED          EmailResult = 8930 //, "EMAIL_TASK_BOUNCED","Bounced","BNC", "Receiving server could not or would not accept message."),
	EmailResult_EMAIL_TASK_OPENED           EmailResult = 8940 //, "EMAIL_TASK_OPENED","Opened","OPN", "Recipient has opened the HTML message."),
	EmailResult_EMAIL_TASK_CLICKED          EmailResult = 8950 //, "EMAIL_TASK_CLICKED","Clicked","CLK", "Recipient clicked on a link within the message.");,
	EmailResult_EMAIL_TASK_UNSUBSCRIBED     EmailResult = 8960 // "EMAIL_TASK_UNSUBSCRIBED","Unsubscribed","USB", "Recipient clicked on the 'Opt Out of All Emails' link"),
	EmailResult_EMAIL_TASK_MARKED_AS_SPAM   EmailResult = 8970 // "EMAIL_TASK_MARKED_AS_SPAM","Marked As Spam","SPM", "Recipient marked message as spam.");
	EmailResult_EMAIL_TASK_BLOCKED          EmailResult = 8980 //"EMAIL_TASK_BLOCKED","Recipient marked message as blocked.");
)

// Enum value maps for EmailResult.
var (
	EmailResult_name = map[int32]string{
		0:    "EMAIL_RESULT_UNKNOWN",
		8600: "EMAIL_TASK_WAITING",
		8700: "EMAIL_TASK_PROCESSING",
		8710: "EMAIL_TASK_DNC",
		8720: "EMAIL_TASK_INVALID",
		8730: "EMAIL_TASK_ATTACHMENT_ERROR",
		8740: "EMAIL_TASK_CANCELLED",
		8800: "EMAIL_TASK_QUEUED",
		8900: "EMAIL_TASK_DELIVERED",
		8910: "EMAIL_TASK_DROPPED",
		8920: "EMAIL_TASK_DEFERRED",
		8930: "EMAIL_TASK_BOUNCED",
		8940: "EMAIL_TASK_OPENED",
		8950: "EMAIL_TASK_CLICKED",
		8960: "EMAIL_TASK_UNSUBSCRIBED",
		8970: "EMAIL_TASK_MARKED_AS_SPAM",
		8980: "EMAIL_TASK_BLOCKED",
	}
	EmailResult_value = map[string]int32{
		"EMAIL_RESULT_UNKNOWN":        0,
		"EMAIL_TASK_WAITING":          8600,
		"EMAIL_TASK_PROCESSING":       8700,
		"EMAIL_TASK_DNC":              8710,
		"EMAIL_TASK_INVALID":          8720,
		"EMAIL_TASK_ATTACHMENT_ERROR": 8730,
		"EMAIL_TASK_CANCELLED":        8740,
		"EMAIL_TASK_QUEUED":           8800,
		"EMAIL_TASK_DELIVERED":        8900,
		"EMAIL_TASK_DROPPED":          8910,
		"EMAIL_TASK_DEFERRED":         8920,
		"EMAIL_TASK_BOUNCED":          8930,
		"EMAIL_TASK_OPENED":           8940,
		"EMAIL_TASK_CLICKED":          8950,
		"EMAIL_TASK_UNSUBSCRIBED":     8960,
		"EMAIL_TASK_MARKED_AS_SPAM":   8970,
		"EMAIL_TASK_BLOCKED":          8980,
	}
)

func (x EmailResult) Enum() *EmailResult {
	p := new(EmailResult)
	*p = x
	return p
}

func (x EmailResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmailResult) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_email_proto_enumTypes[0].Descriptor()
}

func (EmailResult) Type() protoreflect.EnumType {
	return &file_api_commons_email_proto_enumTypes[0]
}

func (x EmailResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmailResult.Descriptor instead.
func (EmailResult) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_email_proto_rawDescGZIP(), []int{0}
}

type EmailStatus int32

const (
	EmailStatus_EMAIL_STATUS_UNKKNOWN        EmailStatus = 0
	EmailStatus_EMAIL_PREPARING              EmailStatus = 8000 // "EMAIL_PREPARING", "Email group is being prepared for scheduling"),
	EmailStatus_EMAIL_SCHEDULED              EmailStatus = 8100 // "EMAIL_SCHEDULED", "Email group is currently waiting for scheduler"),
	EmailStatus_EMAIL_RESUME                 EmailStatus = 8150 // "EMAIL_RESUME", "Email group is ready to restart after being paused"),
	EmailStatus_EMAIL_RUNNING                EmailStatus = 8200 // "EMAIL_RUNNING", "Email group is currently being executed"),
	EmailStatus_EMAIL_COMPLETED              EmailStatus = 8300 // "EMAIL_COMPLETED", "Email group has been executed"),
	EmailStatus_EMAIL_CANCELLED              EmailStatus = 8310 // "EMAIL_CANCELLED", "Email group has been cancelled"),
	EmailStatus_EMAIL_CANCELLED_ADMIN        EmailStatus = 8320 // "EMAIL_CANCELLED_ADMIN", "Email group has been cancelled by admin"),
	EmailStatus_EMAIL_SUMMED_COMPLETED       EmailStatus = 8400 //"EMAIL_SUMMED_COMPLETED", "Email group has been executed and is summed"),
	EmailStatus_EMAIL_SUMMED_CANCELLED       EmailStatus = 8410 //"EMAIL_SUMMED_CANCELLED", "Email group has been cancelled and is summed"),
	EmailStatus_EMAIL_SUMMED_CANCELLED_ADMIN EmailStatus = 8420 //"EMAIL_SUMMED_CANCELLED_ADMIN", "Email group has been cancelled by the admin and is summed"),
	EmailStatus_EMAIL_PAUSED                 EmailStatus = 8500 // "EMAIL_PAUSED", "Email group has been signaled to pause until further notice");
)

// Enum value maps for EmailStatus.
var (
	EmailStatus_name = map[int32]string{
		0:    "EMAIL_STATUS_UNKKNOWN",
		8000: "EMAIL_PREPARING",
		8100: "EMAIL_SCHEDULED",
		8150: "EMAIL_RESUME",
		8200: "EMAIL_RUNNING",
		8300: "EMAIL_COMPLETED",
		8310: "EMAIL_CANCELLED",
		8320: "EMAIL_CANCELLED_ADMIN",
		8400: "EMAIL_SUMMED_COMPLETED",
		8410: "EMAIL_SUMMED_CANCELLED",
		8420: "EMAIL_SUMMED_CANCELLED_ADMIN",
		8500: "EMAIL_PAUSED",
	}
	EmailStatus_value = map[string]int32{
		"EMAIL_STATUS_UNKKNOWN":        0,
		"EMAIL_PREPARING":              8000,
		"EMAIL_SCHEDULED":              8100,
		"EMAIL_RESUME":                 8150,
		"EMAIL_RUNNING":                8200,
		"EMAIL_COMPLETED":              8300,
		"EMAIL_CANCELLED":              8310,
		"EMAIL_CANCELLED_ADMIN":        8320,
		"EMAIL_SUMMED_COMPLETED":       8400,
		"EMAIL_SUMMED_CANCELLED":       8410,
		"EMAIL_SUMMED_CANCELLED_ADMIN": 8420,
		"EMAIL_PAUSED":                 8500,
	}
)

func (x EmailStatus) Enum() *EmailStatus {
	p := new(EmailStatus)
	*p = x
	return p
}

func (x EmailStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmailStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_email_proto_enumTypes[1].Descriptor()
}

func (EmailStatus) Type() protoreflect.EnumType {
	return &file_api_commons_email_proto_enumTypes[1]
}

func (x EmailStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmailStatus.Descriptor instead.
func (EmailStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_email_proto_rawDescGZIP(), []int{1}
}

type EmailIBGroupStatus int32

const (
	EmailIBGroupStatus_IB_EMAIL_GROUP_UNKNOWN                EmailIBGroupStatus = 0
	EmailIBGroupStatus_IB_EMAIL_GROUP_PREPARING              EmailIBGroupStatus = 10000 //Inbound Email Group is being prepared for scheduler
	EmailIBGroupStatus_IB_EMAIL_GROUP_SCHEDULED              EmailIBGroupStatus = 10010 //Inbound Email Group is waiting for scheduler
	EmailIBGroupStatus_IB_EMAIL_GROUP_RUNNING                EmailIBGroupStatus = 10020 //Inbound Email group is currently being executed
	EmailIBGroupStatus_IB_EMAIL_GROUP_PAUSED                 EmailIBGroupStatus = 10030 //Inbound Email group has been signaled to pause calls until further notice
	EmailIBGroupStatus_IB_EMAIL_GROUP_RESUME                 EmailIBGroupStatus = 10040 //Inbound Email group is ready to restart after being paused
	EmailIBGroupStatus_IB_EMAIL_GROUP_RUNNING_WITH_ERROR     EmailIBGroupStatus = 10041 //Inbound Email group running but with errors
	EmailIBGroupStatus_IB_EMAIL_GROUP_ERROR_STANDBY          EmailIBGroupStatus = 10042 //Inbound Email group ris stopped because it hit a consecutive error limit
	EmailIBGroupStatus_IB_EMAIL_GROUP_COMPLETED              EmailIBGroupStatus = 10050 //Inbound Email group has been executed
	EmailIBGroupStatus_IB_EMAIL_GROUP_CANCELLED_USER         EmailIBGroupStatus = 10060 //Inbound Email group has been cancelled by user
	EmailIBGroupStatus_IB_EMAIL_GROUP_CANCELLED_ADMIN        EmailIBGroupStatus = 10070 //Inbound Email group has been cancelled by admin
	EmailIBGroupStatus_IB_EMAIL_GROUP_SUMMED_COMPLETED       EmailIBGroupStatus = 10150 //Inbound Email group has been executed and is summed
	EmailIBGroupStatus_IB_EMAIL_GROUP_SUMMED_CANCELLED_USER  EmailIBGroupStatus = 10160 //Inbound Email group has been cancelled by the user and is summed
	EmailIBGroupStatus_IB_EMAIL_GROUP_SUMMED_CANCELLED_ADMIN EmailIBGroupStatus = 10170 //Inbound Email group has been cancelled by the admin and is summed
)

// Enum value maps for EmailIBGroupStatus.
var (
	EmailIBGroupStatus_name = map[int32]string{
		0:     "IB_EMAIL_GROUP_UNKNOWN",
		10000: "IB_EMAIL_GROUP_PREPARING",
		10010: "IB_EMAIL_GROUP_SCHEDULED",
		10020: "IB_EMAIL_GROUP_RUNNING",
		10030: "IB_EMAIL_GROUP_PAUSED",
		10040: "IB_EMAIL_GROUP_RESUME",
		10041: "IB_EMAIL_GROUP_RUNNING_WITH_ERROR",
		10042: "IB_EMAIL_GROUP_ERROR_STANDBY",
		10050: "IB_EMAIL_GROUP_COMPLETED",
		10060: "IB_EMAIL_GROUP_CANCELLED_USER",
		10070: "IB_EMAIL_GROUP_CANCELLED_ADMIN",
		10150: "IB_EMAIL_GROUP_SUMMED_COMPLETED",
		10160: "IB_EMAIL_GROUP_SUMMED_CANCELLED_USER",
		10170: "IB_EMAIL_GROUP_SUMMED_CANCELLED_ADMIN",
	}
	EmailIBGroupStatus_value = map[string]int32{
		"IB_EMAIL_GROUP_UNKNOWN":                0,
		"IB_EMAIL_GROUP_PREPARING":              10000,
		"IB_EMAIL_GROUP_SCHEDULED":              10010,
		"IB_EMAIL_GROUP_RUNNING":                10020,
		"IB_EMAIL_GROUP_PAUSED":                 10030,
		"IB_EMAIL_GROUP_RESUME":                 10040,
		"IB_EMAIL_GROUP_RUNNING_WITH_ERROR":     10041,
		"IB_EMAIL_GROUP_ERROR_STANDBY":          10042,
		"IB_EMAIL_GROUP_COMPLETED":              10050,
		"IB_EMAIL_GROUP_CANCELLED_USER":         10060,
		"IB_EMAIL_GROUP_CANCELLED_ADMIN":        10070,
		"IB_EMAIL_GROUP_SUMMED_COMPLETED":       10150,
		"IB_EMAIL_GROUP_SUMMED_CANCELLED_USER":  10160,
		"IB_EMAIL_GROUP_SUMMED_CANCELLED_ADMIN": 10170,
	}
)

func (x EmailIBGroupStatus) Enum() *EmailIBGroupStatus {
	p := new(EmailIBGroupStatus)
	*p = x
	return p
}

func (x EmailIBGroupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmailIBGroupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_email_proto_enumTypes[2].Descriptor()
}

func (EmailIBGroupStatus) Type() protoreflect.EnumType {
	return &file_api_commons_email_proto_enumTypes[2]
}

func (x EmailIBGroupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmailIBGroupStatus.Descriptor instead.
func (EmailIBGroupStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_email_proto_rawDescGZIP(), []int{2}
}

type EmailIBReplyStatus int32

const (
	EmailIBReplyStatus_IB_EMAIL_REPLY_UNKNOWN              EmailIBReplyStatus = 0
	EmailIBReplyStatus_IB_EMAIL_REPLY_RECEIVED             EmailIBReplyStatus = 12000 //Inbound Email reply received successfully
	EmailIBReplyStatus_IB_EMAIL_AGENT_REPLY_SENDING        EmailIBReplyStatus = 12010 //Inbound Email while agent sending reply
	EmailIBReplyStatus_IB_EMAIL_AGENT_REPLY_SENDING_FAILED EmailIBReplyStatus = 12020 //Inbound Email failed while agent sending reply
	EmailIBReplyStatus_IB_EMAIL_AGENT_REPLY_INVALID        EmailIBReplyStatus = 12030 //Inbound Email Reply has been flagged for having an invalid destination
	EmailIBReplyStatus_IB_EMAIL_AGENT_REPLY_SENT           EmailIBReplyStatus = 12040 //Inbound Email agent reply queued/sent successfully
	EmailIBReplyStatus_IB_EMAIL_AGENT_REPLY_DELIVERED      EmailIBReplyStatus = 12050 //Inbound Email agent reply delivered successfully
	EmailIBReplyStatus_IB_EMAIL_AGENT_REPLY_DROPPED        EmailIBReplyStatus = 12060 //Inbound Email agent reply dropped with reasons: Invalid SMTPAPI header, Spam Content (if spam checker app enabled), Unsubscribed Address, Bounced Address, Spam Reporting Address, Invalid, Recipient List over Package Quota
	EmailIBReplyStatus_IB_EMAIL_AGENT_REPLY_DEFERRED       EmailIBReplyStatus = 12070 //Inbound Email agent reply "Deferred", "DFR" because Recipientâ€™s email server temporarily rejected message
	EmailIBReplyStatus_IB_EMAIL_AGENT_REPLY_BOUNCED        EmailIBReplyStatus = 12080 //Inbound Email agent reply "Bounced","BNC", "Receiving server could not or would not accept message
	EmailIBReplyStatus_IB_EMAIL_AGENT_REPLY_OPENED         EmailIBReplyStatus = 12090 //Inbound Email agent reply "Opened","OPN", "Recipient has opened the HTML message.
	EmailIBReplyStatus_IB_EMAIL_AGENT_REPLY_CLICKED        EmailIBReplyStatus = 12100 //Inbound Email agent reply "Clicked","CLK", "Recipient clicked on a link within the message.,
	EmailIBReplyStatus_IB_EMAIL_AGENT_REPLY_UNSUBSCRIBED   EmailIBReplyStatus = 12110 //Inbound Email agent reply "Unsubscribed","USB", "Recipient clicked on the 'Opt Out of All Emails' link
	EmailIBReplyStatus_IB_EMAIL_AGENT_REPLY_MARKED_AS_SPAM EmailIBReplyStatus = 12120 // Inbound Email agent reply "Marked As Spam","SPM", "Recipient marked message as spam.
	EmailIBReplyStatus_IB_EMAIL_AGENT_REPLY_BLOCKED        EmailIBReplyStatus = 12130 //Inbound Email agent reply recipient marked message as blocked.
	EmailIBReplyStatus_IB_EMAIL_REPLY_DNC                  EmailIBReplyStatus = 12140 //Inbound Email Reply has been scrubbed because it is on EMAIL DNC list
	EmailIBReplyStatus_IB_EMAIL_REPLY_CANCELLED            EmailIBReplyStatus = 12150 //Inbound Email Reply has been cancelled
)

// Enum value maps for EmailIBReplyStatus.
var (
	EmailIBReplyStatus_name = map[int32]string{
		0:     "IB_EMAIL_REPLY_UNKNOWN",
		12000: "IB_EMAIL_REPLY_RECEIVED",
		12010: "IB_EMAIL_AGENT_REPLY_SENDING",
		12020: "IB_EMAIL_AGENT_REPLY_SENDING_FAILED",
		12030: "IB_EMAIL_AGENT_REPLY_INVALID",
		12040: "IB_EMAIL_AGENT_REPLY_SENT",
		12050: "IB_EMAIL_AGENT_REPLY_DELIVERED",
		12060: "IB_EMAIL_AGENT_REPLY_DROPPED",
		12070: "IB_EMAIL_AGENT_REPLY_DEFERRED",
		12080: "IB_EMAIL_AGENT_REPLY_BOUNCED",
		12090: "IB_EMAIL_AGENT_REPLY_OPENED",
		12100: "IB_EMAIL_AGENT_REPLY_CLICKED",
		12110: "IB_EMAIL_AGENT_REPLY_UNSUBSCRIBED",
		12120: "IB_EMAIL_AGENT_REPLY_MARKED_AS_SPAM",
		12130: "IB_EMAIL_AGENT_REPLY_BLOCKED",
		12140: "IB_EMAIL_REPLY_DNC",
		12150: "IB_EMAIL_REPLY_CANCELLED",
	}
	EmailIBReplyStatus_value = map[string]int32{
		"IB_EMAIL_REPLY_UNKNOWN":              0,
		"IB_EMAIL_REPLY_RECEIVED":             12000,
		"IB_EMAIL_AGENT_REPLY_SENDING":        12010,
		"IB_EMAIL_AGENT_REPLY_SENDING_FAILED": 12020,
		"IB_EMAIL_AGENT_REPLY_INVALID":        12030,
		"IB_EMAIL_AGENT_REPLY_SENT":           12040,
		"IB_EMAIL_AGENT_REPLY_DELIVERED":      12050,
		"IB_EMAIL_AGENT_REPLY_DROPPED":        12060,
		"IB_EMAIL_AGENT_REPLY_DEFERRED":       12070,
		"IB_EMAIL_AGENT_REPLY_BOUNCED":        12080,
		"IB_EMAIL_AGENT_REPLY_OPENED":         12090,
		"IB_EMAIL_AGENT_REPLY_CLICKED":        12100,
		"IB_EMAIL_AGENT_REPLY_UNSUBSCRIBED":   12110,
		"IB_EMAIL_AGENT_REPLY_MARKED_AS_SPAM": 12120,
		"IB_EMAIL_AGENT_REPLY_BLOCKED":        12130,
		"IB_EMAIL_REPLY_DNC":                  12140,
		"IB_EMAIL_REPLY_CANCELLED":            12150,
	}
)

func (x EmailIBReplyStatus) Enum() *EmailIBReplyStatus {
	p := new(EmailIBReplyStatus)
	*p = x
	return p
}

func (x EmailIBReplyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmailIBReplyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_email_proto_enumTypes[3].Descriptor()
}

func (EmailIBReplyStatus) Type() protoreflect.EnumType {
	return &file_api_commons_email_proto_enumTypes[3]
}

func (x EmailIBReplyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmailIBReplyStatus.Descriptor instead.
func (EmailIBReplyStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_email_proto_rawDescGZIP(), []int{3}
}

type EmailIBGroupEvent int32

const (
	EmailIBGroupEvent_IB_EMAIL_GROUP_EVENT_PREPARED         EmailIBGroupEvent = 0  // when the system is getting things ready for the inbound group
	EmailIBGroupEvent_IB_EMAIL_GROUP_EVENT_SCHEDULED        EmailIBGroupEvent = 1  // when the inbound group is scheduled
	EmailIBGroupEvent_IB_EMAIL_GROUP_EVENT_STARTED          EmailIBGroupEvent = 2  // when the manager starts the inbound group
	EmailIBGroupEvent_IB_EMAIL_GROUP_EVENT_RUNNING          EmailIBGroupEvent = 3  // each time a poller runs a cycle for the inbound group
	EmailIBGroupEvent_IB_EMAIL_GROUP_EVENT_STOPPED          EmailIBGroupEvent = 4  // when the manager stops the inbound group
	EmailIBGroupEvent_IB_EMAIL_GROUP_EVENT_PAUSED           EmailIBGroupEvent = 5  // when the poller stops because of error or if the ui sets pause
	EmailIBGroupEvent_IB_EMAIL_GROUP_EVENT_RESUME           EmailIBGroupEvent = 6  // when the ui resumes
	EmailIBGroupEvent_IB_EMAIL_GROUP_EVENT_CANCELLED        EmailIBGroupEvent = 7  // when the ui stops
	EmailIBGroupEvent_IB_EMAIL_GROUP_EVENT_MESSAGE_RECEIVED EmailIBGroupEvent = 8  // each time we get a message for a group
	EmailIBGroupEvent_IB_EMAIL_GROUP_EVENT_LOGIN_ERROR      EmailIBGroupEvent = 9  // each time we have an error because of logging in
	EmailIBGroupEvent_IB_EMAIL_GROUP_EVENT_FETCH_ERROR      EmailIBGroupEvent = 10 // when we fail to fetch messages ? - not sure about this one yet
	EmailIBGroupEvent_IB_EMAIL_GROUP_EVENT_STANDBY_ERROR    EmailIBGroupEvent = 11 // reached max number of consecutive errors logging into email acct
	EmailIBGroupEvent_IB_EMAIL_GROUP_EVENT_COMPLETED        EmailIBGroupEvent = 12 // when the inbound group is marked as completed by the manager
)

// Enum value maps for EmailIBGroupEvent.
var (
	EmailIBGroupEvent_name = map[int32]string{
		0:  "IB_EMAIL_GROUP_EVENT_PREPARED",
		1:  "IB_EMAIL_GROUP_EVENT_SCHEDULED",
		2:  "IB_EMAIL_GROUP_EVENT_STARTED",
		3:  "IB_EMAIL_GROUP_EVENT_RUNNING",
		4:  "IB_EMAIL_GROUP_EVENT_STOPPED",
		5:  "IB_EMAIL_GROUP_EVENT_PAUSED",
		6:  "IB_EMAIL_GROUP_EVENT_RESUME",
		7:  "IB_EMAIL_GROUP_EVENT_CANCELLED",
		8:  "IB_EMAIL_GROUP_EVENT_MESSAGE_RECEIVED",
		9:  "IB_EMAIL_GROUP_EVENT_LOGIN_ERROR",
		10: "IB_EMAIL_GROUP_EVENT_FETCH_ERROR",
		11: "IB_EMAIL_GROUP_EVENT_STANDBY_ERROR",
		12: "IB_EMAIL_GROUP_EVENT_COMPLETED",
	}
	EmailIBGroupEvent_value = map[string]int32{
		"IB_EMAIL_GROUP_EVENT_PREPARED":         0,
		"IB_EMAIL_GROUP_EVENT_SCHEDULED":        1,
		"IB_EMAIL_GROUP_EVENT_STARTED":          2,
		"IB_EMAIL_GROUP_EVENT_RUNNING":          3,
		"IB_EMAIL_GROUP_EVENT_STOPPED":          4,
		"IB_EMAIL_GROUP_EVENT_PAUSED":           5,
		"IB_EMAIL_GROUP_EVENT_RESUME":           6,
		"IB_EMAIL_GROUP_EVENT_CANCELLED":        7,
		"IB_EMAIL_GROUP_EVENT_MESSAGE_RECEIVED": 8,
		"IB_EMAIL_GROUP_EVENT_LOGIN_ERROR":      9,
		"IB_EMAIL_GROUP_EVENT_FETCH_ERROR":      10,
		"IB_EMAIL_GROUP_EVENT_STANDBY_ERROR":    11,
		"IB_EMAIL_GROUP_EVENT_COMPLETED":        12,
	}
)

func (x EmailIBGroupEvent) Enum() *EmailIBGroupEvent {
	p := new(EmailIBGroupEvent)
	*p = x
	return p
}

func (x EmailIBGroupEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmailIBGroupEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_email_proto_enumTypes[4].Descriptor()
}

func (EmailIBGroupEvent) Type() protoreflect.EnumType {
	return &file_api_commons_email_proto_enumTypes[4]
}

func (x EmailIBGroupEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmailIBGroupEvent.Descriptor instead.
func (EmailIBGroupEvent) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_email_proto_rawDescGZIP(), []int{4}
}

type EmailIBReplyType int32

const (
	EmailIBReplyType_REPLY_UNKNOWN  EmailIBReplyType = 0
	EmailIBReplyType_EXISTING_CONV  EmailIBReplyType = 1 // Received reply to existing conversation
	EmailIBReplyType_OUTBOUND_REPLY EmailIBReplyType = 2 // Received reply to outbound task
	EmailIBReplyType_AGENT_REPLY    EmailIBReplyType = 3 // Its a reply by an agent
	EmailIBReplyType_INBOUND_PURE   EmailIBReplyType = 4 // Its a pure inbound since no match found to any existing conversation
	EmailIBReplyType_OUTBOUND_TASK  EmailIBReplyType = 5 // copy outbound task details to reply table
	EmailIBReplyType_OUTBOUND_PURE  EmailIBReplyType = 6 // Its a reply to pure outbound msg
)

// Enum value maps for EmailIBReplyType.
var (
	EmailIBReplyType_name = map[int32]string{
		0: "REPLY_UNKNOWN",
		1: "EXISTING_CONV",
		2: "OUTBOUND_REPLY",
		3: "AGENT_REPLY",
		4: "INBOUND_PURE",
		5: "OUTBOUND_TASK",
		6: "OUTBOUND_PURE",
	}
	EmailIBReplyType_value = map[string]int32{
		"REPLY_UNKNOWN":  0,
		"EXISTING_CONV":  1,
		"OUTBOUND_REPLY": 2,
		"AGENT_REPLY":    3,
		"INBOUND_PURE":   4,
		"OUTBOUND_TASK":  5,
		"OUTBOUND_PURE":  6,
	}
)

func (x EmailIBReplyType) Enum() *EmailIBReplyType {
	p := new(EmailIBReplyType)
	*p = x
	return p
}

func (x EmailIBReplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmailIBReplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_email_proto_enumTypes[5].Descriptor()
}

func (EmailIBReplyType) Type() protoreflect.EnumType {
	return &file_api_commons_email_proto_enumTypes[5]
}

func (x EmailIBReplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmailIBReplyType.Descriptor instead.
func (EmailIBReplyType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_email_proto_rawDescGZIP(), []int{5}
}

var File_api_commons_email_proto protoreflect.FileDescriptor

const file_api_commons_email_proto_rawDesc = "" +
	"\n" +
	"\x17api/commons/email.proto\x12\vapi.commons*\xce\x03\n" +
	"\vEmailResult\x12\x18\n" +
	"\x14EMAIL_RESULT_UNKNOWN\x10\x00\x12\x17\n" +
	"\x12EMAIL_TASK_WAITING\x10\x98C\x12\x1a\n" +
	"\x15EMAIL_TASK_PROCESSING\x10\xfcC\x12\x13\n" +
	"\x0eEMAIL_TASK_DNC\x10\x86D\x12\x17\n" +
	"\x12EMAIL_TASK_INVALID\x10\x90D\x12 \n" +
	"\x1bEMAIL_TASK_ATTACHMENT_ERROR\x10\x9aD\x12\x19\n" +
	"\x14EMAIL_TASK_CANCELLED\x10\xa4D\x12\x16\n" +
	"\x11EMAIL_TASK_QUEUED\x10\xe0D\x12\x19\n" +
	"\x14EMAIL_TASK_DELIVERED\x10\xc4E\x12\x17\n" +
	"\x12EMAIL_TASK_DROPPED\x10\xceE\x12\x18\n" +
	"\x13EMAIL_TASK_DEFERRED\x10\xd8E\x12\x17\n" +
	"\x12EMAIL_TASK_BOUNCED\x10\xe2E\x12\x16\n" +
	"\x11EMAIL_TASK_OPENED\x10\xecE\x12\x17\n" +
	"\x12EMAIL_TASK_CLICKED\x10\xf6E\x12\x1c\n" +
	"\x17EMAIL_TASK_UNSUBSCRIBED\x10\x80F\x12\x1e\n" +
	"\x19EMAIL_TASK_MARKED_AS_SPAM\x10\x8aF\x12\x17\n" +
	"\x12EMAIL_TASK_BLOCKED\x10\x94F*\xb3\x02\n" +
	"\vEmailStatus\x12\x19\n" +
	"\x15EMAIL_STATUS_UNKKNOWN\x10\x00\x12\x14\n" +
	"\x0fEMAIL_PREPARING\x10\xc0>\x12\x14\n" +
	"\x0fEMAIL_SCHEDULED\x10\xa4?\x12\x11\n" +
	"\fEMAIL_RESUME\x10\xd6?\x12\x12\n" +
	"\rEMAIL_RUNNING\x10\x88@\x12\x14\n" +
	"\x0fEMAIL_COMPLETED\x10\xec@\x12\x14\n" +
	"\x0fEMAIL_CANCELLED\x10\xf6@\x12\x1a\n" +
	"\x15EMAIL_CANCELLED_ADMIN\x10\x80A\x12\x1b\n" +
	"\x16EMAIL_SUMMED_COMPLETED\x10\xd0A\x12\x1b\n" +
	"\x16EMAIL_SUMMED_CANCELLED\x10\xdaA\x12!\n" +
	"\x1cEMAIL_SUMMED_CANCELLED_ADMIN\x10\xe4A\x12\x11\n" +
	"\fEMAIL_PAUSED\x10\xb4B*\xf3\x03\n" +
	"\x12EmailIBGroupStatus\x12\x1a\n" +
	"\x16IB_EMAIL_GROUP_UNKNOWN\x10\x00\x12\x1d\n" +
	"\x18IB_EMAIL_GROUP_PREPARING\x10\x90N\x12\x1d\n" +
	"\x18IB_EMAIL_GROUP_SCHEDULED\x10\x9aN\x12\x1b\n" +
	"\x16IB_EMAIL_GROUP_RUNNING\x10\xa4N\x12\x1a\n" +
	"\x15IB_EMAIL_GROUP_PAUSED\x10\xaeN\x12\x1a\n" +
	"\x15IB_EMAIL_GROUP_RESUME\x10\xb8N\x12&\n" +
	"!IB_EMAIL_GROUP_RUNNING_WITH_ERROR\x10\xb9N\x12!\n" +
	"\x1cIB_EMAIL_GROUP_ERROR_STANDBY\x10\xbaN\x12\x1d\n" +
	"\x18IB_EMAIL_GROUP_COMPLETED\x10\xc2N\x12\"\n" +
	"\x1dIB_EMAIL_GROUP_CANCELLED_USER\x10\xccN\x12#\n" +
	"\x1eIB_EMAIL_GROUP_CANCELLED_ADMIN\x10\xd6N\x12$\n" +
	"\x1fIB_EMAIL_GROUP_SUMMED_COMPLETED\x10\xa6O\x12)\n" +
	"$IB_EMAIL_GROUP_SUMMED_CANCELLED_USER\x10\xb0O\x12*\n" +
	"%IB_EMAIL_GROUP_SUMMED_CANCELLED_ADMIN\x10\xbaO*\xdf\x04\n" +
	"\x12EmailIBReplyStatus\x12\x1a\n" +
	"\x16IB_EMAIL_REPLY_UNKNOWN\x10\x00\x12\x1c\n" +
	"\x17IB_EMAIL_REPLY_RECEIVED\x10\xe0]\x12!\n" +
	"\x1cIB_EMAIL_AGENT_REPLY_SENDING\x10\xea]\x12(\n" +
	"#IB_EMAIL_AGENT_REPLY_SENDING_FAILED\x10\xf4]\x12!\n" +
	"\x1cIB_EMAIL_AGENT_REPLY_INVALID\x10\xfe]\x12\x1e\n" +
	"\x19IB_EMAIL_AGENT_REPLY_SENT\x10\x88^\x12#\n" +
	"\x1eIB_EMAIL_AGENT_REPLY_DELIVERED\x10\x92^\x12!\n" +
	"\x1cIB_EMAIL_AGENT_REPLY_DROPPED\x10\x9c^\x12\"\n" +
	"\x1dIB_EMAIL_AGENT_REPLY_DEFERRED\x10\xa6^\x12!\n" +
	"\x1cIB_EMAIL_AGENT_REPLY_BOUNCED\x10\xb0^\x12 \n" +
	"\x1bIB_EMAIL_AGENT_REPLY_OPENED\x10\xba^\x12!\n" +
	"\x1cIB_EMAIL_AGENT_REPLY_CLICKED\x10\xc4^\x12&\n" +
	"!IB_EMAIL_AGENT_REPLY_UNSUBSCRIBED\x10\xce^\x12(\n" +
	"#IB_EMAIL_AGENT_REPLY_MARKED_AS_SPAM\x10\xd8^\x12!\n" +
	"\x1cIB_EMAIL_AGENT_REPLY_BLOCKED\x10\xe2^\x12\x17\n" +
	"\x12IB_EMAIL_REPLY_DNC\x10\xec^\x12\x1d\n" +
	"\x18IB_EMAIL_REPLY_CANCELLED\x10\xf6^*\xe9\x03\n" +
	"\x11EmailIBGroupEvent\x12!\n" +
	"\x1dIB_EMAIL_GROUP_EVENT_PREPARED\x10\x00\x12\"\n" +
	"\x1eIB_EMAIL_GROUP_EVENT_SCHEDULED\x10\x01\x12 \n" +
	"\x1cIB_EMAIL_GROUP_EVENT_STARTED\x10\x02\x12 \n" +
	"\x1cIB_EMAIL_GROUP_EVENT_RUNNING\x10\x03\x12 \n" +
	"\x1cIB_EMAIL_GROUP_EVENT_STOPPED\x10\x04\x12\x1f\n" +
	"\x1bIB_EMAIL_GROUP_EVENT_PAUSED\x10\x05\x12\x1f\n" +
	"\x1bIB_EMAIL_GROUP_EVENT_RESUME\x10\x06\x12\"\n" +
	"\x1eIB_EMAIL_GROUP_EVENT_CANCELLED\x10\a\x12)\n" +
	"%IB_EMAIL_GROUP_EVENT_MESSAGE_RECEIVED\x10\b\x12$\n" +
	" IB_EMAIL_GROUP_EVENT_LOGIN_ERROR\x10\t\x12$\n" +
	" IB_EMAIL_GROUP_EVENT_FETCH_ERROR\x10\n" +
	"\x12&\n" +
	"\"IB_EMAIL_GROUP_EVENT_STANDBY_ERROR\x10\v\x12\"\n" +
	"\x1eIB_EMAIL_GROUP_EVENT_COMPLETED\x10\f*\x95\x01\n" +
	"\x10EmailIBReplyType\x12\x11\n" +
	"\rREPLY_UNKNOWN\x10\x00\x12\x11\n" +
	"\rEXISTING_CONV\x10\x01\x12\x12\n" +
	"\x0eOUTBOUND_REPLY\x10\x02\x12\x0f\n" +
	"\vAGENT_REPLY\x10\x03\x12\x10\n" +
	"\fINBOUND_PURE\x10\x04\x12\x11\n" +
	"\rOUTBOUND_TASK\x10\x05\x12\x11\n" +
	"\rOUTBOUND_PURE\x10\x06B\x92\x01\n" +
	"\x0fcom.api.commonsB\n" +
	"EmailProtoP\x01Z&github.com/tcncloud/api-go/api/commons\xa2\x02\x03ACX\xaa\x02\vApi.Commons\xca\x02\vApi\\Commons\xe2\x02\x17Api\\Commons\\GPBMetadata\xea\x02\fApi::Commonsb\x06proto3"

var (
	file_api_commons_email_proto_rawDescOnce sync.Once
	file_api_commons_email_proto_rawDescData []byte
)

func file_api_commons_email_proto_rawDescGZIP() []byte {
	file_api_commons_email_proto_rawDescOnce.Do(func() {
		file_api_commons_email_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_commons_email_proto_rawDesc), len(file_api_commons_email_proto_rawDesc)))
	})
	return file_api_commons_email_proto_rawDescData
}

var file_api_commons_email_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_api_commons_email_proto_goTypes = []any{
	(EmailResult)(0),        // 0: api.commons.EmailResult
	(EmailStatus)(0),        // 1: api.commons.EmailStatus
	(EmailIBGroupStatus)(0), // 2: api.commons.EmailIBGroupStatus
	(EmailIBReplyStatus)(0), // 3: api.commons.EmailIBReplyStatus
	(EmailIBGroupEvent)(0),  // 4: api.commons.EmailIBGroupEvent
	(EmailIBReplyType)(0),   // 5: api.commons.EmailIBReplyType
}
var file_api_commons_email_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_commons_email_proto_init() }
func file_api_commons_email_proto_init() {
	if File_api_commons_email_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_commons_email_proto_rawDesc), len(file_api_commons_email_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_email_proto_goTypes,
		DependencyIndexes: file_api_commons_email_proto_depIdxs,
		EnumInfos:         file_api_commons_email_proto_enumTypes,
	}.Build()
	File_api_commons_email_proto = out.File
	file_api_commons_email_proto_goTypes = nil
	file_api_commons_email_proto_depIdxs = nil
}
