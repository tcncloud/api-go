// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: api/commons/bireportgenerator.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RepeatFrequency is an enum for how often a report should be executed.
type RepeatFrequency int32

const (
	RepeatFrequency_REPEAT_FREQUENCY_UNSPECIFIED RepeatFrequency = 0
	RepeatFrequency_REPEAT_FREQUENCY_ON_HOUR     RepeatFrequency = 1
	RepeatFrequency_REPEAT_FREQUENCY_15_MINUTES  RepeatFrequency = 2
	RepeatFrequency_REPEAT_FREQUENCY_30_MINUTES  RepeatFrequency = 3
)

// Enum value maps for RepeatFrequency.
var (
	RepeatFrequency_name = map[int32]string{
		0: "REPEAT_FREQUENCY_UNSPECIFIED",
		1: "REPEAT_FREQUENCY_ON_HOUR",
		2: "REPEAT_FREQUENCY_15_MINUTES",
		3: "REPEAT_FREQUENCY_30_MINUTES",
	}
	RepeatFrequency_value = map[string]int32{
		"REPEAT_FREQUENCY_UNSPECIFIED": 0,
		"REPEAT_FREQUENCY_ON_HOUR":     1,
		"REPEAT_FREQUENCY_15_MINUTES":  2,
		"REPEAT_FREQUENCY_30_MINUTES":  3,
	}
)

func (x RepeatFrequency) Enum() *RepeatFrequency {
	p := new(RepeatFrequency)
	*p = x
	return p
}

func (x RepeatFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepeatFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_bireportgenerator_proto_enumTypes[0].Descriptor()
}

func (RepeatFrequency) Type() protoreflect.EnumType {
	return &file_api_commons_bireportgenerator_proto_enumTypes[0]
}

func (x RepeatFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepeatFrequency.Descriptor instead.
func (RepeatFrequency) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_bireportgenerator_proto_rawDescGZIP(), []int{0}
}

// DayFilterType is an enum for the type of day filter.
type DayFilterType int32

const (
	DayFilterType_DAY_FILTER_TYPE_UNSPECIFIED  DayFilterType = 0
	DayFilterType_DAY_FILTER_TYPE_EVERY_DAY    DayFilterType = 1
	DayFilterType_DAY_FILTER_TYPE_DAY_OF_WEEK  DayFilterType = 2
	DayFilterType_DAY_FILTER_TYPE_DAY_OF_MONTH DayFilterType = 3
)

// Enum value maps for DayFilterType.
var (
	DayFilterType_name = map[int32]string{
		0: "DAY_FILTER_TYPE_UNSPECIFIED",
		1: "DAY_FILTER_TYPE_EVERY_DAY",
		2: "DAY_FILTER_TYPE_DAY_OF_WEEK",
		3: "DAY_FILTER_TYPE_DAY_OF_MONTH",
	}
	DayFilterType_value = map[string]int32{
		"DAY_FILTER_TYPE_UNSPECIFIED":  0,
		"DAY_FILTER_TYPE_EVERY_DAY":    1,
		"DAY_FILTER_TYPE_DAY_OF_WEEK":  2,
		"DAY_FILTER_TYPE_DAY_OF_MONTH": 3,
	}
)

func (x DayFilterType) Enum() *DayFilterType {
	p := new(DayFilterType)
	*p = x
	return p
}

func (x DayFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_bireportgenerator_proto_enumTypes[1].Descriptor()
}

func (DayFilterType) Type() protoreflect.EnumType {
	return &file_api_commons_bireportgenerator_proto_enumTypes[1]
}

func (x DayFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DayFilterType.Descriptor instead.
func (DayFilterType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_bireportgenerator_proto_rawDescGZIP(), []int{1}
}

// ReportFormat is an enum for the format of the report.
type ReportFormat int32

const (
	ReportFormat_REPORT_FORMAT_UNSPECIFIED ReportFormat = 0
	ReportFormat_REPORT_FORMAT_CSV         ReportFormat = 1
)

// Enum value maps for ReportFormat.
var (
	ReportFormat_name = map[int32]string{
		0: "REPORT_FORMAT_UNSPECIFIED",
		1: "REPORT_FORMAT_CSV",
	}
	ReportFormat_value = map[string]int32{
		"REPORT_FORMAT_UNSPECIFIED": 0,
		"REPORT_FORMAT_CSV":         1,
	}
)

func (x ReportFormat) Enum() *ReportFormat {
	p := new(ReportFormat)
	*p = x
	return p
}

func (x ReportFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_bireportgenerator_proto_enumTypes[2].Descriptor()
}

func (ReportFormat) Type() protoreflect.EnumType {
	return &file_api_commons_bireportgenerator_proto_enumTypes[2]
}

func (x ReportFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportFormat.Descriptor instead.
func (ReportFormat) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_bireportgenerator_proto_rawDescGZIP(), []int{2}
}

// TimePeriodEnum is an enumeration of time period filters.
type TimePeriod int32

const (
	TimePeriod_TIME_PERIOD_UNSPECIFIED          TimePeriod = 0
	TimePeriod_TIME_PERIOD_TODAY                TimePeriod = 1
	TimePeriod_TIME_PERIOD_THIS_WEEK            TimePeriod = 2
	TimePeriod_TIME_PERIOD_THIS_MONTH           TimePeriod = 3
	TimePeriod_TIME_PERIOD_THIS_YEAR            TimePeriod = 4
	TimePeriod_TIME_PERIOD_THE_DAY_SO_FAR       TimePeriod = 5
	TimePeriod_TIME_PERIOD_WEEK_TO_DATE         TimePeriod = 6
	TimePeriod_TIME_PERIOD_MONTH_TO_DATE        TimePeriod = 7
	TimePeriod_TIME_PERIOD_YEAR_TO_DATE         TimePeriod = 8
	TimePeriod_TIME_PERIOD_YESTERDAY            TimePeriod = 9
	TimePeriod_TIME_PERIOD_DAY_BEFORE_YESTERDAY TimePeriod = 10
	TimePeriod_TIME_PERIOD_THIS_DAY_LAST_WEEK   TimePeriod = 11
	TimePeriod_TIME_PERIOD_PREVIOUS_WEEK        TimePeriod = 12
	TimePeriod_TIME_PERIOD_PREVIOUS_MONTH       TimePeriod = 13
	TimePeriod_TIME_PERIOD_PREVIOUS_YEAR        TimePeriod = 14
	TimePeriod_TIME_PERIOD_LAST_15_MINUTES      TimePeriod = 15
	TimePeriod_TIME_PERIOD_LAST_30_MINUTES      TimePeriod = 16
	TimePeriod_TIME_PERIOD_LAST_1_HOUR          TimePeriod = 17
	TimePeriod_TIME_PERIOD_LAST_2_HOURS         TimePeriod = 18
	TimePeriod_TIME_PERIOD_LAST_3_HOURS         TimePeriod = 19
	TimePeriod_TIME_PERIOD_LAST_4_HOURS         TimePeriod = 20
	TimePeriod_TIME_PERIOD_LAST_6_HOURS         TimePeriod = 21
	TimePeriod_TIME_PERIOD_LAST_12_HOURS        TimePeriod = 22
	TimePeriod_TIME_PERIOD_LAST_24_HOURS        TimePeriod = 23
	TimePeriod_TIME_PERIOD_LAST_2_DAYS          TimePeriod = 24
	TimePeriod_TIME_PERIOD_LAST_3_DAYS          TimePeriod = 25
	TimePeriod_TIME_PERIOD_LAST_7_DAYS          TimePeriod = 26
	TimePeriod_TIME_PERIOD_LAST_2_WEEKS         TimePeriod = 27
	TimePeriod_TIME_PERIOD_LAST_30_DAYS         TimePeriod = 28
	TimePeriod_TIME_PERIOD_LAST_60_DAYS         TimePeriod = 29
	TimePeriod_TIME_PERIOD_LAST_90_DAYS         TimePeriod = 30
	TimePeriod_TIME_PERIOD_LAST_6_MONTHS        TimePeriod = 31
	TimePeriod_TIME_PERIOD_LAST_1_YEAR          TimePeriod = 32
	TimePeriod_TIME_PERIOD_LAST_2_YEARS         TimePeriod = 33
	TimePeriod_TIME_PERIOD_LAST_5_YEARS         TimePeriod = 34
)

// Enum value maps for TimePeriod.
var (
	TimePeriod_name = map[int32]string{
		0:  "TIME_PERIOD_UNSPECIFIED",
		1:  "TIME_PERIOD_TODAY",
		2:  "TIME_PERIOD_THIS_WEEK",
		3:  "TIME_PERIOD_THIS_MONTH",
		4:  "TIME_PERIOD_THIS_YEAR",
		5:  "TIME_PERIOD_THE_DAY_SO_FAR",
		6:  "TIME_PERIOD_WEEK_TO_DATE",
		7:  "TIME_PERIOD_MONTH_TO_DATE",
		8:  "TIME_PERIOD_YEAR_TO_DATE",
		9:  "TIME_PERIOD_YESTERDAY",
		10: "TIME_PERIOD_DAY_BEFORE_YESTERDAY",
		11: "TIME_PERIOD_THIS_DAY_LAST_WEEK",
		12: "TIME_PERIOD_PREVIOUS_WEEK",
		13: "TIME_PERIOD_PREVIOUS_MONTH",
		14: "TIME_PERIOD_PREVIOUS_YEAR",
		15: "TIME_PERIOD_LAST_15_MINUTES",
		16: "TIME_PERIOD_LAST_30_MINUTES",
		17: "TIME_PERIOD_LAST_1_HOUR",
		18: "TIME_PERIOD_LAST_2_HOURS",
		19: "TIME_PERIOD_LAST_3_HOURS",
		20: "TIME_PERIOD_LAST_4_HOURS",
		21: "TIME_PERIOD_LAST_6_HOURS",
		22: "TIME_PERIOD_LAST_12_HOURS",
		23: "TIME_PERIOD_LAST_24_HOURS",
		24: "TIME_PERIOD_LAST_2_DAYS",
		25: "TIME_PERIOD_LAST_3_DAYS",
		26: "TIME_PERIOD_LAST_7_DAYS",
		27: "TIME_PERIOD_LAST_2_WEEKS",
		28: "TIME_PERIOD_LAST_30_DAYS",
		29: "TIME_PERIOD_LAST_60_DAYS",
		30: "TIME_PERIOD_LAST_90_DAYS",
		31: "TIME_PERIOD_LAST_6_MONTHS",
		32: "TIME_PERIOD_LAST_1_YEAR",
		33: "TIME_PERIOD_LAST_2_YEARS",
		34: "TIME_PERIOD_LAST_5_YEARS",
	}
	TimePeriod_value = map[string]int32{
		"TIME_PERIOD_UNSPECIFIED":          0,
		"TIME_PERIOD_TODAY":                1,
		"TIME_PERIOD_THIS_WEEK":            2,
		"TIME_PERIOD_THIS_MONTH":           3,
		"TIME_PERIOD_THIS_YEAR":            4,
		"TIME_PERIOD_THE_DAY_SO_FAR":       5,
		"TIME_PERIOD_WEEK_TO_DATE":         6,
		"TIME_PERIOD_MONTH_TO_DATE":        7,
		"TIME_PERIOD_YEAR_TO_DATE":         8,
		"TIME_PERIOD_YESTERDAY":            9,
		"TIME_PERIOD_DAY_BEFORE_YESTERDAY": 10,
		"TIME_PERIOD_THIS_DAY_LAST_WEEK":   11,
		"TIME_PERIOD_PREVIOUS_WEEK":        12,
		"TIME_PERIOD_PREVIOUS_MONTH":       13,
		"TIME_PERIOD_PREVIOUS_YEAR":        14,
		"TIME_PERIOD_LAST_15_MINUTES":      15,
		"TIME_PERIOD_LAST_30_MINUTES":      16,
		"TIME_PERIOD_LAST_1_HOUR":          17,
		"TIME_PERIOD_LAST_2_HOURS":         18,
		"TIME_PERIOD_LAST_3_HOURS":         19,
		"TIME_PERIOD_LAST_4_HOURS":         20,
		"TIME_PERIOD_LAST_6_HOURS":         21,
		"TIME_PERIOD_LAST_12_HOURS":        22,
		"TIME_PERIOD_LAST_24_HOURS":        23,
		"TIME_PERIOD_LAST_2_DAYS":          24,
		"TIME_PERIOD_LAST_3_DAYS":          25,
		"TIME_PERIOD_LAST_7_DAYS":          26,
		"TIME_PERIOD_LAST_2_WEEKS":         27,
		"TIME_PERIOD_LAST_30_DAYS":         28,
		"TIME_PERIOD_LAST_60_DAYS":         29,
		"TIME_PERIOD_LAST_90_DAYS":         30,
		"TIME_PERIOD_LAST_6_MONTHS":        31,
		"TIME_PERIOD_LAST_1_YEAR":          32,
		"TIME_PERIOD_LAST_2_YEARS":         33,
		"TIME_PERIOD_LAST_5_YEARS":         34,
	}
)

func (x TimePeriod) Enum() *TimePeriod {
	p := new(TimePeriod)
	*p = x
	return p
}

func (x TimePeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimePeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_bireportgenerator_proto_enumTypes[3].Descriptor()
}

func (TimePeriod) Type() protoreflect.EnumType {
	return &file_api_commons_bireportgenerator_proto_enumTypes[3]
}

func (x TimePeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimePeriod.Descriptor instead.
func (TimePeriod) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_bireportgenerator_proto_rawDescGZIP(), []int{3}
}

// DeliveryTimes is a message for the delivery times of a report.
type DeliveryTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// seconds after midnight when the report should be delivered.
	DeliveryTimes []int32 `protobuf:"varint,2,rep,packed,name=delivery_times,json=deliveryTimes,proto3" json:"delivery_times,omitempty"`
	// repeat_frequency is the frequency of the report.
	RepeatFrequency RepeatFrequency `protobuf:"varint,3,opt,name=repeat_frequency,json=repeatFrequency,proto3,enum=api.commons.RepeatFrequency" json:"repeat_frequency,omitempty"`
}

func (x *DeliveryTimes) Reset() {
	*x = DeliveryTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_bireportgenerator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryTimes) ProtoMessage() {}

func (x *DeliveryTimes) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_bireportgenerator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryTimes.ProtoReflect.Descriptor instead.
func (*DeliveryTimes) Descriptor() ([]byte, []int) {
	return file_api_commons_bireportgenerator_proto_rawDescGZIP(), []int{0}
}

func (x *DeliveryTimes) GetDeliveryTimes() []int32 {
	if x != nil {
		return x.DeliveryTimes
	}
	return nil
}

func (x *DeliveryTimes) GetRepeatFrequency() RepeatFrequency {
	if x != nil {
		return x.RepeatFrequency
	}
	return RepeatFrequency_REPEAT_FREQUENCY_UNSPECIFIED
}

// DayOfWeekFilter filters the days of the week for a report.
type DayOfWeekFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// days_of_weeks is a list of days of the week.
	DaysOfWeeks []Weekday_Enum `protobuf:"varint,1,rep,packed,name=days_of_weeks,json=daysOfWeeks,proto3,enum=api.commons.Weekday_Enum" json:"days_of_weeks,omitempty"`
	// weeks_of_months is a list of weeks of the month.
	WeeksOfMonths []int32 `protobuf:"varint,2,rep,packed,name=weeks_of_months,json=weeksOfMonths,proto3" json:"weeks_of_months,omitempty"`
}

func (x *DayOfWeekFilter) Reset() {
	*x = DayOfWeekFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_bireportgenerator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayOfWeekFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayOfWeekFilter) ProtoMessage() {}

func (x *DayOfWeekFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_bireportgenerator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayOfWeekFilter.ProtoReflect.Descriptor instead.
func (*DayOfWeekFilter) Descriptor() ([]byte, []int) {
	return file_api_commons_bireportgenerator_proto_rawDescGZIP(), []int{1}
}

func (x *DayOfWeekFilter) GetDaysOfWeeks() []Weekday_Enum {
	if x != nil {
		return x.DaysOfWeeks
	}
	return nil
}

func (x *DayOfWeekFilter) GetWeeksOfMonths() []int32 {
	if x != nil {
		return x.WeeksOfMonths
	}
	return nil
}

// DayOfMonthFilter filters the days of the month for a report.
type DayOfMonthFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// day_of_months is a list of days of the month.
	DayOfMonths []int32 `protobuf:"varint,1,rep,packed,name=day_of_months,json=dayOfMonths,proto3" json:"day_of_months,omitempty"`
	// is_last_day_of_month is a flag for the last day of the month.
	IsLastDayOfMonth bool `protobuf:"varint,2,opt,name=is_last_day_of_month,json=isLastDayOfMonth,proto3" json:"is_last_day_of_month,omitempty"`
}

func (x *DayOfMonthFilter) Reset() {
	*x = DayOfMonthFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_bireportgenerator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayOfMonthFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayOfMonthFilter) ProtoMessage() {}

func (x *DayOfMonthFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_bireportgenerator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayOfMonthFilter.ProtoReflect.Descriptor instead.
func (*DayOfMonthFilter) Descriptor() ([]byte, []int) {
	return file_api_commons_bireportgenerator_proto_rawDescGZIP(), []int{2}
}

func (x *DayOfMonthFilter) GetDayOfMonths() []int32 {
	if x != nil {
		return x.DayOfMonths
	}
	return nil
}

func (x *DayOfMonthFilter) GetIsLastDayOfMonth() bool {
	if x != nil {
		return x.IsLastDayOfMonth
	}
	return false
}

// DayFilter is used to specify days for a report to be delivered.
type DayFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the type of day filter.
	Type DayFilterType `protobuf:"varint,1,opt,name=type,proto3,enum=api.commons.DayFilterType" json:"type,omitempty"`
	// Types that are assignable to Filter:
	//
	//	*DayFilter_DayOfWeekFilter
	//	*DayFilter_DayOfMonthFilter
	Filter isDayFilter_Filter `protobuf_oneof:"filter"`
}

func (x *DayFilter) Reset() {
	*x = DayFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_bireportgenerator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayFilter) ProtoMessage() {}

func (x *DayFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_bireportgenerator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayFilter.ProtoReflect.Descriptor instead.
func (*DayFilter) Descriptor() ([]byte, []int) {
	return file_api_commons_bireportgenerator_proto_rawDescGZIP(), []int{3}
}

func (x *DayFilter) GetType() DayFilterType {
	if x != nil {
		return x.Type
	}
	return DayFilterType_DAY_FILTER_TYPE_UNSPECIFIED
}

func (m *DayFilter) GetFilter() isDayFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *DayFilter) GetDayOfWeekFilter() *DayOfWeekFilter {
	if x, ok := x.GetFilter().(*DayFilter_DayOfWeekFilter); ok {
		return x.DayOfWeekFilter
	}
	return nil
}

func (x *DayFilter) GetDayOfMonthFilter() *DayOfMonthFilter {
	if x, ok := x.GetFilter().(*DayFilter_DayOfMonthFilter); ok {
		return x.DayOfMonthFilter
	}
	return nil
}

type isDayFilter_Filter interface {
	isDayFilter_Filter()
}

type DayFilter_DayOfWeekFilter struct {
	// day_of_week_filter is the filter for days of the week.
	DayOfWeekFilter *DayOfWeekFilter `protobuf:"bytes,2,opt,name=day_of_week_filter,json=dayOfWeekFilter,proto3,oneof"`
}

type DayFilter_DayOfMonthFilter struct {
	// day_of_month_filter is the filter for days of the month.
	DayOfMonthFilter *DayOfMonthFilter `protobuf:"bytes,3,opt,name=day_of_month_filter,json=dayOfMonthFilter,proto3,oneof"`
}

func (*DayFilter_DayOfWeekFilter) isDayFilter_Filter() {}

func (*DayFilter_DayOfMonthFilter) isDayFilter_Filter() {}

// FormatOptions is a message for the format options of a report.
type FormatOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// report_format is the format of the report.
	ReportFormat ReportFormat `protobuf:"varint,1,opt,name=report_format,json=reportFormat,proto3,enum=api.commons.ReportFormat" json:"report_format,omitempty"`
	// filename_parts are the parts to build the filename.
	FilenameParts []string `protobuf:"bytes,2,rep,name=filename_parts,json=filenameParts,proto3" json:"filename_parts,omitempty"`
}

func (x *FormatOptions) Reset() {
	*x = FormatOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_bireportgenerator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatOptions) ProtoMessage() {}

func (x *FormatOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_bireportgenerator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatOptions.ProtoReflect.Descriptor instead.
func (*FormatOptions) Descriptor() ([]byte, []int) {
	return file_api_commons_bireportgenerator_proto_rawDescGZIP(), []int{4}
}

func (x *FormatOptions) GetReportFormat() ReportFormat {
	if x != nil {
		return x.ReportFormat
	}
	return ReportFormat_REPORT_FORMAT_UNSPECIFIED
}

func (x *FormatOptions) GetFilenameParts() []string {
	if x != nil {
		return x.FilenameParts
	}
	return nil
}

// DeliveryOptions is a message for the delivery options of a report.
type DeliveryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// transfer_config_sid is the transfer config sid to deliver the report.
	TransferConfigSid int64 `protobuf:"varint,1,opt,name=transfer_config_sid,json=transferConfigSid,proto3" json:"transfer_config_sid,omitempty"`
	// failure_notification_emails are the emails to notify on failure.
	//
	// Deprecated: Marked as deprecated in api/commons/bireportgenerator.proto.
	FailureNotificationEmails []string `protobuf:"bytes,2,rep,name=failure_notification_emails,json=failureNotificationEmails,proto3" json:"failure_notification_emails,omitempty"`
}

func (x *DeliveryOptions) Reset() {
	*x = DeliveryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_bireportgenerator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryOptions) ProtoMessage() {}

func (x *DeliveryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_bireportgenerator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryOptions.ProtoReflect.Descriptor instead.
func (*DeliveryOptions) Descriptor() ([]byte, []int) {
	return file_api_commons_bireportgenerator_proto_rawDescGZIP(), []int{5}
}

func (x *DeliveryOptions) GetTransferConfigSid() int64 {
	if x != nil {
		return x.TransferConfigSid
	}
	return 0
}

// Deprecated: Marked as deprecated in api/commons/bireportgenerator.proto.
func (x *DeliveryOptions) GetFailureNotificationEmails() []string {
	if x != nil {
		return x.FailureNotificationEmails
	}
	return nil
}

var File_api_commons_bireportgenerator_proto protoreflect.FileDescriptor

var file_api_commons_bireportgenerator_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x69,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7f, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x78, 0x0a, 0x0f,
	0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x0d, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x4f, 0x66,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x22, 0x66, 0x0a, 0x10, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x2e,
	0x0a, 0x14, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0xe2,
	0x01, 0x0a, 0x09, 0x44, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x12,
	0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57,
	0x65, 0x65, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x13, 0x64, 0x61, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x69, 0x64, 0x12,
	0x42, 0x0a, 0x1b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x19, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x73, 0x2a, 0x93, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x50, 0x45, 0x41,
	0x54, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x50,
	0x45, 0x41, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4f, 0x4e,
	0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x50, 0x45, 0x41,
	0x54, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x31, 0x35, 0x5f, 0x4d,
	0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x50, 0x45,
	0x41, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x33, 0x30, 0x5f,
	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x10, 0x03, 0x2a, 0x92, 0x01, 0x0a, 0x0d, 0x44, 0x61,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x44,
	0x41, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x44, 0x41, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44,
	0x41, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c,
	0x44, 0x41, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03, 0x2a, 0x44,
	0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d,
	0x0a, 0x19, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x43,
	0x53, 0x56, 0x10, 0x01, 0x2a, 0xac, 0x08, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x54, 0x4f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x48, 0x49, 0x53, 0x5f, 0x57, 0x45, 0x45, 0x4b,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x5f, 0x54, 0x48, 0x49, 0x53, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x48,
	0x49, 0x53, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x44, 0x41, 0x59,
	0x5f, 0x53, 0x4f, 0x5f, 0x46, 0x41, 0x52, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x54, 0x4f,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x54, 0x4f, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x5f, 0x59, 0x45, 0x53, 0x54, 0x45, 0x52, 0x44, 0x41, 0x59, 0x10, 0x09, 0x12,
	0x24, 0x0a, 0x20, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x44,
	0x41, 0x59, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x59, 0x45, 0x53, 0x54, 0x45, 0x52,
	0x44, 0x41, 0x59, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x48, 0x49, 0x53, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x4c, 0x41,
	0x53, 0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55,
	0x53, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53,
	0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x35, 0x5f, 0x4d,
	0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x30, 0x5f,
	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x5f,
	0x48, 0x4f, 0x55, 0x52, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x32, 0x5f, 0x48, 0x4f, 0x55,
	0x52, 0x53, 0x10, 0x12, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53,
	0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x34, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x14,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x36, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x15, 0x12, 0x1d,
	0x0a, 0x19, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41,
	0x53, 0x54, 0x5f, 0x31, 0x32, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x16, 0x12, 0x1d, 0x0a,
	0x19, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x5f, 0x32, 0x34, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x32, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x5f,
	0x44, 0x41, 0x59, 0x53, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x37, 0x5f, 0x44, 0x41, 0x59,
	0x53, 0x10, 0x1a, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x32, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x53, 0x10,
	0x1b, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x1c, 0x12,
	0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x36, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x1d, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x5f, 0x39, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x1e, 0x12, 0x1d, 0x0a, 0x19, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x36, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53, 0x10, 0x1f, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x31,
	0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x20, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x32, 0x5f, 0x59, 0x45,
	0x41, 0x52, 0x53, 0x10, 0x21, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x35, 0x5f, 0x59, 0x45, 0x41, 0x52,
	0x53, 0x10, 0x22, 0x42, 0x9e, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x42, 0x16, 0x42, 0x69, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63,
	0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x58, 0xaa,
	0x02, 0x0b, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xca, 0x02, 0x0b,
	0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xe2, 0x02, 0x17, 0x41, 0x70,
	0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_bireportgenerator_proto_rawDescOnce sync.Once
	file_api_commons_bireportgenerator_proto_rawDescData = file_api_commons_bireportgenerator_proto_rawDesc
)

func file_api_commons_bireportgenerator_proto_rawDescGZIP() []byte {
	file_api_commons_bireportgenerator_proto_rawDescOnce.Do(func() {
		file_api_commons_bireportgenerator_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_bireportgenerator_proto_rawDescData)
	})
	return file_api_commons_bireportgenerator_proto_rawDescData
}

var file_api_commons_bireportgenerator_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_api_commons_bireportgenerator_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_api_commons_bireportgenerator_proto_goTypes = []interface{}{
	(RepeatFrequency)(0),     // 0: api.commons.RepeatFrequency
	(DayFilterType)(0),       // 1: api.commons.DayFilterType
	(ReportFormat)(0),        // 2: api.commons.ReportFormat
	(TimePeriod)(0),          // 3: api.commons.TimePeriod
	(*DeliveryTimes)(nil),    // 4: api.commons.DeliveryTimes
	(*DayOfWeekFilter)(nil),  // 5: api.commons.DayOfWeekFilter
	(*DayOfMonthFilter)(nil), // 6: api.commons.DayOfMonthFilter
	(*DayFilter)(nil),        // 7: api.commons.DayFilter
	(*FormatOptions)(nil),    // 8: api.commons.FormatOptions
	(*DeliveryOptions)(nil),  // 9: api.commons.DeliveryOptions
	(Weekday_Enum)(0),        // 10: api.commons.Weekday.Enum
}
var file_api_commons_bireportgenerator_proto_depIdxs = []int32{
	0,  // 0: api.commons.DeliveryTimes.repeat_frequency:type_name -> api.commons.RepeatFrequency
	10, // 1: api.commons.DayOfWeekFilter.days_of_weeks:type_name -> api.commons.Weekday.Enum
	1,  // 2: api.commons.DayFilter.type:type_name -> api.commons.DayFilterType
	5,  // 3: api.commons.DayFilter.day_of_week_filter:type_name -> api.commons.DayOfWeekFilter
	6,  // 4: api.commons.DayFilter.day_of_month_filter:type_name -> api.commons.DayOfMonthFilter
	2,  // 5: api.commons.FormatOptions.report_format:type_name -> api.commons.ReportFormat
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_api_commons_bireportgenerator_proto_init() }
func file_api_commons_bireportgenerator_proto_init() {
	if File_api_commons_bireportgenerator_proto != nil {
		return
	}
	file_api_commons_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_commons_bireportgenerator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_bireportgenerator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DayOfWeekFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_bireportgenerator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DayOfMonthFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_bireportgenerator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DayFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_bireportgenerator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_bireportgenerator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_commons_bireportgenerator_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*DayFilter_DayOfWeekFilter)(nil),
		(*DayFilter_DayOfMonthFilter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_bireportgenerator_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_bireportgenerator_proto_goTypes,
		DependencyIndexes: file_api_commons_bireportgenerator_proto_depIdxs,
		EnumInfos:         file_api_commons_bireportgenerator_proto_enumTypes,
		MessageInfos:      file_api_commons_bireportgenerator_proto_msgTypes,
	}.Build()
	File_api_commons_bireportgenerator_proto = out.File
	file_api_commons_bireportgenerator_proto_rawDesc = nil
	file_api_commons_bireportgenerator_proto_goTypes = nil
	file_api_commons_bireportgenerator_proto_depIdxs = nil
}
