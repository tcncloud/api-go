// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        (unknown)
// source: api/commons/compliance.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Verb int32

const (
	Verb_V_UNKNOWN  Verb = 0
	Verb_V_ALLOW    Verb = 1
	Verb_V_DENY     Verb = 2
	Verb_V_SCRUB    Verb = 3
	Verb_V_OVERRIDE Verb = 4
)

// Enum value maps for Verb.
var (
	Verb_name = map[int32]string{
		0: "V_UNKNOWN",
		1: "V_ALLOW",
		2: "V_DENY",
		3: "V_SCRUB",
		4: "V_OVERRIDE",
	}
	Verb_value = map[string]int32{
		"V_UNKNOWN":  0,
		"V_ALLOW":    1,
		"V_DENY":     2,
		"V_SCRUB":    3,
		"V_OVERRIDE": 4,
	}
)

func (x Verb) Enum() *Verb {
	p := new(Verb)
	*p = x
	return p
}

func (x Verb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Verb) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_compliance_proto_enumTypes[0].Descriptor()
}

func (Verb) Type() protoreflect.EnumType {
	return &file_api_commons_compliance_proto_enumTypes[0]
}

func (x Verb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Verb.Descriptor instead.
func (Verb) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{0}
}

type Entity int32

const (
	Entity_E_UNKNOWN  Entity = 0
	Entity_E_CALL     Entity = 1
	Entity_E_EMAIL    Entity = 2
	Entity_E_SMS      Entity = 3
	Entity_E_WHATSAPP Entity = 4
)

// Enum value maps for Entity.
var (
	Entity_name = map[int32]string{
		0: "E_UNKNOWN",
		1: "E_CALL",
		2: "E_EMAIL",
		3: "E_SMS",
		4: "E_WHATSAPP",
	}
	Entity_value = map[string]int32{
		"E_UNKNOWN":  0,
		"E_CALL":     1,
		"E_EMAIL":    2,
		"E_SMS":      3,
		"E_WHATSAPP": 4,
	}
)

func (x Entity) Enum() *Entity {
	p := new(Entity)
	*p = x
	return p
}

func (x Entity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Entity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_compliance_proto_enumTypes[1].Descriptor()
}

func (Entity) Type() protoreflect.EnumType {
	return &file_api_commons_compliance_proto_enumTypes[1]
}

func (x Entity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Entity.Descriptor instead.
func (Entity) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{1}
}

type SubEntity int32

const (
	SubEntity_SE_ALL       SubEntity = 0
	SubEntity_SE_INBOUND   SubEntity = 1
	SubEntity_SE_OUTBOUND  SubEntity = 2
	SubEntity_SE_MANUAL    SubEntity = 3
	SubEntity_SE_PREVIEW   SubEntity = 4
	SubEntity_SE_MAC       SubEntity = 5
	SubEntity_SE_BROADCAST SubEntity = 6
)

// Enum value maps for SubEntity.
var (
	SubEntity_name = map[int32]string{
		0: "SE_ALL",
		1: "SE_INBOUND",
		2: "SE_OUTBOUND",
		3: "SE_MANUAL",
		4: "SE_PREVIEW",
		5: "SE_MAC",
		6: "SE_BROADCAST",
	}
	SubEntity_value = map[string]int32{
		"SE_ALL":       0,
		"SE_INBOUND":   1,
		"SE_OUTBOUND":  2,
		"SE_MANUAL":    3,
		"SE_PREVIEW":   4,
		"SE_MAC":       5,
		"SE_BROADCAST": 6,
	}
)

func (x SubEntity) Enum() *SubEntity {
	p := new(SubEntity)
	*p = x
	return p
}

func (x SubEntity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubEntity) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_compliance_proto_enumTypes[2].Descriptor()
}

func (SubEntity) Type() protoreflect.EnumType {
	return &file_api_commons_compliance_proto_enumTypes[2]
}

func (x SubEntity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubEntity.Descriptor instead.
func (SubEntity) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{2}
}

type PhoneType int32

const (
	PhoneType_CELL      PhoneType = 0
	PhoneType_LAND      PhoneType = 1
	PhoneType_TOLL_FREE PhoneType = 2
)

// Enum value maps for PhoneType.
var (
	PhoneType_name = map[int32]string{
		0: "CELL",
		1: "LAND",
		2: "TOLL_FREE",
	}
	PhoneType_value = map[string]int32{
		"CELL":      0,
		"LAND":      1,
		"TOLL_FREE": 2,
	}
)

func (x PhoneType) Enum() *PhoneType {
	p := new(PhoneType)
	*p = x
	return p
}

func (x PhoneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_compliance_proto_enumTypes[3].Descriptor()
}

func (PhoneType) Type() protoreflect.EnumType {
	return &file_api_commons_compliance_proto_enumTypes[3]
}

func (x PhoneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhoneType.Descriptor instead.
func (PhoneType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{3}
}

type ContentType int32

const (
	ContentType_CT_PHONE_NUMBER   ContentType = 0
	ContentType_CT_EMAIL          ContentType = 1
	ContentType_CT_SMS            ContentType = 2
	ContentType_CT_OTHER          ContentType = 3
	ContentType_CT_ACCOUNT_NUMBER ContentType = 4
	ContentType_CT_WHATSAPP       ContentType = 5
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0: "CT_PHONE_NUMBER",
		1: "CT_EMAIL",
		2: "CT_SMS",
		3: "CT_OTHER",
		4: "CT_ACCOUNT_NUMBER",
		5: "CT_WHATSAPP",
	}
	ContentType_value = map[string]int32{
		"CT_PHONE_NUMBER":   0,
		"CT_EMAIL":          1,
		"CT_SMS":            2,
		"CT_OTHER":          3,
		"CT_ACCOUNT_NUMBER": 4,
		"CT_WHATSAPP":       5,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_compliance_proto_enumTypes[4].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_api_commons_compliance_proto_enumTypes[4]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{4}
}

type Channel int32

const (
	Channel_CHANNEL_CALL     Channel = 0
	Channel_CHANNEL_EMAIL    Channel = 1
	Channel_CHANNEL_SMS      Channel = 2
	Channel_CHANNEL_WHATSAPP Channel = 3
)

// Enum value maps for Channel.
var (
	Channel_name = map[int32]string{
		0: "CHANNEL_CALL",
		1: "CHANNEL_EMAIL",
		2: "CHANNEL_SMS",
		3: "CHANNEL_WHATSAPP",
	}
	Channel_value = map[string]int32{
		"CHANNEL_CALL":     0,
		"CHANNEL_EMAIL":    1,
		"CHANNEL_SMS":      2,
		"CHANNEL_WHATSAPP": 3,
	}
)

func (x Channel) Enum() *Channel {
	p := new(Channel)
	*p = x
	return p
}

func (x Channel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Channel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_compliance_proto_enumTypes[5].Descriptor()
}

func (Channel) Type() protoreflect.EnumType {
	return &file_api_commons_compliance_proto_enumTypes[5]
}

func (x Channel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Channel.Descriptor instead.
func (Channel) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{5}
}

type PluginType int32

const (
	PluginType_UNKNOWN_PLUGIN PluginType = 0
	PluginType_GRYPHON        PluginType = 1
	PluginType_TCN_CONSENT    PluginType = 2
	PluginType_RND            PluginType = 3
	PluginType_MRS_COMPLIANCE PluginType = 4
)

// Enum value maps for PluginType.
var (
	PluginType_name = map[int32]string{
		0: "UNKNOWN_PLUGIN",
		1: "GRYPHON",
		2: "TCN_CONSENT",
		3: "RND",
		4: "MRS_COMPLIANCE",
	}
	PluginType_value = map[string]int32{
		"UNKNOWN_PLUGIN": 0,
		"GRYPHON":        1,
		"TCN_CONSENT":    2,
		"RND":            3,
		"MRS_COMPLIANCE": 4,
	}
)

func (x PluginType) Enum() *PluginType {
	p := new(PluginType)
	*p = x
	return p
}

func (x PluginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_compliance_proto_enumTypes[6].Descriptor()
}

func (PluginType) Type() protoreflect.EnumType {
	return &file_api_commons_compliance_proto_enumTypes[6]
}

func (x PluginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginType.Descriptor instead.
func (PluginType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{6}
}

type Environment int32

const (
	Environment_INVALID_ENV Environment = 0
	Environment_TEST        Environment = 1
	Environment_PRODUCTION  Environment = 2
)

// Enum value maps for Environment.
var (
	Environment_name = map[int32]string{
		0: "INVALID_ENV",
		1: "TEST",
		2: "PRODUCTION",
	}
	Environment_value = map[string]int32{
		"INVALID_ENV": 0,
		"TEST":        1,
		"PRODUCTION":  2,
	}
)

func (x Environment) Enum() *Environment {
	p := new(Environment)
	*p = x
	return p
}

func (x Environment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Environment) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_compliance_proto_enumTypes[7].Descriptor()
}

func (Environment) Type() protoreflect.EnumType {
	return &file_api_commons_compliance_proto_enumTypes[7]
}

func (x Environment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Environment.Descriptor instead.
func (Environment) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{7}
}

type ConsentAbsentAction int32

const (
	ConsentAbsentAction_CONSENT_ABSENT_ACTION_ALLOW ConsentAbsentAction = 0
	ConsentAbsentAction_CONSENT_ABSENT_ACTION_DENY  ConsentAbsentAction = 1
)

// Enum value maps for ConsentAbsentAction.
var (
	ConsentAbsentAction_name = map[int32]string{
		0: "CONSENT_ABSENT_ACTION_ALLOW",
		1: "CONSENT_ABSENT_ACTION_DENY",
	}
	ConsentAbsentAction_value = map[string]int32{
		"CONSENT_ABSENT_ACTION_ALLOW": 0,
		"CONSENT_ABSENT_ACTION_DENY":  1,
	}
)

func (x ConsentAbsentAction) Enum() *ConsentAbsentAction {
	p := new(ConsentAbsentAction)
	*p = x
	return p
}

func (x ConsentAbsentAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentAbsentAction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_compliance_proto_enumTypes[8].Descriptor()
}

func (ConsentAbsentAction) Type() protoreflect.EnumType {
	return &file_api_commons_compliance_proto_enumTypes[8]
}

func (x ConsentAbsentAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentAbsentAction.Descriptor instead.
func (ConsentAbsentAction) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{8}
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verb      Verb        `protobuf:"varint,1,opt,name=verb,proto3,enum=api.commons.Verb" json:"verb,omitempty"`
	Entity    Entity      `protobuf:"varint,2,opt,name=entity,proto3,enum=api.commons.Entity" json:"entity,omitempty"`
	SubEntity SubEntity   `protobuf:"varint,3,opt,name=sub_entity,json=subEntity,proto3,enum=api.commons.SubEntity" json:"sub_entity,omitempty"`
	Selectors []*Selector `protobuf:"bytes,4,rep,name=selectors,proto3" json:"selectors,omitempty"`
	RuleText  string      `protobuf:"bytes,6,opt,name=rule_text,json=ruleText,proto3" json:"rule_text,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{0}
}

func (x *Rule) GetVerb() Verb {
	if x != nil {
		return x.Verb
	}
	return Verb_V_UNKNOWN
}

func (x *Rule) GetEntity() Entity {
	if x != nil {
		return x.Entity
	}
	return Entity_E_UNKNOWN
}

func (x *Rule) GetSubEntity() SubEntity {
	if x != nil {
		return x.SubEntity
	}
	return SubEntity_SE_ALL
}

func (x *Rule) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

func (x *Rule) GetRuleText() string {
	if x != nil {
		return x.RuleText
	}
	return ""
}

type Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SelectionRule:
	//
	//	*Selector_Time
	//	*Selector_Week
	//	*Selector_Dncl
	//	*Selector_Frequency
	//	*Selector_Location
	//	*Selector_PhoneType
	//	*Selector_Month
	//	*Selector_Date
	//	*Selector_Holiday
	//	*Selector_Meta
	//	*Selector_Plugin
	SelectionRule isSelector_SelectionRule `protobuf_oneof:"selection_rule"`
}

func (x *Selector) Reset() {
	*x = Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{1}
}

func (m *Selector) GetSelectionRule() isSelector_SelectionRule {
	if m != nil {
		return m.SelectionRule
	}
	return nil
}

func (x *Selector) GetTime() *TimeExp {
	if x, ok := x.GetSelectionRule().(*Selector_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Selector) GetWeek() *WeekdayExp {
	if x, ok := x.GetSelectionRule().(*Selector_Week); ok {
		return x.Week
	}
	return nil
}

func (x *Selector) GetDncl() *DnclExp {
	if x, ok := x.GetSelectionRule().(*Selector_Dncl); ok {
		return x.Dncl
	}
	return nil
}

func (x *Selector) GetFrequency() *FrequencyExp {
	if x, ok := x.GetSelectionRule().(*Selector_Frequency); ok {
		return x.Frequency
	}
	return nil
}

func (x *Selector) GetLocation() *LocationExp {
	if x, ok := x.GetSelectionRule().(*Selector_Location); ok {
		return x.Location
	}
	return nil
}

func (x *Selector) GetPhoneType() *PhoneTypeExp {
	if x, ok := x.GetSelectionRule().(*Selector_PhoneType); ok {
		return x.PhoneType
	}
	return nil
}

func (x *Selector) GetMonth() *MonthExp {
	if x, ok := x.GetSelectionRule().(*Selector_Month); ok {
		return x.Month
	}
	return nil
}

func (x *Selector) GetDate() *DateExp {
	if x, ok := x.GetSelectionRule().(*Selector_Date); ok {
		return x.Date
	}
	return nil
}

func (x *Selector) GetHoliday() *HolidayExp {
	if x, ok := x.GetSelectionRule().(*Selector_Holiday); ok {
		return x.Holiday
	}
	return nil
}

func (x *Selector) GetMeta() *MetaFieldExp {
	if x, ok := x.GetSelectionRule().(*Selector_Meta); ok {
		return x.Meta
	}
	return nil
}

func (x *Selector) GetPlugin() *PluginExp {
	if x, ok := x.GetSelectionRule().(*Selector_Plugin); ok {
		return x.Plugin
	}
	return nil
}

type isSelector_SelectionRule interface {
	isSelector_SelectionRule()
}

type Selector_Time struct {
	Time *TimeExp `protobuf:"bytes,1,opt,name=time,proto3,oneof"`
}

type Selector_Week struct {
	Week *WeekdayExp `protobuf:"bytes,2,opt,name=week,proto3,oneof"`
}

type Selector_Dncl struct {
	Dncl *DnclExp `protobuf:"bytes,3,opt,name=dncl,proto3,oneof"`
}

type Selector_Frequency struct {
	Frequency *FrequencyExp `protobuf:"bytes,4,opt,name=frequency,proto3,oneof"`
}

type Selector_Location struct {
	Location *LocationExp `protobuf:"bytes,5,opt,name=location,proto3,oneof"`
}

type Selector_PhoneType struct {
	PhoneType *PhoneTypeExp `protobuf:"bytes,6,opt,name=phone_type,json=phoneType,proto3,oneof"`
}

type Selector_Month struct {
	Month *MonthExp `protobuf:"bytes,7,opt,name=month,proto3,oneof"`
}

type Selector_Date struct {
	Date *DateExp `protobuf:"bytes,8,opt,name=date,proto3,oneof"`
}

type Selector_Holiday struct {
	Holiday *HolidayExp `protobuf:"bytes,9,opt,name=holiday,proto3,oneof"`
}

type Selector_Meta struct {
	Meta *MetaFieldExp `protobuf:"bytes,10,opt,name=meta,proto3,oneof"`
}

type Selector_Plugin struct {
	Plugin *PluginExp `protobuf:"bytes,11,opt,name=plugin,proto3,oneof"`
}

func (*Selector_Time) isSelector_SelectionRule() {}

func (*Selector_Week) isSelector_SelectionRule() {}

func (*Selector_Dncl) isSelector_SelectionRule() {}

func (*Selector_Frequency) isSelector_SelectionRule() {}

func (*Selector_Location) isSelector_SelectionRule() {}

func (*Selector_PhoneType) isSelector_SelectionRule() {}

func (*Selector_Month) isSelector_SelectionRule() {}

func (*Selector_Date) isSelector_SelectionRule() {}

func (*Selector_Holiday) isSelector_SelectionRule() {}

func (*Selector_Meta) isSelector_SelectionRule() {}

func (*Selector_Plugin) isSelector_SelectionRule() {}

type TimeExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHour string `protobuf:"bytes,1,opt,name=start_hour,json=startHour,proto3" json:"start_hour,omitempty"`
	EndHour   string `protobuf:"bytes,2,opt,name=end_hour,json=endHour,proto3" json:"end_hour,omitempty"`
}

func (x *TimeExp) Reset() {
	*x = TimeExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeExp) ProtoMessage() {}

func (x *TimeExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeExp.ProtoReflect.Descriptor instead.
func (*TimeExp) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{2}
}

func (x *TimeExp) GetStartHour() string {
	if x != nil {
		return x.StartHour
	}
	return ""
}

func (x *TimeExp) GetEndHour() string {
	if x != nil {
		return x.EndHour
	}
	return ""
}

type WeekdayExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day  Weekday_Enum `protobuf:"varint,1,opt,name=day,proto3,enum=api.commons.Weekday_Enum" json:"day,omitempty"`
	Text string       `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *WeekdayExp) Reset() {
	*x = WeekdayExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeekdayExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeekdayExp) ProtoMessage() {}

func (x *WeekdayExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeekdayExp.ProtoReflect.Descriptor instead.
func (*WeekdayExp) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{3}
}

func (x *WeekdayExp) GetDay() Weekday_Enum {
	if x != nil {
		return x.Day
	}
	return Weekday_SUNDAY
}

func (x *WeekdayExp) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type DnclExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListName   string         `protobuf:"bytes,1,opt,name=list_name,json=listName,proto3" json:"list_name,omitempty"`
	FieldNames *FieldNamesMod `protobuf:"bytes,2,opt,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
}

func (x *DnclExp) Reset() {
	*x = DnclExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnclExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnclExp) ProtoMessage() {}

func (x *DnclExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnclExp.ProtoReflect.Descriptor instead.
func (*DnclExp) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{4}
}

func (x *DnclExp) GetListName() string {
	if x != nil {
		return x.ListName
	}
	return ""
}

func (x *DnclExp) GetFieldNames() *FieldNamesMod {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

type FrequencyExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count            int64           `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`       // Maximum number of tries
	Duration         int64           `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"` // Measured in nanoseconds
	Results          *ResultsMod     `protobuf:"bytes,3,opt,name=results,proto3" json:"results,omitempty"`
	Dispositions     *DispositionMod `protobuf:"bytes,4,opt,name=dispositions,proto3" json:"dispositions,omitempty"`
	FieldNames       *FieldNamesMod  `protobuf:"bytes,5,opt,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	CheckingEntities []*EntityExp    `protobuf:"bytes,6,rep,name=checking_entities,json=checkingEntities,proto3" json:"checking_entities,omitempty"`
	Matching         *MatchingMod    `protobuf:"bytes,7,opt,name=matching,proto3" json:"matching,omitempty"`
}

func (x *FrequencyExp) Reset() {
	*x = FrequencyExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyExp) ProtoMessage() {}

func (x *FrequencyExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyExp.ProtoReflect.Descriptor instead.
func (*FrequencyExp) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{5}
}

func (x *FrequencyExp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FrequencyExp) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *FrequencyExp) GetResults() *ResultsMod {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *FrequencyExp) GetDispositions() *DispositionMod {
	if x != nil {
		return x.Dispositions
	}
	return nil
}

func (x *FrequencyExp) GetFieldNames() *FieldNamesMod {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *FrequencyExp) GetCheckingEntities() []*EntityExp {
	if x != nil {
		return x.CheckingEntities
	}
	return nil
}

func (x *FrequencyExp) GetMatching() *MatchingMod {
	if x != nil {
		return x.Matching
	}
	return nil
}

type MatchingMod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And []*MatchingMod  `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	Or  []*MatchingMod  `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	Mod *MatchingEntity `protobuf:"bytes,3,opt,name=mod,proto3" json:"mod,omitempty"`
}

func (x *MatchingMod) Reset() {
	*x = MatchingMod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchingMod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingMod) ProtoMessage() {}

func (x *MatchingMod) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingMod.ProtoReflect.Descriptor instead.
func (*MatchingMod) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{6}
}

func (x *MatchingMod) GetAnd() []*MatchingMod {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *MatchingMod) GetOr() []*MatchingMod {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *MatchingMod) GetMod() *MatchingEntity {
	if x != nil {
		return x.Mod
	}
	return nil
}

type MatchingEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entity:
	//
	//	*MatchingEntity_Results
	//	*MatchingEntity_Dispositions
	Entity isMatchingEntity_Entity `protobuf_oneof:"entity"`
}

func (x *MatchingEntity) Reset() {
	*x = MatchingEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchingEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingEntity) ProtoMessage() {}

func (x *MatchingEntity) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingEntity.ProtoReflect.Descriptor instead.
func (*MatchingEntity) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{7}
}

func (m *MatchingEntity) GetEntity() isMatchingEntity_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (x *MatchingEntity) GetResults() *ResultsMod {
	if x, ok := x.GetEntity().(*MatchingEntity_Results); ok {
		return x.Results
	}
	return nil
}

func (x *MatchingEntity) GetDispositions() *DispositionMod {
	if x, ok := x.GetEntity().(*MatchingEntity_Dispositions); ok {
		return x.Dispositions
	}
	return nil
}

type isMatchingEntity_Entity interface {
	isMatchingEntity_Entity()
}

type MatchingEntity_Results struct {
	Results *ResultsMod `protobuf:"bytes,1,opt,name=results,proto3,oneof"`
}

type MatchingEntity_Dispositions struct {
	Dispositions *DispositionMod `protobuf:"bytes,2,opt,name=dispositions,proto3,oneof"`
}

func (*MatchingEntity_Results) isMatchingEntity_Entity() {}

func (*MatchingEntity_Dispositions) isMatchingEntity_Entity() {}

type LocationExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country     string   `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	State       string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	County      string   `protobuf:"bytes,3,opt,name=county,proto3" json:"county,omitempty"`
	City        string   `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Province    string   `protobuf:"bytes,5,opt,name=province,proto3" json:"province,omitempty"`
	PostalCodes []string `protobuf:"bytes,6,rep,name=postal_codes,json=postalCodes,proto3" json:"postal_codes,omitempty"`
	AreaCodes   []string `protobuf:"bytes,7,rep,name=area_codes,json=areaCodes,proto3" json:"area_codes,omitempty"`
}

func (x *LocationExp) Reset() {
	*x = LocationExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationExp) ProtoMessage() {}

func (x *LocationExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationExp.ProtoReflect.Descriptor instead.
func (*LocationExp) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{8}
}

func (x *LocationExp) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *LocationExp) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *LocationExp) GetCounty() string {
	if x != nil {
		return x.County
	}
	return ""
}

func (x *LocationExp) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *LocationExp) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *LocationExp) GetPostalCodes() []string {
	if x != nil {
		return x.PostalCodes
	}
	return nil
}

func (x *LocationExp) GetAreaCodes() []string {
	if x != nil {
		return x.AreaCodes
	}
	return nil
}

type PhoneTypeExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneType PhoneType `protobuf:"varint,1,opt,name=phone_type,json=phoneType,proto3,enum=api.commons.PhoneType" json:"phone_type,omitempty"`
}

func (x *PhoneTypeExp) Reset() {
	*x = PhoneTypeExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneTypeExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneTypeExp) ProtoMessage() {}

func (x *PhoneTypeExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneTypeExp.ProtoReflect.Descriptor instead.
func (*PhoneTypeExp) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{9}
}

func (x *PhoneTypeExp) GetPhoneType() PhoneType {
	if x != nil {
		return x.PhoneType
	}
	return PhoneType_CELL
}

type MonthExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month Month  `protobuf:"varint,1,opt,name=month,proto3,enum=api.commons.Month" json:"month,omitempty"`
	Text  string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MonthExp) Reset() {
	*x = MonthExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthExp) ProtoMessage() {}

func (x *MonthExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthExp.ProtoReflect.Descriptor instead.
func (*MonthExp) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{10}
}

func (x *MonthExp) GetMonth() Month {
	if x != nil {
		return x.Month
	}
	return Month_MONTH_JANUARY
}

func (x *MonthExp) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type DateExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month Month `protobuf:"varint,1,opt,name=month,proto3,enum=api.commons.Month" json:"month,omitempty"`
	Day   int64 `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	Year  int64 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
}

func (x *DateExp) Reset() {
	*x = DateExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateExp) ProtoMessage() {}

func (x *DateExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateExp.ProtoReflect.Descriptor instead.
func (*DateExp) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{11}
}

func (x *DateExp) GetMonth() Month {
	if x != nil {
		return x.Month
	}
	return Month_MONTH_JANUARY
}

func (x *DateExp) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *DateExp) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

type HolidayExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *HolidayExp) Reset() {
	*x = HolidayExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HolidayExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HolidayExp) ProtoMessage() {}

func (x *HolidayExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HolidayExp.ProtoReflect.Descriptor instead.
func (*HolidayExp) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{12}
}

func (x *HolidayExp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HolidayExp) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *HolidayExp) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type MetaFieldExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *MetaFieldExp) Reset() {
	*x = MetaFieldExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaFieldExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaFieldExp) ProtoMessage() {}

func (x *MetaFieldExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaFieldExp.ProtoReflect.Descriptor instead.
func (*MetaFieldExp) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{13}
}

func (x *MetaFieldExp) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type PluginExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      PluginType `protobuf:"varint,1,opt,name=type,proto3,enum=api.commons.PluginType" json:"type,omitempty"`
	TcnStrict bool       `protobuf:"varint,4,opt,name=tcn_strict,json=tcnStrict,proto3" json:"tcn_strict,omitempty"` // true/false deny on errors
	// gryphon
	LicenseId    string      `protobuf:"bytes,2,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
	ReferenceKey string      `protobuf:"bytes,3,opt,name=reference_key,json=referenceKey,proto3" json:"reference_key,omitempty"`
	FromNumber   string      `protobuf:"bytes,5,opt,name=from_number,json=fromNumber,proto3" json:"from_number,omitempty"`
	Env          Environment `protobuf:"varint,6,opt,name=env,proto3,enum=api.commons.Environment" json:"env,omitempty"`
	// tcn_consent
	ProfileName  string              `protobuf:"bytes,7,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	ContentField string              `protobuf:"bytes,8,opt,name=content_field,json=contentField,proto3" json:"content_field,omitempty"`
	Topic        string              `protobuf:"bytes,9,opt,name=topic,proto3" json:"topic,omitempty"`
	AbsentAction ConsentAbsentAction `protobuf:"varint,11,opt,name=absent_action,json=absentAction,proto3,enum=api.commons.ConsentAbsentAction" json:"absent_action,omitempty"`
	// rnd
	DateLastContact string `protobuf:"bytes,10,opt,name=date_last_contact,json=dateLastContact,proto3" json:"date_last_contact,omitempty"`
	// mrs compliance
	Lu      string `protobuf:"bytes,12,opt,name=lu,proto3" json:"lu,omitempty"`
	Account string `protobuf:"bytes,13,opt,name=account,proto3" json:"account,omitempty"`
	Master  string `protobuf:"bytes,14,opt,name=master,proto3" json:"master,omitempty"`
	Client  string `protobuf:"bytes,15,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *PluginExp) Reset() {
	*x = PluginExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginExp) ProtoMessage() {}

func (x *PluginExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginExp.ProtoReflect.Descriptor instead.
func (*PluginExp) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{14}
}

func (x *PluginExp) GetType() PluginType {
	if x != nil {
		return x.Type
	}
	return PluginType_UNKNOWN_PLUGIN
}

func (x *PluginExp) GetTcnStrict() bool {
	if x != nil {
		return x.TcnStrict
	}
	return false
}

func (x *PluginExp) GetLicenseId() string {
	if x != nil {
		return x.LicenseId
	}
	return ""
}

func (x *PluginExp) GetReferenceKey() string {
	if x != nil {
		return x.ReferenceKey
	}
	return ""
}

func (x *PluginExp) GetFromNumber() string {
	if x != nil {
		return x.FromNumber
	}
	return ""
}

func (x *PluginExp) GetEnv() Environment {
	if x != nil {
		return x.Env
	}
	return Environment_INVALID_ENV
}

func (x *PluginExp) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *PluginExp) GetContentField() string {
	if x != nil {
		return x.ContentField
	}
	return ""
}

func (x *PluginExp) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PluginExp) GetAbsentAction() ConsentAbsentAction {
	if x != nil {
		return x.AbsentAction
	}
	return ConsentAbsentAction_CONSENT_ABSENT_ACTION_ALLOW
}

func (x *PluginExp) GetDateLastContact() string {
	if x != nil {
		return x.DateLastContact
	}
	return ""
}

func (x *PluginExp) GetLu() string {
	if x != nil {
		return x.Lu
	}
	return ""
}

func (x *PluginExp) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PluginExp) GetMaster() string {
	if x != nil {
		return x.Master
	}
	return ""
}

func (x *PluginExp) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

type EntityExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubEntity SubEntity `protobuf:"varint,1,opt,name=sub_entity,json=subEntity,proto3,enum=api.commons.SubEntity" json:"sub_entity,omitempty"`
	Entity    Entity    `protobuf:"varint,2,opt,name=entity,proto3,enum=api.commons.Entity" json:"entity,omitempty"`
}

func (x *EntityExp) Reset() {
	*x = EntityExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityExp) ProtoMessage() {}

func (x *EntityExp) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityExp.ProtoReflect.Descriptor instead.
func (*EntityExp) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{15}
}

func (x *EntityExp) GetSubEntity() SubEntity {
	if x != nil {
		return x.SubEntity
	}
	return SubEntity_SE_ALL
}

func (x *EntityExp) GetEntity() Entity {
	if x != nil {
		return x.Entity
	}
	return Entity_E_UNKNOWN
}

type FieldNamesMod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldNames []*Field `protobuf:"bytes,1,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
}

func (x *FieldNamesMod) Reset() {
	*x = FieldNamesMod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldNamesMod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldNamesMod) ProtoMessage() {}

func (x *FieldNamesMod) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldNamesMod.ProtoReflect.Descriptor instead.
func (*FieldNamesMod) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{16}
}

func (x *FieldNamesMod) GetFieldNames() []*Field {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

type ResultsMod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []string `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ResultsMod) Reset() {
	*x = ResultsMod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultsMod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsMod) ProtoMessage() {}

func (x *ResultsMod) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsMod.ProtoReflect.Descriptor instead.
func (*ResultsMod) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{17}
}

func (x *ResultsMod) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

type DispositionMod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dispositions []*DispositionField `protobuf:"bytes,1,rep,name=dispositions,proto3" json:"dispositions,omitempty"`
}

func (x *DispositionMod) Reset() {
	*x = DispositionMod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispositionMod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispositionMod) ProtoMessage() {}

func (x *DispositionMod) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispositionMod.ProtoReflect.Descriptor instead.
func (*DispositionMod) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{18}
}

func (x *DispositionMod) GetDispositions() []*DispositionField {
	if x != nil {
		return x.Dispositions
	}
	return nil
}

type DispositionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string             `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Pairs []*DispositionPair `protobuf:"bytes,3,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *DispositionField) Reset() {
	*x = DispositionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispositionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispositionField) ProtoMessage() {}

func (x *DispositionField) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispositionField.ProtoReflect.Descriptor instead.
func (*DispositionField) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{19}
}

func (x *DispositionField) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DispositionField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DispositionField) GetPairs() []*DispositionPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type DispositionPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DispositionPair) Reset() {
	*x = DispositionPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispositionPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispositionPair) ProtoMessage() {}

func (x *DispositionPair) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispositionPair.ProtoReflect.Descriptor instead.
func (*DispositionPair) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{20}
}

func (x *DispositionPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DispositionPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field   string `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{21}
}

func (x *Field) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Field) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// ConsentCondition defines conditions
// required for a consent to take affect
type ConsentCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Condition id
	ConsentConditionId int64 `protobuf:"varint,1,opt,name=consent_condition_id,json=consentConditionId,proto3" json:"consent_condition_id,omitempty"`
	// Consent it belongs to
	ConsentId int64 `protobuf:"varint,2,opt,name=consent_id,json=consentId,proto3" json:"consent_id,omitempty"`
	// Days of week the condition is applicable to
	DaysOfTheWeek []Weekday_Enum `protobuf:"varint,10,rep,packed,name=days_of_the_week,json=daysOfTheWeek,proto3,enum=api.commons.Weekday_Enum" json:"days_of_the_week,omitempty"`
	// Time of day condition starts
	TimeOfDayFrom string `protobuf:"bytes,11,opt,name=time_of_day_from,json=timeOfDayFrom,proto3" json:"time_of_day_from,omitempty"`
	// Time of day condition ends
	TimeOfDayTo string `protobuf:"bytes,12,opt,name=time_of_day_to,json=timeOfDayTo,proto3" json:"time_of_day_to,omitempty"`
	// Date condition starts
	FromDate *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	// Date condition ends
	ToDate *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
}

func (x *ConsentCondition) Reset() {
	*x = ConsentCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentCondition) ProtoMessage() {}

func (x *ConsentCondition) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentCondition.ProtoReflect.Descriptor instead.
func (*ConsentCondition) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{22}
}

func (x *ConsentCondition) GetConsentConditionId() int64 {
	if x != nil {
		return x.ConsentConditionId
	}
	return 0
}

func (x *ConsentCondition) GetConsentId() int64 {
	if x != nil {
		return x.ConsentId
	}
	return 0
}

func (x *ConsentCondition) GetDaysOfTheWeek() []Weekday_Enum {
	if x != nil {
		return x.DaysOfTheWeek
	}
	return nil
}

func (x *ConsentCondition) GetTimeOfDayFrom() string {
	if x != nil {
		return x.TimeOfDayFrom
	}
	return ""
}

func (x *ConsentCondition) GetTimeOfDayTo() string {
	if x != nil {
		return x.TimeOfDayTo
	}
	return ""
}

func (x *ConsentCondition) GetFromDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *ConsentCondition) GetToDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

type ScenarioData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommType    *CommType `protobuf:"bytes,1,opt,name=comm_type,json=commType,proto3" json:"comm_type,omitempty"`
	PhoneNumber string    `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Deprecated: Marked as deprecated in api/commons/compliance.proto.
	CountryCode       string                 `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Email             string                 `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	CallMetadata      map[string]string      `protobuf:"bytes,5,rep,name=call_metadata,json=callMetadata,proto3" json:"call_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TimeOfCall        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time_of_call,json=timeOfCall,proto3" json:"time_of_call,omitempty"`
	FrequencyCount    int64                  `protobuf:"varint,7,opt,name=frequency_count,json=frequencyCount,proto3" json:"frequency_count,omitempty"`
	FrequencyDuration int64                  `protobuf:"varint,8,opt,name=frequency_duration,json=frequencyDuration,proto3" json:"frequency_duration,omitempty"`
	DnclBlocks        bool                   `protobuf:"varint,9,opt,name=dncl_blocks,json=dnclBlocks,proto3" json:"dncl_blocks,omitempty"`
	Country           string                 `protobuf:"bytes,10,opt,name=country,proto3" json:"country,omitempty"`
	State             string                 `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	County            string                 `protobuf:"bytes,12,opt,name=county,proto3" json:"county,omitempty"`
	City              string                 `protobuf:"bytes,13,opt,name=city,proto3" json:"city,omitempty"`
	Province          string                 `protobuf:"bytes,14,opt,name=province,proto3" json:"province,omitempty"`
	PhoneType         PhoneType              `protobuf:"varint,15,opt,name=phone_type,json=phoneType,proto3,enum=api.commons.PhoneType" json:"phone_type,omitempty"`
	// time_zone uses the iana timezone format. Defaults to utc
	TimeZone        string       `protobuf:"bytes,16,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	Holidays        []string     `protobuf:"bytes,17,rep,name=holidays,proto3" json:"holidays,omitempty"`
	CountryCodeData *CountryCode `protobuf:"bytes,18,opt,name=country_code_data,json=countryCodeData,proto3" json:"country_code_data,omitempty"`
}

func (x *ScenarioData) Reset() {
	*x = ScenarioData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenarioData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioData) ProtoMessage() {}

func (x *ScenarioData) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioData.ProtoReflect.Descriptor instead.
func (*ScenarioData) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{23}
}

func (x *ScenarioData) GetCommType() *CommType {
	if x != nil {
		return x.CommType
	}
	return nil
}

func (x *ScenarioData) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

// Deprecated: Marked as deprecated in api/commons/compliance.proto.
func (x *ScenarioData) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *ScenarioData) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ScenarioData) GetCallMetadata() map[string]string {
	if x != nil {
		return x.CallMetadata
	}
	return nil
}

func (x *ScenarioData) GetTimeOfCall() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeOfCall
	}
	return nil
}

func (x *ScenarioData) GetFrequencyCount() int64 {
	if x != nil {
		return x.FrequencyCount
	}
	return 0
}

func (x *ScenarioData) GetFrequencyDuration() int64 {
	if x != nil {
		return x.FrequencyDuration
	}
	return 0
}

func (x *ScenarioData) GetDnclBlocks() bool {
	if x != nil {
		return x.DnclBlocks
	}
	return false
}

func (x *ScenarioData) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ScenarioData) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ScenarioData) GetCounty() string {
	if x != nil {
		return x.County
	}
	return ""
}

func (x *ScenarioData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ScenarioData) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ScenarioData) GetPhoneType() PhoneType {
	if x != nil {
		return x.PhoneType
	}
	return PhoneType_CELL
}

func (x *ScenarioData) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *ScenarioData) GetHolidays() []string {
	if x != nil {
		return x.Holidays
	}
	return nil
}

func (x *ScenarioData) GetCountryCodeData() *CountryCode {
	if x != nil {
		return x.CountryCodeData
	}
	return nil
}

type CountryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode int64  `protobuf:"varint,1,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	CountryName string `protobuf:"bytes,2,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	CountryId   string `protobuf:"bytes,3,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
}

func (x *CountryCode) Reset() {
	*x = CountryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryCode) ProtoMessage() {}

func (x *CountryCode) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryCode.ProtoReflect.Descriptor instead.
func (*CountryCode) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{24}
}

func (x *CountryCode) GetCountryCode() int64 {
	if x != nil {
		return x.CountryCode
	}
	return 0
}

func (x *CountryCode) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *CountryCode) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

type ScenarioResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassedValue          bool                    `protobuf:"varint,5,opt,name=passed_value,json=passedValue,proto3" json:"passed_value,omitempty"`
	ShouldAllowResponses []*ScenarioRuleResponse `protobuf:"bytes,2,rep,name=should_allow_responses,json=shouldAllowResponses,proto3" json:"should_allow_responses,omitempty"`
	ShouldDenyResponses  []*ScenarioRuleResponse `protobuf:"bytes,3,rep,name=should_deny_responses,json=shouldDenyResponses,proto3" json:"should_deny_responses,omitempty"`
	ScenarioName         string                  `protobuf:"bytes,4,opt,name=scenario_name,json=scenarioName,proto3" json:"scenario_name,omitempty"`
}

func (x *ScenarioResult) Reset() {
	*x = ScenarioResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenarioResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioResult) ProtoMessage() {}

func (x *ScenarioResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioResult.ProtoReflect.Descriptor instead.
func (*ScenarioResult) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{25}
}

func (x *ScenarioResult) GetPassedValue() bool {
	if x != nil {
		return x.PassedValue
	}
	return false
}

func (x *ScenarioResult) GetShouldAllowResponses() []*ScenarioRuleResponse {
	if x != nil {
		return x.ShouldAllowResponses
	}
	return nil
}

func (x *ScenarioResult) GetShouldDenyResponses() []*ScenarioRuleResponse {
	if x != nil {
		return x.ShouldDenyResponses
	}
	return nil
}

func (x *ScenarioResult) GetScenarioName() string {
	if x != nil {
		return x.ScenarioName
	}
	return ""
}

type ScenarioRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleText    string `protobuf:"bytes,1,opt,name=rule_text,json=ruleText,proto3" json:"rule_text,omitempty"`
	PermitValue bool   `protobuf:"varint,3,opt,name=permit_value,json=permitValue,proto3" json:"permit_value,omitempty"`
}

func (x *ScenarioRuleResponse) Reset() {
	*x = ScenarioRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenarioRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioRuleResponse) ProtoMessage() {}

func (x *ScenarioRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioRuleResponse.ProtoReflect.Descriptor instead.
func (*ScenarioRuleResponse) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{26}
}

func (x *ScenarioRuleResponse) GetRuleText() string {
	if x != nil {
		return x.RuleText
	}
	return ""
}

func (x *ScenarioRuleResponse) GetPermitValue() bool {
	if x != nil {
		return x.PermitValue
	}
	return false
}

// Scrub entry details information
type ScrubEntryDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// entry content (phone number, sms, email ...)
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// date when entry should expire
	ExpirationDate *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Notes          *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *ScrubEntryDetails) Reset() {
	*x = ScrubEntryDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrubEntryDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrubEntryDetails) ProtoMessage() {}

func (x *ScrubEntryDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrubEntryDetails.ProtoReflect.Descriptor instead.
func (*ScrubEntryDetails) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{27}
}

func (x *ScrubEntryDetails) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ScrubEntryDetails) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *ScrubEntryDetails) GetNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.Notes
	}
	return nil
}

type RuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the rule text
	RuleText string `protobuf:"bytes,1,opt,name=rule_text,json=ruleText,proto3" json:"rule_text,omitempty"`
	// indicates if the rule allowed or denied the request
	Permit bool `protobuf:"varint,2,opt,name=permit,proto3" json:"permit,omitempty"`
	// the response from the plugin
	PluginResponse string `protobuf:"bytes,3,opt,name=plugin_response,json=pluginResponse,proto3" json:"plugin_response,omitempty"`
}

func (x *RuleResponse) Reset() {
	*x = RuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_compliance_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleResponse) ProtoMessage() {}

func (x *RuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_compliance_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleResponse.ProtoReflect.Descriptor instead.
func (*RuleResponse) Descriptor() ([]byte, []int) {
	return file_api_commons_compliance_proto_rawDescGZIP(), []int{28}
}

func (x *RuleResponse) GetRuleText() string {
	if x != nil {
		return x.RuleText
	}
	return ""
}

func (x *RuleResponse) GetPermit() bool {
	if x != nil {
		return x.Permit
	}
	return false
}

func (x *RuleResponse) GetPluginResponse() string {
	if x != nil {
		return x.PluginResponse
	}
	return ""
}

var File_api_commons_compliance_proto protoreflect.FileDescriptor

var file_api_commons_compliance_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x25, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x62,
	0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0xc5, 0x04, 0x0a,
	0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x04,
	0x77, 0x65, 0x65, 0x6b, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x6e, 0x63, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x44, 0x6e, 0x63, 0x6c, 0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x04, 0x64, 0x6e, 0x63, 0x6c,
	0x12, 0x39, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x70, 0x48, 0x00,
	0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x78, 0x70, 0x48, 0x00, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x68, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x12,
	0x2f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x30, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x22, 0x43, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x22, 0x4d, 0x0a, 0x0a, 0x57, 0x65, 0x65,
	0x6b, 0x64, 0x61, 0x79, 0x45, 0x78, 0x70, 0x12, 0x2b, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x63, 0x0a, 0x07, 0x44, 0x6e, 0x63, 0x6c,
	0x45, 0x78, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4d, 0x6f,
	0x64, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xec, 0x02,
	0x0a, 0x0c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x4d, 0x6f, 0x64, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x43, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x45, 0x78, 0x70, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x92, 0x01, 0x0a,
	0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x03,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x52, 0x02,
	0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6d, 0x6f,
	0x64, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x48, 0x00,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xc7, 0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x45, 0x0a, 0x0c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x70,
	0x12, 0x35, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x08, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x45, 0x78, 0x70, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x59, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x12, 0x28, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x4e, 0x0a, 0x0a,
	0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x45, 0x78, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x24, 0x0a, 0x0c,
	0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x93, 0x04, 0x0a, 0x09, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x70,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x63, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x74, 0x63, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x45, 0x0a, 0x0d, 0x61,
	0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x6c, 0x75, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6c, 0x75, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x45, 0x78, 0x70, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x09, 0x73, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x44, 0x0a, 0x0d, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x26, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6e, 0x0a, 0x10,
	0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0x39, 0x0a, 0x0f,
	0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0xe3, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x10, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f,
	0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x57,
	0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x64, 0x61, 0x79,
	0x73, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x23, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64,
	0x61, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x54, 0x6f, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x22, 0x9a, 0x06, 0x0a, 0x0c, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x50, 0x0a, 0x0d, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x63, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6e, 0x63, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0a,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x12, 0x44, 0x0a, 0x11,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x72, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x0e, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x57, 0x0a,
	0x16, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x14, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x5f, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x44, 0x65, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x5c, 0x0a, 0x14, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x72, 0x75, 0x62,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22,
	0x6c, 0x0a, 0x0c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x4b, 0x0a,
	0x04, 0x56, 0x65, 0x72, 0x62, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x56, 0x5f, 0x53, 0x43, 0x52, 0x55, 0x42, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x04, 0x2a, 0x4b, 0x0a, 0x06, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x5f, 0x57, 0x48, 0x41,
	0x54, 0x53, 0x41, 0x50, 0x50, 0x10, 0x04, 0x2a, 0x75, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x06, 0x2a, 0x2e,
	0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x43,
	0x45, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x4f, 0x4c, 0x4c, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x02, 0x2a, 0x72,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x54, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x54, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x54, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x54,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x54, 0x5f, 0x57, 0x48, 0x41, 0x54, 0x53, 0x41, 0x50, 0x50,
	0x10, 0x05, 0x2a, 0x55, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x4d,
	0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x57,
	0x48, 0x41, 0x54, 0x53, 0x41, 0x50, 0x50, 0x10, 0x03, 0x2a, 0x5b, 0x0a, 0x0a, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47,
	0x52, 0x59, 0x50, 0x48, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x43, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x4e, 0x44,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x52, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x2a, 0x38, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x56, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x53, 0x54, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x2a, 0x56, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x62, 0x73, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x53, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x53,
	0x45, 0x4e, 0x54, 0x5f, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x01, 0x42, 0x97, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x42, 0x0f, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x58, 0xaa, 0x02, 0x0b,
	0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xca, 0x02, 0x0b, 0x41, 0x70,
	0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xe2, 0x02, 0x17, 0x41, 0x70, 0x69, 0x5c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_compliance_proto_rawDescOnce sync.Once
	file_api_commons_compliance_proto_rawDescData = file_api_commons_compliance_proto_rawDesc
)

func file_api_commons_compliance_proto_rawDescGZIP() []byte {
	file_api_commons_compliance_proto_rawDescOnce.Do(func() {
		file_api_commons_compliance_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_compliance_proto_rawDescData)
	})
	return file_api_commons_compliance_proto_rawDescData
}

var file_api_commons_compliance_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_api_commons_compliance_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_api_commons_compliance_proto_goTypes = []interface{}{
	(Verb)(0),                      // 0: api.commons.Verb
	(Entity)(0),                    // 1: api.commons.Entity
	(SubEntity)(0),                 // 2: api.commons.SubEntity
	(PhoneType)(0),                 // 3: api.commons.PhoneType
	(ContentType)(0),               // 4: api.commons.ContentType
	(Channel)(0),                   // 5: api.commons.Channel
	(PluginType)(0),                // 6: api.commons.PluginType
	(Environment)(0),               // 7: api.commons.Environment
	(ConsentAbsentAction)(0),       // 8: api.commons.ConsentAbsentAction
	(*Rule)(nil),                   // 9: api.commons.Rule
	(*Selector)(nil),               // 10: api.commons.Selector
	(*TimeExp)(nil),                // 11: api.commons.TimeExp
	(*WeekdayExp)(nil),             // 12: api.commons.WeekdayExp
	(*DnclExp)(nil),                // 13: api.commons.DnclExp
	(*FrequencyExp)(nil),           // 14: api.commons.FrequencyExp
	(*MatchingMod)(nil),            // 15: api.commons.MatchingMod
	(*MatchingEntity)(nil),         // 16: api.commons.MatchingEntity
	(*LocationExp)(nil),            // 17: api.commons.LocationExp
	(*PhoneTypeExp)(nil),           // 18: api.commons.PhoneTypeExp
	(*MonthExp)(nil),               // 19: api.commons.MonthExp
	(*DateExp)(nil),                // 20: api.commons.DateExp
	(*HolidayExp)(nil),             // 21: api.commons.HolidayExp
	(*MetaFieldExp)(nil),           // 22: api.commons.MetaFieldExp
	(*PluginExp)(nil),              // 23: api.commons.PluginExp
	(*EntityExp)(nil),              // 24: api.commons.EntityExp
	(*FieldNamesMod)(nil),          // 25: api.commons.FieldNamesMod
	(*ResultsMod)(nil),             // 26: api.commons.ResultsMod
	(*DispositionMod)(nil),         // 27: api.commons.DispositionMod
	(*DispositionField)(nil),       // 28: api.commons.DispositionField
	(*DispositionPair)(nil),        // 29: api.commons.DispositionPair
	(*Field)(nil),                  // 30: api.commons.Field
	(*ConsentCondition)(nil),       // 31: api.commons.ConsentCondition
	(*ScenarioData)(nil),           // 32: api.commons.ScenarioData
	(*CountryCode)(nil),            // 33: api.commons.CountryCode
	(*ScenarioResult)(nil),         // 34: api.commons.ScenarioResult
	(*ScenarioRuleResponse)(nil),   // 35: api.commons.ScenarioRuleResponse
	(*ScrubEntryDetails)(nil),      // 36: api.commons.ScrubEntryDetails
	(*RuleResponse)(nil),           // 37: api.commons.RuleResponse
	nil,                            // 38: api.commons.ScenarioData.CallMetadataEntry
	(Weekday_Enum)(0),              // 39: api.commons.Weekday.Enum
	(Month)(0),                     // 40: api.commons.Month
	(*timestamppb.Timestamp)(nil),  // 41: google.protobuf.Timestamp
	(*CommType)(nil),               // 42: api.commons.CommType
	(*wrapperspb.StringValue)(nil), // 43: google.protobuf.StringValue
}
var file_api_commons_compliance_proto_depIdxs = []int32{
	0,  // 0: api.commons.Rule.verb:type_name -> api.commons.Verb
	1,  // 1: api.commons.Rule.entity:type_name -> api.commons.Entity
	2,  // 2: api.commons.Rule.sub_entity:type_name -> api.commons.SubEntity
	10, // 3: api.commons.Rule.selectors:type_name -> api.commons.Selector
	11, // 4: api.commons.Selector.time:type_name -> api.commons.TimeExp
	12, // 5: api.commons.Selector.week:type_name -> api.commons.WeekdayExp
	13, // 6: api.commons.Selector.dncl:type_name -> api.commons.DnclExp
	14, // 7: api.commons.Selector.frequency:type_name -> api.commons.FrequencyExp
	17, // 8: api.commons.Selector.location:type_name -> api.commons.LocationExp
	18, // 9: api.commons.Selector.phone_type:type_name -> api.commons.PhoneTypeExp
	19, // 10: api.commons.Selector.month:type_name -> api.commons.MonthExp
	20, // 11: api.commons.Selector.date:type_name -> api.commons.DateExp
	21, // 12: api.commons.Selector.holiday:type_name -> api.commons.HolidayExp
	22, // 13: api.commons.Selector.meta:type_name -> api.commons.MetaFieldExp
	23, // 14: api.commons.Selector.plugin:type_name -> api.commons.PluginExp
	39, // 15: api.commons.WeekdayExp.day:type_name -> api.commons.Weekday.Enum
	25, // 16: api.commons.DnclExp.field_names:type_name -> api.commons.FieldNamesMod
	26, // 17: api.commons.FrequencyExp.results:type_name -> api.commons.ResultsMod
	27, // 18: api.commons.FrequencyExp.dispositions:type_name -> api.commons.DispositionMod
	25, // 19: api.commons.FrequencyExp.field_names:type_name -> api.commons.FieldNamesMod
	24, // 20: api.commons.FrequencyExp.checking_entities:type_name -> api.commons.EntityExp
	15, // 21: api.commons.FrequencyExp.matching:type_name -> api.commons.MatchingMod
	15, // 22: api.commons.MatchingMod.and:type_name -> api.commons.MatchingMod
	15, // 23: api.commons.MatchingMod.or:type_name -> api.commons.MatchingMod
	16, // 24: api.commons.MatchingMod.mod:type_name -> api.commons.MatchingEntity
	26, // 25: api.commons.MatchingEntity.results:type_name -> api.commons.ResultsMod
	27, // 26: api.commons.MatchingEntity.dispositions:type_name -> api.commons.DispositionMod
	3,  // 27: api.commons.PhoneTypeExp.phone_type:type_name -> api.commons.PhoneType
	40, // 28: api.commons.MonthExp.month:type_name -> api.commons.Month
	40, // 29: api.commons.DateExp.month:type_name -> api.commons.Month
	6,  // 30: api.commons.PluginExp.type:type_name -> api.commons.PluginType
	7,  // 31: api.commons.PluginExp.env:type_name -> api.commons.Environment
	8,  // 32: api.commons.PluginExp.absent_action:type_name -> api.commons.ConsentAbsentAction
	2,  // 33: api.commons.EntityExp.sub_entity:type_name -> api.commons.SubEntity
	1,  // 34: api.commons.EntityExp.entity:type_name -> api.commons.Entity
	30, // 35: api.commons.FieldNamesMod.field_names:type_name -> api.commons.Field
	28, // 36: api.commons.DispositionMod.dispositions:type_name -> api.commons.DispositionField
	29, // 37: api.commons.DispositionField.pairs:type_name -> api.commons.DispositionPair
	39, // 38: api.commons.ConsentCondition.days_of_the_week:type_name -> api.commons.Weekday.Enum
	41, // 39: api.commons.ConsentCondition.from_date:type_name -> google.protobuf.Timestamp
	41, // 40: api.commons.ConsentCondition.to_date:type_name -> google.protobuf.Timestamp
	42, // 41: api.commons.ScenarioData.comm_type:type_name -> api.commons.CommType
	38, // 42: api.commons.ScenarioData.call_metadata:type_name -> api.commons.ScenarioData.CallMetadataEntry
	41, // 43: api.commons.ScenarioData.time_of_call:type_name -> google.protobuf.Timestamp
	3,  // 44: api.commons.ScenarioData.phone_type:type_name -> api.commons.PhoneType
	33, // 45: api.commons.ScenarioData.country_code_data:type_name -> api.commons.CountryCode
	35, // 46: api.commons.ScenarioResult.should_allow_responses:type_name -> api.commons.ScenarioRuleResponse
	35, // 47: api.commons.ScenarioResult.should_deny_responses:type_name -> api.commons.ScenarioRuleResponse
	41, // 48: api.commons.ScrubEntryDetails.expiration_date:type_name -> google.protobuf.Timestamp
	43, // 49: api.commons.ScrubEntryDetails.notes:type_name -> google.protobuf.StringValue
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_api_commons_compliance_proto_init() }
func file_api_commons_compliance_proto_init() {
	if File_api_commons_compliance_proto != nil {
		return
	}
	file_api_commons_communication_proto_init()
	file_api_commons_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_commons_compliance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeekdayExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnclExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchingMod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchingEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneTypeExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HolidayExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaFieldExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldNamesMod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultsMod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispositionMod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispositionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispositionPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenarioData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenarioResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenarioRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrubEntryDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_compliance_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_commons_compliance_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Selector_Time)(nil),
		(*Selector_Week)(nil),
		(*Selector_Dncl)(nil),
		(*Selector_Frequency)(nil),
		(*Selector_Location)(nil),
		(*Selector_PhoneType)(nil),
		(*Selector_Month)(nil),
		(*Selector_Date)(nil),
		(*Selector_Holiday)(nil),
		(*Selector_Meta)(nil),
		(*Selector_Plugin)(nil),
	}
	file_api_commons_compliance_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*MatchingEntity_Results)(nil),
		(*MatchingEntity_Dispositions)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_compliance_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_compliance_proto_goTypes,
		DependencyIndexes: file_api_commons_compliance_proto_depIdxs,
		EnumInfos:         file_api_commons_compliance_proto_enumTypes,
		MessageInfos:      file_api_commons_compliance_proto_msgTypes,
	}.Build()
	File_api_commons_compliance_proto = out.File
	file_api_commons_compliance_proto_rawDesc = nil
	file_api_commons_compliance_proto_goTypes = nil
	file_api_commons_compliance_proto_depIdxs = nil
}
