// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: api/commons/lms.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CronType int32

const (
	CronType_CRON_TYPE_LMS     CronType = 0
	CronType_CRON_TYPE_JOURNEY CronType = 1
)

// Enum value maps for CronType.
var (
	CronType_name = map[int32]string{
		0: "CRON_TYPE_LMS",
		1: "CRON_TYPE_JOURNEY",
	}
	CronType_value = map[string]int32{
		"CRON_TYPE_LMS":     0,
		"CRON_TYPE_JOURNEY": 1,
	}
)

func (x CronType) Enum() *CronType {
	p := new(CronType)
	*p = x
	return p
}

func (x CronType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CronType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[0].Descriptor()
}

func (CronType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[0]
}

func (x CronType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CronType.Descriptor instead.
func (CronType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{0}
}

type EnrichmentType int32

const (
	EnrichmentType_ENRICHMENT_TYPE_OR   EnrichmentType = 0
	EnrichmentType_ENRICHMENT_TYPE_XOR  EnrichmentType = 1
	EnrichmentType_ENRICHMENT_TYPE_AND  EnrichmentType = 2
	EnrichmentType_ENRICHMENT_TYPE_JOIN EnrichmentType = 3
	EnrichmentType_ENRICHMENT_TYPE_NOT  EnrichmentType = 4
)

// Enum value maps for EnrichmentType.
var (
	EnrichmentType_name = map[int32]string{
		0: "ENRICHMENT_TYPE_OR",
		1: "ENRICHMENT_TYPE_XOR",
		2: "ENRICHMENT_TYPE_AND",
		3: "ENRICHMENT_TYPE_JOIN",
		4: "ENRICHMENT_TYPE_NOT",
	}
	EnrichmentType_value = map[string]int32{
		"ENRICHMENT_TYPE_OR":   0,
		"ENRICHMENT_TYPE_XOR":  1,
		"ENRICHMENT_TYPE_AND":  2,
		"ENRICHMENT_TYPE_JOIN": 3,
		"ENRICHMENT_TYPE_NOT":  4,
	}
)

func (x EnrichmentType) Enum() *EnrichmentType {
	p := new(EnrichmentType)
	*p = x
	return p
}

func (x EnrichmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnrichmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[1].Descriptor()
}

func (EnrichmentType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[1]
}

func (x EnrichmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnrichmentType.Descriptor instead.
func (EnrichmentType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{1}
}

type PrimarySource int32

const (
	PrimarySource_PRIMARY_SOURCE_LMS PrimarySource = 0
	PrimarySource_PRIMARY_SOURCE_CJS PrimarySource = 1
)

// Enum value maps for PrimarySource.
var (
	PrimarySource_name = map[int32]string{
		0: "PRIMARY_SOURCE_LMS",
		1: "PRIMARY_SOURCE_CJS",
	}
	PrimarySource_value = map[string]int32{
		"PRIMARY_SOURCE_LMS": 0,
		"PRIMARY_SOURCE_CJS": 1,
	}
)

func (x PrimarySource) Enum() *PrimarySource {
	p := new(PrimarySource)
	*p = x
	return p
}

func (x PrimarySource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrimarySource) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[2].Descriptor()
}

func (PrimarySource) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[2]
}

func (x PrimarySource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrimarySource.Descriptor instead.
func (PrimarySource) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{2}
}

type DedupKeyPolicy int32

const (
	DedupKeyPolicy_KEEP_FIRST DedupKeyPolicy = 0
	DedupKeyPolicy_KEEP_LAST  DedupKeyPolicy = 1
	DedupKeyPolicy_KEEP_ALL   DedupKeyPolicy = 2
)

// Enum value maps for DedupKeyPolicy.
var (
	DedupKeyPolicy_name = map[int32]string{
		0: "KEEP_FIRST",
		1: "KEEP_LAST",
		2: "KEEP_ALL",
	}
	DedupKeyPolicy_value = map[string]int32{
		"KEEP_FIRST": 0,
		"KEEP_LAST":  1,
		"KEEP_ALL":   2,
	}
)

func (x DedupKeyPolicy) Enum() *DedupKeyPolicy {
	p := new(DedupKeyPolicy)
	*p = x
	return p
}

func (x DedupKeyPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DedupKeyPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[3].Descriptor()
}

func (DedupKeyPolicy) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[3]
}

func (x DedupKeyPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DedupKeyPolicy.Descriptor instead.
func (DedupKeyPolicy) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{3}
}

type RunType int32

const (
	RunType_RUN_TYPE_ENABLED  RunType = 0
	RunType_RUN_TYPE_DISABLED RunType = 1
	RunType_RUN_TYPE_TEST     RunType = 2
)

// Enum value maps for RunType.
var (
	RunType_name = map[int32]string{
		0: "RUN_TYPE_ENABLED",
		1: "RUN_TYPE_DISABLED",
		2: "RUN_TYPE_TEST",
	}
	RunType_value = map[string]int32{
		"RUN_TYPE_ENABLED":  0,
		"RUN_TYPE_DISABLED": 1,
		"RUN_TYPE_TEST":     2,
	}
)

func (x RunType) Enum() *RunType {
	p := new(RunType)
	*p = x
	return p
}

func (x RunType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[4].Descriptor()
}

func (RunType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[4]
}

func (x RunType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunType.Descriptor instead.
func (RunType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{4}
}

type ConsentActionType int32

const (
	ConsentActionType_CONSENT_ACTION_TYPE_ADD    ConsentActionType = 0
	ConsentActionType_CONSENT_ACTION_TYPE_REVOKE ConsentActionType = 1
)

// Enum value maps for ConsentActionType.
var (
	ConsentActionType_name = map[int32]string{
		0: "CONSENT_ACTION_TYPE_ADD",
		1: "CONSENT_ACTION_TYPE_REVOKE",
	}
	ConsentActionType_value = map[string]int32{
		"CONSENT_ACTION_TYPE_ADD":    0,
		"CONSENT_ACTION_TYPE_REVOKE": 1,
	}
)

func (x ConsentActionType) Enum() *ConsentActionType {
	p := new(ConsentActionType)
	*p = x
	return p
}

func (x ConsentActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[5].Descriptor()
}

func (ConsentActionType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[5]
}

func (x ConsentActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentActionType.Descriptor instead.
func (ConsentActionType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{5}
}

type RecordType int32

const (
	RecordType_RECORD_TYPE_ALL                    RecordType = 0
	RecordType_RECORD_TYPE_STRING                 RecordType = 1
	RecordType_RECORD_TYPE_NUMBER                 RecordType = 2
	RecordType_RECORD_TYPE_BOOL                   RecordType = 3
	RecordType_RECORD_TYPE_PHONE                  RecordType = 4
	RecordType_RECORD_TYPE_CURRENCY               RecordType = 5
	RecordType_RECORD_TYPE_ENRICHED_PHONE         RecordType = 6
	RecordType_RECORD_TYPE_ENRICHED_ZIP           RecordType = 18
	RecordType_RECORD_TYPE_POSTAL_CODE            RecordType = 7
	RecordType_RECORD_TYPE_EMAIL                  RecordType = 8
	RecordType_RECORD_TYPE_DATETIME_NOW           RecordType = 9
	RecordType_RECORD_TYPE_DATETIME_TIMESTAMP     RecordType = 10
	RecordType_RECORD_TYPE_DATETIME_DATE          RecordType = 11
	RecordType_RECORD_TYPE_DATETIME_MONTH_AND_DAY RecordType = 12
	RecordType_RECORD_TYPE_DATETIME_TIME_OF_DAY   RecordType = 13
	RecordType_RECORD_TYPE_REPEATED_RECORDS       RecordType = 15
	RecordType_RECORD_TYPE_RECORD_MAP             RecordType = 16
	RecordType_RECORD_TYPE_ERROR                  RecordType = 17
	RecordType_RECORD_TYPE_SOCIAL                 RecordType = 19
	RecordType_RECORD_TYPE_DATE_OF_BIRTH          RecordType = 20
	RecordType_RECORD_TYPE_FULL_NAME              RecordType = 21
	RecordType_RECORD_TYPE_ACCOUNT_NUMBER         RecordType = 22
	RecordType_RECORD_TYPE_STRUCT_VALUE           RecordType = 23
	RecordType_RECORD_TYPE_EHR_DETAILS            RecordType = 24
)

// Enum value maps for RecordType.
var (
	RecordType_name = map[int32]string{
		0:  "RECORD_TYPE_ALL",
		1:  "RECORD_TYPE_STRING",
		2:  "RECORD_TYPE_NUMBER",
		3:  "RECORD_TYPE_BOOL",
		4:  "RECORD_TYPE_PHONE",
		5:  "RECORD_TYPE_CURRENCY",
		6:  "RECORD_TYPE_ENRICHED_PHONE",
		18: "RECORD_TYPE_ENRICHED_ZIP",
		7:  "RECORD_TYPE_POSTAL_CODE",
		8:  "RECORD_TYPE_EMAIL",
		9:  "RECORD_TYPE_DATETIME_NOW",
		10: "RECORD_TYPE_DATETIME_TIMESTAMP",
		11: "RECORD_TYPE_DATETIME_DATE",
		12: "RECORD_TYPE_DATETIME_MONTH_AND_DAY",
		13: "RECORD_TYPE_DATETIME_TIME_OF_DAY",
		15: "RECORD_TYPE_REPEATED_RECORDS",
		16: "RECORD_TYPE_RECORD_MAP",
		17: "RECORD_TYPE_ERROR",
		19: "RECORD_TYPE_SOCIAL",
		20: "RECORD_TYPE_DATE_OF_BIRTH",
		21: "RECORD_TYPE_FULL_NAME",
		22: "RECORD_TYPE_ACCOUNT_NUMBER",
		23: "RECORD_TYPE_STRUCT_VALUE",
		24: "RECORD_TYPE_EHR_DETAILS",
	}
	RecordType_value = map[string]int32{
		"RECORD_TYPE_ALL":                    0,
		"RECORD_TYPE_STRING":                 1,
		"RECORD_TYPE_NUMBER":                 2,
		"RECORD_TYPE_BOOL":                   3,
		"RECORD_TYPE_PHONE":                  4,
		"RECORD_TYPE_CURRENCY":               5,
		"RECORD_TYPE_ENRICHED_PHONE":         6,
		"RECORD_TYPE_ENRICHED_ZIP":           18,
		"RECORD_TYPE_POSTAL_CODE":            7,
		"RECORD_TYPE_EMAIL":                  8,
		"RECORD_TYPE_DATETIME_NOW":           9,
		"RECORD_TYPE_DATETIME_TIMESTAMP":     10,
		"RECORD_TYPE_DATETIME_DATE":          11,
		"RECORD_TYPE_DATETIME_MONTH_AND_DAY": 12,
		"RECORD_TYPE_DATETIME_TIME_OF_DAY":   13,
		"RECORD_TYPE_REPEATED_RECORDS":       15,
		"RECORD_TYPE_RECORD_MAP":             16,
		"RECORD_TYPE_ERROR":                  17,
		"RECORD_TYPE_SOCIAL":                 19,
		"RECORD_TYPE_DATE_OF_BIRTH":          20,
		"RECORD_TYPE_FULL_NAME":              21,
		"RECORD_TYPE_ACCOUNT_NUMBER":         22,
		"RECORD_TYPE_STRUCT_VALUE":           23,
		"RECORD_TYPE_EHR_DETAILS":            24,
	}
)

func (x RecordType) Enum() *RecordType {
	p := new(RecordType)
	*p = x
	return p
}

func (x RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[6].Descriptor()
}

func (RecordType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[6]
}

func (x RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordType.Descriptor instead.
func (RecordType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{6}
}

type FieldType int32

const (
	FieldType_FIELD_TYPE_STRING                 FieldType = 0
	FieldType_FIELD_TYPE_NUMBER                 FieldType = 1
	FieldType_FIELD_TYPE_BOOLEAN                FieldType = 2
	FieldType_FIELD_TYPE_PHONE                  FieldType = 3
	FieldType_FIELD_TYPE_CURRENCY               FieldType = 4
	FieldType_FIELD_TYPE_EMAIL                  FieldType = 5
	FieldType_FIELD_TYPE_DATETIME_NOW           FieldType = 6
	FieldType_FIELD_TYPE_DATETIME_TIMESTAMP     FieldType = 7
	FieldType_FIELD_TYPE_DATETIME_DATE          FieldType = 8
	FieldType_FIELD_TYPE_DATETIME_MONTH_AND_DAY FieldType = 9
	FieldType_FIELD_TYPE_DATETIME_TIME_OF_DAY   FieldType = 10
	FieldType_FIELD_TYPE_POSTAL_CODE            FieldType = 12
	FieldType_FIELD_TYPE_ENRICHED_PHONE         FieldType = 13
	FieldType_FIELD_TYPE_ENRICHED_ZIP           FieldType = 14
	FieldType_FIELD_TYPE_SOCIAL                 FieldType = 15
	FieldType_FIELD_TYPE_DATE_OF_BIRTH          FieldType = 16
	FieldType_FIELD_TYPE_FULL_NAME              FieldType = 17
	FieldType_FIELD_TYPE_ACCOUNT_NUMBER         FieldType = 18
	FieldType_FIELD_TYPE_ERROR                  FieldType = 19
	FieldType_FIELD_TYPE_STRUCT_VALUE           FieldType = 20
	FieldType_FIELD_TYPE_EHR_DETAILS            FieldType = 21
)

// Enum value maps for FieldType.
var (
	FieldType_name = map[int32]string{
		0:  "FIELD_TYPE_STRING",
		1:  "FIELD_TYPE_NUMBER",
		2:  "FIELD_TYPE_BOOLEAN",
		3:  "FIELD_TYPE_PHONE",
		4:  "FIELD_TYPE_CURRENCY",
		5:  "FIELD_TYPE_EMAIL",
		6:  "FIELD_TYPE_DATETIME_NOW",
		7:  "FIELD_TYPE_DATETIME_TIMESTAMP",
		8:  "FIELD_TYPE_DATETIME_DATE",
		9:  "FIELD_TYPE_DATETIME_MONTH_AND_DAY",
		10: "FIELD_TYPE_DATETIME_TIME_OF_DAY",
		12: "FIELD_TYPE_POSTAL_CODE",
		13: "FIELD_TYPE_ENRICHED_PHONE",
		14: "FIELD_TYPE_ENRICHED_ZIP",
		15: "FIELD_TYPE_SOCIAL",
		16: "FIELD_TYPE_DATE_OF_BIRTH",
		17: "FIELD_TYPE_FULL_NAME",
		18: "FIELD_TYPE_ACCOUNT_NUMBER",
		19: "FIELD_TYPE_ERROR",
		20: "FIELD_TYPE_STRUCT_VALUE",
		21: "FIELD_TYPE_EHR_DETAILS",
	}
	FieldType_value = map[string]int32{
		"FIELD_TYPE_STRING":                 0,
		"FIELD_TYPE_NUMBER":                 1,
		"FIELD_TYPE_BOOLEAN":                2,
		"FIELD_TYPE_PHONE":                  3,
		"FIELD_TYPE_CURRENCY":               4,
		"FIELD_TYPE_EMAIL":                  5,
		"FIELD_TYPE_DATETIME_NOW":           6,
		"FIELD_TYPE_DATETIME_TIMESTAMP":     7,
		"FIELD_TYPE_DATETIME_DATE":          8,
		"FIELD_TYPE_DATETIME_MONTH_AND_DAY": 9,
		"FIELD_TYPE_DATETIME_TIME_OF_DAY":   10,
		"FIELD_TYPE_POSTAL_CODE":            12,
		"FIELD_TYPE_ENRICHED_PHONE":         13,
		"FIELD_TYPE_ENRICHED_ZIP":           14,
		"FIELD_TYPE_SOCIAL":                 15,
		"FIELD_TYPE_DATE_OF_BIRTH":          16,
		"FIELD_TYPE_FULL_NAME":              17,
		"FIELD_TYPE_ACCOUNT_NUMBER":         18,
		"FIELD_TYPE_ERROR":                  19,
		"FIELD_TYPE_STRUCT_VALUE":           20,
		"FIELD_TYPE_EHR_DETAILS":            21,
	}
)

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[7].Descriptor()
}

func (FieldType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[7]
}

func (x FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldType.Descriptor instead.
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{7}
}

type FileFormat int32

const (
	FileFormat_FILE_FORMAT_CSV          FileFormat = 0
	FileFormat_FILE_FORMAT_CUSTOM_DELIM FileFormat = 1
	FileFormat_FILE_FORMAT_FIXED_FORMAT FileFormat = 2
	FileFormat_FILE_FORMAT_TAB          FileFormat = 3
	FileFormat_FILE_FORMAT_JSON         FileFormat = 4
)

// Enum value maps for FileFormat.
var (
	FileFormat_name = map[int32]string{
		0: "FILE_FORMAT_CSV",
		1: "FILE_FORMAT_CUSTOM_DELIM",
		2: "FILE_FORMAT_FIXED_FORMAT",
		3: "FILE_FORMAT_TAB",
		4: "FILE_FORMAT_JSON",
	}
	FileFormat_value = map[string]int32{
		"FILE_FORMAT_CSV":          0,
		"FILE_FORMAT_CUSTOM_DELIM": 1,
		"FILE_FORMAT_FIXED_FORMAT": 2,
		"FILE_FORMAT_TAB":          3,
		"FILE_FORMAT_JSON":         4,
	}
)

func (x FileFormat) Enum() *FileFormat {
	p := new(FileFormat)
	*p = x
	return p
}

func (x FileFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[8].Descriptor()
}

func (FileFormat) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[8]
}

func (x FileFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileFormat.Descriptor instead.
func (FileFormat) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{8}
}

type PipelineElementStatusType int32

const (
	PipelineElementStatusType_PIPELINE_ELEMENT_STATUS_TYPE_INITIALIZED PipelineElementStatusType = 0
	PipelineElementStatusType_PIPELINE_ELEMENT_STATUS_TYPE_RUNNING     PipelineElementStatusType = 1
	PipelineElementStatusType_PIPELINE_ELEMENT_STATUS_TYPE_STOPPED     PipelineElementStatusType = 2
	PipelineElementStatusType_PIPELINE_ELEMENT_STATUS_TYPE_FAILED      PipelineElementStatusType = 3
)

// Enum value maps for PipelineElementStatusType.
var (
	PipelineElementStatusType_name = map[int32]string{
		0: "PIPELINE_ELEMENT_STATUS_TYPE_INITIALIZED",
		1: "PIPELINE_ELEMENT_STATUS_TYPE_RUNNING",
		2: "PIPELINE_ELEMENT_STATUS_TYPE_STOPPED",
		3: "PIPELINE_ELEMENT_STATUS_TYPE_FAILED",
	}
	PipelineElementStatusType_value = map[string]int32{
		"PIPELINE_ELEMENT_STATUS_TYPE_INITIALIZED": 0,
		"PIPELINE_ELEMENT_STATUS_TYPE_RUNNING":     1,
		"PIPELINE_ELEMENT_STATUS_TYPE_STOPPED":     2,
		"PIPELINE_ELEMENT_STATUS_TYPE_FAILED":      3,
	}
)

func (x PipelineElementStatusType) Enum() *PipelineElementStatusType {
	p := new(PipelineElementStatusType)
	*p = x
	return p
}

func (x PipelineElementStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineElementStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[9].Descriptor()
}

func (PipelineElementStatusType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[9]
}

func (x PipelineElementStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineElementStatusType.Descriptor instead.
func (PipelineElementStatusType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{9}
}

type EntrypointType int32

const (
	EntrypointType_ENTRYPOINT_TYPE_NON  EntrypointType = 0
	EntrypointType_ENTRYPOINT_TYPE_API  EntrypointType = 1
	EntrypointType_ENTRYPOINT_TYPE_SFTP EntrypointType = 2
)

// Enum value maps for EntrypointType.
var (
	EntrypointType_name = map[int32]string{
		0: "ENTRYPOINT_TYPE_NON",
		1: "ENTRYPOINT_TYPE_API",
		2: "ENTRYPOINT_TYPE_SFTP",
	}
	EntrypointType_value = map[string]int32{
		"ENTRYPOINT_TYPE_NON":  0,
		"ENTRYPOINT_TYPE_API":  1,
		"ENTRYPOINT_TYPE_SFTP": 2,
	}
)

func (x EntrypointType) Enum() *EntrypointType {
	p := new(EntrypointType)
	*p = x
	return p
}

func (x EntrypointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntrypointType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[10].Descriptor()
}

func (EntrypointType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[10]
}

func (x EntrypointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntrypointType.Descriptor instead.
func (EntrypointType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{10}
}

type DuplicatePolicyType int32

const (
	DuplicatePolicyType_DUPLICATE_POLICY_TYPE_KEEP_RECORD_DISCARD_NUMBER DuplicatePolicyType = 0
	DuplicatePolicyType_DUPLICATE_POLICY_TYPE_ALLOW_RECORD_KEEP_NUMBER   DuplicatePolicyType = 1
	DuplicatePolicyType_DUPLICATE_POLICY_TYPE_DISCARD_RECORD             DuplicatePolicyType = 2
	DuplicatePolicyType_DUPLICATE_POLICY_TYPE_DUPLICATE_LIST             DuplicatePolicyType = 3
)

// Enum value maps for DuplicatePolicyType.
var (
	DuplicatePolicyType_name = map[int32]string{
		0: "DUPLICATE_POLICY_TYPE_KEEP_RECORD_DISCARD_NUMBER",
		1: "DUPLICATE_POLICY_TYPE_ALLOW_RECORD_KEEP_NUMBER",
		2: "DUPLICATE_POLICY_TYPE_DISCARD_RECORD",
		3: "DUPLICATE_POLICY_TYPE_DUPLICATE_LIST",
	}
	DuplicatePolicyType_value = map[string]int32{
		"DUPLICATE_POLICY_TYPE_KEEP_RECORD_DISCARD_NUMBER": 0,
		"DUPLICATE_POLICY_TYPE_ALLOW_RECORD_KEEP_NUMBER":   1,
		"DUPLICATE_POLICY_TYPE_DISCARD_RECORD":             2,
		"DUPLICATE_POLICY_TYPE_DUPLICATE_LIST":             3,
	}
)

func (x DuplicatePolicyType) Enum() *DuplicatePolicyType {
	p := new(DuplicatePolicyType)
	*p = x
	return p
}

func (x DuplicatePolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DuplicatePolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[11].Descriptor()
}

func (DuplicatePolicyType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[11]
}

func (x DuplicatePolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DuplicatePolicyType.Descriptor instead.
func (DuplicatePolicyType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{11}
}

type AbsentPolicyType int32

const (
	AbsentPolicyType_ABSENT_POLICY_TYPE_KEEP    AbsentPolicyType = 0
	AbsentPolicyType_ABSENT_POLICY_TYPE_DISCARD AbsentPolicyType = 1
)

// Enum value maps for AbsentPolicyType.
var (
	AbsentPolicyType_name = map[int32]string{
		0: "ABSENT_POLICY_TYPE_KEEP",
		1: "ABSENT_POLICY_TYPE_DISCARD",
	}
	AbsentPolicyType_value = map[string]int32{
		"ABSENT_POLICY_TYPE_KEEP":    0,
		"ABSENT_POLICY_TYPE_DISCARD": 1,
	}
)

func (x AbsentPolicyType) Enum() *AbsentPolicyType {
	p := new(AbsentPolicyType)
	*p = x
	return p
}

func (x AbsentPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AbsentPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[12].Descriptor()
}

func (AbsentPolicyType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[12]
}

func (x AbsentPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AbsentPolicyType.Descriptor instead.
func (AbsentPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{12}
}

type DialOrderType int32

const (
	DialOrderType_DIAL_ORDER_TYPE_FIRST   DialOrderType = 0
	DialOrderType_DIAL_ORDER_TYPE_NATURAL DialOrderType = 1
	DialOrderType_DIAL_ORDER_TYPE_CUSTOM  DialOrderType = 2
)

// Enum value maps for DialOrderType.
var (
	DialOrderType_name = map[int32]string{
		0: "DIAL_ORDER_TYPE_FIRST",
		1: "DIAL_ORDER_TYPE_NATURAL",
		2: "DIAL_ORDER_TYPE_CUSTOM",
	}
	DialOrderType_value = map[string]int32{
		"DIAL_ORDER_TYPE_FIRST":   0,
		"DIAL_ORDER_TYPE_NATURAL": 1,
		"DIAL_ORDER_TYPE_CUSTOM":  2,
	}
)

func (x DialOrderType) Enum() *DialOrderType {
	p := new(DialOrderType)
	*p = x
	return p
}

func (x DialOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DialOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[13].Descriptor()
}

func (DialOrderType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[13]
}

func (x DialOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DialOrderType.Descriptor instead.
func (DialOrderType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{13}
}

type ExportType int32

const (
	ExportType_EXPORT_TYPE_FILENAME ExportType = 0
	ExportType_EXPORT_TYPE_SFTP     ExportType = 1
)

// Enum value maps for ExportType.
var (
	ExportType_name = map[int32]string{
		0: "EXPORT_TYPE_FILENAME",
		1: "EXPORT_TYPE_SFTP",
	}
	ExportType_value = map[string]int32{
		"EXPORT_TYPE_FILENAME": 0,
		"EXPORT_TYPE_SFTP":     1,
	}
)

func (x ExportType) Enum() *ExportType {
	p := new(ExportType)
	*p = x
	return p
}

func (x ExportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExportType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[14].Descriptor()
}

func (ExportType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[14]
}

func (x ExportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportType.Descriptor instead.
func (ExportType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{14}
}

type SortOrder int32

const (
	SortOrder_SORT_ORDER_ASCENDING  SortOrder = 0
	SortOrder_SORT_ORDER_DESCENDING SortOrder = 1
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "SORT_ORDER_ASCENDING",
		1: "SORT_ORDER_DESCENDING",
	}
	SortOrder_value = map[string]int32{
		"SORT_ORDER_ASCENDING":  0,
		"SORT_ORDER_DESCENDING": 1,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[15].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[15]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{15}
}

type CompareType int32

const (
	CompareType_COMPARE_TYPE_STRING CompareType = 0
	CompareType_COMPARE_TYPE_NUMBER CompareType = 1
	CompareType_COMPARE_TYPE_BOOL   CompareType = 2
)

// Enum value maps for CompareType.
var (
	CompareType_name = map[int32]string{
		0: "COMPARE_TYPE_STRING",
		1: "COMPARE_TYPE_NUMBER",
		2: "COMPARE_TYPE_BOOL",
	}
	CompareType_value = map[string]int32{
		"COMPARE_TYPE_STRING": 0,
		"COMPARE_TYPE_NUMBER": 1,
		"COMPARE_TYPE_BOOL":   2,
	}
)

func (x CompareType) Enum() *CompareType {
	p := new(CompareType)
	*p = x
	return p
}

func (x CompareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompareType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[16].Descriptor()
}

func (CompareType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[16]
}

func (x CompareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompareType.Descriptor instead.
func (CompareType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{16}
}

type CompareOperator int32

const (
	CompareOperator_COMPARE_OPERATOR_EQUAL_TO      CompareOperator = 0
	CompareOperator_COMPARE_OPERATOR_GREATER       CompareOperator = 1
	CompareOperator_COMPARE_OPERATOR_GREATER_EQUAL CompareOperator = 2
	CompareOperator_COMPARE_OPERATOR_LESS          CompareOperator = 3
	CompareOperator_COMPARE_OPERATOR_LESS_EQUAL    CompareOperator = 4
	CompareOperator_COMPARE_OPERATOR_STARTS_WITH   CompareOperator = 5
	CompareOperator_COMPARE_OPERATOR_ENDS_WITH     CompareOperator = 6
	CompareOperator_COMPARE_OPERATOR_CONTAINS      CompareOperator = 7
)

// Enum value maps for CompareOperator.
var (
	CompareOperator_name = map[int32]string{
		0: "COMPARE_OPERATOR_EQUAL_TO",
		1: "COMPARE_OPERATOR_GREATER",
		2: "COMPARE_OPERATOR_GREATER_EQUAL",
		3: "COMPARE_OPERATOR_LESS",
		4: "COMPARE_OPERATOR_LESS_EQUAL",
		5: "COMPARE_OPERATOR_STARTS_WITH",
		6: "COMPARE_OPERATOR_ENDS_WITH",
		7: "COMPARE_OPERATOR_CONTAINS",
	}
	CompareOperator_value = map[string]int32{
		"COMPARE_OPERATOR_EQUAL_TO":      0,
		"COMPARE_OPERATOR_GREATER":       1,
		"COMPARE_OPERATOR_GREATER_EQUAL": 2,
		"COMPARE_OPERATOR_LESS":          3,
		"COMPARE_OPERATOR_LESS_EQUAL":    4,
		"COMPARE_OPERATOR_STARTS_WITH":   5,
		"COMPARE_OPERATOR_ENDS_WITH":     6,
		"COMPARE_OPERATOR_CONTAINS":      7,
	}
)

func (x CompareOperator) Enum() *CompareOperator {
	p := new(CompareOperator)
	*p = x
	return p
}

func (x CompareOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompareOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[17].Descriptor()
}

func (CompareOperator) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[17]
}

func (x CompareOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompareOperator.Descriptor instead.
func (CompareOperator) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{17}
}

type ChainOperator int32

const (
	ChainOperator_CHAIN_OPERATOR_AND ChainOperator = 0
	ChainOperator_CHAIN_OPERATOR_OR  ChainOperator = 1
)

// Enum value maps for ChainOperator.
var (
	ChainOperator_name = map[int32]string{
		0: "CHAIN_OPERATOR_AND",
		1: "CHAIN_OPERATOR_OR",
	}
	ChainOperator_value = map[string]int32{
		"CHAIN_OPERATOR_AND": 0,
		"CHAIN_OPERATOR_OR":  1,
	}
)

func (x ChainOperator) Enum() *ChainOperator {
	p := new(ChainOperator)
	*p = x
	return p
}

func (x ChainOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[18].Descriptor()
}

func (ChainOperator) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[18]
}

func (x ChainOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainOperator.Descriptor instead.
func (ChainOperator) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{18}
}

type DeDupActions int32

const (
	DeDupActions_DE_DUP_ACTIONS_KEEP_FIRST   DeDupActions = 0
	DeDupActions_DE_DUP_ACTIONS_KEEP_BOTH    DeDupActions = 3
	DeDupActions_DE_DUP_ACTIONS_KEEP_LAST    DeDupActions = 4
	DeDupActions_DE_DUP_ACTIONS_KEEP_NEITHER DeDupActions = 5
)

// Enum value maps for DeDupActions.
var (
	DeDupActions_name = map[int32]string{
		0: "DE_DUP_ACTIONS_KEEP_FIRST",
		3: "DE_DUP_ACTIONS_KEEP_BOTH",
		4: "DE_DUP_ACTIONS_KEEP_LAST",
		5: "DE_DUP_ACTIONS_KEEP_NEITHER",
	}
	DeDupActions_value = map[string]int32{
		"DE_DUP_ACTIONS_KEEP_FIRST":   0,
		"DE_DUP_ACTIONS_KEEP_BOTH":    3,
		"DE_DUP_ACTIONS_KEEP_LAST":    4,
		"DE_DUP_ACTIONS_KEEP_NEITHER": 5,
	}
)

func (x DeDupActions) Enum() *DeDupActions {
	p := new(DeDupActions)
	*p = x
	return p
}

func (x DeDupActions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeDupActions) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[19].Descriptor()
}

func (DeDupActions) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[19]
}

func (x DeDupActions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeDupActions.Descriptor instead.
func (DeDupActions) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{19}
}

// where the date should be in position to the prefix, suffix and filename
// for ConstructedFilename messages.
// NOTE: Originally file defaulted to AFTER_FILENAME, this would change it to be
// before the prefix
type DatePosition int32

const (
	DatePosition_DATE_POSITION_FIRST           DatePosition = 0
	DatePosition_DATE_POSITION_BEFORE_FILENAME DatePosition = 1
	DatePosition_DATE_POSITION_AFTER_FILENAME  DatePosition = 2
	DatePosition_DATE_POSITION_LAST            DatePosition = 3
)

// Enum value maps for DatePosition.
var (
	DatePosition_name = map[int32]string{
		0: "DATE_POSITION_FIRST",
		1: "DATE_POSITION_BEFORE_FILENAME",
		2: "DATE_POSITION_AFTER_FILENAME",
		3: "DATE_POSITION_LAST",
	}
	DatePosition_value = map[string]int32{
		"DATE_POSITION_FIRST":           0,
		"DATE_POSITION_BEFORE_FILENAME": 1,
		"DATE_POSITION_AFTER_FILENAME":  2,
		"DATE_POSITION_LAST":            3,
	}
)

func (x DatePosition) Enum() *DatePosition {
	p := new(DatePosition)
	*p = x
	return p
}

func (x DatePosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatePosition) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[20].Descriptor()
}

func (DatePosition) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[20]
}

func (x DatePosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatePosition.Descriptor instead.
func (DatePosition) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{20}
}

type RelativeDay int32

const (
	RelativeDay_RELATIVE_DAY_TODAY       RelativeDay = 0
	RelativeDay_RELATIVE_DAY_YESTERDAY   RelativeDay = 1
	RelativeDay_RELATIVE_DAY_LAST_FRIDAY RelativeDay = 2
)

// Enum value maps for RelativeDay.
var (
	RelativeDay_name = map[int32]string{
		0: "RELATIVE_DAY_TODAY",
		1: "RELATIVE_DAY_YESTERDAY",
		2: "RELATIVE_DAY_LAST_FRIDAY",
	}
	RelativeDay_value = map[string]int32{
		"RELATIVE_DAY_TODAY":       0,
		"RELATIVE_DAY_YESTERDAY":   1,
		"RELATIVE_DAY_LAST_FRIDAY": 2,
	}
)

func (x RelativeDay) Enum() *RelativeDay {
	p := new(RelativeDay)
	*p = x
	return p
}

func (x RelativeDay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelativeDay) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[21].Descriptor()
}

func (RelativeDay) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[21]
}

func (x RelativeDay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelativeDay.Descriptor instead.
func (RelativeDay) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{21}
}

type FilePatternType int32

const (
	FilePatternType_FILE_PATTERN_TYPE_GLOB        FilePatternType = 0
	FilePatternType_FILE_PATTERN_TYPE_CONSTRUCTED FilePatternType = 1
	// used with the FilePattern object, suggests to use the original filename
	// if it is known.
	// the filename options for the CONSTRUCTED file pattern type all still apply.
	FilePatternType_FILE_PATTERN_TYPE_ORIGINAL FilePatternType = 2
)

// Enum value maps for FilePatternType.
var (
	FilePatternType_name = map[int32]string{
		0: "FILE_PATTERN_TYPE_GLOB",
		1: "FILE_PATTERN_TYPE_CONSTRUCTED",
		2: "FILE_PATTERN_TYPE_ORIGINAL",
	}
	FilePatternType_value = map[string]int32{
		"FILE_PATTERN_TYPE_GLOB":        0,
		"FILE_PATTERN_TYPE_CONSTRUCTED": 1,
		"FILE_PATTERN_TYPE_ORIGINAL":    2,
	}
)

func (x FilePatternType) Enum() *FilePatternType {
	p := new(FilePatternType)
	*p = x
	return p
}

func (x FilePatternType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilePatternType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[22].Descriptor()
}

func (FilePatternType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[22]
}

func (x FilePatternType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilePatternType.Descriptor instead.
func (FilePatternType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{22}
}

// Used with a format string, and string date value to get a matrix/lms/DateTime
// proto
type DateTimePrecision int32

const (
	DateTimePrecision_DATETIME_PRECISION_NOW           DateTimePrecision = 0
	DateTimePrecision_DATETIME_PRECISION_TIMESTAMP     DateTimePrecision = 1
	DateTimePrecision_DATETIME_PRECISION_DATE          DateTimePrecision = 2
	DateTimePrecision_DATETIME_PRECISION_MONTH_AND_DAY DateTimePrecision = 3
	DateTimePrecision_DATETIME_PRECISION_TIME_OF_DAY   DateTimePrecision = 4
)

// Enum value maps for DateTimePrecision.
var (
	DateTimePrecision_name = map[int32]string{
		0: "DATETIME_PRECISION_NOW",
		1: "DATETIME_PRECISION_TIMESTAMP",
		2: "DATETIME_PRECISION_DATE",
		3: "DATETIME_PRECISION_MONTH_AND_DAY",
		4: "DATETIME_PRECISION_TIME_OF_DAY",
	}
	DateTimePrecision_value = map[string]int32{
		"DATETIME_PRECISION_NOW":           0,
		"DATETIME_PRECISION_TIMESTAMP":     1,
		"DATETIME_PRECISION_DATE":          2,
		"DATETIME_PRECISION_MONTH_AND_DAY": 3,
		"DATETIME_PRECISION_TIME_OF_DAY":   4,
	}
)

func (x DateTimePrecision) Enum() *DateTimePrecision {
	p := new(DateTimePrecision)
	*p = x
	return p
}

func (x DateTimePrecision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateTimePrecision) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[23].Descriptor()
}

func (DateTimePrecision) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[23]
}

func (x DateTimePrecision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateTimePrecision.Descriptor instead.
func (DateTimePrecision) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{23}
}

type HttpVerb int32

const (
	HttpVerb_HTTP_VERB_GET  HttpVerb = 0
	HttpVerb_HTTP_VERB_POST HttpVerb = 1
)

// Enum value maps for HttpVerb.
var (
	HttpVerb_name = map[int32]string{
		0: "HTTP_VERB_GET",
		1: "HTTP_VERB_POST",
	}
	HttpVerb_value = map[string]int32{
		"HTTP_VERB_GET":  0,
		"HTTP_VERB_POST": 1,
	}
)

func (x HttpVerb) Enum() *HttpVerb {
	p := new(HttpVerb)
	*p = x
	return p
}

func (x HttpVerb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpVerb) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[24].Descriptor()
}

func (HttpVerb) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[24]
}

func (x HttpVerb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpVerb.Descriptor instead.
func (HttpVerb) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{24}
}

type ComplianceListType int32

const (
	ComplianceListType_COMPLIANCE_LIST_TYPE_SCRUB   ComplianceListType = 0
	ComplianceListType_COMPLIANCE_LIST_TYPE_CONSENT ComplianceListType = 1
)

// Enum value maps for ComplianceListType.
var (
	ComplianceListType_name = map[int32]string{
		0: "COMPLIANCE_LIST_TYPE_SCRUB",
		1: "COMPLIANCE_LIST_TYPE_CONSENT",
	}
	ComplianceListType_value = map[string]int32{
		"COMPLIANCE_LIST_TYPE_SCRUB":   0,
		"COMPLIANCE_LIST_TYPE_CONSENT": 1,
	}
)

func (x ComplianceListType) Enum() *ComplianceListType {
	p := new(ComplianceListType)
	*p = x
	return p
}

func (x ComplianceListType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComplianceListType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[25].Descriptor()
}

func (ComplianceListType) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[25]
}

func (x ComplianceListType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComplianceListType.Descriptor instead.
func (ComplianceListType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{25}
}

type EventState int32

const (
	// state does not apply
	EventState_EVENT_STATE_NONE EventState = 0
	// event will start processing on external system
	EventState_EVENT_STATE_KICKOFF EventState = 1
	// event will checkup on what was started during the kickoff
	EventState_EVENT_STATE_CHECK EventState = 2
	// event will handle the records and send them downstream
	EventState_EVENT_STATE_PROCESS EventState = 3
	// event will do any remaining work needed to cleanup external system
	EventState_EVENT_STATE_CLEANUP EventState = 4
	// event is finished executing and cleaning up and can exit out of it's process
	EventState_EVENT_STATE_FINISHED EventState = 5
)

// Enum value maps for EventState.
var (
	EventState_name = map[int32]string{
		0: "EVENT_STATE_NONE",
		1: "EVENT_STATE_KICKOFF",
		2: "EVENT_STATE_CHECK",
		3: "EVENT_STATE_PROCESS",
		4: "EVENT_STATE_CLEANUP",
		5: "EVENT_STATE_FINISHED",
	}
	EventState_value = map[string]int32{
		"EVENT_STATE_NONE":     0,
		"EVENT_STATE_KICKOFF":  1,
		"EVENT_STATE_CHECK":    2,
		"EVENT_STATE_PROCESS":  3,
		"EVENT_STATE_CLEANUP":  4,
		"EVENT_STATE_FINISHED": 5,
	}
)

func (x EventState) Enum() *EventState {
	p := new(EventState)
	*p = x
	return p
}

func (x EventState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[26].Descriptor()
}

func (EventState) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[26]
}

func (x EventState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventState.Descriptor instead.
func (EventState) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{26}
}

type TimeUnit int32

const (
	// DEFAULT is decided by SURL (no quantity needed)
	TimeUnit_DEFAULT    TimeUnit = 0
	TimeUnit_TIME_WEEKS TimeUnit = 1
	TimeUnit_TIME_DAYS  TimeUnit = 2
	TimeUnit_TIME_HOURS TimeUnit = 3
)

// Enum value maps for TimeUnit.
var (
	TimeUnit_name = map[int32]string{
		0: "DEFAULT",
		1: "TIME_WEEKS",
		2: "TIME_DAYS",
		3: "TIME_HOURS",
	}
	TimeUnit_value = map[string]int32{
		"DEFAULT":    0,
		"TIME_WEEKS": 1,
		"TIME_DAYS":  2,
		"TIME_HOURS": 3,
	}
)

func (x TimeUnit) Enum() *TimeUnit {
	p := new(TimeUnit)
	*p = x
	return p
}

func (x TimeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_lms_proto_enumTypes[27].Descriptor()
}

func (TimeUnit) Type() protoreflect.EnumType {
	return &file_api_commons_lms_proto_enumTypes[27]
}

func (x TimeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeUnit.Descriptor instead.
func (TimeUnit) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{27}
}

type RecordField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type RecordType `protobuf:"varint,2,opt,name=type,proto3,enum=api.commons.RecordType" json:"type,omitempty"`
}

func (x *RecordField) Reset() {
	*x = RecordField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_lms_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordField) ProtoMessage() {}

func (x *RecordField) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_lms_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordField.ProtoReflect.Descriptor instead.
func (*RecordField) Descriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{0}
}

func (x *RecordField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecordField) GetType() RecordType {
	if x != nil {
		return x.Type
	}
	return RecordType_RECORD_TYPE_ALL
}

// ::DEPRECATED FOR EXCHANGES::  use ConstructedFilename instead
type FilePattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      FilePatternType `protobuf:"varint,1,opt,name=type,proto3,enum=api.commons.FilePatternType" json:"type,omitempty"`
	Directory string          `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
	// For GLOB type
	Filename string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	// For CONSTRUCTED type
	Prefixes      []string `protobuf:"bytes,4,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	DateFormat    string   `protobuf:"bytes,5,opt,name=date_format,json=dateFormat,proto3" json:"date_format,omitempty"`
	Suffix        string   `protobuf:"bytes,6,opt,name=suffix,proto3" json:"suffix,omitempty"`
	FileExtension string   `protobuf:"bytes,7,opt,name=file_extension,json=fileExtension,proto3" json:"file_extension,omitempty"`
	// True if date string occurs at beginning of filename
	DatePrefix bool `protobuf:"varint,8,opt,name=date_prefix,json=datePrefix,proto3" json:"date_prefix,omitempty"`
	// Day to use for date
	DayToUse RelativeDay `protobuf:"varint,9,opt,name=day_to_use,json=dayToUse,proto3,enum=api.commons.RelativeDay" json:"day_to_use,omitempty"`
}

func (x *FilePattern) Reset() {
	*x = FilePattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_lms_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilePattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilePattern) ProtoMessage() {}

func (x *FilePattern) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_lms_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilePattern.ProtoReflect.Descriptor instead.
func (*FilePattern) Descriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{1}
}

func (x *FilePattern) GetType() FilePatternType {
	if x != nil {
		return x.Type
	}
	return FilePatternType_FILE_PATTERN_TYPE_GLOB
}

func (x *FilePattern) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *FilePattern) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilePattern) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *FilePattern) GetDateFormat() string {
	if x != nil {
		return x.DateFormat
	}
	return ""
}

func (x *FilePattern) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *FilePattern) GetFileExtension() string {
	if x != nil {
		return x.FileExtension
	}
	return ""
}

func (x *FilePattern) GetDatePrefix() bool {
	if x != nil {
		return x.DatePrefix
	}
	return false
}

func (x *FilePattern) GetDayToUse() RelativeDay {
	if x != nil {
		return x.DayToUse
	}
	return RelativeDay_RELATIVE_DAY_TODAY
}

// Represents a filename that we will construct using the original uploaded name
// prefix, date in "date_format" format, and extension
// filename = date + prefix + original_filename + suffix + ext
type ConstructedFilename struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the name part that is sandwiched between prefix and suffix.
	// If this is nil, we will use the original uploaded filename.
	// if this is not nil (including empty string) we will use the nested 'value'
	// field as the filename.
	OverrideFilename *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=override_filename,json=overrideFilename,proto3" json:"override_filename,omitempty"`
	// prefix is prepended to the filename (or override_filename)
	Prefix string `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// format string like: YYYY-MM-DDhhmmss
	DateFormat string `protobuf:"bytes,5,opt,name=date_format,json=dateFormat,proto3" json:"date_format,omitempty"`
	// suffix is appeneded to the filename (or override_filename)
	// suffix will go before the extension, even if the original filename has an
	// extension included
	Suffix string `protobuf:"bytes,6,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// extension to add to the file, (if none already exists as part of the
	// original filename)
	FileExtension string `protobuf:"bytes,7,opt,name=file_extension,json=fileExtension,proto3" json:"file_extension,omitempty"`
	// If 0 (default) date is positioned very first (before prefix)
	// note that before/after filename reference the same position if
	// 'use_empty_filename' is set
	DatePosition DatePosition `protobuf:"varint,8,opt,name=date_position,json=datePosition,proto3,enum=api.commons.DatePosition" json:"date_position,omitempty"`
	// Day to use for date
	DayToUse RelativeDay `protobuf:"varint,9,opt,name=day_to_use,json=dayToUse,proto3,enum=api.commons.RelativeDay" json:"day_to_use,omitempty"`
}

func (x *ConstructedFilename) Reset() {
	*x = ConstructedFilename{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_lms_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstructedFilename) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstructedFilename) ProtoMessage() {}

func (x *ConstructedFilename) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_lms_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstructedFilename.ProtoReflect.Descriptor instead.
func (*ConstructedFilename) Descriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{2}
}

func (x *ConstructedFilename) GetOverrideFilename() *wrapperspb.StringValue {
	if x != nil {
		return x.OverrideFilename
	}
	return nil
}

func (x *ConstructedFilename) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ConstructedFilename) GetDateFormat() string {
	if x != nil {
		return x.DateFormat
	}
	return ""
}

func (x *ConstructedFilename) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *ConstructedFilename) GetFileExtension() string {
	if x != nil {
		return x.FileExtension
	}
	return ""
}

func (x *ConstructedFilename) GetDatePosition() DatePosition {
	if x != nil {
		return x.DatePosition
	}
	return DatePosition_DATE_POSITION_FIRST
}

func (x *ConstructedFilename) GetDayToUse() RelativeDay {
	if x != nil {
		return x.DayToUse
	}
	return RelativeDay_RELATIVE_DAY_TODAY
}

type PaginationTerminator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the key we are checking
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// negate the results of the operation check.
	// cases that we would have returned true, we instead return false, and vice versa
	Negate bool `protobuf:"varint,2,opt,name=negate,proto3" json:"negate,omitempty"`
	// the operation we apply to key, if true, wee terminate the paginated http request
	//
	// Types that are assignable to Op:
	//
	//	*PaginationTerminator_ExistsCheck
	//	*PaginationTerminator_NumGreaterThan
	//	*PaginationTerminator_NumLessThan
	//	*PaginationTerminator_NumEquals
	//	*PaginationTerminator_CountLessThan
	//	*PaginationTerminator_StrEquals
	//	*PaginationTerminator_StrContains
	//	*PaginationTerminator_BoolEquals
	Op isPaginationTerminator_Op `protobuf_oneof:"op"`
}

func (x *PaginationTerminator) Reset() {
	*x = PaginationTerminator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_lms_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationTerminator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationTerminator) ProtoMessage() {}

func (x *PaginationTerminator) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_lms_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationTerminator.ProtoReflect.Descriptor instead.
func (*PaginationTerminator) Descriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{3}
}

func (x *PaginationTerminator) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PaginationTerminator) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

func (m *PaginationTerminator) GetOp() isPaginationTerminator_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (x *PaginationTerminator) GetExistsCheck() bool {
	if x, ok := x.GetOp().(*PaginationTerminator_ExistsCheck); ok {
		return x.ExistsCheck
	}
	return false
}

func (x *PaginationTerminator) GetNumGreaterThan() float64 {
	if x, ok := x.GetOp().(*PaginationTerminator_NumGreaterThan); ok {
		return x.NumGreaterThan
	}
	return 0
}

func (x *PaginationTerminator) GetNumLessThan() float64 {
	if x, ok := x.GetOp().(*PaginationTerminator_NumLessThan); ok {
		return x.NumLessThan
	}
	return 0
}

func (x *PaginationTerminator) GetNumEquals() float64 {
	if x, ok := x.GetOp().(*PaginationTerminator_NumEquals); ok {
		return x.NumEquals
	}
	return 0
}

func (x *PaginationTerminator) GetCountLessThan() int64 {
	if x, ok := x.GetOp().(*PaginationTerminator_CountLessThan); ok {
		return x.CountLessThan
	}
	return 0
}

func (x *PaginationTerminator) GetStrEquals() string {
	if x, ok := x.GetOp().(*PaginationTerminator_StrEquals); ok {
		return x.StrEquals
	}
	return ""
}

func (x *PaginationTerminator) GetStrContains() string {
	if x, ok := x.GetOp().(*PaginationTerminator_StrContains); ok {
		return x.StrContains
	}
	return ""
}

func (x *PaginationTerminator) GetBoolEquals() bool {
	if x, ok := x.GetOp().(*PaginationTerminator_BoolEquals); ok {
		return x.BoolEquals
	}
	return false
}

type isPaginationTerminator_Op interface {
	isPaginationTerminator_Op()
}

type PaginationTerminator_ExistsCheck struct {
	// if true terminate if the key exists.
	// if false terminate if the key does not exist.
	ExistsCheck bool `protobuf:"varint,3,opt,name=exists_check,json=existsCheck,proto3,oneof"`
}

type PaginationTerminator_NumGreaterThan struct {
	// terminate if the number value the key points to is greater than this
	NumGreaterThan float64 `protobuf:"fixed64,4,opt,name=num_greater_than,json=numGreaterThan,proto3,oneof"`
}

type PaginationTerminator_NumLessThan struct {
	// terminate if the number value the key points to is less than this
	NumLessThan float64 `protobuf:"fixed64,5,opt,name=num_less_than,json=numLessThan,proto3,oneof"`
}

type PaginationTerminator_NumEquals struct {
	// terminate if the number value the key points to is equal to this
	NumEquals float64 `protobuf:"fixed64,6,opt,name=num_equals,json=numEquals,proto3,oneof"`
}

type PaginationTerminator_CountLessThan struct {
	// terminate if the number of records in the array key points is less than this.
	// if key points to a non array, it has a count of 0
	CountLessThan int64 `protobuf:"varint,7,opt,name=count_less_than,json=countLessThan,proto3,oneof"`
}

type PaginationTerminator_StrEquals struct {
	// terminate if the str value the key points to equals this
	StrEquals string `protobuf:"bytes,8,opt,name=str_equals,json=strEquals,proto3,oneof"`
}

type PaginationTerminator_StrContains struct {
	// terminate if the str value the key points to contains this
	StrContains string `protobuf:"bytes,9,opt,name=str_contains,json=strContains,proto3,oneof"`
}

type PaginationTerminator_BoolEquals struct {
	// termintae if the bool value key points equals this
	BoolEquals bool `protobuf:"varint,10,opt,name=bool_equals,json=boolEquals,proto3,oneof"`
}

func (*PaginationTerminator_ExistsCheck) isPaginationTerminator_Op() {}

func (*PaginationTerminator_NumGreaterThan) isPaginationTerminator_Op() {}

func (*PaginationTerminator_NumLessThan) isPaginationTerminator_Op() {}

func (*PaginationTerminator_NumEquals) isPaginationTerminator_Op() {}

func (*PaginationTerminator_CountLessThan) isPaginationTerminator_Op() {}

func (*PaginationTerminator_StrEquals) isPaginationTerminator_Op() {}

func (*PaginationTerminator_StrContains) isPaginationTerminator_Op() {}

func (*PaginationTerminator_BoolEquals) isPaginationTerminator_Op() {}

type Expiration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// units can be weeks, days, or hours
	Units TimeUnit `protobuf:"varint,1,opt,name=units,proto3,enum=api.commons.TimeUnit" json:"units,omitempty"`
	// max 1 year
	Quantity int64 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *Expiration) Reset() {
	*x = Expiration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_lms_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expiration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expiration) ProtoMessage() {}

func (x *Expiration) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_lms_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expiration.ProtoReflect.Descriptor instead.
func (*Expiration) Descriptor() ([]byte, []int) {
	return file_api_commons_lms_proto_rawDescGZIP(), []int{4}
}

func (x *Expiration) GetUnits() TimeUnit {
	if x != nil {
		return x.Units
	}
	return TimeUnit_DEFAULT
}

func (x *Expiration) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

var File_api_commons_lms_proto protoreflect.FileDescriptor

var file_api_commons_lms_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x36, 0x0a,
	0x0a, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x79, 0x52, 0x08, 0x64, 0x61, 0x79,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x22, 0xd0, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x79, 0x52, 0x08,
	0x64, 0x61, 0x79, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x22, 0xf1, 0x02, 0x0a, 0x14, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x68, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x75,
	0x6d, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68,
	0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x45, 0x71, 0x75,
	0x61, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x1f, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x23,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x71, 0x75, 0x61,
	0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6c,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x42, 0x04, 0x0a, 0x02, 0x6f, 0x70, 0x22, 0x55, 0x0a, 0x0a,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2a, 0x34, 0x0a, 0x08, 0x43, 0x72, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4d, 0x53,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x45, 0x59, 0x10, 0x01, 0x2a, 0x8d, 0x01, 0x0a, 0x0e, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x52, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x52, 0x49, 0x43, 0x48,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x04, 0x2a, 0x3f, 0x0a, 0x0d, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52,
	0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4d, 0x53,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4a, 0x53, 0x10, 0x01, 0x2a, 0x3d, 0x0a, 0x0e, 0x44, 0x65,
	0x64, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x0a,
	0x4b, 0x45, 0x45, 0x50, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x4b, 0x45, 0x45, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4b,
	0x45, 0x45, 0x50, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x49, 0x0a, 0x07, 0x52, 0x75, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x55,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e,
	0x53, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x56, 0x4f, 0x4b, 0x45, 0x10, 0x01, 0x2a, 0xbb, 0x05, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10,
	0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10,
	0x06, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x5a, 0x49, 0x50, 0x10, 0x12, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4f, 0x53, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x57, 0x10,
	0x09, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54,
	0x41, 0x4d, 0x50, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x0c, 0x12, 0x24, 0x0a, 0x20,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x41, 0x59,
	0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x53, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x10,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x13, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x49, 0x52, 0x54, 0x48, 0x10, 0x14, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x15, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x48, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x53, 0x10, 0x18, 0x2a, 0xd5, 0x04, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x12, 0x1b, 0x0a,
	0x17, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x57, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x07, 0x12, 0x1c, 0x0a,
	0x18, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x59,
	0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f,
	0x46, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45,
	0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x5a, 0x49, 0x50, 0x10, 0x0e, 0x12,
	0x15, 0x0a, 0x11, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f,
	0x43, 0x49, 0x41, 0x4c, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x49, 0x52,
	0x54, 0x48, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x11, 0x12, 0x1d,
	0x0a, 0x19, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x12, 0x12, 0x14, 0x0a,
	0x10, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x14,
	0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x48, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x15, 0x2a, 0x88, 0x01, 0x0a,
	0x0a, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x43, 0x53, 0x56, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x4d, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x46, 0x49,
	0x58, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0xc6, 0x01, 0x0a, 0x19, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x28, 0x0a,
	0x24, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x49, 0x50, 0x45, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x2a, 0x5c, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x50, 0x49, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x46, 0x54, 0x50, 0x10, 0x02, 0x2a, 0xd3,
	0x01, 0x0a, 0x13, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x30, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4b, 0x45, 0x45, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x28, 0x0a, 0x24, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x55,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x03, 0x2a, 0x4f, 0x0a, 0x10, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x42, 0x53, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b,
	0x45, 0x45, 0x50, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x41, 0x52, 0x44, 0x10, 0x01, 0x2a, 0x63, 0x0a, 0x0d, 0x44, 0x69, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x2a, 0x3c, 0x0a, 0x0a, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x46, 0x54, 0x50, 0x10, 0x01, 0x2a, 0x40, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45,
	0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0x56, 0x0a, 0x0b, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d,
	0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c,
	0x10, 0x02, 0x2a, 0x8f, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52,
	0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x5f, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x53, 0x53,
	0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x53, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x53, 0x10, 0x07, 0x2a, 0x3e, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x4f, 0x52, 0x10, 0x01, 0x2a, 0x8a, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x44, 0x75, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x42, 0x4f, 0x54, 0x48,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x04,
	0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x4e, 0x45, 0x49, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x05, 0x2a, 0x84, 0x01, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x45, 0x46,
	0x4f, 0x52, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x03, 0x2a, 0x5f, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x54, 0x4f, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x5f,
	0x59, 0x45, 0x53, 0x54, 0x45, 0x52, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x46, 0x52, 0x49, 0x44, 0x41, 0x59, 0x10, 0x02, 0x2a, 0x70, 0x0a, 0x0f, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0xb8, 0x01, 0x0a, 0x11,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x52,
	0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x43,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x59,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x46,
	0x5f, 0x44, 0x41, 0x59, 0x10, 0x04, 0x2a, 0x31, 0x0a, 0x08, 0x48, 0x74, 0x74, 0x70, 0x56, 0x65,
	0x72, 0x62, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x5f,
	0x47, 0x45, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x56, 0x45,
	0x52, 0x42, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x56, 0x0a, 0x12, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x55, 0x42, 0x10, 0x00, 0x12,
	0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x2a, 0x9e, 0x01, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x05, 0x2a, 0x46, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x03, 0x42, 0x90, 0x01, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x42, 0x08,
	0x4c, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x58, 0xaa, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xca, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0xe2, 0x02, 0x17, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0c, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_lms_proto_rawDescOnce sync.Once
	file_api_commons_lms_proto_rawDescData = file_api_commons_lms_proto_rawDesc
)

func file_api_commons_lms_proto_rawDescGZIP() []byte {
	file_api_commons_lms_proto_rawDescOnce.Do(func() {
		file_api_commons_lms_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_lms_proto_rawDescData)
	})
	return file_api_commons_lms_proto_rawDescData
}

var file_api_commons_lms_proto_enumTypes = make([]protoimpl.EnumInfo, 28)
var file_api_commons_lms_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_api_commons_lms_proto_goTypes = []interface{}{
	(CronType)(0),                  // 0: api.commons.CronType
	(EnrichmentType)(0),            // 1: api.commons.EnrichmentType
	(PrimarySource)(0),             // 2: api.commons.PrimarySource
	(DedupKeyPolicy)(0),            // 3: api.commons.DedupKeyPolicy
	(RunType)(0),                   // 4: api.commons.RunType
	(ConsentActionType)(0),         // 5: api.commons.ConsentActionType
	(RecordType)(0),                // 6: api.commons.RecordType
	(FieldType)(0),                 // 7: api.commons.FieldType
	(FileFormat)(0),                // 8: api.commons.FileFormat
	(PipelineElementStatusType)(0), // 9: api.commons.PipelineElementStatusType
	(EntrypointType)(0),            // 10: api.commons.EntrypointType
	(DuplicatePolicyType)(0),       // 11: api.commons.DuplicatePolicyType
	(AbsentPolicyType)(0),          // 12: api.commons.AbsentPolicyType
	(DialOrderType)(0),             // 13: api.commons.DialOrderType
	(ExportType)(0),                // 14: api.commons.ExportType
	(SortOrder)(0),                 // 15: api.commons.SortOrder
	(CompareType)(0),               // 16: api.commons.CompareType
	(CompareOperator)(0),           // 17: api.commons.CompareOperator
	(ChainOperator)(0),             // 18: api.commons.ChainOperator
	(DeDupActions)(0),              // 19: api.commons.DeDupActions
	(DatePosition)(0),              // 20: api.commons.DatePosition
	(RelativeDay)(0),               // 21: api.commons.RelativeDay
	(FilePatternType)(0),           // 22: api.commons.FilePatternType
	(DateTimePrecision)(0),         // 23: api.commons.DateTimePrecision
	(HttpVerb)(0),                  // 24: api.commons.HttpVerb
	(ComplianceListType)(0),        // 25: api.commons.ComplianceListType
	(EventState)(0),                // 26: api.commons.EventState
	(TimeUnit)(0),                  // 27: api.commons.TimeUnit
	(*RecordField)(nil),            // 28: api.commons.RecordField
	(*FilePattern)(nil),            // 29: api.commons.FilePattern
	(*ConstructedFilename)(nil),    // 30: api.commons.ConstructedFilename
	(*PaginationTerminator)(nil),   // 31: api.commons.PaginationTerminator
	(*Expiration)(nil),             // 32: api.commons.Expiration
	(*wrapperspb.StringValue)(nil), // 33: google.protobuf.StringValue
}
var file_api_commons_lms_proto_depIdxs = []int32{
	6,  // 0: api.commons.RecordField.type:type_name -> api.commons.RecordType
	22, // 1: api.commons.FilePattern.type:type_name -> api.commons.FilePatternType
	21, // 2: api.commons.FilePattern.day_to_use:type_name -> api.commons.RelativeDay
	33, // 3: api.commons.ConstructedFilename.override_filename:type_name -> google.protobuf.StringValue
	20, // 4: api.commons.ConstructedFilename.date_position:type_name -> api.commons.DatePosition
	21, // 5: api.commons.ConstructedFilename.day_to_use:type_name -> api.commons.RelativeDay
	27, // 6: api.commons.Expiration.units:type_name -> api.commons.TimeUnit
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_api_commons_lms_proto_init() }
func file_api_commons_lms_proto_init() {
	if File_api_commons_lms_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_commons_lms_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_lms_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilePattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_lms_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstructedFilename); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_lms_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationTerminator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_lms_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expiration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_commons_lms_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*PaginationTerminator_ExistsCheck)(nil),
		(*PaginationTerminator_NumGreaterThan)(nil),
		(*PaginationTerminator_NumLessThan)(nil),
		(*PaginationTerminator_NumEquals)(nil),
		(*PaginationTerminator_CountLessThan)(nil),
		(*PaginationTerminator_StrEquals)(nil),
		(*PaginationTerminator_StrContains)(nil),
		(*PaginationTerminator_BoolEquals)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_lms_proto_rawDesc,
			NumEnums:      28,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_lms_proto_goTypes,
		DependencyIndexes: file_api_commons_lms_proto_depIdxs,
		EnumInfos:         file_api_commons_lms_proto_enumTypes,
		MessageInfos:      file_api_commons_lms_proto_msgTypes,
	}.Build()
	File_api_commons_lms_proto = out.File
	file_api_commons_lms_proto_rawDesc = nil
	file_api_commons_lms_proto_goTypes = nil
	file_api_commons_lms_proto_depIdxs = nil
}
