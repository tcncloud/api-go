// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: api/commons/scorecards.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CategoryType int32

const (
	CategoryType_INVALID     CategoryType = 0
	CategoryType_SKILL_CALLS CategoryType = 1
	CategoryType_MANUAL_DIAL CategoryType = 2
)

// Enum value maps for CategoryType.
var (
	CategoryType_name = map[int32]string{
		0: "INVALID",
		1: "SKILL_CALLS",
		2: "MANUAL_DIAL",
	}
	CategoryType_value = map[string]int32{
		"INVALID":     0,
		"SKILL_CALLS": 1,
		"MANUAL_DIAL": 2,
	}
)

func (x CategoryType) Enum() *CategoryType {
	p := new(CategoryType)
	*p = x
	return p
}

func (x CategoryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CategoryType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_scorecards_proto_enumTypes[0].Descriptor()
}

func (CategoryType) Type() protoreflect.EnumType {
	return &file_api_commons_scorecards_proto_enumTypes[0]
}

func (x CategoryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CategoryType.Descriptor instead.
func (CategoryType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{0}
}

// Evaluation is how a scorecard gets evaluated.
// It is not a boolean because it might grow (i.e. MIXED).
type EvaluationType int32

const (
	EvaluationType_EVALUATE_MANUAL EvaluationType = 0 // a person must fill out (score) the scorecard
	EvaluationType_EVALUATE_AUTO   EvaluationType = 1 // the system fills out (scores) the scorecard
)

// Enum value maps for EvaluationType.
var (
	EvaluationType_name = map[int32]string{
		0: "EVALUATE_MANUAL",
		1: "EVALUATE_AUTO",
	}
	EvaluationType_value = map[string]int32{
		"EVALUATE_MANUAL": 0,
		"EVALUATE_AUTO":   1,
	}
)

func (x EvaluationType) Enum() *EvaluationType {
	p := new(EvaluationType)
	*p = x
	return p
}

func (x EvaluationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvaluationType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_scorecards_proto_enumTypes[1].Descriptor()
}

func (EvaluationType) Type() protoreflect.EnumType {
	return &file_api_commons_scorecards_proto_enumTypes[1]
}

func (x EvaluationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvaluationType.Descriptor instead.
func (EvaluationType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{1}
}

// ScoreType is how the score is calculated.
// It is not a boolean because it might grow (i.e. OTHER).
type ScoreType int32

const (
	ScoreType_SCORE_SIMPLE_SUM        ScoreType = 0 // score is total awarded points / total possible points
	ScoreType_SCORE_WEIGHTED_SUM      ScoreType = 1 // score is sum of each section (simple sum) * section weight
	ScoreType_SCORE_EVEN_WEIGHTED_SUM ScoreType = 2 // weighted sum where weights are expected to be even (+/-1)
)

// Enum value maps for ScoreType.
var (
	ScoreType_name = map[int32]string{
		0: "SCORE_SIMPLE_SUM",
		1: "SCORE_WEIGHTED_SUM",
		2: "SCORE_EVEN_WEIGHTED_SUM",
	}
	ScoreType_value = map[string]int32{
		"SCORE_SIMPLE_SUM":        0,
		"SCORE_WEIGHTED_SUM":      1,
		"SCORE_EVEN_WEIGHTED_SUM": 2,
	}
)

func (x ScoreType) Enum() *ScoreType {
	p := new(ScoreType)
	*p = x
	return p
}

func (x ScoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_scorecards_proto_enumTypes[2].Descriptor()
}

func (ScoreType) Type() protoreflect.EnumType {
	return &file_api_commons_scorecards_proto_enumTypes[2]
}

func (x ScoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScoreType.Descriptor instead.
func (ScoreType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{2}
}

// FailType is how affect the scoring of the scorecard.
// Some answer options have points, which add to the score.
// Other options have fail types which are applied, when chosen.
type FailType int32

const (
	FailType_FAIL_QUESTION  FailType = 0 // default. fail the question
	FailType_FAIL_SECTION   FailType = 1 // fail the scorecard's section
	FailType_FAIL_SCORECARD FailType = 2 // fail the entire scorecard
)

// Enum value maps for FailType.
var (
	FailType_name = map[int32]string{
		0: "FAIL_QUESTION",
		1: "FAIL_SECTION",
		2: "FAIL_SCORECARD",
	}
	FailType_value = map[string]int32{
		"FAIL_QUESTION":  0,
		"FAIL_SECTION":   1,
		"FAIL_SCORECARD": 2,
	}
)

func (x FailType) Enum() *FailType {
	p := new(FailType)
	*p = x
	return p
}

func (x FailType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_scorecards_proto_enumTypes[3].Descriptor()
}

func (FailType) Type() protoreflect.EnumType {
	return &file_api_commons_scorecards_proto_enumTypes[3]
}

func (x FailType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FailType.Descriptor instead.
func (FailType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{3}
}

// ScorecardState is state of the scorecard, which
// determines if, or how, it can be used.
type ScorecardState int32

const (
	// Default. All scorecards start as draft.
	// User must change to not draft in order to use.
	ScorecardState_SCORECARD_IS_DRAFT ScorecardState = 0
	// Scorecard is no longer a draft, but has not been used.
	// Updates are allowed.
	ScorecardState_SCORECARD_IS_READY ScorecardState = 1
	// Scorecard is in use and cannot be edited.
	// The system marks as in use on first use.
	// UI cannot update to, or from, this state.
	ScorecardState_SCORECARD_IS_IN_USE ScorecardState = 2
	// Scorecard is a template and is read-only.
	// Scorecards cannot be updated to, or from, this state.
	ScorecardState_SCORECARD_IS_TEMPLATE ScorecardState = 3
	// Scorecard is disabled and cannot be used for scoring.
	// Can only be reached from, or updated to, READY.
	ScorecardState_SCORECARD_IS_READY_DISABLED ScorecardState = 4
	// Scorecard is disabled and cannot be used for scoring.
	// Can only be reached from, or updated to, IN_USE.
	ScorecardState_SCORECARD_IS_IN_USE_DISABLED ScorecardState = 5
)

// Enum value maps for ScorecardState.
var (
	ScorecardState_name = map[int32]string{
		0: "SCORECARD_IS_DRAFT",
		1: "SCORECARD_IS_READY",
		2: "SCORECARD_IS_IN_USE",
		3: "SCORECARD_IS_TEMPLATE",
		4: "SCORECARD_IS_READY_DISABLED",
		5: "SCORECARD_IS_IN_USE_DISABLED",
	}
	ScorecardState_value = map[string]int32{
		"SCORECARD_IS_DRAFT":           0,
		"SCORECARD_IS_READY":           1,
		"SCORECARD_IS_IN_USE":          2,
		"SCORECARD_IS_TEMPLATE":        3,
		"SCORECARD_IS_READY_DISABLED":  4,
		"SCORECARD_IS_IN_USE_DISABLED": 5,
	}
)

func (x ScorecardState) Enum() *ScorecardState {
	p := new(ScorecardState)
	*p = x
	return p
}

func (x ScorecardState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScorecardState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_scorecards_proto_enumTypes[4].Descriptor()
}

func (ScorecardState) Type() protoreflect.EnumType {
	return &file_api_commons_scorecards_proto_enumTypes[4]
}

func (x ScorecardState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScorecardState.Descriptor instead.
func (ScorecardState) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{4}
}

// EvaluationState is enum to describe where the scorecard is in the state of the evaluation
type EvaluationState int32

const (
	// Default.  All evaluations will begin in progress.
	EvaluationState_EVALUATION_IN_PROGRESS EvaluationState = 0
	// Evaluation is completed.
	// Agent passed the scorecard.
	EvaluationState_EVALUATION_PASSED EvaluationState = 1
	// Evaluation is completed.
	// Agent failed the scorecard.
	EvaluationState_EVALUATION_FAILED EvaluationState = 2
)

// Enum value maps for EvaluationState.
var (
	EvaluationState_name = map[int32]string{
		0: "EVALUATION_IN_PROGRESS",
		1: "EVALUATION_PASSED",
		2: "EVALUATION_FAILED",
	}
	EvaluationState_value = map[string]int32{
		"EVALUATION_IN_PROGRESS": 0,
		"EVALUATION_PASSED":      1,
		"EVALUATION_FAILED":      2,
	}
)

func (x EvaluationState) Enum() *EvaluationState {
	p := new(EvaluationState)
	*p = x
	return p
}

func (x EvaluationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvaluationState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_scorecards_proto_enumTypes[5].Descriptor()
}

func (EvaluationState) Type() protoreflect.EnumType {
	return &file_api_commons_scorecards_proto_enumTypes[5]
}

func (x EvaluationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvaluationState.Descriptor instead.
func (EvaluationState) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{5}
}

// RiskLevel is an assigned risk level in an evaluation.
type RiskLevel int32

const (
	RiskLevel_RISK_LEVEL_NONE      RiskLevel = 0
	RiskLevel_RISK_LEVEL_LOW       RiskLevel = 1
	RiskLevel_RISK_LEVEL_MEDIUM    RiskLevel = 2
	RiskLevel_RISK_LEVEL_HIGH      RiskLevel = 3
	RiskLevel_RISK_LEVEL_RISK_FREE RiskLevel = 4
)

// Enum value maps for RiskLevel.
var (
	RiskLevel_name = map[int32]string{
		0: "RISK_LEVEL_NONE",
		1: "RISK_LEVEL_LOW",
		2: "RISK_LEVEL_MEDIUM",
		3: "RISK_LEVEL_HIGH",
		4: "RISK_LEVEL_RISK_FREE",
	}
	RiskLevel_value = map[string]int32{
		"RISK_LEVEL_NONE":      0,
		"RISK_LEVEL_LOW":       1,
		"RISK_LEVEL_MEDIUM":    2,
		"RISK_LEVEL_HIGH":      3,
		"RISK_LEVEL_RISK_FREE": 4,
	}
)

func (x RiskLevel) Enum() *RiskLevel {
	p := new(RiskLevel)
	*p = x
	return p
}

func (x RiskLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_scorecards_proto_enumTypes[6].Descriptor()
}

func (RiskLevel) Type() protoreflect.EnumType {
	return &file_api_commons_scorecards_proto_enumTypes[6]
}

func (x RiskLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskLevel.Descriptor instead.
func (RiskLevel) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{6}
}

// TimeFilter allows optional filtering by timestamp
// Multple fields are ANDed together.
type TimeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=eq,proto3" json:"eq,omitempty"`   // must match timestamp exactly
	Gte *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=gte,proto3" json:"gte,omitempty"` // must be greater than or equal to timestamp
	Lte *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=lte,proto3" json:"lte,omitempty"` // must be less than or equal to timestamp
	Gt  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=gt,proto3" json:"gt,omitempty"`   // must be greater than timestamp
	Lt  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lt,proto3" json:"lt,omitempty"`   // must be less than timestamp
}

func (x *TimeFilter) Reset() {
	*x = TimeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeFilter) ProtoMessage() {}

func (x *TimeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeFilter.ProtoReflect.Descriptor instead.
func (*TimeFilter) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{0}
}

func (x *TimeFilter) GetEq() *timestamppb.Timestamp {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *TimeFilter) GetGte() *timestamppb.Timestamp {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TimeFilter) GetLte() *timestamppb.Timestamp {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TimeFilter) GetGt() *timestamppb.Timestamp {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TimeFilter) GetLt() *timestamppb.Timestamp {
	if x != nil {
		return x.Lt
	}
	return nil
}

// Category wraps a set of skills (or labels).
// A scorecard can only be used to evaluate calls
// with the same skill(s) as its category.
type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId    int64   `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`                 // unique id of the category
	AuthorId      string  `protobuf:"bytes,3,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`                        // user who created the category
	Title         string  `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                              // title, or name, of the category
	Description   string  `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                  // description of category (i.e. purpose and use)
	SkillProfiles []int64 `protobuf:"varint,6,rep,packed,name=skill_profiles,json=skillProfiles,proto3" json:"skill_profiles,omitempty"` // skill_profiles ids related to category
	Version       int32   `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`                                         // current version of the category
	// Deprecated: Marked as deprecated in api/commons/scorecards.proto.
	CallTypes    []CallType_Enum `protobuf:"varint,10,rep,packed,name=call_types,json=callTypes,proto3,enum=api.commons.CallType_Enum" json:"call_types,omitempty"`  // Deprecated. Use scorecard.call_types
	IsSystem     bool            `protobuf:"varint,11,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`                                           // whether a category is a system category (read only)
	CategoryType CategoryType    `protobuf:"varint,12,opt,name=category_type,json=categoryType,proto3,enum=api.commons.CategoryType" json:"category_type,omitempty"` // Type of category, (skill calls or manual calls)
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{1}
}

func (x *Category) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Category) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *Category) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Category) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Category) GetSkillProfiles() []int64 {
	if x != nil {
		return x.SkillProfiles
	}
	return nil
}

func (x *Category) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Deprecated: Marked as deprecated in api/commons/scorecards.proto.
func (x *Category) GetCallTypes() []CallType_Enum {
	if x != nil {
		return x.CallTypes
	}
	return nil
}

func (x *Category) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *Category) GetCategoryType() CategoryType {
	if x != nil {
		return x.CategoryType
	}
	return CategoryType_INVALID
}

// Evaluation represents a evaluated scorecard.
// A Evaluation represents a single call and single agent that has been evaluated.
type Evaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvaluationId       int64                     `protobuf:"varint,2,opt,name=evaluation_id,json=evaluationId,proto3" json:"evaluation_id,omitempty"`                                           // unique id of the evaluation scorecard
	ScorecardId        int64                     `protobuf:"varint,3,opt,name=scorecard_id,json=scorecardId,proto3" json:"scorecard_id,omitempty"`                                              // id of evaluated scorecard
	ScorerId           string                    `protobuf:"bytes,4,opt,name=scorer_id,json=scorerId,proto3" json:"scorer_id,omitempty"`                                                        // user_id of person performing evaluation
	CallSid            int64                     `protobuf:"varint,6,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`                                                          // sid of the call being evaluated
	Score              float64                   `protobuf:"fixed64,7,opt,name=score,proto3" json:"score,omitempty"`                                                                            // calculated score as percentage to two decimal places
	EvaluationState    EvaluationState           `protobuf:"varint,8,opt,name=evaluation_state,json=evaluationState,proto3,enum=api.commons.EvaluationState" json:"evaluation_state,omitempty"` // state of the current evaluation.
	EvaluationSections []*EvaluationSection      `protobuf:"bytes,9,rep,name=evaluation_sections,json=evaluationSections,proto3" json:"evaluation_sections,omitempty"`
	CompletedAt        *timestamppb.Timestamp    `protobuf:"bytes,10,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`                        // time evaluation was completed
	AgentUserId        string                    `protobuf:"bytes,13,opt,name=agent_user_id,json=agentUserId,proto3" json:"agent_user_id,omitempty"`                      // user_id of the agent being evaluated
	CallType           CallType_Enum             `protobuf:"varint,14,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"` // call type of call being evaluated
	TranscriptSid      int64                     `protobuf:"varint,15,opt,name=transcript_sid,json=transcriptSid,proto3" json:"transcript_sid,omitempty"`                 // optional - transcript sid associated with evaluation
	CustomFields       []*Evaluation_CustomField `protobuf:"bytes,17,rep,name=custom_fields,json=customFields,proto3" json:"custom_fields,omitempty"`                     // Custom key-value fields.
	DeletedBy          string                    `protobuf:"bytes,18,opt,name=deleted_by,json=deletedBy,proto3" json:"deleted_by,omitempty"`                              // tcn user id of person who deleted evaluation
}

func (x *Evaluation) Reset() {
	*x = Evaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Evaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evaluation) ProtoMessage() {}

func (x *Evaluation) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evaluation.ProtoReflect.Descriptor instead.
func (*Evaluation) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{2}
}

func (x *Evaluation) GetEvaluationId() int64 {
	if x != nil {
		return x.EvaluationId
	}
	return 0
}

func (x *Evaluation) GetScorecardId() int64 {
	if x != nil {
		return x.ScorecardId
	}
	return 0
}

func (x *Evaluation) GetScorerId() string {
	if x != nil {
		return x.ScorerId
	}
	return ""
}

func (x *Evaluation) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *Evaluation) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Evaluation) GetEvaluationState() EvaluationState {
	if x != nil {
		return x.EvaluationState
	}
	return EvaluationState_EVALUATION_IN_PROGRESS
}

func (x *Evaluation) GetEvaluationSections() []*EvaluationSection {
	if x != nil {
		return x.EvaluationSections
	}
	return nil
}

func (x *Evaluation) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *Evaluation) GetAgentUserId() string {
	if x != nil {
		return x.AgentUserId
	}
	return ""
}

func (x *Evaluation) GetCallType() CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return CallType_INBOUND
}

func (x *Evaluation) GetTranscriptSid() int64 {
	if x != nil {
		return x.TranscriptSid
	}
	return 0
}

func (x *Evaluation) GetCustomFields() []*Evaluation_CustomField {
	if x != nil {
		return x.CustomFields
	}
	return nil
}

func (x *Evaluation) GetDeletedBy() string {
	if x != nil {
		return x.DeletedBy
	}
	return ""
}

// EvaluationSection is collection of evaluation questions in a section
type EvaluationSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvaluationSectionId     int64                     `protobuf:"varint,2,opt,name=evaluation_section_id,json=evaluationSectionId,proto3" json:"evaluation_section_id,omitempty"`             // unique id of evaluation section
	EvaluationId            int64                     `protobuf:"varint,3,opt,name=evaluation_id,json=evaluationId,proto3" json:"evaluation_id,omitempty"`                                    // unique id of evaluation
	SectionId               int64                     `protobuf:"varint,4,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`                                             // unique id of section
	Points                  int32                     `protobuf:"varint,5,opt,name=points,proto3" json:"points,omitempty"`                                                                    // amount of points scored
	PossiblePoints          int32                     `protobuf:"varint,6,opt,name=possible_points,json=possiblePoints,proto3" json:"possible_points,omitempty"`                              // amount of points possible
	SortOrder               int32                     `protobuf:"varint,7,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`                                             // order number of evaluation section
	DeletedAt               *timestamppb.Timestamp    `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`                                              // time evaluation section was deleted at
	CreatedAt               *timestamppb.Timestamp    `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                              // time evaluation section was created at
	EvaluationQuestions     []*EvaluationQuestion     `protobuf:"bytes,10,rep,name=evaluation_questions,json=evaluationQuestions,proto3" json:"evaluation_questions,omitempty"`               // array of evaluation questions in a section
	AutoEvaluationQuestions []*AutoEvaluationQuestion `protobuf:"bytes,11,rep,name=auto_evaluation_questions,json=autoEvaluationQuestions,proto3" json:"auto_evaluation_questions,omitempty"` // array of auto evaluation questions in a section
	Skipped                 bool                      `protobuf:"varint,12,opt,name=skipped,proto3" json:"skipped,omitempty"`                                                                 // whether the section is skipped (NOT included in score calculation)
}

func (x *EvaluationSection) Reset() {
	*x = EvaluationSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationSection) ProtoMessage() {}

func (x *EvaluationSection) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationSection.ProtoReflect.Descriptor instead.
func (*EvaluationSection) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{3}
}

func (x *EvaluationSection) GetEvaluationSectionId() int64 {
	if x != nil {
		return x.EvaluationSectionId
	}
	return 0
}

func (x *EvaluationSection) GetEvaluationId() int64 {
	if x != nil {
		return x.EvaluationId
	}
	return 0
}

func (x *EvaluationSection) GetSectionId() int64 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

func (x *EvaluationSection) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *EvaluationSection) GetPossiblePoints() int32 {
	if x != nil {
		return x.PossiblePoints
	}
	return 0
}

func (x *EvaluationSection) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *EvaluationSection) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *EvaluationSection) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EvaluationSection) GetEvaluationQuestions() []*EvaluationQuestion {
	if x != nil {
		return x.EvaluationQuestions
	}
	return nil
}

func (x *EvaluationSection) GetAutoEvaluationQuestions() []*AutoEvaluationQuestion {
	if x != nil {
		return x.AutoEvaluationQuestions
	}
	return nil
}

func (x *EvaluationSection) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

// EvaluationQuestion is a question in an evaluation
type EvaluationQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvaluationQuestionId int64                        `protobuf:"varint,2,opt,name=evaluation_question_id,json=evaluationQuestionId,proto3" json:"evaluation_question_id,omitempty"` // unique id of evaluation question
	EvaluationId         int64                        `protobuf:"varint,3,opt,name=evaluation_id,json=evaluationId,proto3" json:"evaluation_id,omitempty"`                           // unique id of evaluation
	ScorecardQuestionId  int64                        `protobuf:"varint,4,opt,name=scorecard_question_id,json=scorecardQuestionId,proto3" json:"scorecard_question_id,omitempty"`    // unique id of scorecard question
	Skipped              bool                         `protobuf:"varint,5,opt,name=skipped,proto3" json:"skipped,omitempty"`                                                         // if question was skipped
	Points               int64                        `protobuf:"varint,6,opt,name=points,proto3" json:"points,omitempty"`                                                           // total points awarded to question
	Answers              []*EvaluationQuestion_Answer `protobuf:"bytes,7,rep,name=answers,proto3" json:"answers,omitempty"`                                                          // answers selected
	EvaluationSectionId  int64                        `protobuf:"varint,8,opt,name=evaluation_section_id,json=evaluationSectionId,proto3" json:"evaluation_section_id,omitempty"`    // unique id of evaluation section
	Comment              string                       `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`                                                          // comment on the evaluation question
	SortOrder            int32                        `protobuf:"varint,10,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`                                   // order number of evaluation question
}

func (x *EvaluationQuestion) Reset() {
	*x = EvaluationQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationQuestion) ProtoMessage() {}

func (x *EvaluationQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationQuestion.ProtoReflect.Descriptor instead.
func (*EvaluationQuestion) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{4}
}

func (x *EvaluationQuestion) GetEvaluationQuestionId() int64 {
	if x != nil {
		return x.EvaluationQuestionId
	}
	return 0
}

func (x *EvaluationQuestion) GetEvaluationId() int64 {
	if x != nil {
		return x.EvaluationId
	}
	return 0
}

func (x *EvaluationQuestion) GetScorecardQuestionId() int64 {
	if x != nil {
		return x.ScorecardQuestionId
	}
	return 0
}

func (x *EvaluationQuestion) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *EvaluationQuestion) GetPoints() int64 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *EvaluationQuestion) GetAnswers() []*EvaluationQuestion_Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *EvaluationQuestion) GetEvaluationSectionId() int64 {
	if x != nil {
		return x.EvaluationSectionId
	}
	return 0
}

func (x *EvaluationQuestion) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *EvaluationQuestion) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

// AutoEvaluation is an auto evaluation
type AutoEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoEvaluationId       int64                         `protobuf:"varint,2,opt,name=auto_evaluation_id,json=autoEvaluationId,proto3" json:"auto_evaluation_id,omitempty"` // unique id of the auto evaluation
	ScorecardId            int64                         `protobuf:"varint,3,opt,name=scorecard_id,json=scorecardId,proto3" json:"scorecard_id,omitempty"`                  // id of evaluated scorecard
	CallSid                int64                         `protobuf:"varint,4,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`                              // sid of the call being evaluated
	AgentUserId            string                        `protobuf:"bytes,5,opt,name=agent_user_id,json=agentUserId,proto3" json:"agent_user_id,omitempty"`                 // user_id of the agent being evaluated
	AutoEvaluationSections []*AutoEvaluationSection      `protobuf:"bytes,6,rep,name=auto_evaluation_sections,json=autoEvaluationSections,proto3" json:"auto_evaluation_sections,omitempty"`
	CompletedAt            *timestamppb.Timestamp        `protobuf:"bytes,7,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`                        // time evaluation was completed
	DeletedAt              *timestamppb.Timestamp        `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`                              // time evaluation was deleted
	CallType               CallType_Enum                 `protobuf:"varint,9,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"` // call type of call being evaluated
	TranscriptSid          int64                         `protobuf:"varint,10,opt,name=transcript_sid,json=transcriptSid,proto3" json:"transcript_sid,omitempty"`                // optional - transcript sid associated with evaluation
	ExpressionMatched      bool                          `protobuf:"varint,11,opt,name=expression_matched,json=expressionMatched,proto3" json:"expression_matched,omitempty"`    // whether the expression was matched or not
	RiskLevel              RiskLevel                     `protobuf:"varint,12,opt,name=risk_level,json=riskLevel,proto3,enum=api.commons.RiskLevel" json:"risk_level,omitempty"` // The risk level of the evaluation
	CallLength             int32                         `protobuf:"varint,16,opt,name=call_length,json=callLength,proto3" json:"call_length,omitempty"`                         // duration of the call audio
	ScorecardInfo          *AutoEvaluation_ScorecardInfo `protobuf:"bytes,17,opt,name=scorecard_info,json=scorecardInfo,proto3" json:"scorecard_info,omitempty"`                 // read-only info provided from the parent scorecard
	CategoryInfo           *AutoEvaluation_CategoryInfo  `protobuf:"bytes,18,opt,name=category_info,json=categoryInfo,proto3" json:"category_info,omitempty"`                    // read-only info provided from the parent category
}

func (x *AutoEvaluation) Reset() {
	*x = AutoEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoEvaluation) ProtoMessage() {}

func (x *AutoEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoEvaluation.ProtoReflect.Descriptor instead.
func (*AutoEvaluation) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{5}
}

func (x *AutoEvaluation) GetAutoEvaluationId() int64 {
	if x != nil {
		return x.AutoEvaluationId
	}
	return 0
}

func (x *AutoEvaluation) GetScorecardId() int64 {
	if x != nil {
		return x.ScorecardId
	}
	return 0
}

func (x *AutoEvaluation) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *AutoEvaluation) GetAgentUserId() string {
	if x != nil {
		return x.AgentUserId
	}
	return ""
}

func (x *AutoEvaluation) GetAutoEvaluationSections() []*AutoEvaluationSection {
	if x != nil {
		return x.AutoEvaluationSections
	}
	return nil
}

func (x *AutoEvaluation) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *AutoEvaluation) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *AutoEvaluation) GetCallType() CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return CallType_INBOUND
}

func (x *AutoEvaluation) GetTranscriptSid() int64 {
	if x != nil {
		return x.TranscriptSid
	}
	return 0
}

func (x *AutoEvaluation) GetExpressionMatched() bool {
	if x != nil {
		return x.ExpressionMatched
	}
	return false
}

func (x *AutoEvaluation) GetRiskLevel() RiskLevel {
	if x != nil {
		return x.RiskLevel
	}
	return RiskLevel_RISK_LEVEL_NONE
}

func (x *AutoEvaluation) GetCallLength() int32 {
	if x != nil {
		return x.CallLength
	}
	return 0
}

func (x *AutoEvaluation) GetScorecardInfo() *AutoEvaluation_ScorecardInfo {
	if x != nil {
		return x.ScorecardInfo
	}
	return nil
}

func (x *AutoEvaluation) GetCategoryInfo() *AutoEvaluation_CategoryInfo {
	if x != nil {
		return x.CategoryInfo
	}
	return nil
}

// AutoEvaluationQuestion is an auto question in an evaluation.
type AutoEvaluationQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoEvaluationQuestionId int64     `protobuf:"varint,2,opt,name=auto_evaluation_question_id,json=autoEvaluationQuestionId,proto3" json:"auto_evaluation_question_id,omitempty"` // unique id of auto evaluation question.
	AutoEvaluationId         int64     `protobuf:"varint,3,opt,name=auto_evaluation_id,json=autoEvaluationId,proto3" json:"auto_evaluation_id,omitempty"`                           // unique id of evaluation.
	AutoEvaluationSectionId  int64     `protobuf:"varint,4,opt,name=auto_evaluation_section_id,json=autoEvaluationSectionId,proto3" json:"auto_evaluation_section_id,omitempty"`    // unique id of evaluation section.
	AutoQuestionId           int64     `protobuf:"varint,5,opt,name=auto_question_id,json=autoQuestionId,proto3" json:"auto_question_id,omitempty"`                                 // unique id of auto question.
	Flagged                  []int64   `protobuf:"varint,6,rep,packed,name=flagged,proto3" json:"flagged,omitempty"`                                                                // a subset of flag sids found.
	Passed                   bool      `protobuf:"varint,7,opt,name=passed,proto3" json:"passed,omitempty"`                                                                         // whether the auto question evaluation was passed/failed.
	SortOrder                int32     `protobuf:"varint,8,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`                                                  // order number of auto evaluation question.
	RiskLevel                RiskLevel `protobuf:"varint,11,opt,name=risk_level,json=riskLevel,proto3,enum=api.commons.RiskLevel" json:"risk_level,omitempty"`                      // The risk level of the evaluation question.
	ExpressionMatched        bool      `protobuf:"varint,14,opt,name=expression_matched,json=expressionMatched,proto3" json:"expression_matched,omitempty"`                         // Whether the flag expression matched.
}

func (x *AutoEvaluationQuestion) Reset() {
	*x = AutoEvaluationQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoEvaluationQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoEvaluationQuestion) ProtoMessage() {}

func (x *AutoEvaluationQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoEvaluationQuestion.ProtoReflect.Descriptor instead.
func (*AutoEvaluationQuestion) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{6}
}

func (x *AutoEvaluationQuestion) GetAutoEvaluationQuestionId() int64 {
	if x != nil {
		return x.AutoEvaluationQuestionId
	}
	return 0
}

func (x *AutoEvaluationQuestion) GetAutoEvaluationId() int64 {
	if x != nil {
		return x.AutoEvaluationId
	}
	return 0
}

func (x *AutoEvaluationQuestion) GetAutoEvaluationSectionId() int64 {
	if x != nil {
		return x.AutoEvaluationSectionId
	}
	return 0
}

func (x *AutoEvaluationQuestion) GetAutoQuestionId() int64 {
	if x != nil {
		return x.AutoQuestionId
	}
	return 0
}

func (x *AutoEvaluationQuestion) GetFlagged() []int64 {
	if x != nil {
		return x.Flagged
	}
	return nil
}

func (x *AutoEvaluationQuestion) GetPassed() bool {
	if x != nil {
		return x.Passed
	}
	return false
}

func (x *AutoEvaluationQuestion) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *AutoEvaluationQuestion) GetRiskLevel() RiskLevel {
	if x != nil {
		return x.RiskLevel
	}
	return RiskLevel_RISK_LEVEL_NONE
}

func (x *AutoEvaluationQuestion) GetExpressionMatched() bool {
	if x != nil {
		return x.ExpressionMatched
	}
	return false
}

// AutoEvaluationSection is an auto Section in an evaluation.
type AutoEvaluationSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoEvaluationSectionId int64                     `protobuf:"varint,2,opt,name=auto_evaluation_section_id,json=autoEvaluationSectionId,proto3" json:"auto_evaluation_section_id,omitempty"` // unique id of auto evaluation section
	AutoEvaluationId        int64                     `protobuf:"varint,3,opt,name=auto_evaluation_id,json=autoEvaluationId,proto3" json:"auto_evaluation_id,omitempty"`                        // unique id of auto evaluation
	SectionId               int64                     `protobuf:"varint,4,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`                                               // unique id of section
	SortOrder               int32                     `protobuf:"varint,5,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`                                               // order number of evaluation section
	DeletedAt               *timestamppb.Timestamp    `protobuf:"bytes,6,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`                                                // time evaluation section was deleted at
	CreatedAt               *timestamppb.Timestamp    `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                // time evaluation section was created at
	AutoEvaluationQuestions []*AutoEvaluationQuestion `protobuf:"bytes,8,rep,name=auto_evaluation_questions,json=autoEvaluationQuestions,proto3" json:"auto_evaluation_questions,omitempty"`    // array of auto evaluation questions in a section
	RiskLevel               RiskLevel                 `protobuf:"varint,9,opt,name=risk_level,json=riskLevel,proto3,enum=api.commons.RiskLevel" json:"risk_level,omitempty"`                    // The risk level of the evaluation section
}

func (x *AutoEvaluationSection) Reset() {
	*x = AutoEvaluationSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoEvaluationSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoEvaluationSection) ProtoMessage() {}

func (x *AutoEvaluationSection) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoEvaluationSection.ProtoReflect.Descriptor instead.
func (*AutoEvaluationSection) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{7}
}

func (x *AutoEvaluationSection) GetAutoEvaluationSectionId() int64 {
	if x != nil {
		return x.AutoEvaluationSectionId
	}
	return 0
}

func (x *AutoEvaluationSection) GetAutoEvaluationId() int64 {
	if x != nil {
		return x.AutoEvaluationId
	}
	return 0
}

func (x *AutoEvaluationSection) GetSectionId() int64 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

func (x *AutoEvaluationSection) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *AutoEvaluationSection) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *AutoEvaluationSection) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AutoEvaluationSection) GetAutoEvaluationQuestions() []*AutoEvaluationQuestion {
	if x != nil {
		return x.AutoEvaluationQuestions
	}
	return nil
}

func (x *AutoEvaluationSection) GetRiskLevel() RiskLevel {
	if x != nil {
		return x.RiskLevel
	}
	return RiskLevel_RISK_LEVEL_NONE
}

// Question is a question in the Question Library.
// It is not to be confused with ScorecardQuestion, which represents
// a question inside of a scorecard.
type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId  int64       `protobuf:"varint,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"` // unique question id
	AuthorId    string      `protobuf:"bytes,3,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`        // the creator of the question
	Question    string      `protobuf:"bytes,4,opt,name=question,proto3" json:"question,omitempty"`                        // the question to display
	Description string      `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                  // extra info or context for the question
	Categories  []*Category `protobuf:"bytes,6,rep,name=categories,proto3" json:"categories,omitempty"`                    // the categories associated with the question
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{8}
}

func (x *Question) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *Question) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *Question) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *Question) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Question) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

// ScorecardQuestion represents a question inside of a scorecard.
type ScorecardQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScorecardQuestionId int64                          `protobuf:"varint,2,opt,name=scorecard_question_id,json=scorecardQuestionId,proto3" json:"scorecard_question_id,omitempty"` // unique id of the scorecard question
	Question            string                         `protobuf:"bytes,3,opt,name=question,proto3" json:"question,omitempty"`                                                     // question to display
	Description         string                         `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                               // optional; additional info about question
	QuestionId          int64                          `protobuf:"varint,5,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`                              // optional; library question id
	AllowSkip           bool                           `protobuf:"varint,6,opt,name=allow_skip,json=allowSkip,proto3" json:"allow_skip,omitempty"`                                 // question can be excluded from scoring (allow n/a)
	Answers             []*ScorecardQuestion_Answer    `protobuf:"bytes,7,rep,name=answers,proto3" json:"answers,omitempty"`                                                       // the answer options with point values
	MultiSelect         *ScorecardQuestion_MultiSelect `protobuf:"bytes,8,opt,name=multi_select,json=multiSelect,proto3" json:"multi_select,omitempty"`                            // single-select if nil; otherwise multiselect
	ScorecardId         int64                          `protobuf:"varint,9,opt,name=scorecard_id,json=scorecardId,proto3" json:"scorecard_id,omitempty"`                           // question belongs to scorecard
	SectionId           int64                          `protobuf:"varint,10,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`                                // question belongs to scorecard section
	Version             int32                          `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`                                                     // current version of scorecard question
	SortOrder           int32                          `protobuf:"varint,12,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`                                // order number of scorecard question
}

func (x *ScorecardQuestion) Reset() {
	*x = ScorecardQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScorecardQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardQuestion) ProtoMessage() {}

func (x *ScorecardQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardQuestion.ProtoReflect.Descriptor instead.
func (*ScorecardQuestion) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{9}
}

func (x *ScorecardQuestion) GetScorecardQuestionId() int64 {
	if x != nil {
		return x.ScorecardQuestionId
	}
	return 0
}

func (x *ScorecardQuestion) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *ScorecardQuestion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardQuestion) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *ScorecardQuestion) GetAllowSkip() bool {
	if x != nil {
		return x.AllowSkip
	}
	return false
}

func (x *ScorecardQuestion) GetAnswers() []*ScorecardQuestion_Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *ScorecardQuestion) GetMultiSelect() *ScorecardQuestion_MultiSelect {
	if x != nil {
		return x.MultiSelect
	}
	return nil
}

func (x *ScorecardQuestion) GetScorecardId() int64 {
	if x != nil {
		return x.ScorecardId
	}
	return 0
}

func (x *ScorecardQuestion) GetSectionId() int64 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

func (x *ScorecardQuestion) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ScorecardQuestion) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

// Section represents a section of a scorecard (template).
type Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionId     int64                `protobuf:"varint,2,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`             // unique section id
	ScorecardId   int64                `protobuf:"varint,3,opt,name=scorecard_id,json=scorecardId,proto3" json:"scorecard_id,omitempty"`       // scorecard to which section belongs
	Title         string               `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                       // section title or name
	Description   string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                           // extra context about the section
	Weight        uint32               `protobuf:"varint,6,opt,name=weight,proto3" json:"weight,omitempty"`                                    // used for scorecards with weighted scoring
	Questions     []*ScorecardQuestion `protobuf:"bytes,7,rep,name=questions,proto3" json:"questions,omitempty"`                               // the questions in the section
	Version       int32                `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`                                  // current version of the section
	SortOrder     int32                `protobuf:"varint,9,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`             // order number of section
	AutoQuestions []*AutoQuestion      `protobuf:"bytes,11,rep,name=auto_questions,json=autoQuestions,proto3" json:"auto_questions,omitempty"` // the auto questions in the section
}

func (x *Section) Reset() {
	*x = Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Section) ProtoMessage() {}

func (x *Section) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Section.ProtoReflect.Descriptor instead.
func (*Section) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{10}
}

func (x *Section) GetSectionId() int64 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

func (x *Section) GetScorecardId() int64 {
	if x != nil {
		return x.ScorecardId
	}
	return 0
}

func (x *Section) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Section) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Section) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Section) GetQuestions() []*ScorecardQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *Section) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Section) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *Section) GetAutoQuestions() []*AutoQuestion {
	if x != nil {
		return x.AutoQuestions
	}
	return nil
}

// Scorecard represents a scorecard (template).
// A scorecard can be used to score a call.
type Scorecard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScorecardId       int64          `protobuf:"varint,2,opt,name=scorecard_id,json=scorecardId,proto3" json:"scorecard_id,omitempty"`                                          // unique id of the scorecard
	AuthorId          string         `protobuf:"bytes,3,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`                                                    // user_id of the scorecard creator
	Title             string         `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                                                          // title, or name, of scorecard
	Description       string         `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                                              // description of scorecard (i.e. purpose and use)
	PassScore         float64        `protobuf:"fixed64,6,opt,name=pass_score,json=passScore,proto3" json:"pass_score,omitempty"`                                               // percentage to two decimal places between (0 or 1?) and 100
	ScoreType         ScoreType      `protobuf:"varint,7,opt,name=score_type,json=scoreType,proto3,enum=api.commons.ScoreType" json:"score_type,omitempty"`                     // how a score is calculated (i.e. simple sum)
	EvaluationType    EvaluationType `protobuf:"varint,8,opt,name=evaluation_type,json=evaluationType,proto3,enum=api.commons.EvaluationType" json:"evaluation_type,omitempty"` // how the scorecard gets evaluated (i.e. manual)
	AllowFeedback     bool           `protobuf:"varint,10,opt,name=allow_feedback,json=allowFeedback,proto3" json:"allow_feedback,omitempty"`                                   // default false (disable agent feedback)
	DistributeWeights bool           `protobuf:"varint,11,opt,name=distribute_weights,json=distributeWeights,proto3" json:"distribute_weights,omitempty"`                       // FE only; if true, weights are evenly distributed and locked
	Category          *Category      `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty"`                                                                   // sets the required agent skills
	Sections          []*Section     `protobuf:"bytes,13,rep,name=sections,proto3" json:"sections,omitempty"`                                                                   // logical groupings of questions
	Version           int32          `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`                                                                    // current version of the scorecard
	State             ScorecardState `protobuf:"varint,15,opt,name=state,proto3,enum=api.commons.ScorecardState" json:"state,omitempty"`                                        // determines how a scorecard can be used
	// Deprecated: Marked as deprecated in api/commons/scorecards.proto.
	IsAdHoc         bool            `protobuf:"varint,16,opt,name=is_ad_hoc,json=isAdHoc,proto3" json:"is_ad_hoc,omitempty"`                                           // Deprecated. Use Ad Hoc category.
	CustomFieldKeys []string        `protobuf:"bytes,19,rep,name=custom_field_keys,json=customFieldKeys,proto3" json:"custom_field_keys,omitempty"`                    // Optional. Set of unique keys for custom key-value fields.
	CallTypes       []CallType_Enum `protobuf:"varint,20,rep,packed,name=call_types,json=callTypes,proto3,enum=api.commons.CallType_Enum" json:"call_types,omitempty"` // call types supported by scorecard
}

func (x *Scorecard) Reset() {
	*x = Scorecard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scorecard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scorecard) ProtoMessage() {}

func (x *Scorecard) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scorecard.ProtoReflect.Descriptor instead.
func (*Scorecard) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{11}
}

func (x *Scorecard) GetScorecardId() int64 {
	if x != nil {
		return x.ScorecardId
	}
	return 0
}

func (x *Scorecard) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *Scorecard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Scorecard) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Scorecard) GetPassScore() float64 {
	if x != nil {
		return x.PassScore
	}
	return 0
}

func (x *Scorecard) GetScoreType() ScoreType {
	if x != nil {
		return x.ScoreType
	}
	return ScoreType_SCORE_SIMPLE_SUM
}

func (x *Scorecard) GetEvaluationType() EvaluationType {
	if x != nil {
		return x.EvaluationType
	}
	return EvaluationType_EVALUATE_MANUAL
}

func (x *Scorecard) GetAllowFeedback() bool {
	if x != nil {
		return x.AllowFeedback
	}
	return false
}

func (x *Scorecard) GetDistributeWeights() bool {
	if x != nil {
		return x.DistributeWeights
	}
	return false
}

func (x *Scorecard) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Scorecard) GetSections() []*Section {
	if x != nil {
		return x.Sections
	}
	return nil
}

func (x *Scorecard) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Scorecard) GetState() ScorecardState {
	if x != nil {
		return x.State
	}
	return ScorecardState_SCORECARD_IS_DRAFT
}

// Deprecated: Marked as deprecated in api/commons/scorecards.proto.
func (x *Scorecard) GetIsAdHoc() bool {
	if x != nil {
		return x.IsAdHoc
	}
	return false
}

func (x *Scorecard) GetCustomFieldKeys() []string {
	if x != nil {
		return x.CustomFieldKeys
	}
	return nil
}

func (x *Scorecard) GetCallTypes() []CallType_Enum {
	if x != nil {
		return x.CallTypes
	}
	return nil
}

// AutoQuestion represents an automatically scored question.
type AutoQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoQuestionId int64 `protobuf:"varint,2,opt,name=auto_question_id,json=autoQuestionId,proto3" json:"auto_question_id,omitempty"` // unique id of the auto question.
	FlagSid        int64 `protobuf:"varint,3,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`                        // Deprecated. Use FlagExpr.
	ScorecardId    int64 `protobuf:"varint,5,opt,name=scorecard_id,json=scorecardId,proto3" json:"scorecard_id,omitempty"`            // auto question belongs to scorecard.
	AutoSectionId  int64 `protobuf:"varint,6,opt,name=auto_section_id,json=autoSectionId,proto3" json:"auto_section_id,omitempty"`    // auto question belongs to auto section.
	SortOrder      int32 `protobuf:"varint,7,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`                  // order number of auto question.
	// Boolean expression of which flags to match
	FlagExpression *AutoQuestion_FlagExpr `protobuf:"bytes,10,opt,name=flag_expression,json=flagExpression,proto3" json:"flag_expression,omitempty"`
	Question       string                 `protobuf:"bytes,11,opt,name=question,proto3" json:"question,omitempty"`                                                // The question to display.
	Description    string                 `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`                                          // Optional. Extra info about question.
	QuestionId     int64                  `protobuf:"varint,13,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`                         // Optional. Library question id.
	RiskLevel      RiskLevel              `protobuf:"varint,14,opt,name=risk_level,json=riskLevel,proto3,enum=api.commons.RiskLevel" json:"risk_level,omitempty"` // The risk level of the evaluation question.
}

func (x *AutoQuestion) Reset() {
	*x = AutoQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoQuestion) ProtoMessage() {}

func (x *AutoQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoQuestion.ProtoReflect.Descriptor instead.
func (*AutoQuestion) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{12}
}

func (x *AutoQuestion) GetAutoQuestionId() int64 {
	if x != nil {
		return x.AutoQuestionId
	}
	return 0
}

func (x *AutoQuestion) GetFlagSid() int64 {
	if x != nil {
		return x.FlagSid
	}
	return 0
}

func (x *AutoQuestion) GetScorecardId() int64 {
	if x != nil {
		return x.ScorecardId
	}
	return 0
}

func (x *AutoQuestion) GetAutoSectionId() int64 {
	if x != nil {
		return x.AutoSectionId
	}
	return 0
}

func (x *AutoQuestion) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *AutoQuestion) GetFlagExpression() *AutoQuestion_FlagExpr {
	if x != nil {
		return x.FlagExpression
	}
	return nil
}

func (x *AutoQuestion) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *AutoQuestion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AutoQuestion) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *AutoQuestion) GetRiskLevel() RiskLevel {
	if x != nil {
		return x.RiskLevel
	}
	return RiskLevel_RISK_LEVEL_NONE
}

// CustomField represents a custom key-value pair defined by users.
type Evaluation_CustomField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`     // Keys are defined on scorecard.
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"` // Each field MUST be populated on scoring.
}

func (x *Evaluation_CustomField) Reset() {
	*x = Evaluation_CustomField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Evaluation_CustomField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evaluation_CustomField) ProtoMessage() {}

func (x *Evaluation_CustomField) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evaluation_CustomField.ProtoReflect.Descriptor instead.
func (*Evaluation_CustomField) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Evaluation_CustomField) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Evaluation_CustomField) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

// Answer represents an answer option of an evaluation question
type EvaluationQuestion_Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnswerOption string `protobuf:"bytes,1,opt,name=answer_option,json=answerOption,proto3" json:"answer_option,omitempty"` // answer option to display to the user
	// two results are possible: award points or fail
	//
	// Types that are assignable to Result:
	//
	//	*EvaluationQuestion_Answer_Points
	//	*EvaluationQuestion_Answer_FailType
	Result isEvaluationQuestion_Answer_Result `protobuf_oneof:"result"`
}

func (x *EvaluationQuestion_Answer) Reset() {
	*x = EvaluationQuestion_Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationQuestion_Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationQuestion_Answer) ProtoMessage() {}

func (x *EvaluationQuestion_Answer) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationQuestion_Answer.ProtoReflect.Descriptor instead.
func (*EvaluationQuestion_Answer) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{4, 0}
}

func (x *EvaluationQuestion_Answer) GetAnswerOption() string {
	if x != nil {
		return x.AnswerOption
	}
	return ""
}

func (m *EvaluationQuestion_Answer) GetResult() isEvaluationQuestion_Answer_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *EvaluationQuestion_Answer) GetPoints() uint32 {
	if x, ok := x.GetResult().(*EvaluationQuestion_Answer_Points); ok {
		return x.Points
	}
	return 0
}

func (x *EvaluationQuestion_Answer) GetFailType() FailType {
	if x, ok := x.GetResult().(*EvaluationQuestion_Answer_FailType); ok {
		return x.FailType
	}
	return FailType_FAIL_QUESTION
}

type isEvaluationQuestion_Answer_Result interface {
	isEvaluationQuestion_Answer_Result()
}

type EvaluationQuestion_Answer_Points struct {
	Points uint32 `protobuf:"varint,2,opt,name=points,proto3,oneof"` // points to award if option selected
}

type EvaluationQuestion_Answer_FailType struct {
	FailType FailType `protobuf:"varint,3,opt,name=fail_type,json=failType,proto3,enum=api.commons.FailType,oneof"` // how to fail if option selected (e.g. fail section)
}

func (*EvaluationQuestion_Answer_Points) isEvaluationQuestion_Answer_Result() {}

func (*EvaluationQuestion_Answer_FailType) isEvaluationQuestion_Answer_Result() {}

type AutoEvaluation_ScorecardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"` // title of the scorecard.
}

func (x *AutoEvaluation_ScorecardInfo) Reset() {
	*x = AutoEvaluation_ScorecardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoEvaluation_ScorecardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoEvaluation_ScorecardInfo) ProtoMessage() {}

func (x *AutoEvaluation_ScorecardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoEvaluation_ScorecardInfo.ProtoReflect.Descriptor instead.
func (*AutoEvaluation_ScorecardInfo) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{5, 0}
}

func (x *AutoEvaluation_ScorecardInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type AutoEvaluation_CategoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"` // title of the category.
}

func (x *AutoEvaluation_CategoryInfo) Reset() {
	*x = AutoEvaluation_CategoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoEvaluation_CategoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoEvaluation_CategoryInfo) ProtoMessage() {}

func (x *AutoEvaluation_CategoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoEvaluation_CategoryInfo.ProtoReflect.Descriptor instead.
func (*AutoEvaluation_CategoryInfo) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{5, 1}
}

func (x *AutoEvaluation_CategoryInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// Answer are all the possible answers for a scorecard question.
type ScorecardQuestion_Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnswerOption string `protobuf:"bytes,1,opt,name=answer_option,json=answerOption,proto3" json:"answer_option,omitempty"` // answer option to display to the user
	// two results are possible: award points or fail
	//
	// Types that are assignable to Result:
	//
	//	*ScorecardQuestion_Answer_Points
	//	*ScorecardQuestion_Answer_FailType
	Result isScorecardQuestion_Answer_Result `protobuf_oneof:"result"`
}

func (x *ScorecardQuestion_Answer) Reset() {
	*x = ScorecardQuestion_Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScorecardQuestion_Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardQuestion_Answer) ProtoMessage() {}

func (x *ScorecardQuestion_Answer) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardQuestion_Answer.ProtoReflect.Descriptor instead.
func (*ScorecardQuestion_Answer) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ScorecardQuestion_Answer) GetAnswerOption() string {
	if x != nil {
		return x.AnswerOption
	}
	return ""
}

func (m *ScorecardQuestion_Answer) GetResult() isScorecardQuestion_Answer_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *ScorecardQuestion_Answer) GetPoints() uint32 {
	if x, ok := x.GetResult().(*ScorecardQuestion_Answer_Points); ok {
		return x.Points
	}
	return 0
}

func (x *ScorecardQuestion_Answer) GetFailType() FailType {
	if x, ok := x.GetResult().(*ScorecardQuestion_Answer_FailType); ok {
		return x.FailType
	}
	return FailType_FAIL_QUESTION
}

type isScorecardQuestion_Answer_Result interface {
	isScorecardQuestion_Answer_Result()
}

type ScorecardQuestion_Answer_Points struct {
	Points uint32 `protobuf:"varint,2,opt,name=points,proto3,oneof"` // points to award if option selected
}

type ScorecardQuestion_Answer_FailType struct {
	FailType FailType `protobuf:"varint,3,opt,name=fail_type,json=failType,proto3,enum=api.commons.FailType,oneof"` // how to fail if option selected (e.g. fail section)
}

func (*ScorecardQuestion_Answer_Points) isScorecardQuestion_Answer_Result() {}

func (*ScorecardQuestion_Answer_FailType) isScorecardQuestion_Answer_Result() {}

// MultiSelect sets parameters for multi-select answer types.
type ScorecardQuestion_MultiSelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum points to award to the question.
	// If not set, maximum points is sum of all answer options.
	MaxPoints int64 `protobuf:"varint,1,opt,name=max_points,json=maxPoints,proto3" json:"max_points,omitempty"`
}

func (x *ScorecardQuestion_MultiSelect) Reset() {
	*x = ScorecardQuestion_MultiSelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScorecardQuestion_MultiSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardQuestion_MultiSelect) ProtoMessage() {}

func (x *ScorecardQuestion_MultiSelect) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardQuestion_MultiSelect.ProtoReflect.Descriptor instead.
func (*ScorecardQuestion_MultiSelect) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{9, 1}
}

func (x *ScorecardQuestion_MultiSelect) GetMaxPoints() int64 {
	if x != nil {
		return x.MaxPoints
	}
	return 0
}

// FlagExpr defines a boolean expression of filters.
type AutoQuestion_FlagExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Boolean and operator.
	And []*AutoQuestion_FlagExpr `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	// Optional. Boolean or operator.
	Or []*AutoQuestion_FlagExpr `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	// Optional. Flag to match.
	Flag *AutoQuestion_FlagExpr_Flag `protobuf:"bytes,3,opt,name=flag,proto3" json:"flag,omitempty"`
	// Optional. Boolean not operator.
	Not *AutoQuestion_FlagExpr `protobuf:"bytes,4,opt,name=not,proto3" json:"not,omitempty"`
}

func (x *AutoQuestion_FlagExpr) Reset() {
	*x = AutoQuestion_FlagExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoQuestion_FlagExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoQuestion_FlagExpr) ProtoMessage() {}

func (x *AutoQuestion_FlagExpr) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoQuestion_FlagExpr.ProtoReflect.Descriptor instead.
func (*AutoQuestion_FlagExpr) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{12, 0}
}

func (x *AutoQuestion_FlagExpr) GetAnd() []*AutoQuestion_FlagExpr {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *AutoQuestion_FlagExpr) GetOr() []*AutoQuestion_FlagExpr {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *AutoQuestion_FlagExpr) GetFlag() *AutoQuestion_FlagExpr_Flag {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *AutoQuestion_FlagExpr) GetNot() *AutoQuestion_FlagExpr {
	if x != nil {
		return x.Not
	}
	return nil
}

// Filter defines a filter.
type AutoQuestion_FlagExpr_Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Filter sid.
	FlagSid int64 `protobuf:"varint,1,opt,name=flag_sid,json=flagSid,proto3" json:"flag_sid,omitempty"`
}

func (x *AutoQuestion_FlagExpr_Flag) Reset() {
	*x = AutoQuestion_FlagExpr_Flag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_scorecards_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoQuestion_FlagExpr_Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoQuestion_FlagExpr_Flag) ProtoMessage() {}

func (x *AutoQuestion_FlagExpr_Flag) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_scorecards_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoQuestion_FlagExpr_Flag.ProtoReflect.Descriptor instead.
func (*AutoQuestion_FlagExpr_Flag) Descriptor() ([]byte, []int) {
	return file_api_commons_scorecards_proto_rawDescGZIP(), []int{12, 0, 0}
}

func (x *AutoQuestion_FlagExpr_Flag) GetFlagSid() int64 {
	if x != nil {
		return x.FlagSid
	}
	return 0
}

var File_api_commons_scorecards_proto protoreflect.FileDescriptor

var file_api_commons_scorecards_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x1a, 0x15, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xec, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x65, 0x71, 0x12, 0x2c,
	0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x03,
	0x6c, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x67, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x67, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02,
	0x6c, 0x74, 0x22, 0xdd, 0x02, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x9f, 0x05, 0x0a, 0x0a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x4f, 0x0a, 0x13, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x53, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x1a, 0x35, 0x0a,
	0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x22, 0xb0, 0x04, 0x0a, 0x11, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x52, 0x0a, 0x14, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x19,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x22, 0x8e, 0x04, 0x0a, 0x12, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x16, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x40, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x87,
	0x01, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcd, 0x06, 0x0a, 0x0e, 0x41, 0x75, 0x74,
	0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x18, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x53, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09,
	0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x50, 0x0a, 0x0e, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x25, 0x0a, 0x0d, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x1a, 0x24, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xa3, 0x03, 0x0a, 0x16, 0x41, 0x75, 0x74,
	0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x61, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x2d, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x22, 0xce,
	0x03, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x61, 0x75,
	0x74, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x5f, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x17, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0xbd, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x88, 0x05, 0x0a, 0x11, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x3f, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x1a, 0x87, 0x01, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x09,
	0x66, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x2c, 0x0a, 0x0b,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x07, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xae, 0x05, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x61, 0x73,
	0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a,
	0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x08,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x64, 0x5f, 0x68, 0x6f, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x48, 0x6f, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x22, 0xad, 0x05, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61,
	0x75, 0x74, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x66, 0x6c, 0x61, 0x67, 0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x0e, 0x66, 0x6c, 0x61, 0x67, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x8a, 0x02, 0x0a, 0x08, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x34, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x6c, 0x61, 0x67, 0x45, 0x78, 0x70, 0x72, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x03, 0x6e, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x1a,
	0x21, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x53,
	0x69, 0x64, 0x2a, 0x3d, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x10,
	0x02, 0x2a, 0x38, 0x0a, 0x0e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x45, 0x5f,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x56, 0x41, 0x4c,
	0x55, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x2a, 0x56, 0x0a, 0x09, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x4f, 0x52,
	0x45, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x44,
	0x5f, 0x53, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x55,
	0x4d, 0x10, 0x02, 0x2a, 0x43, 0x0a, 0x08, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x2a, 0xb7, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x43, 0x4f, 0x52, 0x45, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x46,
	0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x43, 0x4f, 0x52, 0x45, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x49, 0x53, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x05, 0x2a, 0x5b, 0x0a, 0x0f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x56, 0x41, 0x4c,
	0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a,
	0x7a, 0x0a, 0x09, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x04, 0x42, 0x97, 0x01, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x42,
	0x0f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x58,
	0xaa, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xca, 0x02,
	0x0b, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xe2, 0x02, 0x17, 0x41,
	0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_scorecards_proto_rawDescOnce sync.Once
	file_api_commons_scorecards_proto_rawDescData = file_api_commons_scorecards_proto_rawDesc
)

func file_api_commons_scorecards_proto_rawDescGZIP() []byte {
	file_api_commons_scorecards_proto_rawDescOnce.Do(func() {
		file_api_commons_scorecards_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_scorecards_proto_rawDescData)
	})
	return file_api_commons_scorecards_proto_rawDescData
}

var file_api_commons_scorecards_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_api_commons_scorecards_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_api_commons_scorecards_proto_goTypes = []interface{}{
	(CategoryType)(0),                     // 0: api.commons.CategoryType
	(EvaluationType)(0),                   // 1: api.commons.EvaluationType
	(ScoreType)(0),                        // 2: api.commons.ScoreType
	(FailType)(0),                         // 3: api.commons.FailType
	(ScorecardState)(0),                   // 4: api.commons.ScorecardState
	(EvaluationState)(0),                  // 5: api.commons.EvaluationState
	(RiskLevel)(0),                        // 6: api.commons.RiskLevel
	(*TimeFilter)(nil),                    // 7: api.commons.TimeFilter
	(*Category)(nil),                      // 8: api.commons.Category
	(*Evaluation)(nil),                    // 9: api.commons.Evaluation
	(*EvaluationSection)(nil),             // 10: api.commons.EvaluationSection
	(*EvaluationQuestion)(nil),            // 11: api.commons.EvaluationQuestion
	(*AutoEvaluation)(nil),                // 12: api.commons.AutoEvaluation
	(*AutoEvaluationQuestion)(nil),        // 13: api.commons.AutoEvaluationQuestion
	(*AutoEvaluationSection)(nil),         // 14: api.commons.AutoEvaluationSection
	(*Question)(nil),                      // 15: api.commons.Question
	(*ScorecardQuestion)(nil),             // 16: api.commons.ScorecardQuestion
	(*Section)(nil),                       // 17: api.commons.Section
	(*Scorecard)(nil),                     // 18: api.commons.Scorecard
	(*AutoQuestion)(nil),                  // 19: api.commons.AutoQuestion
	(*Evaluation_CustomField)(nil),        // 20: api.commons.Evaluation.CustomField
	(*EvaluationQuestion_Answer)(nil),     // 21: api.commons.EvaluationQuestion.Answer
	(*AutoEvaluation_ScorecardInfo)(nil),  // 22: api.commons.AutoEvaluation.ScorecardInfo
	(*AutoEvaluation_CategoryInfo)(nil),   // 23: api.commons.AutoEvaluation.CategoryInfo
	(*ScorecardQuestion_Answer)(nil),      // 24: api.commons.ScorecardQuestion.Answer
	(*ScorecardQuestion_MultiSelect)(nil), // 25: api.commons.ScorecardQuestion.MultiSelect
	(*AutoQuestion_FlagExpr)(nil),         // 26: api.commons.AutoQuestion.FlagExpr
	(*AutoQuestion_FlagExpr_Flag)(nil),    // 27: api.commons.AutoQuestion.FlagExpr.Flag
	(*timestamppb.Timestamp)(nil),         // 28: google.protobuf.Timestamp
	(CallType_Enum)(0),                    // 29: api.commons.CallType.Enum
}
var file_api_commons_scorecards_proto_depIdxs = []int32{
	28, // 0: api.commons.TimeFilter.eq:type_name -> google.protobuf.Timestamp
	28, // 1: api.commons.TimeFilter.gte:type_name -> google.protobuf.Timestamp
	28, // 2: api.commons.TimeFilter.lte:type_name -> google.protobuf.Timestamp
	28, // 3: api.commons.TimeFilter.gt:type_name -> google.protobuf.Timestamp
	28, // 4: api.commons.TimeFilter.lt:type_name -> google.protobuf.Timestamp
	29, // 5: api.commons.Category.call_types:type_name -> api.commons.CallType.Enum
	0,  // 6: api.commons.Category.category_type:type_name -> api.commons.CategoryType
	5,  // 7: api.commons.Evaluation.evaluation_state:type_name -> api.commons.EvaluationState
	10, // 8: api.commons.Evaluation.evaluation_sections:type_name -> api.commons.EvaluationSection
	28, // 9: api.commons.Evaluation.completed_at:type_name -> google.protobuf.Timestamp
	29, // 10: api.commons.Evaluation.call_type:type_name -> api.commons.CallType.Enum
	20, // 11: api.commons.Evaluation.custom_fields:type_name -> api.commons.Evaluation.CustomField
	28, // 12: api.commons.EvaluationSection.deleted_at:type_name -> google.protobuf.Timestamp
	28, // 13: api.commons.EvaluationSection.created_at:type_name -> google.protobuf.Timestamp
	11, // 14: api.commons.EvaluationSection.evaluation_questions:type_name -> api.commons.EvaluationQuestion
	13, // 15: api.commons.EvaluationSection.auto_evaluation_questions:type_name -> api.commons.AutoEvaluationQuestion
	21, // 16: api.commons.EvaluationQuestion.answers:type_name -> api.commons.EvaluationQuestion.Answer
	14, // 17: api.commons.AutoEvaluation.auto_evaluation_sections:type_name -> api.commons.AutoEvaluationSection
	28, // 18: api.commons.AutoEvaluation.completed_at:type_name -> google.protobuf.Timestamp
	28, // 19: api.commons.AutoEvaluation.deleted_at:type_name -> google.protobuf.Timestamp
	29, // 20: api.commons.AutoEvaluation.call_type:type_name -> api.commons.CallType.Enum
	6,  // 21: api.commons.AutoEvaluation.risk_level:type_name -> api.commons.RiskLevel
	22, // 22: api.commons.AutoEvaluation.scorecard_info:type_name -> api.commons.AutoEvaluation.ScorecardInfo
	23, // 23: api.commons.AutoEvaluation.category_info:type_name -> api.commons.AutoEvaluation.CategoryInfo
	6,  // 24: api.commons.AutoEvaluationQuestion.risk_level:type_name -> api.commons.RiskLevel
	28, // 25: api.commons.AutoEvaluationSection.deleted_at:type_name -> google.protobuf.Timestamp
	28, // 26: api.commons.AutoEvaluationSection.created_at:type_name -> google.protobuf.Timestamp
	13, // 27: api.commons.AutoEvaluationSection.auto_evaluation_questions:type_name -> api.commons.AutoEvaluationQuestion
	6,  // 28: api.commons.AutoEvaluationSection.risk_level:type_name -> api.commons.RiskLevel
	8,  // 29: api.commons.Question.categories:type_name -> api.commons.Category
	24, // 30: api.commons.ScorecardQuestion.answers:type_name -> api.commons.ScorecardQuestion.Answer
	25, // 31: api.commons.ScorecardQuestion.multi_select:type_name -> api.commons.ScorecardQuestion.MultiSelect
	16, // 32: api.commons.Section.questions:type_name -> api.commons.ScorecardQuestion
	19, // 33: api.commons.Section.auto_questions:type_name -> api.commons.AutoQuestion
	2,  // 34: api.commons.Scorecard.score_type:type_name -> api.commons.ScoreType
	1,  // 35: api.commons.Scorecard.evaluation_type:type_name -> api.commons.EvaluationType
	8,  // 36: api.commons.Scorecard.category:type_name -> api.commons.Category
	17, // 37: api.commons.Scorecard.sections:type_name -> api.commons.Section
	4,  // 38: api.commons.Scorecard.state:type_name -> api.commons.ScorecardState
	29, // 39: api.commons.Scorecard.call_types:type_name -> api.commons.CallType.Enum
	26, // 40: api.commons.AutoQuestion.flag_expression:type_name -> api.commons.AutoQuestion.FlagExpr
	6,  // 41: api.commons.AutoQuestion.risk_level:type_name -> api.commons.RiskLevel
	3,  // 42: api.commons.EvaluationQuestion.Answer.fail_type:type_name -> api.commons.FailType
	3,  // 43: api.commons.ScorecardQuestion.Answer.fail_type:type_name -> api.commons.FailType
	26, // 44: api.commons.AutoQuestion.FlagExpr.and:type_name -> api.commons.AutoQuestion.FlagExpr
	26, // 45: api.commons.AutoQuestion.FlagExpr.or:type_name -> api.commons.AutoQuestion.FlagExpr
	27, // 46: api.commons.AutoQuestion.FlagExpr.flag:type_name -> api.commons.AutoQuestion.FlagExpr.Flag
	26, // 47: api.commons.AutoQuestion.FlagExpr.not:type_name -> api.commons.AutoQuestion.FlagExpr
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_api_commons_scorecards_proto_init() }
func file_api_commons_scorecards_proto_init() {
	if File_api_commons_scorecards_proto != nil {
		return
	}
	file_api_commons_acd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_commons_scorecards_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Evaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoEvaluationQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoEvaluationSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScorecardQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scorecard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Evaluation_CustomField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationQuestion_Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoEvaluation_ScorecardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoEvaluation_CategoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScorecardQuestion_Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScorecardQuestion_MultiSelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoQuestion_FlagExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_scorecards_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoQuestion_FlagExpr_Flag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_commons_scorecards_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*EvaluationQuestion_Answer_Points)(nil),
		(*EvaluationQuestion_Answer_FailType)(nil),
	}
	file_api_commons_scorecards_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ScorecardQuestion_Answer_Points)(nil),
		(*ScorecardQuestion_Answer_FailType)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_scorecards_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_scorecards_proto_goTypes,
		DependencyIndexes: file_api_commons_scorecards_proto_depIdxs,
		EnumInfos:         file_api_commons_scorecards_proto_enumTypes,
		MessageInfos:      file_api_commons_scorecards_proto_msgTypes,
	}.Build()
	File_api_commons_scorecards_proto = out.File
	file_api_commons_scorecards_proto_rawDesc = nil
	file_api_commons_scorecards_proto_goTypes = nil
	file_api_commons_scorecards_proto_depIdxs = nil
}
