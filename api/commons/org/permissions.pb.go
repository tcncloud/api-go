// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/commons/org/permissions.proto

package org

import (
	perms "github.com/tcncloud/api-go/annotations/perms"
	commons "github.com/tcncloud/api-go/api/commons"
	auth "github.com/tcncloud/api-go/api/commons/auth"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PermissionGroup defines the permission group entity.
type PermissionGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique id for this permission group.
	PermissionGroupId string `protobuf:"bytes,1,opt,name=permission_group_id,json=permissionGroupId,proto3" json:"permission_group_id,omitempty"`
	// Organization this permission group belongs to.
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Name to identify by.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Brief description of this group of permissions.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// List of permissions in this group.
	Permissions []auth.Permission `protobuf:"varint,5,rep,packed,name=permissions,proto3,enum=api.commons.auth.Permission" json:"permissions,omitempty"`
	// Restricts users from modifying this group.
	ReadOnly bool `protobuf:"varint,6,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	// A list of label ids that are assigned to this group.
	LabelIds      []string `protobuf:"bytes,7,rep,name=label_ids,json=labelIds,proto3" json:"label_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionGroup) Reset() {
	*x = PermissionGroup{}
	mi := &file_api_commons_org_permissions_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionGroup) ProtoMessage() {}

func (x *PermissionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_permissions_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionGroup.ProtoReflect.Descriptor instead.
func (*PermissionGroup) Descriptor() ([]byte, []int) {
	return file_api_commons_org_permissions_proto_rawDescGZIP(), []int{0}
}

func (x *PermissionGroup) GetPermissionGroupId() string {
	if x != nil {
		return x.PermissionGroupId
	}
	return ""
}

func (x *PermissionGroup) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *PermissionGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PermissionGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PermissionGroup) GetPermissions() []auth.Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *PermissionGroup) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *PermissionGroup) GetLabelIds() []string {
	if x != nil {
		return x.LabelIds
	}
	return nil
}

// P3PermissionGroup entity.
// This was migrated from permissions_group from skunk
// and is requested by backoffice as the source of permissions.
type P3PermissionGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique Id for this entity.
	P3PermissionGroupId string `protobuf:"bytes,1,opt,name=p3_permission_group_id,json=p3PermissionGroupId,proto3" json:"p3_permission_group_id,omitempty"`
	// Owning org.
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Owning org region.
	RegionId string `protobuf:"bytes,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Display name for this group.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// More detailed description for this group.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// List of permissions associated with this group.
	Permissions   []commons.Permission `protobuf:"varint,7,rep,packed,name=permissions,proto3,enum=api.commons.Permission" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *P3PermissionGroup) Reset() {
	*x = P3PermissionGroup{}
	mi := &file_api_commons_org_permissions_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *P3PermissionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P3PermissionGroup) ProtoMessage() {}

func (x *P3PermissionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_permissions_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P3PermissionGroup.ProtoReflect.Descriptor instead.
func (*P3PermissionGroup) Descriptor() ([]byte, []int) {
	return file_api_commons_org_permissions_proto_rawDescGZIP(), []int{1}
}

func (x *P3PermissionGroup) GetP3PermissionGroupId() string {
	if x != nil {
		return x.P3PermissionGroupId
	}
	return ""
}

func (x *P3PermissionGroup) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *P3PermissionGroup) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *P3PermissionGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *P3PermissionGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *P3PermissionGroup) GetPermissions() []commons.Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// License defines the structure of organization license assignments.
type License struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Application containing licenses.
	App perms.Application `protobuf:"varint,1,opt,name=app,proto3,enum=annotations.perms.Application" json:"app,omitempty"`
	// Individual cards for the application.
	Cards []*License_Card `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
	// Name of the license (to be displayed in the UI)
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *License) Reset() {
	*x = License{}
	mi := &file_api_commons_org_permissions_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_permissions_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_api_commons_org_permissions_proto_rawDescGZIP(), []int{2}
}

func (x *License) GetApp() perms.Application {
	if x != nil {
		return x.App
	}
	return perms.Application(0)
}

func (x *License) GetCards() []*License_Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *License) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type License_Card struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Card type.
	Type perms.Card `protobuf:"varint,1,opt,name=type,proto3,enum=annotations.perms.Card" json:"type,omitempty"`
	// List of permissions and features.
	Permissions []*License_Permission `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// String version of the card/sub-section.
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *License_Card) Reset() {
	*x = License_Card{}
	mi := &file_api_commons_org_permissions_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *License_Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License_Card) ProtoMessage() {}

func (x *License_Card) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_permissions_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License_Card.ProtoReflect.Descriptor instead.
func (*License_Card) Descriptor() ([]byte, []int) {
	return file_api_commons_org_permissions_proto_rawDescGZIP(), []int{2, 0}
}

func (x *License_Card) GetType() perms.Card {
	if x != nil {
		return x.Type
	}
	return perms.Card(0)
}

func (x *License_Card) GetPermissions() []*License_Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *License_Card) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type License_Permission struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Permission auth.Permission        `protobuf:"varint,1,opt,name=permission,proto3,enum=api.commons.auth.Permission" json:"permission,omitempty"`
	// Whether this permission is enabled in the license.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// List of features granted by the permission.
	Features []string `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
	// String version of the permission.
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *License_Permission) Reset() {
	*x = License_Permission{}
	mi := &file_api_commons_org_permissions_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *License_Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License_Permission) ProtoMessage() {}

func (x *License_Permission) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_permissions_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License_Permission.ProtoReflect.Descriptor instead.
func (*License_Permission) Descriptor() ([]byte, []int) {
	return file_api_commons_org_permissions_proto_rawDescGZIP(), []int{2, 1}
}

func (x *License_Permission) GetPermission() auth.Permission {
	if x != nil {
		return x.Permission
	}
	return auth.Permission(0)
}

func (x *License_Permission) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *License_Permission) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *License_Permission) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_api_commons_org_permissions_proto protoreflect.FileDescriptor

const file_api_commons_org_permissions_proto_rawDesc = "" +
	"\n" +
	"!api/commons/org/permissions.proto\x12\x0fapi.commons.org\x1a\x1fannotations/perms/license.proto\x1a\x1capi/commons/auth/perms.proto\x1a\x17api/commons/perms.proto\"\x88\x02\n" +
	"\x0fPermissionGroup\x12.\n" +
	"\x13permission_group_id\x18\x01 \x01(\tR\x11permissionGroupId\x12\x15\n" +
	"\x06org_id\x18\x02 \x01(\tR\x05orgId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12>\n" +
	"\vpermissions\x18\x05 \x03(\x0e2\x1c.api.commons.auth.PermissionR\vpermissions\x12\x1b\n" +
	"\tread_only\x18\x06 \x01(\bR\breadOnly\x12\x1b\n" +
	"\tlabel_ids\x18\a \x03(\tR\blabelIds\"\xed\x01\n" +
	"\x11P3PermissionGroup\x123\n" +
	"\x16p3_permission_group_id\x18\x01 \x01(\tR\x13p3PermissionGroupId\x12\x15\n" +
	"\x06org_id\x18\x02 \x01(\tR\x05orgId\x12\x1b\n" +
	"\tregion_id\x18\x03 \x01(\tR\bregionId\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x129\n" +
	"\vpermissions\x18\a \x03(\x0e2\x17.api.commons.PermissionR\vpermissions\"\xac\x03\n" +
	"\aLicense\x120\n" +
	"\x03app\x18\x01 \x01(\x0e2\x1e.annotations.perms.ApplicationR\x03app\x123\n" +
	"\x05cards\x18\x02 \x03(\v2\x1d.api.commons.org.License.CardR\x05cards\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x1a\x8e\x01\n" +
	"\x04Card\x12+\n" +
	"\x04type\x18\x01 \x01(\x0e2\x17.annotations.perms.CardR\x04type\x12E\n" +
	"\vpermissions\x18\x02 \x03(\v2#.api.commons.org.License.PermissionR\vpermissions\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x1a\x94\x01\n" +
	"\n" +
	"Permission\x12<\n" +
	"\n" +
	"permission\x18\x01 \x01(\x0e2\x1c.api.commons.auth.PermissionR\n" +
	"permission\x12\x18\n" +
	"\aenabled\x18\x02 \x01(\bR\aenabled\x12\x1a\n" +
	"\bfeatures\x18\x03 \x03(\tR\bfeatures\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04nameB\xb1\x01\n" +
	"\x13com.api.commons.orgB\x10PermissionsProtoP\x01Z*github.com/tcncloud/api-go/api/commons/org\xa2\x02\x03ACO\xaa\x02\x0fApi.Commons.Org\xca\x02\x0fApi\\Commons\\Org\xe2\x02\x1bApi\\Commons\\Org\\GPBMetadata\xea\x02\x11Api::Commons::Orgb\x06proto3"

var (
	file_api_commons_org_permissions_proto_rawDescOnce sync.Once
	file_api_commons_org_permissions_proto_rawDescData []byte
)

func file_api_commons_org_permissions_proto_rawDescGZIP() []byte {
	file_api_commons_org_permissions_proto_rawDescOnce.Do(func() {
		file_api_commons_org_permissions_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_commons_org_permissions_proto_rawDesc), len(file_api_commons_org_permissions_proto_rawDesc)))
	})
	return file_api_commons_org_permissions_proto_rawDescData
}

var file_api_commons_org_permissions_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_api_commons_org_permissions_proto_goTypes = []any{
	(*PermissionGroup)(nil),    // 0: api.commons.org.PermissionGroup
	(*P3PermissionGroup)(nil),  // 1: api.commons.org.P3PermissionGroup
	(*License)(nil),            // 2: api.commons.org.License
	(*License_Card)(nil),       // 3: api.commons.org.License.Card
	(*License_Permission)(nil), // 4: api.commons.org.License.Permission
	(auth.Permission)(0),       // 5: api.commons.auth.Permission
	(commons.Permission)(0),    // 6: api.commons.Permission
	(perms.Application)(0),     // 7: annotations.perms.Application
	(perms.Card)(0),            // 8: annotations.perms.Card
}
var file_api_commons_org_permissions_proto_depIdxs = []int32{
	5, // 0: api.commons.org.PermissionGroup.permissions:type_name -> api.commons.auth.Permission
	6, // 1: api.commons.org.P3PermissionGroup.permissions:type_name -> api.commons.Permission
	7, // 2: api.commons.org.License.app:type_name -> annotations.perms.Application
	3, // 3: api.commons.org.License.cards:type_name -> api.commons.org.License.Card
	8, // 4: api.commons.org.License.Card.type:type_name -> annotations.perms.Card
	4, // 5: api.commons.org.License.Card.permissions:type_name -> api.commons.org.License.Permission
	5, // 6: api.commons.org.License.Permission.permission:type_name -> api.commons.auth.Permission
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_api_commons_org_permissions_proto_init() }
func file_api_commons_org_permissions_proto_init() {
	if File_api_commons_org_permissions_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_commons_org_permissions_proto_rawDesc), len(file_api_commons_org_permissions_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_org_permissions_proto_goTypes,
		DependencyIndexes: file_api_commons_org_permissions_proto_depIdxs,
		MessageInfos:      file_api_commons_org_permissions_proto_msgTypes,
	}.Build()
	File_api_commons_org_permissions_proto = out.File
	file_api_commons_org_permissions_proto_goTypes = nil
	file_api_commons_org_permissions_proto_depIdxs = nil
}
