// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: api/commons/org/preferences.proto

package org

import (
	commons "github.com/tcncloud/api-go/api/commons"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EvaluationsInterval enumerates common time periods for evaluations.
type Scorecards_EvaluationInterval int32

const (
	Scorecards_EVALUATION_INTERVAL_DAY_UNSPECIFIED Scorecards_EvaluationInterval = 0
	Scorecards_EVALUATION_INTERVAL_WEEK            Scorecards_EvaluationInterval = 1
	Scorecards_EVALUATION_INTERVAL_MONTH           Scorecards_EvaluationInterval = 2
)

// Enum value maps for Scorecards_EvaluationInterval.
var (
	Scorecards_EvaluationInterval_name = map[int32]string{
		0: "EVALUATION_INTERVAL_DAY_UNSPECIFIED",
		1: "EVALUATION_INTERVAL_WEEK",
		2: "EVALUATION_INTERVAL_MONTH",
	}
	Scorecards_EvaluationInterval_value = map[string]int32{
		"EVALUATION_INTERVAL_DAY_UNSPECIFIED": 0,
		"EVALUATION_INTERVAL_WEEK":            1,
		"EVALUATION_INTERVAL_MONTH":           2,
	}
)

func (x Scorecards_EvaluationInterval) Enum() *Scorecards_EvaluationInterval {
	p := new(Scorecards_EvaluationInterval)
	*p = x
	return p
}

func (x Scorecards_EvaluationInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scorecards_EvaluationInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_org_preferences_proto_enumTypes[0].Descriptor()
}

func (Scorecards_EvaluationInterval) Type() protoreflect.EnumType {
	return &file_api_commons_org_preferences_proto_enumTypes[0]
}

func (x Scorecards_EvaluationInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scorecards_EvaluationInterval.Descriptor instead.
func (Scorecards_EvaluationInterval) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{26, 0}
}

type VoiceAnalytics_Number_Kind int32

const (
	VoiceAnalytics_Number_KIND_CARDINAL_UNSPECIFIED VoiceAnalytics_Number_Kind = 0 // Cardinal number
	VoiceAnalytics_Number_KIND_ORDINAL              VoiceAnalytics_Number_Kind = 1 // Ordinal number
	VoiceAnalytics_Number_KIND_ANY                  VoiceAnalytics_Number_Kind = 2 // Any number
)

// Enum value maps for VoiceAnalytics_Number_Kind.
var (
	VoiceAnalytics_Number_Kind_name = map[int32]string{
		0: "KIND_CARDINAL_UNSPECIFIED",
		1: "KIND_ORDINAL",
		2: "KIND_ANY",
	}
	VoiceAnalytics_Number_Kind_value = map[string]int32{
		"KIND_CARDINAL_UNSPECIFIED": 0,
		"KIND_ORDINAL":              1,
		"KIND_ANY":                  2,
	}
)

func (x VoiceAnalytics_Number_Kind) Enum() *VoiceAnalytics_Number_Kind {
	p := new(VoiceAnalytics_Number_Kind)
	*p = x
	return p
}

func (x VoiceAnalytics_Number_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoiceAnalytics_Number_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_org_preferences_proto_enumTypes[1].Descriptor()
}

func (VoiceAnalytics_Number_Kind) Type() protoreflect.EnumType {
	return &file_api_commons_org_preferences_proto_enumTypes[1]
}

func (x VoiceAnalytics_Number_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoiceAnalytics_Number_Kind.Descriptor instead.
func (VoiceAnalytics_Number_Kind) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{28, 1, 0}
}

// General preferences controlling organization properties.
type OrganizationPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Organization's default country.
	DefaultCountry commons.Country `protobuf:"varint,10,opt,name=default_country,json=defaultCountry,proto3,enum=api.commons.Country" json:"default_country,omitempty"`
	// Operating time zone of organization.
	TimeZone commons.TimeZone `protobuf:"varint,11,opt,name=time_zone,json=timeZone,proto3,enum=api.commons.TimeZone" json:"time_zone,omitempty"`
	// Display language in Backoffice for users of the organization.
	DisplayLanguage commons.DisplayLanguage `protobuf:"varint,12,opt,name=display_language,json=displayLanguage,proto3,enum=api.commons.DisplayLanguage" json:"display_language,omitempty"`
	// Organization's locale preferences.
	LocalePreferences *commons.LocalePreferences `protobuf:"bytes,13,opt,name=locale_preferences,json=localePreferences,proto3" json:"locale_preferences,omitempty"`
}

func (x *OrganizationPreferences) Reset() {
	*x = OrganizationPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationPreferences) ProtoMessage() {}

func (x *OrganizationPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationPreferences.ProtoReflect.Descriptor instead.
func (*OrganizationPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{0}
}

func (x *OrganizationPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *OrganizationPreferences) GetDefaultCountry() commons.Country {
	if x != nil {
		return x.DefaultCountry
	}
	return commons.Country(0)
}

func (x *OrganizationPreferences) GetTimeZone() commons.TimeZone {
	if x != nil {
		return x.TimeZone
	}
	return commons.TimeZone(0)
}

func (x *OrganizationPreferences) GetDisplayLanguage() commons.DisplayLanguage {
	if x != nil {
		return x.DisplayLanguage
	}
	return commons.DisplayLanguage(0)
}

func (x *OrganizationPreferences) GetLocalePreferences() *commons.LocalePreferences {
	if x != nil {
		return x.LocalePreferences
	}
	return nil
}

// Preferences controlling direct agent properties.
type AgentPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Default agent dial-in number.
	DefaultAgentDialIn string `protobuf:"bytes,10,opt,name=default_agent_dial_in,json=defaultAgentDialIn,proto3" json:"default_agent_dial_in,omitempty"`
	// PBX dial extension length, between 3 to 9 digits long.
	PbxExtensionLength int32 `protobuf:"varint,11,opt,name=pbx_extension_length,json=pbxExtensionLength,proto3" json:"pbx_extension_length,omitempty"`
	// Default agent softphone input volume, 0-100%.
	DefaultSoftphoneVolumeIn int32 `protobuf:"varint,12,opt,name=default_softphone_volume_in,json=defaultSoftphoneVolumeIn,proto3" json:"default_softphone_volume_in,omitempty"`
	// Default agent softphone output volume, 0-100%.
	DefaultSoftphoneVolumeOut int32 `protobuf:"varint,13,opt,name=default_softphone_volume_out,json=defaultSoftphoneVolumeOut,proto3" json:"default_softphone_volume_out,omitempty"`
	// List of agent dial-in numbers defined by regional skunk config.
	ConfigDialInNumbers []string `protobuf:"bytes,14,rep,name=config_dial_in_numbers,json=configDialInNumbers,proto3" json:"config_dial_in_numbers,omitempty"`
	// List of customized client-defined dial-in numbers.
	ClientDialInNumbers []string `protobuf:"bytes,15,rep,name=client_dial_in_numbers,json=clientDialInNumbers,proto3" json:"client_dial_in_numbers,omitempty"`
	// Allows agent to use privacy headers on the manual dial caller ID.
	ManualDialCallerIdPrivacy bool `protobuf:"varint,16,opt,name=manual_dial_caller_id_privacy,json=manualDialCallerIdPrivacy,proto3" json:"manual_dial_caller_id_privacy,omitempty"`
	// The default/initial setting for caller ID privacy.
	UseManualDialCallerIdPrivacy bool `protobuf:"varint,17,opt,name=use_manual_dial_caller_id_privacy,json=useManualDialCallerIdPrivacy,proto3" json:"use_manual_dial_caller_id_privacy,omitempty"`
}

func (x *AgentPreferences) Reset() {
	*x = AgentPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPreferences) ProtoMessage() {}

func (x *AgentPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPreferences.ProtoReflect.Descriptor instead.
func (*AgentPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{1}
}

func (x *AgentPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *AgentPreferences) GetDefaultAgentDialIn() string {
	if x != nil {
		return x.DefaultAgentDialIn
	}
	return ""
}

func (x *AgentPreferences) GetPbxExtensionLength() int32 {
	if x != nil {
		return x.PbxExtensionLength
	}
	return 0
}

func (x *AgentPreferences) GetDefaultSoftphoneVolumeIn() int32 {
	if x != nil {
		return x.DefaultSoftphoneVolumeIn
	}
	return 0
}

func (x *AgentPreferences) GetDefaultSoftphoneVolumeOut() int32 {
	if x != nil {
		return x.DefaultSoftphoneVolumeOut
	}
	return 0
}

func (x *AgentPreferences) GetConfigDialInNumbers() []string {
	if x != nil {
		return x.ConfigDialInNumbers
	}
	return nil
}

func (x *AgentPreferences) GetClientDialInNumbers() []string {
	if x != nil {
		return x.ClientDialInNumbers
	}
	return nil
}

func (x *AgentPreferences) GetManualDialCallerIdPrivacy() bool {
	if x != nil {
		return x.ManualDialCallerIdPrivacy
	}
	return false
}

func (x *AgentPreferences) GetUseManualDialCallerIdPrivacy() bool {
	if x != nil {
		return x.UseManualDialCallerIdPrivacy
	}
	return false
}

// Preferences for contact lists.
type ContactPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Default import format, either custom of standardized.
	DefaultContactImportFormat *ImportFormat `protobuf:"bytes,10,opt,name=default_contact_import_format,json=defaultContactImportFormat,proto3" json:"default_contact_import_format,omitempty"`
	// Whether the selected contact import format preference is used.
	UseContactImportFormat bool `protobuf:"varint,11,opt,name=use_contact_import_format,json=useContactImportFormat,proto3" json:"use_contact_import_format,omitempty"`
	// Default area code, either custom or predefined field.
	DefaultContactAreaCode *ContactAreaCode `protobuf:"bytes,12,opt,name=default_contact_area_code,json=defaultContactAreaCode,proto3" json:"default_contact_area_code,omitempty"`
	// Whether the contact area code is enabled.
	UseContactAreaCode bool `protobuf:"varint,13,opt,name=use_contact_area_code,json=useContactAreaCode,proto3" json:"use_contact_area_code,omitempty"`
	// Default absent numbers handling; false to keep (default) or true to
	// discard recording.
	DiscardRecordDefaultAbsentNumbersHandling bool `protobuf:"varint,14,opt,name=discard_record_default_absent_numbers_handling,json=discardRecordDefaultAbsentNumbersHandling,proto3" json:"discard_record_default_absent_numbers_handling,omitempty"`
	// Whether contacts import randomization is enabled.
	DefaultContactsImportRandomization bool `protobuf:"varint,15,opt,name=default_contacts_import_randomization,json=defaultContactsImportRandomization,proto3" json:"default_contacts_import_randomization,omitempty"`
	// The contact field to use as the default in emails.
	DefaultEmailColumn string `protobuf:"bytes,16,opt,name=default_email_column,json=defaultEmailColumn,proto3" json:"default_email_column,omitempty"`
	// How duplicate contact numbers are handled by default.
	DefaultDuplicateHandling commons.DefaultDuplicateHandling `protobuf:"varint,17,opt,name=default_duplicate_handling,json=defaultDuplicateHandling,proto3,enum=api.commons.DefaultDuplicateHandling" json:"default_duplicate_handling,omitempty"`
}

func (x *ContactPreferences) Reset() {
	*x = ContactPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPreferences) ProtoMessage() {}

func (x *ContactPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPreferences.ProtoReflect.Descriptor instead.
func (*ContactPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{2}
}

func (x *ContactPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ContactPreferences) GetDefaultContactImportFormat() *ImportFormat {
	if x != nil {
		return x.DefaultContactImportFormat
	}
	return nil
}

func (x *ContactPreferences) GetUseContactImportFormat() bool {
	if x != nil {
		return x.UseContactImportFormat
	}
	return false
}

func (x *ContactPreferences) GetDefaultContactAreaCode() *ContactAreaCode {
	if x != nil {
		return x.DefaultContactAreaCode
	}
	return nil
}

func (x *ContactPreferences) GetUseContactAreaCode() bool {
	if x != nil {
		return x.UseContactAreaCode
	}
	return false
}

func (x *ContactPreferences) GetDiscardRecordDefaultAbsentNumbersHandling() bool {
	if x != nil {
		return x.DiscardRecordDefaultAbsentNumbersHandling
	}
	return false
}

func (x *ContactPreferences) GetDefaultContactsImportRandomization() bool {
	if x != nil {
		return x.DefaultContactsImportRandomization
	}
	return false
}

func (x *ContactPreferences) GetDefaultEmailColumn() string {
	if x != nil {
		return x.DefaultEmailColumn
	}
	return ""
}

func (x *ContactPreferences) GetDefaultDuplicateHandling() commons.DefaultDuplicateHandling {
	if x != nil {
		return x.DefaultDuplicateHandling
	}
	return commons.DefaultDuplicateHandling(0)
}

// Contact import template type.
type ImportFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Format:
	//
	//	*ImportFormat_Standard
	//	*ImportFormat_Custom
	Format isImportFormat_Format `protobuf_oneof:"format"`
}

func (x *ImportFormat) Reset() {
	*x = ImportFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportFormat) ProtoMessage() {}

func (x *ImportFormat) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportFormat.ProtoReflect.Descriptor instead.
func (*ImportFormat) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{3}
}

func (m *ImportFormat) GetFormat() isImportFormat_Format {
	if m != nil {
		return m.Format
	}
	return nil
}

func (x *ImportFormat) GetStandard() commons.StandardImportFormat {
	if x, ok := x.GetFormat().(*ImportFormat_Standard); ok {
		return x.Standard
	}
	return commons.StandardImportFormat(0)
}

func (x *ImportFormat) GetCustom() *CustomImportFormat {
	if x, ok := x.GetFormat().(*ImportFormat_Custom); ok {
		return x.Custom
	}
	return nil
}

type isImportFormat_Format interface {
	isImportFormat_Format()
}

type ImportFormat_Standard struct {
	// Import format enum choice.
	Standard commons.StandardImportFormat `protobuf:"varint,1,opt,name=standard,proto3,enum=api.commons.StandardImportFormat,oneof"`
}

type ImportFormat_Custom struct {
	// Client-defined import format.
	Custom *CustomImportFormat `protobuf:"bytes,2,opt,name=custom,proto3,oneof"`
}

func (*ImportFormat_Standard) isImportFormat_Format() {}

func (*ImportFormat_Custom) isImportFormat_Format() {}

// Contact import format properties.
type CustomImportFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contact import template sid.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Import format name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CustomImportFormat) Reset() {
	*x = CustomImportFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomImportFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomImportFormat) ProtoMessage() {}

func (x *CustomImportFormat) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomImportFormat.ProtoReflect.Descriptor instead.
func (*CustomImportFormat) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{4}
}

func (x *CustomImportFormat) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomImportFormat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contact area code type.
type ContactAreaCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AreaCode:
	//
	//	*ContactAreaCode_Cfd
	//	*ContactAreaCode_Custom
	AreaCode isContactAreaCode_AreaCode `protobuf_oneof:"area_code"`
}

func (x *ContactAreaCode) Reset() {
	*x = ContactAreaCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactAreaCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactAreaCode) ProtoMessage() {}

func (x *ContactAreaCode) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactAreaCode.ProtoReflect.Descriptor instead.
func (*ContactAreaCode) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{5}
}

func (m *ContactAreaCode) GetAreaCode() isContactAreaCode_AreaCode {
	if m != nil {
		return m.AreaCode
	}
	return nil
}

func (x *ContactAreaCode) GetCfd() *ContactFieldDescription {
	if x, ok := x.GetAreaCode().(*ContactAreaCode_Cfd); ok {
		return x.Cfd
	}
	return nil
}

func (x *ContactAreaCode) GetCustom() int32 {
	if x, ok := x.GetAreaCode().(*ContactAreaCode_Custom); ok {
		return x.Custom
	}
	return 0
}

type isContactAreaCode_AreaCode interface {
	isContactAreaCode_AreaCode()
}

type ContactAreaCode_Cfd struct {
	// Contact field description with ID and name.
	Cfd *ContactFieldDescription `protobuf:"bytes,1,opt,name=cfd,proto3,oneof"`
}

type ContactAreaCode_Custom struct {
	// Client-defined area code number.
	Custom int32 `protobuf:"varint,2,opt,name=custom,proto3,oneof"`
}

func (*ContactAreaCode_Cfd) isContactAreaCode_AreaCode() {}

func (*ContactAreaCode_Custom) isContactAreaCode_AreaCode() {}

// Contact field description information.
type ContactFieldDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contact field description sid.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Contact field name.
	FieldName string `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// Whether this field holds a phone number.
	IsPhone bool `protobuf:"varint,3,opt,name=is_phone,json=isPhone,proto3" json:"is_phone,omitempty"`
	// Special formatting.
	DisplayFormatString string `protobuf:"bytes,4,opt,name=display_format_string,json=displayFormatString,proto3" json:"display_format_string,omitempty"`
}

func (x *ContactFieldDescription) Reset() {
	*x = ContactFieldDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactFieldDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactFieldDescription) ProtoMessage() {}

func (x *ContactFieldDescription) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactFieldDescription.ProtoReflect.Descriptor instead.
func (*ContactFieldDescription) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{6}
}

func (x *ContactFieldDescription) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContactFieldDescription) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *ContactFieldDescription) GetIsPhone() bool {
	if x != nil {
		return x.IsPhone
	}
	return false
}

func (x *ContactFieldDescription) GetDisplayFormatString() string {
	if x != nil {
		return x.DisplayFormatString
	}
	return ""
}

// Preferences for controlling the organization's authentication properties.
type AuthenticationPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Use IP based authorization.
	AuthorizationViaIp bool `protobuf:"varint,10,opt,name=authorization_via_ip,json=authorizationViaIp,proto3" json:"authorization_via_ip,omitempty"`
	// List of whitelisted IPs.
	AllowedIps []string `protobuf:"bytes,11,rep,name=allowed_ips,json=allowedIps,proto3" json:"allowed_ips,omitempty"`
	// Agent API key.
	AgentApiKey string `protobuf:"bytes,12,opt,name=agent_api_key,json=agentApiKey,proto3" json:"agent_api_key,omitempty"`
	// Whether or not two factor authentication is enabled.
	Enable_2Fa bool `protobuf:"varint,13,opt,name=enable_2fa,json=enable2fa,proto3" json:"enable_2fa,omitempty"`
	// Whether or not to block login from users without a verified email.
	// This option is only used if two factor authentication is enabled.
	BlockUnverifiedUsers bool `protobuf:"varint,14,opt,name=block_unverified_users,json=blockUnverifiedUsers,proto3" json:"block_unverified_users,omitempty"`
}

func (x *AuthenticationPreferences) Reset() {
	*x = AuthenticationPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationPreferences) ProtoMessage() {}

func (x *AuthenticationPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationPreferences.ProtoReflect.Descriptor instead.
func (*AuthenticationPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{7}
}

func (x *AuthenticationPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *AuthenticationPreferences) GetAuthorizationViaIp() bool {
	if x != nil {
		return x.AuthorizationViaIp
	}
	return false
}

func (x *AuthenticationPreferences) GetAllowedIps() []string {
	if x != nil {
		return x.AllowedIps
	}
	return nil
}

func (x *AuthenticationPreferences) GetAgentApiKey() string {
	if x != nil {
		return x.AgentApiKey
	}
	return ""
}

func (x *AuthenticationPreferences) GetEnable_2Fa() bool {
	if x != nil {
		return x.Enable_2Fa
	}
	return false
}

func (x *AuthenticationPreferences) GetBlockUnverifiedUsers() bool {
	if x != nil {
		return x.BlockUnverifiedUsers
	}
	return false
}

// Preferences for web-hook push URLs.
type WebhookPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Whether push URLs are enabled.
	PushUrlsEnabled bool `protobuf:"varint,10,opt,name=push_urls_enabled,json=pushUrlsEnabled,proto3" json:"push_urls_enabled,omitempty"`
	// Call result of the push URL.
	CallResultPushUrl string `protobuf:"bytes,11,opt,name=call_result_push_url,json=callResultPushUrl,proto3" json:"call_result_push_url,omitempty"`
	// Agent response of the push URL.
	AgentResponsePushUrl string `protobuf:"bytes,12,opt,name=agent_response_push_url,json=agentResponsePushUrl,proto3" json:"agent_response_push_url,omitempty"`
}

func (x *WebhookPreferences) Reset() {
	*x = WebhookPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookPreferences) ProtoMessage() {}

func (x *WebhookPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookPreferences.ProtoReflect.Descriptor instead.
func (*WebhookPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{8}
}

func (x *WebhookPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *WebhookPreferences) GetPushUrlsEnabled() bool {
	if x != nil {
		return x.PushUrlsEnabled
	}
	return false
}

func (x *WebhookPreferences) GetCallResultPushUrl() string {
	if x != nil {
		return x.CallResultPushUrl
	}
	return ""
}

func (x *WebhookPreferences) GetAgentResponsePushUrl() string {
	if x != nil {
		return x.AgentResponsePushUrl
	}
	return ""
}

// Preferences for agent dashboard controls.
type DashboardPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Default agent info view; false for icon display, true for table view.
	DefaultInfoView bool `protobuf:"varint,10,opt,name=default_info_view,json=defaultInfoView,proto3" json:"default_info_view,omitempty"`
	// Default agent inclusion, true to include all agents.
	DefaultTableInclusion bool `protobuf:"varint,11,opt,name=default_table_inclusion,json=defaultTableInclusion,proto3" json:"default_table_inclusion,omitempty"`
	// Default agent grouping, true to group by hunt groups.
	DefaultInfoGrouping bool `protobuf:"varint,12,opt,name=default_info_grouping,json=defaultInfoGrouping,proto3" json:"default_info_grouping,omitempty"`
	// Default agent icon size, false for large icons.
	DefaultSmallIcon bool `protobuf:"varint,13,opt,name=default_small_icon,json=defaultSmallIcon,proto3" json:"default_small_icon,omitempty"`
	// Default agent sort direction, false to sort by ascending.
	DefaultDescendingSort bool `protobuf:"varint,14,opt,name=default_descending_sort,json=defaultDescendingSort,proto3" json:"default_descending_sort,omitempty"`
	// SID for the agent dashboard table template.
	TableTemplateSid int64 `protobuf:"varint,15,opt,name=table_template_sid,json=tableTemplateSid,proto3" json:"table_template_sid,omitempty"`
	// Which call types are enabled in the agents dashboard.
	DefaultCallTypes *IncludedCallTypes `protobuf:"bytes,16,opt,name=default_call_types,json=defaultCallTypes,proto3" json:"default_call_types,omitempty"`
	// Agent dashboard order-by parameter.
	DefaultInfoSortByValue commons.AgentInfoSortBy `protobuf:"varint,17,opt,name=default_info_sort_by_value,json=defaultInfoSortByValue,proto3,enum=api.commons.AgentInfoSortBy" json:"default_info_sort_by_value,omitempty"`
	// Controls hunt-group and agent barge-in status parameters.
	DefaultBargeInFiltering *BargeInFiltering `protobuf:"bytes,18,opt,name=default_barge_in_filtering,json=defaultBargeInFiltering,proto3" json:"default_barge_in_filtering,omitempty"`
}

func (x *DashboardPreferences) Reset() {
	*x = DashboardPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardPreferences) ProtoMessage() {}

func (x *DashboardPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardPreferences.ProtoReflect.Descriptor instead.
func (*DashboardPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{9}
}

func (x *DashboardPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *DashboardPreferences) GetDefaultInfoView() bool {
	if x != nil {
		return x.DefaultInfoView
	}
	return false
}

func (x *DashboardPreferences) GetDefaultTableInclusion() bool {
	if x != nil {
		return x.DefaultTableInclusion
	}
	return false
}

func (x *DashboardPreferences) GetDefaultInfoGrouping() bool {
	if x != nil {
		return x.DefaultInfoGrouping
	}
	return false
}

func (x *DashboardPreferences) GetDefaultSmallIcon() bool {
	if x != nil {
		return x.DefaultSmallIcon
	}
	return false
}

func (x *DashboardPreferences) GetDefaultDescendingSort() bool {
	if x != nil {
		return x.DefaultDescendingSort
	}
	return false
}

func (x *DashboardPreferences) GetTableTemplateSid() int64 {
	if x != nil {
		return x.TableTemplateSid
	}
	return 0
}

func (x *DashboardPreferences) GetDefaultCallTypes() *IncludedCallTypes {
	if x != nil {
		return x.DefaultCallTypes
	}
	return nil
}

func (x *DashboardPreferences) GetDefaultInfoSortByValue() commons.AgentInfoSortBy {
	if x != nil {
		return x.DefaultInfoSortByValue
	}
	return commons.AgentInfoSortBy(0)
}

func (x *DashboardPreferences) GetDefaultBargeInFiltering() *BargeInFiltering {
	if x != nil {
		return x.DefaultBargeInFiltering
	}
	return nil
}

// Included call types.
type IncludedCallTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Outbound calls.
	Outbound bool `protobuf:"varint,1,opt,name=outbound,proto3" json:"outbound,omitempty"`
	// Inbound calls.
	Inbound bool `protobuf:"varint,2,opt,name=inbound,proto3" json:"inbound,omitempty"`
	// Manual-dial calls.
	ManualDial bool `protobuf:"varint,3,opt,name=manual_dial,json=manualDial,proto3" json:"manual_dial,omitempty"`
	// Preview-dial calls.
	PreviewDial bool `protobuf:"varint,4,opt,name=preview_dial,json=previewDial,proto3" json:"preview_dial,omitempty"`
}

func (x *IncludedCallTypes) Reset() {
	*x = IncludedCallTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncludedCallTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncludedCallTypes) ProtoMessage() {}

func (x *IncludedCallTypes) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncludedCallTypes.ProtoReflect.Descriptor instead.
func (*IncludedCallTypes) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{10}
}

func (x *IncludedCallTypes) GetOutbound() bool {
	if x != nil {
		return x.Outbound
	}
	return false
}

func (x *IncludedCallTypes) GetInbound() bool {
	if x != nil {
		return x.Inbound
	}
	return false
}

func (x *IncludedCallTypes) GetManualDial() bool {
	if x != nil {
		return x.ManualDial
	}
	return false
}

func (x *IncludedCallTypes) GetPreviewDial() bool {
	if x != nil {
		return x.PreviewDial
	}
	return false
}

// Barge-in filtering properties.
type BargeInFiltering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hunt group settings.
	HuntGroup *BargeInFiltering_HuntGroup `protobuf:"bytes,1,opt,name=hunt_group,json=huntGroup,proto3" json:"hunt_group,omitempty"`
	// Agent status.
	AgentStatus *BargeInFiltering_AgentStatus `protobuf:"bytes,2,opt,name=agent_status,json=agentStatus,proto3" json:"agent_status,omitempty"`
}

func (x *BargeInFiltering) Reset() {
	*x = BargeInFiltering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BargeInFiltering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BargeInFiltering) ProtoMessage() {}

func (x *BargeInFiltering) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BargeInFiltering.ProtoReflect.Descriptor instead.
func (*BargeInFiltering) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{11}
}

func (x *BargeInFiltering) GetHuntGroup() *BargeInFiltering_HuntGroup {
	if x != nil {
		return x.HuntGroup
	}
	return nil
}

func (x *BargeInFiltering) GetAgentStatus() *BargeInFiltering_AgentStatus {
	if x != nil {
		return x.AgentStatus
	}
	return nil
}

// Preferences for controlling agent queue and hold table settings.
type DashboardQueuePreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Default queue/hold table view; false for icon view, true for table view.
	DefaultInfoView bool `protobuf:"varint,10,opt,name=default_info_view,json=defaultInfoView,proto3" json:"default_info_view,omitempty"`
	// Default queue/hold table grouping; false for no grouping, true for group
	// by queue type.
	DefaultInfoGrouping bool `protobuf:"varint,11,opt,name=default_info_grouping,json=defaultInfoGrouping,proto3" json:"default_info_grouping,omitempty"`
	// Default table icon size; true for small, false for large.
	DefaultSmallIcon bool `protobuf:"varint,12,opt,name=default_small_icon,json=defaultSmallIcon,proto3" json:"default_small_icon,omitempty"`
	// Default table sort direction; false for descending, true for ascending.
	DefaultDescendingSort bool `protobuf:"varint,13,opt,name=default_descending_sort,json=defaultDescendingSort,proto3" json:"default_descending_sort,omitempty"`
	// Default skills filter; holds a regional sid pointing to the filter in
	// the xml_client_property table.
	DefaultAgentSkillsFilter int64 `protobuf:"varint,14,opt,name=default_agent_skills_filter,json=defaultAgentSkillsFilter,proto3" json:"default_agent_skills_filter,omitempty"`
	// Default table template. holds a regional sid pointing to the filter in
	// the xml_client_property table.
	DefaultInfoTableTemplate int64 `protobuf:"varint,15,opt,name=default_info_table_template,json=defaultInfoTableTemplate,proto3" json:"default_info_table_template,omitempty"`
	// Default queue/hold info sort-by value.
	DefaultInfoSortByValue commons.QueueInfoSortBy `protobuf:"varint,16,opt,name=default_info_sort_by_value,json=defaultInfoSortByValue,proto3,enum=api.commons.QueueInfoSortBy" json:"default_info_sort_by_value,omitempty"`
}

func (x *DashboardQueuePreferences) Reset() {
	*x = DashboardQueuePreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardQueuePreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardQueuePreferences) ProtoMessage() {}

func (x *DashboardQueuePreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardQueuePreferences.ProtoReflect.Descriptor instead.
func (*DashboardQueuePreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{12}
}

func (x *DashboardQueuePreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *DashboardQueuePreferences) GetDefaultInfoView() bool {
	if x != nil {
		return x.DefaultInfoView
	}
	return false
}

func (x *DashboardQueuePreferences) GetDefaultInfoGrouping() bool {
	if x != nil {
		return x.DefaultInfoGrouping
	}
	return false
}

func (x *DashboardQueuePreferences) GetDefaultSmallIcon() bool {
	if x != nil {
		return x.DefaultSmallIcon
	}
	return false
}

func (x *DashboardQueuePreferences) GetDefaultDescendingSort() bool {
	if x != nil {
		return x.DefaultDescendingSort
	}
	return false
}

func (x *DashboardQueuePreferences) GetDefaultAgentSkillsFilter() int64 {
	if x != nil {
		return x.DefaultAgentSkillsFilter
	}
	return 0
}

func (x *DashboardQueuePreferences) GetDefaultInfoTableTemplate() int64 {
	if x != nil {
		return x.DefaultInfoTableTemplate
	}
	return 0
}

func (x *DashboardQueuePreferences) GetDefaultInfoSortByValue() commons.QueueInfoSortBy {
	if x != nil {
		return x.DefaultInfoSortByValue
	}
	return commons.QueueInfoSortBy(0)
}

// Preferences for phone dial options, call ID, and other call properties.
type PhonePreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Determines whether broadcasts may be sent as Preview Dial.
	AgentPreviewDialing bool `protobuf:"varint,10,opt,name=agent_preview_dialing,json=agentPreviewDialing,proto3" json:"agent_preview_dialing,omitempty"`
	// The number of seconds to allow ringing to a 3rd party.
	DefaultRingLengthThreshold int32 `protobuf:"varint,11,opt,name=default_ring_length_threshold,json=defaultRingLengthThreshold,proto3" json:"default_ring_length_threshold,omitempty"`
	// Determines whether the setting may be changed while scheduling.
	DisplayRingLengthThreshold bool `protobuf:"varint,12,opt,name=display_ring_length_threshold,json=displayRingLengthThreshold,proto3" json:"display_ring_length_threshold,omitempty"`
	// Determines wheter the setting may be show/edited while scheduling.
	ShowCallerId bool `protobuf:"varint,13,opt,name=show_caller_id,json=showCallerId,proto3" json:"show_caller_id,omitempty"`
	// Determines whether to use Caller ID by default.
	DefaultUseCallerId bool `protobuf:"varint,14,opt,name=default_use_caller_id,json=defaultUseCallerId,proto3" json:"default_use_caller_id,omitempty"`
	// Determines whether broadcast templates may set to record linkbacks
	// individually.
	OverrideLinkbackRecording bool `protobuf:"varint,15,opt,name=override_linkback_recording,json=overrideLinkbackRecording,proto3" json:"override_linkback_recording,omitempty"`
	// The 'sid' of the Caller ID field description to use as default.
	CallerIdCfdSid int64 `protobuf:"varint,16,opt,name=caller_id_cfd_sid,json=callerIdCfdSid,proto3" json:"caller_id_cfd_sid,omitempty"`
	// The dial order of a contact record, default 'First Number Only'.
	DefaultDialOrder *DialOrder `protobuf:"bytes,17,opt,name=default_dial_order,json=defaultDialOrder,proto3" json:"default_dial_order,omitempty"`
	// Which type of answering machine detection to use.
	AnsweringMachineDetection commons.AnsweringMachineDetection `protobuf:"varint,18,opt,name=answering_machine_detection,json=answeringMachineDetection,proto3,enum=api.commons.AnsweringMachineDetection" json:"answering_machine_detection,omitempty"`
	// Determines whether linkback recording is enabled.
	LinkbackRecording bool `protobuf:"varint,19,opt,name=linkback_recording,json=linkbackRecording,proto3" json:"linkback_recording,omitempty"`
}

func (x *PhonePreferences) Reset() {
	*x = PhonePreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhonePreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhonePreferences) ProtoMessage() {}

func (x *PhonePreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhonePreferences.ProtoReflect.Descriptor instead.
func (*PhonePreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{13}
}

func (x *PhonePreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *PhonePreferences) GetAgentPreviewDialing() bool {
	if x != nil {
		return x.AgentPreviewDialing
	}
	return false
}

func (x *PhonePreferences) GetDefaultRingLengthThreshold() int32 {
	if x != nil {
		return x.DefaultRingLengthThreshold
	}
	return 0
}

func (x *PhonePreferences) GetDisplayRingLengthThreshold() bool {
	if x != nil {
		return x.DisplayRingLengthThreshold
	}
	return false
}

func (x *PhonePreferences) GetShowCallerId() bool {
	if x != nil {
		return x.ShowCallerId
	}
	return false
}

func (x *PhonePreferences) GetDefaultUseCallerId() bool {
	if x != nil {
		return x.DefaultUseCallerId
	}
	return false
}

func (x *PhonePreferences) GetOverrideLinkbackRecording() bool {
	if x != nil {
		return x.OverrideLinkbackRecording
	}
	return false
}

func (x *PhonePreferences) GetCallerIdCfdSid() int64 {
	if x != nil {
		return x.CallerIdCfdSid
	}
	return 0
}

func (x *PhonePreferences) GetDefaultDialOrder() *DialOrder {
	if x != nil {
		return x.DefaultDialOrder
	}
	return nil
}

func (x *PhonePreferences) GetAnsweringMachineDetection() commons.AnsweringMachineDetection {
	if x != nil {
		return x.AnsweringMachineDetection
	}
	return commons.AnsweringMachineDetection(0)
}

func (x *PhonePreferences) GetLinkbackRecording() bool {
	if x != nil {
		return x.LinkbackRecording
	}
	return false
}

// Dial order holds either a type enum, or one or more contact field
// description fields for custom order.
type DialOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*DialOrder_Standard
	//	*DialOrder_Custom
	Type isDialOrder_Type `protobuf_oneof:"type"`
}

func (x *DialOrder) Reset() {
	*x = DialOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialOrder) ProtoMessage() {}

func (x *DialOrder) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialOrder.ProtoReflect.Descriptor instead.
func (*DialOrder) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{14}
}

func (m *DialOrder) GetType() isDialOrder_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *DialOrder) GetStandard() commons.DialOrderType {
	if x, ok := x.GetType().(*DialOrder_Standard); ok {
		return x.Standard
	}
	return commons.DialOrderType(0)
}

func (x *DialOrder) GetCustom() *CustomDialOrder {
	if x, ok := x.GetType().(*DialOrder_Custom); ok {
		return x.Custom
	}
	return nil
}

type isDialOrder_Type interface {
	isDialOrder_Type()
}

type DialOrder_Standard struct {
	// Standard order enum, (CUSTOM_DIAL_ORDER should not be set here but
	// indicated by setting a CustomDialOrder below).
	Standard commons.DialOrderType `protobuf:"varint,1,opt,name=standard,proto3,enum=api.commons.DialOrderType,oneof"`
}

type DialOrder_Custom struct {
	// Defines a "Custom Order" using one or more contact field
	// descriptions.
	Custom *CustomDialOrder `protobuf:"bytes,2,opt,name=custom,proto3,oneof"`
}

func (*DialOrder_Standard) isDialOrder_Type() {}

func (*DialOrder_Custom) isDialOrder_Type() {}

// Custom dial order fields holds one or more contact field descriptions to
// indicate which fields in a contact record, and the order.
type CustomDialOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more contact field descriptions.
	DialOrderFields []*DialOrderField `protobuf:"bytes,1,rep,name=dial_order_fields,json=dialOrderFields,proto3" json:"dial_order_fields,omitempty"`
}

func (x *CustomDialOrder) Reset() {
	*x = CustomDialOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDialOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDialOrder) ProtoMessage() {}

func (x *CustomDialOrder) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDialOrder.ProtoReflect.Descriptor instead.
func (*CustomDialOrder) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{15}
}

func (x *CustomDialOrder) GetDialOrderFields() []*DialOrderField {
	if x != nil {
		return x.DialOrderFields
	}
	return nil
}

// Dial order field holds the ID for saving into preferences and the name
// for display.
type DialOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contact field description SID.
	CfdSid int64 `protobuf:"varint,1,opt,name=cfd_sid,json=cfdSid,proto3" json:"cfd_sid,omitempty"`
	// The field name, for display.
	FieldName string `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (x *DialOrderField) Reset() {
	*x = DialOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialOrderField) ProtoMessage() {}

func (x *DialOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialOrderField.ProtoReflect.Descriptor instead.
func (*DialOrderField) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{16}
}

func (x *DialOrderField) GetCfdSid() int64 {
	if x != nil {
		return x.CfdSid
	}
	return 0
}

func (x *DialOrderField) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

// Preferences for natural language compliance campaign settings.
type CompliancePreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Whether after-hours calls are displayed in campaigns.
	DisplayAfterHoursCalls bool `protobuf:"varint,10,opt,name=display_after_hours_calls,json=displayAfterHoursCalls,proto3" json:"display_after_hours_calls,omitempty"`
	// Enable/disable after-hours calls in campaigns.
	AfterHoursCalls bool `protobuf:"varint,11,opt,name=after_hours_calls,json=afterHoursCalls,proto3" json:"after_hours_calls,omitempty"`
	// Whether the default natural compliance rule set is displayed.
	DisplayNaturalCompliance bool `protobuf:"varint,12,opt,name=display_natural_compliance,json=displayNaturalCompliance,proto3" json:"display_natural_compliance,omitempty"`
	// Enable using the default natural compliance rule set.
	UseNaturalCompliance bool `protobuf:"varint,13,opt,name=use_natural_compliance,json=useNaturalCompliance,proto3" json:"use_natural_compliance,omitempty"`
	// Compliance rule set to use by default (UUID of set).
	DefaultComplianceRuleSet string `protobuf:"bytes,14,opt,name=default_compliance_rule_set,json=defaultComplianceRuleSet,proto3" json:"default_compliance_rule_set,omitempty"`
	// Whether cell phone scrub from campaign view.
	DisplayCellPhoneScrub bool `protobuf:"varint,15,opt,name=display_cell_phone_scrub,json=displayCellPhoneScrub,proto3" json:"display_cell_phone_scrub,omitempty"`
	// Enable/disable to the ability scrub cell phone numbers.
	CellPhoneScrub bool `protobuf:"varint,16,opt,name=cell_phone_scrub,json=cellPhoneScrub,proto3" json:"cell_phone_scrub,omitempty"`
	// Whether schedule rules are displayed in campaigns.
	DisplayScheduleRules bool `protobuf:"varint,17,opt,name=display_schedule_rules,json=displayScheduleRules,proto3" json:"display_schedule_rules,omitempty"`
	// Enable the use of the default schedule rules.
	UseScheduleRules bool `protobuf:"varint,18,opt,name=use_schedule_rules,json=useScheduleRules,proto3" json:"use_schedule_rules,omitempty"`
	// Schedule rule to use by default.
	DefaultScheduleRule *ScheduleRuleField `protobuf:"bytes,19,opt,name=default_schedule_rule,json=defaultScheduleRule,proto3" json:"default_schedule_rule,omitempty"`
	// Whether ZIP code scrubbing is enabled.
	DoZipCodeScrub bool `protobuf:"varint,20,opt,name=do_zip_code_scrub,json=doZipCodeScrub,proto3" json:"do_zip_code_scrub,omitempty"`
	// Field for ZIP/postal code scrubbing to use.
	ZipCodeScrub *ZipCodeField `protobuf:"bytes,21,opt,name=zip_code_scrub,json=zipCodeScrub,proto3" json:"zip_code_scrub,omitempty"`
	// Default email compliance list.
	DefaultEmailComplianceList string `protobuf:"bytes,22,opt,name=default_email_compliance_list,json=defaultEmailComplianceList,proto3" json:"default_email_compliance_list,omitempty"`
	// Default sms compliance list.
	DefaultSmsComplianceList string `protobuf:"bytes,23,opt,name=default_sms_compliance_list,json=defaultSmsComplianceList,proto3" json:"default_sms_compliance_list,omitempty"`
}

func (x *CompliancePreferences) Reset() {
	*x = CompliancePreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompliancePreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompliancePreferences) ProtoMessage() {}

func (x *CompliancePreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompliancePreferences.ProtoReflect.Descriptor instead.
func (*CompliancePreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{17}
}

func (x *CompliancePreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *CompliancePreferences) GetDisplayAfterHoursCalls() bool {
	if x != nil {
		return x.DisplayAfterHoursCalls
	}
	return false
}

func (x *CompliancePreferences) GetAfterHoursCalls() bool {
	if x != nil {
		return x.AfterHoursCalls
	}
	return false
}

func (x *CompliancePreferences) GetDisplayNaturalCompliance() bool {
	if x != nil {
		return x.DisplayNaturalCompliance
	}
	return false
}

func (x *CompliancePreferences) GetUseNaturalCompliance() bool {
	if x != nil {
		return x.UseNaturalCompliance
	}
	return false
}

func (x *CompliancePreferences) GetDefaultComplianceRuleSet() string {
	if x != nil {
		return x.DefaultComplianceRuleSet
	}
	return ""
}

func (x *CompliancePreferences) GetDisplayCellPhoneScrub() bool {
	if x != nil {
		return x.DisplayCellPhoneScrub
	}
	return false
}

func (x *CompliancePreferences) GetCellPhoneScrub() bool {
	if x != nil {
		return x.CellPhoneScrub
	}
	return false
}

func (x *CompliancePreferences) GetDisplayScheduleRules() bool {
	if x != nil {
		return x.DisplayScheduleRules
	}
	return false
}

func (x *CompliancePreferences) GetUseScheduleRules() bool {
	if x != nil {
		return x.UseScheduleRules
	}
	return false
}

func (x *CompliancePreferences) GetDefaultScheduleRule() *ScheduleRuleField {
	if x != nil {
		return x.DefaultScheduleRule
	}
	return nil
}

func (x *CompliancePreferences) GetDoZipCodeScrub() bool {
	if x != nil {
		return x.DoZipCodeScrub
	}
	return false
}

func (x *CompliancePreferences) GetZipCodeScrub() *ZipCodeField {
	if x != nil {
		return x.ZipCodeScrub
	}
	return nil
}

func (x *CompliancePreferences) GetDefaultEmailComplianceList() string {
	if x != nil {
		return x.DefaultEmailComplianceList
	}
	return ""
}

func (x *CompliancePreferences) GetDefaultSmsComplianceList() string {
	if x != nil {
		return x.DefaultSmsComplianceList
	}
	return ""
}

// Compliance schedule rule field properties.
type ScheduleRuleField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The schdeulde rule SID.
	RuleId int64 `protobuf:"varint,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	// The rule name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ScheduleRuleField) Reset() {
	*x = ScheduleRuleField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleRuleField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRuleField) ProtoMessage() {}

func (x *ScheduleRuleField) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRuleField.ProtoReflect.Descriptor instead.
func (*ScheduleRuleField) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{18}
}

func (x *ScheduleRuleField) GetRuleId() int64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *ScheduleRuleField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ZIP/postal code scrubbing properties.
type ZipCodeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contact field description SID.
	CfdSid int64 `protobuf:"varint,1,opt,name=cfd_sid,json=cfdSid,proto3" json:"cfd_sid,omitempty"`
	// The name of the field.
	FieldName string `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (x *ZipCodeField) Reset() {
	*x = ZipCodeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZipCodeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZipCodeField) ProtoMessage() {}

func (x *ZipCodeField) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZipCodeField.ProtoReflect.Descriptor instead.
func (*ZipCodeField) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{19}
}

func (x *ZipCodeField) GetCfdSid() int64 {
	if x != nil {
		return x.CfdSid
	}
	return 0
}

func (x *ZipCodeField) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

// Preferences for editing templates and broadcast scheduling properties.
type BroadcastPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Whether the 'Dial List Penetration Strategy' property in templates and
	// broadcast scheduling is displayed.
	DisplayListPenetrationStrategy bool `protobuf:"varint,10,opt,name=display_list_penetration_strategy,json=displayListPenetrationStrategy,proto3" json:"display_list_penetration_strategy,omitempty"`
	// List penetration strategy to give priority to dialing each number in a
	// single record before dialing from other records; false for depth first,
	// true for breadth first search.
	DialListPenetrationStrategy bool `protobuf:"varint,11,opt,name=dial_list_penetration_strategy,json=dialListPenetrationStrategy,proto3" json:"dial_list_penetration_strategy,omitempty"`
	// Display the 'Follow the Sun' property in templates and broadcasts.
	DisplayFollowTheSun bool `protobuf:"varint,12,opt,name=display_follow_the_sun,json=displayFollowTheSun,proto3" json:"display_follow_the_sun,omitempty"`
	// Whether broadcasts follow the sun (prioritized east to west).
	FollowTheSun bool `protobuf:"varint,13,opt,name=follow_the_sun,json=followTheSun,proto3" json:"follow_the_sun,omitempty"`
	// Whether to hide the terminator select menu in the standard template
	// wizard and include only 'Connected, Live, and Machine' options in the
	// layered template wizard.
	SequenceTerminatorOverride bool `protobuf:"varint,14,opt,name=sequence_terminator_override,json=sequenceTerminatorOverride,proto3" json:"sequence_terminator_override,omitempty"`
	// Broadcast scheduling template ordering default value.
	BroadcastTemplateOrdering commons.BroadcastTemplateOrdering `protobuf:"varint,15,opt,name=broadcast_template_ordering,json=broadcastTemplateOrdering,proto3,enum=api.commons.BroadcastTemplateOrdering" json:"broadcast_template_ordering,omitempty"`
	// Whether the default broadcast start time is used.
	StartTimeEnabled bool `protobuf:"varint,16,opt,name=start_time_enabled,json=startTimeEnabled,proto3" json:"start_time_enabled,omitempty"`
	// Default broadcast start time.
	DefaultStartTime *BroadcastTime `protobuf:"bytes,17,opt,name=default_start_time,json=defaultStartTime,proto3" json:"default_start_time,omitempty"`
	// Whether the default broadcast stop time is used.
	StopTimeEnabled bool `protobuf:"varint,18,opt,name=stop_time_enabled,json=stopTimeEnabled,proto3" json:"stop_time_enabled,omitempty"`
	// Default broadcast stop time.
	DefaultStopTime *BroadcastTime `protobuf:"bytes,19,opt,name=default_stop_time,json=defaultStopTime,proto3" json:"default_stop_time,omitempty"`
}

func (x *BroadcastPreferences) Reset() {
	*x = BroadcastPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastPreferences) ProtoMessage() {}

func (x *BroadcastPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastPreferences.ProtoReflect.Descriptor instead.
func (*BroadcastPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{20}
}

func (x *BroadcastPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *BroadcastPreferences) GetDisplayListPenetrationStrategy() bool {
	if x != nil {
		return x.DisplayListPenetrationStrategy
	}
	return false
}

func (x *BroadcastPreferences) GetDialListPenetrationStrategy() bool {
	if x != nil {
		return x.DialListPenetrationStrategy
	}
	return false
}

func (x *BroadcastPreferences) GetDisplayFollowTheSun() bool {
	if x != nil {
		return x.DisplayFollowTheSun
	}
	return false
}

func (x *BroadcastPreferences) GetFollowTheSun() bool {
	if x != nil {
		return x.FollowTheSun
	}
	return false
}

func (x *BroadcastPreferences) GetSequenceTerminatorOverride() bool {
	if x != nil {
		return x.SequenceTerminatorOverride
	}
	return false
}

func (x *BroadcastPreferences) GetBroadcastTemplateOrdering() commons.BroadcastTemplateOrdering {
	if x != nil {
		return x.BroadcastTemplateOrdering
	}
	return commons.BroadcastTemplateOrdering(0)
}

func (x *BroadcastPreferences) GetStartTimeEnabled() bool {
	if x != nil {
		return x.StartTimeEnabled
	}
	return false
}

func (x *BroadcastPreferences) GetDefaultStartTime() *BroadcastTime {
	if x != nil {
		return x.DefaultStartTime
	}
	return nil
}

func (x *BroadcastPreferences) GetStopTimeEnabled() bool {
	if x != nil {
		return x.StopTimeEnabled
	}
	return false
}

func (x *BroadcastPreferences) GetDefaultStopTime() *BroadcastTime {
	if x != nil {
		return x.DefaultStopTime
	}
	return nil
}

// Broadcast start/stop time properties.
type BroadcastTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hour of the day (0-23).
	Hours int32 `protobuf:"varint,1,opt,name=hours,proto3" json:"hours,omitempty"`
	// Minute of the hour (0-59).
	Minutes int32 `protobuf:"varint,2,opt,name=minutes,proto3" json:"minutes,omitempty"`
	// Time zone.
	Timezone commons.TimeZone `protobuf:"varint,3,opt,name=timezone,proto3,enum=api.commons.TimeZone" json:"timezone,omitempty"`
}

func (x *BroadcastTime) Reset() {
	*x = BroadcastTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastTime) ProtoMessage() {}

func (x *BroadcastTime) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastTime.ProtoReflect.Descriptor instead.
func (*BroadcastTime) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{21}
}

func (x *BroadcastTime) GetHours() int32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *BroadcastTime) GetMinutes() int32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

func (x *BroadcastTime) GetTimezone() commons.TimeZone {
	if x != nil {
		return x.Timezone
	}
	return commons.TimeZone(0)
}

// Preferences for editing campaign scheduling properties.
type SchedulePreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Whether to display the 'Schedule By Time Zone' setting.
	DisplayScheduleByTimeZone bool `protobuf:"varint,10,opt,name=display_schedule_by_time_zone,json=displayScheduleByTimeZone,proto3" json:"display_schedule_by_time_zone,omitempty"`
	// Whether to schedule by time zone.
	UseScheduleByTimeZone bool `protobuf:"varint,11,opt,name=use_schedule_by_time_zone,json=useScheduleByTimeZone,proto3" json:"use_schedule_by_time_zone,omitempty"`
	// Scope to limit your time zone schedules by.
	ScheduleByTimeZoneScope commons.ScheduleByTimeZoneScope `protobuf:"varint,12,opt,name=schedule_by_time_zone_scope,json=scheduleByTimeZoneScope,proto3,enum=api.commons.ScheduleByTimeZoneScope" json:"schedule_by_time_zone_scope,omitempty"`
	// Whether to display the 'Schedule As Paused' setting.
	DisplayScheduleAsPaused bool `protobuf:"varint,13,opt,name=display_schedule_as_paused,json=displayScheduleAsPaused,proto3" json:"display_schedule_as_paused,omitempty"`
	// Toggle for scheduling as running or schedule as paused.
	ScheduleAsPaused bool `protobuf:"varint,14,opt,name=schedule_as_paused,json=scheduleAsPaused,proto3" json:"schedule_as_paused,omitempty"`
	// Threshold percentage to trigger a linked broadcast.
	DefaultCompletionThreshold int64 `protobuf:"varint,15,opt,name=default_completion_threshold,json=defaultCompletionThreshold,proto3" json:"default_completion_threshold,omitempty"`
	// Whether to display 'Campaign Linking' in campaign options.
	DisplayCampaignLinking bool `protobuf:"varint,16,opt,name=display_campaign_linking,json=displayCampaignLinking,proto3" json:"display_campaign_linking,omitempty"`
	// Whether to use campaign linking as the default.
	UseCampaignLinking bool `protobuf:"varint,17,opt,name=use_campaign_linking,json=useCampaignLinking,proto3" json:"use_campaign_linking,omitempty"`
	// Campaign links map of properties, id/name as key, description as value.
	CampaignLinks map[string]string `protobuf:"bytes,18,rep,name=campaign_links,json=campaignLinks,proto3" json:"campaign_links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Default campaign link ID.
	DefaultCampaignLinkId string `protobuf:"bytes,19,opt,name=default_campaign_link_id,json=defaultCampaignLinkId,proto3" json:"default_campaign_link_id,omitempty"`
	// Whether user canceled campaigns can be resent in the organization.
	ResendCancelledCampaigns bool `protobuf:"varint,20,opt,name=resend_cancelled_campaigns,json=resendCancelledCampaigns,proto3" json:"resend_cancelled_campaigns,omitempty"`
}

func (x *SchedulePreferences) Reset() {
	*x = SchedulePreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulePreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulePreferences) ProtoMessage() {}

func (x *SchedulePreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulePreferences.ProtoReflect.Descriptor instead.
func (*SchedulePreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{22}
}

func (x *SchedulePreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SchedulePreferences) GetDisplayScheduleByTimeZone() bool {
	if x != nil {
		return x.DisplayScheduleByTimeZone
	}
	return false
}

func (x *SchedulePreferences) GetUseScheduleByTimeZone() bool {
	if x != nil {
		return x.UseScheduleByTimeZone
	}
	return false
}

func (x *SchedulePreferences) GetScheduleByTimeZoneScope() commons.ScheduleByTimeZoneScope {
	if x != nil {
		return x.ScheduleByTimeZoneScope
	}
	return commons.ScheduleByTimeZoneScope(0)
}

func (x *SchedulePreferences) GetDisplayScheduleAsPaused() bool {
	if x != nil {
		return x.DisplayScheduleAsPaused
	}
	return false
}

func (x *SchedulePreferences) GetScheduleAsPaused() bool {
	if x != nil {
		return x.ScheduleAsPaused
	}
	return false
}

func (x *SchedulePreferences) GetDefaultCompletionThreshold() int64 {
	if x != nil {
		return x.DefaultCompletionThreshold
	}
	return 0
}

func (x *SchedulePreferences) GetDisplayCampaignLinking() bool {
	if x != nil {
		return x.DisplayCampaignLinking
	}
	return false
}

func (x *SchedulePreferences) GetUseCampaignLinking() bool {
	if x != nil {
		return x.UseCampaignLinking
	}
	return false
}

func (x *SchedulePreferences) GetCampaignLinks() map[string]string {
	if x != nil {
		return x.CampaignLinks
	}
	return nil
}

func (x *SchedulePreferences) GetDefaultCampaignLinkId() string {
	if x != nil {
		return x.DefaultCampaignLinkId
	}
	return ""
}

func (x *SchedulePreferences) GetResendCancelledCampaigns() bool {
	if x != nil {
		return x.ResendCancelledCampaigns
	}
	return false
}

// Preferences for email and SMS management.
type EmailSmsPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Whether to use custom unsubscribe links (all email templates must contain
	// one if enabled).
	UseCustomLinks bool `protobuf:"varint,10,opt,name=use_custom_links,json=useCustomLinks,proto3" json:"use_custom_links,omitempty"`
	// Whether the client acknowledges that they are responsible for opt outs.
	ClientAcknowledgement bool `protobuf:"varint,11,opt,name=client_acknowledgement,json=clientAcknowledgement,proto3" json:"client_acknowledgement,omitempty"`
	// Return email addresses that will be available in broadcasts.
	EmailFromAddresses []string `protobuf:"bytes,12,rep,name=email_from_addresses,json=emailFromAddresses,proto3" json:"email_from_addresses,omitempty"`
}

func (x *EmailSmsPreferences) Reset() {
	*x = EmailSmsPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailSmsPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailSmsPreferences) ProtoMessage() {}

func (x *EmailSmsPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailSmsPreferences.ProtoReflect.Descriptor instead.
func (*EmailSmsPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{23}
}

func (x *EmailSmsPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *EmailSmsPreferences) GetUseCustomLinks() bool {
	if x != nil {
		return x.UseCustomLinks
	}
	return false
}

func (x *EmailSmsPreferences) GetClientAcknowledgement() bool {
	if x != nil {
		return x.ClientAcknowledgement
	}
	return false
}

func (x *EmailSmsPreferences) GetEmailFromAddresses() []string {
	if x != nil {
		return x.EmailFromAddresses
	}
	return nil
}

// Preferences for business intelligence settings/controls in analytics.
type BusinessPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Number of weeks of past data that are accessible.
	WeeksOfData int32 `protobuf:"varint,10,opt,name=weeks_of_data,json=weeksOfData,proto3" json:"weeks_of_data,omitempty"`
	// Default time zone for business intelligence.
	TimeZone commons.AnaTimeZone `protobuf:"varint,11,opt,name=time_zone,json=timeZone,proto3,enum=api.commons.AnaTimeZone" json:"time_zone,omitempty"`
	// Whether to allow multi-client access.
	MultiClientAccess bool `protobuf:"varint,12,opt,name=multi_client_access,json=multiClientAccess,proto3" json:"multi_client_access,omitempty"`
	// Enable/disable of custom visualizations in BI.
	CustomVisualizations bool `protobuf:"varint,13,opt,name=custom_visualizations,json=customVisualizations,proto3" json:"custom_visualizations,omitempty"`
	// Time filter for custom dashboard and visualizations.
	TimeFilter string `protobuf:"bytes,14,opt,name=time_filter,json=timeFilter,proto3" json:"time_filter,omitempty"`
}

func (x *BusinessPreferences) Reset() {
	*x = BusinessPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessPreferences) ProtoMessage() {}

func (x *BusinessPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessPreferences.ProtoReflect.Descriptor instead.
func (*BusinessPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{24}
}

func (x *BusinessPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *BusinessPreferences) GetWeeksOfData() int32 {
	if x != nil {
		return x.WeeksOfData
	}
	return 0
}

func (x *BusinessPreferences) GetTimeZone() commons.AnaTimeZone {
	if x != nil {
		return x.TimeZone
	}
	return commons.AnaTimeZone(0)
}

func (x *BusinessPreferences) GetMultiClientAccess() bool {
	if x != nil {
		return x.MultiClientAccess
	}
	return false
}

func (x *BusinessPreferences) GetCustomVisualizations() bool {
	if x != nil {
		return x.CustomVisualizations
	}
	return false
}

func (x *BusinessPreferences) GetTimeFilter() string {
	if x != nil {
		return x.TimeFilter
	}
	return ""
}

// Preferences for scorecards management and evaluation.
type ScorecardsPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The percentage of randomized calls shown to the user for evaluation.
	// Must be between 1-100.
	CallSamplePercentage uint32 `protobuf:"varint,2,opt,name=call_sample_percentage,json=callSamplePercentage,proto3" json:"call_sample_percentage,omitempty"`
	// Maximum number of evaluations per user, per category,
	// over the given time interval
	MaxUserEvaluations uint32 `protobuf:"varint,3,opt,name=max_user_evaluations,json=maxUserEvaluations,proto3" json:"max_user_evaluations,omitempty"`
	// The time interval over which calls are listed for scoring.
	EvaluationInterval Scorecards_EvaluationInterval `protobuf:"varint,4,opt,name=evaluation_interval,json=evaluationInterval,proto3,enum=api.commons.org.Scorecards_EvaluationInterval" json:"evaluation_interval,omitempty"`
}

func (x *ScorecardsPreferences) Reset() {
	*x = ScorecardsPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScorecardsPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsPreferences) ProtoMessage() {}

func (x *ScorecardsPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsPreferences.ProtoReflect.Descriptor instead.
func (*ScorecardsPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{25}
}

func (x *ScorecardsPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ScorecardsPreferences) GetCallSamplePercentage() uint32 {
	if x != nil {
		return x.CallSamplePercentage
	}
	return 0
}

func (x *ScorecardsPreferences) GetMaxUserEvaluations() uint32 {
	if x != nil {
		return x.MaxUserEvaluations
	}
	return 0
}

func (x *ScorecardsPreferences) GetEvaluationInterval() Scorecards_EvaluationInterval {
	if x != nil {
		return x.EvaluationInterval
	}
	return Scorecards_EVALUATION_INTERVAL_DAY_UNSPECIFIED
}

// Scorecards properties.
type Scorecards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Scorecards) Reset() {
	*x = Scorecards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scorecards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scorecards) ProtoMessage() {}

func (x *Scorecards) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scorecards.ProtoReflect.Descriptor instead.
func (*Scorecards) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{26}
}

// Preferences for voice analytics. Primarily consumed and interpreted by
// localmixer when mixing and transcribing call recordings.
type VoiceAnalyticsPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Optional. When enabled call recordings will be transcribed and archived
	// by localmixer in voice analytics.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Optional. List of redactions to be performed, when voice analytics is
	// enabled, on each call recording and transcript.
	Redact []*VoiceAnalytics_Redact `protobuf:"bytes,3,rep,name=redact,proto3" json:"redact,omitempty"`
	// Optional. Flagging transcript notification preferences.
	Notify *VoiceAnalytics_Notify `protobuf:"bytes,4,opt,name=notify,proto3" json:"notify,omitempty"`
	// Optional. Billing report notification preferences.
	BillingNotify *VoiceAnalytics_Notify `protobuf:"bytes,5,opt,name=billing_notify,json=billingNotify,proto3" json:"billing_notify,omitempty"`
	// Optional. Number format for transcript dispositions.
	NumberFormat string `protobuf:"bytes,6,opt,name=number_format,json=numberFormat,proto3" json:"number_format,omitempty"`
	// Optional. Will eventually be deprecated. When voice analytics is enabled
	// and this is true all cardinal numbers in each call recording and
	// transcript will be redacted.
	RedactAllDigits bool `protobuf:"varint,10,opt,name=redact_all_digits,json=redactAllDigits,proto3" json:"redact_all_digits,omitempty"`
	// Required. Minimum milliseconds of silence to occur before considered to
	// be silence by voice analytics.
	SilenceThreshold uint32 `protobuf:"varint,100,opt,name=silence_threshold,json=silenceThreshold,proto3" json:"silence_threshold,omitempty"`
	// Required. Minimum milliseconds of talk over to occur before considered
	// to be talk over by voice analytics.
	TalkOverThreshold uint32 `protobuf:"varint,200,opt,name=talk_over_threshold,json=talkOverThreshold,proto3" json:"talk_over_threshold,omitempty"`
}

func (x *VoiceAnalyticsPreferences) Reset() {
	*x = VoiceAnalyticsPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceAnalyticsPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceAnalyticsPreferences) ProtoMessage() {}

func (x *VoiceAnalyticsPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceAnalyticsPreferences.ProtoReflect.Descriptor instead.
func (*VoiceAnalyticsPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{27}
}

func (x *VoiceAnalyticsPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *VoiceAnalyticsPreferences) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *VoiceAnalyticsPreferences) GetRedact() []*VoiceAnalytics_Redact {
	if x != nil {
		return x.Redact
	}
	return nil
}

func (x *VoiceAnalyticsPreferences) GetNotify() *VoiceAnalytics_Notify {
	if x != nil {
		return x.Notify
	}
	return nil
}

func (x *VoiceAnalyticsPreferences) GetBillingNotify() *VoiceAnalytics_Notify {
	if x != nil {
		return x.BillingNotify
	}
	return nil
}

func (x *VoiceAnalyticsPreferences) GetNumberFormat() string {
	if x != nil {
		return x.NumberFormat
	}
	return ""
}

func (x *VoiceAnalyticsPreferences) GetRedactAllDigits() bool {
	if x != nil {
		return x.RedactAllDigits
	}
	return false
}

func (x *VoiceAnalyticsPreferences) GetSilenceThreshold() uint32 {
	if x != nil {
		return x.SilenceThreshold
	}
	return 0
}

func (x *VoiceAnalyticsPreferences) GetTalkOverThreshold() uint32 {
	if x != nil {
		return x.TalkOverThreshold
	}
	return 0
}

// Namespace for voice analytics messages.
type VoiceAnalytics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VoiceAnalytics) Reset() {
	*x = VoiceAnalytics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceAnalytics) ProtoMessage() {}

func (x *VoiceAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceAnalytics.ProtoReflect.Descriptor instead.
func (*VoiceAnalytics) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{28}
}

// Preferences for automated report jobs end-of-day delivery times.
type EndOfDayPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Delivery time for reports on Monday.
	EodMonday int32 `protobuf:"varint,10,opt,name=eod_monday,json=eodMonday,proto3" json:"eod_monday,omitempty"`
	// Delivery time for reports on Tuesday.
	EodTuesday int32 `protobuf:"varint,11,opt,name=eod_tuesday,json=eodTuesday,proto3" json:"eod_tuesday,omitempty"`
	// Delivery time for reports on Wednesday.
	EodWednesday int32 `protobuf:"varint,12,opt,name=eod_wednesday,json=eodWednesday,proto3" json:"eod_wednesday,omitempty"`
	// Delivery time for reports on Thursday.
	EodThursday int32 `protobuf:"varint,13,opt,name=eod_thursday,json=eodThursday,proto3" json:"eod_thursday,omitempty"`
	// Delivery time for reports on Friday.
	EodFriday int32 `protobuf:"varint,14,opt,name=eod_friday,json=eodFriday,proto3" json:"eod_friday,omitempty"`
	// Delivery time for reports on Saturday.
	EodSaturday int32 `protobuf:"varint,15,opt,name=eod_saturday,json=eodSaturday,proto3" json:"eod_saturday,omitempty"`
	// Delivery time for reports on Sunday.
	EodSunday int32 `protobuf:"varint,16,opt,name=eod_sunday,json=eodSunday,proto3" json:"eod_sunday,omitempty"`
}

func (x *EndOfDayPreferences) Reset() {
	*x = EndOfDayPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndOfDayPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndOfDayPreferences) ProtoMessage() {}

func (x *EndOfDayPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndOfDayPreferences.ProtoReflect.Descriptor instead.
func (*EndOfDayPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{29}
}

func (x *EndOfDayPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *EndOfDayPreferences) GetEodMonday() int32 {
	if x != nil {
		return x.EodMonday
	}
	return 0
}

func (x *EndOfDayPreferences) GetEodTuesday() int32 {
	if x != nil {
		return x.EodTuesday
	}
	return 0
}

func (x *EndOfDayPreferences) GetEodWednesday() int32 {
	if x != nil {
		return x.EodWednesday
	}
	return 0
}

func (x *EndOfDayPreferences) GetEodThursday() int32 {
	if x != nil {
		return x.EodThursday
	}
	return 0
}

func (x *EndOfDayPreferences) GetEodFriday() int32 {
	if x != nil {
		return x.EodFriday
	}
	return 0
}

func (x *EndOfDayPreferences) GetEodSaturday() int32 {
	if x != nil {
		return x.EodSaturday
	}
	return 0
}

func (x *EndOfDayPreferences) GetEodSunday() int32 {
	if x != nil {
		return x.EodSunday
	}
	return 0
}

// Preferences for filters in reports and broadcasts.
type FilterPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Default filtering for automated reports.
	DefaultAutoReportFilter *ReportFilter `protobuf:"bytes,10,opt,name=default_auto_report_filter,json=defaultAutoReportFilter,proto3" json:"default_auto_report_filter,omitempty"`
	// Whether to send auto-reports even if they are empty.
	SendEmptyAutoReports bool `protobuf:"varint,11,opt,name=send_empty_auto_reports,json=sendEmptyAutoReports,proto3" json:"send_empty_auto_reports,omitempty"`
	// Whether or not to display the setting in the 'Resend' window.
	DisplayBroadcastResendFilter bool `protobuf:"varint,12,opt,name=display_broadcast_resend_filter,json=displayBroadcastResendFilter,proto3" json:"display_broadcast_resend_filter,omitempty"`
	// Determines which contact records will be included in the new broadcast.
	DefaultBroadcastResendFilter *ReportFilter `protobuf:"bytes,13,opt,name=default_broadcast_resend_filter,json=defaultBroadcastResendFilter,proto3" json:"default_broadcast_resend_filter,omitempty"`
}

func (x *FilterPreferences) Reset() {
	*x = FilterPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterPreferences) ProtoMessage() {}

func (x *FilterPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterPreferences.ProtoReflect.Descriptor instead.
func (*FilterPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{30}
}

func (x *FilterPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *FilterPreferences) GetDefaultAutoReportFilter() *ReportFilter {
	if x != nil {
		return x.DefaultAutoReportFilter
	}
	return nil
}

func (x *FilterPreferences) GetSendEmptyAutoReports() bool {
	if x != nil {
		return x.SendEmptyAutoReports
	}
	return false
}

func (x *FilterPreferences) GetDisplayBroadcastResendFilter() bool {
	if x != nil {
		return x.DisplayBroadcastResendFilter
	}
	return false
}

func (x *FilterPreferences) GetDefaultBroadcastResendFilter() *ReportFilter {
	if x != nil {
		return x.DefaultBroadcastResendFilter
	}
	return nil
}

// Report filter properties.
type ReportFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ReportFilter_Standard
	//	*ReportFilter_Custom
	Choice isReportFilter_Choice `protobuf_oneof:"choice"`
}

func (x *ReportFilter) Reset() {
	*x = ReportFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportFilter) ProtoMessage() {}

func (x *ReportFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportFilter.ProtoReflect.Descriptor instead.
func (*ReportFilter) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{31}
}

func (m *ReportFilter) GetChoice() isReportFilter_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ReportFilter) GetStandard() commons.StandardReportFilter {
	if x, ok := x.GetChoice().(*ReportFilter_Standard); ok {
		return x.Standard
	}
	return commons.StandardReportFilter(0)
}

func (x *ReportFilter) GetCustom() int64 {
	if x, ok := x.GetChoice().(*ReportFilter_Custom); ok {
		return x.Custom
	}
	return 0
}

type isReportFilter_Choice interface {
	isReportFilter_Choice()
}

type ReportFilter_Standard struct {
	// Standard report filter enum choice.
	Standard commons.StandardReportFilter `protobuf:"varint,1,opt,name=standard,proto3,enum=api.commons.StandardReportFilter,oneof"`
}

type ReportFilter_Custom struct {
	// Custom report filter xml property SID.
	Custom int64 `protobuf:"varint,2,opt,name=custom,proto3,oneof"`
}

func (*ReportFilter_Standard) isReportFilter_Choice() {}

func (*ReportFilter_Custom) isReportFilter_Choice() {}

// Preferences for audio recording properties.
type RecordingPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Whether to use custom recordings file name convention.
	ConventionEnabled bool `protobuf:"varint,10,opt,name=convention_enabled,json=conventionEnabled,proto3" json:"convention_enabled,omitempty"`
	// File name convention for recording files.
	FileNameConvention *RecordingsFileNamingConvention `protobuf:"bytes,11,opt,name=file_name_convention,json=fileNameConvention,proto3" json:"file_name_convention,omitempty"`
	// Whether to use custom recordings file name convention for zip.
	ZipConventionEnabled bool `protobuf:"varint,12,opt,name=zip_convention_enabled,json=zipConventionEnabled,proto3" json:"zip_convention_enabled,omitempty"`
	// File name convention for archived/compressed zip recording files.
	ZipFileNameConvention *RecordingsZipFileNamingConvention `protobuf:"bytes,13,opt,name=zip_file_name_convention,json=zipFileNameConvention,proto3" json:"zip_file_name_convention,omitempty"`
	// Recording export file type (.wav or .mp3).
	ExportFileType commons.RecordingFileType `protobuf:"varint,14,opt,name=export_file_type,json=exportFileType,proto3,enum=api.commons.RecordingFileType" json:"export_file_type,omitempty"`
}

func (x *RecordingPreferences) Reset() {
	*x = RecordingPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingPreferences) ProtoMessage() {}

func (x *RecordingPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingPreferences.ProtoReflect.Descriptor instead.
func (*RecordingPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{32}
}

func (x *RecordingPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *RecordingPreferences) GetConventionEnabled() bool {
	if x != nil {
		return x.ConventionEnabled
	}
	return false
}

func (x *RecordingPreferences) GetFileNameConvention() *RecordingsFileNamingConvention {
	if x != nil {
		return x.FileNameConvention
	}
	return nil
}

func (x *RecordingPreferences) GetZipConventionEnabled() bool {
	if x != nil {
		return x.ZipConventionEnabled
	}
	return false
}

func (x *RecordingPreferences) GetZipFileNameConvention() *RecordingsZipFileNamingConvention {
	if x != nil {
		return x.ZipFileNameConvention
	}
	return nil
}

func (x *RecordingPreferences) GetExportFileType() commons.RecordingFileType {
	if x != nil {
		return x.ExportFileType
	}
	return commons.RecordingFileType(0)
}

// Recording file naming convention properties (per call type).
type RecordingsFileNamingConvention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// XML client property SID.
	XmlClientPropertySid int64 `protobuf:"varint,1,opt,name=xml_client_property_sid,json=xmlClientPropertySid,proto3" json:"xml_client_property_sid,omitempty"`
	// Convention for inbound call recordings.
	Inbound *FileNamingConvention `protobuf:"bytes,2,opt,name=inbound,proto3" json:"inbound,omitempty"`
	// Convention for manual-dial call recordings.
	Manual *FileNamingConvention `protobuf:"bytes,3,opt,name=manual,proto3" json:"manual,omitempty"`
	// Convention for outbound call recordings.
	Outbound *FileNamingConvention `protobuf:"bytes,4,opt,name=outbound,proto3" json:"outbound,omitempty"`
	// Convention for preview-dial call recordings.
	Preview *FileNamingConvention `protobuf:"bytes,5,opt,name=preview,proto3" json:"preview,omitempty"`
}

func (x *RecordingsFileNamingConvention) Reset() {
	*x = RecordingsFileNamingConvention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingsFileNamingConvention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingsFileNamingConvention) ProtoMessage() {}

func (x *RecordingsFileNamingConvention) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingsFileNamingConvention.ProtoReflect.Descriptor instead.
func (*RecordingsFileNamingConvention) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{33}
}

func (x *RecordingsFileNamingConvention) GetXmlClientPropertySid() int64 {
	if x != nil {
		return x.XmlClientPropertySid
	}
	return 0
}

func (x *RecordingsFileNamingConvention) GetInbound() *FileNamingConvention {
	if x != nil {
		return x.Inbound
	}
	return nil
}

func (x *RecordingsFileNamingConvention) GetManual() *FileNamingConvention {
	if x != nil {
		return x.Manual
	}
	return nil
}

func (x *RecordingsFileNamingConvention) GetOutbound() *FileNamingConvention {
	if x != nil {
		return x.Outbound
	}
	return nil
}

func (x *RecordingsFileNamingConvention) GetPreview() *FileNamingConvention {
	if x != nil {
		return x.Preview
	}
	return nil
}

// Recording file naming convention properties for compressed call recordings.
type RecordingsZipFileNamingConvention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// XML client property SID.
	XmlClientPropertySid int64 `protobuf:"varint,1,opt,name=xml_client_property_sid,json=xmlClientPropertySid,proto3" json:"xml_client_property_sid,omitempty"`
	// Convention for inbound call recordings.
	Inbound *FileNamingConvention `protobuf:"bytes,2,opt,name=inbound,proto3" json:"inbound,omitempty"`
	// Convention for manual call recordings.
	Manual *FileNamingConvention `protobuf:"bytes,3,opt,name=manual,proto3" json:"manual,omitempty"`
	// Convention for outbound call recordings.
	Outbound *FileNamingConvention `protobuf:"bytes,4,opt,name=outbound,proto3" json:"outbound,omitempty"`
	// Convention for combined (all) call recordings.
	Combined *FileNamingConvention `protobuf:"bytes,5,opt,name=combined,proto3" json:"combined,omitempty"`
}

func (x *RecordingsZipFileNamingConvention) Reset() {
	*x = RecordingsZipFileNamingConvention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingsZipFileNamingConvention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingsZipFileNamingConvention) ProtoMessage() {}

func (x *RecordingsZipFileNamingConvention) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingsZipFileNamingConvention.ProtoReflect.Descriptor instead.
func (*RecordingsZipFileNamingConvention) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{34}
}

func (x *RecordingsZipFileNamingConvention) GetXmlClientPropertySid() int64 {
	if x != nil {
		return x.XmlClientPropertySid
	}
	return 0
}

func (x *RecordingsZipFileNamingConvention) GetInbound() *FileNamingConvention {
	if x != nil {
		return x.Inbound
	}
	return nil
}

func (x *RecordingsZipFileNamingConvention) GetManual() *FileNamingConvention {
	if x != nil {
		return x.Manual
	}
	return nil
}

func (x *RecordingsZipFileNamingConvention) GetOutbound() *FileNamingConvention {
	if x != nil {
		return x.Outbound
	}
	return nil
}

func (x *RecordingsZipFileNamingConvention) GetCombined() *FileNamingConvention {
	if x != nil {
		return x.Combined
	}
	return nil
}

// File naming convention properties containing name segments.
type FileNamingConvention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of file name segments.
	Segments []*FileNameSegment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *FileNamingConvention) Reset() {
	*x = FileNamingConvention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileNamingConvention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileNamingConvention) ProtoMessage() {}

func (x *FileNamingConvention) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileNamingConvention.ProtoReflect.Descriptor instead.
func (*FileNamingConvention) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{35}
}

func (x *FileNamingConvention) GetSegments() []*FileNameSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

// File name segment type and attributes.
type FileNameSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Segment type.
	SegmentType string `protobuf:"bytes,1,opt,name=segment_type,json=segmentType,proto3" json:"segment_type,omitempty"`
	// Format pattern.
	FormatPattern string `protobuf:"bytes,2,opt,name=format_pattern,json=formatPattern,proto3" json:"format_pattern,omitempty"`
	// Time zone ID (only required for certain segment types).
	TimeZoneId string `protobuf:"bytes,3,opt,name=time_zone_id,json=timeZoneId,proto3" json:"time_zone_id,omitempty"`
}

func (x *FileNameSegment) Reset() {
	*x = FileNameSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileNameSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileNameSegment) ProtoMessage() {}

func (x *FileNameSegment) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileNameSegment.ProtoReflect.Descriptor instead.
func (*FileNameSegment) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{36}
}

func (x *FileNameSegment) GetSegmentType() string {
	if x != nil {
		return x.SegmentType
	}
	return ""
}

func (x *FileNameSegment) GetFormatPattern() string {
	if x != nil {
		return x.FormatPattern
	}
	return ""
}

func (x *FileNameSegment) GetTimeZoneId() string {
	if x != nil {
		return x.TimeZoneId
	}
	return ""
}

// Preferences for essential organization properties only to be used by
// account managers and customer support.
type AdminClientPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Enable the use of reserved carriers.
	UseReservedCarrier bool `protobuf:"varint,10,opt,name=use_reserved_carrier,json=useReservedCarrier,proto3" json:"use_reserved_carrier,omitempty"`
	// List of reserved carriers.
	ReservedCarriers []string `protobuf:"bytes,11,rep,name=reserved_carriers,json=reservedCarriers,proto3" json:"reserved_carriers,omitempty"`
	// Email sendgrid API key.
	EmailKey string `protobuf:"bytes,12,opt,name=email_key,json=emailKey,proto3" json:"email_key,omitempty"`
	// Email sendgrid API key ID.
	EmailId string `protobuf:"bytes,13,opt,name=email_id,json=emailId,proto3" json:"email_id,omitempty"`
	// Email sendgrid API key name.
	EmailName string `protobuf:"bytes,14,opt,name=email_name,json=emailName,proto3" json:"email_name,omitempty"`
	// Whitelisted IPs for the organization.
	WhitelistIps []string `protobuf:"bytes,15,rep,name=whitelist_ips,json=whitelistIps,proto3" json:"whitelist_ips,omitempty"`
	// Whitelisted domain names for the organization.
	WhitelistDomains []string `protobuf:"bytes,16,rep,name=whitelist_domains,json=whitelistDomains,proto3" json:"whitelist_domains,omitempty"`
	// Scheduled callbacks service ID.
	CallbacksServiceId string `protobuf:"bytes,17,opt,name=callbacks_service_id,json=callbacksServiceId,proto3" json:"callbacks_service_id,omitempty"`
	// Whether agent screen recording is enabled.
	AgentScreenRecording bool `protobuf:"varint,18,opt,name=agent_screen_recording,json=agentScreenRecording,proto3" json:"agent_screen_recording,omitempty"`
	// List of allowed countries for the organization.
	AllowedCountries []commons.Country `protobuf:"varint,19,rep,packed,name=allowed_countries,json=allowedCountries,proto3,enum=api.commons.Country" json:"allowed_countries,omitempty"`
}

func (x *AdminClientPreferences) Reset() {
	*x = AdminClientPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminClientPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminClientPreferences) ProtoMessage() {}

func (x *AdminClientPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminClientPreferences.ProtoReflect.Descriptor instead.
func (*AdminClientPreferences) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{37}
}

func (x *AdminClientPreferences) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *AdminClientPreferences) GetUseReservedCarrier() bool {
	if x != nil {
		return x.UseReservedCarrier
	}
	return false
}

func (x *AdminClientPreferences) GetReservedCarriers() []string {
	if x != nil {
		return x.ReservedCarriers
	}
	return nil
}

func (x *AdminClientPreferences) GetEmailKey() string {
	if x != nil {
		return x.EmailKey
	}
	return ""
}

func (x *AdminClientPreferences) GetEmailId() string {
	if x != nil {
		return x.EmailId
	}
	return ""
}

func (x *AdminClientPreferences) GetEmailName() string {
	if x != nil {
		return x.EmailName
	}
	return ""
}

func (x *AdminClientPreferences) GetWhitelistIps() []string {
	if x != nil {
		return x.WhitelistIps
	}
	return nil
}

func (x *AdminClientPreferences) GetWhitelistDomains() []string {
	if x != nil {
		return x.WhitelistDomains
	}
	return nil
}

func (x *AdminClientPreferences) GetCallbacksServiceId() string {
	if x != nil {
		return x.CallbacksServiceId
	}
	return ""
}

func (x *AdminClientPreferences) GetAgentScreenRecording() bool {
	if x != nil {
		return x.AgentScreenRecording
	}
	return false
}

func (x *AdminClientPreferences) GetAllowedCountries() []commons.Country {
	if x != nil {
		return x.AllowedCountries
	}
	return nil
}

// BusinessHours or operating hours.
type BusinessHours struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId       string   `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Id          string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Ranges      []*Range `protobuf:"bytes,5,rep,name=ranges,proto3" json:"ranges,omitempty"`
}

func (x *BusinessHours) Reset() {
	*x = BusinessHours{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessHours) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessHours) ProtoMessage() {}

func (x *BusinessHours) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessHours.ProtoReflect.Descriptor instead.
func (*BusinessHours) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{38}
}

func (x *BusinessHours) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *BusinessHours) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BusinessHours) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BusinessHours) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BusinessHours) GetRanges() []*Range {
	if x != nil {
		return x.Ranges
	}
	return nil
}

// Range including start and end times.
type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHour   int32 `protobuf:"varint,1,opt,name=start_hour,json=startHour,proto3" json:"start_hour,omitempty"`
	StartMinute int32 `protobuf:"varint,2,opt,name=start_minute,json=startMinute,proto3" json:"start_minute,omitempty"`
	EndHour     int32 `protobuf:"varint,3,opt,name=end_hour,json=endHour,proto3" json:"end_hour,omitempty"`
	EndMinute   int32 `protobuf:"varint,4,opt,name=end_minute,json=endMinute,proto3" json:"end_minute,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{39}
}

func (x *Range) GetStartHour() int32 {
	if x != nil {
		return x.StartHour
	}
	return 0
}

func (x *Range) GetStartMinute() int32 {
	if x != nil {
		return x.StartMinute
	}
	return 0
}

func (x *Range) GetEndHour() int32 {
	if x != nil {
		return x.EndHour
	}
	return 0
}

func (x *Range) GetEndMinute() int32 {
	if x != nil {
		return x.EndMinute
	}
	return 0
}

type BargeInFiltering_HuntGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use any huntgroup (no filtering).
	Any bool `protobuf:"varint,1,opt,name=any,proto3" json:"any,omitempty"`
	// Specific hunt group SID.
	HuntGroupSid int64 `protobuf:"varint,2,opt,name=hunt_group_sid,json=huntGroupSid,proto3" json:"hunt_group_sid,omitempty"`
}

func (x *BargeInFiltering_HuntGroup) Reset() {
	*x = BargeInFiltering_HuntGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BargeInFiltering_HuntGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BargeInFiltering_HuntGroup) ProtoMessage() {}

func (x *BargeInFiltering_HuntGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BargeInFiltering_HuntGroup.ProtoReflect.Descriptor instead.
func (*BargeInFiltering_HuntGroup) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{11, 0}
}

func (x *BargeInFiltering_HuntGroup) GetAny() bool {
	if x != nil {
		return x.Any
	}
	return false
}

func (x *BargeInFiltering_HuntGroup) GetHuntGroupSid() int64 {
	if x != nil {
		return x.HuntGroupSid
	}
	return 0
}

type BargeInFiltering_AgentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use any status (no filtering).
	Any bool `protobuf:"varint,1,opt,name=any,proto3" json:"any,omitempty"`
	// Agent waiting.
	Waiting bool `protobuf:"varint,2,opt,name=waiting,proto3" json:"waiting,omitempty"`
	// Agent on call.
	OnCall bool `protobuf:"varint,3,opt,name=on_call,json=onCall,proto3" json:"on_call,omitempty"`
	// Agent wrap-up.
	WrapUp bool `protobuf:"varint,4,opt,name=wrap_up,json=wrapUp,proto3" json:"wrap_up,omitempty"`
	// Agent paused.
	Paused bool `protobuf:"varint,5,opt,name=paused,proto3" json:"paused,omitempty"`
	// Agent transferring call.
	Transfer bool `protobuf:"varint,6,opt,name=transfer,proto3" json:"transfer,omitempty"`
	// Agent previewing call.
	Preview bool `protobuf:"varint,7,opt,name=preview,proto3" json:"preview,omitempty"`
	// Agent manual-dial.
	Manual bool `protobuf:"varint,8,opt,name=manual,proto3" json:"manual,omitempty"`
	// Agent PBX.
	Pbx bool `protobuf:"varint,9,opt,name=pbx,proto3" json:"pbx,omitempty"`
	// Agent on intercom.
	Intercom bool `protobuf:"varint,10,opt,name=intercom,proto3" json:"intercom,omitempty"`
}

func (x *BargeInFiltering_AgentStatus) Reset() {
	*x = BargeInFiltering_AgentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BargeInFiltering_AgentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BargeInFiltering_AgentStatus) ProtoMessage() {}

func (x *BargeInFiltering_AgentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BargeInFiltering_AgentStatus.ProtoReflect.Descriptor instead.
func (*BargeInFiltering_AgentStatus) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{11, 1}
}

func (x *BargeInFiltering_AgentStatus) GetAny() bool {
	if x != nil {
		return x.Any
	}
	return false
}

func (x *BargeInFiltering_AgentStatus) GetWaiting() bool {
	if x != nil {
		return x.Waiting
	}
	return false
}

func (x *BargeInFiltering_AgentStatus) GetOnCall() bool {
	if x != nil {
		return x.OnCall
	}
	return false
}

func (x *BargeInFiltering_AgentStatus) GetWrapUp() bool {
	if x != nil {
		return x.WrapUp
	}
	return false
}

func (x *BargeInFiltering_AgentStatus) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *BargeInFiltering_AgentStatus) GetTransfer() bool {
	if x != nil {
		return x.Transfer
	}
	return false
}

func (x *BargeInFiltering_AgentStatus) GetPreview() bool {
	if x != nil {
		return x.Preview
	}
	return false
}

func (x *BargeInFiltering_AgentStatus) GetManual() bool {
	if x != nil {
		return x.Manual
	}
	return false
}

func (x *BargeInFiltering_AgentStatus) GetPbx() bool {
	if x != nil {
		return x.Pbx
	}
	return false
}

func (x *BargeInFiltering_AgentStatus) GetIntercom() bool {
	if x != nil {
		return x.Intercom
	}
	return false
}

type VoiceAnalytics_Redact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Where:
	//
	//	*VoiceAnalytics_Redact_Number
	Where isVoiceAnalytics_Redact_Where `protobuf_oneof:"where"`
}

func (x *VoiceAnalytics_Redact) Reset() {
	*x = VoiceAnalytics_Redact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceAnalytics_Redact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceAnalytics_Redact) ProtoMessage() {}

func (x *VoiceAnalytics_Redact) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceAnalytics_Redact.ProtoReflect.Descriptor instead.
func (*VoiceAnalytics_Redact) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{28, 0}
}

func (m *VoiceAnalytics_Redact) GetWhere() isVoiceAnalytics_Redact_Where {
	if m != nil {
		return m.Where
	}
	return nil
}

func (x *VoiceAnalytics_Redact) GetNumber() *VoiceAnalytics_Number {
	if x, ok := x.GetWhere().(*VoiceAnalytics_Redact_Number); ok {
		return x.Number
	}
	return nil
}

type isVoiceAnalytics_Redact_Where interface {
	isVoiceAnalytics_Redact_Where()
}

type VoiceAnalytics_Redact_Number struct {
	// Optional. Redact numbers.
	Number *VoiceAnalytics_Number `protobuf:"bytes,1,opt,name=number,proto3,oneof"`
}

func (*VoiceAnalytics_Redact_Number) isVoiceAnalytics_Redact_Where() {}

type VoiceAnalytics_Number struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The kind of number to redact.
	Kind VoiceAnalytics_Number_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=api.commons.org.VoiceAnalytics_Number_Kind" json:"kind,omitempty"`
	// Optional. When value is non zero only numbers composed of at least
	// `min_consecutive` digits will be redacted. For example, when the
	// transcript contains the number `one two three four five six`
	// redaction will not occur when `min_consecutive` is greater than 6.
	MinConsecutive uint32 `protobuf:"varint,2,opt,name=min_consecutive,json=minConsecutive,proto3" json:"min_consecutive,omitempty"`
	// Optional. When value is non zero only numbers composed of at most
	// `max_consecutive` digits will be redacted. For example, when the
	// transcript contains the number `one two three four five six`
	// redaction will not occur when `max_consecutive` is less than 6.
	MaxConsecutive uint32 `protobuf:"varint,3,opt,name=max_consecutive,json=maxConsecutive,proto3" json:"max_consecutive,omitempty"`
	// slop is the number of extra words that can be in between digits and
	// still count as a number. For example: slop of 2 with min_consecutive
	// 3 would allow "one uh two and three" to count as a number.
	Slop uint32 `protobuf:"varint,4,opt,name=slop,proto3" json:"slop,omitempty"`
}

func (x *VoiceAnalytics_Number) Reset() {
	*x = VoiceAnalytics_Number{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceAnalytics_Number) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceAnalytics_Number) ProtoMessage() {}

func (x *VoiceAnalytics_Number) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceAnalytics_Number.ProtoReflect.Descriptor instead.
func (*VoiceAnalytics_Number) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{28, 1}
}

func (x *VoiceAnalytics_Number) GetKind() VoiceAnalytics_Number_Kind {
	if x != nil {
		return x.Kind
	}
	return VoiceAnalytics_Number_KIND_CARDINAL_UNSPECIFIED
}

func (x *VoiceAnalytics_Number) GetMinConsecutive() uint32 {
	if x != nil {
		return x.MinConsecutive
	}
	return 0
}

func (x *VoiceAnalytics_Number) GetMaxConsecutive() uint32 {
	if x != nil {
		return x.MaxConsecutive
	}
	return 0
}

func (x *VoiceAnalytics_Number) GetSlop() uint32 {
	if x != nil {
		return x.Slop
	}
	return 0
}

type VoiceAnalytics_Notify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Cron pattern determining notification frequency. Defaults
	// to every 15 minutes when not specified.
	Cron string `protobuf:"bytes,1,opt,name=cron,proto3" json:"cron,omitempty"`
}

func (x *VoiceAnalytics_Notify) Reset() {
	*x = VoiceAnalytics_Notify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_preferences_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceAnalytics_Notify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceAnalytics_Notify) ProtoMessage() {}

func (x *VoiceAnalytics_Notify) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_preferences_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceAnalytics_Notify.ProtoReflect.Descriptor instead.
func (*VoiceAnalytics_Notify) Descriptor() ([]byte, []int) {
	return file_api_commons_org_preferences_proto_rawDescGZIP(), []int{28, 2}
}

func (x *VoiceAnalytics_Notify) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

var File_api_commons_org_preferences_proto protoreflect.FileDescriptor

var file_api_commons_org_preferences_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72,
	0x67, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x6f, 0x72, 0x67, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x6f, 0x72, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x02, 0x0a, 0x17, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x47, 0x0a,
	0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x83, 0x04, 0x0a, 0x10, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x62, 0x78, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x70, 0x62, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x6f, 0x66, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44,
	0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x12, 0x47, 0x0a, 0x21, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x75,
	0x73, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x22, 0xa5, 0x05, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x1d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x5b, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x16, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x29,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x25, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x63,
	0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x38,
	0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x03, 0x63,
	0x66, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x63, 0x66, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x97, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xfe, 0x01, 0x0a, 0x19, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x76, 0x69, 0x61, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x61, 0x49,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49,
	0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x32, 0x66, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x32, 0x66, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75,
	0x6e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x12,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x75, 0x73, 0x68, 0x55, 0x72, 0x6c, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50,
	0x75, 0x73, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x75, 0x73, 0x68, 0x55, 0x72, 0x6c, 0x22, 0xe5, 0x04,
	0x0a, 0x14, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x1a, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x62, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x16, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5e, 0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x62, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x42, 0x61, 0x72, 0x67,
	0x65, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69,
	0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x69,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x44, 0x69, 0x61, 0x6c, 0x22, 0xf7, 0x03, 0x0a, 0x10, 0x42, 0x61, 0x72, 0x67, 0x65, 0x49,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x0a, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x42, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x68, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x50, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x42,
	0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x43, 0x0a, 0x09, 0x48, 0x75, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x1a, 0xff, 0x01,
	0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x77, 0x72, 0x61, 0x70, 0x55, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x70, 0x62, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x22,
	0xd0, 0x03, 0x0a, 0x19, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x88, 0x05, 0x0a, 0x10, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x64, 0x69, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x63,
	0x66, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x43, 0x66, 0x64, 0x53, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x12,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x1b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x19, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x6b,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x89, 0x01,
	0x0a, 0x09, 0x44, 0x69, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x69,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x0f, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x69, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x11,
	0x64, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0f, 0x64, 0x69, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x48, 0x0a, 0x0e, 0x44, 0x69, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x66, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x66,
	0x64, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xd9, 0x06, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x73, 0x65, 0x4e, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x37,
	0x0a, 0x18, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x75,
	0x62, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a,
	0x11, 0x64, 0x6f, 0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x72,
	0x75, 0x62, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x6f, 0x5a, 0x69, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x12, 0x43, 0x0a, 0x0e, 0x7a, 0x69, 0x70, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x0c, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x12, 0x41, 0x0a,
	0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x6d, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6d,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x40, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x46, 0x0a, 0x0c, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x66, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x66, 0x64, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb6, 0x05, 0x0a, 0x14, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x21, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x65, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x43, 0x0a, 0x1e, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x70, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x64, 0x69,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x65, 0x5f,
	0x73, 0x75, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x65, 0x53, 0x75, 0x6e, 0x12, 0x24,
	0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x73, 0x75, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x68,
	0x65, 0x53, 0x75, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x66, 0x0a, 0x1b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x19, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x12,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x72, 0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0xbe, 0x06, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x75, 0x73, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x62, 0x0a, 0x1b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x17, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x73, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x61,
	0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14,
	0x75, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x5e,
	0x0a, 0x0e, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x37,
	0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x53, 0x6d, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x35, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x72, 0x6f, 0x6d,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x13, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x65, 0x65, 0x6b,
	0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6e,
	0x61, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x76, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xf7, 0x01, 0x0a, 0x15, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x61, 0x6c, 0x6c,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x12, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x22, 0x7a, 0x0a, 0x12, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x56, 0x41, 0x4c,
	0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x44, 0x41, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x02, 0x22, 0xca,
	0x03, 0x0a, 0x19, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a,
	0x06, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52,
	0x65, 0x64, 0x61, 0x63, 0x74, 0x52, 0x06, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x12, 0x3e, 0x0a,
	0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4d, 0x0a,
	0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0d, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65,
	0x64, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x61,
	0x6c, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x61, 0x6c, 0x6b, 0x4f, 0x76,
	0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xfc, 0x02, 0x0a, 0x0e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x53,
	0x0a, 0x06, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x1a, 0xf6, 0x01, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x6c, 0x6f, 0x70, 0x22, 0x45, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a,
	0x19, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x1a, 0x1c, 0x0a, 0x06,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x22, 0x95, 0x02, 0x0a, 0x13, 0x45,
	0x6e, 0x64, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6f, 0x64,
	0x5f, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x6f, 0x64, 0x4d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6f, 0x64, 0x5f,
	0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65,
	0x6f, 0x64, 0x54, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6f, 0x64,
	0x5f, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x65, 0x6f, 0x64, 0x57, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x6f, 0x64, 0x5f, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6f, 0x64, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6f, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6f, 0x64, 0x46, 0x72, 0x69, 0x64, 0x61, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6f, 0x64, 0x5f, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6f, 0x64, 0x53, 0x61, 0x74, 0x75, 0x72,
	0x64, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6f, 0x64, 0x5f, 0x73, 0x75, 0x6e, 0x64, 0x61,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6f, 0x64, 0x53, 0x75, 0x6e, 0x64,
	0x61, 0x79, 0x22, 0xea, 0x02, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x5a, 0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x65,
	0x6e, 0x64, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x1f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x73, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0xac, 0x03, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x18,
	0x7a, 0x69, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x5a, 0x69, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x15, 0x7a, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x10, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xdb, 0x02, 0x0a, 0x1e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x78, 0x6d, 0x6c, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x78, 0x6d, 0x6c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3d,
	0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x41, 0x0a,
	0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x3f, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x22, 0xe0, 0x02, 0x0a, 0x21, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x5a, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x78, 0x6d, 0x6c, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x78, 0x6d, 0x6c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x3d, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x41,
	0x0a, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x64, 0x22, 0x54, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7d, 0x0a, 0x0f, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xe2, 0x03, 0x0a, 0x16, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x75,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x70, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x9c,
	0x01, 0x0a, 0x0d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x83, 0x01,
	0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x42, 0xb1, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x42, 0x10, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0xa2, 0x02, 0x03, 0x41, 0x43,
	0x4f, 0xaa, 0x02, 0x0f, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x72, 0x67, 0xca, 0x02, 0x0f, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x5c, 0x4f, 0x72, 0x67, 0xe2, 0x02, 0x1b, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x5c, 0x4f, 0x72, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x3a, 0x3a, 0x4f, 0x72, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_org_preferences_proto_rawDescOnce sync.Once
	file_api_commons_org_preferences_proto_rawDescData = file_api_commons_org_preferences_proto_rawDesc
)

func file_api_commons_org_preferences_proto_rawDescGZIP() []byte {
	file_api_commons_org_preferences_proto_rawDescOnce.Do(func() {
		file_api_commons_org_preferences_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_org_preferences_proto_rawDescData)
	})
	return file_api_commons_org_preferences_proto_rawDescData
}

var file_api_commons_org_preferences_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_commons_org_preferences_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_api_commons_org_preferences_proto_goTypes = []interface{}{
	(Scorecards_EvaluationInterval)(0),        // 0: api.commons.org.Scorecards.EvaluationInterval
	(VoiceAnalytics_Number_Kind)(0),           // 1: api.commons.org.VoiceAnalytics.Number.Kind
	(*OrganizationPreferences)(nil),           // 2: api.commons.org.OrganizationPreferences
	(*AgentPreferences)(nil),                  // 3: api.commons.org.AgentPreferences
	(*ContactPreferences)(nil),                // 4: api.commons.org.ContactPreferences
	(*ImportFormat)(nil),                      // 5: api.commons.org.ImportFormat
	(*CustomImportFormat)(nil),                // 6: api.commons.org.CustomImportFormat
	(*ContactAreaCode)(nil),                   // 7: api.commons.org.ContactAreaCode
	(*ContactFieldDescription)(nil),           // 8: api.commons.org.ContactFieldDescription
	(*AuthenticationPreferences)(nil),         // 9: api.commons.org.AuthenticationPreferences
	(*WebhookPreferences)(nil),                // 10: api.commons.org.WebhookPreferences
	(*DashboardPreferences)(nil),              // 11: api.commons.org.DashboardPreferences
	(*IncludedCallTypes)(nil),                 // 12: api.commons.org.IncludedCallTypes
	(*BargeInFiltering)(nil),                  // 13: api.commons.org.BargeInFiltering
	(*DashboardQueuePreferences)(nil),         // 14: api.commons.org.DashboardQueuePreferences
	(*PhonePreferences)(nil),                  // 15: api.commons.org.PhonePreferences
	(*DialOrder)(nil),                         // 16: api.commons.org.DialOrder
	(*CustomDialOrder)(nil),                   // 17: api.commons.org.CustomDialOrder
	(*DialOrderField)(nil),                    // 18: api.commons.org.DialOrderField
	(*CompliancePreferences)(nil),             // 19: api.commons.org.CompliancePreferences
	(*ScheduleRuleField)(nil),                 // 20: api.commons.org.ScheduleRuleField
	(*ZipCodeField)(nil),                      // 21: api.commons.org.ZipCodeField
	(*BroadcastPreferences)(nil),              // 22: api.commons.org.BroadcastPreferences
	(*BroadcastTime)(nil),                     // 23: api.commons.org.BroadcastTime
	(*SchedulePreferences)(nil),               // 24: api.commons.org.SchedulePreferences
	(*EmailSmsPreferences)(nil),               // 25: api.commons.org.EmailSmsPreferences
	(*BusinessPreferences)(nil),               // 26: api.commons.org.BusinessPreferences
	(*ScorecardsPreferences)(nil),             // 27: api.commons.org.ScorecardsPreferences
	(*Scorecards)(nil),                        // 28: api.commons.org.Scorecards
	(*VoiceAnalyticsPreferences)(nil),         // 29: api.commons.org.VoiceAnalyticsPreferences
	(*VoiceAnalytics)(nil),                    // 30: api.commons.org.VoiceAnalytics
	(*EndOfDayPreferences)(nil),               // 31: api.commons.org.EndOfDayPreferences
	(*FilterPreferences)(nil),                 // 32: api.commons.org.FilterPreferences
	(*ReportFilter)(nil),                      // 33: api.commons.org.ReportFilter
	(*RecordingPreferences)(nil),              // 34: api.commons.org.RecordingPreferences
	(*RecordingsFileNamingConvention)(nil),    // 35: api.commons.org.RecordingsFileNamingConvention
	(*RecordingsZipFileNamingConvention)(nil), // 36: api.commons.org.RecordingsZipFileNamingConvention
	(*FileNamingConvention)(nil),              // 37: api.commons.org.FileNamingConvention
	(*FileNameSegment)(nil),                   // 38: api.commons.org.FileNameSegment
	(*AdminClientPreferences)(nil),            // 39: api.commons.org.AdminClientPreferences
	(*BusinessHours)(nil),                     // 40: api.commons.org.BusinessHours
	(*Range)(nil),                             // 41: api.commons.org.Range
	(*BargeInFiltering_HuntGroup)(nil),        // 42: api.commons.org.BargeInFiltering.HuntGroup
	(*BargeInFiltering_AgentStatus)(nil),      // 43: api.commons.org.BargeInFiltering.AgentStatus
	nil,                                       // 44: api.commons.org.SchedulePreferences.CampaignLinksEntry
	(*VoiceAnalytics_Redact)(nil),             // 45: api.commons.org.VoiceAnalytics.Redact
	(*VoiceAnalytics_Number)(nil),             // 46: api.commons.org.VoiceAnalytics.Number
	(*VoiceAnalytics_Notify)(nil),             // 47: api.commons.org.VoiceAnalytics.Notify
	(commons.Country)(0),                      // 48: api.commons.Country
	(commons.TimeZone)(0),                     // 49: api.commons.TimeZone
	(commons.DisplayLanguage)(0),              // 50: api.commons.DisplayLanguage
	(*commons.LocalePreferences)(nil),         // 51: api.commons.LocalePreferences
	(commons.DefaultDuplicateHandling)(0),     // 52: api.commons.DefaultDuplicateHandling
	(commons.StandardImportFormat)(0),         // 53: api.commons.StandardImportFormat
	(commons.AgentInfoSortBy)(0),              // 54: api.commons.AgentInfoSortBy
	(commons.QueueInfoSortBy)(0),              // 55: api.commons.QueueInfoSortBy
	(commons.AnsweringMachineDetection)(0),    // 56: api.commons.AnsweringMachineDetection
	(commons.DialOrderType)(0),                // 57: api.commons.DialOrderType
	(commons.BroadcastTemplateOrdering)(0),    // 58: api.commons.BroadcastTemplateOrdering
	(commons.ScheduleByTimeZoneScope)(0),      // 59: api.commons.ScheduleByTimeZoneScope
	(commons.AnaTimeZone)(0),                  // 60: api.commons.AnaTimeZone
	(commons.StandardReportFilter)(0),         // 61: api.commons.StandardReportFilter
	(commons.RecordingFileType)(0),            // 62: api.commons.RecordingFileType
}
var file_api_commons_org_preferences_proto_depIdxs = []int32{
	48, // 0: api.commons.org.OrganizationPreferences.default_country:type_name -> api.commons.Country
	49, // 1: api.commons.org.OrganizationPreferences.time_zone:type_name -> api.commons.TimeZone
	50, // 2: api.commons.org.OrganizationPreferences.display_language:type_name -> api.commons.DisplayLanguage
	51, // 3: api.commons.org.OrganizationPreferences.locale_preferences:type_name -> api.commons.LocalePreferences
	5,  // 4: api.commons.org.ContactPreferences.default_contact_import_format:type_name -> api.commons.org.ImportFormat
	7,  // 5: api.commons.org.ContactPreferences.default_contact_area_code:type_name -> api.commons.org.ContactAreaCode
	52, // 6: api.commons.org.ContactPreferences.default_duplicate_handling:type_name -> api.commons.DefaultDuplicateHandling
	53, // 7: api.commons.org.ImportFormat.standard:type_name -> api.commons.StandardImportFormat
	6,  // 8: api.commons.org.ImportFormat.custom:type_name -> api.commons.org.CustomImportFormat
	8,  // 9: api.commons.org.ContactAreaCode.cfd:type_name -> api.commons.org.ContactFieldDescription
	12, // 10: api.commons.org.DashboardPreferences.default_call_types:type_name -> api.commons.org.IncludedCallTypes
	54, // 11: api.commons.org.DashboardPreferences.default_info_sort_by_value:type_name -> api.commons.AgentInfoSortBy
	13, // 12: api.commons.org.DashboardPreferences.default_barge_in_filtering:type_name -> api.commons.org.BargeInFiltering
	42, // 13: api.commons.org.BargeInFiltering.hunt_group:type_name -> api.commons.org.BargeInFiltering.HuntGroup
	43, // 14: api.commons.org.BargeInFiltering.agent_status:type_name -> api.commons.org.BargeInFiltering.AgentStatus
	55, // 15: api.commons.org.DashboardQueuePreferences.default_info_sort_by_value:type_name -> api.commons.QueueInfoSortBy
	16, // 16: api.commons.org.PhonePreferences.default_dial_order:type_name -> api.commons.org.DialOrder
	56, // 17: api.commons.org.PhonePreferences.answering_machine_detection:type_name -> api.commons.AnsweringMachineDetection
	57, // 18: api.commons.org.DialOrder.standard:type_name -> api.commons.DialOrderType
	17, // 19: api.commons.org.DialOrder.custom:type_name -> api.commons.org.CustomDialOrder
	18, // 20: api.commons.org.CustomDialOrder.dial_order_fields:type_name -> api.commons.org.DialOrderField
	20, // 21: api.commons.org.CompliancePreferences.default_schedule_rule:type_name -> api.commons.org.ScheduleRuleField
	21, // 22: api.commons.org.CompliancePreferences.zip_code_scrub:type_name -> api.commons.org.ZipCodeField
	58, // 23: api.commons.org.BroadcastPreferences.broadcast_template_ordering:type_name -> api.commons.BroadcastTemplateOrdering
	23, // 24: api.commons.org.BroadcastPreferences.default_start_time:type_name -> api.commons.org.BroadcastTime
	23, // 25: api.commons.org.BroadcastPreferences.default_stop_time:type_name -> api.commons.org.BroadcastTime
	49, // 26: api.commons.org.BroadcastTime.timezone:type_name -> api.commons.TimeZone
	59, // 27: api.commons.org.SchedulePreferences.schedule_by_time_zone_scope:type_name -> api.commons.ScheduleByTimeZoneScope
	44, // 28: api.commons.org.SchedulePreferences.campaign_links:type_name -> api.commons.org.SchedulePreferences.CampaignLinksEntry
	60, // 29: api.commons.org.BusinessPreferences.time_zone:type_name -> api.commons.AnaTimeZone
	0,  // 30: api.commons.org.ScorecardsPreferences.evaluation_interval:type_name -> api.commons.org.Scorecards.EvaluationInterval
	45, // 31: api.commons.org.VoiceAnalyticsPreferences.redact:type_name -> api.commons.org.VoiceAnalytics.Redact
	47, // 32: api.commons.org.VoiceAnalyticsPreferences.notify:type_name -> api.commons.org.VoiceAnalytics.Notify
	47, // 33: api.commons.org.VoiceAnalyticsPreferences.billing_notify:type_name -> api.commons.org.VoiceAnalytics.Notify
	33, // 34: api.commons.org.FilterPreferences.default_auto_report_filter:type_name -> api.commons.org.ReportFilter
	33, // 35: api.commons.org.FilterPreferences.default_broadcast_resend_filter:type_name -> api.commons.org.ReportFilter
	61, // 36: api.commons.org.ReportFilter.standard:type_name -> api.commons.StandardReportFilter
	35, // 37: api.commons.org.RecordingPreferences.file_name_convention:type_name -> api.commons.org.RecordingsFileNamingConvention
	36, // 38: api.commons.org.RecordingPreferences.zip_file_name_convention:type_name -> api.commons.org.RecordingsZipFileNamingConvention
	62, // 39: api.commons.org.RecordingPreferences.export_file_type:type_name -> api.commons.RecordingFileType
	37, // 40: api.commons.org.RecordingsFileNamingConvention.inbound:type_name -> api.commons.org.FileNamingConvention
	37, // 41: api.commons.org.RecordingsFileNamingConvention.manual:type_name -> api.commons.org.FileNamingConvention
	37, // 42: api.commons.org.RecordingsFileNamingConvention.outbound:type_name -> api.commons.org.FileNamingConvention
	37, // 43: api.commons.org.RecordingsFileNamingConvention.preview:type_name -> api.commons.org.FileNamingConvention
	37, // 44: api.commons.org.RecordingsZipFileNamingConvention.inbound:type_name -> api.commons.org.FileNamingConvention
	37, // 45: api.commons.org.RecordingsZipFileNamingConvention.manual:type_name -> api.commons.org.FileNamingConvention
	37, // 46: api.commons.org.RecordingsZipFileNamingConvention.outbound:type_name -> api.commons.org.FileNamingConvention
	37, // 47: api.commons.org.RecordingsZipFileNamingConvention.combined:type_name -> api.commons.org.FileNamingConvention
	38, // 48: api.commons.org.FileNamingConvention.segments:type_name -> api.commons.org.FileNameSegment
	48, // 49: api.commons.org.AdminClientPreferences.allowed_countries:type_name -> api.commons.Country
	41, // 50: api.commons.org.BusinessHours.ranges:type_name -> api.commons.org.Range
	46, // 51: api.commons.org.VoiceAnalytics.Redact.number:type_name -> api.commons.org.VoiceAnalytics.Number
	1,  // 52: api.commons.org.VoiceAnalytics.Number.kind:type_name -> api.commons.org.VoiceAnalytics.Number.Kind
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_api_commons_org_preferences_proto_init() }
func file_api_commons_org_preferences_proto_init() {
	if File_api_commons_org_preferences_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_commons_org_preferences_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomImportFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactAreaCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactFieldDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncludedCallTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BargeInFiltering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardQueuePreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhonePreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDialOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompliancePreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleRuleField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZipCodeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulePreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailSmsPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScorecardsPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scorecards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceAnalyticsPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceAnalytics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndOfDayPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingsFileNamingConvention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingsZipFileNamingConvention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileNamingConvention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileNameSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminClientPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessHours); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BargeInFiltering_HuntGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BargeInFiltering_AgentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceAnalytics_Redact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceAnalytics_Number); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_preferences_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceAnalytics_Notify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_commons_org_preferences_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ImportFormat_Standard)(nil),
		(*ImportFormat_Custom)(nil),
	}
	file_api_commons_org_preferences_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ContactAreaCode_Cfd)(nil),
		(*ContactAreaCode_Custom)(nil),
	}
	file_api_commons_org_preferences_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*DialOrder_Standard)(nil),
		(*DialOrder_Custom)(nil),
	}
	file_api_commons_org_preferences_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*ReportFilter_Standard)(nil),
		(*ReportFilter_Custom)(nil),
	}
	file_api_commons_org_preferences_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*VoiceAnalytics_Redact_Number)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_org_preferences_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_org_preferences_proto_goTypes,
		DependencyIndexes: file_api_commons_org_preferences_proto_depIdxs,
		EnumInfos:         file_api_commons_org_preferences_proto_enumTypes,
		MessageInfos:      file_api_commons_org_preferences_proto_msgTypes,
	}.Build()
	File_api_commons_org_preferences_proto = out.File
	file_api_commons_org_preferences_proto_rawDesc = nil
	file_api_commons_org_preferences_proto_goTypes = nil
	file_api_commons_org_preferences_proto_depIdxs = nil
}
