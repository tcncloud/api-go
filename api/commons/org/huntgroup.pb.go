// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: api/commons/org/huntgroup.proto

package org

import (
	commons "github.com/tcncloud/api-go/api/commons"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HuntGroupSettings contains all of the hunt group settings.
type HuntGroupSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// General Hunt group settings.
	GeneralSettings *GeneralSettings `protobuf:"bytes,1,opt,name=general_settings,json=generalSettings,proto3" json:"general_settings,omitempty"`
	// Communication compliance hunt group settings.
	CommunicationSettings *CommunicationSettings `protobuf:"bytes,2,opt,name=communication_settings,json=communicationSettings,proto3" json:"communication_settings,omitempty"`
	// Schedule callback Hunt group settings.
	CallbackSettings *CallbackSettings `protobuf:"bytes,3,opt,name=callback_settings,json=callbackSettings,proto3" json:"callback_settings,omitempty"`
	// Preview dial Hunt group settings.
	PreviewDialSettings *PreviewDialSettings `protobuf:"bytes,4,opt,name=preview_dial_settings,json=previewDialSettings,proto3" json:"preview_dial_settings,omitempty"`
	// Manual Dial hunt group settings.
	ManualDialSettings *ManualDialSettings `protobuf:"bytes,5,opt,name=manual_dial_settings,json=manualDialSettings,proto3" json:"manual_dial_settings,omitempty"`
	// Transfer Call hunt group settings.
	TransferCallSettings *TransferCallSettings `protobuf:"bytes,6,opt,name=transfer_call_settings,json=transferCallSettings,proto3" json:"transfer_call_settings,omitempty"`
	// Number History hunt group settings.
	NumberHistorySettings *NumberHistorySettings `protobuf:"bytes,7,opt,name=number_history_settings,json=numberHistorySettings,proto3" json:"number_history_settings,omitempty"`
}

func (x *HuntGroupSettings) Reset() {
	*x = HuntGroupSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuntGroupSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuntGroupSettings) ProtoMessage() {}

func (x *HuntGroupSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuntGroupSettings.ProtoReflect.Descriptor instead.
func (*HuntGroupSettings) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{0}
}

func (x *HuntGroupSettings) GetGeneralSettings() *GeneralSettings {
	if x != nil {
		return x.GeneralSettings
	}
	return nil
}

func (x *HuntGroupSettings) GetCommunicationSettings() *CommunicationSettings {
	if x != nil {
		return x.CommunicationSettings
	}
	return nil
}

func (x *HuntGroupSettings) GetCallbackSettings() *CallbackSettings {
	if x != nil {
		return x.CallbackSettings
	}
	return nil
}

func (x *HuntGroupSettings) GetPreviewDialSettings() *PreviewDialSettings {
	if x != nil {
		return x.PreviewDialSettings
	}
	return nil
}

func (x *HuntGroupSettings) GetManualDialSettings() *ManualDialSettings {
	if x != nil {
		return x.ManualDialSettings
	}
	return nil
}

func (x *HuntGroupSettings) GetTransferCallSettings() *TransferCallSettings {
	if x != nil {
		return x.TransferCallSettings
	}
	return nil
}

func (x *HuntGroupSettings) GetNumberHistorySettings() *NumberHistorySettings {
	if x != nil {
		return x.NumberHistorySettings
	}
	return nil
}

// GeneralSettings is an entity containing a section of the hunt group settings
// for the hunt group manager.
type GeneralSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Displays browser window tab information. `UseAdvancedGatewayTitle`
	EnableAgentGatewayTitleBar bool `protobuf:"varint,1,opt,name=enable_agent_gateway_title_bar,json=enableAgentGatewayTitleBar,proto3" json:"enable_agent_gateway_title_bar,omitempty"`
	// Default agent phone number dialing into IVR system. `AgentDialInNumber`
	DefaultAgentDialIn string `protobuf:"bytes,2,opt,name=default_agent_dial_in,json=defaultAgentDialIn,proto3" json:"default_agent_dial_in,omitempty"`
	// Requires secondary confirmation to end call. `DisconnectConvirmation`
	RequireEndCallConfirmation bool `protobuf:"varint,3,opt,name=require_end_call_confirmation,json=requireEndCallConfirmation,proto3" json:"require_end_call_confirmation,omitempty"`
	// Enables authorization and whitelist by IP. `UseIpBasedAuth`
	EnableAuthorizationByIp bool `protobuf:"varint,4,opt,name=enable_authorization_by_ip,json=enableAuthorizationByIp,proto3" json:"enable_authorization_by_ip,omitempty"`
	// Whitelisted IPs. `AllowedIps`
	AuthorizedIpAddresses []string `protobuf:"bytes,5,rep,name=authorized_ip_addresses,json=authorizedIpAddresses,proto3" json:"authorized_ip_addresses,omitempty"`
	// Initial agent status. `Initial Agent Status`
	InitialAgentStatus commons.InitialAgentStatus `protobuf:"varint,100,opt,name=initial_agent_status,json=initialAgentStatus,proto3,enum=api.commons.InitialAgentStatus" json:"initial_agent_status,omitempty"`
	// Enable agents to pause calls. `Allow Agent Pause`
	EnableAgentPause bool `protobuf:"varint,101,opt,name=enable_agent_pause,json=enableAgentPause,proto3" json:"enable_agent_pause,omitempty"`
	// Pause option sets per hunt group. `Use Agent Pause Codes`
	AgentPauseOptionSet *GeneralSettings_PauseOptionSet `protobuf:"bytes,102,opt,name=agent_pause_option_set,json=agentPauseOptionSet,proto3" json:"agent_pause_option_set,omitempty"`
	// Default agent pause code. `Default Agent Pause Code`
	DefaultAgentPauseOption string `protobuf:"bytes,103,opt,name=default_agent_pause_option,json=defaultAgentPauseOption,proto3" json:"default_agent_pause_option,omitempty"`
	// Enable agents to switch between pause options. `Agent Pause Reset`
	EnablePauseOptionReset bool `protobuf:"varint,104,opt,name=enable_pause_option_reset,json=enablePauseOptionReset,proto3" json:"enable_pause_option_reset,omitempty"`
	// Display recording indicator. `Display Recording Indicator`
	DisplayRecordingIndicator bool `protobuf:"varint,200,opt,name=display_recording_indicator,json=displayRecordingIndicator,proto3" json:"display_recording_indicator,omitempty"`
	// Enable pausing of agent call recording. `Enable Recording Pause`
	EnableCallRecordingPause bool `protobuf:"varint,201,opt,name=enable_call_recording_pause,json=enableCallRecordingPause,proto3" json:"enable_call_recording_pause,omitempty"`
	// Require call recording pause confirmation. `Recording Pause Confirmation`
	CallRecordingPauseConfirmation bool `protobuf:"varint,202,opt,name=call_recording_pause_confirmation,json=callRecordingPauseConfirmation,proto3" json:"call_recording_pause_confirmation,omitempty"`
	// Call recording delay in seconds. `Recording Delay`
	CallRecordingDelay int64 `protobuf:"varint,203,opt,name=call_recording_delay,json=callRecordingDelay,proto3" json:"call_recording_delay,omitempty"`
	// Automatically pauses recording when starting hold.
	// `Pause Recording on Hold`
	EnablePauseRecordingOnHold bool `protobuf:"varint,204,opt,name=enable_pause_recording_on_hold,json=enablePauseRecordingOnHold,proto3" json:"enable_pause_recording_on_hold,omitempty"`
	// Enable envision agent screen recording. `Use Agent Screen Recording`
	EnableEnvisionScreenRecording bool `protobuf:"varint,300,opt,name=enable_envision_screen_recording,json=enableEnvisionScreenRecording,proto3" json:"enable_envision_screen_recording,omitempty"`
	// Enable agent simple hold. `Allow Agent Hold`
	EnableAgentSimpleHold bool `protobuf:"varint,400,opt,name=enable_agent_simple_hold,json=enableAgentSimpleHold,proto3" json:"enable_agent_simple_hold,omitempty"`
	// Enable agent multi-accept hold. `Allow Agent Hold`
	EnableAgentMultiAccept bool `protobuf:"varint,401,opt,name=enable_agent_multi_accept,json=enableAgentMultiAccept,proto3" json:"enable_agent_multi_accept,omitempty"`
	// Automatically pause agent after multi-accept hold. `AutoPauseOnMultiHold`
	PauseAgentAfterMultiAccept bool `protobuf:"varint,402,opt,name=pause_agent_after_multi_accept,json=pauseAgentAfterMultiAccept,proto3" json:"pause_agent_after_multi_accept,omitempty"`
	// Agent hold queue monitoring.
	HoldQueueMonitoring *GeneralSettings_HoldQueueMonitoring `protobuf:"bytes,403,opt,name=hold_queue_monitoring,json=holdQueueMonitoring,proto3" json:"hold_queue_monitoring,omitempty"`
	// Whether to display the machine-deliver button on the UI.
	DisplayMachineDeliver bool `protobuf:"varint,500,opt,name=display_machine_deliver,json=displayMachineDeliver,proto3" json:"display_machine_deliver,omitempty"`
	// Whether to display the call's linkback Hunt Group in the data panel.
	DisplayLinkbackHuntGroup bool `protobuf:"varint,501,opt,name=display_linkback_hunt_group,json=displayLinkbackHuntGroup,proto3" json:"display_linkback_hunt_group,omitempty"`
	// Whether to display SIP header data in the data panel.
	DisplaySipHeaderData bool `protobuf:"varint,502,opt,name=display_sip_header_data,json=displaySipHeaderData,proto3" json:"display_sip_header_data,omitempty"`
	// Whether to display the IVR navigation (Keys Pressed) in the data panel.
	DisplayIvrNavigationKeys bool `protobuf:"varint,503,opt,name=display_ivr_navigation_keys,json=displayIvrNavigationKeys,proto3" json:"display_ivr_navigation_keys,omitempty"`
	// Whether to display Data Collect data in the data panel.
	DisplayDataCollectData bool `protobuf:"varint,504,opt,name=display_data_collect_data,json=displayDataCollectData,proto3" json:"display_data_collect_data,omitempty"`
	// Whether to display the Data Dip'ed data in the data panel.
	DisplayDataDippedData *GeneralSettings_DataDipDataDisplay `protobuf:"bytes,505,opt,name=display_data_dipped_data,json=displayDataDippedData,proto3" json:"display_data_dipped_data,omitempty"`
	// Payment Integration data display
	IntegrationDataDisplay *GeneralSettings_IntegrationDataDisplay `protobuf:"bytes,506,opt,name=integration_data_display,json=integrationDataDisplay,proto3" json:"integration_data_display,omitempty"`
	// Whether to display the Journey Integration returned data in the data panel.
	JourneyDataDisplay *GeneralSettings_JourneyDataDisplay `protobuf:"bytes,507,opt,name=journey_data_display,json=journeyDataDisplay,proto3" json:"journey_data_display,omitempty"`
	// Whether and what call history statistics to display in the UI.
	AgentCallHistoryScope commons.AgentCallHistoryScope `protobuf:"varint,508,opt,name=agent_call_history_scope,json=agentCallHistoryScope,proto3,enum=api.commons.AgentCallHistoryScope" json:"agent_call_history_scope,omitempty"`
	// Agent Login Gui Statistics display and template
	AgentLoginGuiStatisticsDisplay *GeneralSettings_AgentLoginGuiStatisticsDisplay `protobuf:"bytes,509,opt,name=agent_login_gui_statistics_display,json=agentLoginGuiStatisticsDisplay,proto3" json:"agent_login_gui_statistics_display,omitempty"`
	// Phone / Postal Metadata display
	PhoneZipMetadataDisplay *GeneralSettings_PhoneZipMetadataDisplay `protobuf:"bytes,510,opt,name=phone_zip_metadata_display,json=phoneZipMetadataDisplay,proto3" json:"phone_zip_metadata_display,omitempty"`
	// Whether to display the call and agent skills to the agent ` Display Skills`
	DisplaySkills bool `protobuf:"varint,511,opt,name=display_skills,json=displaySkills,proto3" json:"display_skills,omitempty"`
	// Whether to display Web Links to the agent ` Display Web Links`
	DisplayWebLinks bool `protobuf:"varint,512,opt,name=display_web_links,json=displayWebLinks,proto3" json:"display_web_links,omitempty"`
	// Enable agent to reassign hunt groups. `Agent Skills Reassignment`
	EnableAgentHuntGroupReassignment bool `protobuf:"varint,600,opt,name=enable_agent_hunt_group_reassignment,json=enableAgentHuntGroupReassignment,proto3" json:"enable_agent_hunt_group_reassignment,omitempty"`
	// Limited available hunt groups. `Hunt Group Reassignment Disallowed`
	DisallowedHuntGroups *GeneralSettings_DisallowedHuntGroups `protobuf:"bytes,601,opt,name=disallowed_hunt_groups,json=disallowedHuntGroups,proto3" json:"disallowed_hunt_groups,omitempty"`
	// Enable manual approval of calls. `Allow Manual Approval`
	EnableManualApprovalOfCalls bool `protobuf:"varint,700,opt,name=enable_manual_approval_of_calls,json=enableManualApprovalOfCalls,proto3" json:"enable_manual_approval_of_calls,omitempty"`
	// Require manual approval number confirmation. `MAC Number Confirmation`
	RequireManualApprovalNumber bool `protobuf:"varint,701,opt,name=require_manual_approval_number,json=requireManualApprovalNumber,proto3" json:"require_manual_approval_number,omitempty"`
	// Enable manual approval of SMS. `Allow Manual Approval For Messaging`
	EnableManualApprovalOfSms bool `protobuf:"varint,702,opt,name=enable_manual_approval_of_sms,json=enableManualApprovalOfSms,proto3" json:"enable_manual_approval_of_sms,omitempty"`
	// Require manual approval number confirmation for SMS.
	// `MAM Number Confirmation`
	RequireManualApprovalNumberSms bool `protobuf:"varint,703,opt,name=require_manual_approval_number_sms,json=requireManualApprovalNumberSms,proto3" json:"require_manual_approval_number_sms,omitempty"`
	// Alphanumeric keypad properties. `Alphanumeric Keypad`
	AlphanumericKeypad *GeneralSettings_AlphanumericKeypad `protobuf:"bytes,800,opt,name=alphanumeric_keypad,json=alphanumericKeypad,proto3" json:"alphanumeric_keypad,omitempty"`
	// Enable queued call desktop notifications. `Allow Queued Call Notifications`
	EnableCallDesktopNotifications bool `protobuf:"varint,801,opt,name=enable_call_desktop_notifications,json=enableCallDesktopNotifications,proto3" json:"enable_call_desktop_notifications,omitempty"`
	// Inbound natural language compliance metadata.
	// `Optional Inbound Compliance Metadata`
	// `Required Inbound Compliance Metadata`
	InboundComplianceMetadata *GeneralSettings_InboundComplianceMetadata `protobuf:"bytes,802,opt,name=inbound_compliance_metadata,json=inboundComplianceMetadata,proto3" json:"inbound_compliance_metadata,omitempty"`
	// Whether to allow the agent to intercom with other agents.
	// `AllowAgentIntercom`
	EnableAgentIntercom bool `protobuf:"varint,803,opt,name=enable_agent_intercom,json=enableAgentIntercom,proto3" json:"enable_agent_intercom,omitempty"`
}

func (x *GeneralSettings) Reset() {
	*x = GeneralSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSettings) ProtoMessage() {}

func (x *GeneralSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSettings.ProtoReflect.Descriptor instead.
func (*GeneralSettings) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{1}
}

func (x *GeneralSettings) GetEnableAgentGatewayTitleBar() bool {
	if x != nil {
		return x.EnableAgentGatewayTitleBar
	}
	return false
}

func (x *GeneralSettings) GetDefaultAgentDialIn() string {
	if x != nil {
		return x.DefaultAgentDialIn
	}
	return ""
}

func (x *GeneralSettings) GetRequireEndCallConfirmation() bool {
	if x != nil {
		return x.RequireEndCallConfirmation
	}
	return false
}

func (x *GeneralSettings) GetEnableAuthorizationByIp() bool {
	if x != nil {
		return x.EnableAuthorizationByIp
	}
	return false
}

func (x *GeneralSettings) GetAuthorizedIpAddresses() []string {
	if x != nil {
		return x.AuthorizedIpAddresses
	}
	return nil
}

func (x *GeneralSettings) GetInitialAgentStatus() commons.InitialAgentStatus {
	if x != nil {
		return x.InitialAgentStatus
	}
	return commons.InitialAgentStatus(0)
}

func (x *GeneralSettings) GetEnableAgentPause() bool {
	if x != nil {
		return x.EnableAgentPause
	}
	return false
}

func (x *GeneralSettings) GetAgentPauseOptionSet() *GeneralSettings_PauseOptionSet {
	if x != nil {
		return x.AgentPauseOptionSet
	}
	return nil
}

func (x *GeneralSettings) GetDefaultAgentPauseOption() string {
	if x != nil {
		return x.DefaultAgentPauseOption
	}
	return ""
}

func (x *GeneralSettings) GetEnablePauseOptionReset() bool {
	if x != nil {
		return x.EnablePauseOptionReset
	}
	return false
}

func (x *GeneralSettings) GetDisplayRecordingIndicator() bool {
	if x != nil {
		return x.DisplayRecordingIndicator
	}
	return false
}

func (x *GeneralSettings) GetEnableCallRecordingPause() bool {
	if x != nil {
		return x.EnableCallRecordingPause
	}
	return false
}

func (x *GeneralSettings) GetCallRecordingPauseConfirmation() bool {
	if x != nil {
		return x.CallRecordingPauseConfirmation
	}
	return false
}

func (x *GeneralSettings) GetCallRecordingDelay() int64 {
	if x != nil {
		return x.CallRecordingDelay
	}
	return 0
}

func (x *GeneralSettings) GetEnablePauseRecordingOnHold() bool {
	if x != nil {
		return x.EnablePauseRecordingOnHold
	}
	return false
}

func (x *GeneralSettings) GetEnableEnvisionScreenRecording() bool {
	if x != nil {
		return x.EnableEnvisionScreenRecording
	}
	return false
}

func (x *GeneralSettings) GetEnableAgentSimpleHold() bool {
	if x != nil {
		return x.EnableAgentSimpleHold
	}
	return false
}

func (x *GeneralSettings) GetEnableAgentMultiAccept() bool {
	if x != nil {
		return x.EnableAgentMultiAccept
	}
	return false
}

func (x *GeneralSettings) GetPauseAgentAfterMultiAccept() bool {
	if x != nil {
		return x.PauseAgentAfterMultiAccept
	}
	return false
}

func (x *GeneralSettings) GetHoldQueueMonitoring() *GeneralSettings_HoldQueueMonitoring {
	if x != nil {
		return x.HoldQueueMonitoring
	}
	return nil
}

func (x *GeneralSettings) GetDisplayMachineDeliver() bool {
	if x != nil {
		return x.DisplayMachineDeliver
	}
	return false
}

func (x *GeneralSettings) GetDisplayLinkbackHuntGroup() bool {
	if x != nil {
		return x.DisplayLinkbackHuntGroup
	}
	return false
}

func (x *GeneralSettings) GetDisplaySipHeaderData() bool {
	if x != nil {
		return x.DisplaySipHeaderData
	}
	return false
}

func (x *GeneralSettings) GetDisplayIvrNavigationKeys() bool {
	if x != nil {
		return x.DisplayIvrNavigationKeys
	}
	return false
}

func (x *GeneralSettings) GetDisplayDataCollectData() bool {
	if x != nil {
		return x.DisplayDataCollectData
	}
	return false
}

func (x *GeneralSettings) GetDisplayDataDippedData() *GeneralSettings_DataDipDataDisplay {
	if x != nil {
		return x.DisplayDataDippedData
	}
	return nil
}

func (x *GeneralSettings) GetIntegrationDataDisplay() *GeneralSettings_IntegrationDataDisplay {
	if x != nil {
		return x.IntegrationDataDisplay
	}
	return nil
}

func (x *GeneralSettings) GetJourneyDataDisplay() *GeneralSettings_JourneyDataDisplay {
	if x != nil {
		return x.JourneyDataDisplay
	}
	return nil
}

func (x *GeneralSettings) GetAgentCallHistoryScope() commons.AgentCallHistoryScope {
	if x != nil {
		return x.AgentCallHistoryScope
	}
	return commons.AgentCallHistoryScope(0)
}

func (x *GeneralSettings) GetAgentLoginGuiStatisticsDisplay() *GeneralSettings_AgentLoginGuiStatisticsDisplay {
	if x != nil {
		return x.AgentLoginGuiStatisticsDisplay
	}
	return nil
}

func (x *GeneralSettings) GetPhoneZipMetadataDisplay() *GeneralSettings_PhoneZipMetadataDisplay {
	if x != nil {
		return x.PhoneZipMetadataDisplay
	}
	return nil
}

func (x *GeneralSettings) GetDisplaySkills() bool {
	if x != nil {
		return x.DisplaySkills
	}
	return false
}

func (x *GeneralSettings) GetDisplayWebLinks() bool {
	if x != nil {
		return x.DisplayWebLinks
	}
	return false
}

func (x *GeneralSettings) GetEnableAgentHuntGroupReassignment() bool {
	if x != nil {
		return x.EnableAgentHuntGroupReassignment
	}
	return false
}

func (x *GeneralSettings) GetDisallowedHuntGroups() *GeneralSettings_DisallowedHuntGroups {
	if x != nil {
		return x.DisallowedHuntGroups
	}
	return nil
}

func (x *GeneralSettings) GetEnableManualApprovalOfCalls() bool {
	if x != nil {
		return x.EnableManualApprovalOfCalls
	}
	return false
}

func (x *GeneralSettings) GetRequireManualApprovalNumber() bool {
	if x != nil {
		return x.RequireManualApprovalNumber
	}
	return false
}

func (x *GeneralSettings) GetEnableManualApprovalOfSms() bool {
	if x != nil {
		return x.EnableManualApprovalOfSms
	}
	return false
}

func (x *GeneralSettings) GetRequireManualApprovalNumberSms() bool {
	if x != nil {
		return x.RequireManualApprovalNumberSms
	}
	return false
}

func (x *GeneralSettings) GetAlphanumericKeypad() *GeneralSettings_AlphanumericKeypad {
	if x != nil {
		return x.AlphanumericKeypad
	}
	return nil
}

func (x *GeneralSettings) GetEnableCallDesktopNotifications() bool {
	if x != nil {
		return x.EnableCallDesktopNotifications
	}
	return false
}

func (x *GeneralSettings) GetInboundComplianceMetadata() *GeneralSettings_InboundComplianceMetadata {
	if x != nil {
		return x.InboundComplianceMetadata
	}
	return nil
}

func (x *GeneralSettings) GetEnableAgentIntercom() bool {
	if x != nil {
		return x.EnableAgentIntercom
	}
	return false
}

// CommunicationSettings is an entity containing the hunt group settings for the
// communication compliance section of the hunt group manager.
type CommunicationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable the ability to add valuess from the compliance scrub list.
	// `doAllowAddDncl`
	EnableScrubListAdding bool `protobuf:"varint,1,opt,name=enable_scrub_list_adding,json=enableScrubListAdding,proto3" json:"enable_scrub_list_adding,omitempty"`
	// Hunt group compliance scrub lists. `Hunt Group Compliance Scrub Lists`
	ScrubLists []string `protobuf:"bytes,2,rep,name=scrub_lists,json=scrubLists,proto3" json:"scrub_lists,omitempty"`
	// Enable the ability to remove values from the compliance scrub lists.
	// `doAllowRemoveDncl`
	EnableScrubListRemoval bool `protobuf:"varint,3,opt,name=enable_scrub_list_removal,json=enableScrubListRemoval,proto3" json:"enable_scrub_list_removal,omitempty"`
	// List of compliance scrub lists which can be removed.
	// `Hunt Group Compliance Scrub Lists Removal Allowed`
	ScrubListsRemovalAllowed []string `protobuf:"bytes,4,rep,name=scrub_lists_removal_allowed,json=scrubListsRemovalAllowed,proto3" json:"scrub_lists_removal_allowed,omitempty"`
	// Select compliance default country. `Default DNCL Country`
	ComplianceDefaultCountry commons.Country `protobuf:"varint,5,opt,name=compliance_default_country,json=complianceDefaultCountry,proto3,enum=api.commons.Country" json:"compliance_default_country,omitempty"`
	// Display DNCL options in wrap up. `Display DNCL Options In Wrapup`
	DisplayOptionsInWrapup bool `protobuf:"varint,6,opt,name=display_options_in_wrapup,json=displayOptionsInWrapup,proto3" json:"display_options_in_wrapup,omitempty"`
	// Default inbound scrub list expiration. `defaultIBCallDnclExpiration`
	InboundScrubListExpiration *CommunicationSettings_ScrubListExpiration `protobuf:"bytes,100,opt,name=inbound_scrub_list_expiration,json=inboundScrubListExpiration,proto3" json:"inbound_scrub_list_expiration,omitempty"`
	// Default manual scrub list expiration. `defaultMDCallDnclExpiration`
	ManualScrubListExpiration *CommunicationSettings_ScrubListExpiration `protobuf:"bytes,101,opt,name=manual_scrub_list_expiration,json=manualScrubListExpiration,proto3" json:"manual_scrub_list_expiration,omitempty"`
	// Default outbound scrub list expiration. `defaultOBCallExpiration`
	OutboundScrubListExpiration *CommunicationSettings_ScrubListExpiration `protobuf:"bytes,102,opt,name=outbound_scrub_list_expiration,json=outboundScrubListExpiration,proto3" json:"outbound_scrub_list_expiration,omitempty"`
	// Default preview scrub list expiration. `defaultPRCallDnclExpiration`
	PreviewScrubListExpiration *CommunicationSettings_ScrubListExpiration `protobuf:"bytes,103,opt,name=preview_scrub_list_expiration,json=previewScrubListExpiration,proto3" json:"preview_scrub_list_expiration,omitempty"`
	// Automate manually dialed number scrub list. `Manual Dial Auto Dncl Add`
	AutomateManuallyDialedScrubList bool `protobuf:"varint,200,opt,name=automate_manually_dialed_scrub_list,json=automateManuallyDialedScrubList,proto3" json:"automate_manually_dialed_scrub_list,omitempty"`
	// Automate preview dialed number scrub list. `Preview Dial Auto Dncl Add`
	AutomatePreviewDialedScrubList bool `protobuf:"varint,201,opt,name=automate_preview_dialed_scrub_list,json=automatePreviewDialedScrubList,proto3" json:"automate_preview_dialed_scrub_list,omitempty"`
	// Automate response rules. `AgentDispositionConditionalDncl`
	AutomateResponseRules *CommunicationSettings_AutomateResponseRules `protobuf:"bytes,202,opt,name=automate_response_rules,json=automateResponseRules,proto3" json:"automate_response_rules,omitempty"`
	// Enable automatic addition of call data to scrub lists.
	// `Call Data Scrub Lists Info`
	AutomateScrubListCallData *CommunicationSettings_AutomateScrubListCallData `protobuf:"bytes,203,opt,name=automate_scrub_list_call_data,json=automateScrubListCallData,proto3" json:"automate_scrub_list_call_data,omitempty"`
}

func (x *CommunicationSettings) Reset() {
	*x = CommunicationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationSettings) ProtoMessage() {}

func (x *CommunicationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationSettings.ProtoReflect.Descriptor instead.
func (*CommunicationSettings) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{2}
}

func (x *CommunicationSettings) GetEnableScrubListAdding() bool {
	if x != nil {
		return x.EnableScrubListAdding
	}
	return false
}

func (x *CommunicationSettings) GetScrubLists() []string {
	if x != nil {
		return x.ScrubLists
	}
	return nil
}

func (x *CommunicationSettings) GetEnableScrubListRemoval() bool {
	if x != nil {
		return x.EnableScrubListRemoval
	}
	return false
}

func (x *CommunicationSettings) GetScrubListsRemovalAllowed() []string {
	if x != nil {
		return x.ScrubListsRemovalAllowed
	}
	return nil
}

func (x *CommunicationSettings) GetComplianceDefaultCountry() commons.Country {
	if x != nil {
		return x.ComplianceDefaultCountry
	}
	return commons.Country(0)
}

func (x *CommunicationSettings) GetDisplayOptionsInWrapup() bool {
	if x != nil {
		return x.DisplayOptionsInWrapup
	}
	return false
}

func (x *CommunicationSettings) GetInboundScrubListExpiration() *CommunicationSettings_ScrubListExpiration {
	if x != nil {
		return x.InboundScrubListExpiration
	}
	return nil
}

func (x *CommunicationSettings) GetManualScrubListExpiration() *CommunicationSettings_ScrubListExpiration {
	if x != nil {
		return x.ManualScrubListExpiration
	}
	return nil
}

func (x *CommunicationSettings) GetOutboundScrubListExpiration() *CommunicationSettings_ScrubListExpiration {
	if x != nil {
		return x.OutboundScrubListExpiration
	}
	return nil
}

func (x *CommunicationSettings) GetPreviewScrubListExpiration() *CommunicationSettings_ScrubListExpiration {
	if x != nil {
		return x.PreviewScrubListExpiration
	}
	return nil
}

func (x *CommunicationSettings) GetAutomateManuallyDialedScrubList() bool {
	if x != nil {
		return x.AutomateManuallyDialedScrubList
	}
	return false
}

func (x *CommunicationSettings) GetAutomatePreviewDialedScrubList() bool {
	if x != nil {
		return x.AutomatePreviewDialedScrubList
	}
	return false
}

func (x *CommunicationSettings) GetAutomateResponseRules() *CommunicationSettings_AutomateResponseRules {
	if x != nil {
		return x.AutomateResponseRules
	}
	return nil
}

func (x *CommunicationSettings) GetAutomateScrubListCallData() *CommunicationSettings_AutomateScrubListCallData {
	if x != nil {
		return x.AutomateScrubListCallData
	}
	return nil
}

// CallbackSettings is an entity containing the hunt group settings for the
// scheduled callbacks section of the hunt group manager.
type CallbackSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable callback scheduling. `Allow Callback Scheduling`
	EnableCallbackScheduling bool `protobuf:"varint,1,opt,name=enable_callback_scheduling,json=enableCallbackScheduling,proto3" json:"enable_callback_scheduling,omitempty"`
	// Default callback routing. `Default Callback Routing`
	DefaultCallbackRouting *CallbackSettings_DefaultRouting `protobuf:"bytes,2,opt,name=default_callback_routing,json=defaultCallbackRouting,proto3" json:"default_callback_routing,omitempty"`
	// Enable callback calling ` Allow Scheduled Callback Calling`
	EnableCallbackCalling bool `protobuf:"varint,3,opt,name=enable_callback_calling,json=enableCallbackCalling,proto3" json:"enable_callback_calling,omitempty"`
	// Enable automatic callback retrieval `Callbacks Retrieval Mode`
	EnableAutomaticRetrieval bool `protobuf:"varint,4,opt,name=enable_automatic_retrieval,json=enableAutomaticRetrieval,proto3" json:"enable_automatic_retrieval,omitempty"`
	// Indicates whether and how to limit callback routing.
	// `Callback Routing Disallowed`
	CallbackRoutingDisallowed *CallbackSettings_CallbackRoutingDisallowed `protobuf:"bytes,5,opt,name=callback_routing_disallowed,json=callbackRoutingDisallowed,proto3" json:"callback_routing_disallowed,omitempty"`
	// Enable caller ID customization. 'Scheduled Callback Editable Caller ID'
	EnableCustomizableCallerId bool `protobuf:"varint,6,opt,name=enable_customizable_caller_id,json=enableCustomizableCallerId,proto3" json:"enable_customizable_caller_id,omitempty"`
	// Default scheduled callback caller ID.
	// `Scheduled Callback Default Caller ID`
	DefaultCallerId string `protobuf:"bytes,7,opt,name=default_caller_id,json=defaultCallerId,proto3" json:"default_caller_id,omitempty"`
	// Enable viewing the Scheduled Callback calendar.
	// `Allow Scheduled Callback Calendar`
	EnableCallbackCalendar bool `protobuf:"varint,8,opt,name=enable_callback_calendar,json=enableCallbackCalendar,proto3" json:"enable_callback_calendar,omitempty"`
}

func (x *CallbackSettings) Reset() {
	*x = CallbackSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackSettings) ProtoMessage() {}

func (x *CallbackSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackSettings.ProtoReflect.Descriptor instead.
func (*CallbackSettings) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{3}
}

func (x *CallbackSettings) GetEnableCallbackScheduling() bool {
	if x != nil {
		return x.EnableCallbackScheduling
	}
	return false
}

func (x *CallbackSettings) GetDefaultCallbackRouting() *CallbackSettings_DefaultRouting {
	if x != nil {
		return x.DefaultCallbackRouting
	}
	return nil
}

func (x *CallbackSettings) GetEnableCallbackCalling() bool {
	if x != nil {
		return x.EnableCallbackCalling
	}
	return false
}

func (x *CallbackSettings) GetEnableAutomaticRetrieval() bool {
	if x != nil {
		return x.EnableAutomaticRetrieval
	}
	return false
}

func (x *CallbackSettings) GetCallbackRoutingDisallowed() *CallbackSettings_CallbackRoutingDisallowed {
	if x != nil {
		return x.CallbackRoutingDisallowed
	}
	return nil
}

func (x *CallbackSettings) GetEnableCustomizableCallerId() bool {
	if x != nil {
		return x.EnableCustomizableCallerId
	}
	return false
}

func (x *CallbackSettings) GetDefaultCallerId() string {
	if x != nil {
		return x.DefaultCallerId
	}
	return ""
}

func (x *CallbackSettings) GetEnableCallbackCalendar() bool {
	if x != nil {
		return x.EnableCallbackCalendar
	}
	return false
}

// PreviewDialSettings is an entity containing the hunt group settings for the
// Preview Dial section of the hunt group manager.
type PreviewDialSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable cancelling of Preview Dialing.  `AllowPreviewDialCancel`
	EnablePreviewDialCancel bool `protobuf:"varint,1,opt,name=enable_preview_dial_cancel,json=enablePreviewDialCancel,proto3" json:"enable_preview_dial_cancel,omitempty"`
	// Enable automatic pausing when cancelling a Preview Dial call.
	// `AutoPauseOnPreviewDial`
	EnableAutoPauseOnCancel bool `protobuf:"varint,2,opt,name=enable_auto_pause_on_cancel,json=enableAutoPauseOnCancel,proto3" json:"enable_auto_pause_on_cancel,omitempty"`
	// Indicates when queued preview dial calls should no longer be presented
	// to agents.
	// `Preview Dial Call Time-out`
	TimeoutMinutes int64 `protobuf:"varint,3,opt,name=timeout_minutes,json=timeoutMinutes,proto3" json:"timeout_minutes,omitempty"`
	// Indicates if agents must confirm numbers before calling.
	// `Preview Dial Confirmation`
	RequireNumberConfirmation bool `protobuf:"varint,4,opt,name=require_number_confirmation,json=requireNumberConfirmation,proto3" json:"require_number_confirmation,omitempty"`
	// The name of the Call Queue Configuration (folder name).
	// `PreviewQueueConfig`
	PreviewQueueConfig string `protobuf:"bytes,5,opt,name=preview_queue_config,json=previewQueueConfig,proto3" json:"preview_queue_config,omitempty"`
}

func (x *PreviewDialSettings) Reset() {
	*x = PreviewDialSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewDialSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewDialSettings) ProtoMessage() {}

func (x *PreviewDialSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewDialSettings.ProtoReflect.Descriptor instead.
func (*PreviewDialSettings) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{4}
}

func (x *PreviewDialSettings) GetEnablePreviewDialCancel() bool {
	if x != nil {
		return x.EnablePreviewDialCancel
	}
	return false
}

func (x *PreviewDialSettings) GetEnableAutoPauseOnCancel() bool {
	if x != nil {
		return x.EnableAutoPauseOnCancel
	}
	return false
}

func (x *PreviewDialSettings) GetTimeoutMinutes() int64 {
	if x != nil {
		return x.TimeoutMinutes
	}
	return 0
}

func (x *PreviewDialSettings) GetRequireNumberConfirmation() bool {
	if x != nil {
		return x.RequireNumberConfirmation
	}
	return false
}

func (x *PreviewDialSettings) GetPreviewQueueConfig() string {
	if x != nil {
		return x.PreviewQueueConfig
	}
	return ""
}

// ManualDialSettings is an entity containing the hunt group settings for the
// Manual Dial section of the hunt group settings manager.
type ManualDialSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allow the agent to make manual dial calls.
	EnableManualDial bool `protobuf:"varint,1,opt,name=enable_manual_dial,json=enableManualDial,proto3" json:"enable_manual_dial,omitempty"`
	// ACD queue configuration folder name.
	QueueConfigurationName string `protobuf:"bytes,2,opt,name=queue_configuration_name,json=queueConfigurationName,proto3" json:"queue_configuration_name,omitempty"`
	// The default setting for recording manual dial calls.
	DefaultCallRecording commons.HuntGroupOrgDefaultCustom `protobuf:"varint,3,opt,name=default_call_recording,json=defaultCallRecording,proto3,enum=api.commons.HuntGroupOrgDefaultCustom" json:"default_call_recording,omitempty"`
	// Determines whether to scrub cell phone calls.
	CellPhoneScrub commons.HuntGroupOrgDefaultCustom `protobuf:"varint,4,opt,name=cell_phone_scrub,json=cellPhoneScrub,proto3,enum=api.commons.HuntGroupOrgDefaultCustom" json:"cell_phone_scrub,omitempty"`
	// Determines whether to scrub calls by time zone.
	TimeZoneRestriction commons.HuntGroupOrgDefaultCustom `protobuf:"varint,5,opt,name=time_zone_restriction,json=timeZoneRestriction,proto3,enum=api.commons.HuntGroupOrgDefaultCustom" json:"time_zone_restriction,omitempty"`
	// Determines whether to allow or require collection of ZIP/postal
	// for compliance.
	TimeZoneValidationPostalCode commons.ManualDialTimeZoneValidation `protobuf:"varint,6,opt,name=time_zone_validation_postal_code,json=timeZoneValidationPostalCode,proto3,enum=api.commons.ManualDialTimeZoneValidation" json:"time_zone_validation_postal_code,omitempty"`
	// Use Natural Language Compliance and rule set.
	NaturalComplianceScrub *NaturalLanguageComplianceScrub `protobuf:"bytes,7,opt,name=natural_compliance_scrub,json=naturalComplianceScrub,proto3" json:"natural_compliance_scrub,omitempty"`
	// Allow agent to override scrub options
	ScrubOverride *ManualDialSettings_ScrubOverride `protobuf:"bytes,8,opt,name=scrub_override,json=scrubOverride,proto3" json:"scrub_override,omitempty"`
	// Allow toll-free white list for manual dial calls.
	EnableWhitelist bool `protobuf:"varint,9,opt,name=enable_whitelist,json=enableWhitelist,proto3" json:"enable_whitelist,omitempty"`
	// The default selected country for outbound number.
	DefaultOutboundCountry commons.Country `protobuf:"varint,10,opt,name=default_outbound_country,json=defaultOutboundCountry,proto3,enum=api.commons.Country" json:"default_outbound_country,omitempty"`
	// Determines whether to display the country select menu to the agent.
	DisplayOutboundCountrySelection bool `protobuf:"varint,11,opt,name=display_outbound_country_selection,json=displayOutboundCountrySelection,proto3" json:"display_outbound_country_selection,omitempty"`
	// Determines whether to display the outbound number phone book to the agent.
	DisplayOutboundNumberPhoneBook bool `protobuf:"varint,12,opt,name=display_outbound_number_phone_book,json=displayOutboundNumberPhoneBook,proto3" json:"display_outbound_number_phone_book,omitempty"`
	// Indicates the default Country to use with the caller ID number.
	// `Manual Dial Default Caller ID Country`
	DefaultCallerIdCountry commons.Country `protobuf:"varint,13,opt,name=default_caller_id_country,json=defaultCallerIdCountry,proto3,enum=api.commons.Country" json:"default_caller_id_country,omitempty"`
	// Determines whether to display the caller ID country select menu to
	// the agent.
	// `Manual Dial Display Caller ID Country Select`
	DisplayCallerIdCountrySelection bool `protobuf:"varint,14,opt,name=display_caller_id_country_selection,json=displayCallerIdCountrySelection,proto3" json:"display_caller_id_country_selection,omitempty"`
	// Determines whether to display the caller ID phone book to the agent.
	// `Manual Dial Display Phone Book`
	DisplayCallerIdPhoneBook bool `protobuf:"varint,15,opt,name=display_caller_id_phone_book,json=displayCallerIdPhoneBook,proto3" json:"display_caller_id_phone_book,omitempty"`
	// Determines whether the agent may customize/edit the caller ID.
	// `Manual Dial Editable Caller ID`
	EnableCustomizableCallerId bool `protobuf:"varint,16,opt,name=enable_customizable_caller_id,json=enableCustomizableCallerId,proto3" json:"enable_customizable_caller_id,omitempty"`
	// Indicates the default number to use as the caller ID.
	// `Manual Dial Default Caller ID`
	DefaultCallerId *ManualDialSettings_DefaultCallerId `protobuf:"bytes,17,opt,name=default_caller_id,json=defaultCallerId,proto3" json:"default_caller_id,omitempty"`
	// Determines whether to allow the use of caller ID buckets in the agent app.
	// `Manual Dial Caller Id Bucket Enabled`
	EnableCallerIdBucket bool `protobuf:"varint,18,opt,name=enable_caller_id_bucket,json=enableCallerIdBucket,proto3" json:"enable_caller_id_bucket,omitempty"`
	// Indicates which caller ID bucket to use.
	// `Manual Dial Random Caller Id Bucket`
	RandomCallerIdBucket int64 `protobuf:"varint,19,opt,name=random_caller_id_bucket,json=randomCallerIdBucket,proto3" json:"random_caller_id_bucket,omitempty"`
	// Determines whether to automatically select a random caller ID.
	// `Manual Dial Random Caller Id Enabled`
	AutomateRandomCallerId bool `protobuf:"varint,20,opt,name=automate_random_caller_id,json=automateRandomCallerId,proto3" json:"automate_random_caller_id,omitempty"`
	// Determines whether to mask the caller ID from the agent.
	// `Mask Manual Dial Caller ID`
	EnableMaskCallerId bool `protobuf:"varint,21,opt,name=enable_mask_caller_id,json=enableMaskCallerId,proto3" json:"enable_mask_caller_id,omitempty"`
	// Determines whether to enable SIP addresses as an optional outbound
	// number and/or caller ID format.
	// `Enable SIP Address`
	EnableSipAddress bool `protobuf:"varint,22,opt,name=enable_sip_address,json=enableSipAddress,proto3" json:"enable_sip_address,omitempty"`
	// Manual Dial natural language compliance metadata.
	// `Optional Inbound Compliance Metadata`
	// `Required Inbound Compliance Metadata`
	NaturalLanguageComplianceMetadata *NaturalLanguageComplianceMetadata `protobuf:"bytes,23,opt,name=natural_language_compliance_metadata,json=naturalLanguageComplianceMetadata,proto3" json:"natural_language_compliance_metadata,omitempty"`
	// Application scope; disabled, standard calls, scheduled callbacks or all.
	DataDipScope commons.ManualDialDataDipScope `protobuf:"varint,24,opt,name=data_dip_scope,json=dataDipScope,proto3,enum=api.commons.ManualDialDataDipScope" json:"data_dip_scope,omitempty"`
	// The ID of the data dip config to execute.
	DataDipConfigSid int64 `protobuf:"varint,25,opt,name=data_dip_config_sid,json=dataDipConfigSid,proto3" json:"data_dip_config_sid,omitempty"`
	// The action to take if data dip execution fails.
	DataDipResultHandling commons.ManualDialDataDipHandling `protobuf:"varint,26,opt,name=data_dip_result_handling,json=dataDipResultHandling,proto3,enum=api.commons.ManualDialDataDipHandling" json:"data_dip_result_handling,omitempty"`
	// Map data dip values to manual dial call values.
	DataDipIntegrationMappings []*ManualDialSettings_DataDipIntegrationMapping `protobuf:"bytes,27,rep,name=data_dip_integration_mappings,json=dataDipIntegrationMappings,proto3" json:"data_dip_integration_mappings,omitempty"`
	// The action to take if the integration mapping fails.
	DataDipIntegrationHandling commons.ManualDialDataDipHandling `protobuf:"varint,28,opt,name=data_dip_integration_handling,json=dataDipIntegrationHandling,proto3,enum=api.commons.ManualDialDataDipHandling" json:"data_dip_integration_handling,omitempty"`
}

func (x *ManualDialSettings) Reset() {
	*x = ManualDialSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualDialSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualDialSettings) ProtoMessage() {}

func (x *ManualDialSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualDialSettings.ProtoReflect.Descriptor instead.
func (*ManualDialSettings) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{5}
}

func (x *ManualDialSettings) GetEnableManualDial() bool {
	if x != nil {
		return x.EnableManualDial
	}
	return false
}

func (x *ManualDialSettings) GetQueueConfigurationName() string {
	if x != nil {
		return x.QueueConfigurationName
	}
	return ""
}

func (x *ManualDialSettings) GetDefaultCallRecording() commons.HuntGroupOrgDefaultCustom {
	if x != nil {
		return x.DefaultCallRecording
	}
	return commons.HuntGroupOrgDefaultCustom(0)
}

func (x *ManualDialSettings) GetCellPhoneScrub() commons.HuntGroupOrgDefaultCustom {
	if x != nil {
		return x.CellPhoneScrub
	}
	return commons.HuntGroupOrgDefaultCustom(0)
}

func (x *ManualDialSettings) GetTimeZoneRestriction() commons.HuntGroupOrgDefaultCustom {
	if x != nil {
		return x.TimeZoneRestriction
	}
	return commons.HuntGroupOrgDefaultCustom(0)
}

func (x *ManualDialSettings) GetTimeZoneValidationPostalCode() commons.ManualDialTimeZoneValidation {
	if x != nil {
		return x.TimeZoneValidationPostalCode
	}
	return commons.ManualDialTimeZoneValidation(0)
}

func (x *ManualDialSettings) GetNaturalComplianceScrub() *NaturalLanguageComplianceScrub {
	if x != nil {
		return x.NaturalComplianceScrub
	}
	return nil
}

func (x *ManualDialSettings) GetScrubOverride() *ManualDialSettings_ScrubOverride {
	if x != nil {
		return x.ScrubOverride
	}
	return nil
}

func (x *ManualDialSettings) GetEnableWhitelist() bool {
	if x != nil {
		return x.EnableWhitelist
	}
	return false
}

func (x *ManualDialSettings) GetDefaultOutboundCountry() commons.Country {
	if x != nil {
		return x.DefaultOutboundCountry
	}
	return commons.Country(0)
}

func (x *ManualDialSettings) GetDisplayOutboundCountrySelection() bool {
	if x != nil {
		return x.DisplayOutboundCountrySelection
	}
	return false
}

func (x *ManualDialSettings) GetDisplayOutboundNumberPhoneBook() bool {
	if x != nil {
		return x.DisplayOutboundNumberPhoneBook
	}
	return false
}

func (x *ManualDialSettings) GetDefaultCallerIdCountry() commons.Country {
	if x != nil {
		return x.DefaultCallerIdCountry
	}
	return commons.Country(0)
}

func (x *ManualDialSettings) GetDisplayCallerIdCountrySelection() bool {
	if x != nil {
		return x.DisplayCallerIdCountrySelection
	}
	return false
}

func (x *ManualDialSettings) GetDisplayCallerIdPhoneBook() bool {
	if x != nil {
		return x.DisplayCallerIdPhoneBook
	}
	return false
}

func (x *ManualDialSettings) GetEnableCustomizableCallerId() bool {
	if x != nil {
		return x.EnableCustomizableCallerId
	}
	return false
}

func (x *ManualDialSettings) GetDefaultCallerId() *ManualDialSettings_DefaultCallerId {
	if x != nil {
		return x.DefaultCallerId
	}
	return nil
}

func (x *ManualDialSettings) GetEnableCallerIdBucket() bool {
	if x != nil {
		return x.EnableCallerIdBucket
	}
	return false
}

func (x *ManualDialSettings) GetRandomCallerIdBucket() int64 {
	if x != nil {
		return x.RandomCallerIdBucket
	}
	return 0
}

func (x *ManualDialSettings) GetAutomateRandomCallerId() bool {
	if x != nil {
		return x.AutomateRandomCallerId
	}
	return false
}

func (x *ManualDialSettings) GetEnableMaskCallerId() bool {
	if x != nil {
		return x.EnableMaskCallerId
	}
	return false
}

func (x *ManualDialSettings) GetEnableSipAddress() bool {
	if x != nil {
		return x.EnableSipAddress
	}
	return false
}

func (x *ManualDialSettings) GetNaturalLanguageComplianceMetadata() *NaturalLanguageComplianceMetadata {
	if x != nil {
		return x.NaturalLanguageComplianceMetadata
	}
	return nil
}

func (x *ManualDialSettings) GetDataDipScope() commons.ManualDialDataDipScope {
	if x != nil {
		return x.DataDipScope
	}
	return commons.ManualDialDataDipScope(0)
}

func (x *ManualDialSettings) GetDataDipConfigSid() int64 {
	if x != nil {
		return x.DataDipConfigSid
	}
	return 0
}

func (x *ManualDialSettings) GetDataDipResultHandling() commons.ManualDialDataDipHandling {
	if x != nil {
		return x.DataDipResultHandling
	}
	return commons.ManualDialDataDipHandling(0)
}

func (x *ManualDialSettings) GetDataDipIntegrationMappings() []*ManualDialSettings_DataDipIntegrationMapping {
	if x != nil {
		return x.DataDipIntegrationMappings
	}
	return nil
}

func (x *ManualDialSettings) GetDataDipIntegrationHandling() commons.ManualDialDataDipHandling {
	if x != nil {
		return x.DataDipIntegrationHandling
	}
	return commons.ManualDialDataDipHandling(0)
}

// Use Natural Language Compliance and rule set ID.
type NaturalLanguageComplianceScrub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org default or enabled or disabled.
	ComplianceScrub commons.HuntGroupOrgDefaultCustom `protobuf:"varint,1,opt,name=compliance_scrub,json=complianceScrub,proto3,enum=api.commons.HuntGroupOrgDefaultCustom" json:"compliance_scrub,omitempty"`
	// The ID of the Natural Language Compliance rule set.
	RuleSetId string `protobuf:"bytes,2,opt,name=rule_set_id,json=ruleSetId,proto3" json:"rule_set_id,omitempty"`
}

func (x *NaturalLanguageComplianceScrub) Reset() {
	*x = NaturalLanguageComplianceScrub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaturalLanguageComplianceScrub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalLanguageComplianceScrub) ProtoMessage() {}

func (x *NaturalLanguageComplianceScrub) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalLanguageComplianceScrub.ProtoReflect.Descriptor instead.
func (*NaturalLanguageComplianceScrub) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{6}
}

func (x *NaturalLanguageComplianceScrub) GetComplianceScrub() commons.HuntGroupOrgDefaultCustom {
	if x != nil {
		return x.ComplianceScrub
	}
	return commons.HuntGroupOrgDefaultCustom(0)
}

func (x *NaturalLanguageComplianceScrub) GetRuleSetId() string {
	if x != nil {
		return x.RuleSetId
	}
	return ""
}

// Manual Dial natural compiance metadata options.
type NaturalLanguageComplianceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether compliance metadata is used.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// List of optional contact field description metadata.
	// List of contact_field_description_sids
	OptionalData []int64 `protobuf:"varint,2,rep,packed,name=optional_data,json=optionalData,proto3" json:"optional_data,omitempty"`
	// List of required contact field description metadata.
	// List of contact_field_description_sids
	RequiredData []int64 `protobuf:"varint,3,rep,packed,name=required_data,json=requiredData,proto3" json:"required_data,omitempty"`
}

func (x *NaturalLanguageComplianceMetadata) Reset() {
	*x = NaturalLanguageComplianceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaturalLanguageComplianceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalLanguageComplianceMetadata) ProtoMessage() {}

func (x *NaturalLanguageComplianceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalLanguageComplianceMetadata.ProtoReflect.Descriptor instead.
func (*NaturalLanguageComplianceMetadata) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{7}
}

func (x *NaturalLanguageComplianceMetadata) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *NaturalLanguageComplianceMetadata) GetOptionalData() []int64 {
	if x != nil {
		return x.OptionalData
	}
	return nil
}

func (x *NaturalLanguageComplianceMetadata) GetRequiredData() []int64 {
	if x != nil {
		return x.RequiredData
	}
	return nil
}

// Caller ID Bucket Data includes bucket name and the related XML property SID.
type CallerIdBucketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// XML client property sid.
	XmlClientPropertySid int64 `protobuf:"varint,1,opt,name=xml_client_property_sid,json=xmlClientPropertySid,proto3" json:"xml_client_property_sid,omitempty"`
	// Name of the caller ID bucket.
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
}

func (x *CallerIdBucketData) Reset() {
	*x = CallerIdBucketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallerIdBucketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerIdBucketData) ProtoMessage() {}

func (x *CallerIdBucketData) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerIdBucketData.ProtoReflect.Descriptor instead.
func (*CallerIdBucketData) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{8}
}

func (x *CallerIdBucketData) GetXmlClientPropertySid() int64 {
	if x != nil {
		return x.XmlClientPropertySid
	}
	return 0
}

func (x *CallerIdBucketData) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

// TransferCallSettings is an entity containing the hunt group settings for the
// Transfer Call section of the hunt group settings manager.
type TransferCallSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allow the agent to make transfer calls.
	EnableTransfer bool `protobuf:"varint,1,opt,name=enable_transfer,json=enableTransfer,proto3" json:"enable_transfer,omitempty"`
	// Allowed hand-off types for transfer calls.
	HandOffTypes *TransferCallSettings_HandOffTypes `protobuf:"bytes,2,opt,name=hand_off_types,json=handOffTypes,proto3" json:"hand_off_types,omitempty"`
	// Indicates start, stop or keep current recording status on transfer.
	RecordingStatus commons.TransferRecordingStatus `protobuf:"varint,3,opt,name=recording_status,json=recordingStatus,proto3,enum=api.commons.TransferRecordingStatus" json:"recording_status,omitempty"`
	// Indicates type of allowed transfer types.
	TransferTypes *TransferCallSettings_TransferTypes `protobuf:"bytes,4,opt,name=transfer_types,json=transferTypes,proto3" json:"transfer_types,omitempty"`
	// Indicates whether or not to display.
	DisplayTransferNumberPhoneBook bool `protobuf:"varint,5,opt,name=display_transfer_number_phone_book,json=displayTransferNumberPhoneBook,proto3" json:"display_transfer_number_phone_book,omitempty"`
	// Indicates whether to allow the agent to edit the transfer number.
	EnableTransferNumberEditing bool `protobuf:"varint,6,opt,name=enable_transfer_number_editing,json=enableTransferNumberEditing,proto3" json:"enable_transfer_number_editing,omitempty"`
	// The default transfer number prepopulated in the text box.
	DefaultTransferNumber string `protobuf:"bytes,7,opt,name=default_transfer_number,json=defaultTransferNumber,proto3" json:"default_transfer_number,omitempty"`
	// Transfer numbers which will initiate recording the call.
	StartRecordingNumbers []string `protobuf:"bytes,8,rep,name=start_recording_numbers,json=startRecordingNumbers,proto3" json:"start_recording_numbers,omitempty"`
	// Transfer numbers which will stop recording the call.
	StopRecordingNumbers []string `protobuf:"bytes,9,rep,name=stop_recording_numbers,json=stopRecordingNumbers,proto3" json:"stop_recording_numbers,omitempty"`
	// The default country to use with the transfer number.
	TransferNumberCountry commons.Country `protobuf:"varint,10,opt,name=transfer_number_country,json=transferNumberCountry,proto3,enum=api.commons.Country" json:"transfer_number_country,omitempty"`
	// Indicate whether to display the country select menu.
	DisplayTransferCountrySelection bool `protobuf:"varint,11,opt,name=display_transfer_country_selection,json=displayTransferCountrySelection,proto3" json:"display_transfer_country_selection,omitempty"`
	// Indicate whether to display the caller ID phone book.
	DisplayCallerIdPhoneBook bool `protobuf:"varint,12,opt,name=display_caller_id_phone_book,json=displayCallerIdPhoneBook,proto3" json:"display_caller_id_phone_book,omitempty"`
	// Indicates whether to allow the agent to edit the caller ID.
	EnableCallerIdEditing bool `protobuf:"varint,13,opt,name=enable_caller_id_editing,json=enableCallerIdEditing,proto3" json:"enable_caller_id_editing,omitempty"`
	// The default caller ID prepopulated in the text box.
	DefaultCallerId *TransferCallSettings_DefaultCallerId `protobuf:"bytes,14,opt,name=default_caller_id,json=defaultCallerId,proto3" json:"default_caller_id,omitempty"`
	// The default country to use with the caller ID.
	CallerIdCountry commons.Country `protobuf:"varint,15,opt,name=caller_id_country,json=callerIdCountry,proto3,enum=api.commons.Country" json:"caller_id_country,omitempty"`
	// Indicates whether to display the caller ID country select menu.
	DisplayCallerIdCountrySelection bool `protobuf:"varint,16,opt,name=display_caller_id_country_selection,json=displayCallerIdCountrySelection,proto3" json:"display_caller_id_country_selection,omitempty"`
	// Indicates whether to display agent transfer filtering to the agent.
	DisplayAgentTransferFiltering bool `protobuf:"varint,17,opt,name=display_agent_transfer_filtering,json=displayAgentTransferFiltering,proto3" json:"display_agent_transfer_filtering,omitempty"`
	// Indicates whether to filter agents by default.
	DefaultAgentTransferFiltering bool `protobuf:"varint,18,opt,name=default_agent_transfer_filtering,json=defaultAgentTransferFiltering,proto3" json:"default_agent_transfer_filtering,omitempty"`
	// Indicates whether to limit transferring to agents in the same hunt group.
	EnableHuntGroupFiltering bool `protobuf:"varint,19,opt,name=enable_hunt_group_filtering,json=enableHuntGroupFiltering,proto3" json:"enable_hunt_group_filtering,omitempty"`
	// The name of the Requeue Transfer Queue Configuration.
	RequeueQueueConfig *TransferCallSettings_RequeueQueueConfiguration `protobuf:"bytes,20,opt,name=requeue_queue_config,json=requeueQueueConfig,proto3" json:"requeue_queue_config,omitempty"`
	// Disallow specific agent skills for requeue transfer routing.
	RequeueTransferDisallowed *TransferCallSettings_RequeueTransferDisallowed `protobuf:"bytes,21,opt,name=requeue_transfer_disallowed,json=requeueTransferDisallowed,proto3" json:"requeue_transfer_disallowed,omitempty"`
	// Disallow specific PBX extensions for PBX transfers.
	PbxTransferDisallowed *TransferCallSettings_PbxTransferDisallowed `protobuf:"bytes,22,opt,name=pbx_transfer_disallowed,json=pbxTransferDisallowed,proto3" json:"pbx_transfer_disallowed,omitempty"`
	// Allow agent to override scrub decisions.
	EnableScrubOverride bool `protobuf:"varint,23,opt,name=enable_scrub_override,json=enableScrubOverride,proto3" json:"enable_scrub_override,omitempty"`
	// Indicates whether to apply the whitelist to transfer call scrubbing.
	EnableWhitelist bool `protobuf:"varint,24,opt,name=enable_whitelist,json=enableWhitelist,proto3" json:"enable_whitelist,omitempty"`
	// Whether and what NLC compliance rule to apply.
	NaturalComplianceScrub *NaturalLanguageComplianceScrub `protobuf:"bytes,25,opt,name=natural_compliance_scrub,json=naturalComplianceScrub,proto3" json:"natural_compliance_scrub,omitempty"`
	// Transfer call natural language compliance metadata.
	// `Optional Transfer Compliance Metadata`
	// `Required Transfer Compliance Metadata`
	NaturalLanguageComplianceMetadata *NaturalLanguageComplianceMetadata `protobuf:"bytes,26,opt,name=natural_language_compliance_metadata,json=naturalLanguageComplianceMetadata,proto3" json:"natural_language_compliance_metadata,omitempty"`
}

func (x *TransferCallSettings) Reset() {
	*x = TransferCallSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCallSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCallSettings) ProtoMessage() {}

func (x *TransferCallSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCallSettings.ProtoReflect.Descriptor instead.
func (*TransferCallSettings) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{9}
}

func (x *TransferCallSettings) GetEnableTransfer() bool {
	if x != nil {
		return x.EnableTransfer
	}
	return false
}

func (x *TransferCallSettings) GetHandOffTypes() *TransferCallSettings_HandOffTypes {
	if x != nil {
		return x.HandOffTypes
	}
	return nil
}

func (x *TransferCallSettings) GetRecordingStatus() commons.TransferRecordingStatus {
	if x != nil {
		return x.RecordingStatus
	}
	return commons.TransferRecordingStatus(0)
}

func (x *TransferCallSettings) GetTransferTypes() *TransferCallSettings_TransferTypes {
	if x != nil {
		return x.TransferTypes
	}
	return nil
}

func (x *TransferCallSettings) GetDisplayTransferNumberPhoneBook() bool {
	if x != nil {
		return x.DisplayTransferNumberPhoneBook
	}
	return false
}

func (x *TransferCallSettings) GetEnableTransferNumberEditing() bool {
	if x != nil {
		return x.EnableTransferNumberEditing
	}
	return false
}

func (x *TransferCallSettings) GetDefaultTransferNumber() string {
	if x != nil {
		return x.DefaultTransferNumber
	}
	return ""
}

func (x *TransferCallSettings) GetStartRecordingNumbers() []string {
	if x != nil {
		return x.StartRecordingNumbers
	}
	return nil
}

func (x *TransferCallSettings) GetStopRecordingNumbers() []string {
	if x != nil {
		return x.StopRecordingNumbers
	}
	return nil
}

func (x *TransferCallSettings) GetTransferNumberCountry() commons.Country {
	if x != nil {
		return x.TransferNumberCountry
	}
	return commons.Country(0)
}

func (x *TransferCallSettings) GetDisplayTransferCountrySelection() bool {
	if x != nil {
		return x.DisplayTransferCountrySelection
	}
	return false
}

func (x *TransferCallSettings) GetDisplayCallerIdPhoneBook() bool {
	if x != nil {
		return x.DisplayCallerIdPhoneBook
	}
	return false
}

func (x *TransferCallSettings) GetEnableCallerIdEditing() bool {
	if x != nil {
		return x.EnableCallerIdEditing
	}
	return false
}

func (x *TransferCallSettings) GetDefaultCallerId() *TransferCallSettings_DefaultCallerId {
	if x != nil {
		return x.DefaultCallerId
	}
	return nil
}

func (x *TransferCallSettings) GetCallerIdCountry() commons.Country {
	if x != nil {
		return x.CallerIdCountry
	}
	return commons.Country(0)
}

func (x *TransferCallSettings) GetDisplayCallerIdCountrySelection() bool {
	if x != nil {
		return x.DisplayCallerIdCountrySelection
	}
	return false
}

func (x *TransferCallSettings) GetDisplayAgentTransferFiltering() bool {
	if x != nil {
		return x.DisplayAgentTransferFiltering
	}
	return false
}

func (x *TransferCallSettings) GetDefaultAgentTransferFiltering() bool {
	if x != nil {
		return x.DefaultAgentTransferFiltering
	}
	return false
}

func (x *TransferCallSettings) GetEnableHuntGroupFiltering() bool {
	if x != nil {
		return x.EnableHuntGroupFiltering
	}
	return false
}

func (x *TransferCallSettings) GetRequeueQueueConfig() *TransferCallSettings_RequeueQueueConfiguration {
	if x != nil {
		return x.RequeueQueueConfig
	}
	return nil
}

func (x *TransferCallSettings) GetRequeueTransferDisallowed() *TransferCallSettings_RequeueTransferDisallowed {
	if x != nil {
		return x.RequeueTransferDisallowed
	}
	return nil
}

func (x *TransferCallSettings) GetPbxTransferDisallowed() *TransferCallSettings_PbxTransferDisallowed {
	if x != nil {
		return x.PbxTransferDisallowed
	}
	return nil
}

func (x *TransferCallSettings) GetEnableScrubOverride() bool {
	if x != nil {
		return x.EnableScrubOverride
	}
	return false
}

func (x *TransferCallSettings) GetEnableWhitelist() bool {
	if x != nil {
		return x.EnableWhitelist
	}
	return false
}

func (x *TransferCallSettings) GetNaturalComplianceScrub() *NaturalLanguageComplianceScrub {
	if x != nil {
		return x.NaturalComplianceScrub
	}
	return nil
}

func (x *TransferCallSettings) GetNaturalLanguageComplianceMetadata() *NaturalLanguageComplianceMetadata {
	if x != nil {
		return x.NaturalLanguageComplianceMetadata
	}
	return nil
}

// NumberHistorySettings is an entity containing the hunt group settings for the
// Number History section of the hunt group settings manager.
type NumberHistorySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allow the agent to access number history search.
	EnableSearch bool `protobuf:"varint,1,opt,name=enable_search,json=enableSearch,proto3" json:"enable_search,omitempty"`
	// Allow the export of the number history report.
	EnableReportDownload bool `protobuf:"varint,2,opt,name=enable_report_download,json=enableReportDownload,proto3" json:"enable_report_download,omitempty"`
	// Allow the export of the number history related call recordings.
	EnableRecordingsDownload bool `protobuf:"varint,3,opt,name=enable_recordings_download,json=enableRecordingsDownload,proto3" json:"enable_recordings_download,omitempty"`
	// Allow the agent to edit number history related agent call responses.
	EnableAgentResponseEditing bool `protobuf:"varint,4,opt,name=enable_agent_response_editing,json=enableAgentResponseEditing,proto3" json:"enable_agent_response_editing,omitempty"`
}

func (x *NumberHistorySettings) Reset() {
	*x = NumberHistorySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberHistorySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberHistorySettings) ProtoMessage() {}

func (x *NumberHistorySettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberHistorySettings.ProtoReflect.Descriptor instead.
func (*NumberHistorySettings) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{10}
}

func (x *NumberHistorySettings) GetEnableSearch() bool {
	if x != nil {
		return x.EnableSearch
	}
	return false
}

func (x *NumberHistorySettings) GetEnableReportDownload() bool {
	if x != nil {
		return x.EnableReportDownload
	}
	return false
}

func (x *NumberHistorySettings) GetEnableRecordingsDownload() bool {
	if x != nil {
		return x.EnableRecordingsDownload
	}
	return false
}

func (x *NumberHistorySettings) GetEnableAgentResponseEditing() bool {
	if x != nil {
		return x.EnableAgentResponseEditing
	}
	return false
}

// Sets of rules that manage automatically adding responses to the DNCL
type AgentResponseAutoRuleSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the ruleset
	RulesetSid int64 `protobuf:"varint,1,opt,name=ruleset_sid,json=rulesetSid,proto3" json:"ruleset_sid,omitempty"`
	// The name of the ruleset
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the ruleset
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// This country should be from the allowed list
	Country commons.Country `protobuf:"varint,4,opt,name=country,proto3,enum=api.commons.Country" json:"country,omitempty"`
	// List of Agent Call Responses with comparitors and durations
	Responses []*AutoResponseChoice `protobuf:"bytes,5,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *AgentResponseAutoRuleSet) Reset() {
	*x = AgentResponseAutoRuleSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentResponseAutoRuleSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentResponseAutoRuleSet) ProtoMessage() {}

func (x *AgentResponseAutoRuleSet) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentResponseAutoRuleSet.ProtoReflect.Descriptor instead.
func (*AgentResponseAutoRuleSet) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{11}
}

func (x *AgentResponseAutoRuleSet) GetRulesetSid() int64 {
	if x != nil {
		return x.RulesetSid
	}
	return 0
}

func (x *AgentResponseAutoRuleSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AgentResponseAutoRuleSet) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AgentResponseAutoRuleSet) GetCountry() commons.Country {
	if x != nil {
		return x.Country
	}
	return commons.Country(0)
}

func (x *AgentResponseAutoRuleSet) GetResponses() []*AutoResponseChoice {
	if x != nil {
		return x.Responses
	}
	return nil
}

// An Agent Call Response with comparitors and duration
type AutoResponseChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the agent call response
	AgentCallResponse string `protobuf:"bytes,1,opt,name=agent_call_response,json=agentCallResponse,proto3" json:"agent_call_response,omitempty"`
	// List of comparitors with duration
	Comparitors []*AgentResponseComparitors `protobuf:"bytes,2,rep,name=comparitors,proto3" json:"comparitors,omitempty"`
}

func (x *AutoResponseChoice) Reset() {
	*x = AutoResponseChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoResponseChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoResponseChoice) ProtoMessage() {}

func (x *AutoResponseChoice) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoResponseChoice.ProtoReflect.Descriptor instead.
func (*AutoResponseChoice) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{12}
}

func (x *AutoResponseChoice) GetAgentCallResponse() string {
	if x != nil {
		return x.AgentCallResponse
	}
	return ""
}

func (x *AutoResponseChoice) GetComparitors() []*AgentResponseComparitors {
	if x != nil {
		return x.Comparitors
	}
	return nil
}

// A list of agent entries and duration to use to determine addition to DNCL
type AgentResponseComparitors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a string option that will compare against the agent response
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Expiration is expressed in number of hours
	Expiration int64 `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *AgentResponseComparitors) Reset() {
	*x = AgentResponseComparitors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentResponseComparitors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentResponseComparitors) ProtoMessage() {}

func (x *AgentResponseComparitors) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentResponseComparitors.ProtoReflect.Descriptor instead.
func (*AgentResponseComparitors) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{13}
}

func (x *AgentResponseComparitors) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AgentResponseComparitors) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

// Pause option set properties.
type GeneralSettings_PauseOptionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether pause option sets will be enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The sid of the agent pause code set.
	// xml_client_property_sid where property_key = 'Agent Pause Codes'
	SetSid int64 `protobuf:"varint,2,opt,name=set_sid,json=setSid,proto3" json:"set_sid,omitempty"`
}

func (x *GeneralSettings_PauseOptionSet) Reset() {
	*x = GeneralSettings_PauseOptionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSettings_PauseOptionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSettings_PauseOptionSet) ProtoMessage() {}

func (x *GeneralSettings_PauseOptionSet) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSettings_PauseOptionSet.ProtoReflect.Descriptor instead.
func (*GeneralSettings_PauseOptionSet) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GeneralSettings_PauseOptionSet) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GeneralSettings_PauseOptionSet) GetSetSid() int64 {
	if x != nil {
		return x.SetSid
	}
	return 0
}

// Hold queue monitoring options.
type GeneralSettings_HoldQueueMonitoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether hold queue monitoring is enabled. `Hold Queue Monitoring`
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Agent routing. `HQM Agent Routing`
	AgentRouting commons.AgentRouting `protobuf:"varint,2,opt,name=agent_routing,json=agentRouting,proto3,enum=api.commons.AgentRouting" json:"agent_routing,omitempty"`
	// Hunt group required to route to. `HQM Required Hunt Group Routing`
	RequiredHuntGroupRouting int64 `protobuf:"varint,3,opt,name=required_hunt_group_routing,json=requiredHuntGroupRouting,proto3" json:"required_hunt_group_routing,omitempty"`
	// Hunt group preferred to route to. `HQM Preferred Hunt Group Routing`
	PreferredHuntGroupRouting int64 `protobuf:"varint,4,opt,name=preferred_hunt_group_routing,json=preferredHuntGroupRouting,proto3" json:"preferred_hunt_group_routing,omitempty"`
}

func (x *GeneralSettings_HoldQueueMonitoring) Reset() {
	*x = GeneralSettings_HoldQueueMonitoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSettings_HoldQueueMonitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSettings_HoldQueueMonitoring) ProtoMessage() {}

func (x *GeneralSettings_HoldQueueMonitoring) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSettings_HoldQueueMonitoring.ProtoReflect.Descriptor instead.
func (*GeneralSettings_HoldQueueMonitoring) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{1, 1}
}

func (x *GeneralSettings_HoldQueueMonitoring) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GeneralSettings_HoldQueueMonitoring) GetAgentRouting() commons.AgentRouting {
	if x != nil {
		return x.AgentRouting
	}
	return commons.AgentRouting(0)
}

func (x *GeneralSettings_HoldQueueMonitoring) GetRequiredHuntGroupRouting() int64 {
	if x != nil {
		return x.RequiredHuntGroupRouting
	}
	return 0
}

func (x *GeneralSettings_HoldQueueMonitoring) GetPreferredHuntGroupRouting() int64 {
	if x != nil {
		return x.PreferredHuntGroupRouting
	}
	return 0
}

// Data Dip data display options.
type GeneralSettings_DataDipDataDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to display the Data Dipped data in the data panel.
	DisplayDataDipData bool `protobuf:"varint,1,opt,name=display_data_dip_data,json=displayDataDipData,proto3" json:"display_data_dip_data,omitempty"`
	// The keys of the Data Dipped data key/value pairs.
	DataDipDisplayKeys []string `protobuf:"bytes,2,rep,name=data_dip_display_keys,json=dataDipDisplayKeys,proto3" json:"data_dip_display_keys,omitempty"`
}

func (x *GeneralSettings_DataDipDataDisplay) Reset() {
	*x = GeneralSettings_DataDipDataDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSettings_DataDipDataDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSettings_DataDipDataDisplay) ProtoMessage() {}

func (x *GeneralSettings_DataDipDataDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSettings_DataDipDataDisplay.ProtoReflect.Descriptor instead.
func (*GeneralSettings_DataDipDataDisplay) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{1, 2}
}

func (x *GeneralSettings_DataDipDataDisplay) GetDisplayDataDipData() bool {
	if x != nil {
		return x.DisplayDataDipData
	}
	return false
}

func (x *GeneralSettings_DataDipDataDisplay) GetDataDipDisplayKeys() []string {
	if x != nil {
		return x.DataDipDisplayKeys
	}
	return nil
}

// Payment Integration data display options.
type GeneralSettings_IntegrationDataDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to display the Payment Integration returned data in the
	// data panel.
	DisplayIntegrationData bool `protobuf:"varint,1,opt,name=display_integration_data,json=displayIntegrationData,proto3" json:"display_integration_data,omitempty"`
	// The keys of the Payment Integration data key/value pairs.
	IntegrationDisplayKeys []string `protobuf:"bytes,2,rep,name=integration_display_keys,json=integrationDisplayKeys,proto3" json:"integration_display_keys,omitempty"`
}

func (x *GeneralSettings_IntegrationDataDisplay) Reset() {
	*x = GeneralSettings_IntegrationDataDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSettings_IntegrationDataDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSettings_IntegrationDataDisplay) ProtoMessage() {}

func (x *GeneralSettings_IntegrationDataDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSettings_IntegrationDataDisplay.ProtoReflect.Descriptor instead.
func (*GeneralSettings_IntegrationDataDisplay) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{1, 3}
}

func (x *GeneralSettings_IntegrationDataDisplay) GetDisplayIntegrationData() bool {
	if x != nil {
		return x.DisplayIntegrationData
	}
	return false
}

func (x *GeneralSettings_IntegrationDataDisplay) GetIntegrationDisplayKeys() []string {
	if x != nil {
		return x.IntegrationDisplayKeys
	}
	return nil
}

// Journey Integration data display options.
type GeneralSettings_JourneyDataDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to display the Journey Integration returned data in the
	// data panel.
	DisplayJourneyData bool `protobuf:"varint,1,opt,name=display_journey_data,json=displayJourneyData,proto3" json:"display_journey_data,omitempty"`
	// The keys of the Journey Integration data key/value pairs.
	JourneyDisplayKeys []string `protobuf:"bytes,2,rep,name=journey_display_keys,json=journeyDisplayKeys,proto3" json:"journey_display_keys,omitempty"`
}

func (x *GeneralSettings_JourneyDataDisplay) Reset() {
	*x = GeneralSettings_JourneyDataDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSettings_JourneyDataDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSettings_JourneyDataDisplay) ProtoMessage() {}

func (x *GeneralSettings_JourneyDataDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSettings_JourneyDataDisplay.ProtoReflect.Descriptor instead.
func (*GeneralSettings_JourneyDataDisplay) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{1, 4}
}

func (x *GeneralSettings_JourneyDataDisplay) GetDisplayJourneyData() bool {
	if x != nil {
		return x.DisplayJourneyData
	}
	return false
}

func (x *GeneralSettings_JourneyDataDisplay) GetJourneyDisplayKeys() []string {
	if x != nil {
		return x.JourneyDisplayKeys
	}
	return nil
}

// Agent Login GUI Statistics display and template.
type GeneralSettings_AgentLoginGuiStatisticsDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to allow the display of general agent statistics to the UI.
	DisplayAgentLoginGuiStatistics bool `protobuf:"varint,1,opt,name=display_agent_login_gui_statistics,json=displayAgentLoginGuiStatistics,proto3" json:"display_agent_login_gui_statistics,omitempty"`
	// The ID (XML Client Property Sid) of the agent login gui statistics
	// template.
	AgentLoginGuiStatisticsTemplate int64 `protobuf:"varint,2,opt,name=agent_login_gui_statistics_template,json=agentLoginGuiStatisticsTemplate,proto3" json:"agent_login_gui_statistics_template,omitempty"`
}

func (x *GeneralSettings_AgentLoginGuiStatisticsDisplay) Reset() {
	*x = GeneralSettings_AgentLoginGuiStatisticsDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSettings_AgentLoginGuiStatisticsDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSettings_AgentLoginGuiStatisticsDisplay) ProtoMessage() {}

func (x *GeneralSettings_AgentLoginGuiStatisticsDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSettings_AgentLoginGuiStatisticsDisplay.ProtoReflect.Descriptor instead.
func (*GeneralSettings_AgentLoginGuiStatisticsDisplay) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{1, 5}
}

func (x *GeneralSettings_AgentLoginGuiStatisticsDisplay) GetDisplayAgentLoginGuiStatistics() bool {
	if x != nil {
		return x.DisplayAgentLoginGuiStatistics
	}
	return false
}

func (x *GeneralSettings_AgentLoginGuiStatisticsDisplay) GetAgentLoginGuiStatisticsTemplate() int64 {
	if x != nil {
		return x.AgentLoginGuiStatisticsTemplate
	}
	return 0
}

// Phone / Postal Metadata display options.
type GeneralSettings_PhoneZipMetadataDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to display the Phone / Postal Metadata related to the call's
	// phone number.
	DisplayPhoneZipMetadata bool `protobuf:"varint,1,opt,name=display_phone_zip_metadata,json=displayPhoneZipMetadata,proto3" json:"display_phone_zip_metadata,omitempty"`
	// The keys of the Phone / Postal Metadata for display in the UI.
	PhoneZipMetadataKeys []commons.PhonePostalDisplayOptions `protobuf:"varint,2,rep,packed,name=phone_zip_metadata_keys,json=phoneZipMetadataKeys,proto3,enum=api.commons.PhonePostalDisplayOptions" json:"phone_zip_metadata_keys,omitempty"`
}

func (x *GeneralSettings_PhoneZipMetadataDisplay) Reset() {
	*x = GeneralSettings_PhoneZipMetadataDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSettings_PhoneZipMetadataDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSettings_PhoneZipMetadataDisplay) ProtoMessage() {}

func (x *GeneralSettings_PhoneZipMetadataDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSettings_PhoneZipMetadataDisplay.ProtoReflect.Descriptor instead.
func (*GeneralSettings_PhoneZipMetadataDisplay) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{1, 6}
}

func (x *GeneralSettings_PhoneZipMetadataDisplay) GetDisplayPhoneZipMetadata() bool {
	if x != nil {
		return x.DisplayPhoneZipMetadata
	}
	return false
}

func (x *GeneralSettings_PhoneZipMetadataDisplay) GetPhoneZipMetadataKeys() []commons.PhonePostalDisplayOptions {
	if x != nil {
		return x.PhoneZipMetadataKeys
	}
	return nil
}

// Available hunt group options.
type GeneralSettings_DisallowedHuntGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to limit available hunt groups for agents.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of hunt groups that are available to choose from.
	HuntGroups []int64 `protobuf:"varint,2,rep,packed,name=hunt_groups,json=huntGroups,proto3" json:"hunt_groups,omitempty"`
}

func (x *GeneralSettings_DisallowedHuntGroups) Reset() {
	*x = GeneralSettings_DisallowedHuntGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSettings_DisallowedHuntGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSettings_DisallowedHuntGroups) ProtoMessage() {}

func (x *GeneralSettings_DisallowedHuntGroups) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSettings_DisallowedHuntGroups.ProtoReflect.Descriptor instead.
func (*GeneralSettings_DisallowedHuntGroups) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{1, 7}
}

func (x *GeneralSettings_DisallowedHuntGroups) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GeneralSettings_DisallowedHuntGroups) GetHuntGroups() []int64 {
	if x != nil {
		return x.HuntGroups
	}
	return nil
}

// Alphanumeric keypad options.
type GeneralSettings_AlphanumericKeypad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether keypad delimiting is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Character to delimit with.
	Delimiter commons.AlphanumericKeypadDelimiter `protobuf:"varint,2,opt,name=delimiter,proto3,enum=api.commons.AlphanumericKeypadDelimiter" json:"delimiter,omitempty"`
}

func (x *GeneralSettings_AlphanumericKeypad) Reset() {
	*x = GeneralSettings_AlphanumericKeypad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSettings_AlphanumericKeypad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSettings_AlphanumericKeypad) ProtoMessage() {}

func (x *GeneralSettings_AlphanumericKeypad) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSettings_AlphanumericKeypad.ProtoReflect.Descriptor instead.
func (*GeneralSettings_AlphanumericKeypad) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{1, 8}
}

func (x *GeneralSettings_AlphanumericKeypad) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GeneralSettings_AlphanumericKeypad) GetDelimiter() commons.AlphanumericKeypadDelimiter {
	if x != nil {
		return x.Delimiter
	}
	return commons.AlphanumericKeypadDelimiter(0)
}

// Inbound natural compiance metadata options.
type GeneralSettings_InboundComplianceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether compliance metadata is used.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// List of optional contact field description metadata.
	// List of contact_field_description_sids
	OptionalData []int64 `protobuf:"varint,2,rep,packed,name=optional_data,json=optionalData,proto3" json:"optional_data,omitempty"`
	// List of required contact field description metadata.
	// List of contact_field_description_sids
	RequiredData []int64 `protobuf:"varint,3,rep,packed,name=required_data,json=requiredData,proto3" json:"required_data,omitempty"`
}

func (x *GeneralSettings_InboundComplianceMetadata) Reset() {
	*x = GeneralSettings_InboundComplianceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralSettings_InboundComplianceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralSettings_InboundComplianceMetadata) ProtoMessage() {}

func (x *GeneralSettings_InboundComplianceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralSettings_InboundComplianceMetadata.ProtoReflect.Descriptor instead.
func (*GeneralSettings_InboundComplianceMetadata) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{1, 9}
}

func (x *GeneralSettings_InboundComplianceMetadata) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GeneralSettings_InboundComplianceMetadata) GetOptionalData() []int64 {
	if x != nil {
		return x.OptionalData
	}
	return nil
}

func (x *GeneralSettings_InboundComplianceMetadata) GetRequiredData() []int64 {
	if x != nil {
		return x.RequiredData
	}
	return nil
}

// Scrub list expiration properties.
type CommunicationSettings_ScrubListExpiration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default call DNCL/scrub list expiration time.
	DefaultExpiration commons.CommunicationExpiration `protobuf:"varint,1,opt,name=default_expiration,json=defaultExpiration,proto3,enum=api.commons.CommunicationExpiration" json:"default_expiration,omitempty"`
	// Enable limiting scrub list expiration choices.
	LimitExpiration bool `protobuf:"varint,2,opt,name=limit_expiration,json=limitExpiration,proto3" json:"limit_expiration,omitempty"`
	// List of possible expiration times to choose from.
	LimitedExpirations []commons.CommunicationExpiration `protobuf:"varint,3,rep,packed,name=limited_expirations,json=limitedExpirations,proto3,enum=api.commons.CommunicationExpiration" json:"limited_expirations,omitempty"`
}

func (x *CommunicationSettings_ScrubListExpiration) Reset() {
	*x = CommunicationSettings_ScrubListExpiration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationSettings_ScrubListExpiration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationSettings_ScrubListExpiration) ProtoMessage() {}

func (x *CommunicationSettings_ScrubListExpiration) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationSettings_ScrubListExpiration.ProtoReflect.Descriptor instead.
func (*CommunicationSettings_ScrubListExpiration) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CommunicationSettings_ScrubListExpiration) GetDefaultExpiration() commons.CommunicationExpiration {
	if x != nil {
		return x.DefaultExpiration
	}
	return commons.CommunicationExpiration(0)
}

func (x *CommunicationSettings_ScrubListExpiration) GetLimitExpiration() bool {
	if x != nil {
		return x.LimitExpiration
	}
	return false
}

func (x *CommunicationSettings_ScrubListExpiration) GetLimitedExpirations() []commons.CommunicationExpiration {
	if x != nil {
		return x.LimitedExpirations
	}
	return nil
}

// Automate response rules properties.
type CommunicationSettings_AutomateResponseRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether automated response rules are enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Sid associated with response rule.
	// xml_client_property_sid where property_key =
	// 'AgentDispositionConditionalDncl'
	RuleSid int64 `protobuf:"varint,2,opt,name=rule_sid,json=ruleSid,proto3" json:"rule_sid,omitempty"`
}

func (x *CommunicationSettings_AutomateResponseRules) Reset() {
	*x = CommunicationSettings_AutomateResponseRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationSettings_AutomateResponseRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationSettings_AutomateResponseRules) ProtoMessage() {}

func (x *CommunicationSettings_AutomateResponseRules) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationSettings_AutomateResponseRules.ProtoReflect.Descriptor instead.
func (*CommunicationSettings_AutomateResponseRules) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CommunicationSettings_AutomateResponseRules) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CommunicationSettings_AutomateResponseRules) GetRuleSid() int64 {
	if x != nil {
		return x.RuleSid
	}
	return 0
}

// Automate response rules properties.
type CommunicationSettings_AutomateScrubListCallData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether automatic additional of call data to scrub lists is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// List of scrub list call data fields which will automatically be added.
	ScrubListDataFields []*CommunicationSettings_AutomateScrubListCallData_ScrubListDataField `protobuf:"bytes,2,rep,name=scrub_list_data_fields,json=scrubListDataFields,proto3" json:"scrub_list_data_fields,omitempty"`
}

func (x *CommunicationSettings_AutomateScrubListCallData) Reset() {
	*x = CommunicationSettings_AutomateScrubListCallData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationSettings_AutomateScrubListCallData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationSettings_AutomateScrubListCallData) ProtoMessage() {}

func (x *CommunicationSettings_AutomateScrubListCallData) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationSettings_AutomateScrubListCallData.ProtoReflect.Descriptor instead.
func (*CommunicationSettings_AutomateScrubListCallData) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{2, 2}
}

func (x *CommunicationSettings_AutomateScrubListCallData) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CommunicationSettings_AutomateScrubListCallData) GetScrubListDataFields() []*CommunicationSettings_AutomateScrubListCallData_ScrubListDataField {
	if x != nil {
		return x.ScrubListDataFields
	}
	return nil
}

// Scrub list data field properties.
type CommunicationSettings_AutomateScrubListCallData_ScrubListDataField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scrub list sid.
	ScrubList string `protobuf:"bytes,1,opt,name=scrub_list,json=scrubList,proto3" json:"scrub_list,omitempty"`
	// Call data field sid.
	CallDataField int64 `protobuf:"varint,2,opt,name=call_data_field,json=callDataField,proto3" json:"call_data_field,omitempty"`
}

func (x *CommunicationSettings_AutomateScrubListCallData_ScrubListDataField) Reset() {
	*x = CommunicationSettings_AutomateScrubListCallData_ScrubListDataField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationSettings_AutomateScrubListCallData_ScrubListDataField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationSettings_AutomateScrubListCallData_ScrubListDataField) ProtoMessage() {}

func (x *CommunicationSettings_AutomateScrubListCallData_ScrubListDataField) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationSettings_AutomateScrubListCallData_ScrubListDataField.ProtoReflect.Descriptor instead.
func (*CommunicationSettings_AutomateScrubListCallData_ScrubListDataField) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{2, 2, 0}
}

func (x *CommunicationSettings_AutomateScrubListCallData_ScrubListDataField) GetScrubList() string {
	if x != nil {
		return x.ScrubList
	}
	return ""
}

func (x *CommunicationSettings_AutomateScrubListCallData_ScrubListDataField) GetCallDataField() int64 {
	if x != nil {
		return x.CallDataField
	}
	return 0
}

// Default callback routing properties.
type CallbackSettings_DefaultRouting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default callback routing option (agent, skill set, none).
	RoutingMode commons.DefaultCallbackRouting `protobuf:"varint,1,opt,name=routing_mode,json=routingMode,proto3,enum=api.commons.DefaultCallbackRouting" json:"routing_mode,omitempty"`
	// Agent to callback to.
	AgentSid int64 `protobuf:"varint,2,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	// Agent skillsets to callback to.
	AgentSkillsets []int64 `protobuf:"varint,3,rep,packed,name=agent_skillsets,json=agentSkillsets,proto3" json:"agent_skillsets,omitempty"`
	// Hunt Groups selected by default
	HuntGroupSids []int64 `protobuf:"varint,4,rep,packed,name=hunt_group_sids,json=huntGroupSids,proto3" json:"hunt_group_sids,omitempty"`
}

func (x *CallbackSettings_DefaultRouting) Reset() {
	*x = CallbackSettings_DefaultRouting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackSettings_DefaultRouting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackSettings_DefaultRouting) ProtoMessage() {}

func (x *CallbackSettings_DefaultRouting) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackSettings_DefaultRouting.ProtoReflect.Descriptor instead.
func (*CallbackSettings_DefaultRouting) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CallbackSettings_DefaultRouting) GetRoutingMode() commons.DefaultCallbackRouting {
	if x != nil {
		return x.RoutingMode
	}
	return commons.DefaultCallbackRouting(0)
}

func (x *CallbackSettings_DefaultRouting) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *CallbackSettings_DefaultRouting) GetAgentSkillsets() []int64 {
	if x != nil {
		return x.AgentSkillsets
	}
	return nil
}

func (x *CallbackSettings_DefaultRouting) GetHuntGroupSids() []int64 {
	if x != nil {
		return x.HuntGroupSids
	}
	return nil
}

// Control which skills may be used when selecting routing.
type CallbackSettings_CallbackRoutingDisallowed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether callback routing should be limited.
	UseRoutingLimiting bool `protobuf:"varint,1,opt,name=use_routing_limiting,json=useRoutingLimiting,proto3" json:"use_routing_limiting,omitempty"`
	// Prohibited Agent Sids
	AgentSids []int64 `protobuf:"varint,2,rep,packed,name=agent_sids,json=agentSids,proto3" json:"agent_sids,omitempty"`
	// Prohibited Hunt Group Sids
	HuntGroupSids []int64 `protobuf:"varint,3,rep,packed,name=hunt_group_sids,json=huntGroupSids,proto3" json:"hunt_group_sids,omitempty"`
	// Prohibited agent skill sids
	AgentSkillSids []int64 `protobuf:"varint,4,rep,packed,name=agent_skill_sids,json=agentSkillSids,proto3" json:"agent_skill_sids,omitempty"`
}

func (x *CallbackSettings_CallbackRoutingDisallowed) Reset() {
	*x = CallbackSettings_CallbackRoutingDisallowed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackSettings_CallbackRoutingDisallowed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackSettings_CallbackRoutingDisallowed) ProtoMessage() {}

func (x *CallbackSettings_CallbackRoutingDisallowed) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackSettings_CallbackRoutingDisallowed.ProtoReflect.Descriptor instead.
func (*CallbackSettings_CallbackRoutingDisallowed) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CallbackSettings_CallbackRoutingDisallowed) GetUseRoutingLimiting() bool {
	if x != nil {
		return x.UseRoutingLimiting
	}
	return false
}

func (x *CallbackSettings_CallbackRoutingDisallowed) GetAgentSids() []int64 {
	if x != nil {
		return x.AgentSids
	}
	return nil
}

func (x *CallbackSettings_CallbackRoutingDisallowed) GetHuntGroupSids() []int64 {
	if x != nil {
		return x.HuntGroupSids
	}
	return nil
}

func (x *CallbackSettings_CallbackRoutingDisallowed) GetAgentSkillSids() []int64 {
	if x != nil {
		return x.AgentSkillSids
	}
	return nil
}

// Allow the agent to override scrub settings.
type ManualDialSettings_ScrubOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allow the agent to override DNCL scrubbing.
	EnableDnclOverride bool `protobuf:"varint,1,opt,name=enable_dncl_override,json=enableDnclOverride,proto3" json:"enable_dncl_override,omitempty"`
	// Allow the agent to override cell phone scrubbing.
	EnableCellScrubOverride bool `protobuf:"varint,2,opt,name=enable_cell_scrub_override,json=enableCellScrubOverride,proto3" json:"enable_cell_scrub_override,omitempty"`
	// Allow the agent to override the global time zone scrubbing.
	EnableTimeZoneScrubOverride bool `protobuf:"varint,3,opt,name=enable_time_zone_scrub_override,json=enableTimeZoneScrubOverride,proto3" json:"enable_time_zone_scrub_override,omitempty"`
	// Allow the agent to override Natural Language Compliance scrubbing.
	NaturalComplianceOverride bool `protobuf:"varint,4,opt,name=natural_compliance_override,json=naturalComplianceOverride,proto3" json:"natural_compliance_override,omitempty"`
}

func (x *ManualDialSettings_ScrubOverride) Reset() {
	*x = ManualDialSettings_ScrubOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualDialSettings_ScrubOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualDialSettings_ScrubOverride) ProtoMessage() {}

func (x *ManualDialSettings_ScrubOverride) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualDialSettings_ScrubOverride.ProtoReflect.Descriptor instead.
func (*ManualDialSettings_ScrubOverride) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ManualDialSettings_ScrubOverride) GetEnableDnclOverride() bool {
	if x != nil {
		return x.EnableDnclOverride
	}
	return false
}

func (x *ManualDialSettings_ScrubOverride) GetEnableCellScrubOverride() bool {
	if x != nil {
		return x.EnableCellScrubOverride
	}
	return false
}

func (x *ManualDialSettings_ScrubOverride) GetEnableTimeZoneScrubOverride() bool {
	if x != nil {
		return x.EnableTimeZoneScrubOverride
	}
	return false
}

func (x *ManualDialSettings_ScrubOverride) GetNaturalComplianceOverride() bool {
	if x != nil {
		return x.NaturalComplianceOverride
	}
	return false
}

// DefaultCallerId: custom or "Agent Caller ID" and number (if needed).
type ManualDialSettings_DefaultCallerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes how the field is used; none, custom or agent caller ID.
	Usage commons.DefaultManualDialCallerId `protobuf:"varint,1,opt,name=usage,proto3,enum=api.commons.DefaultManualDialCallerId" json:"usage,omitempty"`
	// The caller ID (if needed).
	CustomCallerId string `protobuf:"bytes,2,opt,name=custom_caller_id,json=customCallerId,proto3" json:"custom_caller_id,omitempty"`
}

func (x *ManualDialSettings_DefaultCallerId) Reset() {
	*x = ManualDialSettings_DefaultCallerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualDialSettings_DefaultCallerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualDialSettings_DefaultCallerId) ProtoMessage() {}

func (x *ManualDialSettings_DefaultCallerId) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualDialSettings_DefaultCallerId.ProtoReflect.Descriptor instead.
func (*ManualDialSettings_DefaultCallerId) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{5, 1}
}

func (x *ManualDialSettings_DefaultCallerId) GetUsage() commons.DefaultManualDialCallerId {
	if x != nil {
		return x.Usage
	}
	return commons.DefaultManualDialCallerId(0)
}

func (x *ManualDialSettings_DefaultCallerId) GetCustomCallerId() string {
	if x != nil {
		return x.CustomCallerId
	}
	return ""
}

// Describes a mapping of return keys to manual dial values.
type ManualDialSettings_DataDipIntegrationMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mapping type; manual dial number, caller ID or field description.
	MappingType commons.ManualDialDataDipIntegration `protobuf:"varint,1,opt,name=mapping_type,json=mappingType,proto3,enum=api.commons.ManualDialDataDipIntegration" json:"mapping_type,omitempty"`
	// The key of the data dipped data to map to the manual call data.
	DataDipReturnKey string `protobuf:"bytes,2,opt,name=data_dip_return_key,json=dataDipReturnKey,proto3" json:"data_dip_return_key,omitempty"`
	// The contact field description to map to when it is the type.
	ContactFieldDescriptionSid int64 `protobuf:"varint,3,opt,name=contact_field_description_sid,json=contactFieldDescriptionSid,proto3" json:"contact_field_description_sid,omitempty"`
}

func (x *ManualDialSettings_DataDipIntegrationMapping) Reset() {
	*x = ManualDialSettings_DataDipIntegrationMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualDialSettings_DataDipIntegrationMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualDialSettings_DataDipIntegrationMapping) ProtoMessage() {}

func (x *ManualDialSettings_DataDipIntegrationMapping) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualDialSettings_DataDipIntegrationMapping.ProtoReflect.Descriptor instead.
func (*ManualDialSettings_DataDipIntegrationMapping) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{5, 2}
}

func (x *ManualDialSettings_DataDipIntegrationMapping) GetMappingType() commons.ManualDialDataDipIntegration {
	if x != nil {
		return x.MappingType
	}
	return commons.ManualDialDataDipIntegration(0)
}

func (x *ManualDialSettings_DataDipIntegrationMapping) GetDataDipReturnKey() string {
	if x != nil {
		return x.DataDipReturnKey
	}
	return ""
}

func (x *ManualDialSettings_DataDipIntegrationMapping) GetContactFieldDescriptionSid() int64 {
	if x != nil {
		return x.ContactFieldDescriptionSid
	}
	return 0
}

// HandOffTypes indicates which Hand-off types the agent may use.
type TransferCallSettings_HandOffTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableConference bool `protobuf:"varint,1,opt,name=enable_conference,json=enableConference,proto3" json:"enable_conference,omitempty"`
	EnableWarm       bool `protobuf:"varint,2,opt,name=enable_warm,json=enableWarm,proto3" json:"enable_warm,omitempty"`
	EnableCold       bool `protobuf:"varint,3,opt,name=enable_cold,json=enableCold,proto3" json:"enable_cold,omitempty"`
}

func (x *TransferCallSettings_HandOffTypes) Reset() {
	*x = TransferCallSettings_HandOffTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCallSettings_HandOffTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCallSettings_HandOffTypes) ProtoMessage() {}

func (x *TransferCallSettings_HandOffTypes) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCallSettings_HandOffTypes.ProtoReflect.Descriptor instead.
func (*TransferCallSettings_HandOffTypes) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{9, 0}
}

func (x *TransferCallSettings_HandOffTypes) GetEnableConference() bool {
	if x != nil {
		return x.EnableConference
	}
	return false
}

func (x *TransferCallSettings_HandOffTypes) GetEnableWarm() bool {
	if x != nil {
		return x.EnableWarm
	}
	return false
}

func (x *TransferCallSettings_HandOffTypes) GetEnableCold() bool {
	if x != nil {
		return x.EnableCold
	}
	return false
}

// TransferTypes indicates which transfer types the agent may use.
type TransferCallSettings_TransferTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableAgentTransfer        bool `protobuf:"varint,1,opt,name=enable_agent_transfer,json=enableAgentTransfer,proto3" json:"enable_agent_transfer,omitempty"`
	EnableOpenTransfer         bool `protobuf:"varint,2,opt,name=enable_open_transfer,json=enableOpenTransfer,proto3" json:"enable_open_transfer,omitempty"`
	EnableRequeueTransfer      bool `protobuf:"varint,3,opt,name=enable_requeue_transfer,json=enableRequeueTransfer,proto3" json:"enable_requeue_transfer,omitempty"`
	EnablePbxExtensionTransfer bool `protobuf:"varint,4,opt,name=enable_pbx_extension_transfer,json=enablePbxExtensionTransfer,proto3" json:"enable_pbx_extension_transfer,omitempty"`
	EnableVoicemailTransfer    bool `protobuf:"varint,5,opt,name=enable_voicemail_transfer,json=enableVoicemailTransfer,proto3" json:"enable_voicemail_transfer,omitempty"`
}

func (x *TransferCallSettings_TransferTypes) Reset() {
	*x = TransferCallSettings_TransferTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCallSettings_TransferTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCallSettings_TransferTypes) ProtoMessage() {}

func (x *TransferCallSettings_TransferTypes) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCallSettings_TransferTypes.ProtoReflect.Descriptor instead.
func (*TransferCallSettings_TransferTypes) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{9, 1}
}

func (x *TransferCallSettings_TransferTypes) GetEnableAgentTransfer() bool {
	if x != nil {
		return x.EnableAgentTransfer
	}
	return false
}

func (x *TransferCallSettings_TransferTypes) GetEnableOpenTransfer() bool {
	if x != nil {
		return x.EnableOpenTransfer
	}
	return false
}

func (x *TransferCallSettings_TransferTypes) GetEnableRequeueTransfer() bool {
	if x != nil {
		return x.EnableRequeueTransfer
	}
	return false
}

func (x *TransferCallSettings_TransferTypes) GetEnablePbxExtensionTransfer() bool {
	if x != nil {
		return x.EnablePbxExtensionTransfer
	}
	return false
}

func (x *TransferCallSettings_TransferTypes) GetEnableVoicemailTransfer() bool {
	if x != nil {
		return x.EnableVoicemailTransfer
	}
	return false
}

// RequeueTransferDisallowed if enabled, prohibits skills/hunt groups.
type TransferCallSettings_RequeueTransferDisallowed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable         bool    `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	AgentSkillSids []int64 `protobuf:"varint,2,rep,packed,name=agent_skill_sids,json=agentSkillSids,proto3" json:"agent_skill_sids,omitempty"`
	HuntGroupSids  []int64 `protobuf:"varint,3,rep,packed,name=hunt_group_sids,json=huntGroupSids,proto3" json:"hunt_group_sids,omitempty"`
}

func (x *TransferCallSettings_RequeueTransferDisallowed) Reset() {
	*x = TransferCallSettings_RequeueTransferDisallowed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCallSettings_RequeueTransferDisallowed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCallSettings_RequeueTransferDisallowed) ProtoMessage() {}

func (x *TransferCallSettings_RequeueTransferDisallowed) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCallSettings_RequeueTransferDisallowed.ProtoReflect.Descriptor instead.
func (*TransferCallSettings_RequeueTransferDisallowed) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{9, 2}
}

func (x *TransferCallSettings_RequeueTransferDisallowed) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *TransferCallSettings_RequeueTransferDisallowed) GetAgentSkillSids() []int64 {
	if x != nil {
		return x.AgentSkillSids
	}
	return nil
}

func (x *TransferCallSettings_RequeueTransferDisallowed) GetHuntGroupSids() []int64 {
	if x != nil {
		return x.HuntGroupSids
	}
	return nil
}

// PbxTransferDisallowed if enabled, prohibits these extensions.
type TransferCallSettings_PbxTransferDisallowed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable     bool     `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Extensions []string `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *TransferCallSettings_PbxTransferDisallowed) Reset() {
	*x = TransferCallSettings_PbxTransferDisallowed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCallSettings_PbxTransferDisallowed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCallSettings_PbxTransferDisallowed) ProtoMessage() {}

func (x *TransferCallSettings_PbxTransferDisallowed) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCallSettings_PbxTransferDisallowed.ProtoReflect.Descriptor instead.
func (*TransferCallSettings_PbxTransferDisallowed) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{9, 3}
}

func (x *TransferCallSettings_PbxTransferDisallowed) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *TransferCallSettings_PbxTransferDisallowed) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// RequeueQueueConfiguration indicates which config to use on transfer.
type TransferCallSettings_RequeueQueueConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usage      commons.RequeueTransferQueueConfig `protobuf:"varint,1,opt,name=usage,proto3,enum=api.commons.RequeueTransferQueueConfig" json:"usage,omitempty"`
	CustomName string                             `protobuf:"bytes,2,opt,name=custom_name,json=customName,proto3" json:"custom_name,omitempty"`
}

func (x *TransferCallSettings_RequeueQueueConfiguration) Reset() {
	*x = TransferCallSettings_RequeueQueueConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCallSettings_RequeueQueueConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCallSettings_RequeueQueueConfiguration) ProtoMessage() {}

func (x *TransferCallSettings_RequeueQueueConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCallSettings_RequeueQueueConfiguration.ProtoReflect.Descriptor instead.
func (*TransferCallSettings_RequeueQueueConfiguration) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{9, 4}
}

func (x *TransferCallSettings_RequeueQueueConfiguration) GetUsage() commons.RequeueTransferQueueConfig {
	if x != nil {
		return x.Usage
	}
	return commons.RequeueTransferQueueConfig(0)
}

func (x *TransferCallSettings_RequeueQueueConfiguration) GetCustomName() string {
	if x != nil {
		return x.CustomName
	}
	return ""
}

// DefaultCallerId indicates custom or 3rd party and number (if needed).
type TransferCallSettings_DefaultCallerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usage          commons.DefaultTransferCallerId `protobuf:"varint,1,opt,name=usage,proto3,enum=api.commons.DefaultTransferCallerId" json:"usage,omitempty"`
	CustomCallerId string                          `protobuf:"bytes,2,opt,name=custom_caller_id,json=customCallerId,proto3" json:"custom_caller_id,omitempty"`
}

func (x *TransferCallSettings_DefaultCallerId) Reset() {
	*x = TransferCallSettings_DefaultCallerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_huntgroup_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCallSettings_DefaultCallerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCallSettings_DefaultCallerId) ProtoMessage() {}

func (x *TransferCallSettings_DefaultCallerId) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_huntgroup_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCallSettings_DefaultCallerId.ProtoReflect.Descriptor instead.
func (*TransferCallSettings_DefaultCallerId) Descriptor() ([]byte, []int) {
	return file_api_commons_org_huntgroup_proto_rawDescGZIP(), []int{9, 5}
}

func (x *TransferCallSettings_DefaultCallerId) GetUsage() commons.DefaultTransferCallerId {
	if x != nil {
		return x.Usage
	}
	return commons.DefaultTransferCallerId(0)
}

func (x *TransferCallSettings_DefaultCallerId) GetCustomCallerId() string {
	if x != nil {
		return x.CustomCallerId
	}
	return ""
}

var File_api_commons_org_huntgroup_proto protoreflect.FileDescriptor

var file_api_commons_org_huntgroup_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72,
	0x67, 0x2f, 0x68, 0x75, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f,
	0x72, 0x67, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x04, 0x0a, 0x11, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5d, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44,
	0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x55, 0x0a, 0x14, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5b, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x5e, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x15, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0xc4, 0x24, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x72, 0x12, 0x31, 0x0a, 0x15,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x12,
	0x41, 0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x45,
	0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x70, 0x12,
	0x36, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x3b,
	0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x21, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xca, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0xcb, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x43, 0x0a, 0x1e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x20, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0xac, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x12,
	0x3a, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x91, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x92, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x69, 0x0a, 0x15, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x93, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x68, 0x6f, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x17, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0xf5, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x73, 0x69, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0xf6, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x69, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x1b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x76, 0x72, 0x5f, 0x6e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0xf7, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x76, 0x72, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3a, 0x0a, 0x19,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xf8, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0xf9, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x72, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0xfa, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x66, 0x0a, 0x14, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0xfb, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x12, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x5c, 0x0a, 0x18, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0xfc, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x15, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x8c, 0x01, 0x0a, 0x22, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x67, 0x75, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x1e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x76, 0x0a, 0x1a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0xfe,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x5a, 0x69, 0x70,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x17, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5a, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0xff, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x77, 0x65, 0x62, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x80, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x4f, 0x0a,
	0x24, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6c,
	0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x68, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0xd9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x75, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x45, 0x0a, 0x1f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0xbc, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4f, 0x66, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0xbd, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6d, 0x73, 0x18, 0xbe, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4f, 0x66, 0x53, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x22,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73,
	0x6d, 0x73, 0x18, 0xbf, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x6d, 0x73, 0x12, 0x65, 0x0a, 0x13, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x64,
	0x18, 0xa0, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x64, 0x52, 0x12, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x64,
	0x12, 0x4a, 0x0a, 0x21, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa1, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7b, 0x0a, 0x1b,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xa2, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x19,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x6f, 0x6d, 0x18, 0xa3, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x1a, 0x43,
	0x0a, 0x0e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x74,
	0x53, 0x69, 0x64, 0x1a, 0xef, 0x01, 0x0a, 0x13, 0x48, 0x6f, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x7a, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31,
	0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64,
	0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79,
	0x73, 0x1a, 0x8c, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x18,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x73,
	0x1a, 0x78, 0x0a, 0x12, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0xba, 0x01, 0x0a, 0x1e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x4a, 0x0a,
	0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x47, 0x75, 0x69, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x17, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x5a, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x5a, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x5d, 0x0a, 0x17, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5a, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x1a,
	0x51, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x1a, 0x76, 0x0a, 0x12, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x70, 0x61, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x1a, 0x7f, 0x0a, 0x19, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xec, 0x0e, 0x0a, 0x15,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x39, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x63,
	0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61,
	0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x18, 0x73, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x1a, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x39, 0x0a,
	0x19, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x49, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x75, 0x70, 0x12, 0x7d, 0x0a, 0x1d, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x1c, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x1e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x1d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x23, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x64,
	0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x22, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x73,
	0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x75, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0xca, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x1d, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75,
	0x62, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xec, 0x01,
	0x0a, 0x13, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4c, 0x0a, 0x15,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x1a, 0x9d, 0x02, 0x0a, 0x19, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x16, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x13, 0x73, 0x63, 0x72, 0x75, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x5b, 0x0a,
	0x12, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xe2, 0x07, 0x0a, 0x10, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x3c, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x6a, 0x0a,
	0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x12,
	0x7b, 0x0a, 0x1b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x52, 0x19, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x1a, 0xc6, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x64, 0x73, 0x1a, 0xbe,
	0x01, 0x0a, 0x19, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x75, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x73, 0x22,
	0xab, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4f, 0x6e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x90, 0x16,
	0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69,
	0x61, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x16,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x10, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x67, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x0e, 0x63, 0x65,
	0x6c, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x12, 0x5a, 0x0a, 0x15,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4f, 0x72, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x74,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x69, 0x0a, 0x18, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x52, 0x16,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x12, 0x58, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x75, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x18, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x22, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x22, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x4f, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x23, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62,
	0x6f, 0x6f, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x12, 0x41, 0x0a, 0x1d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x35,
	0x0a, 0x17, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x83, 0x01, 0x0a, 0x24, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x21, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x64, 0x69, 0x70, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x69,
	0x64, 0x12, 0x5f, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x70, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x69, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x64, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x80, 0x01, 0x0a, 0x1d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x44,
	0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x69, 0x0a, 0x1d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x44, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67,
	0x1a, 0x84, 0x02, 0x0a, 0x0d, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6e, 0x63,
	0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6e, 0x63, 0x6c, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x44, 0x0a, 0x1f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x79, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x1a, 0xdb, 0x01, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x4c, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x70, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a,
	0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64,
	0x22, 0x93, 0x01, 0x0a, 0x1e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x72, 0x75, 0x62, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x75, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x21, 0x4e, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x6c, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x17, 0x78, 0x6d, 0x6c, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x78, 0x6d, 0x6c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8b,
	0x17, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x58, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0c, 0x68, 0x61,
	0x6e, 0x64, 0x4f, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x12, 0x43, 0x0a, 0x1e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x4c,
	0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x22,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x45, 0x64, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x61, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x23, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x47,
	0x0a, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x71, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x1b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52,
	0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x73, 0x0a, 0x17, 0x70, 0x62,
	0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x50, 0x62, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x15, 0x70, 0x62, 0x78, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x69,
	0x0a, 0x18, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x72, 0x75,
	0x62, 0x52, 0x16, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x72, 0x75, 0x62, 0x12, 0x83, 0x01, 0x0a, 0x24, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x21, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x7d, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x72, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x64, 0x1a, 0xac,
	0x02, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x1d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x62, 0x78, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x62, 0x78,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x1a, 0x85, 0x01,
	0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x64, 0x73, 0x1a, 0x4f, 0x0a, 0x15, 0x50, 0x62, 0x78, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x7b, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x77, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x52, 0x05, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf3, 0x01, 0x0a,
	0x15, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x41, 0x0a, 0x1d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x64, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0xe4, 0x01, 0x0a, 0x18, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x53, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x41, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x50, 0x0a,
	0x18, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x50, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x63, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x72, 0x69,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72,
	0x67, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63,
	0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x3b, 0x6f, 0x72,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_org_huntgroup_proto_rawDescOnce sync.Once
	file_api_commons_org_huntgroup_proto_rawDescData = file_api_commons_org_huntgroup_proto_rawDesc
)

func file_api_commons_org_huntgroup_proto_rawDescGZIP() []byte {
	file_api_commons_org_huntgroup_proto_rawDescOnce.Do(func() {
		file_api_commons_org_huntgroup_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_org_huntgroup_proto_rawDescData)
	})
	return file_api_commons_org_huntgroup_proto_rawDescData
}

var file_api_commons_org_huntgroup_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_api_commons_org_huntgroup_proto_goTypes = []interface{}{
	(*HuntGroupSettings)(nil),                                                  // 0: api.commons.org.HuntGroupSettings
	(*GeneralSettings)(nil),                                                    // 1: api.commons.org.GeneralSettings
	(*CommunicationSettings)(nil),                                              // 2: api.commons.org.CommunicationSettings
	(*CallbackSettings)(nil),                                                   // 3: api.commons.org.CallbackSettings
	(*PreviewDialSettings)(nil),                                                // 4: api.commons.org.PreviewDialSettings
	(*ManualDialSettings)(nil),                                                 // 5: api.commons.org.ManualDialSettings
	(*NaturalLanguageComplianceScrub)(nil),                                     // 6: api.commons.org.NaturalLanguageComplianceScrub
	(*NaturalLanguageComplianceMetadata)(nil),                                  // 7: api.commons.org.NaturalLanguageComplianceMetadata
	(*CallerIdBucketData)(nil),                                                 // 8: api.commons.org.CallerIdBucketData
	(*TransferCallSettings)(nil),                                               // 9: api.commons.org.TransferCallSettings
	(*NumberHistorySettings)(nil),                                              // 10: api.commons.org.NumberHistorySettings
	(*AgentResponseAutoRuleSet)(nil),                                           // 11: api.commons.org.AgentResponseAutoRuleSet
	(*AutoResponseChoice)(nil),                                                 // 12: api.commons.org.AutoResponseChoice
	(*AgentResponseComparitors)(nil),                                           // 13: api.commons.org.AgentResponseComparitors
	(*GeneralSettings_PauseOptionSet)(nil),                                     // 14: api.commons.org.GeneralSettings.PauseOptionSet
	(*GeneralSettings_HoldQueueMonitoring)(nil),                                // 15: api.commons.org.GeneralSettings.HoldQueueMonitoring
	(*GeneralSettings_DataDipDataDisplay)(nil),                                 // 16: api.commons.org.GeneralSettings.DataDipDataDisplay
	(*GeneralSettings_IntegrationDataDisplay)(nil),                             // 17: api.commons.org.GeneralSettings.IntegrationDataDisplay
	(*GeneralSettings_JourneyDataDisplay)(nil),                                 // 18: api.commons.org.GeneralSettings.JourneyDataDisplay
	(*GeneralSettings_AgentLoginGuiStatisticsDisplay)(nil),                     // 19: api.commons.org.GeneralSettings.AgentLoginGuiStatisticsDisplay
	(*GeneralSettings_PhoneZipMetadataDisplay)(nil),                            // 20: api.commons.org.GeneralSettings.PhoneZipMetadataDisplay
	(*GeneralSettings_DisallowedHuntGroups)(nil),                               // 21: api.commons.org.GeneralSettings.DisallowedHuntGroups
	(*GeneralSettings_AlphanumericKeypad)(nil),                                 // 22: api.commons.org.GeneralSettings.AlphanumericKeypad
	(*GeneralSettings_InboundComplianceMetadata)(nil),                          // 23: api.commons.org.GeneralSettings.InboundComplianceMetadata
	(*CommunicationSettings_ScrubListExpiration)(nil),                          // 24: api.commons.org.CommunicationSettings.ScrubListExpiration
	(*CommunicationSettings_AutomateResponseRules)(nil),                        // 25: api.commons.org.CommunicationSettings.AutomateResponseRules
	(*CommunicationSettings_AutomateScrubListCallData)(nil),                    // 26: api.commons.org.CommunicationSettings.AutomateScrubListCallData
	(*CommunicationSettings_AutomateScrubListCallData_ScrubListDataField)(nil), // 27: api.commons.org.CommunicationSettings.AutomateScrubListCallData.ScrubListDataField
	(*CallbackSettings_DefaultRouting)(nil),                                    // 28: api.commons.org.CallbackSettings.DefaultRouting
	(*CallbackSettings_CallbackRoutingDisallowed)(nil),                         // 29: api.commons.org.CallbackSettings.CallbackRoutingDisallowed
	(*ManualDialSettings_ScrubOverride)(nil),                                   // 30: api.commons.org.ManualDialSettings.ScrubOverride
	(*ManualDialSettings_DefaultCallerId)(nil),                                 // 31: api.commons.org.ManualDialSettings.DefaultCallerId
	(*ManualDialSettings_DataDipIntegrationMapping)(nil),                       // 32: api.commons.org.ManualDialSettings.DataDipIntegrationMapping
	(*TransferCallSettings_HandOffTypes)(nil),                                  // 33: api.commons.org.TransferCallSettings.HandOffTypes
	(*TransferCallSettings_TransferTypes)(nil),                                 // 34: api.commons.org.TransferCallSettings.TransferTypes
	(*TransferCallSettings_RequeueTransferDisallowed)(nil),                     // 35: api.commons.org.TransferCallSettings.RequeueTransferDisallowed
	(*TransferCallSettings_PbxTransferDisallowed)(nil),                         // 36: api.commons.org.TransferCallSettings.PbxTransferDisallowed
	(*TransferCallSettings_RequeueQueueConfiguration)(nil),                     // 37: api.commons.org.TransferCallSettings.RequeueQueueConfiguration
	(*TransferCallSettings_DefaultCallerId)(nil),                               // 38: api.commons.org.TransferCallSettings.DefaultCallerId
	(commons.InitialAgentStatus)(0),                                            // 39: api.commons.InitialAgentStatus
	(commons.AgentCallHistoryScope)(0),                                         // 40: api.commons.AgentCallHistoryScope
	(commons.Country)(0),                                                       // 41: api.commons.Country
	(commons.HuntGroupOrgDefaultCustom)(0),                                     // 42: api.commons.HuntGroupOrgDefaultCustom
	(commons.ManualDialTimeZoneValidation)(0),                                  // 43: api.commons.ManualDialTimeZoneValidation
	(commons.ManualDialDataDipScope)(0),                                        // 44: api.commons.ManualDialDataDipScope
	(commons.ManualDialDataDipHandling)(0),                                     // 45: api.commons.ManualDialDataDipHandling
	(commons.TransferRecordingStatus)(0),                                       // 46: api.commons.TransferRecordingStatus
	(commons.AgentRouting)(0),                                                  // 47: api.commons.AgentRouting
	(commons.PhonePostalDisplayOptions)(0),                                     // 48: api.commons.PhonePostalDisplayOptions
	(commons.AlphanumericKeypadDelimiter)(0),                                   // 49: api.commons.AlphanumericKeypadDelimiter
	(commons.CommunicationExpiration)(0),                                       // 50: api.commons.CommunicationExpiration
	(commons.DefaultCallbackRouting)(0),                                        // 51: api.commons.DefaultCallbackRouting
	(commons.DefaultManualDialCallerId)(0),                                     // 52: api.commons.DefaultManualDialCallerId
	(commons.ManualDialDataDipIntegration)(0),                                  // 53: api.commons.ManualDialDataDipIntegration
	(commons.RequeueTransferQueueConfig)(0),                                    // 54: api.commons.RequeueTransferQueueConfig
	(commons.DefaultTransferCallerId)(0),                                       // 55: api.commons.DefaultTransferCallerId
}
var file_api_commons_org_huntgroup_proto_depIdxs = []int32{
	1,  // 0: api.commons.org.HuntGroupSettings.general_settings:type_name -> api.commons.org.GeneralSettings
	2,  // 1: api.commons.org.HuntGroupSettings.communication_settings:type_name -> api.commons.org.CommunicationSettings
	3,  // 2: api.commons.org.HuntGroupSettings.callback_settings:type_name -> api.commons.org.CallbackSettings
	4,  // 3: api.commons.org.HuntGroupSettings.preview_dial_settings:type_name -> api.commons.org.PreviewDialSettings
	5,  // 4: api.commons.org.HuntGroupSettings.manual_dial_settings:type_name -> api.commons.org.ManualDialSettings
	9,  // 5: api.commons.org.HuntGroupSettings.transfer_call_settings:type_name -> api.commons.org.TransferCallSettings
	10, // 6: api.commons.org.HuntGroupSettings.number_history_settings:type_name -> api.commons.org.NumberHistorySettings
	39, // 7: api.commons.org.GeneralSettings.initial_agent_status:type_name -> api.commons.InitialAgentStatus
	14, // 8: api.commons.org.GeneralSettings.agent_pause_option_set:type_name -> api.commons.org.GeneralSettings.PauseOptionSet
	15, // 9: api.commons.org.GeneralSettings.hold_queue_monitoring:type_name -> api.commons.org.GeneralSettings.HoldQueueMonitoring
	16, // 10: api.commons.org.GeneralSettings.display_data_dipped_data:type_name -> api.commons.org.GeneralSettings.DataDipDataDisplay
	17, // 11: api.commons.org.GeneralSettings.integration_data_display:type_name -> api.commons.org.GeneralSettings.IntegrationDataDisplay
	18, // 12: api.commons.org.GeneralSettings.journey_data_display:type_name -> api.commons.org.GeneralSettings.JourneyDataDisplay
	40, // 13: api.commons.org.GeneralSettings.agent_call_history_scope:type_name -> api.commons.AgentCallHistoryScope
	19, // 14: api.commons.org.GeneralSettings.agent_login_gui_statistics_display:type_name -> api.commons.org.GeneralSettings.AgentLoginGuiStatisticsDisplay
	20, // 15: api.commons.org.GeneralSettings.phone_zip_metadata_display:type_name -> api.commons.org.GeneralSettings.PhoneZipMetadataDisplay
	21, // 16: api.commons.org.GeneralSettings.disallowed_hunt_groups:type_name -> api.commons.org.GeneralSettings.DisallowedHuntGroups
	22, // 17: api.commons.org.GeneralSettings.alphanumeric_keypad:type_name -> api.commons.org.GeneralSettings.AlphanumericKeypad
	23, // 18: api.commons.org.GeneralSettings.inbound_compliance_metadata:type_name -> api.commons.org.GeneralSettings.InboundComplianceMetadata
	41, // 19: api.commons.org.CommunicationSettings.compliance_default_country:type_name -> api.commons.Country
	24, // 20: api.commons.org.CommunicationSettings.inbound_scrub_list_expiration:type_name -> api.commons.org.CommunicationSettings.ScrubListExpiration
	24, // 21: api.commons.org.CommunicationSettings.manual_scrub_list_expiration:type_name -> api.commons.org.CommunicationSettings.ScrubListExpiration
	24, // 22: api.commons.org.CommunicationSettings.outbound_scrub_list_expiration:type_name -> api.commons.org.CommunicationSettings.ScrubListExpiration
	24, // 23: api.commons.org.CommunicationSettings.preview_scrub_list_expiration:type_name -> api.commons.org.CommunicationSettings.ScrubListExpiration
	25, // 24: api.commons.org.CommunicationSettings.automate_response_rules:type_name -> api.commons.org.CommunicationSettings.AutomateResponseRules
	26, // 25: api.commons.org.CommunicationSettings.automate_scrub_list_call_data:type_name -> api.commons.org.CommunicationSettings.AutomateScrubListCallData
	28, // 26: api.commons.org.CallbackSettings.default_callback_routing:type_name -> api.commons.org.CallbackSettings.DefaultRouting
	29, // 27: api.commons.org.CallbackSettings.callback_routing_disallowed:type_name -> api.commons.org.CallbackSettings.CallbackRoutingDisallowed
	42, // 28: api.commons.org.ManualDialSettings.default_call_recording:type_name -> api.commons.HuntGroupOrgDefaultCustom
	42, // 29: api.commons.org.ManualDialSettings.cell_phone_scrub:type_name -> api.commons.HuntGroupOrgDefaultCustom
	42, // 30: api.commons.org.ManualDialSettings.time_zone_restriction:type_name -> api.commons.HuntGroupOrgDefaultCustom
	43, // 31: api.commons.org.ManualDialSettings.time_zone_validation_postal_code:type_name -> api.commons.ManualDialTimeZoneValidation
	6,  // 32: api.commons.org.ManualDialSettings.natural_compliance_scrub:type_name -> api.commons.org.NaturalLanguageComplianceScrub
	30, // 33: api.commons.org.ManualDialSettings.scrub_override:type_name -> api.commons.org.ManualDialSettings.ScrubOverride
	41, // 34: api.commons.org.ManualDialSettings.default_outbound_country:type_name -> api.commons.Country
	41, // 35: api.commons.org.ManualDialSettings.default_caller_id_country:type_name -> api.commons.Country
	31, // 36: api.commons.org.ManualDialSettings.default_caller_id:type_name -> api.commons.org.ManualDialSettings.DefaultCallerId
	7,  // 37: api.commons.org.ManualDialSettings.natural_language_compliance_metadata:type_name -> api.commons.org.NaturalLanguageComplianceMetadata
	44, // 38: api.commons.org.ManualDialSettings.data_dip_scope:type_name -> api.commons.ManualDialDataDipScope
	45, // 39: api.commons.org.ManualDialSettings.data_dip_result_handling:type_name -> api.commons.ManualDialDataDipHandling
	32, // 40: api.commons.org.ManualDialSettings.data_dip_integration_mappings:type_name -> api.commons.org.ManualDialSettings.DataDipIntegrationMapping
	45, // 41: api.commons.org.ManualDialSettings.data_dip_integration_handling:type_name -> api.commons.ManualDialDataDipHandling
	42, // 42: api.commons.org.NaturalLanguageComplianceScrub.compliance_scrub:type_name -> api.commons.HuntGroupOrgDefaultCustom
	33, // 43: api.commons.org.TransferCallSettings.hand_off_types:type_name -> api.commons.org.TransferCallSettings.HandOffTypes
	46, // 44: api.commons.org.TransferCallSettings.recording_status:type_name -> api.commons.TransferRecordingStatus
	34, // 45: api.commons.org.TransferCallSettings.transfer_types:type_name -> api.commons.org.TransferCallSettings.TransferTypes
	41, // 46: api.commons.org.TransferCallSettings.transfer_number_country:type_name -> api.commons.Country
	38, // 47: api.commons.org.TransferCallSettings.default_caller_id:type_name -> api.commons.org.TransferCallSettings.DefaultCallerId
	41, // 48: api.commons.org.TransferCallSettings.caller_id_country:type_name -> api.commons.Country
	37, // 49: api.commons.org.TransferCallSettings.requeue_queue_config:type_name -> api.commons.org.TransferCallSettings.RequeueQueueConfiguration
	35, // 50: api.commons.org.TransferCallSettings.requeue_transfer_disallowed:type_name -> api.commons.org.TransferCallSettings.RequeueTransferDisallowed
	36, // 51: api.commons.org.TransferCallSettings.pbx_transfer_disallowed:type_name -> api.commons.org.TransferCallSettings.PbxTransferDisallowed
	6,  // 52: api.commons.org.TransferCallSettings.natural_compliance_scrub:type_name -> api.commons.org.NaturalLanguageComplianceScrub
	7,  // 53: api.commons.org.TransferCallSettings.natural_language_compliance_metadata:type_name -> api.commons.org.NaturalLanguageComplianceMetadata
	41, // 54: api.commons.org.AgentResponseAutoRuleSet.country:type_name -> api.commons.Country
	12, // 55: api.commons.org.AgentResponseAutoRuleSet.responses:type_name -> api.commons.org.AutoResponseChoice
	13, // 56: api.commons.org.AutoResponseChoice.comparitors:type_name -> api.commons.org.AgentResponseComparitors
	47, // 57: api.commons.org.GeneralSettings.HoldQueueMonitoring.agent_routing:type_name -> api.commons.AgentRouting
	48, // 58: api.commons.org.GeneralSettings.PhoneZipMetadataDisplay.phone_zip_metadata_keys:type_name -> api.commons.PhonePostalDisplayOptions
	49, // 59: api.commons.org.GeneralSettings.AlphanumericKeypad.delimiter:type_name -> api.commons.AlphanumericKeypadDelimiter
	50, // 60: api.commons.org.CommunicationSettings.ScrubListExpiration.default_expiration:type_name -> api.commons.CommunicationExpiration
	50, // 61: api.commons.org.CommunicationSettings.ScrubListExpiration.limited_expirations:type_name -> api.commons.CommunicationExpiration
	27, // 62: api.commons.org.CommunicationSettings.AutomateScrubListCallData.scrub_list_data_fields:type_name -> api.commons.org.CommunicationSettings.AutomateScrubListCallData.ScrubListDataField
	51, // 63: api.commons.org.CallbackSettings.DefaultRouting.routing_mode:type_name -> api.commons.DefaultCallbackRouting
	52, // 64: api.commons.org.ManualDialSettings.DefaultCallerId.usage:type_name -> api.commons.DefaultManualDialCallerId
	53, // 65: api.commons.org.ManualDialSettings.DataDipIntegrationMapping.mapping_type:type_name -> api.commons.ManualDialDataDipIntegration
	54, // 66: api.commons.org.TransferCallSettings.RequeueQueueConfiguration.usage:type_name -> api.commons.RequeueTransferQueueConfig
	55, // 67: api.commons.org.TransferCallSettings.DefaultCallerId.usage:type_name -> api.commons.DefaultTransferCallerId
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_api_commons_org_huntgroup_proto_init() }
func file_api_commons_org_huntgroup_proto_init() {
	if File_api_commons_org_huntgroup_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_commons_org_huntgroup_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuntGroupSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewDialSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualDialSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaturalLanguageComplianceScrub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaturalLanguageComplianceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallerIdBucketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCallSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberHistorySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentResponseAutoRuleSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoResponseChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentResponseComparitors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSettings_PauseOptionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSettings_HoldQueueMonitoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSettings_DataDipDataDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSettings_IntegrationDataDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSettings_JourneyDataDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSettings_AgentLoginGuiStatisticsDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSettings_PhoneZipMetadataDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSettings_DisallowedHuntGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSettings_AlphanumericKeypad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralSettings_InboundComplianceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationSettings_ScrubListExpiration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationSettings_AutomateResponseRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationSettings_AutomateScrubListCallData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationSettings_AutomateScrubListCallData_ScrubListDataField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackSettings_DefaultRouting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackSettings_CallbackRoutingDisallowed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualDialSettings_ScrubOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualDialSettings_DefaultCallerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualDialSettings_DataDipIntegrationMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCallSettings_HandOffTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCallSettings_TransferTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCallSettings_RequeueTransferDisallowed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCallSettings_PbxTransferDisallowed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCallSettings_RequeueQueueConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_huntgroup_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCallSettings_DefaultCallerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_org_huntgroup_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_org_huntgroup_proto_goTypes,
		DependencyIndexes: file_api_commons_org_huntgroup_proto_depIdxs,
		MessageInfos:      file_api_commons_org_huntgroup_proto_msgTypes,
	}.Build()
	File_api_commons_org_huntgroup_proto = out.File
	file_api_commons_org_huntgroup_proto_rawDesc = nil
	file_api_commons_org_huntgroup_proto_goTypes = nil
	file_api_commons_org_huntgroup_proto_depIdxs = nil
}
