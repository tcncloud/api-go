// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        (unknown)
// source: api/commons/org/user.proto

package org

import (
	commons "github.com/tcncloud/api-go/api/commons"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// User represents a user of the system.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The ID of the org the user belongs to.
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The Username of the user.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// The ID of the p3 permission group the user has.
	P3PermissionGroupId string `protobuf:"bytes,4,opt,name=p3_permission_group_id,json=p3PermissionGroupId,proto3" json:"p3_permission_group_id,omitempty"`
	// The p3 login sid of the user.
	// This is going to be deprecated, RegionSidMap should be used.
	LoginSid int64 `protobuf:"varint,5,opt,name=login_sid,json=loginSid,proto3" json:"login_sid,omitempty"`
	// The p3 agent sid of the user.
	// This is going to be deprecated, RegionSidMap should be used.
	AgentSid int64 `protobuf:"varint,6,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	// The region the user belongs to.
	// This is going to be deprecated, RegionSidMap should be used.
	RegionId string `protobuf:"bytes,7,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// The User's partner agent id.
	PartnerAgentId string `protobuf:"bytes,8,opt,name=partner_agent_id,json=partnerAgentId,proto3" json:"partner_agent_id,omitempty"`
	// The p3 client sid of the user.
	ClientSid int64 `protobuf:"varint,11,opt,name=client_sid,json=clientSid,proto3" json:"client_sid,omitempty"`
	// The user's regional sids. The key of the map is a region id.
	RegionSidMap map[string]*User_RegionSids `protobuf:"bytes,15,rep,name=region_sid_map,json=regionSidMap,proto3" json:"region_sid_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// payload
	ApiKey string `protobuf:"bytes,101,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// The User's email.
	Email string `protobuf:"bytes,104,opt,name=email,proto3" json:"email,omitempty"`
	// Whether or not the user is disabled.
	LoginDisabled bool `protobuf:"varint,112,opt,name=login_disabled,json=loginDisabled,proto3" json:"login_disabled,omitempty"`
	// login preferences
	CallerIds       []string `protobuf:"bytes,115,rep,name=caller_ids,json=callerIds,proto3" json:"caller_ids,omitempty"`
	LinkbackNumbers []string `protobuf:"bytes,116,rep,name=linkback_numbers,json=linkbackNumbers,proto3" json:"linkback_numbers,omitempty"`
	AuthUserId      string   `protobuf:"bytes,118,opt,name=auth_user_id,json=authUserId,proto3" json:"auth_user_id,omitempty"`
	EnableMfa       bool     `protobuf:"varint,123,opt,name=enable_mfa,json=enableMfa,proto3" json:"enable_mfa,omitempty"`
	// The user's first name.
	FirstName string `protobuf:"bytes,161,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// THe user's last name.
	LastName string `protobuf:"bytes,162,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// The date/time the user was created.
	Created *timestamppb.Timestamp `protobuf:"bytes,163,opt,name=created,proto3" json:"created,omitempty"`
	// The date/time the user was last updated.
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,164,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Whether or not the user must reset their password on next login.
	PasswordResetRequired bool `protobuf:"varint,165,opt,name=password_reset_required,json=passwordResetRequired,proto3" json:"password_reset_required,omitempty"`
	// connection id is the id of the auth connection that the
	// user is coming from if it is a delgated user. If the user
	// is not delgated this will be nil.
	ConnectionId *wrapperspb.StringValue `protobuf:"bytes,166,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// User TimeZone with wrapper for nullable timezone
	TimeZoneOverride *commons.TimeZoneWrapper `protobuf:"bytes,167,opt,name=time_zone_override,json=timeZoneOverride,proto3" json:"time_zone_override,omitempty"`
	// UserSettings
	PermissionGroupIds []string `protobuf:"bytes,200,rep,name=permission_group_ids,json=permissionGroupIds,proto3" json:"permission_group_ids,omitempty"`
	// List of trust ids the user has been assigned.
	TrustIds []string `protobuf:"bytes,209,rep,name=trust_ids,json=trustIds,proto3" json:"trust_ids,omitempty"`
	// List of regions for user
	// repeated string regions = 201;
	// region_id of a user entity
	DefaultRegion string `protobuf:"bytes,202,opt,name=default_region,json=defaultRegion,proto3" json:"default_region,omitempty"`
	// default_app for a user
	DefaultApplication commons.OperatorApplications `protobuf:"varint,203,opt,name=default_application,json=defaultApplication,proto3,enum=api.commons.OperatorApplications" json:"default_application,omitempty"`
	// P3 permission for user
	// User caller id
	UserCallerId string `protobuf:"bytes,205,opt,name=user_caller_id,json=userCallerId,proto3" json:"user_caller_id,omitempty"`
	// users assigned agent profile group
	AgentProfileGroupId string `protobuf:"bytes,207,opt,name=agent_profile_group_id,json=agentProfileGroupId,proto3" json:"agent_profile_group_id,omitempty"`
	// The skills this user has as an agent, if any.
	Skills []*Skill `protobuf:"bytes,208,rep,name=skills,proto3" json:"skills,omitempty"`
	// a bool signalling whether or not the user is also an agent
	Agent bool `protobuf:"varint,300,opt,name=agent,proto3" json:"agent,omitempty"`
	// a bool to determine whether or not user is account owner
	AccountOwner bool `protobuf:"varint,400,opt,name=account_owner,json=accountOwner,proto3" json:"account_owner,omitempty"`
	// Whether or not the user's email is verified.
	EmailVerified bool `protobuf:"varint,401,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified,omitempty"`
	// Whitelisted IPs for the user
	WhitelistedIps []string `protobuf:"bytes,402,rep,name=whitelisted_ips,json=whitelistedIps,proto3" json:"whitelisted_ips,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_api_commons_org_user_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetP3PermissionGroupId() string {
	if x != nil {
		return x.P3PermissionGroupId
	}
	return ""
}

func (x *User) GetLoginSid() int64 {
	if x != nil {
		return x.LoginSid
	}
	return 0
}

func (x *User) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *User) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *User) GetPartnerAgentId() string {
	if x != nil {
		return x.PartnerAgentId
	}
	return ""
}

func (x *User) GetClientSid() int64 {
	if x != nil {
		return x.ClientSid
	}
	return 0
}

func (x *User) GetRegionSidMap() map[string]*User_RegionSids {
	if x != nil {
		return x.RegionSidMap
	}
	return nil
}

func (x *User) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetLoginDisabled() bool {
	if x != nil {
		return x.LoginDisabled
	}
	return false
}

func (x *User) GetCallerIds() []string {
	if x != nil {
		return x.CallerIds
	}
	return nil
}

func (x *User) GetLinkbackNumbers() []string {
	if x != nil {
		return x.LinkbackNumbers
	}
	return nil
}

func (x *User) GetAuthUserId() string {
	if x != nil {
		return x.AuthUserId
	}
	return ""
}

func (x *User) GetEnableMfa() bool {
	if x != nil {
		return x.EnableMfa
	}
	return false
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *User) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *User) GetPasswordResetRequired() bool {
	if x != nil {
		return x.PasswordResetRequired
	}
	return false
}

func (x *User) GetConnectionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ConnectionId
	}
	return nil
}

func (x *User) GetTimeZoneOverride() *commons.TimeZoneWrapper {
	if x != nil {
		return x.TimeZoneOverride
	}
	return nil
}

func (x *User) GetPermissionGroupIds() []string {
	if x != nil {
		return x.PermissionGroupIds
	}
	return nil
}

func (x *User) GetTrustIds() []string {
	if x != nil {
		return x.TrustIds
	}
	return nil
}

func (x *User) GetDefaultRegion() string {
	if x != nil {
		return x.DefaultRegion
	}
	return ""
}

func (x *User) GetDefaultApplication() commons.OperatorApplications {
	if x != nil {
		return x.DefaultApplication
	}
	return commons.OperatorApplications(0)
}

func (x *User) GetUserCallerId() string {
	if x != nil {
		return x.UserCallerId
	}
	return ""
}

func (x *User) GetAgentProfileGroupId() string {
	if x != nil {
		return x.AgentProfileGroupId
	}
	return ""
}

func (x *User) GetSkills() []*Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *User) GetAgent() bool {
	if x != nil {
		return x.Agent
	}
	return false
}

func (x *User) GetAccountOwner() bool {
	if x != nil {
		return x.AccountOwner
	}
	return false
}

func (x *User) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *User) GetWhitelistedIps() []string {
	if x != nil {
		return x.WhitelistedIps
	}
	return nil
}

// MFA/2FA Information
type MfaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The org the user belongs to.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The user that the MFA info belongs to.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Whether or not MFA is enabled for the user.
	MfaEnabled bool `protobuf:"varint,3,opt,name=mfa_enabled,json=mfaEnabled,proto3" json:"mfa_enabled,omitempty"`
	// Types that are assignable to MfaType:
	//
	//	*MfaInfo_None
	//	*MfaInfo_Otp
	//	*MfaInfo_Duo_
	MfaType isMfaInfo_MfaType `protobuf_oneof:"mfa_type"`
}

func (x *MfaInfo) Reset() {
	*x = MfaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MfaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MfaInfo) ProtoMessage() {}

func (x *MfaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MfaInfo.ProtoReflect.Descriptor instead.
func (*MfaInfo) Descriptor() ([]byte, []int) {
	return file_api_commons_org_user_proto_rawDescGZIP(), []int{1}
}

func (x *MfaInfo) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *MfaInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MfaInfo) GetMfaEnabled() bool {
	if x != nil {
		return x.MfaEnabled
	}
	return false
}

func (m *MfaInfo) GetMfaType() isMfaInfo_MfaType {
	if m != nil {
		return m.MfaType
	}
	return nil
}

func (x *MfaInfo) GetNone() *MfaInfo_NoneSelected {
	if x, ok := x.GetMfaType().(*MfaInfo_None); ok {
		return x.None
	}
	return nil
}

func (x *MfaInfo) GetOtp() *MfaInfo_OtpType {
	if x, ok := x.GetMfaType().(*MfaInfo_Otp); ok {
		return x.Otp
	}
	return nil
}

func (x *MfaInfo) GetDuo() *MfaInfo_Duo {
	if x, ok := x.GetMfaType().(*MfaInfo_Duo_); ok {
		return x.Duo
	}
	return nil
}

type isMfaInfo_MfaType interface {
	isMfaInfo_MfaType()
}

type MfaInfo_None struct {
	None *MfaInfo_NoneSelected `protobuf:"bytes,10,opt,name=none,proto3,oneof"`
}

type MfaInfo_Otp struct {
	Otp *MfaInfo_OtpType `protobuf:"bytes,11,opt,name=otp,proto3,oneof"`
}

type MfaInfo_Duo_ struct {
	Duo *MfaInfo_Duo `protobuf:"bytes,12,opt,name=duo,proto3,oneof"`
}

func (*MfaInfo_None) isMfaInfo_MfaType() {}

func (*MfaInfo_Otp) isMfaInfo_MfaType() {}

func (*MfaInfo_Duo_) isMfaInfo_MfaType() {}

// Agent skill
type Skill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level       int64  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	SkillSid    int64  `protobuf:"varint,4,opt,name=skill_sid,json=skillSid,proto3" json:"skill_sid,omitempty"`
}

func (x *Skill) Reset() {
	*x = Skill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skill) ProtoMessage() {}

func (x *Skill) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skill.ProtoReflect.Descriptor instead.
func (*Skill) Descriptor() ([]byte, []int) {
	return file_api_commons_org_user_proto_rawDescGZIP(), []int{2}
}

func (x *Skill) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Skill) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Skill) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Skill) GetSkillSid() int64 {
	if x != nil {
		return x.SkillSid
	}
	return 0
}

// PasswordResetLink defines a link for the given user to reset their password.
type PasswordResetLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkId     string                 `protobuf:"bytes,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	UserId     string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrgId      string                 `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Expiration *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *PasswordResetLink) Reset() {
	*x = PasswordResetLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordResetLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordResetLink) ProtoMessage() {}

func (x *PasswordResetLink) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordResetLink.ProtoReflect.Descriptor instead.
func (*PasswordResetLink) Descriptor() ([]byte, []int) {
	return file_api_commons_org_user_proto_rawDescGZIP(), []int{3}
}

func (x *PasswordResetLink) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

func (x *PasswordResetLink) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PasswordResetLink) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *PasswordResetLink) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

// The entity object used in the region_sid_map.
type User_RegionSids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The login sid for the region.
	LoginSid int64 `protobuf:"varint,1,opt,name=login_sid,json=loginSid,proto3" json:"login_sid,omitempty"`
	// THe agent sid for the region.
	AgentSid int64 `protobuf:"varint,2,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	// THe client sid for the region.
	ClientSid int64 `protobuf:"varint,3,opt,name=client_sid,json=clientSid,proto3" json:"client_sid,omitempty"`
}

func (x *User_RegionSids) Reset() {
	*x = User_RegionSids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_RegionSids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_RegionSids) ProtoMessage() {}

func (x *User_RegionSids) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_RegionSids.ProtoReflect.Descriptor instead.
func (*User_RegionSids) Descriptor() ([]byte, []int) {
	return file_api_commons_org_user_proto_rawDescGZIP(), []int{0, 1}
}

func (x *User_RegionSids) GetLoginSid() int64 {
	if x != nil {
		return x.LoginSid
	}
	return 0
}

func (x *User_RegionSids) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *User_RegionSids) GetClientSid() int64 {
	if x != nil {
		return x.ClientSid
	}
	return 0
}

type MfaInfo_NoneSelected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time by wich the user must setup MFA
	// to avoid being locked out.
	Timeout *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *MfaInfo_NoneSelected) Reset() {
	*x = MfaInfo_NoneSelected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MfaInfo_NoneSelected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MfaInfo_NoneSelected) ProtoMessage() {}

func (x *MfaInfo_NoneSelected) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MfaInfo_NoneSelected.ProtoReflect.Descriptor instead.
func (*MfaInfo_NoneSelected) Descriptor() ([]byte, []int) {
	return file_api_commons_org_user_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MfaInfo_NoneSelected) GetTimeout() *timestamppb.Timestamp {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type MfaInfo_OtpType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DeliveryMethod:
	//
	//	*MfaInfo_OtpType_Email
	DeliveryMethod isMfaInfo_OtpType_DeliveryMethod `protobuf_oneof:"delivery_method"`
}

func (x *MfaInfo_OtpType) Reset() {
	*x = MfaInfo_OtpType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MfaInfo_OtpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MfaInfo_OtpType) ProtoMessage() {}

func (x *MfaInfo_OtpType) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MfaInfo_OtpType.ProtoReflect.Descriptor instead.
func (*MfaInfo_OtpType) Descriptor() ([]byte, []int) {
	return file_api_commons_org_user_proto_rawDescGZIP(), []int{1, 1}
}

func (m *MfaInfo_OtpType) GetDeliveryMethod() isMfaInfo_OtpType_DeliveryMethod {
	if m != nil {
		return m.DeliveryMethod
	}
	return nil
}

func (x *MfaInfo_OtpType) GetEmail() *MfaInfo_OtpType_EmailDeliveryMethod {
	if x, ok := x.GetDeliveryMethod().(*MfaInfo_OtpType_Email); ok {
		return x.Email
	}
	return nil
}

type isMfaInfo_OtpType_DeliveryMethod interface {
	isMfaInfo_OtpType_DeliveryMethod()
}

type MfaInfo_OtpType_Email struct {
	Email *MfaInfo_OtpType_EmailDeliveryMethod `protobuf:"bytes,1,opt,name=email,proto3,oneof"`
}

func (*MfaInfo_OtpType_Email) isMfaInfo_OtpType_DeliveryMethod() {}

type MfaInfo_Duo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DuoUsername string `protobuf:"bytes,1,opt,name=duo_username,json=duoUsername,proto3" json:"duo_username,omitempty"`
}

func (x *MfaInfo_Duo) Reset() {
	*x = MfaInfo_Duo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MfaInfo_Duo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MfaInfo_Duo) ProtoMessage() {}

func (x *MfaInfo_Duo) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MfaInfo_Duo.ProtoReflect.Descriptor instead.
func (*MfaInfo_Duo) Descriptor() ([]byte, []int) {
	return file_api_commons_org_user_proto_rawDescGZIP(), []int{1, 2}
}

func (x *MfaInfo_Duo) GetDuoUsername() string {
	if x != nil {
		return x.DuoUsername
	}
	return ""
}

type MfaInfo_OtpType_EmailDeliveryMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MfaInfo_OtpType_EmailDeliveryMethod) Reset() {
	*x = MfaInfo_OtpType_EmailDeliveryMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_org_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MfaInfo_OtpType_EmailDeliveryMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MfaInfo_OtpType_EmailDeliveryMethod) ProtoMessage() {}

func (x *MfaInfo_OtpType_EmailDeliveryMethod) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_org_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MfaInfo_OtpType_EmailDeliveryMethod.ProtoReflect.Descriptor instead.
func (*MfaInfo_OtpType_EmailDeliveryMethod) Descriptor() ([]byte, []int) {
	return file_api_commons_org_user_proto_rawDescGZIP(), []int{1, 1, 0}
}

var File_api_commons_org_user_proto protoreflect.FileDescriptor

var file_api_commons_org_user_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72,
	0x67, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x1a, 0x15, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x0d, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x33,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x33, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12,
	0x4d, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x17,
	0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x73, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x74, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x69, 0x6e, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x76,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x66, 0x61, 0x18, 0x7b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x66, 0x61, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa1, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa2, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x17, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0xa5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x42, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xa6,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x4b, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x10, 0x74, 0x69,
	0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x31,
	0x0a, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xd1,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xcb,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xcd,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0xcf, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0xd0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x70, 0x73, 0x18, 0x92, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x49, 0x70, 0x73, 0x1a, 0x61, 0x0a, 0x11, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a, 0x0a,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x64, 0x22, 0xff, 0x03, 0x0a, 0x07, 0x4d, 0x66, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x66, 0x61, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x66, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x4d, 0x66, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x34, 0x0a,
	0x03, 0x6f, 0x74, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4d, 0x66, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x03,
	0x6f, 0x74, 0x70, 0x12, 0x30, 0x0a, 0x03, 0x64, 0x75, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x4d, 0x66, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x75, 0x6f, 0x48, 0x00,
	0x52, 0x03, 0x64, 0x75, 0x6f, 0x1a, 0x44, 0x0a, 0x0c, 0x4e, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x81, 0x01, 0x0a, 0x07,
	0x4f, 0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4d, 0x66, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x4f, 0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x15, 0x0a, 0x13, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x11, 0x0a, 0x0f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a,
	0x28, 0x0a, 0x03, 0x44, 0x75, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6f, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x66, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x70, 0x0a, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0xaa, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x67, 0x42, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x6f, 0x72, 0x67, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x4f, 0xaa, 0x02, 0x0f, 0x41, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0xca, 0x02, 0x0f, 0x41, 0x70,
	0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x4f, 0x72, 0x67, 0xe2, 0x02, 0x1b,
	0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x4f, 0x72, 0x67, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x41, 0x70,
	0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x3a, 0x3a, 0x4f, 0x72, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_org_user_proto_rawDescOnce sync.Once
	file_api_commons_org_user_proto_rawDescData = file_api_commons_org_user_proto_rawDesc
)

func file_api_commons_org_user_proto_rawDescGZIP() []byte {
	file_api_commons_org_user_proto_rawDescOnce.Do(func() {
		file_api_commons_org_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_org_user_proto_rawDescData)
	})
	return file_api_commons_org_user_proto_rawDescData
}

var file_api_commons_org_user_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_commons_org_user_proto_goTypes = []interface{}{
	(*User)(nil),                 // 0: api.commons.org.User
	(*MfaInfo)(nil),              // 1: api.commons.org.MfaInfo
	(*Skill)(nil),                // 2: api.commons.org.Skill
	(*PasswordResetLink)(nil),    // 3: api.commons.org.PasswordResetLink
	nil,                          // 4: api.commons.org.User.RegionSidMapEntry
	(*User_RegionSids)(nil),      // 5: api.commons.org.User.RegionSids
	(*MfaInfo_NoneSelected)(nil), // 6: api.commons.org.MfaInfo.NoneSelected
	(*MfaInfo_OtpType)(nil),      // 7: api.commons.org.MfaInfo.OtpType
	(*MfaInfo_Duo)(nil),          // 8: api.commons.org.MfaInfo.Duo
	(*MfaInfo_OtpType_EmailDeliveryMethod)(nil), // 9: api.commons.org.MfaInfo.OtpType.EmailDeliveryMethod
	(*timestamppb.Timestamp)(nil),               // 10: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),              // 11: google.protobuf.StringValue
	(*commons.TimeZoneWrapper)(nil),             // 12: api.commons.TimeZoneWrapper
	(commons.OperatorApplications)(0),           // 13: api.commons.OperatorApplications
}
var file_api_commons_org_user_proto_depIdxs = []int32{
	4,  // 0: api.commons.org.User.region_sid_map:type_name -> api.commons.org.User.RegionSidMapEntry
	10, // 1: api.commons.org.User.created:type_name -> google.protobuf.Timestamp
	10, // 2: api.commons.org.User.last_updated:type_name -> google.protobuf.Timestamp
	11, // 3: api.commons.org.User.connection_id:type_name -> google.protobuf.StringValue
	12, // 4: api.commons.org.User.time_zone_override:type_name -> api.commons.TimeZoneWrapper
	13, // 5: api.commons.org.User.default_application:type_name -> api.commons.OperatorApplications
	2,  // 6: api.commons.org.User.skills:type_name -> api.commons.org.Skill
	6,  // 7: api.commons.org.MfaInfo.none:type_name -> api.commons.org.MfaInfo.NoneSelected
	7,  // 8: api.commons.org.MfaInfo.otp:type_name -> api.commons.org.MfaInfo.OtpType
	8,  // 9: api.commons.org.MfaInfo.duo:type_name -> api.commons.org.MfaInfo.Duo
	10, // 10: api.commons.org.PasswordResetLink.expiration:type_name -> google.protobuf.Timestamp
	5,  // 11: api.commons.org.User.RegionSidMapEntry.value:type_name -> api.commons.org.User.RegionSids
	10, // 12: api.commons.org.MfaInfo.NoneSelected.timeout:type_name -> google.protobuf.Timestamp
	9,  // 13: api.commons.org.MfaInfo.OtpType.email:type_name -> api.commons.org.MfaInfo.OtpType.EmailDeliveryMethod
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_api_commons_org_user_proto_init() }
func file_api_commons_org_user_proto_init() {
	if File_api_commons_org_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_commons_org_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MfaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordResetLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_RegionSids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MfaInfo_NoneSelected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MfaInfo_OtpType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MfaInfo_Duo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_org_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MfaInfo_OtpType_EmailDeliveryMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_commons_org_user_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MfaInfo_None)(nil),
		(*MfaInfo_Otp)(nil),
		(*MfaInfo_Duo_)(nil),
	}
	file_api_commons_org_user_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*MfaInfo_OtpType_Email)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_org_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_org_user_proto_goTypes,
		DependencyIndexes: file_api_commons_org_user_proto_depIdxs,
		MessageInfos:      file_api_commons_org_user_proto_msgTypes,
	}.Build()
	File_api_commons_org_user_proto = out.File
	file_api_commons_org_user_proto_rawDesc = nil
	file_api_commons_org_user_proto_goTypes = nil
	file_api_commons_org_user_proto_depIdxs = nil
}
