// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: api/commons/workflows/test_bot.proto

package workflows

import (
	auth "github.com/tcncloud/api-go/api/commons/auth"
	v0alpha "github.com/tcncloud/api-go/api/v0alpha"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TestBotTestStepType represents the type of test step.
type TestBotTestStepType int32

const (
	TestBotTestStepType_TEST_BOT_TEST_STEP_TYPE_UNSPECIFIED TestBotTestStepType = 0
	// OMNICHANNEL
	TestBotTestStepType_TEST_BOT_TEST_STEP_TYPE_OMNICHANNEL_CREATE_PROJECT TestBotTestStepType = 1000
	TestBotTestStepType_TEST_BOT_TEST_STEP_TYPE_OMNICHANNEL_GET_PROJECT    TestBotTestStepType = 1001
)

// Enum value maps for TestBotTestStepType.
var (
	TestBotTestStepType_name = map[int32]string{
		0:    "TEST_BOT_TEST_STEP_TYPE_UNSPECIFIED",
		1000: "TEST_BOT_TEST_STEP_TYPE_OMNICHANNEL_CREATE_PROJECT",
		1001: "TEST_BOT_TEST_STEP_TYPE_OMNICHANNEL_GET_PROJECT",
	}
	TestBotTestStepType_value = map[string]int32{
		"TEST_BOT_TEST_STEP_TYPE_UNSPECIFIED":                0,
		"TEST_BOT_TEST_STEP_TYPE_OMNICHANNEL_CREATE_PROJECT": 1000,
		"TEST_BOT_TEST_STEP_TYPE_OMNICHANNEL_GET_PROJECT":    1001,
	}
)

func (x TestBotTestStepType) Enum() *TestBotTestStepType {
	p := new(TestBotTestStepType)
	*p = x
	return p
}

func (x TestBotTestStepType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestBotTestStepType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_workflows_test_bot_proto_enumTypes[0].Descriptor()
}

func (TestBotTestStepType) Type() protoreflect.EnumType {
	return &file_api_commons_workflows_test_bot_proto_enumTypes[0]
}

func (x TestBotTestStepType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestBotTestStepType.Descriptor instead.
func (TestBotTestStepType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_workflows_test_bot_proto_rawDescGZIP(), []int{0}
}

// TestBotEntityType represents the type of entity.
type TestBotEntityType int32

const (
	TestBotEntityType_TEST_BOT_ENTITY_TYPE_UNSPECIFIED TestBotEntityType = 0
	TestBotEntityType_TEST_BOT_ENTITY_TYPE_USER        TestBotEntityType = 100
	// OMNICHANNEL
	TestBotEntityType_TEST_BOT_ENTITY_TYPE_OMNICHANNEL_PROJECT TestBotEntityType = 300
)

// Enum value maps for TestBotEntityType.
var (
	TestBotEntityType_name = map[int32]string{
		0:   "TEST_BOT_ENTITY_TYPE_UNSPECIFIED",
		100: "TEST_BOT_ENTITY_TYPE_USER",
		300: "TEST_BOT_ENTITY_TYPE_OMNICHANNEL_PROJECT",
	}
	TestBotEntityType_value = map[string]int32{
		"TEST_BOT_ENTITY_TYPE_UNSPECIFIED":         0,
		"TEST_BOT_ENTITY_TYPE_USER":                100,
		"TEST_BOT_ENTITY_TYPE_OMNICHANNEL_PROJECT": 300,
	}
)

func (x TestBotEntityType) Enum() *TestBotEntityType {
	p := new(TestBotEntityType)
	*p = x
	return p
}

func (x TestBotEntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestBotEntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_workflows_test_bot_proto_enumTypes[1].Descriptor()
}

func (TestBotEntityType) Type() protoreflect.EnumType {
	return &file_api_commons_workflows_test_bot_proto_enumTypes[1]
}

func (x TestBotEntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestBotEntityType.Descriptor instead.
func (TestBotEntityType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_workflows_test_bot_proto_rawDescGZIP(), []int{1}
}

// TestBotNodeTestStart represents a start-of-test node.
type TestBotNodeTestStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The entities the test requires to run, where
	// the key is a unique name given to the entity for the
	// sole purpose of this flow.
	Entities map[string]*TestBotEntity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TestBotNodeTestStart) Reset() {
	*x = TestBotNodeTestStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_workflows_test_bot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestBotNodeTestStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestBotNodeTestStart) ProtoMessage() {}

func (x *TestBotNodeTestStart) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_workflows_test_bot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestBotNodeTestStart.ProtoReflect.Descriptor instead.
func (*TestBotNodeTestStart) Descriptor() ([]byte, []int) {
	return file_api_commons_workflows_test_bot_proto_rawDescGZIP(), []int{0}
}

func (x *TestBotNodeTestStart) GetEntities() map[string]*TestBotEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

// TestBotNodeTestStep represents an test-bot test-step node.
type TestBotNodeTestStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether the test should error if the step fails.
	ShouldError bool `protobuf:"varint,1,opt,name=should_error,json=shouldError,proto3" json:"should_error,omitempty"`
	// Required. The type of test step.
	Type TestBotTestStepType `protobuf:"varint,2,opt,name=type,proto3,enum=api.commons.workflows.TestBotTestStepType" json:"type,omitempty"`
	// Optional. The names of the entities to use in the test step.
	// These names must correspond to the names provided in the
	// NodeTestStart message.
	EntityNames []string `protobuf:"bytes,3,rep,name=entity_names,json=entityNames,proto3" json:"entity_names,omitempty"`
}

func (x *TestBotNodeTestStep) Reset() {
	*x = TestBotNodeTestStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_workflows_test_bot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestBotNodeTestStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestBotNodeTestStep) ProtoMessage() {}

func (x *TestBotNodeTestStep) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_workflows_test_bot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestBotNodeTestStep.ProtoReflect.Descriptor instead.
func (*TestBotNodeTestStep) Descriptor() ([]byte, []int) {
	return file_api_commons_workflows_test_bot_proto_rawDescGZIP(), []int{1}
}

func (x *TestBotNodeTestStep) GetShouldError() bool {
	if x != nil {
		return x.ShouldError
	}
	return false
}

func (x *TestBotNodeTestStep) GetType() TestBotTestStepType {
	if x != nil {
		return x.Type
	}
	return TestBotTestStepType_TEST_BOT_TEST_STEP_TYPE_UNSPECIFIED
}

func (x *TestBotNodeTestStep) GetEntityNames() []string {
	if x != nil {
		return x.EntityNames
	}
	return nil
}

// TestBotNodeTestEnd represents an test-bot end-of-test node.
type TestBotNodeTestEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Error message if the test failed.
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TestBotNodeTestEnd) Reset() {
	*x = TestBotNodeTestEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_workflows_test_bot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestBotNodeTestEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestBotNodeTestEnd) ProtoMessage() {}

func (x *TestBotNodeTestEnd) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_workflows_test_bot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestBotNodeTestEnd.ProtoReflect.Descriptor instead.
func (*TestBotNodeTestEnd) Descriptor() ([]byte, []int) {
	return file_api_commons_workflows_test_bot_proto_rawDescGZIP(), []int{2}
}

func (x *TestBotNodeTestEnd) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// TestBotEntity represents an entity that is required for the test.
type TestBotEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The entity type.
	Type TestBotEntityType `protobuf:"varint,1,opt,name=type,proto3,enum=api.commons.workflows.TestBotEntityType" json:"type,omitempty"`
	// Optional. Whether the entity is "atomic." An atomic entity
	// is one that can only be used by one test at any given time.
	Atomic bool `protobuf:"varint,2,opt,name=atomic,proto3" json:"atomic,omitempty"`
	// Required. The entity value.
	//
	// Types that are assignable to Data:
	//
	//	*TestBotEntity_User
	//	*TestBotEntity_OmnichannelProject
	Data isTestBotEntity_Data `protobuf_oneof:"data"`
}

func (x *TestBotEntity) Reset() {
	*x = TestBotEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_workflows_test_bot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestBotEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestBotEntity) ProtoMessage() {}

func (x *TestBotEntity) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_workflows_test_bot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestBotEntity.ProtoReflect.Descriptor instead.
func (*TestBotEntity) Descriptor() ([]byte, []int) {
	return file_api_commons_workflows_test_bot_proto_rawDescGZIP(), []int{3}
}

func (x *TestBotEntity) GetType() TestBotEntityType {
	if x != nil {
		return x.Type
	}
	return TestBotEntityType_TEST_BOT_ENTITY_TYPE_UNSPECIFIED
}

func (x *TestBotEntity) GetAtomic() bool {
	if x != nil {
		return x.Atomic
	}
	return false
}

func (m *TestBotEntity) GetData() isTestBotEntity_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *TestBotEntity) GetUser() *auth.AuthenticatedUser {
	if x, ok := x.GetData().(*TestBotEntity_User); ok {
		return x.User
	}
	return nil
}

func (x *TestBotEntity) GetOmnichannelProject() *v0alpha.Project {
	if x, ok := x.GetData().(*TestBotEntity_OmnichannelProject); ok {
		return x.OmnichannelProject
	}
	return nil
}

type isTestBotEntity_Data interface {
	isTestBotEntity_Data()
}

type TestBotEntity_User struct {
	User *auth.AuthenticatedUser `protobuf:"bytes,100,opt,name=user,proto3,oneof"`
}

type TestBotEntity_OmnichannelProject struct {
	// OMNICHANNEL
	OmnichannelProject *v0alpha.Project `protobuf:"bytes,300,opt,name=omnichannel_project,json=omnichannelProject,proto3,oneof"`
}

func (*TestBotEntity_User) isTestBotEntity_Data() {}

func (*TestBotEntity_OmnichannelProject) isTestBotEntity_Data() {}

var File_api_commons_workflows_test_bot_proto protoreflect.FileDescriptor

var file_api_commons_workflows_test_bot_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x1a, 0x1b, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x55,
	0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x61, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xf2, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x42,
	0x6f, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x13, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0xac, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0xad, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x23, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4f, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x32, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x42, 0x4f, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0xe8,
	0x07, 0x12, 0x34, 0x0a, 0x2f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4f, 0x54, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e,
	0x49, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0xe9, 0x07, 0x2a, 0x87, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x20, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4f, 0x54, 0x5f,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x10, 0x64, 0x12, 0x2d, 0x0a, 0x28, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4f, 0x54, 0x5f, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0xac,
	0x02, 0x42, 0xd1, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x42,
	0x0c, 0x54, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x57, 0xaa, 0x02, 0x15, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0xca,
	0x02, 0x15, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0xe2, 0x02, 0x21, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x41, 0x70,
	0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x3a, 0x3a, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_workflows_test_bot_proto_rawDescOnce sync.Once
	file_api_commons_workflows_test_bot_proto_rawDescData = file_api_commons_workflows_test_bot_proto_rawDesc
)

func file_api_commons_workflows_test_bot_proto_rawDescGZIP() []byte {
	file_api_commons_workflows_test_bot_proto_rawDescOnce.Do(func() {
		file_api_commons_workflows_test_bot_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_workflows_test_bot_proto_rawDescData)
	})
	return file_api_commons_workflows_test_bot_proto_rawDescData
}

var file_api_commons_workflows_test_bot_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_commons_workflows_test_bot_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_api_commons_workflows_test_bot_proto_goTypes = []interface{}{
	(TestBotTestStepType)(0),       // 0: api.commons.workflows.TestBotTestStepType
	(TestBotEntityType)(0),         // 1: api.commons.workflows.TestBotEntityType
	(*TestBotNodeTestStart)(nil),   // 2: api.commons.workflows.TestBotNodeTestStart
	(*TestBotNodeTestStep)(nil),    // 3: api.commons.workflows.TestBotNodeTestStep
	(*TestBotNodeTestEnd)(nil),     // 4: api.commons.workflows.TestBotNodeTestEnd
	(*TestBotEntity)(nil),          // 5: api.commons.workflows.TestBotEntity
	nil,                            // 6: api.commons.workflows.TestBotNodeTestStart.EntitiesEntry
	(*auth.AuthenticatedUser)(nil), // 7: api.commons.auth.AuthenticatedUser
	(*v0alpha.Project)(nil),        // 8: api.v0alpha.Project
}
var file_api_commons_workflows_test_bot_proto_depIdxs = []int32{
	6, // 0: api.commons.workflows.TestBotNodeTestStart.entities:type_name -> api.commons.workflows.TestBotNodeTestStart.EntitiesEntry
	0, // 1: api.commons.workflows.TestBotNodeTestStep.type:type_name -> api.commons.workflows.TestBotTestStepType
	1, // 2: api.commons.workflows.TestBotEntity.type:type_name -> api.commons.workflows.TestBotEntityType
	7, // 3: api.commons.workflows.TestBotEntity.user:type_name -> api.commons.auth.AuthenticatedUser
	8, // 4: api.commons.workflows.TestBotEntity.omnichannel_project:type_name -> api.v0alpha.Project
	5, // 5: api.commons.workflows.TestBotNodeTestStart.EntitiesEntry.value:type_name -> api.commons.workflows.TestBotEntity
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_api_commons_workflows_test_bot_proto_init() }
func file_api_commons_workflows_test_bot_proto_init() {
	if File_api_commons_workflows_test_bot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_commons_workflows_test_bot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestBotNodeTestStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_workflows_test_bot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestBotNodeTestStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_workflows_test_bot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestBotNodeTestEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_workflows_test_bot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestBotEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_commons_workflows_test_bot_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TestBotEntity_User)(nil),
		(*TestBotEntity_OmnichannelProject)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_workflows_test_bot_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_workflows_test_bot_proto_goTypes,
		DependencyIndexes: file_api_commons_workflows_test_bot_proto_depIdxs,
		EnumInfos:         file_api_commons_workflows_test_bot_proto_enumTypes,
		MessageInfos:      file_api_commons_workflows_test_bot_proto_msgTypes,
	}.Build()
	File_api_commons_workflows_test_bot_proto = out.File
	file_api_commons_workflows_test_bot_proto_rawDesc = nil
	file_api_commons_workflows_test_bot_proto_goTypes = nil
	file_api_commons_workflows_test_bot_proto_depIdxs = nil
}
