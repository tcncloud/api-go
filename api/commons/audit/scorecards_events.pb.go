// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/commons/audit/scorecards_events.proto

package audit

import (
	commons "github.com/tcncloud/api-go/api/commons"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ScorecardsCreateQuestionEvent is event when a question library question is created
type ScorecardsCreateQuestionEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AuthorId      string                 `protobuf:"bytes,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`             // the creator of the question
	QuestionText  string                 `protobuf:"bytes,2,opt,name=question_text,json=questionText,proto3" json:"question_text,omitempty"` // the question to display
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                       // extra info or context for the question
	Question      *commons.Question      `protobuf:"bytes,4,opt,name=question,proto3" json:"question,omitempty"`                             // question created
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScorecardsCreateQuestionEvent) Reset() {
	*x = ScorecardsCreateQuestionEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsCreateQuestionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsCreateQuestionEvent) ProtoMessage() {}

func (x *ScorecardsCreateQuestionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsCreateQuestionEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsCreateQuestionEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{0}
}

func (x *ScorecardsCreateQuestionEvent) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *ScorecardsCreateQuestionEvent) GetQuestionText() string {
	if x != nil {
		return x.QuestionText
	}
	return ""
}

func (x *ScorecardsCreateQuestionEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsCreateQuestionEvent) GetQuestion() *commons.Question {
	if x != nil {
		return x.Question
	}
	return nil
}

// ScorecardsUpdateQuestionEvent is event when a question library question is updated
type ScorecardsUpdateQuestionEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                   // unique id of tcn user triggering event
	QuestionText  string                 `protobuf:"bytes,2,opt,name=question_text,json=questionText,proto3" json:"question_text,omitempty"` // the question to display
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                       // extra info or context for the question
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`       // field mask of updated fields
	Question      *commons.Question      `protobuf:"bytes,5,opt,name=question,proto3" json:"question,omitempty"`                             // question updated
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScorecardsUpdateQuestionEvent) Reset() {
	*x = ScorecardsUpdateQuestionEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsUpdateQuestionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsUpdateQuestionEvent) ProtoMessage() {}

func (x *ScorecardsUpdateQuestionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsUpdateQuestionEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsUpdateQuestionEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{1}
}

func (x *ScorecardsUpdateQuestionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsUpdateQuestionEvent) GetQuestionText() string {
	if x != nil {
		return x.QuestionText
	}
	return ""
}

func (x *ScorecardsUpdateQuestionEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsUpdateQuestionEvent) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *ScorecardsUpdateQuestionEvent) GetQuestion() *commons.Question {
	if x != nil {
		return x.Question
	}
	return nil
}

// ScorecardsDeleteQuestionEvent is event when a question library question is deleted
type ScorecardsDeleteQuestionEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // unique id of tcn user triggering event
	QuestionText  string                 `protobuf:"bytes,2,opt,name=question_text,json=questionText,proto3" json:"question_text,omitempty"`      // the question to display
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                            // extra info or context for the question
	CategoryIds   []int64                `protobuf:"varint,4,rep,packed,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"` // category ids linked to question
	Question      *commons.Question      `protobuf:"bytes,5,opt,name=question,proto3" json:"question,omitempty"`                                  // question deleted
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScorecardsDeleteQuestionEvent) Reset() {
	*x = ScorecardsDeleteQuestionEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsDeleteQuestionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsDeleteQuestionEvent) ProtoMessage() {}

func (x *ScorecardsDeleteQuestionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsDeleteQuestionEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsDeleteQuestionEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{2}
}

func (x *ScorecardsDeleteQuestionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsDeleteQuestionEvent) GetQuestionText() string {
	if x != nil {
		return x.QuestionText
	}
	return ""
}

func (x *ScorecardsDeleteQuestionEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsDeleteQuestionEvent) GetCategoryIds() []int64 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *ScorecardsDeleteQuestionEvent) GetQuestion() *commons.Question {
	if x != nil {
		return x.Question
	}
	return nil
}

// ScorecardsCreateScorecardEvent is event when a scorecard library scorecard is created
type ScorecardsCreateScorecardEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AuthorId       string                 `protobuf:"bytes,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`                                                    // the creator of the scorecard
	Title          string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                                          // the title of the scorecard
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                              // extra info or context for the scorecard
	PassScore      float64                `protobuf:"fixed64,4,opt,name=pass_score,json=passScore,proto3" json:"pass_score,omitempty"`                                               // passing score for the scorecard
	ScoreType      commons.ScoreType      `protobuf:"varint,5,opt,name=score_type,json=scoreType,proto3,enum=api.commons.ScoreType" json:"score_type,omitempty"`                     // method of score calculation
	EvaluationType commons.EvaluationType `protobuf:"varint,6,opt,name=evaluation_type,json=evaluationType,proto3,enum=api.commons.EvaluationType" json:"evaluation_type,omitempty"` // method of evaluation (i.e. manual, auto)
	Scorecard      *commons.Scorecard     `protobuf:"bytes,7,opt,name=scorecard,proto3" json:"scorecard,omitempty"`                                                                  // scorecard created
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ScorecardsCreateScorecardEvent) Reset() {
	*x = ScorecardsCreateScorecardEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsCreateScorecardEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsCreateScorecardEvent) ProtoMessage() {}

func (x *ScorecardsCreateScorecardEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsCreateScorecardEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsCreateScorecardEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{3}
}

func (x *ScorecardsCreateScorecardEvent) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *ScorecardsCreateScorecardEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ScorecardsCreateScorecardEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsCreateScorecardEvent) GetPassScore() float64 {
	if x != nil {
		return x.PassScore
	}
	return 0
}

func (x *ScorecardsCreateScorecardEvent) GetScoreType() commons.ScoreType {
	if x != nil {
		return x.ScoreType
	}
	return commons.ScoreType(0)
}

func (x *ScorecardsCreateScorecardEvent) GetEvaluationType() commons.EvaluationType {
	if x != nil {
		return x.EvaluationType
	}
	return commons.EvaluationType(0)
}

func (x *ScorecardsCreateScorecardEvent) GetScorecard() *commons.Scorecard {
	if x != nil {
		return x.Scorecard
	}
	return nil
}

// ScorecardsUpdateScorecardEvent is event when a scorecard library scorecard is updated
type ScorecardsUpdateScorecardEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserId         string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                          // unique id of tcn user triggering event
	Title          string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                                          // the title of the scorecard
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                              // extra info or context for the scorecard
	PassScore      float64                `protobuf:"fixed64,4,opt,name=pass_score,json=passScore,proto3" json:"pass_score,omitempty"`                                               // passing score for the scorecard
	ScoreType      commons.ScoreType      `protobuf:"varint,5,opt,name=score_type,json=scoreType,proto3,enum=api.commons.ScoreType" json:"score_type,omitempty"`                     // method of score calculation
	EvaluationType commons.EvaluationType `protobuf:"varint,6,opt,name=evaluation_type,json=evaluationType,proto3,enum=api.commons.EvaluationType" json:"evaluation_type,omitempty"` // method of evaluation (i.e. manual, auto)
	AllowFeedback  bool                   `protobuf:"varint,7,opt,name=allow_feedback,json=allowFeedback,proto3" json:"allow_feedback,omitempty"`                                    // agent feedback allowed
	State          commons.ScorecardState `protobuf:"varint,8,opt,name=state,proto3,enum=api.commons.ScorecardState" json:"state,omitempty"`                                         // state of the scorecard (i.e. draft, ready, in_use)
	UpdateMask     *fieldmaskpb.FieldMask `protobuf:"bytes,9,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`                                              // field mask of updated fields
	Scorecard      *commons.Scorecard     `protobuf:"bytes,10,opt,name=scorecard,proto3" json:"scorecard,omitempty"`                                                                 // scorecard updated
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ScorecardsUpdateScorecardEvent) Reset() {
	*x = ScorecardsUpdateScorecardEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsUpdateScorecardEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsUpdateScorecardEvent) ProtoMessage() {}

func (x *ScorecardsUpdateScorecardEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsUpdateScorecardEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsUpdateScorecardEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{4}
}

func (x *ScorecardsUpdateScorecardEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsUpdateScorecardEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ScorecardsUpdateScorecardEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsUpdateScorecardEvent) GetPassScore() float64 {
	if x != nil {
		return x.PassScore
	}
	return 0
}

func (x *ScorecardsUpdateScorecardEvent) GetScoreType() commons.ScoreType {
	if x != nil {
		return x.ScoreType
	}
	return commons.ScoreType(0)
}

func (x *ScorecardsUpdateScorecardEvent) GetEvaluationType() commons.EvaluationType {
	if x != nil {
		return x.EvaluationType
	}
	return commons.EvaluationType(0)
}

func (x *ScorecardsUpdateScorecardEvent) GetAllowFeedback() bool {
	if x != nil {
		return x.AllowFeedback
	}
	return false
}

func (x *ScorecardsUpdateScorecardEvent) GetState() commons.ScorecardState {
	if x != nil {
		return x.State
	}
	return commons.ScorecardState(0)
}

func (x *ScorecardsUpdateScorecardEvent) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *ScorecardsUpdateScorecardEvent) GetScorecard() *commons.Scorecard {
	if x != nil {
		return x.Scorecard
	}
	return nil
}

// ScorecardsDeleteScorecardEvent is event when a scorecard library scorecard is deleted
type ScorecardsDeleteScorecardEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserId         string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                          // unique id of tcn user triggering event
	Title          string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                                          // the title of the scorecard
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                              // extra info or context for the scorecard
	PassScore      float64                `protobuf:"fixed64,4,opt,name=pass_score,json=passScore,proto3" json:"pass_score,omitempty"`                                               // passing score for the scorecard
	ScoreType      commons.ScoreType      `protobuf:"varint,5,opt,name=score_type,json=scoreType,proto3,enum=api.commons.ScoreType" json:"score_type,omitempty"`                     // method of score calculation
	EvaluationType commons.EvaluationType `protobuf:"varint,6,opt,name=evaluation_type,json=evaluationType,proto3,enum=api.commons.EvaluationType" json:"evaluation_type,omitempty"` // method of evaluation (i.e. manual, auto)
	State          commons.ScorecardState `protobuf:"varint,7,opt,name=state,proto3,enum=api.commons.ScorecardState" json:"state,omitempty"`                                         // state of the scorecard (i.e. draft, ready, in_use)
	Scorecard      *commons.Scorecard     `protobuf:"bytes,8,opt,name=scorecard,proto3" json:"scorecard,omitempty"`                                                                  // scorecard deleted
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ScorecardsDeleteScorecardEvent) Reset() {
	*x = ScorecardsDeleteScorecardEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsDeleteScorecardEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsDeleteScorecardEvent) ProtoMessage() {}

func (x *ScorecardsDeleteScorecardEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsDeleteScorecardEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsDeleteScorecardEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{5}
}

func (x *ScorecardsDeleteScorecardEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsDeleteScorecardEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ScorecardsDeleteScorecardEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsDeleteScorecardEvent) GetPassScore() float64 {
	if x != nil {
		return x.PassScore
	}
	return 0
}

func (x *ScorecardsDeleteScorecardEvent) GetScoreType() commons.ScoreType {
	if x != nil {
		return x.ScoreType
	}
	return commons.ScoreType(0)
}

func (x *ScorecardsDeleteScorecardEvent) GetEvaluationType() commons.EvaluationType {
	if x != nil {
		return x.EvaluationType
	}
	return commons.EvaluationType(0)
}

func (x *ScorecardsDeleteScorecardEvent) GetState() commons.ScorecardState {
	if x != nil {
		return x.State
	}
	return commons.ScorecardState(0)
}

func (x *ScorecardsDeleteScorecardEvent) GetScorecard() *commons.Scorecard {
	if x != nil {
		return x.Scorecard
	}
	return nil
}

// ScorecardsCloneScorecardEvent is event when a scorecard library scorecard is cloned
type ScorecardsCloneScorecardEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AuthorId       string                 `protobuf:"bytes,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`                                                    // the creator of the scorecard
	Title          string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                                          // the title of the scorecard
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                              // extra info or context for the scorecard
	PassScore      float64                `protobuf:"fixed64,4,opt,name=pass_score,json=passScore,proto3" json:"pass_score,omitempty"`                                               // passing score for the scorecard
	ScoreType      commons.ScoreType      `protobuf:"varint,5,opt,name=score_type,json=scoreType,proto3,enum=api.commons.ScoreType" json:"score_type,omitempty"`                     // method of score calculation
	EvaluationType commons.EvaluationType `protobuf:"varint,6,opt,name=evaluation_type,json=evaluationType,proto3,enum=api.commons.EvaluationType" json:"evaluation_type,omitempty"` // method of evaluation (i.e. manual, auto)
	Scorecard      *commons.Scorecard     `protobuf:"bytes,7,opt,name=scorecard,proto3" json:"scorecard,omitempty"`                                                                  // scorecard clone
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ScorecardsCloneScorecardEvent) Reset() {
	*x = ScorecardsCloneScorecardEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsCloneScorecardEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsCloneScorecardEvent) ProtoMessage() {}

func (x *ScorecardsCloneScorecardEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsCloneScorecardEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsCloneScorecardEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{6}
}

func (x *ScorecardsCloneScorecardEvent) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *ScorecardsCloneScorecardEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ScorecardsCloneScorecardEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsCloneScorecardEvent) GetPassScore() float64 {
	if x != nil {
		return x.PassScore
	}
	return 0
}

func (x *ScorecardsCloneScorecardEvent) GetScoreType() commons.ScoreType {
	if x != nil {
		return x.ScoreType
	}
	return commons.ScoreType(0)
}

func (x *ScorecardsCloneScorecardEvent) GetEvaluationType() commons.EvaluationType {
	if x != nil {
		return x.EvaluationType
	}
	return commons.EvaluationType(0)
}

func (x *ScorecardsCloneScorecardEvent) GetScorecard() *commons.Scorecard {
	if x != nil {
		return x.Scorecard
	}
	return nil
}

// ScorecardsCreateEvaluationEvent is event when an evaluation library evaluation is created
type ScorecardsCreateEvaluationEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EvaluationId  int64                  `protobuf:"varint,1,opt,name=evaluation_id,json=evaluationId,proto3" json:"evaluation_id,omitempty"` // id of the evaluation being created
	ScorecardId   int64                  `protobuf:"varint,2,opt,name=scorecard_id,json=scorecardId,proto3" json:"scorecard_id,omitempty"`    // id of evaluated scorecard
	ScorerId      string                 `protobuf:"bytes,3,opt,name=scorer_id,json=scorerId,proto3" json:"scorer_id,omitempty"`              // user_id of person performing evaluation
	AgentUserId   string                 `protobuf:"bytes,4,opt,name=agent_user_id,json=agentUserId,proto3" json:"agent_user_id,omitempty"`   // agent user id of agent getting evaluated
	CallSid       int64                  `protobuf:"varint,5,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`                // sid of the call being evaluated
	Evaluation    *commons.Evaluation    `protobuf:"bytes,6,opt,name=evaluation,proto3" json:"evaluation,omitempty"`                          // the evaluation being created
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScorecardsCreateEvaluationEvent) Reset() {
	*x = ScorecardsCreateEvaluationEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsCreateEvaluationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsCreateEvaluationEvent) ProtoMessage() {}

func (x *ScorecardsCreateEvaluationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsCreateEvaluationEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsCreateEvaluationEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{7}
}

func (x *ScorecardsCreateEvaluationEvent) GetEvaluationId() int64 {
	if x != nil {
		return x.EvaluationId
	}
	return 0
}

func (x *ScorecardsCreateEvaluationEvent) GetScorecardId() int64 {
	if x != nil {
		return x.ScorecardId
	}
	return 0
}

func (x *ScorecardsCreateEvaluationEvent) GetScorerId() string {
	if x != nil {
		return x.ScorerId
	}
	return ""
}

func (x *ScorecardsCreateEvaluationEvent) GetAgentUserId() string {
	if x != nil {
		return x.AgentUserId
	}
	return ""
}

func (x *ScorecardsCreateEvaluationEvent) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *ScorecardsCreateEvaluationEvent) GetEvaluation() *commons.Evaluation {
	if x != nil {
		return x.Evaluation
	}
	return nil
}

// ScorecardsUpdateEvaluationEvent is event when an evaluation library evaluation is updated
type ScorecardsUpdateEvaluationEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EvaluationId  int64                  `protobuf:"varint,1,opt,name=evaluation_id,json=evaluationId,proto3" json:"evaluation_id,omitempty"` // id of the evaluation being updated
	ScorecardId   int64                  `protobuf:"varint,2,opt,name=scorecard_id,json=scorecardId,proto3" json:"scorecard_id,omitempty"`    // id of evaluated scorecard
	ScorerId      string                 `protobuf:"bytes,3,opt,name=scorer_id,json=scorerId,proto3" json:"scorer_id,omitempty"`              // user_id of person performing evaluation
	AgentUserId   string                 `protobuf:"bytes,4,opt,name=agent_user_id,json=agentUserId,proto3" json:"agent_user_id,omitempty"`   // agent user id of agent getting evaluated
	CallSid       int64                  `protobuf:"varint,5,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`                // sid of the call being evaluated
	Evaluation    *commons.Evaluation    `protobuf:"bytes,6,opt,name=evaluation,proto3" json:"evaluation,omitempty"`                          // the evaluation being updated
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScorecardsUpdateEvaluationEvent) Reset() {
	*x = ScorecardsUpdateEvaluationEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsUpdateEvaluationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsUpdateEvaluationEvent) ProtoMessage() {}

func (x *ScorecardsUpdateEvaluationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsUpdateEvaluationEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsUpdateEvaluationEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{8}
}

func (x *ScorecardsUpdateEvaluationEvent) GetEvaluationId() int64 {
	if x != nil {
		return x.EvaluationId
	}
	return 0
}

func (x *ScorecardsUpdateEvaluationEvent) GetScorecardId() int64 {
	if x != nil {
		return x.ScorecardId
	}
	return 0
}

func (x *ScorecardsUpdateEvaluationEvent) GetScorerId() string {
	if x != nil {
		return x.ScorerId
	}
	return ""
}

func (x *ScorecardsUpdateEvaluationEvent) GetAgentUserId() string {
	if x != nil {
		return x.AgentUserId
	}
	return ""
}

func (x *ScorecardsUpdateEvaluationEvent) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *ScorecardsUpdateEvaluationEvent) GetEvaluation() *commons.Evaluation {
	if x != nil {
		return x.Evaluation
	}
	return nil
}

// ScorecardsDeleteEvaluationEvent is event when an evaluation library evaluation is deleted
type ScorecardsDeleteEvaluationEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EvaluationId  int64                  `protobuf:"varint,1,opt,name=evaluation_id,json=evaluationId,proto3" json:"evaluation_id,omitempty"` // id of the evaluation being created
	ScorecardId   int64                  `protobuf:"varint,2,opt,name=scorecard_id,json=scorecardId,proto3" json:"scorecard_id,omitempty"`    // id of evaluated scorecard
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                    // user_id of person deleting evaluation
	AgentUserId   string                 `protobuf:"bytes,4,opt,name=agent_user_id,json=agentUserId,proto3" json:"agent_user_id,omitempty"`   // agent user id of agent getting evaluated
	CallSid       int64                  `protobuf:"varint,5,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`                // sid of the call being evaluated
	Evaluation    *commons.Evaluation    `protobuf:"bytes,6,opt,name=evaluation,proto3" json:"evaluation,omitempty"`                          // the evaluation being deleted
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScorecardsDeleteEvaluationEvent) Reset() {
	*x = ScorecardsDeleteEvaluationEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsDeleteEvaluationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsDeleteEvaluationEvent) ProtoMessage() {}

func (x *ScorecardsDeleteEvaluationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsDeleteEvaluationEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsDeleteEvaluationEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{9}
}

func (x *ScorecardsDeleteEvaluationEvent) GetEvaluationId() int64 {
	if x != nil {
		return x.EvaluationId
	}
	return 0
}

func (x *ScorecardsDeleteEvaluationEvent) GetScorecardId() int64 {
	if x != nil {
		return x.ScorecardId
	}
	return 0
}

func (x *ScorecardsDeleteEvaluationEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsDeleteEvaluationEvent) GetAgentUserId() string {
	if x != nil {
		return x.AgentUserId
	}
	return ""
}

func (x *ScorecardsDeleteEvaluationEvent) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *ScorecardsDeleteEvaluationEvent) GetEvaluation() *commons.Evaluation {
	if x != nil {
		return x.Evaluation
	}
	return nil
}

// ScorecardsCreateSectionEvent is event when a section library section is created
type ScorecardsCreateSectionEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // unique id of tcn user triggering event
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                 // section title or name
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`     // extra context about the section
	Weight        uint32                 `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`              // used for scorecards with weighted scoring
	Section       *commons.Section       `protobuf:"bytes,5,opt,name=section,proto3" json:"section,omitempty"`             // section created
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScorecardsCreateSectionEvent) Reset() {
	*x = ScorecardsCreateSectionEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsCreateSectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsCreateSectionEvent) ProtoMessage() {}

func (x *ScorecardsCreateSectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsCreateSectionEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsCreateSectionEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{10}
}

func (x *ScorecardsCreateSectionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsCreateSectionEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ScorecardsCreateSectionEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsCreateSectionEvent) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ScorecardsCreateSectionEvent) GetSection() *commons.Section {
	if x != nil {
		return x.Section
	}
	return nil
}

// ScorecardsUpdateSectionEvent is event when a section library section is updated
type ScorecardsUpdateSectionEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // unique id of tcn user triggering event
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                             // section title or name
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                 // extra context about the section
	Weight        uint32                 `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`                          // used for scorecards with weighted scoring
	SortOrder     int32                  `protobuf:"varint,5,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`   // order number of section
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,6,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"` // field mask of updated fields
	Section       *commons.Section       `protobuf:"bytes,7,opt,name=section,proto3" json:"section,omitempty"`                         // section updated
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScorecardsUpdateSectionEvent) Reset() {
	*x = ScorecardsUpdateSectionEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsUpdateSectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsUpdateSectionEvent) ProtoMessage() {}

func (x *ScorecardsUpdateSectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsUpdateSectionEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsUpdateSectionEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{11}
}

func (x *ScorecardsUpdateSectionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsUpdateSectionEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ScorecardsUpdateSectionEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsUpdateSectionEvent) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ScorecardsUpdateSectionEvent) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *ScorecardsUpdateSectionEvent) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *ScorecardsUpdateSectionEvent) GetSection() *commons.Section {
	if x != nil {
		return x.Section
	}
	return nil
}

// ScorecardsDeleteSectionEvent is event when a section library section is deleted
type ScorecardsDeleteSectionEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // unique id of tcn user triggering event
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                 // section title or name
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`     // extra context about the section
	Weight        uint32                 `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`              // used for scorecards with weighted scoring
	Section       *commons.Section       `protobuf:"bytes,5,opt,name=section,proto3" json:"section,omitempty"`             // section deleted
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScorecardsDeleteSectionEvent) Reset() {
	*x = ScorecardsDeleteSectionEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsDeleteSectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsDeleteSectionEvent) ProtoMessage() {}

func (x *ScorecardsDeleteSectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsDeleteSectionEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsDeleteSectionEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{12}
}

func (x *ScorecardsDeleteSectionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsDeleteSectionEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ScorecardsDeleteSectionEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsDeleteSectionEvent) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ScorecardsDeleteSectionEvent) GetSection() *commons.Section {
	if x != nil {
		return x.Section
	}
	return nil
}

// ScorecardsCreateCategoryEvent is event when a category library category is created
type ScorecardsCreateCategoryEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AuthorId      string                 `protobuf:"bytes,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`    // the creator of the category
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                          // title of the category
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`              // extra info or context for the category
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // timestamp of creation
	Category      *commons.Category      `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`                    // category object created
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScorecardsCreateCategoryEvent) Reset() {
	*x = ScorecardsCreateCategoryEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsCreateCategoryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsCreateCategoryEvent) ProtoMessage() {}

func (x *ScorecardsCreateCategoryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsCreateCategoryEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsCreateCategoryEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{13}
}

func (x *ScorecardsCreateCategoryEvent) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *ScorecardsCreateCategoryEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ScorecardsCreateCategoryEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsCreateCategoryEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ScorecardsCreateCategoryEvent) GetCategory() *commons.Category {
	if x != nil {
		return x.Category
	}
	return nil
}

// ScorecardsUpdateCategoryEvent is event when a category library category is updated
type ScorecardsUpdateCategoryEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // unique id of tcn user triggering event
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                             // title of the category
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                 // extra info or context for the category
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"` // field mask of updated fields
	Category      *commons.Category      `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`                       // category object created
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScorecardsUpdateCategoryEvent) Reset() {
	*x = ScorecardsUpdateCategoryEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsUpdateCategoryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsUpdateCategoryEvent) ProtoMessage() {}

func (x *ScorecardsUpdateCategoryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsUpdateCategoryEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsUpdateCategoryEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{14}
}

func (x *ScorecardsUpdateCategoryEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsUpdateCategoryEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ScorecardsUpdateCategoryEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsUpdateCategoryEvent) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *ScorecardsUpdateCategoryEvent) GetCategory() *commons.Category {
	if x != nil {
		return x.Category
	}
	return nil
}

// ScorecardsDeleteCategoryEvent is event when a category library category is deleted
type ScorecardsDeleteCategoryEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // unique id of tcn user triggering event
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                          // title of the category
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`              // extra info or context for the category
	DeletedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"` // timestamp of deletion
	Category      *commons.Category      `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`                    // category object created
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScorecardsDeleteCategoryEvent) Reset() {
	*x = ScorecardsDeleteCategoryEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsDeleteCategoryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsDeleteCategoryEvent) ProtoMessage() {}

func (x *ScorecardsDeleteCategoryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsDeleteCategoryEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsDeleteCategoryEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{15}
}

func (x *ScorecardsDeleteCategoryEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsDeleteCategoryEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ScorecardsDeleteCategoryEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsDeleteCategoryEvent) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *ScorecardsDeleteCategoryEvent) GetCategory() *commons.Category {
	if x != nil {
		return x.Category
	}
	return nil
}

// ScorecardsCreateEvaluationQuestionEvent is event when an evaluation question is created
type ScorecardsCreateEvaluationQuestionEvent struct {
	state                protoimpl.MessageState      `protogen:"open.v1"`
	EvaluationQuestionId int64                       `protobuf:"varint,1,opt,name=evaluation_question_id,json=evaluationQuestionId,proto3" json:"evaluation_question_id,omitempty"` // unique id of evaluation question
	EvaluationId         int64                       `protobuf:"varint,2,opt,name=evaluation_id,json=evaluationId,proto3" json:"evaluation_id,omitempty"`                           // unique id of evaluation
	ScorecardQuestionId  int64                       `protobuf:"varint,3,opt,name=scorecard_question_id,json=scorecardQuestionId,proto3" json:"scorecard_question_id,omitempty"`    // unique id of scorecard question
	UserId               string                      `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // tcn user id of person creating question
	EvaluationQuestion   *commons.EvaluationQuestion `protobuf:"bytes,5,opt,name=evaluation_question,json=evaluationQuestion,proto3" json:"evaluation_question,omitempty"`          // the question being created
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ScorecardsCreateEvaluationQuestionEvent) Reset() {
	*x = ScorecardsCreateEvaluationQuestionEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsCreateEvaluationQuestionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsCreateEvaluationQuestionEvent) ProtoMessage() {}

func (x *ScorecardsCreateEvaluationQuestionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsCreateEvaluationQuestionEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsCreateEvaluationQuestionEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{16}
}

func (x *ScorecardsCreateEvaluationQuestionEvent) GetEvaluationQuestionId() int64 {
	if x != nil {
		return x.EvaluationQuestionId
	}
	return 0
}

func (x *ScorecardsCreateEvaluationQuestionEvent) GetEvaluationId() int64 {
	if x != nil {
		return x.EvaluationId
	}
	return 0
}

func (x *ScorecardsCreateEvaluationQuestionEvent) GetScorecardQuestionId() int64 {
	if x != nil {
		return x.ScorecardQuestionId
	}
	return 0
}

func (x *ScorecardsCreateEvaluationQuestionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsCreateEvaluationQuestionEvent) GetEvaluationQuestion() *commons.EvaluationQuestion {
	if x != nil {
		return x.EvaluationQuestion
	}
	return nil
}

// ScorecardsUpdateEvaluationQuestionEvent is event when an evaluation question is updated
type ScorecardsUpdateEvaluationQuestionEvent struct {
	state                protoimpl.MessageState      `protogen:"open.v1"`
	EvaluationQuestionId int64                       `protobuf:"varint,1,opt,name=evaluation_question_id,json=evaluationQuestionId,proto3" json:"evaluation_question_id,omitempty"` // unique id of evaluation question
	EvaluationId         int64                       `protobuf:"varint,2,opt,name=evaluation_id,json=evaluationId,proto3" json:"evaluation_id,omitempty"`                           // unique id of evaluation
	ScorecardQuestionId  int64                       `protobuf:"varint,3,opt,name=scorecard_question_id,json=scorecardQuestionId,proto3" json:"scorecard_question_id,omitempty"`    // unique id of scorecard question
	UserId               string                      `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // tcn user id of person performing request
	Skipped              bool                        `protobuf:"varint,5,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Points               int64                       `protobuf:"varint,6,opt,name=points,proto3" json:"points,omitempty"`
	UpdateMask           *fieldmaskpb.FieldMask      `protobuf:"bytes,7,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`                         // field mask of updated fields
	EvaluationQuestion   *commons.EvaluationQuestion `protobuf:"bytes,8,opt,name=evaluation_question,json=evaluationQuestion,proto3" json:"evaluation_question,omitempty"` // the question being updated
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ScorecardsUpdateEvaluationQuestionEvent) Reset() {
	*x = ScorecardsUpdateEvaluationQuestionEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsUpdateEvaluationQuestionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsUpdateEvaluationQuestionEvent) ProtoMessage() {}

func (x *ScorecardsUpdateEvaluationQuestionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsUpdateEvaluationQuestionEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsUpdateEvaluationQuestionEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{17}
}

func (x *ScorecardsUpdateEvaluationQuestionEvent) GetEvaluationQuestionId() int64 {
	if x != nil {
		return x.EvaluationQuestionId
	}
	return 0
}

func (x *ScorecardsUpdateEvaluationQuestionEvent) GetEvaluationId() int64 {
	if x != nil {
		return x.EvaluationId
	}
	return 0
}

func (x *ScorecardsUpdateEvaluationQuestionEvent) GetScorecardQuestionId() int64 {
	if x != nil {
		return x.ScorecardQuestionId
	}
	return 0
}

func (x *ScorecardsUpdateEvaluationQuestionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsUpdateEvaluationQuestionEvent) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *ScorecardsUpdateEvaluationQuestionEvent) GetPoints() int64 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *ScorecardsUpdateEvaluationQuestionEvent) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *ScorecardsUpdateEvaluationQuestionEvent) GetEvaluationQuestion() *commons.EvaluationQuestion {
	if x != nil {
		return x.EvaluationQuestion
	}
	return nil
}

// ScorecardsDeleteEvaluationQuestionEvent is event when an evaluation question is deleted
type ScorecardsDeleteEvaluationQuestionEvent struct {
	state                protoimpl.MessageState      `protogen:"open.v1"`
	EvaluationQuestionId int64                       `protobuf:"varint,1,opt,name=evaluation_question_id,json=evaluationQuestionId,proto3" json:"evaluation_question_id,omitempty"` // unique id of evaluation question
	EvaluationId         int64                       `protobuf:"varint,2,opt,name=evaluation_id,json=evaluationId,proto3" json:"evaluation_id,omitempty"`                           // unique id of evaluation
	ScorecardQuestionId  int64                       `protobuf:"varint,3,opt,name=scorecard_question_id,json=scorecardQuestionId,proto3" json:"scorecard_question_id,omitempty"`    // unique id of scorecard question
	UserId               string                      `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // tcn user id of person performing request
	EvaluationQuestions  *commons.EvaluationQuestion `protobuf:"bytes,5,opt,name=evaluation_questions,json=evaluationQuestions,proto3" json:"evaluation_questions,omitempty"`       // the question being deleted
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ScorecardsDeleteEvaluationQuestionEvent) Reset() {
	*x = ScorecardsDeleteEvaluationQuestionEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsDeleteEvaluationQuestionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsDeleteEvaluationQuestionEvent) ProtoMessage() {}

func (x *ScorecardsDeleteEvaluationQuestionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsDeleteEvaluationQuestionEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsDeleteEvaluationQuestionEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{18}
}

func (x *ScorecardsDeleteEvaluationQuestionEvent) GetEvaluationQuestionId() int64 {
	if x != nil {
		return x.EvaluationQuestionId
	}
	return 0
}

func (x *ScorecardsDeleteEvaluationQuestionEvent) GetEvaluationId() int64 {
	if x != nil {
		return x.EvaluationId
	}
	return 0
}

func (x *ScorecardsDeleteEvaluationQuestionEvent) GetScorecardQuestionId() int64 {
	if x != nil {
		return x.ScorecardQuestionId
	}
	return 0
}

func (x *ScorecardsDeleteEvaluationQuestionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsDeleteEvaluationQuestionEvent) GetEvaluationQuestions() *commons.EvaluationQuestion {
	if x != nil {
		return x.EvaluationQuestions
	}
	return nil
}

// ScorecardsCreateScorecardQuestionEvent is event when a scorecard question library scorecard question is created
type ScorecardsCreateScorecardQuestionEvent struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	UserId            string                     `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                  // unique id of tcn user triggering event
	Question          string                     `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`                                            // question to display
	Description       string                     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                      // optional; additional info about question
	AllowSkip         bool                       `protobuf:"varint,4,opt,name=allow_skip,json=allowSkip,proto3" json:"allow_skip,omitempty"`                        // question can be excluded from scoring (allow n/a)
	MaxPoints         int64                      `protobuf:"varint,5,opt,name=max_points,json=maxPoints,proto3" json:"max_points,omitempty"`                        // max points allowed for scorecard question
	AllowMultiSelect  bool                       `protobuf:"varint,6,opt,name=allow_multi_select,json=allowMultiSelect,proto3" json:"allow_multi_select,omitempty"` // allow multiple selections for scorecard question
	ScorecardQuestion *commons.ScorecardQuestion `protobuf:"bytes,7,opt,name=scorecard_question,json=scorecardQuestion,proto3" json:"scorecard_question,omitempty"` // scorecard question created
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ScorecardsCreateScorecardQuestionEvent) Reset() {
	*x = ScorecardsCreateScorecardQuestionEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsCreateScorecardQuestionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsCreateScorecardQuestionEvent) ProtoMessage() {}

func (x *ScorecardsCreateScorecardQuestionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsCreateScorecardQuestionEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsCreateScorecardQuestionEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{19}
}

func (x *ScorecardsCreateScorecardQuestionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsCreateScorecardQuestionEvent) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *ScorecardsCreateScorecardQuestionEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsCreateScorecardQuestionEvent) GetAllowSkip() bool {
	if x != nil {
		return x.AllowSkip
	}
	return false
}

func (x *ScorecardsCreateScorecardQuestionEvent) GetMaxPoints() int64 {
	if x != nil {
		return x.MaxPoints
	}
	return 0
}

func (x *ScorecardsCreateScorecardQuestionEvent) GetAllowMultiSelect() bool {
	if x != nil {
		return x.AllowMultiSelect
	}
	return false
}

func (x *ScorecardsCreateScorecardQuestionEvent) GetScorecardQuestion() *commons.ScorecardQuestion {
	if x != nil {
		return x.ScorecardQuestion
	}
	return nil
}

// ScorecardsUpdateScorecardQuestionEvent is event when a scorecard question library scorecard question is updated
type ScorecardsUpdateScorecardQuestionEvent struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	UserId            string                     `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                  // unique id of tcn user triggering event
	Question          string                     `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`                                            // question to display
	Description       string                     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                      // optional; additional info about question
	AllowSkip         bool                       `protobuf:"varint,4,opt,name=allow_skip,json=allowSkip,proto3" json:"allow_skip,omitempty"`                        // question can be excluded from scoring (allow n/a)
	MaxPoints         int64                      `protobuf:"varint,5,opt,name=max_points,json=maxPoints,proto3" json:"max_points,omitempty"`                        // max points allowed for scorecard question
	AllowMultiSelect  bool                       `protobuf:"varint,6,opt,name=allow_multi_select,json=allowMultiSelect,proto3" json:"allow_multi_select,omitempty"` // allow multiple selections for scorecard question
	SortOrder         int32                      `protobuf:"varint,7,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`                        // order number of scorecard question
	UpdateMask        *fieldmaskpb.FieldMask     `protobuf:"bytes,8,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`                      // field mask of updated fields
	ScorecardQuestion *commons.ScorecardQuestion `protobuf:"bytes,9,opt,name=scorecard_question,json=scorecardQuestion,proto3" json:"scorecard_question,omitempty"` // scorecard question updated
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ScorecardsUpdateScorecardQuestionEvent) Reset() {
	*x = ScorecardsUpdateScorecardQuestionEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsUpdateScorecardQuestionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsUpdateScorecardQuestionEvent) ProtoMessage() {}

func (x *ScorecardsUpdateScorecardQuestionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsUpdateScorecardQuestionEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsUpdateScorecardQuestionEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{20}
}

func (x *ScorecardsUpdateScorecardQuestionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsUpdateScorecardQuestionEvent) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *ScorecardsUpdateScorecardQuestionEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsUpdateScorecardQuestionEvent) GetAllowSkip() bool {
	if x != nil {
		return x.AllowSkip
	}
	return false
}

func (x *ScorecardsUpdateScorecardQuestionEvent) GetMaxPoints() int64 {
	if x != nil {
		return x.MaxPoints
	}
	return 0
}

func (x *ScorecardsUpdateScorecardQuestionEvent) GetAllowMultiSelect() bool {
	if x != nil {
		return x.AllowMultiSelect
	}
	return false
}

func (x *ScorecardsUpdateScorecardQuestionEvent) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *ScorecardsUpdateScorecardQuestionEvent) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *ScorecardsUpdateScorecardQuestionEvent) GetScorecardQuestion() *commons.ScorecardQuestion {
	if x != nil {
		return x.ScorecardQuestion
	}
	return nil
}

// ScorecardsDeleteScorecardQuestionEvent is event when a scorecard question library scorecard question is deleted
type ScorecardsDeleteScorecardQuestionEvent struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	UserId            string                     `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                  // unique id of tcn user triggering event
	Question          string                     `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`                                            // question to display
	Description       string                     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                      // optional; additional info about question
	AllowSkip         bool                       `protobuf:"varint,4,opt,name=allow_skip,json=allowSkip,proto3" json:"allow_skip,omitempty"`                        // question can be excluded from scoring (allow n/a)
	MaxPoints         int64                      `protobuf:"varint,5,opt,name=max_points,json=maxPoints,proto3" json:"max_points,omitempty"`                        // max points allowed for scorecard question
	AllowMultiSelect  bool                       `protobuf:"varint,6,opt,name=allow_multi_select,json=allowMultiSelect,proto3" json:"allow_multi_select,omitempty"` // allow multiple selections for scorecard question
	ScorecardQuestion *commons.ScorecardQuestion `protobuf:"bytes,7,opt,name=scorecard_question,json=scorecardQuestion,proto3" json:"scorecard_question,omitempty"` // scorecard question deleted
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ScorecardsDeleteScorecardQuestionEvent) Reset() {
	*x = ScorecardsDeleteScorecardQuestionEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsDeleteScorecardQuestionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsDeleteScorecardQuestionEvent) ProtoMessage() {}

func (x *ScorecardsDeleteScorecardQuestionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsDeleteScorecardQuestionEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsDeleteScorecardQuestionEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{21}
}

func (x *ScorecardsDeleteScorecardQuestionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScorecardsDeleteScorecardQuestionEvent) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *ScorecardsDeleteScorecardQuestionEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScorecardsDeleteScorecardQuestionEvent) GetAllowSkip() bool {
	if x != nil {
		return x.AllowSkip
	}
	return false
}

func (x *ScorecardsDeleteScorecardQuestionEvent) GetMaxPoints() int64 {
	if x != nil {
		return x.MaxPoints
	}
	return 0
}

func (x *ScorecardsDeleteScorecardQuestionEvent) GetAllowMultiSelect() bool {
	if x != nil {
		return x.AllowMultiSelect
	}
	return false
}

func (x *ScorecardsDeleteScorecardQuestionEvent) GetScorecardQuestion() *commons.ScorecardQuestion {
	if x != nil {
		return x.ScorecardQuestion
	}
	return nil
}

// ScorecardsCreateAutoEvaluationEvent is event when an auto evaluation library auto evaluation is created
type ScorecardsCreateAutoEvaluationEvent struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	AutoEvaluationId int64                   `protobuf:"varint,1,opt,name=auto_evaluation_id,json=autoEvaluationId,proto3" json:"auto_evaluation_id,omitempty"`      // id of the auto evaluation being created
	ScorecardId      int64                   `protobuf:"varint,2,opt,name=scorecard_id,json=scorecardId,proto3" json:"scorecard_id,omitempty"`                       // id of evaluated scorecard
	AgentUserId      string                  `protobuf:"bytes,3,opt,name=agent_user_id,json=agentUserId,proto3" json:"agent_user_id,omitempty"`                      // agent user id of agent getting evaluated
	CallSid          int64                   `protobuf:"varint,4,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`                                   // sid of the call being evaluated
	CallType         commons.CallType_Enum   `protobuf:"varint,5,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"` // type of call being evaluated
	TranscriptSid    int64                   `protobuf:"varint,6,opt,name=transcript_sid,json=transcriptSid,proto3" json:"transcript_sid,omitempty"`                 // transcript sid for the call evaluated
	RiskLevel        commons.RiskLevel       `protobuf:"varint,7,opt,name=risk_level,json=riskLevel,proto3,enum=api.commons.RiskLevel" json:"risk_level,omitempty"`  // risk level of the evaluation
	AutoEvaluation   *commons.AutoEvaluation `protobuf:"bytes,8,opt,name=auto_evaluation,json=autoEvaluation,proto3" json:"auto_evaluation,omitempty"`               // the auto evaluation being created
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ScorecardsCreateAutoEvaluationEvent) Reset() {
	*x = ScorecardsCreateAutoEvaluationEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsCreateAutoEvaluationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsCreateAutoEvaluationEvent) ProtoMessage() {}

func (x *ScorecardsCreateAutoEvaluationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsCreateAutoEvaluationEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsCreateAutoEvaluationEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{22}
}

func (x *ScorecardsCreateAutoEvaluationEvent) GetAutoEvaluationId() int64 {
	if x != nil {
		return x.AutoEvaluationId
	}
	return 0
}

func (x *ScorecardsCreateAutoEvaluationEvent) GetScorecardId() int64 {
	if x != nil {
		return x.ScorecardId
	}
	return 0
}

func (x *ScorecardsCreateAutoEvaluationEvent) GetAgentUserId() string {
	if x != nil {
		return x.AgentUserId
	}
	return ""
}

func (x *ScorecardsCreateAutoEvaluationEvent) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *ScorecardsCreateAutoEvaluationEvent) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

func (x *ScorecardsCreateAutoEvaluationEvent) GetTranscriptSid() int64 {
	if x != nil {
		return x.TranscriptSid
	}
	return 0
}

func (x *ScorecardsCreateAutoEvaluationEvent) GetRiskLevel() commons.RiskLevel {
	if x != nil {
		return x.RiskLevel
	}
	return commons.RiskLevel(0)
}

func (x *ScorecardsCreateAutoEvaluationEvent) GetAutoEvaluation() *commons.AutoEvaluation {
	if x != nil {
		return x.AutoEvaluation
	}
	return nil
}

// ScorecardsCreateSmartEvaluationEvent represents the creation of an evaluation from a smart scorecard
type ScorecardsCreateSmartEvaluationEvent struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SmartEvaluationId int64                  `protobuf:"varint,1,opt,name=smart_evaluation_id,json=smartEvaluationId,proto3" json:"smart_evaluation_id,omitempty"` // unique id of smart evaluation created
	TranscriptSid     int64                  `protobuf:"varint,2,opt,name=transcript_sid,json=transcriptSid,proto3" json:"transcript_sid,omitempty"`               // unique id of conversation transcript evaluated
	// Types that are valid to be assigned to Metadata:
	//
	//	*ScorecardsCreateSmartEvaluationEvent_Call_
	//	*ScorecardsCreateSmartEvaluationEvent_Sms_
	Metadata      isScorecardsCreateSmartEvaluationEvent_Metadata `protobuf_oneof:"metadata"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScorecardsCreateSmartEvaluationEvent) Reset() {
	*x = ScorecardsCreateSmartEvaluationEvent{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsCreateSmartEvaluationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsCreateSmartEvaluationEvent) ProtoMessage() {}

func (x *ScorecardsCreateSmartEvaluationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsCreateSmartEvaluationEvent.ProtoReflect.Descriptor instead.
func (*ScorecardsCreateSmartEvaluationEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{23}
}

func (x *ScorecardsCreateSmartEvaluationEvent) GetSmartEvaluationId() int64 {
	if x != nil {
		return x.SmartEvaluationId
	}
	return 0
}

func (x *ScorecardsCreateSmartEvaluationEvent) GetTranscriptSid() int64 {
	if x != nil {
		return x.TranscriptSid
	}
	return 0
}

func (x *ScorecardsCreateSmartEvaluationEvent) GetMetadata() isScorecardsCreateSmartEvaluationEvent_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ScorecardsCreateSmartEvaluationEvent) GetCall() *ScorecardsCreateSmartEvaluationEvent_Call {
	if x != nil {
		if x, ok := x.Metadata.(*ScorecardsCreateSmartEvaluationEvent_Call_); ok {
			return x.Call
		}
	}
	return nil
}

func (x *ScorecardsCreateSmartEvaluationEvent) GetSms() *ScorecardsCreateSmartEvaluationEvent_Sms {
	if x != nil {
		if x, ok := x.Metadata.(*ScorecardsCreateSmartEvaluationEvent_Sms_); ok {
			return x.Sms
		}
	}
	return nil
}

type isScorecardsCreateSmartEvaluationEvent_Metadata interface {
	isScorecardsCreateSmartEvaluationEvent_Metadata()
}

type ScorecardsCreateSmartEvaluationEvent_Call_ struct {
	Call *ScorecardsCreateSmartEvaluationEvent_Call `protobuf:"bytes,3,opt,name=call,proto3,oneof"` // metadata for call that triggered the scorecard
}

type ScorecardsCreateSmartEvaluationEvent_Sms_ struct {
	Sms *ScorecardsCreateSmartEvaluationEvent_Sms `protobuf:"bytes,4,opt,name=sms,proto3,oneof"` // metadata for sms that triggered the scorecard
}

func (*ScorecardsCreateSmartEvaluationEvent_Call_) isScorecardsCreateSmartEvaluationEvent_Metadata() {
}

func (*ScorecardsCreateSmartEvaluationEvent_Sms_) isScorecardsCreateSmartEvaluationEvent_Metadata() {}

type ScorecardsCreateSmartEvaluationEvent_Call struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CallSid       int64                  `protobuf:"varint,1,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`                                   // unique when combined with call type
	CallType      commons.CallType_Enum  `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=api.commons.CallType_Enum" json:"call_type,omitempty"` // unique when combined with call sid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScorecardsCreateSmartEvaluationEvent_Call) Reset() {
	*x = ScorecardsCreateSmartEvaluationEvent_Call{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsCreateSmartEvaluationEvent_Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsCreateSmartEvaluationEvent_Call) ProtoMessage() {}

func (x *ScorecardsCreateSmartEvaluationEvent_Call) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsCreateSmartEvaluationEvent_Call.ProtoReflect.Descriptor instead.
func (*ScorecardsCreateSmartEvaluationEvent_Call) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{23, 0}
}

func (x *ScorecardsCreateSmartEvaluationEvent_Call) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *ScorecardsCreateSmartEvaluationEvent_Call) GetCallType() commons.CallType_Enum {
	if x != nil {
		return x.CallType
	}
	return commons.CallType_Enum(0)
}

type ScorecardsCreateSmartEvaluationEvent_Sms struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ConversationSid int64                  `protobuf:"varint,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"` // unique conversation identifier
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ScorecardsCreateSmartEvaluationEvent_Sms) Reset() {
	*x = ScorecardsCreateSmartEvaluationEvent_Sms{}
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScorecardsCreateSmartEvaluationEvent_Sms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorecardsCreateSmartEvaluationEvent_Sms) ProtoMessage() {}

func (x *ScorecardsCreateSmartEvaluationEvent_Sms) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_scorecards_events_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorecardsCreateSmartEvaluationEvent_Sms.ProtoReflect.Descriptor instead.
func (*ScorecardsCreateSmartEvaluationEvent_Sms) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_scorecards_events_proto_rawDescGZIP(), []int{23, 1}
}

func (x *ScorecardsCreateSmartEvaluationEvent_Sms) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

var File_api_commons_audit_scorecards_events_proto protoreflect.FileDescriptor

const file_api_commons_audit_scorecards_events_proto_rawDesc = "" +
	"\n" +
	")api/commons/audit/scorecards_events.proto\x12\x11api.commons.audit\x1a\x15api/commons/acd.proto\x1a\x1capi/commons/scorecards.proto\x1a\x1egoogle/protobuf/duration.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xb6\x01\n" +
	"\x1dScorecardsCreateQuestionEvent\x12\x1b\n" +
	"\tauthor_id\x18\x01 \x01(\tR\bauthorId\x12#\n" +
	"\rquestion_text\x18\x02 \x01(\tR\fquestionText\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x121\n" +
	"\bquestion\x18\x04 \x01(\v2\x15.api.commons.QuestionR\bquestion\"\xef\x01\n" +
	"\x1dScorecardsUpdateQuestionEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12#\n" +
	"\rquestion_text\x18\x02 \x01(\tR\fquestionText\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12;\n" +
	"\vupdate_mask\x18\x04 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x121\n" +
	"\bquestion\x18\x05 \x01(\v2\x15.api.commons.QuestionR\bquestion\"\xd5\x01\n" +
	"\x1dScorecardsDeleteQuestionEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12#\n" +
	"\rquestion_text\x18\x02 \x01(\tR\fquestionText\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12!\n" +
	"\fcategory_ids\x18\x04 \x03(\x03R\vcategoryIds\x121\n" +
	"\bquestion\x18\x05 \x01(\v2\x15.api.commons.QuestionR\bquestion\"\xc7\x02\n" +
	"\x1eScorecardsCreateScorecardEvent\x12\x1b\n" +
	"\tauthor_id\x18\x01 \x01(\tR\bauthorId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"pass_score\x18\x04 \x01(\x01R\tpassScore\x125\n" +
	"\n" +
	"score_type\x18\x05 \x01(\x0e2\x16.api.commons.ScoreTypeR\tscoreType\x12D\n" +
	"\x0fevaluation_type\x18\x06 \x01(\x0e2\x1b.api.commons.EvaluationTypeR\x0eevaluationType\x124\n" +
	"\tscorecard\x18\a \x01(\v2\x16.api.commons.ScorecardR\tscorecard\"\xda\x03\n" +
	"\x1eScorecardsUpdateScorecardEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"pass_score\x18\x04 \x01(\x01R\tpassScore\x125\n" +
	"\n" +
	"score_type\x18\x05 \x01(\x0e2\x16.api.commons.ScoreTypeR\tscoreType\x12D\n" +
	"\x0fevaluation_type\x18\x06 \x01(\x0e2\x1b.api.commons.EvaluationTypeR\x0eevaluationType\x12%\n" +
	"\x0eallow_feedback\x18\a \x01(\bR\rallowFeedback\x121\n" +
	"\x05state\x18\b \x01(\x0e2\x1b.api.commons.ScorecardStateR\x05state\x12;\n" +
	"\vupdate_mask\x18\t \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x124\n" +
	"\tscorecard\x18\n" +
	" \x01(\v2\x16.api.commons.ScorecardR\tscorecard\"\xf6\x02\n" +
	"\x1eScorecardsDeleteScorecardEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"pass_score\x18\x04 \x01(\x01R\tpassScore\x125\n" +
	"\n" +
	"score_type\x18\x05 \x01(\x0e2\x16.api.commons.ScoreTypeR\tscoreType\x12D\n" +
	"\x0fevaluation_type\x18\x06 \x01(\x0e2\x1b.api.commons.EvaluationTypeR\x0eevaluationType\x121\n" +
	"\x05state\x18\a \x01(\x0e2\x1b.api.commons.ScorecardStateR\x05state\x124\n" +
	"\tscorecard\x18\b \x01(\v2\x16.api.commons.ScorecardR\tscorecard\"\xc6\x02\n" +
	"\x1dScorecardsCloneScorecardEvent\x12\x1b\n" +
	"\tauthor_id\x18\x01 \x01(\tR\bauthorId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"pass_score\x18\x04 \x01(\x01R\tpassScore\x125\n" +
	"\n" +
	"score_type\x18\x05 \x01(\x0e2\x16.api.commons.ScoreTypeR\tscoreType\x12D\n" +
	"\x0fevaluation_type\x18\x06 \x01(\x0e2\x1b.api.commons.EvaluationTypeR\x0eevaluationType\x124\n" +
	"\tscorecard\x18\a \x01(\v2\x16.api.commons.ScorecardR\tscorecard\"\xfe\x01\n" +
	"\x1fScorecardsCreateEvaluationEvent\x12#\n" +
	"\revaluation_id\x18\x01 \x01(\x03R\fevaluationId\x12!\n" +
	"\fscorecard_id\x18\x02 \x01(\x03R\vscorecardId\x12\x1b\n" +
	"\tscorer_id\x18\x03 \x01(\tR\bscorerId\x12\"\n" +
	"\ragent_user_id\x18\x04 \x01(\tR\vagentUserId\x12\x19\n" +
	"\bcall_sid\x18\x05 \x01(\x03R\acallSid\x127\n" +
	"\n" +
	"evaluation\x18\x06 \x01(\v2\x17.api.commons.EvaluationR\n" +
	"evaluation\"\xfe\x01\n" +
	"\x1fScorecardsUpdateEvaluationEvent\x12#\n" +
	"\revaluation_id\x18\x01 \x01(\x03R\fevaluationId\x12!\n" +
	"\fscorecard_id\x18\x02 \x01(\x03R\vscorecardId\x12\x1b\n" +
	"\tscorer_id\x18\x03 \x01(\tR\bscorerId\x12\"\n" +
	"\ragent_user_id\x18\x04 \x01(\tR\vagentUserId\x12\x19\n" +
	"\bcall_sid\x18\x05 \x01(\x03R\acallSid\x127\n" +
	"\n" +
	"evaluation\x18\x06 \x01(\v2\x17.api.commons.EvaluationR\n" +
	"evaluation\"\xfa\x01\n" +
	"\x1fScorecardsDeleteEvaluationEvent\x12#\n" +
	"\revaluation_id\x18\x01 \x01(\x03R\fevaluationId\x12!\n" +
	"\fscorecard_id\x18\x02 \x01(\x03R\vscorecardId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\"\n" +
	"\ragent_user_id\x18\x04 \x01(\tR\vagentUserId\x12\x19\n" +
	"\bcall_sid\x18\x05 \x01(\x03R\acallSid\x127\n" +
	"\n" +
	"evaluation\x18\x06 \x01(\v2\x17.api.commons.EvaluationR\n" +
	"evaluation\"\xb7\x01\n" +
	"\x1cScorecardsCreateSectionEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x16\n" +
	"\x06weight\x18\x04 \x01(\rR\x06weight\x12.\n" +
	"\asection\x18\x05 \x01(\v2\x14.api.commons.SectionR\asection\"\x93\x02\n" +
	"\x1cScorecardsUpdateSectionEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x16\n" +
	"\x06weight\x18\x04 \x01(\rR\x06weight\x12\x1d\n" +
	"\n" +
	"sort_order\x18\x05 \x01(\x05R\tsortOrder\x12;\n" +
	"\vupdate_mask\x18\x06 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12.\n" +
	"\asection\x18\a \x01(\v2\x14.api.commons.SectionR\asection\"\xb7\x01\n" +
	"\x1cScorecardsDeleteSectionEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x16\n" +
	"\x06weight\x18\x04 \x01(\rR\x06weight\x12.\n" +
	"\asection\x18\x05 \x01(\v2\x14.api.commons.SectionR\asection\"\xe2\x01\n" +
	"\x1dScorecardsCreateCategoryEvent\x12\x1b\n" +
	"\tauthor_id\x18\x01 \x01(\tR\bauthorId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x129\n" +
	"\n" +
	"created_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x121\n" +
	"\bcategory\x18\x05 \x01(\v2\x15.api.commons.CategoryR\bcategory\"\xe0\x01\n" +
	"\x1dScorecardsUpdateCategoryEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12;\n" +
	"\vupdate_mask\x18\x04 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x121\n" +
	"\bcategory\x18\x05 \x01(\v2\x15.api.commons.CategoryR\bcategory\"\xde\x01\n" +
	"\x1dScorecardsDeleteCategoryEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x129\n" +
	"\n" +
	"deleted_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tdeletedAt\x121\n" +
	"\bcategory\x18\x05 \x01(\v2\x15.api.commons.CategoryR\bcategory\"\xa3\x02\n" +
	"'ScorecardsCreateEvaluationQuestionEvent\x124\n" +
	"\x16evaluation_question_id\x18\x01 \x01(\x03R\x14evaluationQuestionId\x12#\n" +
	"\revaluation_id\x18\x02 \x01(\x03R\fevaluationId\x122\n" +
	"\x15scorecard_question_id\x18\x03 \x01(\x03R\x13scorecardQuestionId\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12P\n" +
	"\x13evaluation_question\x18\x05 \x01(\v2\x1f.api.commons.EvaluationQuestionR\x12evaluationQuestion\"\x92\x03\n" +
	"'ScorecardsUpdateEvaluationQuestionEvent\x124\n" +
	"\x16evaluation_question_id\x18\x01 \x01(\x03R\x14evaluationQuestionId\x12#\n" +
	"\revaluation_id\x18\x02 \x01(\x03R\fevaluationId\x122\n" +
	"\x15scorecard_question_id\x18\x03 \x01(\x03R\x13scorecardQuestionId\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12\x18\n" +
	"\askipped\x18\x05 \x01(\bR\askipped\x12\x16\n" +
	"\x06points\x18\x06 \x01(\x03R\x06points\x12;\n" +
	"\vupdate_mask\x18\a \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12P\n" +
	"\x13evaluation_question\x18\b \x01(\v2\x1f.api.commons.EvaluationQuestionR\x12evaluationQuestion\"\xa5\x02\n" +
	"'ScorecardsDeleteEvaluationQuestionEvent\x124\n" +
	"\x16evaluation_question_id\x18\x01 \x01(\x03R\x14evaluationQuestionId\x12#\n" +
	"\revaluation_id\x18\x02 \x01(\x03R\fevaluationId\x122\n" +
	"\x15scorecard_question_id\x18\x03 \x01(\x03R\x13scorecardQuestionId\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12R\n" +
	"\x14evaluation_questions\x18\x05 \x01(\v2\x1f.api.commons.EvaluationQuestionR\x13evaluationQuestions\"\xba\x02\n" +
	"&ScorecardsCreateScorecardQuestionEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1a\n" +
	"\bquestion\x18\x02 \x01(\tR\bquestion\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"allow_skip\x18\x04 \x01(\bR\tallowSkip\x12\x1d\n" +
	"\n" +
	"max_points\x18\x05 \x01(\x03R\tmaxPoints\x12,\n" +
	"\x12allow_multi_select\x18\x06 \x01(\bR\x10allowMultiSelect\x12M\n" +
	"\x12scorecard_question\x18\a \x01(\v2\x1e.api.commons.ScorecardQuestionR\x11scorecardQuestion\"\x96\x03\n" +
	"&ScorecardsUpdateScorecardQuestionEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1a\n" +
	"\bquestion\x18\x02 \x01(\tR\bquestion\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"allow_skip\x18\x04 \x01(\bR\tallowSkip\x12\x1d\n" +
	"\n" +
	"max_points\x18\x05 \x01(\x03R\tmaxPoints\x12,\n" +
	"\x12allow_multi_select\x18\x06 \x01(\bR\x10allowMultiSelect\x12\x1d\n" +
	"\n" +
	"sort_order\x18\a \x01(\x05R\tsortOrder\x12;\n" +
	"\vupdate_mask\x18\b \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12M\n" +
	"\x12scorecard_question\x18\t \x01(\v2\x1e.api.commons.ScorecardQuestionR\x11scorecardQuestion\"\xba\x02\n" +
	"&ScorecardsDeleteScorecardQuestionEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1a\n" +
	"\bquestion\x18\x02 \x01(\tR\bquestion\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"allow_skip\x18\x04 \x01(\bR\tallowSkip\x12\x1d\n" +
	"\n" +
	"max_points\x18\x05 \x01(\x03R\tmaxPoints\x12,\n" +
	"\x12allow_multi_select\x18\x06 \x01(\bR\x10allowMultiSelect\x12M\n" +
	"\x12scorecard_question\x18\a \x01(\v2\x1e.api.commons.ScorecardQuestionR\x11scorecardQuestion\"\x92\x03\n" +
	"#ScorecardsCreateAutoEvaluationEvent\x12,\n" +
	"\x12auto_evaluation_id\x18\x01 \x01(\x03R\x10autoEvaluationId\x12!\n" +
	"\fscorecard_id\x18\x02 \x01(\x03R\vscorecardId\x12\"\n" +
	"\ragent_user_id\x18\x03 \x01(\tR\vagentUserId\x12\x19\n" +
	"\bcall_sid\x18\x04 \x01(\x03R\acallSid\x127\n" +
	"\tcall_type\x18\x05 \x01(\x0e2\x1a.api.commons.CallType.EnumR\bcallType\x12%\n" +
	"\x0etranscript_sid\x18\x06 \x01(\x03R\rtranscriptSid\x125\n" +
	"\n" +
	"risk_level\x18\a \x01(\x0e2\x16.api.commons.RiskLevelR\triskLevel\x12D\n" +
	"\x0fauto_evaluation\x18\b \x01(\v2\x1b.api.commons.AutoEvaluationR\x0eautoEvaluation\"\xbc\x03\n" +
	"$ScorecardsCreateSmartEvaluationEvent\x12.\n" +
	"\x13smart_evaluation_id\x18\x01 \x01(\x03R\x11smartEvaluationId\x12%\n" +
	"\x0etranscript_sid\x18\x02 \x01(\x03R\rtranscriptSid\x12R\n" +
	"\x04call\x18\x03 \x01(\v2<.api.commons.audit.ScorecardsCreateSmartEvaluationEvent.CallH\x00R\x04call\x12O\n" +
	"\x03sms\x18\x04 \x01(\v2;.api.commons.audit.ScorecardsCreateSmartEvaluationEvent.SmsH\x00R\x03sms\x1aZ\n" +
	"\x04Call\x12\x19\n" +
	"\bcall_sid\x18\x01 \x01(\x03R\acallSid\x127\n" +
	"\tcall_type\x18\x02 \x01(\x0e2\x1a.api.commons.CallType.EnumR\bcallType\x1a0\n" +
	"\x03Sms\x12)\n" +
	"\x10conversation_sid\x18\x01 \x01(\x03R\x0fconversationSidB\n" +
	"\n" +
	"\bmetadataB\xc2\x01\n" +
	"\x15com.api.commons.auditB\x15ScorecardsEventsProtoP\x01Z,github.com/tcncloud/api-go/api/commons/audit\xa2\x02\x03ACA\xaa\x02\x11Api.Commons.Audit\xca\x02\x11Api\\Commons\\Audit\xe2\x02\x1dApi\\Commons\\Audit\\GPBMetadata\xea\x02\x13Api::Commons::Auditb\x06proto3"

var (
	file_api_commons_audit_scorecards_events_proto_rawDescOnce sync.Once
	file_api_commons_audit_scorecards_events_proto_rawDescData []byte
)

func file_api_commons_audit_scorecards_events_proto_rawDescGZIP() []byte {
	file_api_commons_audit_scorecards_events_proto_rawDescOnce.Do(func() {
		file_api_commons_audit_scorecards_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_commons_audit_scorecards_events_proto_rawDesc), len(file_api_commons_audit_scorecards_events_proto_rawDesc)))
	})
	return file_api_commons_audit_scorecards_events_proto_rawDescData
}

var file_api_commons_audit_scorecards_events_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_api_commons_audit_scorecards_events_proto_goTypes = []any{
	(*ScorecardsCreateQuestionEvent)(nil),             // 0: api.commons.audit.ScorecardsCreateQuestionEvent
	(*ScorecardsUpdateQuestionEvent)(nil),             // 1: api.commons.audit.ScorecardsUpdateQuestionEvent
	(*ScorecardsDeleteQuestionEvent)(nil),             // 2: api.commons.audit.ScorecardsDeleteQuestionEvent
	(*ScorecardsCreateScorecardEvent)(nil),            // 3: api.commons.audit.ScorecardsCreateScorecardEvent
	(*ScorecardsUpdateScorecardEvent)(nil),            // 4: api.commons.audit.ScorecardsUpdateScorecardEvent
	(*ScorecardsDeleteScorecardEvent)(nil),            // 5: api.commons.audit.ScorecardsDeleteScorecardEvent
	(*ScorecardsCloneScorecardEvent)(nil),             // 6: api.commons.audit.ScorecardsCloneScorecardEvent
	(*ScorecardsCreateEvaluationEvent)(nil),           // 7: api.commons.audit.ScorecardsCreateEvaluationEvent
	(*ScorecardsUpdateEvaluationEvent)(nil),           // 8: api.commons.audit.ScorecardsUpdateEvaluationEvent
	(*ScorecardsDeleteEvaluationEvent)(nil),           // 9: api.commons.audit.ScorecardsDeleteEvaluationEvent
	(*ScorecardsCreateSectionEvent)(nil),              // 10: api.commons.audit.ScorecardsCreateSectionEvent
	(*ScorecardsUpdateSectionEvent)(nil),              // 11: api.commons.audit.ScorecardsUpdateSectionEvent
	(*ScorecardsDeleteSectionEvent)(nil),              // 12: api.commons.audit.ScorecardsDeleteSectionEvent
	(*ScorecardsCreateCategoryEvent)(nil),             // 13: api.commons.audit.ScorecardsCreateCategoryEvent
	(*ScorecardsUpdateCategoryEvent)(nil),             // 14: api.commons.audit.ScorecardsUpdateCategoryEvent
	(*ScorecardsDeleteCategoryEvent)(nil),             // 15: api.commons.audit.ScorecardsDeleteCategoryEvent
	(*ScorecardsCreateEvaluationQuestionEvent)(nil),   // 16: api.commons.audit.ScorecardsCreateEvaluationQuestionEvent
	(*ScorecardsUpdateEvaluationQuestionEvent)(nil),   // 17: api.commons.audit.ScorecardsUpdateEvaluationQuestionEvent
	(*ScorecardsDeleteEvaluationQuestionEvent)(nil),   // 18: api.commons.audit.ScorecardsDeleteEvaluationQuestionEvent
	(*ScorecardsCreateScorecardQuestionEvent)(nil),    // 19: api.commons.audit.ScorecardsCreateScorecardQuestionEvent
	(*ScorecardsUpdateScorecardQuestionEvent)(nil),    // 20: api.commons.audit.ScorecardsUpdateScorecardQuestionEvent
	(*ScorecardsDeleteScorecardQuestionEvent)(nil),    // 21: api.commons.audit.ScorecardsDeleteScorecardQuestionEvent
	(*ScorecardsCreateAutoEvaluationEvent)(nil),       // 22: api.commons.audit.ScorecardsCreateAutoEvaluationEvent
	(*ScorecardsCreateSmartEvaluationEvent)(nil),      // 23: api.commons.audit.ScorecardsCreateSmartEvaluationEvent
	(*ScorecardsCreateSmartEvaluationEvent_Call)(nil), // 24: api.commons.audit.ScorecardsCreateSmartEvaluationEvent.Call
	(*ScorecardsCreateSmartEvaluationEvent_Sms)(nil),  // 25: api.commons.audit.ScorecardsCreateSmartEvaluationEvent.Sms
	(*commons.Question)(nil),                          // 26: api.commons.Question
	(*fieldmaskpb.FieldMask)(nil),                     // 27: google.protobuf.FieldMask
	(commons.ScoreType)(0),                            // 28: api.commons.ScoreType
	(commons.EvaluationType)(0),                       // 29: api.commons.EvaluationType
	(*commons.Scorecard)(nil),                         // 30: api.commons.Scorecard
	(commons.ScorecardState)(0),                       // 31: api.commons.ScorecardState
	(*commons.Evaluation)(nil),                        // 32: api.commons.Evaluation
	(*commons.Section)(nil),                           // 33: api.commons.Section
	(*timestamppb.Timestamp)(nil),                     // 34: google.protobuf.Timestamp
	(*commons.Category)(nil),                          // 35: api.commons.Category
	(*commons.EvaluationQuestion)(nil),                // 36: api.commons.EvaluationQuestion
	(*commons.ScorecardQuestion)(nil),                 // 37: api.commons.ScorecardQuestion
	(commons.CallType_Enum)(0),                        // 38: api.commons.CallType.Enum
	(commons.RiskLevel)(0),                            // 39: api.commons.RiskLevel
	(*commons.AutoEvaluation)(nil),                    // 40: api.commons.AutoEvaluation
}
var file_api_commons_audit_scorecards_events_proto_depIdxs = []int32{
	26, // 0: api.commons.audit.ScorecardsCreateQuestionEvent.question:type_name -> api.commons.Question
	27, // 1: api.commons.audit.ScorecardsUpdateQuestionEvent.update_mask:type_name -> google.protobuf.FieldMask
	26, // 2: api.commons.audit.ScorecardsUpdateQuestionEvent.question:type_name -> api.commons.Question
	26, // 3: api.commons.audit.ScorecardsDeleteQuestionEvent.question:type_name -> api.commons.Question
	28, // 4: api.commons.audit.ScorecardsCreateScorecardEvent.score_type:type_name -> api.commons.ScoreType
	29, // 5: api.commons.audit.ScorecardsCreateScorecardEvent.evaluation_type:type_name -> api.commons.EvaluationType
	30, // 6: api.commons.audit.ScorecardsCreateScorecardEvent.scorecard:type_name -> api.commons.Scorecard
	28, // 7: api.commons.audit.ScorecardsUpdateScorecardEvent.score_type:type_name -> api.commons.ScoreType
	29, // 8: api.commons.audit.ScorecardsUpdateScorecardEvent.evaluation_type:type_name -> api.commons.EvaluationType
	31, // 9: api.commons.audit.ScorecardsUpdateScorecardEvent.state:type_name -> api.commons.ScorecardState
	27, // 10: api.commons.audit.ScorecardsUpdateScorecardEvent.update_mask:type_name -> google.protobuf.FieldMask
	30, // 11: api.commons.audit.ScorecardsUpdateScorecardEvent.scorecard:type_name -> api.commons.Scorecard
	28, // 12: api.commons.audit.ScorecardsDeleteScorecardEvent.score_type:type_name -> api.commons.ScoreType
	29, // 13: api.commons.audit.ScorecardsDeleteScorecardEvent.evaluation_type:type_name -> api.commons.EvaluationType
	31, // 14: api.commons.audit.ScorecardsDeleteScorecardEvent.state:type_name -> api.commons.ScorecardState
	30, // 15: api.commons.audit.ScorecardsDeleteScorecardEvent.scorecard:type_name -> api.commons.Scorecard
	28, // 16: api.commons.audit.ScorecardsCloneScorecardEvent.score_type:type_name -> api.commons.ScoreType
	29, // 17: api.commons.audit.ScorecardsCloneScorecardEvent.evaluation_type:type_name -> api.commons.EvaluationType
	30, // 18: api.commons.audit.ScorecardsCloneScorecardEvent.scorecard:type_name -> api.commons.Scorecard
	32, // 19: api.commons.audit.ScorecardsCreateEvaluationEvent.evaluation:type_name -> api.commons.Evaluation
	32, // 20: api.commons.audit.ScorecardsUpdateEvaluationEvent.evaluation:type_name -> api.commons.Evaluation
	32, // 21: api.commons.audit.ScorecardsDeleteEvaluationEvent.evaluation:type_name -> api.commons.Evaluation
	33, // 22: api.commons.audit.ScorecardsCreateSectionEvent.section:type_name -> api.commons.Section
	27, // 23: api.commons.audit.ScorecardsUpdateSectionEvent.update_mask:type_name -> google.protobuf.FieldMask
	33, // 24: api.commons.audit.ScorecardsUpdateSectionEvent.section:type_name -> api.commons.Section
	33, // 25: api.commons.audit.ScorecardsDeleteSectionEvent.section:type_name -> api.commons.Section
	34, // 26: api.commons.audit.ScorecardsCreateCategoryEvent.created_at:type_name -> google.protobuf.Timestamp
	35, // 27: api.commons.audit.ScorecardsCreateCategoryEvent.category:type_name -> api.commons.Category
	27, // 28: api.commons.audit.ScorecardsUpdateCategoryEvent.update_mask:type_name -> google.protobuf.FieldMask
	35, // 29: api.commons.audit.ScorecardsUpdateCategoryEvent.category:type_name -> api.commons.Category
	34, // 30: api.commons.audit.ScorecardsDeleteCategoryEvent.deleted_at:type_name -> google.protobuf.Timestamp
	35, // 31: api.commons.audit.ScorecardsDeleteCategoryEvent.category:type_name -> api.commons.Category
	36, // 32: api.commons.audit.ScorecardsCreateEvaluationQuestionEvent.evaluation_question:type_name -> api.commons.EvaluationQuestion
	27, // 33: api.commons.audit.ScorecardsUpdateEvaluationQuestionEvent.update_mask:type_name -> google.protobuf.FieldMask
	36, // 34: api.commons.audit.ScorecardsUpdateEvaluationQuestionEvent.evaluation_question:type_name -> api.commons.EvaluationQuestion
	36, // 35: api.commons.audit.ScorecardsDeleteEvaluationQuestionEvent.evaluation_questions:type_name -> api.commons.EvaluationQuestion
	37, // 36: api.commons.audit.ScorecardsCreateScorecardQuestionEvent.scorecard_question:type_name -> api.commons.ScorecardQuestion
	27, // 37: api.commons.audit.ScorecardsUpdateScorecardQuestionEvent.update_mask:type_name -> google.protobuf.FieldMask
	37, // 38: api.commons.audit.ScorecardsUpdateScorecardQuestionEvent.scorecard_question:type_name -> api.commons.ScorecardQuestion
	37, // 39: api.commons.audit.ScorecardsDeleteScorecardQuestionEvent.scorecard_question:type_name -> api.commons.ScorecardQuestion
	38, // 40: api.commons.audit.ScorecardsCreateAutoEvaluationEvent.call_type:type_name -> api.commons.CallType.Enum
	39, // 41: api.commons.audit.ScorecardsCreateAutoEvaluationEvent.risk_level:type_name -> api.commons.RiskLevel
	40, // 42: api.commons.audit.ScorecardsCreateAutoEvaluationEvent.auto_evaluation:type_name -> api.commons.AutoEvaluation
	24, // 43: api.commons.audit.ScorecardsCreateSmartEvaluationEvent.call:type_name -> api.commons.audit.ScorecardsCreateSmartEvaluationEvent.Call
	25, // 44: api.commons.audit.ScorecardsCreateSmartEvaluationEvent.sms:type_name -> api.commons.audit.ScorecardsCreateSmartEvaluationEvent.Sms
	38, // 45: api.commons.audit.ScorecardsCreateSmartEvaluationEvent.Call.call_type:type_name -> api.commons.CallType.Enum
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_api_commons_audit_scorecards_events_proto_init() }
func file_api_commons_audit_scorecards_events_proto_init() {
	if File_api_commons_audit_scorecards_events_proto != nil {
		return
	}
	file_api_commons_audit_scorecards_events_proto_msgTypes[23].OneofWrappers = []any{
		(*ScorecardsCreateSmartEvaluationEvent_Call_)(nil),
		(*ScorecardsCreateSmartEvaluationEvent_Sms_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_commons_audit_scorecards_events_proto_rawDesc), len(file_api_commons_audit_scorecards_events_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_audit_scorecards_events_proto_goTypes,
		DependencyIndexes: file_api_commons_audit_scorecards_events_proto_depIdxs,
		MessageInfos:      file_api_commons_audit_scorecards_events_proto_msgTypes,
	}.Build()
	File_api_commons_audit_scorecards_events_proto = out.File
	file_api_commons_audit_scorecards_events_proto_goTypes = nil
	file_api_commons_audit_scorecards_events_proto_depIdxs = nil
}
