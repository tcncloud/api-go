// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: api/commons/audit/audit.proto

package audit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This represents a generic audit event that is sent to the audit service
type AuditEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Org ID
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Region ID
	RegionId string `protobuf:"bytes,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Cluster ID
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Timestamp when this event has been generated
	EventTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// this is an UUID so we can deduplicate at consumer side
	AuditId string `protobuf:"bytes,5,opt,name=audit_id,json=auditId,proto3" json:"audit_id,omitempty"`
	// Application-specific identifier.
	// All aplications that generate audit events must have a unique numerical ID assigned within a specific event class
	// Vana 200 Omni 300 Asm 400 ....
	// for each event type. (see event_types.proto)
	EventType EventType `protobuf:"varint,10,opt,name=event_type,json=eventType,proto3,enum=api.commons.audit.EventType" json:"event_type,omitempty"`
	// Actual event payload. This is application specific
	//
	// Types that are valid to be assigned to Event:
	//
	//	*AuditEvent_XDummyEvent
	//	*AuditEvent_VanaFlagEvent
	//	*AuditEvent_VanaFlagReviewEvent
	//	*AuditEvent_VanaBillingReportEvent
	//	*AuditEvent_VanaFlagSummaryEvent
	//	*AuditEvent_VanaPhraseCorrectionEvent
	//	*AuditEvent_VanaCreateTranscriptEvent
	//	*AuditEvent_VanaCreateSentimentEvent
	//	*AuditEvent_VanaCreateSummaryEvent
	//	*AuditEvent_OmnichannelCreateProjectEvent
	//	*AuditEvent_OmnichannelCreateCampaignEvent
	//	*AuditEvent_OmnichannelDailyProjectReportEvent
	//	*AuditEvent_OmnichannelDailyConversationReportEvent
	//	*AuditEvent_OmnichannelAgentAssignConversationEvent
	//	*AuditEvent_OmnichannelAgentUnassignConversationEvent
	//	*AuditEvent_OmnichannelAgentReassignConversationEvent
	//	*AuditEvent_OmnichannelT10Event
	//	*AuditEvent_OmnichannelCustomerText_MessageEvent
	//	*AuditEvent_OmnichannelAgentTextMessageEvent
	//	*AuditEvent_OmnichannelFinishWrapUpEvent
	//	*AuditEvent_OmnichannelBeginWrapUpEvent
	//	*AuditEvent_OmnichannelT11Event
	//	*AuditEvent_OmnichannelCreateConversationEvent
	//	*AuditEvent_OmnichannelAgentSuspendEvent
	//	*AuditEvent_OmnichannelCloseConversationEvent
	//	*AuditEvent_OmnichannelManagerTextMessageEvent
	//	*AuditEvent_OmnichannelUpdateCampaignEvent
	//	*AuditEvent_OmnichannelSetConversationCollectedDataEvent
	//	*AuditEvent_OmnichannelCompleteCampaignEvent
	//	*AuditEvent_OmnichannelArchiveCampaignEvent
	//	*AuditEvent_OmnichannelPauseCampaignEvent
	//	*AuditEvent_OmnichannelResumeCampaignEvent
	//	*AuditEvent_OmnichannelStartCampaignEvent
	//	*AuditEvent_OmnichannelScheduleModuleEvent
	//	*AuditEvent_OmnichannelStartModuleEvent
	//	*AuditEvent_OmnichannelPauseModuleEvent
	//	*AuditEvent_OmnichannelResumeModuleEvent
	//	*AuditEvent_OmnichannelErrorModuleEvent
	//	*AuditEvent_OmnichannelSuccessModuleEvent
	//	*AuditEvent_OmnichannelFailModuleEvent
	//	*AuditEvent_OmnichannelCompleteModuleEvent
	//	*AuditEvent_OmnichannelArchiveModuleEvent
	//	*AuditEvent_OmnichannelUpdateModuleEvent
	//	*AuditEvent_OmnichannelAddSmsMessageSentModuleEvent
	//	*AuditEvent_OmnichannelModuleInitialReplyEvent
	//	*AuditEvent_OmnichannelTaskMessageSentEvent
	//	*AuditEvent_OmnichannelConnectedInboxPollEvent
	//	*AuditEvent_OmnichannelConnectedInboxCreatedEvent
	//	*AuditEvent_OmnichannelAgentMessageUnitsEvent
	//	*AuditEvent_OmnichannelManagerMessageUnitsEvent
	//	*AuditEvent_OmnichannelCustomerMessageUnitsEvent
	//	*AuditEvent_OmnichannelSystemMessageUnitsEvent
	//	*AuditEvent_OmnichannelPaymentLinkSentEvent
	//	*AuditEvent_OmnichannelManualApproveTaskAcceptedEvent
	//	*AuditEvent_OmnichannelManualApproveTaskRejectedEvent
	//	*AuditEvent_OmnichannelManualApproveTaskTimeoutEvent
	//	*AuditEvent_OmnichannelManualApproveTaskRequeueEvent
	//	*AuditEvent_OmnichannelTranscriptSavedEvent
	//	*AuditEvent_OmnichannelMessageSentEvent
	//	*AuditEvent_OmnichannelProviderResponseEvent
	//	*AuditEvent_OmnichannelProviderMessageFailedEvent
	//	*AuditEvent_AsmAgentLoginEvent
	//	*AuditEvent_AsmOpenVoiceEvent
	//	*AuditEvent_AsmOpenOmniAgentEvent
	//	*AuditEvent_AsmActivateConversationEvent
	//	*AuditEvent_AsmDeactivateConversationEvent
	//	*AuditEvent_AsmAgentStateChangedEvent
	//	*AuditEvent_AsmAgentLogoutEvent
	//	*AuditEvent_AsmPauseEvent
	//	*AuditEvent_AsmResumeEvent
	//	*AuditEvent_AsmConversationPulledEvent
	//	*AuditEvent_ScorecardsCreateQuestionEvent
	//	*AuditEvent_ScorecardsUpdateQuestionEvent
	//	*AuditEvent_ScorecardsDeleteQuestionEvent
	//	*AuditEvent_ScorecardsCreateScorecardEvent
	//	*AuditEvent_ScorecardsUpdateScorecardEvent
	//	*AuditEvent_ScorecardsDeleteScorecardEvent
	//	*AuditEvent_ScorecardsCloneScorecardEvent
	//	*AuditEvent_ScorecardsCreateEvaluationEvent
	//	*AuditEvent_ScorecardsDeleteEvaluationEvent
	//	*AuditEvent_ScorecardsCreateSectionEvent
	//	*AuditEvent_ScorecardsUpdateSectionEvent
	//	*AuditEvent_ScorecardsDeleteSectionEvent
	//	*AuditEvent_ScorecardsCreateCategoryEvent
	//	*AuditEvent_ScorecardsUpdateCategoryEvent
	//	*AuditEvent_ScorecardsDeleteCategoryEvent
	//	*AuditEvent_ScorecardsCreateEvaluationQuestionEvent
	//	*AuditEvent_ScorecardsUpdateEvaluationQuestionEvent
	//	*AuditEvent_ScorecardsDeleteEvaluationQuestionEvent
	//	*AuditEvent_ScorecardsCreateScorecardQuestionEvent
	//	*AuditEvent_ScorecardsUpdateScorecardQuestionEvent
	//	*AuditEvent_ScorecardsDeleteScorecardQuestionEvent
	//	*AuditEvent_ScorecardsCreateAutoEvaluationEvent
	//	*AuditEvent_ScorecardsUpdateEvaluationEvent
	//	*AuditEvent_ScorecardsCreateSmartEvaluationEvent
	//	*AuditEvent_TicketEvent
	//	*AuditEvent_ComplianceRndQueryEvent
	//	*AuditEvent_ComplianceRndQueryCachedEvent
	//	*AuditEvent_AgentTrainingCreateLearningOpportunityEvent
	//	*AuditEvent_LmsPipelineFailureEvent
	//	*AuditEvent_LmsPipelineNoOutputEvent
	//	*AuditEvent_LmsPipelineSuccessfulEvent
	//	*AuditEvent_BillingCommitBillingPlanEvent
	//	*AuditEvent_BillingCreateBillingPlanEvent
	//	*AuditEvent_BillingCreateInvoiceEvent
	//	*AuditEvent_BillingCreateRateDefinitionEvent
	//	*AuditEvent_BillingDeleteBillingPlanEvent
	//	*AuditEvent_BillingDeleteInvoiceEvent
	//	*AuditEvent_BillingDeleteRateDefinitionEvent
	//	*AuditEvent_BillingExportInvoiceEvent
	//	*AuditEvent_BillingUpdateBillingPlanEvent
	//	*AuditEvent_BillingUpdateInvoiceEvent
	//	*AuditEvent_BillingUpdateRateDefinitionEvent
	//	*AuditEvent_BillingRatedItemsGeneratedEvent
	//	*AuditEvent_DeliveryFailureEvent
	//	*AuditEvent_DeliverySuccessEvent
	//	*AuditEvent_ContactManagerEntryAddEvent
	//	*AuditEvent_ContactManagerEntryGetEncEvent
	//	*AuditEvent_ContactManagerDeleteEvent
	//	*AuditEvent_ContactManagerKycEvent
	//	*AuditEvent_ContactManagerEntryEditEvent
	//	*AuditEvent_ContactManagerListUploadEvent
	//	*AuditEvent_ContactManagerKycVerificationEvent
	//	*AuditEvent_ContactManagerEntryDeleteEvent
	//	*AuditEvent_ContactManagerEntryExpungeEvent
	//	*AuditEvent_ContactManagerEntityAssociationEvent
	//	*AuditEvent_AccessTokensExpiringEvent
	Event         isAuditEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditEvent) Reset() {
	*x = AuditEvent{}
	mi := &file_api_commons_audit_audit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent) ProtoMessage() {}

func (x *AuditEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_audit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent.ProtoReflect.Descriptor instead.
func (*AuditEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_audit_proto_rawDescGZIP(), []int{0}
}

func (x *AuditEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *AuditEvent) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *AuditEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AuditEvent) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *AuditEvent) GetAuditId() string {
	if x != nil {
		return x.AuditId
	}
	return ""
}

func (x *AuditEvent) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_DUMMY_APPLICATION
}

func (x *AuditEvent) GetEvent() isAuditEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *AuditEvent) GetXDummyEvent() *DummyEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_XDummyEvent); ok {
			return x.XDummyEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetVanaFlagEvent() *VanaFlagEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_VanaFlagEvent); ok {
			return x.VanaFlagEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetVanaFlagReviewEvent() *VanaFlagReviewEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_VanaFlagReviewEvent); ok {
			return x.VanaFlagReviewEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetVanaBillingReportEvent() *VanaBillingReportEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_VanaBillingReportEvent); ok {
			return x.VanaBillingReportEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetVanaFlagSummaryEvent() *VanaFlagSummaryEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_VanaFlagSummaryEvent); ok {
			return x.VanaFlagSummaryEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetVanaPhraseCorrectionEvent() *VanaPhraseCorrectionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_VanaPhraseCorrectionEvent); ok {
			return x.VanaPhraseCorrectionEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetVanaCreateTranscriptEvent() *VanaCreateTranscriptEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_VanaCreateTranscriptEvent); ok {
			return x.VanaCreateTranscriptEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetVanaCreateSentimentEvent() *VanaCreateSentimentEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_VanaCreateSentimentEvent); ok {
			return x.VanaCreateSentimentEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetVanaCreateSummaryEvent() *VanaCreateSummaryEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_VanaCreateSummaryEvent); ok {
			return x.VanaCreateSummaryEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelCreateProjectEvent() *OmnichannelCreateProjectEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelCreateProjectEvent); ok {
			return x.OmnichannelCreateProjectEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelCreateCampaignEvent() *OmnichannelCreateCampaignEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelCreateCampaignEvent); ok {
			return x.OmnichannelCreateCampaignEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelDailyProjectReportEvent() *OmnichannelDailyProjectReportEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelDailyProjectReportEvent); ok {
			return x.OmnichannelDailyProjectReportEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelDailyConversationReportEvent() *OmnichannelDailyConversationReportEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelDailyConversationReportEvent); ok {
			return x.OmnichannelDailyConversationReportEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelAgentAssignConversationEvent() *OmnichannelAgentAssignConversationEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelAgentAssignConversationEvent); ok {
			return x.OmnichannelAgentAssignConversationEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelAgentUnassignConversationEvent() *OmnichannelAgentUnassignConversationEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelAgentUnassignConversationEvent); ok {
			return x.OmnichannelAgentUnassignConversationEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelAgentReassignConversationEvent() *OmnichannelAgentReassignConversationEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelAgentReassignConversationEvent); ok {
			return x.OmnichannelAgentReassignConversationEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelT10Event() *OmnichannelT10Event {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelT10Event); ok {
			return x.OmnichannelT10Event
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetOmnichannelCustomerText_MessageEvent() *OmnichannelCustomerTextMessageEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelCustomerText_MessageEvent); ok {
			return x.OmnichannelCustomerText_MessageEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetOmnichannelAgentTextMessageEvent() *OmnichannelAgentTextMessageEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelAgentTextMessageEvent); ok {
			return x.OmnichannelAgentTextMessageEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelFinishWrapUpEvent() *OmnichannelFinishWrapUpEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelFinishWrapUpEvent); ok {
			return x.OmnichannelFinishWrapUpEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelBeginWrapUpEvent() *OmnichannelBeginWrapUpEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelBeginWrapUpEvent); ok {
			return x.OmnichannelBeginWrapUpEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelT11Event() *OmnichannelT11Event {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelT11Event); ok {
			return x.OmnichannelT11Event
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelCreateConversationEvent() *OmnichannelCreateConversationEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelCreateConversationEvent); ok {
			return x.OmnichannelCreateConversationEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelAgentSuspendEvent() *OmnichannelAgentSuspendEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelAgentSuspendEvent); ok {
			return x.OmnichannelAgentSuspendEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelCloseConversationEvent() *OmnichannelCloseConversationEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelCloseConversationEvent); ok {
			return x.OmnichannelCloseConversationEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetOmnichannelManagerTextMessageEvent() *OmnichannelManagerTextMessageEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelManagerTextMessageEvent); ok {
			return x.OmnichannelManagerTextMessageEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelUpdateCampaignEvent() *OmnichannelUpdateCampaignEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelUpdateCampaignEvent); ok {
			return x.OmnichannelUpdateCampaignEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelSetConversationCollectedDataEvent() *OmnichannelSetConversationCollectedDataEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelSetConversationCollectedDataEvent); ok {
			return x.OmnichannelSetConversationCollectedDataEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelCompleteCampaignEvent() *OmnichannelCompleteCampaignEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelCompleteCampaignEvent); ok {
			return x.OmnichannelCompleteCampaignEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelArchiveCampaignEvent() *OmnichannelArchiveCampaignEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelArchiveCampaignEvent); ok {
			return x.OmnichannelArchiveCampaignEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelPauseCampaignEvent() *OmnichannelPauseCampaignEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelPauseCampaignEvent); ok {
			return x.OmnichannelPauseCampaignEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelResumeCampaignEvent() *OmnichannelResumeCampaignEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelResumeCampaignEvent); ok {
			return x.OmnichannelResumeCampaignEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelStartCampaignEvent() *OmnichannelStartCampaignEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelStartCampaignEvent); ok {
			return x.OmnichannelStartCampaignEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelScheduleModuleEvent() *OmnichannelScheduleModuleEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelScheduleModuleEvent); ok {
			return x.OmnichannelScheduleModuleEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelStartModuleEvent() *OmnichannelStartModuleEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelStartModuleEvent); ok {
			return x.OmnichannelStartModuleEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelPauseModuleEvent() *OmnichannelPauseModuleEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelPauseModuleEvent); ok {
			return x.OmnichannelPauseModuleEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelResumeModuleEvent() *OmnichannelResumeModuleEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelResumeModuleEvent); ok {
			return x.OmnichannelResumeModuleEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelErrorModuleEvent() *OmnichannelErrorModuleEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelErrorModuleEvent); ok {
			return x.OmnichannelErrorModuleEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelSuccessModuleEvent() *OmnichannelSuccessModuleEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelSuccessModuleEvent); ok {
			return x.OmnichannelSuccessModuleEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelFailModuleEvent() *OmnichannelFailModuleEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelFailModuleEvent); ok {
			return x.OmnichannelFailModuleEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelCompleteModuleEvent() *OmnichannelCompleteModuleEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelCompleteModuleEvent); ok {
			return x.OmnichannelCompleteModuleEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelArchiveModuleEvent() *OmnichannelArchiveModuleEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelArchiveModuleEvent); ok {
			return x.OmnichannelArchiveModuleEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelUpdateModuleEvent() *OmnichannelUpdateModuleEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelUpdateModuleEvent); ok {
			return x.OmnichannelUpdateModuleEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetOmnichannelAddSmsMessageSentModuleEvent() *OmnichannelSmsMessageSentModuleEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelAddSmsMessageSentModuleEvent); ok {
			return x.OmnichannelAddSmsMessageSentModuleEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetOmnichannelModuleInitialReplyEvent() *OmnichannelModuleInitialReplyEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelModuleInitialReplyEvent); ok {
			return x.OmnichannelModuleInitialReplyEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetOmnichannelTaskMessageSentEvent() *OmnichannelTaskMessageSentEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelTaskMessageSentEvent); ok {
			return x.OmnichannelTaskMessageSentEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelConnectedInboxPollEvent() *OmnichannelConnectedInboxPollEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelConnectedInboxPollEvent); ok {
			return x.OmnichannelConnectedInboxPollEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelConnectedInboxCreatedEvent() *OmnichannelConnectedInboxCreatedEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelConnectedInboxCreatedEvent); ok {
			return x.OmnichannelConnectedInboxCreatedEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetOmnichannelAgentMessageUnitsEvent() *OmnichannelAgentMessageUnitsEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelAgentMessageUnitsEvent); ok {
			return x.OmnichannelAgentMessageUnitsEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetOmnichannelManagerMessageUnitsEvent() *OmnichannelManagerMessageUnitsEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelManagerMessageUnitsEvent); ok {
			return x.OmnichannelManagerMessageUnitsEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetOmnichannelCustomerMessageUnitsEvent() *OmnichannelCustomerMessageUnitsEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelCustomerMessageUnitsEvent); ok {
			return x.OmnichannelCustomerMessageUnitsEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetOmnichannelSystemMessageUnitsEvent() *OmnichannelSystemMessageUnitsEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelSystemMessageUnitsEvent); ok {
			return x.OmnichannelSystemMessageUnitsEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelPaymentLinkSentEvent() *OmnichannelPaymentLinkSentEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelPaymentLinkSentEvent); ok {
			return x.OmnichannelPaymentLinkSentEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelManualApproveTaskAcceptedEvent() *OmnichannelManualApproveTaskAcceptedEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelManualApproveTaskAcceptedEvent); ok {
			return x.OmnichannelManualApproveTaskAcceptedEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelManualApproveTaskRejectedEvent() *OmnichannelManualApproveTaskRejectedEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelManualApproveTaskRejectedEvent); ok {
			return x.OmnichannelManualApproveTaskRejectedEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelManualApproveTaskTimeoutEvent() *OmnichannelManualApproveTaskTimeoutEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelManualApproveTaskTimeoutEvent); ok {
			return x.OmnichannelManualApproveTaskTimeoutEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelManualApproveTaskRequeueEvent() *OmnichannelManualApproveTaskRequeueEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelManualApproveTaskRequeueEvent); ok {
			return x.OmnichannelManualApproveTaskRequeueEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelTranscriptSavedEvent() *OmnichannelTranscriptSavedEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelTranscriptSavedEvent); ok {
			return x.OmnichannelTranscriptSavedEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelMessageSentEvent() *OmnichannelMessageSentEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelMessageSentEvent); ok {
			return x.OmnichannelMessageSentEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelProviderResponseEvent() *OmnichannelProviderResponseEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelProviderResponseEvent); ok {
			return x.OmnichannelProviderResponseEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetOmnichannelProviderMessageFailedEvent() *OmnichannelProviderMessageFailedEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_OmnichannelProviderMessageFailedEvent); ok {
			return x.OmnichannelProviderMessageFailedEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetAsmAgentLoginEvent() *AsmAgentLoginEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_AsmAgentLoginEvent); ok {
			return x.AsmAgentLoginEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetAsmOpenVoiceEvent() *AsmOpenVoiceEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_AsmOpenVoiceEvent); ok {
			return x.AsmOpenVoiceEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetAsmOpenOmniAgentEvent() *AsmOpenOmniAgentEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_AsmOpenOmniAgentEvent); ok {
			return x.AsmOpenOmniAgentEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetAsmActivateConversationEvent() *AsmActivateConversationEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_AsmActivateConversationEvent); ok {
			return x.AsmActivateConversationEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetAsmDeactivateConversationEvent() *AsmDeactivateConversationEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_AsmDeactivateConversationEvent); ok {
			return x.AsmDeactivateConversationEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetAsmAgentStateChangedEvent() *AsmAgentStateChangedEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_AsmAgentStateChangedEvent); ok {
			return x.AsmAgentStateChangedEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetAsmAgentLogoutEvent() *AsmAgentLogoutEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_AsmAgentLogoutEvent); ok {
			return x.AsmAgentLogoutEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetAsmPauseEvent() *AsmPauseEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_AsmPauseEvent); ok {
			return x.AsmPauseEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetAsmResumeEvent() *AsmResumeEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_AsmResumeEvent); ok {
			return x.AsmResumeEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetAsmConversationPulledEvent() *AsmConversationPulledEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_AsmConversationPulledEvent); ok {
			return x.AsmConversationPulledEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsCreateQuestionEvent() *ScorecardsCreateQuestionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsCreateQuestionEvent); ok {
			return x.ScorecardsCreateQuestionEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsUpdateQuestionEvent() *ScorecardsUpdateQuestionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsUpdateQuestionEvent); ok {
			return x.ScorecardsUpdateQuestionEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsDeleteQuestionEvent() *ScorecardsDeleteQuestionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsDeleteQuestionEvent); ok {
			return x.ScorecardsDeleteQuestionEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsCreateScorecardEvent() *ScorecardsCreateScorecardEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsCreateScorecardEvent); ok {
			return x.ScorecardsCreateScorecardEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsUpdateScorecardEvent() *ScorecardsUpdateScorecardEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsUpdateScorecardEvent); ok {
			return x.ScorecardsUpdateScorecardEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsDeleteScorecardEvent() *ScorecardsDeleteScorecardEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsDeleteScorecardEvent); ok {
			return x.ScorecardsDeleteScorecardEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsCloneScorecardEvent() *ScorecardsCloneScorecardEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsCloneScorecardEvent); ok {
			return x.ScorecardsCloneScorecardEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsCreateEvaluationEvent() *ScorecardsCreateEvaluationEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsCreateEvaluationEvent); ok {
			return x.ScorecardsCreateEvaluationEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsDeleteEvaluationEvent() *ScorecardsDeleteEvaluationEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsDeleteEvaluationEvent); ok {
			return x.ScorecardsDeleteEvaluationEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsCreateSectionEvent() *ScorecardsCreateSectionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsCreateSectionEvent); ok {
			return x.ScorecardsCreateSectionEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsUpdateSectionEvent() *ScorecardsUpdateSectionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsUpdateSectionEvent); ok {
			return x.ScorecardsUpdateSectionEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsDeleteSectionEvent() *ScorecardsDeleteSectionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsDeleteSectionEvent); ok {
			return x.ScorecardsDeleteSectionEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsCreateCategoryEvent() *ScorecardsCreateCategoryEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsCreateCategoryEvent); ok {
			return x.ScorecardsCreateCategoryEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsUpdateCategoryEvent() *ScorecardsUpdateCategoryEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsUpdateCategoryEvent); ok {
			return x.ScorecardsUpdateCategoryEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsDeleteCategoryEvent() *ScorecardsDeleteCategoryEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsDeleteCategoryEvent); ok {
			return x.ScorecardsDeleteCategoryEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsCreateEvaluationQuestionEvent() *ScorecardsCreateEvaluationQuestionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsCreateEvaluationQuestionEvent); ok {
			return x.ScorecardsCreateEvaluationQuestionEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsUpdateEvaluationQuestionEvent() *ScorecardsUpdateEvaluationQuestionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsUpdateEvaluationQuestionEvent); ok {
			return x.ScorecardsUpdateEvaluationQuestionEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsDeleteEvaluationQuestionEvent() *ScorecardsDeleteEvaluationQuestionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsDeleteEvaluationQuestionEvent); ok {
			return x.ScorecardsDeleteEvaluationQuestionEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsCreateScorecardQuestionEvent() *ScorecardsCreateScorecardQuestionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsCreateScorecardQuestionEvent); ok {
			return x.ScorecardsCreateScorecardQuestionEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsUpdateScorecardQuestionEvent() *ScorecardsUpdateScorecardQuestionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsUpdateScorecardQuestionEvent); ok {
			return x.ScorecardsUpdateScorecardQuestionEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsDeleteScorecardQuestionEvent() *ScorecardsDeleteScorecardQuestionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsDeleteScorecardQuestionEvent); ok {
			return x.ScorecardsDeleteScorecardQuestionEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsCreateAutoEvaluationEvent() *ScorecardsCreateAutoEvaluationEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsCreateAutoEvaluationEvent); ok {
			return x.ScorecardsCreateAutoEvaluationEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsUpdateEvaluationEvent() *ScorecardsUpdateEvaluationEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsUpdateEvaluationEvent); ok {
			return x.ScorecardsUpdateEvaluationEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetScorecardsCreateSmartEvaluationEvent() *ScorecardsCreateSmartEvaluationEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ScorecardsCreateSmartEvaluationEvent); ok {
			return x.ScorecardsCreateSmartEvaluationEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetTicketEvent() *TicketEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_TicketEvent); ok {
			return x.TicketEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetComplianceRndQueryEvent() *ComplianceRndQueryEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ComplianceRndQueryEvent); ok {
			return x.ComplianceRndQueryEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetComplianceRndQueryCachedEvent() *ComplianceRndQueryEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ComplianceRndQueryCachedEvent); ok {
			return x.ComplianceRndQueryCachedEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetAgentTrainingCreateLearningOpportunityEvent() *AgentTrainingCreateLearningOpportunityEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_AgentTrainingCreateLearningOpportunityEvent); ok {
			return x.AgentTrainingCreateLearningOpportunityEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetLmsPipelineFailureEvent() *LMSPipelineFailureEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_LmsPipelineFailureEvent); ok {
			return x.LmsPipelineFailureEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetLmsPipelineNoOutputEvent() *LMSPipelineNoOutputEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_LmsPipelineNoOutputEvent); ok {
			return x.LmsPipelineNoOutputEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetLmsPipelineSuccessfulEvent() *LMSPipelineSuccessfulEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_LmsPipelineSuccessfulEvent); ok {
			return x.LmsPipelineSuccessfulEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetBillingCommitBillingPlanEvent() *BillingCommitBillingPlanEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_BillingCommitBillingPlanEvent); ok {
			return x.BillingCommitBillingPlanEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetBillingCreateBillingPlanEvent() *BillingCreateBillingPlanEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_BillingCreateBillingPlanEvent); ok {
			return x.BillingCreateBillingPlanEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetBillingCreateInvoiceEvent() *BillingCreateInvoiceEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_BillingCreateInvoiceEvent); ok {
			return x.BillingCreateInvoiceEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetBillingCreateRateDefinitionEvent() *BillingCreateRateDefinitionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_BillingCreateRateDefinitionEvent); ok {
			return x.BillingCreateRateDefinitionEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetBillingDeleteBillingPlanEvent() *BillingDeleteBillingPlanEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_BillingDeleteBillingPlanEvent); ok {
			return x.BillingDeleteBillingPlanEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetBillingDeleteInvoiceEvent() *BillingDeleteInvoiceEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_BillingDeleteInvoiceEvent); ok {
			return x.BillingDeleteInvoiceEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetBillingDeleteRateDefinitionEvent() *BillingDeleteRateDefinitionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_BillingDeleteRateDefinitionEvent); ok {
			return x.BillingDeleteRateDefinitionEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetBillingExportInvoiceEvent() *BillingExportInvoiceEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_BillingExportInvoiceEvent); ok {
			return x.BillingExportInvoiceEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetBillingUpdateBillingPlanEvent() *BillingUpdateBillingPlanEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_BillingUpdateBillingPlanEvent); ok {
			return x.BillingUpdateBillingPlanEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetBillingUpdateInvoiceEvent() *BillingUpdateInvoiceEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_BillingUpdateInvoiceEvent); ok {
			return x.BillingUpdateInvoiceEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetBillingUpdateRateDefinitionEvent() *BillingUpdateRateDefinitionEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_BillingUpdateRateDefinitionEvent); ok {
			return x.BillingUpdateRateDefinitionEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetBillingRatedItemsGeneratedEvent() *BillingRatedItemsGeneratedEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_BillingRatedItemsGeneratedEvent); ok {
			return x.BillingRatedItemsGeneratedEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetDeliveryFailureEvent() *DeliveryFailureEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_DeliveryFailureEvent); ok {
			return x.DeliveryFailureEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetDeliverySuccessEvent() *DeliverySuccessEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_DeliverySuccessEvent); ok {
			return x.DeliverySuccessEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetContactManagerEntryAddEvent() *ContactManagerEntryAddEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ContactManagerEntryAddEvent); ok {
			return x.ContactManagerEntryAddEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetContactManagerEntryGetEncEvent() *ContactManagerEntryGetEncEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ContactManagerEntryGetEncEvent); ok {
			return x.ContactManagerEntryGetEncEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetContactManagerDeleteEvent() *ContactManagerDeleteEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ContactManagerDeleteEvent); ok {
			return x.ContactManagerDeleteEvent
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
func (x *AuditEvent) GetContactManagerKycEvent() *ContactManagerKycEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ContactManagerKycEvent); ok {
			return x.ContactManagerKycEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetContactManagerEntryEditEvent() *ContactManagerEntryEditEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ContactManagerEntryEditEvent); ok {
			return x.ContactManagerEntryEditEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetContactManagerListUploadEvent() *ContactManagerListUploadEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ContactManagerListUploadEvent); ok {
			return x.ContactManagerListUploadEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetContactManagerKycVerificationEvent() *ContactManagerKycEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ContactManagerKycVerificationEvent); ok {
			return x.ContactManagerKycVerificationEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetContactManagerEntryDeleteEvent() *ContactManagerDeleteEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ContactManagerEntryDeleteEvent); ok {
			return x.ContactManagerEntryDeleteEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetContactManagerEntryExpungeEvent() *ContactManagerDeleteEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ContactManagerEntryExpungeEvent); ok {
			return x.ContactManagerEntryExpungeEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetContactManagerEntityAssociationEvent() *ContactManagerEntityAssociationEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_ContactManagerEntityAssociationEvent); ok {
			return x.ContactManagerEntityAssociationEvent
		}
	}
	return nil
}

func (x *AuditEvent) GetAccessTokensExpiringEvent() *AccessTokensExpiringEvent {
	if x != nil {
		if x, ok := x.Event.(*AuditEvent_AccessTokensExpiringEvent); ok {
			return x.AccessTokensExpiringEvent
		}
	}
	return nil
}

type isAuditEvent_Event interface {
	isAuditEvent_Event()
}

type AuditEvent_XDummyEvent struct {
	// / Dummy Event class 100
	XDummyEvent *DummyEvent `protobuf:"bytes,100,opt,name=_dummy_event,json=DummyEvent,proto3,oneof"`
}

type AuditEvent_VanaFlagEvent struct {
	// / Voice Analytics Events 200
	VanaFlagEvent *VanaFlagEvent `protobuf:"bytes,200,opt,name=vana_flag_event,json=vanaFlagEvent,proto3,oneof"`
}

type AuditEvent_VanaFlagReviewEvent struct {
	VanaFlagReviewEvent *VanaFlagReviewEvent `protobuf:"bytes,201,opt,name=vana_flag_review_event,json=vanaFlagReviewEvent,proto3,oneof"`
}

type AuditEvent_VanaBillingReportEvent struct {
	VanaBillingReportEvent *VanaBillingReportEvent `protobuf:"bytes,202,opt,name=vana_billing_report_event,json=vanaBillingReportEvent,proto3,oneof"`
}

type AuditEvent_VanaFlagSummaryEvent struct {
	VanaFlagSummaryEvent *VanaFlagSummaryEvent `protobuf:"bytes,203,opt,name=vana_flag_summary_event,json=vanaFlagSummaryEvent,proto3,oneof"`
}

type AuditEvent_VanaPhraseCorrectionEvent struct {
	VanaPhraseCorrectionEvent *VanaPhraseCorrectionEvent `protobuf:"bytes,204,opt,name=vana_phrase_correction_event,json=vanaPhraseCorrectionEvent,proto3,oneof"`
}

type AuditEvent_VanaCreateTranscriptEvent struct {
	VanaCreateTranscriptEvent *VanaCreateTranscriptEvent `protobuf:"bytes,205,opt,name=vana_create_transcript_event,json=vanaCreateTranscriptEvent,proto3,oneof"`
}

type AuditEvent_VanaCreateSentimentEvent struct {
	VanaCreateSentimentEvent *VanaCreateSentimentEvent `protobuf:"bytes,206,opt,name=vana_create_sentiment_event,json=vanaCreateSentimentEvent,proto3,oneof"`
}

type AuditEvent_VanaCreateSummaryEvent struct {
	VanaCreateSummaryEvent *VanaCreateSummaryEvent `protobuf:"bytes,207,opt,name=vana_create_summary_event,json=vanaCreateSummaryEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelCreateProjectEvent struct {
	// / Omnichannel Events class 300
	OmnichannelCreateProjectEvent *OmnichannelCreateProjectEvent `protobuf:"bytes,300,opt,name=omnichannel_create_project_event,json=omnichannelCreateProjectEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelCreateCampaignEvent struct {
	OmnichannelCreateCampaignEvent *OmnichannelCreateCampaignEvent `protobuf:"bytes,301,opt,name=omnichannel_create_campaign_event,json=omnichannelCreateCampaignEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelDailyProjectReportEvent struct {
	OmnichannelDailyProjectReportEvent *OmnichannelDailyProjectReportEvent `protobuf:"bytes,302,opt,name=omnichannel_daily_project_report_event,json=omnichannelDailyProjectReportEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelDailyConversationReportEvent struct {
	OmnichannelDailyConversationReportEvent *OmnichannelDailyConversationReportEvent `protobuf:"bytes,303,opt,name=omnichannel_daily_conversation_report_event,json=omnichannelDailyConversationReportEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelAgentAssignConversationEvent struct {
	// agent assign conversation event
	OmnichannelAgentAssignConversationEvent *OmnichannelAgentAssignConversationEvent `protobuf:"bytes,305,opt,name=omnichannel_agent_assign_conversation_event,json=omnichannelAgentAssignConversationEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelAgentUnassignConversationEvent struct {
	// agent unassign conversation event
	OmnichannelAgentUnassignConversationEvent *OmnichannelAgentUnassignConversationEvent `protobuf:"bytes,306,opt,name=omnichannel_agent_unassign_conversation_event,json=omnichannelAgentUnassignConversationEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelAgentReassignConversationEvent struct {
	// agent reassign conversation event
	OmnichannelAgentReassignConversationEvent *OmnichannelAgentReassignConversationEvent `protobuf:"bytes,307,opt,name=omnichannel_agent_reassign_conversation_event,json=omnichannelAgentReassignConversationEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelT10Event struct {
	// T10 event
	OmnichannelT10Event *OmnichannelT10Event `protobuf:"bytes,308,opt,name=omnichannel_t10_event,json=omnichannelT10Event,proto3,oneof"`
}

type AuditEvent_OmnichannelCustomerText_MessageEvent struct {
	// customer sent a text message event
	//
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	OmnichannelCustomerText_MessageEvent *OmnichannelCustomerTextMessageEvent `protobuf:"bytes,309,opt,name=omnichannel_customer_text_Message_event,json=omnichannelCustomerTextMessageEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelAgentTextMessageEvent struct {
	// agent sent a text message event
	//
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	OmnichannelAgentTextMessageEvent *OmnichannelAgentTextMessageEvent `protobuf:"bytes,310,opt,name=omnichannel_agent_text_message_event,json=omnichannelAgentTextMessageEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelFinishWrapUpEvent struct {
	// finish wrap up event
	OmnichannelFinishWrapUpEvent *OmnichannelFinishWrapUpEvent `protobuf:"bytes,311,opt,name=omnichannel_finish_wrap_up_event,json=omnichannelFinishWrapUpEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelBeginWrapUpEvent struct {
	// conversation closes and moves to wrap up event
	OmnichannelBeginWrapUpEvent *OmnichannelBeginWrapUpEvent `protobuf:"bytes,312,opt,name=omnichannel_begin_wrap_up_event,json=omnichannelBeginWrapUpEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelT11Event struct {
	// t11 timer went off event
	OmnichannelT11Event *OmnichannelT11Event `protobuf:"bytes,313,opt,name=omnichannel_t11_event,json=omnichannelT11Event,proto3,oneof"`
}

type AuditEvent_OmnichannelCreateConversationEvent struct {
	// create conversation when customer sends initial message and T1 starts
	OmnichannelCreateConversationEvent *OmnichannelCreateConversationEvent `protobuf:"bytes,314,opt,name=omnichannel_create_conversation_event,json=omnichannelCreateConversationEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelAgentSuspendEvent struct {
	// agent suspended the conversation event
	OmnichannelAgentSuspendEvent *OmnichannelAgentSuspendEvent `protobuf:"bytes,315,opt,name=omnichannel_agent_suspend_event,json=omnichannelAgentSuspendEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelCloseConversationEvent struct {
	// close conversation
	OmnichannelCloseConversationEvent *OmnichannelCloseConversationEvent `protobuf:"bytes,322,opt,name=omnichannel_close_conversation_event,json=omnichannelCloseConversationEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelManagerTextMessageEvent struct {
	// manager sent a text message event
	//
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	OmnichannelManagerTextMessageEvent *OmnichannelManagerTextMessageEvent `protobuf:"bytes,332,opt,name=omnichannel_manager_text_message_event,json=omnichannelManagerTextMessageEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelUpdateCampaignEvent struct {
	// update campaign event
	OmnichannelUpdateCampaignEvent *OmnichannelUpdateCampaignEvent `protobuf:"bytes,330,opt,name=omnichannel_update_campaign_event,json=omnichannelUpdateCampaignEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelSetConversationCollectedDataEvent struct {
	// set conversation collected data details
	OmnichannelSetConversationCollectedDataEvent *OmnichannelSetConversationCollectedDataEvent `protobuf:"bytes,331,opt,name=omnichannel_set_conversation_collected_data_event,json=omnichannelSetConversationCollectedDataEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelCompleteCampaignEvent struct {
	// complete campaign event
	OmnichannelCompleteCampaignEvent *OmnichannelCompleteCampaignEvent `protobuf:"bytes,348,opt,name=omnichannel_complete_campaign_event,json=omnichannelCompleteCampaignEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelArchiveCampaignEvent struct {
	// archive campaign event
	OmnichannelArchiveCampaignEvent *OmnichannelArchiveCampaignEvent `protobuf:"bytes,333,opt,name=omnichannel_archive_campaign_event,json=omnichannelArchiveCampaignEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelPauseCampaignEvent struct {
	// pause campaign event
	OmnichannelPauseCampaignEvent *OmnichannelPauseCampaignEvent `protobuf:"bytes,334,opt,name=omnichannel_pause_campaign_event,json=omnichannelPauseCampaignEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelResumeCampaignEvent struct {
	// resume campaign event
	OmnichannelResumeCampaignEvent *OmnichannelResumeCampaignEvent `protobuf:"bytes,335,opt,name=omnichannel_resume_campaign_event,json=omnichannelResumeCampaignEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelStartCampaignEvent struct {
	// start campaign event
	OmnichannelStartCampaignEvent *OmnichannelStartCampaignEvent `protobuf:"bytes,336,opt,name=omnichannel_start_campaign_event,json=omnichannelStartCampaignEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelScheduleModuleEvent struct {
	// schedule module event
	OmnichannelScheduleModuleEvent *OmnichannelScheduleModuleEvent `protobuf:"bytes,337,opt,name=omnichannel_schedule_module_event,json=omnichannelScheduleModuleEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelStartModuleEvent struct {
	// start module event
	OmnichannelStartModuleEvent *OmnichannelStartModuleEvent `protobuf:"bytes,338,opt,name=omnichannel_start_module_event,json=omnichannelStartModuleEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelPauseModuleEvent struct {
	// pause module event
	OmnichannelPauseModuleEvent *OmnichannelPauseModuleEvent `protobuf:"bytes,339,opt,name=omnichannel_pause_module_event,json=omnichannelPauseModuleEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelResumeModuleEvent struct {
	// resume module event
	OmnichannelResumeModuleEvent *OmnichannelResumeModuleEvent `protobuf:"bytes,340,opt,name=omnichannel_resume_module_event,json=omnichannelResumeModuleEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelErrorModuleEvent struct {
	// error module event
	OmnichannelErrorModuleEvent *OmnichannelErrorModuleEvent `protobuf:"bytes,341,opt,name=omnichannel_error_module_event,json=omnichannelErrorModuleEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelSuccessModuleEvent struct {
	// success module event
	OmnichannelSuccessModuleEvent *OmnichannelSuccessModuleEvent `protobuf:"bytes,342,opt,name=omnichannel_success_module_event,json=omnichannelSuccessModuleEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelFailModuleEvent struct {
	// fail module event
	OmnichannelFailModuleEvent *OmnichannelFailModuleEvent `protobuf:"bytes,343,opt,name=omnichannel_fail_module_event,json=omnichannelFailModuleEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelCompleteModuleEvent struct {
	// complete module event
	OmnichannelCompleteModuleEvent *OmnichannelCompleteModuleEvent `protobuf:"bytes,344,opt,name=omnichannel_complete_module_event,json=omnichannelCompleteModuleEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelArchiveModuleEvent struct {
	// archive module event
	OmnichannelArchiveModuleEvent *OmnichannelArchiveModuleEvent `protobuf:"bytes,345,opt,name=omnichannel_archive_module_event,json=omnichannelArchiveModuleEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelUpdateModuleEvent struct {
	// update module event
	OmnichannelUpdateModuleEvent *OmnichannelUpdateModuleEvent `protobuf:"bytes,346,opt,name=omnichannel_update_module_event,json=omnichannelUpdateModuleEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelAddSmsMessageSentModuleEvent struct {
	//	SmsMessageSent module event
	//
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	OmnichannelAddSmsMessageSentModuleEvent *OmnichannelSmsMessageSentModuleEvent `protobuf:"bytes,347,opt,name=omnichannel_add_sms_message_sent_module_event,json=omnichannelAddSmsMessageSentModuleEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelModuleInitialReplyEvent struct {
	// ModuleInitialReply
	//
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	OmnichannelModuleInitialReplyEvent *OmnichannelModuleInitialReplyEvent `protobuf:"bytes,349,opt,name=omnichannel_module_initial_reply_event,json=omnichannelModuleInitialReplyEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelTaskMessageSentEvent struct {
	// a task message was sent for a campaign
	//
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	OmnichannelTaskMessageSentEvent *OmnichannelTaskMessageSentEvent `protobuf:"bytes,350,opt,name=omnichannel_task_message_sent_event,json=omnichannelTaskMessageSentEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelConnectedInboxPollEvent struct {
	// a connected inbox poll event
	OmnichannelConnectedInboxPollEvent *OmnichannelConnectedInboxPollEvent `protobuf:"bytes,351,opt,name=omnichannel_connected_inbox_poll_event,json=omnichannelConnectedInboxPollEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelConnectedInboxCreatedEvent struct {
	// an event for when a connected inbox is created
	OmnichannelConnectedInboxCreatedEvent *OmnichannelConnectedInboxCreatedEvent `protobuf:"bytes,352,opt,name=omnichannel_connected_inbox_created_event,json=omnichannelConnectedInboxCreatedEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelAgentMessageUnitsEvent struct {
	// an event for when the message units for an agent omni message were calculated
	//
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	OmnichannelAgentMessageUnitsEvent *OmnichannelAgentMessageUnitsEvent `protobuf:"bytes,353,opt,name=omnichannel_agent_message_units_event,json=omnichannelAgentMessageUnitsEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelManagerMessageUnitsEvent struct {
	// an event for when the message units for a manager omni message were calculated
	//
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	OmnichannelManagerMessageUnitsEvent *OmnichannelManagerMessageUnitsEvent `protobuf:"bytes,354,opt,name=omnichannel_manager_message_units_event,json=omnichannelManagerMessageUnitsEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelCustomerMessageUnitsEvent struct {
	// an event for when the message units for a customer omni message were calculated
	//
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	OmnichannelCustomerMessageUnitsEvent *OmnichannelCustomerMessageUnitsEvent `protobuf:"bytes,355,opt,name=omnichannel_customer_message_units_event,json=omnichannelCustomerMessageUnitsEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelSystemMessageUnitsEvent struct {
	// an event for when the message units for a system omni message were calculated
	//
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	OmnichannelSystemMessageUnitsEvent *OmnichannelSystemMessageUnitsEvent `protobuf:"bytes,356,opt,name=omnichannel_system_message_units_event,json=omnichannelSystemMessageUnitsEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelPaymentLinkSentEvent struct {
	// an event for when a payment link is sent
	OmnichannelPaymentLinkSentEvent *OmnichannelPaymentLinkSentEvent `protobuf:"bytes,357,opt,name=omnichannel_payment_link_sent_event,json=omnichannelPaymentLinkSentEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelManualApproveTaskAcceptedEvent struct {
	// accepted manual approve task
	OmnichannelManualApproveTaskAcceptedEvent *OmnichannelManualApproveTaskAcceptedEvent `protobuf:"bytes,358,opt,name=omnichannel_manual_approve_task_accepted_event,json=omnichannelManualApproveTaskAcceptedEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelManualApproveTaskRejectedEvent struct {
	// rejected manual approve task
	OmnichannelManualApproveTaskRejectedEvent *OmnichannelManualApproveTaskRejectedEvent `protobuf:"bytes,359,opt,name=omnichannel_manual_approve_task_rejected_event,json=omnichannelManualApproveTaskRejectedEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelManualApproveTaskTimeoutEvent struct {
	// timeout of manual approve task
	OmnichannelManualApproveTaskTimeoutEvent *OmnichannelManualApproveTaskTimeoutEvent `protobuf:"bytes,360,opt,name=omnichannel_manual_approve_task_timeout_event,json=omnichannelManualApproveTaskTimeoutEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelManualApproveTaskRequeueEvent struct {
	// requeue of manual approve task
	OmnichannelManualApproveTaskRequeueEvent *OmnichannelManualApproveTaskRequeueEvent `protobuf:"bytes,361,opt,name=omnichannel_manual_approve_task_requeue_event,json=omnichannelManualApproveTaskRequeueEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelTranscriptSavedEvent struct {
	// transcript saved
	OmnichannelTranscriptSavedEvent *OmnichannelTranscriptSavedEvent `protobuf:"bytes,362,opt,name=omnichannel_transcript_saved_event,json=omnichannelTranscriptSavedEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelMessageSentEvent struct {
	// omni message event that encapsulates all omni messages sent
	OmnichannelMessageSentEvent *OmnichannelMessageSentEvent `protobuf:"bytes,363,opt,name=omnichannel_message_sent_event,json=omnichannelMessageSentEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelProviderResponseEvent struct {
	// provider response for omni message sent
	OmnichannelProviderResponseEvent *OmnichannelProviderResponseEvent `protobuf:"bytes,364,opt,name=omnichannel_provider_response_event,json=omnichannelProviderResponseEvent,proto3,oneof"`
}

type AuditEvent_OmnichannelProviderMessageFailedEvent struct {
	// message failed response for provider for undelivered sms mesages
	OmnichannelProviderMessageFailedEvent *OmnichannelProviderMessageFailedEvent `protobuf:"bytes,365,opt,name=omnichannel_provider_message_failed_event,json=omnichannelProviderMessageFailedEvent,proto3,oneof"`
}

type AuditEvent_AsmAgentLoginEvent struct {
	// / Asm events 400
	// agent logged into asm event
	AsmAgentLoginEvent *AsmAgentLoginEvent `protobuf:"bytes,400,opt,name=asm_agent_login_event,json=asmAgentLoginEvent,proto3,oneof"`
}

type AuditEvent_AsmOpenVoiceEvent struct {
	// agent opens voice event
	AsmOpenVoiceEvent *AsmOpenVoiceEvent `protobuf:"bytes,401,opt,name=asm_open_voice_event,json=asmOpenVoiceEvent,proto3,oneof"`
}

type AuditEvent_AsmOpenOmniAgentEvent struct {
	// agent logs into omni event
	AsmOpenOmniAgentEvent *AsmOpenOmniAgentEvent `protobuf:"bytes,402,opt,name=asm_open_omni_agent_event,json=asmOpenOmniAgentEvent,proto3,oneof"`
}

type AuditEvent_AsmActivateConversationEvent struct {
	// agent activates conversation event
	AsmActivateConversationEvent *AsmActivateConversationEvent `protobuf:"bytes,403,opt,name=asm_activate_conversation_event,json=asmActivateConversationEvent,proto3,oneof"`
}

type AuditEvent_AsmDeactivateConversationEvent struct {
	// agent deactivates a conversation event
	AsmDeactivateConversationEvent *AsmDeactivateConversationEvent `protobuf:"bytes,404,opt,name=asm_deactivate_conversation_event,json=asmDeactivateConversationEvent,proto3,oneof"`
}

type AuditEvent_AsmAgentStateChangedEvent struct {
	// agent's state changed event
	AsmAgentStateChangedEvent *AsmAgentStateChangedEvent `protobuf:"bytes,405,opt,name=asm_agent_state_changed_event,json=asmAgentStateChangedEvent,proto3,oneof"`
}

type AuditEvent_AsmAgentLogoutEvent struct {
	// agent logged out of asm event
	AsmAgentLogoutEvent *AsmAgentLogoutEvent `protobuf:"bytes,406,opt,name=asm_agent_logout_event,json=asmAgentLogoutEvent,proto3,oneof"`
}

type AuditEvent_AsmPauseEvent struct {
	// asm pause event
	AsmPauseEvent *AsmPauseEvent `protobuf:"bytes,407,opt,name=asm_pause_event,json=asmPauseEvent,proto3,oneof"`
}

type AuditEvent_AsmResumeEvent struct {
	// asm resume event
	AsmResumeEvent *AsmResumeEvent `protobuf:"bytes,408,opt,name=asm_resume_event,json=asmResumeEvent,proto3,oneof"`
}

type AuditEvent_AsmConversationPulledEvent struct {
	// asm conversation pulled event
	AsmConversationPulledEvent *AsmConversationPulledEvent `protobuf:"bytes,409,opt,name=asm_conversation_pulled_event,json=asmConversationPulledEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsCreateQuestionEvent struct {
	// Scorecards events class 500
	// question library question created
	ScorecardsCreateQuestionEvent *ScorecardsCreateQuestionEvent `protobuf:"bytes,500,opt,name=scorecards_create_question_event,json=scorecardsCreateQuestionEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsUpdateQuestionEvent struct {
	// question library question updated
	ScorecardsUpdateQuestionEvent *ScorecardsUpdateQuestionEvent `protobuf:"bytes,501,opt,name=scorecards_update_question_event,json=scorecardsUpdateQuestionEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsDeleteQuestionEvent struct {
	// question library question deleted
	ScorecardsDeleteQuestionEvent *ScorecardsDeleteQuestionEvent `protobuf:"bytes,502,opt,name=scorecards_delete_question_event,json=scorecardsDeleteQuestionEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsCreateScorecardEvent struct {
	// scorecard library scorecard created
	ScorecardsCreateScorecardEvent *ScorecardsCreateScorecardEvent `protobuf:"bytes,503,opt,name=scorecards_create_scorecard_event,json=scorecardsCreateScorecardEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsUpdateScorecardEvent struct {
	// scorecard library scorecard updated
	ScorecardsUpdateScorecardEvent *ScorecardsUpdateScorecardEvent `protobuf:"bytes,504,opt,name=scorecards_update_scorecard_event,json=scorecardsUpdateScorecardEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsDeleteScorecardEvent struct {
	// scorecard library scorecard deleted
	ScorecardsDeleteScorecardEvent *ScorecardsDeleteScorecardEvent `protobuf:"bytes,505,opt,name=scorecards_delete_scorecard_event,json=scorecardsDeleteScorecardEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsCloneScorecardEvent struct {
	// scorecard library scorecard cloned
	ScorecardsCloneScorecardEvent *ScorecardsCloneScorecardEvent `protobuf:"bytes,506,opt,name=scorecards_clone_scorecard_event,json=scorecardsCloneScorecardEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsCreateEvaluationEvent struct {
	// evaluation library evaluation created
	ScorecardsCreateEvaluationEvent *ScorecardsCreateEvaluationEvent `protobuf:"bytes,507,opt,name=scorecards_create_evaluation_event,json=scorecardsCreateEvaluationEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsDeleteEvaluationEvent struct {
	// evaluation library evaluation deleted
	ScorecardsDeleteEvaluationEvent *ScorecardsDeleteEvaluationEvent `protobuf:"bytes,508,opt,name=scorecards_delete_evaluation_event,json=scorecardsDeleteEvaluationEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsCreateSectionEvent struct {
	// section library section created
	ScorecardsCreateSectionEvent *ScorecardsCreateSectionEvent `protobuf:"bytes,509,opt,name=scorecards_create_section_event,json=scorecardsCreateSectionEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsUpdateSectionEvent struct {
	// section library section updated
	ScorecardsUpdateSectionEvent *ScorecardsUpdateSectionEvent `protobuf:"bytes,510,opt,name=scorecards_update_section_event,json=scorecardsUpdateSectionEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsDeleteSectionEvent struct {
	// section library section deleted
	ScorecardsDeleteSectionEvent *ScorecardsDeleteSectionEvent `protobuf:"bytes,511,opt,name=scorecards_delete_section_event,json=scorecardsDeleteSectionEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsCreateCategoryEvent struct {
	// category library category created
	ScorecardsCreateCategoryEvent *ScorecardsCreateCategoryEvent `protobuf:"bytes,512,opt,name=scorecards_create_category_event,json=scorecardsCreateCategoryEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsUpdateCategoryEvent struct {
	// category library category updated
	ScorecardsUpdateCategoryEvent *ScorecardsUpdateCategoryEvent `protobuf:"bytes,513,opt,name=scorecards_update_category_event,json=scorecardsUpdateCategoryEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsDeleteCategoryEvent struct {
	// category library category deleted
	ScorecardsDeleteCategoryEvent *ScorecardsDeleteCategoryEvent `protobuf:"bytes,514,opt,name=scorecards_delete_category_event,json=scorecardsDeleteCategoryEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsCreateEvaluationQuestionEvent struct {
	// evaluation question created
	ScorecardsCreateEvaluationQuestionEvent *ScorecardsCreateEvaluationQuestionEvent `protobuf:"bytes,515,opt,name=scorecards_create_evaluation_question_event,json=scorecardsCreateEvaluationQuestionEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsUpdateEvaluationQuestionEvent struct {
	// evaluation question updated
	ScorecardsUpdateEvaluationQuestionEvent *ScorecardsUpdateEvaluationQuestionEvent `protobuf:"bytes,516,opt,name=scorecards_update_evaluation_question_event,json=scorecardsUpdateEvaluationQuestionEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsDeleteEvaluationQuestionEvent struct {
	// evaluation question deleted
	ScorecardsDeleteEvaluationQuestionEvent *ScorecardsDeleteEvaluationQuestionEvent `protobuf:"bytes,517,opt,name=scorecards_delete_evaluation_question_event,json=scorecardsDeleteEvaluationQuestionEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsCreateScorecardQuestionEvent struct {
	// scorecard question library scorecard question created
	ScorecardsCreateScorecardQuestionEvent *ScorecardsCreateScorecardQuestionEvent `protobuf:"bytes,518,opt,name=scorecards_create_scorecard_question_event,json=scorecardsCreateScorecardQuestionEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsUpdateScorecardQuestionEvent struct {
	// scorecard question library scorecard question updated
	ScorecardsUpdateScorecardQuestionEvent *ScorecardsUpdateScorecardQuestionEvent `protobuf:"bytes,519,opt,name=scorecards_update_scorecard_question_event,json=scorecardsUpdateScorecardQuestionEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsDeleteScorecardQuestionEvent struct {
	// scorecard question library scorecard question deleted
	ScorecardsDeleteScorecardQuestionEvent *ScorecardsDeleteScorecardQuestionEvent `protobuf:"bytes,520,opt,name=scorecards_delete_scorecard_question_event,json=scorecardsDeleteScorecardQuestionEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsCreateAutoEvaluationEvent struct {
	// auto evaluation library auto evaluation created
	ScorecardsCreateAutoEvaluationEvent *ScorecardsCreateAutoEvaluationEvent `protobuf:"bytes,521,opt,name=scorecards_create_auto_evaluation_event,json=scorecardsCreateAutoEvaluationEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsUpdateEvaluationEvent struct {
	// evaluation library evaluation updated
	ScorecardsUpdateEvaluationEvent *ScorecardsUpdateEvaluationEvent `protobuf:"bytes,522,opt,name=scorecards_update_evaluation_event,json=scorecardsUpdateEvaluationEvent,proto3,oneof"`
}

type AuditEvent_ScorecardsCreateSmartEvaluationEvent struct {
	// smart evaluation created from smart scorecard
	ScorecardsCreateSmartEvaluationEvent *ScorecardsCreateSmartEvaluationEvent `protobuf:"bytes,523,opt,name=scorecards_create_smart_evaluation_event,json=scorecardsCreateSmartEvaluationEvent,proto3,oneof"`
}

type AuditEvent_TicketEvent struct {
	// Tickets Events
	// EDIT update event
	TicketEvent *TicketEvent `protobuf:"bytes,601,opt,name=ticket_event,json=ticketEvent,proto3,oneof"`
}

type AuditEvent_ComplianceRndQueryEvent struct {
	// Compliance events
	// compliance rnd query event
	ComplianceRndQueryEvent *ComplianceRndQueryEvent `protobuf:"bytes,700,opt,name=compliance_rnd_query_event,json=complianceRndQueryEvent,proto3,oneof"`
}

type AuditEvent_ComplianceRndQueryCachedEvent struct {
	// compliance rnd query cached event
	ComplianceRndQueryCachedEvent *ComplianceRndQueryEvent `protobuf:"bytes,701,opt,name=compliance_rnd_query_cached_event,json=complianceRndQueryCachedEvent,proto3,oneof"`
}

type AuditEvent_AgentTrainingCreateLearningOpportunityEvent struct {
	// Agent Training events class 800
	// learning opportunity created event
	AgentTrainingCreateLearningOpportunityEvent *AgentTrainingCreateLearningOpportunityEvent `protobuf:"bytes,800,opt,name=agent_training_create_learning_opportunity_event,json=agentTrainingCreateLearningOpportunityEvent,proto3,oneof"`
}

type AuditEvent_LmsPipelineFailureEvent struct {
	// LMS Events class 900
	LmsPipelineFailureEvent *LMSPipelineFailureEvent `protobuf:"bytes,900,opt,name=lms_pipeline_failure_event,json=lmsPipelineFailureEvent,proto3,oneof"`
}

type AuditEvent_LmsPipelineNoOutputEvent struct {
	LmsPipelineNoOutputEvent *LMSPipelineNoOutputEvent `protobuf:"bytes,901,opt,name=lms_pipeline_no_output_event,json=lmsPipelineNoOutputEvent,proto3,oneof"`
}

type AuditEvent_LmsPipelineSuccessfulEvent struct {
	LmsPipelineSuccessfulEvent *LMSPipelineSuccessfulEvent `protobuf:"bytes,902,opt,name=lms_pipeline_successful_event,json=lmsPipelineSuccessfulEvent,proto3,oneof"`
}

type AuditEvent_BillingCommitBillingPlanEvent struct {
	// Billing Events class 1000
	//
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	BillingCommitBillingPlanEvent *BillingCommitBillingPlanEvent `protobuf:"bytes,1000,opt,name=billing_commit_billing_plan_event,json=billingCommitBillingPlanEvent,proto3,oneof"`
}

type AuditEvent_BillingCreateBillingPlanEvent struct {
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	BillingCreateBillingPlanEvent *BillingCreateBillingPlanEvent `protobuf:"bytes,1001,opt,name=billing_create_billing_plan_event,json=billingCreateBillingPlanEvent,proto3,oneof"`
}

type AuditEvent_BillingCreateInvoiceEvent struct {
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	BillingCreateInvoiceEvent *BillingCreateInvoiceEvent `protobuf:"bytes,1002,opt,name=billing_create_invoice_event,json=billingCreateInvoiceEvent,proto3,oneof"`
}

type AuditEvent_BillingCreateRateDefinitionEvent struct {
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	BillingCreateRateDefinitionEvent *BillingCreateRateDefinitionEvent `protobuf:"bytes,1003,opt,name=billing_create_rate_definition_event,json=billingCreateRateDefinitionEvent,proto3,oneof"`
}

type AuditEvent_BillingDeleteBillingPlanEvent struct {
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	BillingDeleteBillingPlanEvent *BillingDeleteBillingPlanEvent `protobuf:"bytes,1004,opt,name=billing_delete_billing_plan_event,json=billingDeleteBillingPlanEvent,proto3,oneof"`
}

type AuditEvent_BillingDeleteInvoiceEvent struct {
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	BillingDeleteInvoiceEvent *BillingDeleteInvoiceEvent `protobuf:"bytes,1005,opt,name=billing_delete_invoice_event,json=billingDeleteInvoiceEvent,proto3,oneof"`
}

type AuditEvent_BillingDeleteRateDefinitionEvent struct {
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	BillingDeleteRateDefinitionEvent *BillingDeleteRateDefinitionEvent `protobuf:"bytes,1006,opt,name=billing_delete_rate_definition_event,json=billingDeleteRateDefinitionEvent,proto3,oneof"`
}

type AuditEvent_BillingExportInvoiceEvent struct {
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	BillingExportInvoiceEvent *BillingExportInvoiceEvent `protobuf:"bytes,1007,opt,name=billing_export_invoice_event,json=billingExportInvoiceEvent,proto3,oneof"`
}

type AuditEvent_BillingUpdateBillingPlanEvent struct {
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	BillingUpdateBillingPlanEvent *BillingUpdateBillingPlanEvent `protobuf:"bytes,1008,opt,name=billing_update_billing_plan_event,json=billingUpdateBillingPlanEvent,proto3,oneof"`
}

type AuditEvent_BillingUpdateInvoiceEvent struct {
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	BillingUpdateInvoiceEvent *BillingUpdateInvoiceEvent `protobuf:"bytes,1009,opt,name=billing_update_invoice_event,json=billingUpdateInvoiceEvent,proto3,oneof"`
}

type AuditEvent_BillingUpdateRateDefinitionEvent struct {
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	BillingUpdateRateDefinitionEvent *BillingUpdateRateDefinitionEvent `protobuf:"bytes,1010,opt,name=billing_update_rate_definition_event,json=billingUpdateRateDefinitionEvent,proto3,oneof"`
}

type AuditEvent_BillingRatedItemsGeneratedEvent struct {
	BillingRatedItemsGeneratedEvent *BillingRatedItemsGeneratedEvent `protobuf:"bytes,1011,opt,name=billing_rated_items_generated_event,json=billingRatedItemsGeneratedEvent,proto3,oneof"`
}

type AuditEvent_DeliveryFailureEvent struct {
	// Delivery Events class 1100
	DeliveryFailureEvent *DeliveryFailureEvent `protobuf:"bytes,1100,opt,name=delivery_failure_event,json=deliveryFailureEvent,proto3,oneof"`
}

type AuditEvent_DeliverySuccessEvent struct {
	DeliverySuccessEvent *DeliverySuccessEvent `protobuf:"bytes,1101,opt,name=delivery_success_event,json=deliverySuccessEvent,proto3,oneof"`
}

type AuditEvent_ContactManagerEntryAddEvent struct {
	// Contact Manager event
	ContactManagerEntryAddEvent *ContactManagerEntryAddEvent `protobuf:"bytes,1200,opt,name=contact_manager_entry_add_event,json=contactManagerEntryAddEvent,proto3,oneof"`
}

type AuditEvent_ContactManagerEntryGetEncEvent struct {
	ContactManagerEntryGetEncEvent *ContactManagerEntryGetEncEvent `protobuf:"bytes,1201,opt,name=contact_manager_entry_get_enc_event,json=contactManagerEntryGetEncEvent,proto3,oneof"`
}

type AuditEvent_ContactManagerDeleteEvent struct {
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	ContactManagerDeleteEvent *ContactManagerDeleteEvent `protobuf:"bytes,1202,opt,name=contact_manager_delete_event,json=contactManagerDeleteEvent,proto3,oneof"`
}

type AuditEvent_ContactManagerKycEvent struct {
	// Deprecated: Marked as deprecated in api/commons/audit/audit.proto.
	ContactManagerKycEvent *ContactManagerKycEvent `protobuf:"bytes,1203,opt,name=contact_manager_kyc_event,json=contactManagerKycEvent,proto3,oneof"`
}

type AuditEvent_ContactManagerEntryEditEvent struct {
	ContactManagerEntryEditEvent *ContactManagerEntryEditEvent `protobuf:"bytes,1204,opt,name=contact_manager_entry_edit_event,json=contactManagerEntryEditEvent,proto3,oneof"`
}

type AuditEvent_ContactManagerListUploadEvent struct {
	ContactManagerListUploadEvent *ContactManagerListUploadEvent `protobuf:"bytes,1205,opt,name=contact_manager_list_upload_event,json=contactManagerListUploadEvent,proto3,oneof"`
}

type AuditEvent_ContactManagerKycVerificationEvent struct {
	ContactManagerKycVerificationEvent *ContactManagerKycEvent `protobuf:"bytes,1206,opt,name=contact_manager_kyc_verification_event,json=contactManagerKycVerificationEvent,proto3,oneof"`
}

type AuditEvent_ContactManagerEntryDeleteEvent struct {
	ContactManagerEntryDeleteEvent *ContactManagerDeleteEvent `protobuf:"bytes,1207,opt,name=contact_manager_entry_delete_event,json=contactManagerEntryDeleteEvent,proto3,oneof"`
}

type AuditEvent_ContactManagerEntryExpungeEvent struct {
	ContactManagerEntryExpungeEvent *ContactManagerDeleteEvent `protobuf:"bytes,1208,opt,name=contact_manager_entry_expunge_event,json=contactManagerEntryExpungeEvent,proto3,oneof"`
}

type AuditEvent_ContactManagerEntityAssociationEvent struct {
	ContactManagerEntityAssociationEvent *ContactManagerEntityAssociationEvent `protobuf:"bytes,1209,opt,name=contact_manager_entity_association_event,json=contactManagerEntityAssociationEvent,proto3,oneof"`
}

type AuditEvent_AccessTokensExpiringEvent struct {
	// Organization Events
	// AccessTokensExpiringEvent is the event that is triggered when any users access tokens are expiring.
	AccessTokensExpiringEvent *AccessTokensExpiringEvent `protobuf:"bytes,1300,opt,name=access_tokens_expiring_event,json=accessTokensExpiringEvent,proto3,oneof"`
}

func (*AuditEvent_XDummyEvent) isAuditEvent_Event() {}

func (*AuditEvent_VanaFlagEvent) isAuditEvent_Event() {}

func (*AuditEvent_VanaFlagReviewEvent) isAuditEvent_Event() {}

func (*AuditEvent_VanaBillingReportEvent) isAuditEvent_Event() {}

func (*AuditEvent_VanaFlagSummaryEvent) isAuditEvent_Event() {}

func (*AuditEvent_VanaPhraseCorrectionEvent) isAuditEvent_Event() {}

func (*AuditEvent_VanaCreateTranscriptEvent) isAuditEvent_Event() {}

func (*AuditEvent_VanaCreateSentimentEvent) isAuditEvent_Event() {}

func (*AuditEvent_VanaCreateSummaryEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelCreateProjectEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelCreateCampaignEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelDailyProjectReportEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelDailyConversationReportEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelAgentAssignConversationEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelAgentUnassignConversationEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelAgentReassignConversationEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelT10Event) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelCustomerText_MessageEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelAgentTextMessageEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelFinishWrapUpEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelBeginWrapUpEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelT11Event) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelCreateConversationEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelAgentSuspendEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelCloseConversationEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelManagerTextMessageEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelUpdateCampaignEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelSetConversationCollectedDataEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelCompleteCampaignEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelArchiveCampaignEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelPauseCampaignEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelResumeCampaignEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelStartCampaignEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelScheduleModuleEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelStartModuleEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelPauseModuleEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelResumeModuleEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelErrorModuleEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelSuccessModuleEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelFailModuleEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelCompleteModuleEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelArchiveModuleEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelUpdateModuleEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelAddSmsMessageSentModuleEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelModuleInitialReplyEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelTaskMessageSentEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelConnectedInboxPollEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelConnectedInboxCreatedEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelAgentMessageUnitsEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelManagerMessageUnitsEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelCustomerMessageUnitsEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelSystemMessageUnitsEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelPaymentLinkSentEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelManualApproveTaskAcceptedEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelManualApproveTaskRejectedEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelManualApproveTaskTimeoutEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelManualApproveTaskRequeueEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelTranscriptSavedEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelMessageSentEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelProviderResponseEvent) isAuditEvent_Event() {}

func (*AuditEvent_OmnichannelProviderMessageFailedEvent) isAuditEvent_Event() {}

func (*AuditEvent_AsmAgentLoginEvent) isAuditEvent_Event() {}

func (*AuditEvent_AsmOpenVoiceEvent) isAuditEvent_Event() {}

func (*AuditEvent_AsmOpenOmniAgentEvent) isAuditEvent_Event() {}

func (*AuditEvent_AsmActivateConversationEvent) isAuditEvent_Event() {}

func (*AuditEvent_AsmDeactivateConversationEvent) isAuditEvent_Event() {}

func (*AuditEvent_AsmAgentStateChangedEvent) isAuditEvent_Event() {}

func (*AuditEvent_AsmAgentLogoutEvent) isAuditEvent_Event() {}

func (*AuditEvent_AsmPauseEvent) isAuditEvent_Event() {}

func (*AuditEvent_AsmResumeEvent) isAuditEvent_Event() {}

func (*AuditEvent_AsmConversationPulledEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsCreateQuestionEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsUpdateQuestionEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsDeleteQuestionEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsCreateScorecardEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsUpdateScorecardEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsDeleteScorecardEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsCloneScorecardEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsCreateEvaluationEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsDeleteEvaluationEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsCreateSectionEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsUpdateSectionEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsDeleteSectionEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsCreateCategoryEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsUpdateCategoryEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsDeleteCategoryEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsCreateEvaluationQuestionEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsUpdateEvaluationQuestionEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsDeleteEvaluationQuestionEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsCreateScorecardQuestionEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsUpdateScorecardQuestionEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsDeleteScorecardQuestionEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsCreateAutoEvaluationEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsUpdateEvaluationEvent) isAuditEvent_Event() {}

func (*AuditEvent_ScorecardsCreateSmartEvaluationEvent) isAuditEvent_Event() {}

func (*AuditEvent_TicketEvent) isAuditEvent_Event() {}

func (*AuditEvent_ComplianceRndQueryEvent) isAuditEvent_Event() {}

func (*AuditEvent_ComplianceRndQueryCachedEvent) isAuditEvent_Event() {}

func (*AuditEvent_AgentTrainingCreateLearningOpportunityEvent) isAuditEvent_Event() {}

func (*AuditEvent_LmsPipelineFailureEvent) isAuditEvent_Event() {}

func (*AuditEvent_LmsPipelineNoOutputEvent) isAuditEvent_Event() {}

func (*AuditEvent_LmsPipelineSuccessfulEvent) isAuditEvent_Event() {}

func (*AuditEvent_BillingCommitBillingPlanEvent) isAuditEvent_Event() {}

func (*AuditEvent_BillingCreateBillingPlanEvent) isAuditEvent_Event() {}

func (*AuditEvent_BillingCreateInvoiceEvent) isAuditEvent_Event() {}

func (*AuditEvent_BillingCreateRateDefinitionEvent) isAuditEvent_Event() {}

func (*AuditEvent_BillingDeleteBillingPlanEvent) isAuditEvent_Event() {}

func (*AuditEvent_BillingDeleteInvoiceEvent) isAuditEvent_Event() {}

func (*AuditEvent_BillingDeleteRateDefinitionEvent) isAuditEvent_Event() {}

func (*AuditEvent_BillingExportInvoiceEvent) isAuditEvent_Event() {}

func (*AuditEvent_BillingUpdateBillingPlanEvent) isAuditEvent_Event() {}

func (*AuditEvent_BillingUpdateInvoiceEvent) isAuditEvent_Event() {}

func (*AuditEvent_BillingUpdateRateDefinitionEvent) isAuditEvent_Event() {}

func (*AuditEvent_BillingRatedItemsGeneratedEvent) isAuditEvent_Event() {}

func (*AuditEvent_DeliveryFailureEvent) isAuditEvent_Event() {}

func (*AuditEvent_DeliverySuccessEvent) isAuditEvent_Event() {}

func (*AuditEvent_ContactManagerEntryAddEvent) isAuditEvent_Event() {}

func (*AuditEvent_ContactManagerEntryGetEncEvent) isAuditEvent_Event() {}

func (*AuditEvent_ContactManagerDeleteEvent) isAuditEvent_Event() {}

func (*AuditEvent_ContactManagerKycEvent) isAuditEvent_Event() {}

func (*AuditEvent_ContactManagerEntryEditEvent) isAuditEvent_Event() {}

func (*AuditEvent_ContactManagerListUploadEvent) isAuditEvent_Event() {}

func (*AuditEvent_ContactManagerKycVerificationEvent) isAuditEvent_Event() {}

func (*AuditEvent_ContactManagerEntryDeleteEvent) isAuditEvent_Event() {}

func (*AuditEvent_ContactManagerEntryExpungeEvent) isAuditEvent_Event() {}

func (*AuditEvent_ContactManagerEntityAssociationEvent) isAuditEvent_Event() {}

func (*AuditEvent_AccessTokensExpiringEvent) isAuditEvent_Event() {}

var File_api_commons_audit_audit_proto protoreflect.FileDescriptor

var file_api_commons_audit_audit_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x1a, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x73, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x6c, 0x6d, 0x73, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x6f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x29, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x61, 0x6e, 0x61, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x81, 0x01, 0x0a,
	0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x41, 0x0a, 0x0c, 0x5f, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x44, 0x75, 0x6d, 0x6d,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x76, 0x61, 0x6e, 0x61, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x56, 0x61, 0x6e, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x76, 0x61, 0x6e, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x5e, 0x0a, 0x16, 0x76, 0x61, 0x6e, 0x61, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x56, 0x61, 0x6e, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x76, 0x61,
	0x6e, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x67, 0x0a, 0x19, 0x76, 0x61, 0x6e, 0x61, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xca,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x56, 0x61, 0x6e, 0x61, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x16, 0x76, 0x61, 0x6e, 0x61, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x17, 0x76, 0x61,
	0x6e, 0x61, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x56, 0x61, 0x6e, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x76, 0x61, 0x6e, 0x61, 0x46, 0x6c, 0x61,
	0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x70, 0x0a,
	0x1c, 0x76, 0x61, 0x6e, 0x61, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xcc, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x56, 0x61, 0x6e, 0x61, 0x50, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x76, 0x61, 0x6e, 0x61, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x70, 0x0a, 0x1c, 0x76, 0x61, 0x6e, 0x61, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x56, 0x61, 0x6e, 0x61, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x76, 0x61, 0x6e, 0x61, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x6d, 0x0a, 0x1b, 0x76, 0x61, 0x6e, 0x61, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x56, 0x61, 0x6e, 0x61,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x76, 0x61, 0x6e, 0x61, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x67, 0x0a, 0x19, 0x76, 0x61, 0x6e, 0x61, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xcf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x56, 0x61, 0x6e, 0x61, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x16, 0x76, 0x61, 0x6e, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x20, 0x6f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xac, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x21, 0x6f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xad, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x26, 0x6f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x22, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x2b, 0x6f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x27, 0x6f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x2b, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x27, 0x6f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0xa1, 0x01, 0x0a, 0x2d, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xb2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x29, 0x6f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0xa1, 0x01, 0x0a, 0x2d, 0x6f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xb3, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x29, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x15, 0x6f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x31, 0x30, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0xb4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x31, 0x30, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x31, 0x30, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x93, 0x01, 0x0a, 0x27, 0x6f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xb5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x23, 0x6f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x8a, 0x01, 0x0a, 0x24, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x20, 0x6f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7a, 0x0a,
	0x20, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0xb7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x57, 0x72,
	0x61, 0x70, 0x55, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x6f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x57, 0x72,
	0x61, 0x70, 0x55, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x1f, 0x6f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x77,
	0x72, 0x61, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xb8, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x55, 0x70, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x55, 0x70, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x15, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x74, 0x31, 0x31, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xb9, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x31, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x31, 0x31, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x8b, 0x01, 0x0a, 0x25, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xba, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x22, 0x6f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x79, 0x0a, 0x1f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0xbb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x6f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x24, 0x6f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0xc2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x21, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x26, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0xcc, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x65,
	0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x22, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x21, 0x6f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xca, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x6f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x31, 0x6f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0xcb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x2c, 0x6f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x23, 0x6f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0xdc, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x20, 0x6f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x82, 0x01, 0x0a, 0x22, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xcd, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x1f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x20, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xce, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x1d, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x21, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xcf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x1e, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x20, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xd0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x1d, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x7f, 0x0a, 0x21, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xd1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x1e, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x76, 0x0a, 0x1e, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0xd2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x76, 0x0a, 0x1e, 0x6f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xd3, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x79, 0x0a, 0x1f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x1c, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x76, 0x0a,
	0x1e, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0xd5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x20, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xd6, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x1d, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0xd7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x6f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x21, 0x6f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xd8, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x6f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x20, 0x6f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xd9, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x79, 0x0a, 0x1f, 0x6f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xda, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x2d, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0xdb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6d, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x27, 0x6f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x26, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xdd,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x22, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x23, 0x6f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xde,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x1f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x8c, 0x01, 0x0a, 0x26, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xdf, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78,
	0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x22, 0x6f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x95, 0x01, 0x0a, 0x29, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xe0, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62,
	0x6f, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x25, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x8d, 0x01, 0x0a, 0x25, 0x6f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0xe1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x21, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x93, 0x01, 0x0a, 0x27, 0x6f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0xe2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x23, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x96, 0x01,
	0x0a, 0x28, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xe3, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x24, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x26, 0x6f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0xe4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x22, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x23, 0x6f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0xe5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1f,
	0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0xa2, 0x01, 0x0a, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0xe6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x29, 0x6f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0xa2, 0x01, 0x0a, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xe7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x29,
	0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x2d, 0x6f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xe8, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x28, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x2d,
	0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xe9, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x28, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x82, 0x01,
	0x0a, 0x22, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0xea, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x1f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x76, 0x0a, 0x1e, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0xeb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x23, 0x6f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0xec, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x20, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x29, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0xed, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x25, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x15, 0x61, 0x73,
	0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x41,
	0x73, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x61, 0x73, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x14, 0x61, 0x73, 0x6d, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x91, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x41, 0x73, 0x6d, 0x4f, 0x70,
	0x65, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11,
	0x61, 0x73, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x65, 0x0a, 0x19, 0x61, 0x73, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6f, 0x6d,
	0x6e, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x92,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x41, 0x73, 0x6d, 0x4f, 0x70, 0x65,
	0x6e, 0x4f, 0x6d, 0x6e, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x15, 0x61, 0x73, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x6d, 0x6e, 0x69, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x79, 0x0a, 0x1f, 0x61, 0x73, 0x6d, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x93, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x41, 0x73, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x73, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x21, 0x61, 0x73, 0x6d, 0x5f, 0x64, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x94, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x41, 0x73, 0x6d, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x61, 0x73, 0x6d, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x1d, 0x61, 0x73, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x95, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x41, 0x73, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x61, 0x73,
	0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x16, 0x61, 0x73, 0x6d, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x96, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x41, 0x73, 0x6d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x13, 0x61, 0x73, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x97, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x41, 0x73, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x10, 0x61, 0x73, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x98, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x41, 0x73, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x73, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x1d, 0x61, 0x73, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x99, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x41, 0x73, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x75, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x61,
	0x73, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75,
	0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x20, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xf4, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xf5, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xf6, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x21, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xf7, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x21, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xf8, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x21, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xf9, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xfa, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x22, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xfb, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x22, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0xfc, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x79,
	0x0a, 0x1f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0xfd, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x79, 0x0a, 0x1f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xfe, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x79, 0x0a, 0x1f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xff, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x1c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x7c, 0x0a, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x80, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7c, 0x0a,
	0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x81, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x20, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x82, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x2b, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x83, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x27,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x2b, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x84, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x27, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x2b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x85, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x27, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x2a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x86, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x26, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x98,
	0x01, 0x0a, 0x2a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x87, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x26, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x2a, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x88, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x26, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x27, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x89, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x23, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x22, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x8a, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x28,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x8b, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x24, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x72, 0x64, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x44, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0xd9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6e, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x77, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x72, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xbd, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6e, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0xa8, 0x01, 0x0a, 0x30,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0xa0, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x2b, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x1a, 0x6c, 0x6d, 0x73, 0x5f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x84, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x4c, 0x4d, 0x53, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x6c, 0x6d, 0x73, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x1c, 0x6c, 0x6d, 0x73, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x85, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4c, 0x4d,
	0x53, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x6c, 0x6d, 0x73, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x73, 0x0a, 0x1d, 0x6c, 0x6d, 0x73, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x86, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x4c,
	0x4d, 0x53, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x6c, 0x6d, 0x73,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x21, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xe8, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1d, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x21,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x42, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x1d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x74, 0x0a, 0x1c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x19, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x24, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xeb,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x20, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x21, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x1c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48,
	0x00, 0x52, 0x19, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x8a, 0x01, 0x0a,
	0x24, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x20, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x1c, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x19, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x81, 0x01, 0x0a, 0x21, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x1d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x1c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x19,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x24, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x20, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x23, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xf3,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x16,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xcc, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x60,
	0x0a, 0x16, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xcd, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x77, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0xb0, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x23, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0xb1, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x74, 0x0a,
	0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xb2, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6b, 0x79, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4b, 0x79, 0x63, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4b, 0x79, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x7a, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0xb4, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x45, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x45, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x21,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0xb5, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x26,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x6b, 0x79, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xb6, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4b, 0x79, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4b, 0x79, 0x63, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7b,
	0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0xb7, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x23, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0xb8, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x75, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x28, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xb9, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x24, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x70, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x94, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0xb7, 0x01, 0x0a, 0x15, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x42, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0xa2, 0x02, 0x03, 0x41, 0x43, 0x41, 0xaa, 0x02, 0x11, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0xca, 0x02, 0x11, 0x41, 0x70, 0x69,
	0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0xe2, 0x02,
	0x1d, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x13, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x3a, 0x3a, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_audit_audit_proto_rawDescOnce sync.Once
	file_api_commons_audit_audit_proto_rawDescData = file_api_commons_audit_audit_proto_rawDesc
)

func file_api_commons_audit_audit_proto_rawDescGZIP() []byte {
	file_api_commons_audit_audit_proto_rawDescOnce.Do(func() {
		file_api_commons_audit_audit_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_audit_audit_proto_rawDescData)
	})
	return file_api_commons_audit_audit_proto_rawDescData
}

var file_api_commons_audit_audit_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_api_commons_audit_audit_proto_goTypes = []any{
	(*AuditEvent)(nil),                                   // 0: api.commons.audit.AuditEvent
	(*timestamppb.Timestamp)(nil),                        // 1: google.protobuf.Timestamp
	(EventType)(0),                                       // 2: api.commons.audit.EventType
	(*DummyEvent)(nil),                                   // 3: api.commons.audit.DummyEvent
	(*VanaFlagEvent)(nil),                                // 4: api.commons.audit.VanaFlagEvent
	(*VanaFlagReviewEvent)(nil),                          // 5: api.commons.audit.VanaFlagReviewEvent
	(*VanaBillingReportEvent)(nil),                       // 6: api.commons.audit.VanaBillingReportEvent
	(*VanaFlagSummaryEvent)(nil),                         // 7: api.commons.audit.VanaFlagSummaryEvent
	(*VanaPhraseCorrectionEvent)(nil),                    // 8: api.commons.audit.VanaPhraseCorrectionEvent
	(*VanaCreateTranscriptEvent)(nil),                    // 9: api.commons.audit.VanaCreateTranscriptEvent
	(*VanaCreateSentimentEvent)(nil),                     // 10: api.commons.audit.VanaCreateSentimentEvent
	(*VanaCreateSummaryEvent)(nil),                       // 11: api.commons.audit.VanaCreateSummaryEvent
	(*OmnichannelCreateProjectEvent)(nil),                // 12: api.commons.audit.OmnichannelCreateProjectEvent
	(*OmnichannelCreateCampaignEvent)(nil),               // 13: api.commons.audit.OmnichannelCreateCampaignEvent
	(*OmnichannelDailyProjectReportEvent)(nil),           // 14: api.commons.audit.OmnichannelDailyProjectReportEvent
	(*OmnichannelDailyConversationReportEvent)(nil),      // 15: api.commons.audit.OmnichannelDailyConversationReportEvent
	(*OmnichannelAgentAssignConversationEvent)(nil),      // 16: api.commons.audit.OmnichannelAgentAssignConversationEvent
	(*OmnichannelAgentUnassignConversationEvent)(nil),    // 17: api.commons.audit.OmnichannelAgentUnassignConversationEvent
	(*OmnichannelAgentReassignConversationEvent)(nil),    // 18: api.commons.audit.OmnichannelAgentReassignConversationEvent
	(*OmnichannelT10Event)(nil),                          // 19: api.commons.audit.OmnichannelT10Event
	(*OmnichannelCustomerTextMessageEvent)(nil),          // 20: api.commons.audit.OmnichannelCustomerTextMessageEvent
	(*OmnichannelAgentTextMessageEvent)(nil),             // 21: api.commons.audit.OmnichannelAgentTextMessageEvent
	(*OmnichannelFinishWrapUpEvent)(nil),                 // 22: api.commons.audit.OmnichannelFinishWrapUpEvent
	(*OmnichannelBeginWrapUpEvent)(nil),                  // 23: api.commons.audit.OmnichannelBeginWrapUpEvent
	(*OmnichannelT11Event)(nil),                          // 24: api.commons.audit.OmnichannelT11Event
	(*OmnichannelCreateConversationEvent)(nil),           // 25: api.commons.audit.OmnichannelCreateConversationEvent
	(*OmnichannelAgentSuspendEvent)(nil),                 // 26: api.commons.audit.OmnichannelAgentSuspendEvent
	(*OmnichannelCloseConversationEvent)(nil),            // 27: api.commons.audit.OmnichannelCloseConversationEvent
	(*OmnichannelManagerTextMessageEvent)(nil),           // 28: api.commons.audit.OmnichannelManagerTextMessageEvent
	(*OmnichannelUpdateCampaignEvent)(nil),               // 29: api.commons.audit.OmnichannelUpdateCampaignEvent
	(*OmnichannelSetConversationCollectedDataEvent)(nil), // 30: api.commons.audit.OmnichannelSetConversationCollectedDataEvent
	(*OmnichannelCompleteCampaignEvent)(nil),             // 31: api.commons.audit.OmnichannelCompleteCampaignEvent
	(*OmnichannelArchiveCampaignEvent)(nil),              // 32: api.commons.audit.OmnichannelArchiveCampaignEvent
	(*OmnichannelPauseCampaignEvent)(nil),                // 33: api.commons.audit.OmnichannelPauseCampaignEvent
	(*OmnichannelResumeCampaignEvent)(nil),               // 34: api.commons.audit.OmnichannelResumeCampaignEvent
	(*OmnichannelStartCampaignEvent)(nil),                // 35: api.commons.audit.OmnichannelStartCampaignEvent
	(*OmnichannelScheduleModuleEvent)(nil),               // 36: api.commons.audit.OmnichannelScheduleModuleEvent
	(*OmnichannelStartModuleEvent)(nil),                  // 37: api.commons.audit.OmnichannelStartModuleEvent
	(*OmnichannelPauseModuleEvent)(nil),                  // 38: api.commons.audit.OmnichannelPauseModuleEvent
	(*OmnichannelResumeModuleEvent)(nil),                 // 39: api.commons.audit.OmnichannelResumeModuleEvent
	(*OmnichannelErrorModuleEvent)(nil),                  // 40: api.commons.audit.OmnichannelErrorModuleEvent
	(*OmnichannelSuccessModuleEvent)(nil),                // 41: api.commons.audit.OmnichannelSuccessModuleEvent
	(*OmnichannelFailModuleEvent)(nil),                   // 42: api.commons.audit.OmnichannelFailModuleEvent
	(*OmnichannelCompleteModuleEvent)(nil),               // 43: api.commons.audit.OmnichannelCompleteModuleEvent
	(*OmnichannelArchiveModuleEvent)(nil),                // 44: api.commons.audit.OmnichannelArchiveModuleEvent
	(*OmnichannelUpdateModuleEvent)(nil),                 // 45: api.commons.audit.OmnichannelUpdateModuleEvent
	(*OmnichannelSmsMessageSentModuleEvent)(nil),         // 46: api.commons.audit.OmnichannelSmsMessageSentModuleEvent
	(*OmnichannelModuleInitialReplyEvent)(nil),           // 47: api.commons.audit.OmnichannelModuleInitialReplyEvent
	(*OmnichannelTaskMessageSentEvent)(nil),              // 48: api.commons.audit.OmnichannelTaskMessageSentEvent
	(*OmnichannelConnectedInboxPollEvent)(nil),           // 49: api.commons.audit.OmnichannelConnectedInboxPollEvent
	(*OmnichannelConnectedInboxCreatedEvent)(nil),        // 50: api.commons.audit.OmnichannelConnectedInboxCreatedEvent
	(*OmnichannelAgentMessageUnitsEvent)(nil),            // 51: api.commons.audit.OmnichannelAgentMessageUnitsEvent
	(*OmnichannelManagerMessageUnitsEvent)(nil),          // 52: api.commons.audit.OmnichannelManagerMessageUnitsEvent
	(*OmnichannelCustomerMessageUnitsEvent)(nil),         // 53: api.commons.audit.OmnichannelCustomerMessageUnitsEvent
	(*OmnichannelSystemMessageUnitsEvent)(nil),           // 54: api.commons.audit.OmnichannelSystemMessageUnitsEvent
	(*OmnichannelPaymentLinkSentEvent)(nil),              // 55: api.commons.audit.OmnichannelPaymentLinkSentEvent
	(*OmnichannelManualApproveTaskAcceptedEvent)(nil),    // 56: api.commons.audit.OmnichannelManualApproveTaskAcceptedEvent
	(*OmnichannelManualApproveTaskRejectedEvent)(nil),    // 57: api.commons.audit.OmnichannelManualApproveTaskRejectedEvent
	(*OmnichannelManualApproveTaskTimeoutEvent)(nil),     // 58: api.commons.audit.OmnichannelManualApproveTaskTimeoutEvent
	(*OmnichannelManualApproveTaskRequeueEvent)(nil),     // 59: api.commons.audit.OmnichannelManualApproveTaskRequeueEvent
	(*OmnichannelTranscriptSavedEvent)(nil),              // 60: api.commons.audit.OmnichannelTranscriptSavedEvent
	(*OmnichannelMessageSentEvent)(nil),                  // 61: api.commons.audit.OmnichannelMessageSentEvent
	(*OmnichannelProviderResponseEvent)(nil),             // 62: api.commons.audit.OmnichannelProviderResponseEvent
	(*OmnichannelProviderMessageFailedEvent)(nil),        // 63: api.commons.audit.OmnichannelProviderMessageFailedEvent
	(*AsmAgentLoginEvent)(nil),                           // 64: api.commons.audit.AsmAgentLoginEvent
	(*AsmOpenVoiceEvent)(nil),                            // 65: api.commons.audit.AsmOpenVoiceEvent
	(*AsmOpenOmniAgentEvent)(nil),                        // 66: api.commons.audit.AsmOpenOmniAgentEvent
	(*AsmActivateConversationEvent)(nil),                 // 67: api.commons.audit.AsmActivateConversationEvent
	(*AsmDeactivateConversationEvent)(nil),               // 68: api.commons.audit.AsmDeactivateConversationEvent
	(*AsmAgentStateChangedEvent)(nil),                    // 69: api.commons.audit.AsmAgentStateChangedEvent
	(*AsmAgentLogoutEvent)(nil),                          // 70: api.commons.audit.AsmAgentLogoutEvent
	(*AsmPauseEvent)(nil),                                // 71: api.commons.audit.AsmPauseEvent
	(*AsmResumeEvent)(nil),                               // 72: api.commons.audit.AsmResumeEvent
	(*AsmConversationPulledEvent)(nil),                   // 73: api.commons.audit.AsmConversationPulledEvent
	(*ScorecardsCreateQuestionEvent)(nil),                // 74: api.commons.audit.ScorecardsCreateQuestionEvent
	(*ScorecardsUpdateQuestionEvent)(nil),                // 75: api.commons.audit.ScorecardsUpdateQuestionEvent
	(*ScorecardsDeleteQuestionEvent)(nil),                // 76: api.commons.audit.ScorecardsDeleteQuestionEvent
	(*ScorecardsCreateScorecardEvent)(nil),               // 77: api.commons.audit.ScorecardsCreateScorecardEvent
	(*ScorecardsUpdateScorecardEvent)(nil),               // 78: api.commons.audit.ScorecardsUpdateScorecardEvent
	(*ScorecardsDeleteScorecardEvent)(nil),               // 79: api.commons.audit.ScorecardsDeleteScorecardEvent
	(*ScorecardsCloneScorecardEvent)(nil),                // 80: api.commons.audit.ScorecardsCloneScorecardEvent
	(*ScorecardsCreateEvaluationEvent)(nil),              // 81: api.commons.audit.ScorecardsCreateEvaluationEvent
	(*ScorecardsDeleteEvaluationEvent)(nil),              // 82: api.commons.audit.ScorecardsDeleteEvaluationEvent
	(*ScorecardsCreateSectionEvent)(nil),                 // 83: api.commons.audit.ScorecardsCreateSectionEvent
	(*ScorecardsUpdateSectionEvent)(nil),                 // 84: api.commons.audit.ScorecardsUpdateSectionEvent
	(*ScorecardsDeleteSectionEvent)(nil),                 // 85: api.commons.audit.ScorecardsDeleteSectionEvent
	(*ScorecardsCreateCategoryEvent)(nil),                // 86: api.commons.audit.ScorecardsCreateCategoryEvent
	(*ScorecardsUpdateCategoryEvent)(nil),                // 87: api.commons.audit.ScorecardsUpdateCategoryEvent
	(*ScorecardsDeleteCategoryEvent)(nil),                // 88: api.commons.audit.ScorecardsDeleteCategoryEvent
	(*ScorecardsCreateEvaluationQuestionEvent)(nil),      // 89: api.commons.audit.ScorecardsCreateEvaluationQuestionEvent
	(*ScorecardsUpdateEvaluationQuestionEvent)(nil),      // 90: api.commons.audit.ScorecardsUpdateEvaluationQuestionEvent
	(*ScorecardsDeleteEvaluationQuestionEvent)(nil),      // 91: api.commons.audit.ScorecardsDeleteEvaluationQuestionEvent
	(*ScorecardsCreateScorecardQuestionEvent)(nil),       // 92: api.commons.audit.ScorecardsCreateScorecardQuestionEvent
	(*ScorecardsUpdateScorecardQuestionEvent)(nil),       // 93: api.commons.audit.ScorecardsUpdateScorecardQuestionEvent
	(*ScorecardsDeleteScorecardQuestionEvent)(nil),       // 94: api.commons.audit.ScorecardsDeleteScorecardQuestionEvent
	(*ScorecardsCreateAutoEvaluationEvent)(nil),          // 95: api.commons.audit.ScorecardsCreateAutoEvaluationEvent
	(*ScorecardsUpdateEvaluationEvent)(nil),              // 96: api.commons.audit.ScorecardsUpdateEvaluationEvent
	(*ScorecardsCreateSmartEvaluationEvent)(nil),         // 97: api.commons.audit.ScorecardsCreateSmartEvaluationEvent
	(*TicketEvent)(nil),                                  // 98: api.commons.audit.TicketEvent
	(*ComplianceRndQueryEvent)(nil),                      // 99: api.commons.audit.ComplianceRndQueryEvent
	(*AgentTrainingCreateLearningOpportunityEvent)(nil),  // 100: api.commons.audit.AgentTrainingCreateLearningOpportunityEvent
	(*LMSPipelineFailureEvent)(nil),                      // 101: api.commons.audit.LMSPipelineFailureEvent
	(*LMSPipelineNoOutputEvent)(nil),                     // 102: api.commons.audit.LMSPipelineNoOutputEvent
	(*LMSPipelineSuccessfulEvent)(nil),                   // 103: api.commons.audit.LMSPipelineSuccessfulEvent
	(*BillingCommitBillingPlanEvent)(nil),                // 104: api.commons.audit.BillingCommitBillingPlanEvent
	(*BillingCreateBillingPlanEvent)(nil),                // 105: api.commons.audit.BillingCreateBillingPlanEvent
	(*BillingCreateInvoiceEvent)(nil),                    // 106: api.commons.audit.BillingCreateInvoiceEvent
	(*BillingCreateRateDefinitionEvent)(nil),             // 107: api.commons.audit.BillingCreateRateDefinitionEvent
	(*BillingDeleteBillingPlanEvent)(nil),                // 108: api.commons.audit.BillingDeleteBillingPlanEvent
	(*BillingDeleteInvoiceEvent)(nil),                    // 109: api.commons.audit.BillingDeleteInvoiceEvent
	(*BillingDeleteRateDefinitionEvent)(nil),             // 110: api.commons.audit.BillingDeleteRateDefinitionEvent
	(*BillingExportInvoiceEvent)(nil),                    // 111: api.commons.audit.BillingExportInvoiceEvent
	(*BillingUpdateBillingPlanEvent)(nil),                // 112: api.commons.audit.BillingUpdateBillingPlanEvent
	(*BillingUpdateInvoiceEvent)(nil),                    // 113: api.commons.audit.BillingUpdateInvoiceEvent
	(*BillingUpdateRateDefinitionEvent)(nil),             // 114: api.commons.audit.BillingUpdateRateDefinitionEvent
	(*BillingRatedItemsGeneratedEvent)(nil),              // 115: api.commons.audit.BillingRatedItemsGeneratedEvent
	(*DeliveryFailureEvent)(nil),                         // 116: api.commons.audit.DeliveryFailureEvent
	(*DeliverySuccessEvent)(nil),                         // 117: api.commons.audit.DeliverySuccessEvent
	(*ContactManagerEntryAddEvent)(nil),                  // 118: api.commons.audit.ContactManagerEntryAddEvent
	(*ContactManagerEntryGetEncEvent)(nil),               // 119: api.commons.audit.ContactManagerEntryGetEncEvent
	(*ContactManagerDeleteEvent)(nil),                    // 120: api.commons.audit.ContactManagerDeleteEvent
	(*ContactManagerKycEvent)(nil),                       // 121: api.commons.audit.ContactManagerKycEvent
	(*ContactManagerEntryEditEvent)(nil),                 // 122: api.commons.audit.ContactManagerEntryEditEvent
	(*ContactManagerListUploadEvent)(nil),                // 123: api.commons.audit.ContactManagerListUploadEvent
	(*ContactManagerEntityAssociationEvent)(nil),         // 124: api.commons.audit.ContactManagerEntityAssociationEvent
	(*AccessTokensExpiringEvent)(nil),                    // 125: api.commons.audit.AccessTokensExpiringEvent
}
var file_api_commons_audit_audit_proto_depIdxs = []int32{
	1,   // 0: api.commons.audit.AuditEvent.event_time:type_name -> google.protobuf.Timestamp
	2,   // 1: api.commons.audit.AuditEvent.event_type:type_name -> api.commons.audit.EventType
	3,   // 2: api.commons.audit.AuditEvent._dummy_event:type_name -> api.commons.audit.DummyEvent
	4,   // 3: api.commons.audit.AuditEvent.vana_flag_event:type_name -> api.commons.audit.VanaFlagEvent
	5,   // 4: api.commons.audit.AuditEvent.vana_flag_review_event:type_name -> api.commons.audit.VanaFlagReviewEvent
	6,   // 5: api.commons.audit.AuditEvent.vana_billing_report_event:type_name -> api.commons.audit.VanaBillingReportEvent
	7,   // 6: api.commons.audit.AuditEvent.vana_flag_summary_event:type_name -> api.commons.audit.VanaFlagSummaryEvent
	8,   // 7: api.commons.audit.AuditEvent.vana_phrase_correction_event:type_name -> api.commons.audit.VanaPhraseCorrectionEvent
	9,   // 8: api.commons.audit.AuditEvent.vana_create_transcript_event:type_name -> api.commons.audit.VanaCreateTranscriptEvent
	10,  // 9: api.commons.audit.AuditEvent.vana_create_sentiment_event:type_name -> api.commons.audit.VanaCreateSentimentEvent
	11,  // 10: api.commons.audit.AuditEvent.vana_create_summary_event:type_name -> api.commons.audit.VanaCreateSummaryEvent
	12,  // 11: api.commons.audit.AuditEvent.omnichannel_create_project_event:type_name -> api.commons.audit.OmnichannelCreateProjectEvent
	13,  // 12: api.commons.audit.AuditEvent.omnichannel_create_campaign_event:type_name -> api.commons.audit.OmnichannelCreateCampaignEvent
	14,  // 13: api.commons.audit.AuditEvent.omnichannel_daily_project_report_event:type_name -> api.commons.audit.OmnichannelDailyProjectReportEvent
	15,  // 14: api.commons.audit.AuditEvent.omnichannel_daily_conversation_report_event:type_name -> api.commons.audit.OmnichannelDailyConversationReportEvent
	16,  // 15: api.commons.audit.AuditEvent.omnichannel_agent_assign_conversation_event:type_name -> api.commons.audit.OmnichannelAgentAssignConversationEvent
	17,  // 16: api.commons.audit.AuditEvent.omnichannel_agent_unassign_conversation_event:type_name -> api.commons.audit.OmnichannelAgentUnassignConversationEvent
	18,  // 17: api.commons.audit.AuditEvent.omnichannel_agent_reassign_conversation_event:type_name -> api.commons.audit.OmnichannelAgentReassignConversationEvent
	19,  // 18: api.commons.audit.AuditEvent.omnichannel_t10_event:type_name -> api.commons.audit.OmnichannelT10Event
	20,  // 19: api.commons.audit.AuditEvent.omnichannel_customer_text_Message_event:type_name -> api.commons.audit.OmnichannelCustomerTextMessageEvent
	21,  // 20: api.commons.audit.AuditEvent.omnichannel_agent_text_message_event:type_name -> api.commons.audit.OmnichannelAgentTextMessageEvent
	22,  // 21: api.commons.audit.AuditEvent.omnichannel_finish_wrap_up_event:type_name -> api.commons.audit.OmnichannelFinishWrapUpEvent
	23,  // 22: api.commons.audit.AuditEvent.omnichannel_begin_wrap_up_event:type_name -> api.commons.audit.OmnichannelBeginWrapUpEvent
	24,  // 23: api.commons.audit.AuditEvent.omnichannel_t11_event:type_name -> api.commons.audit.OmnichannelT11Event
	25,  // 24: api.commons.audit.AuditEvent.omnichannel_create_conversation_event:type_name -> api.commons.audit.OmnichannelCreateConversationEvent
	26,  // 25: api.commons.audit.AuditEvent.omnichannel_agent_suspend_event:type_name -> api.commons.audit.OmnichannelAgentSuspendEvent
	27,  // 26: api.commons.audit.AuditEvent.omnichannel_close_conversation_event:type_name -> api.commons.audit.OmnichannelCloseConversationEvent
	28,  // 27: api.commons.audit.AuditEvent.omnichannel_manager_text_message_event:type_name -> api.commons.audit.OmnichannelManagerTextMessageEvent
	29,  // 28: api.commons.audit.AuditEvent.omnichannel_update_campaign_event:type_name -> api.commons.audit.OmnichannelUpdateCampaignEvent
	30,  // 29: api.commons.audit.AuditEvent.omnichannel_set_conversation_collected_data_event:type_name -> api.commons.audit.OmnichannelSetConversationCollectedDataEvent
	31,  // 30: api.commons.audit.AuditEvent.omnichannel_complete_campaign_event:type_name -> api.commons.audit.OmnichannelCompleteCampaignEvent
	32,  // 31: api.commons.audit.AuditEvent.omnichannel_archive_campaign_event:type_name -> api.commons.audit.OmnichannelArchiveCampaignEvent
	33,  // 32: api.commons.audit.AuditEvent.omnichannel_pause_campaign_event:type_name -> api.commons.audit.OmnichannelPauseCampaignEvent
	34,  // 33: api.commons.audit.AuditEvent.omnichannel_resume_campaign_event:type_name -> api.commons.audit.OmnichannelResumeCampaignEvent
	35,  // 34: api.commons.audit.AuditEvent.omnichannel_start_campaign_event:type_name -> api.commons.audit.OmnichannelStartCampaignEvent
	36,  // 35: api.commons.audit.AuditEvent.omnichannel_schedule_module_event:type_name -> api.commons.audit.OmnichannelScheduleModuleEvent
	37,  // 36: api.commons.audit.AuditEvent.omnichannel_start_module_event:type_name -> api.commons.audit.OmnichannelStartModuleEvent
	38,  // 37: api.commons.audit.AuditEvent.omnichannel_pause_module_event:type_name -> api.commons.audit.OmnichannelPauseModuleEvent
	39,  // 38: api.commons.audit.AuditEvent.omnichannel_resume_module_event:type_name -> api.commons.audit.OmnichannelResumeModuleEvent
	40,  // 39: api.commons.audit.AuditEvent.omnichannel_error_module_event:type_name -> api.commons.audit.OmnichannelErrorModuleEvent
	41,  // 40: api.commons.audit.AuditEvent.omnichannel_success_module_event:type_name -> api.commons.audit.OmnichannelSuccessModuleEvent
	42,  // 41: api.commons.audit.AuditEvent.omnichannel_fail_module_event:type_name -> api.commons.audit.OmnichannelFailModuleEvent
	43,  // 42: api.commons.audit.AuditEvent.omnichannel_complete_module_event:type_name -> api.commons.audit.OmnichannelCompleteModuleEvent
	44,  // 43: api.commons.audit.AuditEvent.omnichannel_archive_module_event:type_name -> api.commons.audit.OmnichannelArchiveModuleEvent
	45,  // 44: api.commons.audit.AuditEvent.omnichannel_update_module_event:type_name -> api.commons.audit.OmnichannelUpdateModuleEvent
	46,  // 45: api.commons.audit.AuditEvent.omnichannel_add_sms_message_sent_module_event:type_name -> api.commons.audit.OmnichannelSmsMessageSentModuleEvent
	47,  // 46: api.commons.audit.AuditEvent.omnichannel_module_initial_reply_event:type_name -> api.commons.audit.OmnichannelModuleInitialReplyEvent
	48,  // 47: api.commons.audit.AuditEvent.omnichannel_task_message_sent_event:type_name -> api.commons.audit.OmnichannelTaskMessageSentEvent
	49,  // 48: api.commons.audit.AuditEvent.omnichannel_connected_inbox_poll_event:type_name -> api.commons.audit.OmnichannelConnectedInboxPollEvent
	50,  // 49: api.commons.audit.AuditEvent.omnichannel_connected_inbox_created_event:type_name -> api.commons.audit.OmnichannelConnectedInboxCreatedEvent
	51,  // 50: api.commons.audit.AuditEvent.omnichannel_agent_message_units_event:type_name -> api.commons.audit.OmnichannelAgentMessageUnitsEvent
	52,  // 51: api.commons.audit.AuditEvent.omnichannel_manager_message_units_event:type_name -> api.commons.audit.OmnichannelManagerMessageUnitsEvent
	53,  // 52: api.commons.audit.AuditEvent.omnichannel_customer_message_units_event:type_name -> api.commons.audit.OmnichannelCustomerMessageUnitsEvent
	54,  // 53: api.commons.audit.AuditEvent.omnichannel_system_message_units_event:type_name -> api.commons.audit.OmnichannelSystemMessageUnitsEvent
	55,  // 54: api.commons.audit.AuditEvent.omnichannel_payment_link_sent_event:type_name -> api.commons.audit.OmnichannelPaymentLinkSentEvent
	56,  // 55: api.commons.audit.AuditEvent.omnichannel_manual_approve_task_accepted_event:type_name -> api.commons.audit.OmnichannelManualApproveTaskAcceptedEvent
	57,  // 56: api.commons.audit.AuditEvent.omnichannel_manual_approve_task_rejected_event:type_name -> api.commons.audit.OmnichannelManualApproveTaskRejectedEvent
	58,  // 57: api.commons.audit.AuditEvent.omnichannel_manual_approve_task_timeout_event:type_name -> api.commons.audit.OmnichannelManualApproveTaskTimeoutEvent
	59,  // 58: api.commons.audit.AuditEvent.omnichannel_manual_approve_task_requeue_event:type_name -> api.commons.audit.OmnichannelManualApproveTaskRequeueEvent
	60,  // 59: api.commons.audit.AuditEvent.omnichannel_transcript_saved_event:type_name -> api.commons.audit.OmnichannelTranscriptSavedEvent
	61,  // 60: api.commons.audit.AuditEvent.omnichannel_message_sent_event:type_name -> api.commons.audit.OmnichannelMessageSentEvent
	62,  // 61: api.commons.audit.AuditEvent.omnichannel_provider_response_event:type_name -> api.commons.audit.OmnichannelProviderResponseEvent
	63,  // 62: api.commons.audit.AuditEvent.omnichannel_provider_message_failed_event:type_name -> api.commons.audit.OmnichannelProviderMessageFailedEvent
	64,  // 63: api.commons.audit.AuditEvent.asm_agent_login_event:type_name -> api.commons.audit.AsmAgentLoginEvent
	65,  // 64: api.commons.audit.AuditEvent.asm_open_voice_event:type_name -> api.commons.audit.AsmOpenVoiceEvent
	66,  // 65: api.commons.audit.AuditEvent.asm_open_omni_agent_event:type_name -> api.commons.audit.AsmOpenOmniAgentEvent
	67,  // 66: api.commons.audit.AuditEvent.asm_activate_conversation_event:type_name -> api.commons.audit.AsmActivateConversationEvent
	68,  // 67: api.commons.audit.AuditEvent.asm_deactivate_conversation_event:type_name -> api.commons.audit.AsmDeactivateConversationEvent
	69,  // 68: api.commons.audit.AuditEvent.asm_agent_state_changed_event:type_name -> api.commons.audit.AsmAgentStateChangedEvent
	70,  // 69: api.commons.audit.AuditEvent.asm_agent_logout_event:type_name -> api.commons.audit.AsmAgentLogoutEvent
	71,  // 70: api.commons.audit.AuditEvent.asm_pause_event:type_name -> api.commons.audit.AsmPauseEvent
	72,  // 71: api.commons.audit.AuditEvent.asm_resume_event:type_name -> api.commons.audit.AsmResumeEvent
	73,  // 72: api.commons.audit.AuditEvent.asm_conversation_pulled_event:type_name -> api.commons.audit.AsmConversationPulledEvent
	74,  // 73: api.commons.audit.AuditEvent.scorecards_create_question_event:type_name -> api.commons.audit.ScorecardsCreateQuestionEvent
	75,  // 74: api.commons.audit.AuditEvent.scorecards_update_question_event:type_name -> api.commons.audit.ScorecardsUpdateQuestionEvent
	76,  // 75: api.commons.audit.AuditEvent.scorecards_delete_question_event:type_name -> api.commons.audit.ScorecardsDeleteQuestionEvent
	77,  // 76: api.commons.audit.AuditEvent.scorecards_create_scorecard_event:type_name -> api.commons.audit.ScorecardsCreateScorecardEvent
	78,  // 77: api.commons.audit.AuditEvent.scorecards_update_scorecard_event:type_name -> api.commons.audit.ScorecardsUpdateScorecardEvent
	79,  // 78: api.commons.audit.AuditEvent.scorecards_delete_scorecard_event:type_name -> api.commons.audit.ScorecardsDeleteScorecardEvent
	80,  // 79: api.commons.audit.AuditEvent.scorecards_clone_scorecard_event:type_name -> api.commons.audit.ScorecardsCloneScorecardEvent
	81,  // 80: api.commons.audit.AuditEvent.scorecards_create_evaluation_event:type_name -> api.commons.audit.ScorecardsCreateEvaluationEvent
	82,  // 81: api.commons.audit.AuditEvent.scorecards_delete_evaluation_event:type_name -> api.commons.audit.ScorecardsDeleteEvaluationEvent
	83,  // 82: api.commons.audit.AuditEvent.scorecards_create_section_event:type_name -> api.commons.audit.ScorecardsCreateSectionEvent
	84,  // 83: api.commons.audit.AuditEvent.scorecards_update_section_event:type_name -> api.commons.audit.ScorecardsUpdateSectionEvent
	85,  // 84: api.commons.audit.AuditEvent.scorecards_delete_section_event:type_name -> api.commons.audit.ScorecardsDeleteSectionEvent
	86,  // 85: api.commons.audit.AuditEvent.scorecards_create_category_event:type_name -> api.commons.audit.ScorecardsCreateCategoryEvent
	87,  // 86: api.commons.audit.AuditEvent.scorecards_update_category_event:type_name -> api.commons.audit.ScorecardsUpdateCategoryEvent
	88,  // 87: api.commons.audit.AuditEvent.scorecards_delete_category_event:type_name -> api.commons.audit.ScorecardsDeleteCategoryEvent
	89,  // 88: api.commons.audit.AuditEvent.scorecards_create_evaluation_question_event:type_name -> api.commons.audit.ScorecardsCreateEvaluationQuestionEvent
	90,  // 89: api.commons.audit.AuditEvent.scorecards_update_evaluation_question_event:type_name -> api.commons.audit.ScorecardsUpdateEvaluationQuestionEvent
	91,  // 90: api.commons.audit.AuditEvent.scorecards_delete_evaluation_question_event:type_name -> api.commons.audit.ScorecardsDeleteEvaluationQuestionEvent
	92,  // 91: api.commons.audit.AuditEvent.scorecards_create_scorecard_question_event:type_name -> api.commons.audit.ScorecardsCreateScorecardQuestionEvent
	93,  // 92: api.commons.audit.AuditEvent.scorecards_update_scorecard_question_event:type_name -> api.commons.audit.ScorecardsUpdateScorecardQuestionEvent
	94,  // 93: api.commons.audit.AuditEvent.scorecards_delete_scorecard_question_event:type_name -> api.commons.audit.ScorecardsDeleteScorecardQuestionEvent
	95,  // 94: api.commons.audit.AuditEvent.scorecards_create_auto_evaluation_event:type_name -> api.commons.audit.ScorecardsCreateAutoEvaluationEvent
	96,  // 95: api.commons.audit.AuditEvent.scorecards_update_evaluation_event:type_name -> api.commons.audit.ScorecardsUpdateEvaluationEvent
	97,  // 96: api.commons.audit.AuditEvent.scorecards_create_smart_evaluation_event:type_name -> api.commons.audit.ScorecardsCreateSmartEvaluationEvent
	98,  // 97: api.commons.audit.AuditEvent.ticket_event:type_name -> api.commons.audit.TicketEvent
	99,  // 98: api.commons.audit.AuditEvent.compliance_rnd_query_event:type_name -> api.commons.audit.ComplianceRndQueryEvent
	99,  // 99: api.commons.audit.AuditEvent.compliance_rnd_query_cached_event:type_name -> api.commons.audit.ComplianceRndQueryEvent
	100, // 100: api.commons.audit.AuditEvent.agent_training_create_learning_opportunity_event:type_name -> api.commons.audit.AgentTrainingCreateLearningOpportunityEvent
	101, // 101: api.commons.audit.AuditEvent.lms_pipeline_failure_event:type_name -> api.commons.audit.LMSPipelineFailureEvent
	102, // 102: api.commons.audit.AuditEvent.lms_pipeline_no_output_event:type_name -> api.commons.audit.LMSPipelineNoOutputEvent
	103, // 103: api.commons.audit.AuditEvent.lms_pipeline_successful_event:type_name -> api.commons.audit.LMSPipelineSuccessfulEvent
	104, // 104: api.commons.audit.AuditEvent.billing_commit_billing_plan_event:type_name -> api.commons.audit.BillingCommitBillingPlanEvent
	105, // 105: api.commons.audit.AuditEvent.billing_create_billing_plan_event:type_name -> api.commons.audit.BillingCreateBillingPlanEvent
	106, // 106: api.commons.audit.AuditEvent.billing_create_invoice_event:type_name -> api.commons.audit.BillingCreateInvoiceEvent
	107, // 107: api.commons.audit.AuditEvent.billing_create_rate_definition_event:type_name -> api.commons.audit.BillingCreateRateDefinitionEvent
	108, // 108: api.commons.audit.AuditEvent.billing_delete_billing_plan_event:type_name -> api.commons.audit.BillingDeleteBillingPlanEvent
	109, // 109: api.commons.audit.AuditEvent.billing_delete_invoice_event:type_name -> api.commons.audit.BillingDeleteInvoiceEvent
	110, // 110: api.commons.audit.AuditEvent.billing_delete_rate_definition_event:type_name -> api.commons.audit.BillingDeleteRateDefinitionEvent
	111, // 111: api.commons.audit.AuditEvent.billing_export_invoice_event:type_name -> api.commons.audit.BillingExportInvoiceEvent
	112, // 112: api.commons.audit.AuditEvent.billing_update_billing_plan_event:type_name -> api.commons.audit.BillingUpdateBillingPlanEvent
	113, // 113: api.commons.audit.AuditEvent.billing_update_invoice_event:type_name -> api.commons.audit.BillingUpdateInvoiceEvent
	114, // 114: api.commons.audit.AuditEvent.billing_update_rate_definition_event:type_name -> api.commons.audit.BillingUpdateRateDefinitionEvent
	115, // 115: api.commons.audit.AuditEvent.billing_rated_items_generated_event:type_name -> api.commons.audit.BillingRatedItemsGeneratedEvent
	116, // 116: api.commons.audit.AuditEvent.delivery_failure_event:type_name -> api.commons.audit.DeliveryFailureEvent
	117, // 117: api.commons.audit.AuditEvent.delivery_success_event:type_name -> api.commons.audit.DeliverySuccessEvent
	118, // 118: api.commons.audit.AuditEvent.contact_manager_entry_add_event:type_name -> api.commons.audit.ContactManagerEntryAddEvent
	119, // 119: api.commons.audit.AuditEvent.contact_manager_entry_get_enc_event:type_name -> api.commons.audit.ContactManagerEntryGetEncEvent
	120, // 120: api.commons.audit.AuditEvent.contact_manager_delete_event:type_name -> api.commons.audit.ContactManagerDeleteEvent
	121, // 121: api.commons.audit.AuditEvent.contact_manager_kyc_event:type_name -> api.commons.audit.ContactManagerKycEvent
	122, // 122: api.commons.audit.AuditEvent.contact_manager_entry_edit_event:type_name -> api.commons.audit.ContactManagerEntryEditEvent
	123, // 123: api.commons.audit.AuditEvent.contact_manager_list_upload_event:type_name -> api.commons.audit.ContactManagerListUploadEvent
	121, // 124: api.commons.audit.AuditEvent.contact_manager_kyc_verification_event:type_name -> api.commons.audit.ContactManagerKycEvent
	120, // 125: api.commons.audit.AuditEvent.contact_manager_entry_delete_event:type_name -> api.commons.audit.ContactManagerDeleteEvent
	120, // 126: api.commons.audit.AuditEvent.contact_manager_entry_expunge_event:type_name -> api.commons.audit.ContactManagerDeleteEvent
	124, // 127: api.commons.audit.AuditEvent.contact_manager_entity_association_event:type_name -> api.commons.audit.ContactManagerEntityAssociationEvent
	125, // 128: api.commons.audit.AuditEvent.access_tokens_expiring_event:type_name -> api.commons.audit.AccessTokensExpiringEvent
	129, // [129:129] is the sub-list for method output_type
	129, // [129:129] is the sub-list for method input_type
	129, // [129:129] is the sub-list for extension type_name
	129, // [129:129] is the sub-list for extension extendee
	0,   // [0:129] is the sub-list for field type_name
}

func init() { file_api_commons_audit_audit_proto_init() }
func file_api_commons_audit_audit_proto_init() {
	if File_api_commons_audit_audit_proto != nil {
		return
	}
	file_api_commons_audit_agent_training_events_proto_init()
	file_api_commons_audit_asm_events_proto_init()
	file_api_commons_audit_billing_events_proto_init()
	file_api_commons_audit_compliance_events_proto_init()
	file_api_commons_audit_contactmanager_events_proto_init()
	file_api_commons_audit_delivery_events_proto_init()
	file_api_commons_audit_event_types_proto_init()
	file_api_commons_audit_events_proto_init()
	file_api_commons_audit_lms_events_proto_init()
	file_api_commons_audit_omnichannel_events_proto_init()
	file_api_commons_audit_organization_events_proto_init()
	file_api_commons_audit_scorecards_events_proto_init()
	file_api_commons_audit_tickets_events_proto_init()
	file_api_commons_audit_vana_events_proto_init()
	file_api_commons_audit_audit_proto_msgTypes[0].OneofWrappers = []any{
		(*AuditEvent_XDummyEvent)(nil),
		(*AuditEvent_VanaFlagEvent)(nil),
		(*AuditEvent_VanaFlagReviewEvent)(nil),
		(*AuditEvent_VanaBillingReportEvent)(nil),
		(*AuditEvent_VanaFlagSummaryEvent)(nil),
		(*AuditEvent_VanaPhraseCorrectionEvent)(nil),
		(*AuditEvent_VanaCreateTranscriptEvent)(nil),
		(*AuditEvent_VanaCreateSentimentEvent)(nil),
		(*AuditEvent_VanaCreateSummaryEvent)(nil),
		(*AuditEvent_OmnichannelCreateProjectEvent)(nil),
		(*AuditEvent_OmnichannelCreateCampaignEvent)(nil),
		(*AuditEvent_OmnichannelDailyProjectReportEvent)(nil),
		(*AuditEvent_OmnichannelDailyConversationReportEvent)(nil),
		(*AuditEvent_OmnichannelAgentAssignConversationEvent)(nil),
		(*AuditEvent_OmnichannelAgentUnassignConversationEvent)(nil),
		(*AuditEvent_OmnichannelAgentReassignConversationEvent)(nil),
		(*AuditEvent_OmnichannelT10Event)(nil),
		(*AuditEvent_OmnichannelCustomerText_MessageEvent)(nil),
		(*AuditEvent_OmnichannelAgentTextMessageEvent)(nil),
		(*AuditEvent_OmnichannelFinishWrapUpEvent)(nil),
		(*AuditEvent_OmnichannelBeginWrapUpEvent)(nil),
		(*AuditEvent_OmnichannelT11Event)(nil),
		(*AuditEvent_OmnichannelCreateConversationEvent)(nil),
		(*AuditEvent_OmnichannelAgentSuspendEvent)(nil),
		(*AuditEvent_OmnichannelCloseConversationEvent)(nil),
		(*AuditEvent_OmnichannelManagerTextMessageEvent)(nil),
		(*AuditEvent_OmnichannelUpdateCampaignEvent)(nil),
		(*AuditEvent_OmnichannelSetConversationCollectedDataEvent)(nil),
		(*AuditEvent_OmnichannelCompleteCampaignEvent)(nil),
		(*AuditEvent_OmnichannelArchiveCampaignEvent)(nil),
		(*AuditEvent_OmnichannelPauseCampaignEvent)(nil),
		(*AuditEvent_OmnichannelResumeCampaignEvent)(nil),
		(*AuditEvent_OmnichannelStartCampaignEvent)(nil),
		(*AuditEvent_OmnichannelScheduleModuleEvent)(nil),
		(*AuditEvent_OmnichannelStartModuleEvent)(nil),
		(*AuditEvent_OmnichannelPauseModuleEvent)(nil),
		(*AuditEvent_OmnichannelResumeModuleEvent)(nil),
		(*AuditEvent_OmnichannelErrorModuleEvent)(nil),
		(*AuditEvent_OmnichannelSuccessModuleEvent)(nil),
		(*AuditEvent_OmnichannelFailModuleEvent)(nil),
		(*AuditEvent_OmnichannelCompleteModuleEvent)(nil),
		(*AuditEvent_OmnichannelArchiveModuleEvent)(nil),
		(*AuditEvent_OmnichannelUpdateModuleEvent)(nil),
		(*AuditEvent_OmnichannelAddSmsMessageSentModuleEvent)(nil),
		(*AuditEvent_OmnichannelModuleInitialReplyEvent)(nil),
		(*AuditEvent_OmnichannelTaskMessageSentEvent)(nil),
		(*AuditEvent_OmnichannelConnectedInboxPollEvent)(nil),
		(*AuditEvent_OmnichannelConnectedInboxCreatedEvent)(nil),
		(*AuditEvent_OmnichannelAgentMessageUnitsEvent)(nil),
		(*AuditEvent_OmnichannelManagerMessageUnitsEvent)(nil),
		(*AuditEvent_OmnichannelCustomerMessageUnitsEvent)(nil),
		(*AuditEvent_OmnichannelSystemMessageUnitsEvent)(nil),
		(*AuditEvent_OmnichannelPaymentLinkSentEvent)(nil),
		(*AuditEvent_OmnichannelManualApproveTaskAcceptedEvent)(nil),
		(*AuditEvent_OmnichannelManualApproveTaskRejectedEvent)(nil),
		(*AuditEvent_OmnichannelManualApproveTaskTimeoutEvent)(nil),
		(*AuditEvent_OmnichannelManualApproveTaskRequeueEvent)(nil),
		(*AuditEvent_OmnichannelTranscriptSavedEvent)(nil),
		(*AuditEvent_OmnichannelMessageSentEvent)(nil),
		(*AuditEvent_OmnichannelProviderResponseEvent)(nil),
		(*AuditEvent_OmnichannelProviderMessageFailedEvent)(nil),
		(*AuditEvent_AsmAgentLoginEvent)(nil),
		(*AuditEvent_AsmOpenVoiceEvent)(nil),
		(*AuditEvent_AsmOpenOmniAgentEvent)(nil),
		(*AuditEvent_AsmActivateConversationEvent)(nil),
		(*AuditEvent_AsmDeactivateConversationEvent)(nil),
		(*AuditEvent_AsmAgentStateChangedEvent)(nil),
		(*AuditEvent_AsmAgentLogoutEvent)(nil),
		(*AuditEvent_AsmPauseEvent)(nil),
		(*AuditEvent_AsmResumeEvent)(nil),
		(*AuditEvent_AsmConversationPulledEvent)(nil),
		(*AuditEvent_ScorecardsCreateQuestionEvent)(nil),
		(*AuditEvent_ScorecardsUpdateQuestionEvent)(nil),
		(*AuditEvent_ScorecardsDeleteQuestionEvent)(nil),
		(*AuditEvent_ScorecardsCreateScorecardEvent)(nil),
		(*AuditEvent_ScorecardsUpdateScorecardEvent)(nil),
		(*AuditEvent_ScorecardsDeleteScorecardEvent)(nil),
		(*AuditEvent_ScorecardsCloneScorecardEvent)(nil),
		(*AuditEvent_ScorecardsCreateEvaluationEvent)(nil),
		(*AuditEvent_ScorecardsDeleteEvaluationEvent)(nil),
		(*AuditEvent_ScorecardsCreateSectionEvent)(nil),
		(*AuditEvent_ScorecardsUpdateSectionEvent)(nil),
		(*AuditEvent_ScorecardsDeleteSectionEvent)(nil),
		(*AuditEvent_ScorecardsCreateCategoryEvent)(nil),
		(*AuditEvent_ScorecardsUpdateCategoryEvent)(nil),
		(*AuditEvent_ScorecardsDeleteCategoryEvent)(nil),
		(*AuditEvent_ScorecardsCreateEvaluationQuestionEvent)(nil),
		(*AuditEvent_ScorecardsUpdateEvaluationQuestionEvent)(nil),
		(*AuditEvent_ScorecardsDeleteEvaluationQuestionEvent)(nil),
		(*AuditEvent_ScorecardsCreateScorecardQuestionEvent)(nil),
		(*AuditEvent_ScorecardsUpdateScorecardQuestionEvent)(nil),
		(*AuditEvent_ScorecardsDeleteScorecardQuestionEvent)(nil),
		(*AuditEvent_ScorecardsCreateAutoEvaluationEvent)(nil),
		(*AuditEvent_ScorecardsUpdateEvaluationEvent)(nil),
		(*AuditEvent_ScorecardsCreateSmartEvaluationEvent)(nil),
		(*AuditEvent_TicketEvent)(nil),
		(*AuditEvent_ComplianceRndQueryEvent)(nil),
		(*AuditEvent_ComplianceRndQueryCachedEvent)(nil),
		(*AuditEvent_AgentTrainingCreateLearningOpportunityEvent)(nil),
		(*AuditEvent_LmsPipelineFailureEvent)(nil),
		(*AuditEvent_LmsPipelineNoOutputEvent)(nil),
		(*AuditEvent_LmsPipelineSuccessfulEvent)(nil),
		(*AuditEvent_BillingCommitBillingPlanEvent)(nil),
		(*AuditEvent_BillingCreateBillingPlanEvent)(nil),
		(*AuditEvent_BillingCreateInvoiceEvent)(nil),
		(*AuditEvent_BillingCreateRateDefinitionEvent)(nil),
		(*AuditEvent_BillingDeleteBillingPlanEvent)(nil),
		(*AuditEvent_BillingDeleteInvoiceEvent)(nil),
		(*AuditEvent_BillingDeleteRateDefinitionEvent)(nil),
		(*AuditEvent_BillingExportInvoiceEvent)(nil),
		(*AuditEvent_BillingUpdateBillingPlanEvent)(nil),
		(*AuditEvent_BillingUpdateInvoiceEvent)(nil),
		(*AuditEvent_BillingUpdateRateDefinitionEvent)(nil),
		(*AuditEvent_BillingRatedItemsGeneratedEvent)(nil),
		(*AuditEvent_DeliveryFailureEvent)(nil),
		(*AuditEvent_DeliverySuccessEvent)(nil),
		(*AuditEvent_ContactManagerEntryAddEvent)(nil),
		(*AuditEvent_ContactManagerEntryGetEncEvent)(nil),
		(*AuditEvent_ContactManagerDeleteEvent)(nil),
		(*AuditEvent_ContactManagerKycEvent)(nil),
		(*AuditEvent_ContactManagerEntryEditEvent)(nil),
		(*AuditEvent_ContactManagerListUploadEvent)(nil),
		(*AuditEvent_ContactManagerKycVerificationEvent)(nil),
		(*AuditEvent_ContactManagerEntryDeleteEvent)(nil),
		(*AuditEvent_ContactManagerEntryExpungeEvent)(nil),
		(*AuditEvent_ContactManagerEntityAssociationEvent)(nil),
		(*AuditEvent_AccessTokensExpiringEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_audit_audit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_audit_audit_proto_goTypes,
		DependencyIndexes: file_api_commons_audit_audit_proto_depIdxs,
		MessageInfos:      file_api_commons_audit_audit_proto_msgTypes,
	}.Build()
	File_api_commons_audit_audit_proto = out.File
	file_api_commons_audit_audit_proto_rawDesc = nil
	file_api_commons_audit_audit_proto_goTypes = nil
	file_api_commons_audit_audit_proto_depIdxs = nil
}
