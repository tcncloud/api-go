// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: api/commons/audit/contactmanager_events.proto

package audit

import (
	commons "github.com/tcncloud/api-go/api/commons"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// payload for CreateContactEntry(upload) and AddContactEntry
type ContactManagerEntryAddEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddEvent *ContactManagerEntryEvent `protobuf:"bytes,1,opt,name=addEvent,proto3" json:"addEvent,omitempty"` //add event
}

func (x *ContactManagerEntryAddEvent) Reset() {
	*x = ContactManagerEntryAddEvent{}
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactManagerEntryAddEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactManagerEntryAddEvent) ProtoMessage() {}

func (x *ContactManagerEntryAddEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactManagerEntryAddEvent.ProtoReflect.Descriptor instead.
func (*ContactManagerEntryAddEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_contactmanager_events_proto_rawDescGZIP(), []int{0}
}

func (x *ContactManagerEntryAddEvent) GetAddEvent() *ContactManagerEntryEvent {
	if x != nil {
		return x.AddEvent
	}
	return nil
}

type ContactManagerEntryGetEncEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewEvent *ContactManagerEntryEvent `protobuf:"bytes,1,opt,name=viewEvent,proto3" json:"viewEvent,omitempty"` //View event
}

func (x *ContactManagerEntryGetEncEvent) Reset() {
	*x = ContactManagerEntryGetEncEvent{}
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactManagerEntryGetEncEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactManagerEntryGetEncEvent) ProtoMessage() {}

func (x *ContactManagerEntryGetEncEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactManagerEntryGetEncEvent.ProtoReflect.Descriptor instead.
func (*ContactManagerEntryGetEncEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_contactmanager_events_proto_rawDescGZIP(), []int{1}
}

func (x *ContactManagerEntryGetEncEvent) GetViewEvent() *ContactManagerEntryEvent {
	if x != nil {
		return x.ViewEvent
	}
	return nil
}

type ContactManagerEntryEditEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditEvent *ContactManagerEntryEvent `protobuf:"bytes,1,opt,name=editEvent,proto3" json:"editEvent,omitempty"` //edit event
}

func (x *ContactManagerEntryEditEvent) Reset() {
	*x = ContactManagerEntryEditEvent{}
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactManagerEntryEditEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactManagerEntryEditEvent) ProtoMessage() {}

func (x *ContactManagerEntryEditEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactManagerEntryEditEvent.ProtoReflect.Descriptor instead.
func (*ContactManagerEntryEditEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_contactmanager_events_proto_rawDescGZIP(), []int{2}
}

func (x *ContactManagerEntryEditEvent) GetEditEvent() *ContactManagerEntryEvent {
	if x != nil {
		return x.EditEvent
	}
	return nil
}

type ContactManagerDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteEvent *ContactManagerEntryEvent `protobuf:"bytes,1,opt,name=deleteEvent,proto3" json:"deleteEvent,omitempty"` //delete event
}

func (x *ContactManagerDeleteEvent) Reset() {
	*x = ContactManagerDeleteEvent{}
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactManagerDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactManagerDeleteEvent) ProtoMessage() {}

func (x *ContactManagerDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactManagerDeleteEvent.ProtoReflect.Descriptor instead.
func (*ContactManagerDeleteEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_contactmanager_events_proto_rawDescGZIP(), []int{3}
}

func (x *ContactManagerDeleteEvent) GetDeleteEvent() *ContactManagerEntryEvent {
	if x != nil {
		return x.DeleteEvent
	}
	return nil
}

// payload for add/edit/decrypt
type ContactManagerEntryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in api/commons/audit/contactmanager_events.proto.
	ContactManagerListId  int64 `protobuf:"varint,1,opt,name=ContactManagerListId,proto3" json:"ContactManagerListId,omitempty"`   //contact manager list id
	ContactManagerEntryId int64 `protobuf:"varint,2,opt,name=ContactManagerEntryId,proto3" json:"ContactManagerEntryId,omitempty"` //contact manager entry id
	// Deprecated: Marked as deprecated in api/commons/audit/contactmanager_events.proto.
	ContactManagerEntryListIds []int64                `protobuf:"varint,3,rep,packed,name=ContactManagerEntryListIds,proto3" json:"ContactManagerEntryListIds,omitempty"` //entry list Ids added/edited/decrypted
	FieldChanges               []*ContactFieldChanges `protobuf:"bytes,4,rep,name=FieldChanges,proto3" json:"FieldChanges,omitempty"`                                     //tracks changes in contact fields
	ContactUpdateTaskId        *int64                 `protobuf:"varint,5,opt,name=ContactUpdateTaskId,proto3,oneof" json:"ContactUpdateTaskId,omitempty"`
}

func (x *ContactManagerEntryEvent) Reset() {
	*x = ContactManagerEntryEvent{}
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactManagerEntryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactManagerEntryEvent) ProtoMessage() {}

func (x *ContactManagerEntryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactManagerEntryEvent.ProtoReflect.Descriptor instead.
func (*ContactManagerEntryEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_contactmanager_events_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Marked as deprecated in api/commons/audit/contactmanager_events.proto.
func (x *ContactManagerEntryEvent) GetContactManagerListId() int64 {
	if x != nil {
		return x.ContactManagerListId
	}
	return 0
}

func (x *ContactManagerEntryEvent) GetContactManagerEntryId() int64 {
	if x != nil {
		return x.ContactManagerEntryId
	}
	return 0
}

// Deprecated: Marked as deprecated in api/commons/audit/contactmanager_events.proto.
func (x *ContactManagerEntryEvent) GetContactManagerEntryListIds() []int64 {
	if x != nil {
		return x.ContactManagerEntryListIds
	}
	return nil
}

func (x *ContactManagerEntryEvent) GetFieldChanges() []*ContactFieldChanges {
	if x != nil {
		return x.FieldChanges
	}
	return nil
}

func (x *ContactManagerEntryEvent) GetContactUpdateTaskId() int64 {
	if x != nil && x.ContactUpdateTaskId != nil {
		return *x.ContactUpdateTaskId
	}
	return 0
}

type ContactFieldChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromValue *AuditedContactField `protobuf:"bytes,1,opt,name=from_value,json=fromValue,proto3" json:"from_value,omitempty"`
	ToValue   *AuditedContactField `protobuf:"bytes,2,opt,name=to_value,json=toValue,proto3" json:"to_value,omitempty"`
}

func (x *ContactFieldChanges) Reset() {
	*x = ContactFieldChanges{}
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactFieldChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactFieldChanges) ProtoMessage() {}

func (x *ContactFieldChanges) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactFieldChanges.ProtoReflect.Descriptor instead.
func (*ContactFieldChanges) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_contactmanager_events_proto_rawDescGZIP(), []int{5}
}

func (x *ContactFieldChanges) GetFromValue() *AuditedContactField {
	if x != nil {
		return x.FromValue
	}
	return nil
}

func (x *ContactFieldChanges) GetToValue() *AuditedContactField {
	if x != nil {
		return x.ToValue
	}
	return nil
}

// Single column in a contact
type AuditedContactField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactFieldId int64   `protobuf:"varint,1,opt,name=contact_field_id,json=contactFieldId,proto3" json:"contact_field_id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type           string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Value          *string `protobuf:"bytes,4,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *AuditedContactField) Reset() {
	*x = AuditedContactField{}
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditedContactField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditedContactField) ProtoMessage() {}

func (x *AuditedContactField) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditedContactField.ProtoReflect.Descriptor instead.
func (*AuditedContactField) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_contactmanager_events_proto_rawDescGZIP(), []int{6}
}

func (x *AuditedContactField) GetContactFieldId() int64 {
	if x != nil {
		return x.ContactFieldId
	}
	return 0
}

func (x *AuditedContactField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuditedContactField) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AuditedContactField) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// payload for contact list upload or manual entry
type ContactManagerListUploadEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactManagerListId               int64                              `protobuf:"varint,1,opt,name=ContactManagerListId,proto3" json:"ContactManagerListId,omitempty"`                             // Contact manager list ID
	NumberOfContactsUploaded           int64                              `protobuf:"varint,2,opt,name=NumberOfContactsUploaded,proto3" json:"NumberOfContactsUploaded,omitempty"`                     // Number of contacts received from LMS
	NumberOfSuccessfulContactsUploaded int64                              `protobuf:"varint,3,opt,name=NumberOfSuccessfulContactsUploaded,proto3" json:"NumberOfSuccessfulContactsUploaded,omitempty"` // Number of contacts inserted
	NumberOfFailedContacts             int64                              `protobuf:"varint,4,opt,name=NumberOfFailedContacts,proto3" json:"NumberOfFailedContacts,omitempty"`                         // Number of contacts failed to be inserted
	NumberOfNewContacts                int64                              `protobuf:"varint,5,opt,name=NumberOfNewContacts,proto3" json:"NumberOfNewContacts,omitempty"`                               // Number of new contacts in the list
	NumberOfDuplicateContacts          int64                              `protobuf:"varint,6,opt,name=NumberOfDuplicateContacts,proto3" json:"NumberOfDuplicateContacts,omitempty"`                   //Number of duplicate contacts in the list
	DeDupFieldType                     commons.ClassifierEntityType       `protobuf:"varint,7,opt,name=DeDupFieldType,proto3,enum=api.commons.ClassifierEntityType" json:"DeDupFieldType,omitempty"`
	DeDupMergeStrategy                 commons.DeDuplicationMergeStrategy `protobuf:"varint,8,opt,name=DeDupMergeStrategy,proto3,enum=api.commons.DeDuplicationMergeStrategy" json:"DeDupMergeStrategy,omitempty"`
	ContactManagerListName             string                             `protobuf:"bytes,9,opt,name=ContactManagerListName,proto3" json:"ContactManagerListName,omitempty"`
	FileName                           *string                            `protobuf:"bytes,10,opt,name=FileName,proto3,oneof" json:"FileName,omitempty"`
	UpdateTaskId                       int64                              `protobuf:"varint,11,opt,name=UpdateTaskId,proto3" json:"UpdateTaskId,omitempty"`
	Ttl                                int64                              `protobuf:"varint,12,opt,name=Ttl,proto3" json:"Ttl,omitempty"`
}

func (x *ContactManagerListUploadEvent) Reset() {
	*x = ContactManagerListUploadEvent{}
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactManagerListUploadEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactManagerListUploadEvent) ProtoMessage() {}

func (x *ContactManagerListUploadEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactManagerListUploadEvent.ProtoReflect.Descriptor instead.
func (*ContactManagerListUploadEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_contactmanager_events_proto_rawDescGZIP(), []int{7}
}

func (x *ContactManagerListUploadEvent) GetContactManagerListId() int64 {
	if x != nil {
		return x.ContactManagerListId
	}
	return 0
}

func (x *ContactManagerListUploadEvent) GetNumberOfContactsUploaded() int64 {
	if x != nil {
		return x.NumberOfContactsUploaded
	}
	return 0
}

func (x *ContactManagerListUploadEvent) GetNumberOfSuccessfulContactsUploaded() int64 {
	if x != nil {
		return x.NumberOfSuccessfulContactsUploaded
	}
	return 0
}

func (x *ContactManagerListUploadEvent) GetNumberOfFailedContacts() int64 {
	if x != nil {
		return x.NumberOfFailedContacts
	}
	return 0
}

func (x *ContactManagerListUploadEvent) GetNumberOfNewContacts() int64 {
	if x != nil {
		return x.NumberOfNewContacts
	}
	return 0
}

func (x *ContactManagerListUploadEvent) GetNumberOfDuplicateContacts() int64 {
	if x != nil {
		return x.NumberOfDuplicateContacts
	}
	return 0
}

func (x *ContactManagerListUploadEvent) GetDeDupFieldType() commons.ClassifierEntityType {
	if x != nil {
		return x.DeDupFieldType
	}
	return commons.ClassifierEntityType(0)
}

func (x *ContactManagerListUploadEvent) GetDeDupMergeStrategy() commons.DeDuplicationMergeStrategy {
	if x != nil {
		return x.DeDupMergeStrategy
	}
	return commons.DeDuplicationMergeStrategy(0)
}

func (x *ContactManagerListUploadEvent) GetContactManagerListName() string {
	if x != nil {
		return x.ContactManagerListName
	}
	return ""
}

func (x *ContactManagerListUploadEvent) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *ContactManagerListUploadEvent) GetUpdateTaskId() int64 {
	if x != nil {
		return x.UpdateTaskId
	}
	return 0
}

func (x *ContactManagerListUploadEvent) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// payload for decrypt of ContactManagerEntry during KYC
type ContactManagerKycEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactManagerListId       int64    `protobuf:"varint,1,opt,name=ContactManagerListId,proto3" json:"ContactManagerListId,omitempty"`                    //contact manager list id
	ContactManagerEntryId      int64    `protobuf:"varint,2,opt,name=ContactManagerEntryId,proto3" json:"ContactManagerEntryId,omitempty"`                  //contact manager entry id
	Types                      []string `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`                                                   // kyc key (non pii) types
	ContactManagerEntryListIds []int64  `protobuf:"varint,4,rep,packed,name=ContactManagerEntryListIds,proto3" json:"ContactManagerEntryListIds,omitempty"` //entry list Ids decrypted
}

func (x *ContactManagerKycEvent) Reset() {
	*x = ContactManagerKycEvent{}
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactManagerKycEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactManagerKycEvent) ProtoMessage() {}

func (x *ContactManagerKycEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactManagerKycEvent.ProtoReflect.Descriptor instead.
func (*ContactManagerKycEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_contactmanager_events_proto_rawDescGZIP(), []int{8}
}

func (x *ContactManagerKycEvent) GetContactManagerListId() int64 {
	if x != nil {
		return x.ContactManagerListId
	}
	return 0
}

func (x *ContactManagerKycEvent) GetContactManagerEntryId() int64 {
	if x != nil {
		return x.ContactManagerEntryId
	}
	return 0
}

func (x *ContactManagerKycEvent) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ContactManagerKycEvent) GetContactManagerEntryListIds() []int64 {
	if x != nil {
		return x.ContactManagerEntryListIds
	}
	return nil
}

// payload for associating contact with external events
type ContactManagerEntityAssociationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactManagerEntryId int64  `protobuf:"varint,1,opt,name=contact_manager_entry_id,json=contactManagerEntryId,proto3" json:"contact_manager_entry_id,omitempty"`
	EntityId              string `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Deleted               bool   `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
	IsActive              bool   `protobuf:"varint,4,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *ContactManagerEntityAssociationEvent) Reset() {
	*x = ContactManagerEntityAssociationEvent{}
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactManagerEntityAssociationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactManagerEntityAssociationEvent) ProtoMessage() {}

func (x *ContactManagerEntityAssociationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_contactmanager_events_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactManagerEntityAssociationEvent.ProtoReflect.Descriptor instead.
func (*ContactManagerEntityAssociationEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_contactmanager_events_proto_rawDescGZIP(), []int{9}
}

func (x *ContactManagerEntityAssociationEvent) GetContactManagerEntryId() int64 {
	if x != nil {
		return x.ContactManagerEntryId
	}
	return 0
}

func (x *ContactManagerEntityAssociationEvent) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *ContactManagerEntityAssociationEvent) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *ContactManagerEntityAssociationEvent) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

var File_api_commons_audit_contactmanager_events_proto protoreflect.FileDescriptor

var file_api_commons_audit_contactmanager_events_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x66, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x47, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x61, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x1e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x09,
	0x76, 0x69, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x76, 0x69,
	0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x69, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x64,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xeb,
	0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1a, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x4a, 0x0a,
	0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x0c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x48, 0x00, 0x52, 0x13, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x74,
	0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07, 0x74, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8c,
	0x01, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc7, 0x05,
	0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12,
	0x4e, 0x0a, 0x22, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x22, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12,
	0x36, 0x0a, 0x16, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x16, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x44, 0x65, 0x44, 0x75, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x44, 0x65, 0x44, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x44, 0x65, 0x44, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x12, 0x44, 0x65, 0x44, 0x75, 0x70, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x74, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x54, 0x74, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4b, 0x79, 0x63, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0xc6, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x42, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0xa2, 0x02, 0x03,
	0x41, 0x43, 0x41, 0xaa, 0x02, 0x11, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0xca, 0x02, 0x11, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0xe2, 0x02, 0x1d, 0x41, 0x70,
	0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x41, 0x70,
	0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x3a, 0x3a, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_audit_contactmanager_events_proto_rawDescOnce sync.Once
	file_api_commons_audit_contactmanager_events_proto_rawDescData = file_api_commons_audit_contactmanager_events_proto_rawDesc
)

func file_api_commons_audit_contactmanager_events_proto_rawDescGZIP() []byte {
	file_api_commons_audit_contactmanager_events_proto_rawDescOnce.Do(func() {
		file_api_commons_audit_contactmanager_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_audit_contactmanager_events_proto_rawDescData)
	})
	return file_api_commons_audit_contactmanager_events_proto_rawDescData
}

var file_api_commons_audit_contactmanager_events_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_commons_audit_contactmanager_events_proto_goTypes = []any{
	(*ContactManagerEntryAddEvent)(nil),          // 0: api.commons.audit.ContactManagerEntryAddEvent
	(*ContactManagerEntryGetEncEvent)(nil),       // 1: api.commons.audit.ContactManagerEntryGetEncEvent
	(*ContactManagerEntryEditEvent)(nil),         // 2: api.commons.audit.ContactManagerEntryEditEvent
	(*ContactManagerDeleteEvent)(nil),            // 3: api.commons.audit.ContactManagerDeleteEvent
	(*ContactManagerEntryEvent)(nil),             // 4: api.commons.audit.ContactManagerEntryEvent
	(*ContactFieldChanges)(nil),                  // 5: api.commons.audit.ContactFieldChanges
	(*AuditedContactField)(nil),                  // 6: api.commons.audit.AuditedContactField
	(*ContactManagerListUploadEvent)(nil),        // 7: api.commons.audit.ContactManagerListUploadEvent
	(*ContactManagerKycEvent)(nil),               // 8: api.commons.audit.ContactManagerKycEvent
	(*ContactManagerEntityAssociationEvent)(nil), // 9: api.commons.audit.ContactManagerEntityAssociationEvent
	(commons.ClassifierEntityType)(0),            // 10: api.commons.ClassifierEntityType
	(commons.DeDuplicationMergeStrategy)(0),      // 11: api.commons.DeDuplicationMergeStrategy
}
var file_api_commons_audit_contactmanager_events_proto_depIdxs = []int32{
	4,  // 0: api.commons.audit.ContactManagerEntryAddEvent.addEvent:type_name -> api.commons.audit.ContactManagerEntryEvent
	4,  // 1: api.commons.audit.ContactManagerEntryGetEncEvent.viewEvent:type_name -> api.commons.audit.ContactManagerEntryEvent
	4,  // 2: api.commons.audit.ContactManagerEntryEditEvent.editEvent:type_name -> api.commons.audit.ContactManagerEntryEvent
	4,  // 3: api.commons.audit.ContactManagerDeleteEvent.deleteEvent:type_name -> api.commons.audit.ContactManagerEntryEvent
	5,  // 4: api.commons.audit.ContactManagerEntryEvent.FieldChanges:type_name -> api.commons.audit.ContactFieldChanges
	6,  // 5: api.commons.audit.ContactFieldChanges.from_value:type_name -> api.commons.audit.AuditedContactField
	6,  // 6: api.commons.audit.ContactFieldChanges.to_value:type_name -> api.commons.audit.AuditedContactField
	10, // 7: api.commons.audit.ContactManagerListUploadEvent.DeDupFieldType:type_name -> api.commons.ClassifierEntityType
	11, // 8: api.commons.audit.ContactManagerListUploadEvent.DeDupMergeStrategy:type_name -> api.commons.DeDuplicationMergeStrategy
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_api_commons_audit_contactmanager_events_proto_init() }
func file_api_commons_audit_contactmanager_events_proto_init() {
	if File_api_commons_audit_contactmanager_events_proto != nil {
		return
	}
	file_api_commons_audit_contactmanager_events_proto_msgTypes[4].OneofWrappers = []any{}
	file_api_commons_audit_contactmanager_events_proto_msgTypes[6].OneofWrappers = []any{}
	file_api_commons_audit_contactmanager_events_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_audit_contactmanager_events_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_audit_contactmanager_events_proto_goTypes,
		DependencyIndexes: file_api_commons_audit_contactmanager_events_proto_depIdxs,
		MessageInfos:      file_api_commons_audit_contactmanager_events_proto_msgTypes,
	}.Build()
	File_api_commons_audit_contactmanager_events_proto = out.File
	file_api_commons_audit_contactmanager_events_proto_rawDesc = nil
	file_api_commons_audit_contactmanager_events_proto_goTypes = nil
	file_api_commons_audit_contactmanager_events_proto_depIdxs = nil
}
