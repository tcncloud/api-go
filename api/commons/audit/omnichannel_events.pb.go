// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: api/commons/audit/omnichannel_events.proto

package audit

import (
	commons "github.com/tcncloud/api-go/api/commons"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OmnichannelCreateProjectEvent - whenever a project is created
type OmnichannelCreateProjectEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSid        int64                                `protobuf:"varint,1,opt,name=client_sid,json=clientSid,proto3" json:"client_sid,omitempty"`
	Name             string                               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ComplianceConfig *commons.OmniProjectComplianceConfig `protobuf:"bytes,4,opt,name=compliance_config,json=complianceConfig,proto3" json:"compliance_config,omitempty"`
}

func (x *OmnichannelCreateProjectEvent) Reset() {
	*x = OmnichannelCreateProjectEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelCreateProjectEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelCreateProjectEvent) ProtoMessage() {}

func (x *OmnichannelCreateProjectEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelCreateProjectEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelCreateProjectEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{0}
}

func (x *OmnichannelCreateProjectEvent) GetClientSid() int64 {
	if x != nil {
		return x.ClientSid
	}
	return 0
}

func (x *OmnichannelCreateProjectEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OmnichannelCreateProjectEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OmnichannelCreateProjectEvent) GetComplianceConfig() *commons.OmniProjectComplianceConfig {
	if x != nil {
		return x.ComplianceConfig
	}
	return nil
}

// OmnichannelCreateCampaignEvent - whenever a campaign is created
type OmnichannelCreateCampaignEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// campaign name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// campaign description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// campaign type
	ChannelType commons.ChannelType `protobuf:"varint,3,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// campaign direction
	CampaignDirection commons.CampaignDirection `protobuf:"varint,4,opt,name=campaign_direction,json=campaignDirection,proto3,enum=api.commons.CampaignDirection" json:"campaign_direction,omitempty"`
	// generated campaign sid
	CampaignSid int64 `protobuf:"varint,5,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,6,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
	// project identifier
	ProjectSid int64 `protobuf:"varint,7,opt,name=project_sid,json=projectSid,proto3" json:"project_sid,omitempty"`
}

func (x *OmnichannelCreateCampaignEvent) Reset() {
	*x = OmnichannelCreateCampaignEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelCreateCampaignEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelCreateCampaignEvent) ProtoMessage() {}

func (x *OmnichannelCreateCampaignEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelCreateCampaignEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelCreateCampaignEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{1}
}

func (x *OmnichannelCreateCampaignEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OmnichannelCreateCampaignEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OmnichannelCreateCampaignEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelCreateCampaignEvent) GetCampaignDirection() commons.CampaignDirection {
	if x != nil {
		return x.CampaignDirection
	}
	return commons.CampaignDirection(0)
}

func (x *OmnichannelCreateCampaignEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelCreateCampaignEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

func (x *OmnichannelCreateCampaignEvent) GetProjectSid() int64 {
	if x != nil {
		return x.ProjectSid
	}
	return 0
}

// OmnichannelT10Event - whenever a T10 is triggered
type OmnichannelT10Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// conversation_id
	ConversationSid int64 `protobuf:"varint,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// campaign_id
	CampaignSid int64 `protobuf:"varint,2,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// channel_type
	ChannelType commons.ChannelType `protobuf:"varint,3,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// conversation this message belongs to
	Conversation *commons.OmniConversation `protobuf:"bytes,4,opt,name=conversation,proto3" json:"conversation,omitempty"`
	// the message sent by the agent
	Message *commons.OmniMessage `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *OmnichannelT10Event) Reset() {
	*x = OmnichannelT10Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelT10Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelT10Event) ProtoMessage() {}

func (x *OmnichannelT10Event) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelT10Event.ProtoReflect.Descriptor instead.
func (*OmnichannelT10Event) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{2}
}

func (x *OmnichannelT10Event) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmnichannelT10Event) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelT10Event) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelT10Event) GetConversation() *commons.OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *OmnichannelT10Event) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

// OmnichannelDailyReportEvent - whenever a daily project report is generated
type OmnichannelDailyProjectReportEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadUrl string `protobuf:"bytes,1,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
}

func (x *OmnichannelDailyProjectReportEvent) Reset() {
	*x = OmnichannelDailyProjectReportEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelDailyProjectReportEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelDailyProjectReportEvent) ProtoMessage() {}

func (x *OmnichannelDailyProjectReportEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelDailyProjectReportEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelDailyProjectReportEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{3}
}

func (x *OmnichannelDailyProjectReportEvent) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

// OmnichannelDailyReportEvent - whenever a daily conversation report is generated
type OmnichannelDailyConversationReportEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadUrl string `protobuf:"bytes,1,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
}

func (x *OmnichannelDailyConversationReportEvent) Reset() {
	*x = OmnichannelDailyConversationReportEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelDailyConversationReportEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelDailyConversationReportEvent) ProtoMessage() {}

func (x *OmnichannelDailyConversationReportEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelDailyConversationReportEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelDailyConversationReportEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{4}
}

func (x *OmnichannelDailyConversationReportEvent) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

// OmnichannelAgentAssignConversationEvent - handle agent assign conversation event
type OmnichannelAgentAssignConversationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// conversation id
	ConversationSid int64 `protobuf:"varint,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// campaign id
	CampaignSid int64 `protobuf:"varint,2,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// channel type - chat|email|sms
	ChannelType commons.ChannelType `protobuf:"varint,3,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// agent user id
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// conversation this message belongs to
	Conversation *commons.OmniConversation `protobuf:"bytes,5,opt,name=conversation,proto3" json:"conversation,omitempty"`
	// the message sent by the agent
	Message *commons.OmniMessage `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	// the AsmSession Sid
	AsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
}

func (x *OmnichannelAgentAssignConversationEvent) Reset() {
	*x = OmnichannelAgentAssignConversationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelAgentAssignConversationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelAgentAssignConversationEvent) ProtoMessage() {}

func (x *OmnichannelAgentAssignConversationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelAgentAssignConversationEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelAgentAssignConversationEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{5}
}

func (x *OmnichannelAgentAssignConversationEvent) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmnichannelAgentAssignConversationEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelAgentAssignConversationEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelAgentAssignConversationEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OmnichannelAgentAssignConversationEvent) GetConversation() *commons.OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *OmnichannelAgentAssignConversationEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelAgentAssignConversationEvent) GetAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsmSessionSid
	}
	return nil
}

// OmnichannelAgentUnassignConversationEvent - handle agent unassign conversation event
type OmnichannelAgentUnassignConversationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// conversation id
	ConversationSid int64 `protobuf:"varint,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// campaign id
	CampaignSid int64 `protobuf:"varint,2,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// channel type - chat|email|sms
	ChannelType commons.ChannelType `protobuf:"varint,3,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// agent user id
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// conversation this message belongs to
	Conversation *commons.OmniConversation `protobuf:"bytes,5,opt,name=conversation,proto3" json:"conversation,omitempty"`
	// the message sent by the agent
	Message *commons.OmniMessage `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	// the AsmSession Sid
	AsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
}

func (x *OmnichannelAgentUnassignConversationEvent) Reset() {
	*x = OmnichannelAgentUnassignConversationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelAgentUnassignConversationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelAgentUnassignConversationEvent) ProtoMessage() {}

func (x *OmnichannelAgentUnassignConversationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelAgentUnassignConversationEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelAgentUnassignConversationEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{6}
}

func (x *OmnichannelAgentUnassignConversationEvent) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmnichannelAgentUnassignConversationEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelAgentUnassignConversationEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelAgentUnassignConversationEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OmnichannelAgentUnassignConversationEvent) GetConversation() *commons.OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *OmnichannelAgentUnassignConversationEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelAgentUnassignConversationEvent) GetAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsmSessionSid
	}
	return nil
}

// OmnichannelAgentReassignConversationEvent - handle agent reassign conversation event
type OmnichannelAgentReassignConversationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// conversation id
	ConversationSid int64 `protobuf:"varint,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// campaign id
	CampaignSid int64 `protobuf:"varint,2,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// channel type - chat|email|sms
	ChannelType commons.ChannelType `protobuf:"varint,3,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// manager/agent who initiated reassign
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// current agent who is being unassigned
	CurrentUserId string `protobuf:"bytes,5,opt,name=current_user_id,json=currentUserId,proto3" json:"current_user_id,omitempty"`
	// new agent who who is being assigned to
	NewUserId string `protobuf:"bytes,6,opt,name=new_user_id,json=newUserId,proto3" json:"new_user_id,omitempty"`
	// conversation this message belongs to
	Conversation *commons.OmniConversation `protobuf:"bytes,7,opt,name=conversation,proto3" json:"conversation,omitempty"`
	// the message sent by the agent
	Message *commons.OmniMessage `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	// the AsmSession Sid
	NewUserAsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=new_user_asm_session_sid,json=newUserAsmSessionSid,proto3" json:"new_user_asm_session_sid,omitempty"`
}

func (x *OmnichannelAgentReassignConversationEvent) Reset() {
	*x = OmnichannelAgentReassignConversationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelAgentReassignConversationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelAgentReassignConversationEvent) ProtoMessage() {}

func (x *OmnichannelAgentReassignConversationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelAgentReassignConversationEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelAgentReassignConversationEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{7}
}

func (x *OmnichannelAgentReassignConversationEvent) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmnichannelAgentReassignConversationEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelAgentReassignConversationEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelAgentReassignConversationEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OmnichannelAgentReassignConversationEvent) GetCurrentUserId() string {
	if x != nil {
		return x.CurrentUserId
	}
	return ""
}

func (x *OmnichannelAgentReassignConversationEvent) GetNewUserId() string {
	if x != nil {
		return x.NewUserId
	}
	return ""
}

func (x *OmnichannelAgentReassignConversationEvent) GetConversation() *commons.OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *OmnichannelAgentReassignConversationEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelAgentReassignConversationEvent) GetNewUserAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.NewUserAsmSessionSid
	}
	return nil
}

// OmnichannelCustomerTextMessageEvent - whenever a customer sends a text message
type OmnichannelCustomerTextMessageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier for the conversation
	ConversationSid int64 `protobuf:"varint,3,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// the message sent by the customer
	Message *commons.OmniMessage `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// conversation this message belongs to
	Conversation *commons.OmniConversation `protobuf:"bytes,5,opt,name=conversation,proto3" json:"conversation,omitempty"`
}

func (x *OmnichannelCustomerTextMessageEvent) Reset() {
	*x = OmnichannelCustomerTextMessageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelCustomerTextMessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelCustomerTextMessageEvent) ProtoMessage() {}

func (x *OmnichannelCustomerTextMessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelCustomerTextMessageEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelCustomerTextMessageEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{8}
}

func (x *OmnichannelCustomerTextMessageEvent) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmnichannelCustomerTextMessageEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelCustomerTextMessageEvent) GetConversation() *commons.OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

// OmnichannelAgentTextMessageEvent - whenever an agent send a text message
type OmnichannelAgentTextMessageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier for the conversation
	ConversationSid int64 `protobuf:"varint,3,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// the message sent by the agent
	Message *commons.OmniMessage `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// conversation this message belongs to
	Conversation *commons.OmniConversation `protobuf:"bytes,5,opt,name=conversation,proto3" json:"conversation,omitempty"`
	// the AsmSession Sid
	AsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	// the id of the agent
	UserId string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *OmnichannelAgentTextMessageEvent) Reset() {
	*x = OmnichannelAgentTextMessageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelAgentTextMessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelAgentTextMessageEvent) ProtoMessage() {}

func (x *OmnichannelAgentTextMessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelAgentTextMessageEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelAgentTextMessageEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{9}
}

func (x *OmnichannelAgentTextMessageEvent) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmnichannelAgentTextMessageEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelAgentTextMessageEvent) GetConversation() *commons.OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *OmnichannelAgentTextMessageEvent) GetAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsmSessionSid
	}
	return nil
}

func (x *OmnichannelAgentTextMessageEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// OmnichannelManagerTextMessageEvent - whenever an agent send a text message
type OmnichannelManagerTextMessageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier for the conversation
	ConversationSid int64 `protobuf:"varint,3,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// the message sent by the agent
	Message *commons.OmniMessage `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// conversation this message belongs to
	Conversation *commons.OmniConversation `protobuf:"bytes,5,opt,name=conversation,proto3" json:"conversation,omitempty"`
	// the AsmSession Sid
	AsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	// user id
	UserId string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *OmnichannelManagerTextMessageEvent) Reset() {
	*x = OmnichannelManagerTextMessageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelManagerTextMessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelManagerTextMessageEvent) ProtoMessage() {}

func (x *OmnichannelManagerTextMessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelManagerTextMessageEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelManagerTextMessageEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{10}
}

func (x *OmnichannelManagerTextMessageEvent) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmnichannelManagerTextMessageEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelManagerTextMessageEvent) GetConversation() *commons.OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *OmnichannelManagerTextMessageEvent) GetAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsmSessionSid
	}
	return nil
}

func (x *OmnichannelManagerTextMessageEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// OmnichannelFinishWrapUpEvent - when an agent has finished wrap up
type OmnichannelFinishWrapUpEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier for the conversation
	ConversationSid int64 `protobuf:"varint,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// the campaign identifier the event is associated with
	CampaignSid int64 `protobuf:"varint,2,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// the channel type i.e. chat|email|sms|etc.
	ChannelType commons.ChannelType `protobuf:"varint,3,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// conversation this message belongs to
	Conversation *commons.OmniConversation `protobuf:"bytes,4,opt,name=conversation,proto3" json:"conversation,omitempty"`
	// the message sent by the agent
	Message *commons.OmniMessage `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// AsmSessionSid
	AsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
}

func (x *OmnichannelFinishWrapUpEvent) Reset() {
	*x = OmnichannelFinishWrapUpEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelFinishWrapUpEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelFinishWrapUpEvent) ProtoMessage() {}

func (x *OmnichannelFinishWrapUpEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelFinishWrapUpEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelFinishWrapUpEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{11}
}

func (x *OmnichannelFinishWrapUpEvent) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmnichannelFinishWrapUpEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelFinishWrapUpEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelFinishWrapUpEvent) GetConversation() *commons.OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *OmnichannelFinishWrapUpEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelFinishWrapUpEvent) GetAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsmSessionSid
	}
	return nil
}

// OmnichannelBeginWrapUpEvent - when a conversation closes and moves to wrap up
type OmnichannelBeginWrapUpEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier for the conversation
	ConversationSid int64 `protobuf:"varint,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// the campaign identifier this event is associated with
	CampaignSid int64 `protobuf:"varint,2,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// the channel type i.e. chat|email|sms|etc.
	ChannelType commons.ChannelType `protobuf:"varint,3,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// conversation this message belongs to
	Conversation *commons.OmniConversation `protobuf:"bytes,4,opt,name=conversation,proto3" json:"conversation,omitempty"`
	// the message sent by the agent
	Message *commons.OmniMessage `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// the AsmSession Sid
	AsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	// the id of the agent
	UserId string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *OmnichannelBeginWrapUpEvent) Reset() {
	*x = OmnichannelBeginWrapUpEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelBeginWrapUpEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelBeginWrapUpEvent) ProtoMessage() {}

func (x *OmnichannelBeginWrapUpEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelBeginWrapUpEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelBeginWrapUpEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{12}
}

func (x *OmnichannelBeginWrapUpEvent) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmnichannelBeginWrapUpEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelBeginWrapUpEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelBeginWrapUpEvent) GetConversation() *commons.OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *OmnichannelBeginWrapUpEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelBeginWrapUpEvent) GetAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsmSessionSid
	}
	return nil
}

func (x *OmnichannelBeginWrapUpEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// OmnichannelT11Event - whenever the t11 timer went off
type OmnichannelT11Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the identifier of the conversation the timer is associated with
	ConversationSid int64 `protobuf:"varint,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// the identifier of the campaign the timer is associated with
	CampaignSid int64 `protobuf:"varint,2,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// the channel type i.e. chat|sms|email|etc.
	ChannelType commons.ChannelType `protobuf:"varint,3,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// conversation this message belongs to
	Conversation *commons.OmniConversation `protobuf:"bytes,4,opt,name=conversation,proto3" json:"conversation,omitempty"`
}

func (x *OmnichannelT11Event) Reset() {
	*x = OmnichannelT11Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelT11Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelT11Event) ProtoMessage() {}

func (x *OmnichannelT11Event) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelT11Event.ProtoReflect.Descriptor instead.
func (*OmnichannelT11Event) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{13}
}

func (x *OmnichannelT11Event) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmnichannelT11Event) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelT11Event) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelT11Event) GetConversation() *commons.OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

// // create conversation when customer sends initial message and T1 starts
type OmnichannelCreateConversationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// campaign id
	CampaignSid int64 `protobuf:"varint,1,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// channel type - chat|email|sms
	ChannelType commons.ChannelType `protobuf:"varint,2,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// conversation this message belongs to
	Conversation *commons.OmniConversation `protobuf:"bytes,3,opt,name=conversation,proto3" json:"conversation,omitempty"`
	// the message sent by the agent
	Message *commons.OmniMessage `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *OmnichannelCreateConversationEvent) Reset() {
	*x = OmnichannelCreateConversationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelCreateConversationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelCreateConversationEvent) ProtoMessage() {}

func (x *OmnichannelCreateConversationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelCreateConversationEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelCreateConversationEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{14}
}

func (x *OmnichannelCreateConversationEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelCreateConversationEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelCreateConversationEvent) GetConversation() *commons.OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *OmnichannelCreateConversationEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

// OmnichannelAgentSuspendEvent - whenever agent suspends the conversation
type OmnichannelAgentSuspendEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the suspend message
	Message *commons.OmniMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// conversation this message belongs to
	Conversation *commons.OmniConversation `protobuf:"bytes,2,opt,name=conversation,proto3" json:"conversation,omitempty"`
	// asm Session sid
	AsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
}

func (x *OmnichannelAgentSuspendEvent) Reset() {
	*x = OmnichannelAgentSuspendEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelAgentSuspendEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelAgentSuspendEvent) ProtoMessage() {}

func (x *OmnichannelAgentSuspendEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelAgentSuspendEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelAgentSuspendEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{15}
}

func (x *OmnichannelAgentSuspendEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelAgentSuspendEvent) GetConversation() *commons.OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *OmnichannelAgentSuspendEvent) GetAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsmSessionSid
	}
	return nil
}

// OmnichannelCloseConversationEvent - close conversation
type OmnichannelCloseConversationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the close message
	Message *commons.OmniMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// conversation the message belongs to
	Conversation *commons.OmniConversation `protobuf:"bytes,2,opt,name=conversation,proto3" json:"conversation,omitempty"`
	// the AsmSession Sid
	AsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	// the id of the agent
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *OmnichannelCloseConversationEvent) Reset() {
	*x = OmnichannelCloseConversationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelCloseConversationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelCloseConversationEvent) ProtoMessage() {}

func (x *OmnichannelCloseConversationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelCloseConversationEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelCloseConversationEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{16}
}

func (x *OmnichannelCloseConversationEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelCloseConversationEvent) GetConversation() *commons.OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *OmnichannelCloseConversationEvent) GetAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsmSessionSid
	}
	return nil
}

func (x *OmnichannelCloseConversationEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type OmnichannelTranscriptSavedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the conversation sid of the transcript being saved
	ConversationSid int64 `protobuf:"varint,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// the transcript path of the conversation
	TranscriptPath string `protobuf:"bytes,2,opt,name=transcript_path,json=transcriptPath,proto3" json:"transcript_path,omitempty"`
}

func (x *OmnichannelTranscriptSavedEvent) Reset() {
	*x = OmnichannelTranscriptSavedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelTranscriptSavedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelTranscriptSavedEvent) ProtoMessage() {}

func (x *OmnichannelTranscriptSavedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelTranscriptSavedEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelTranscriptSavedEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{17}
}

func (x *OmnichannelTranscriptSavedEvent) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmnichannelTranscriptSavedEvent) GetTranscriptPath() string {
	if x != nil {
		return x.TranscriptPath
	}
	return ""
}

// OmnichannelUpdateCampaignEvent - whenever a campaign is update
type OmnichannelUpdateCampaignEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// campaign id
	CampaignSid int64 `protobuf:"varint,1,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// campaign name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// campaign description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// campaign type
	ChannelType commons.ChannelType `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,5,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelUpdateCampaignEvent) Reset() {
	*x = OmnichannelUpdateCampaignEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelUpdateCampaignEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelUpdateCampaignEvent) ProtoMessage() {}

func (x *OmnichannelUpdateCampaignEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelUpdateCampaignEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelUpdateCampaignEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{18}
}

func (x *OmnichannelUpdateCampaignEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelUpdateCampaignEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OmnichannelUpdateCampaignEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OmnichannelUpdateCampaignEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelUpdateCampaignEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelSetConversationCollectedDataEvent - handle set conversation collected data event
type OmnichannelSetConversationCollectedDataEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// conversation id
	ConversationSid int64 `protobuf:"varint,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// the id of the agent
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// channel type - chat|email|sms
	ChannelType commons.ChannelType `protobuf:"varint,3,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// campaign direction
	CampaignDirection commons.CampaignDirection `protobuf:"varint,4,opt,name=campaign_direction,json=campaignDirection,proto3,enum=api.commons.CampaignDirection" json:"campaign_direction,omitempty"`
	// collected data
	CollectedData *commons.ConversationCollectedData `protobuf:"bytes,5,opt,name=collected_data,json=collectedData,proto3" json:"collected_data,omitempty"`
	// the AsmSession Sid
	AsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
}

func (x *OmnichannelSetConversationCollectedDataEvent) Reset() {
	*x = OmnichannelSetConversationCollectedDataEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelSetConversationCollectedDataEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelSetConversationCollectedDataEvent) ProtoMessage() {}

func (x *OmnichannelSetConversationCollectedDataEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelSetConversationCollectedDataEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelSetConversationCollectedDataEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{19}
}

func (x *OmnichannelSetConversationCollectedDataEvent) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmnichannelSetConversationCollectedDataEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OmnichannelSetConversationCollectedDataEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelSetConversationCollectedDataEvent) GetCampaignDirection() commons.CampaignDirection {
	if x != nil {
		return x.CampaignDirection
	}
	return commons.CampaignDirection(0)
}

func (x *OmnichannelSetConversationCollectedDataEvent) GetCollectedData() *commons.ConversationCollectedData {
	if x != nil {
		return x.CollectedData
	}
	return nil
}

func (x *OmnichannelSetConversationCollectedDataEvent) GetAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsmSessionSid
	}
	return nil
}

// OmnichannelCompleteCampaignEvent - whenever a campaign is completed
type OmnichannelCompleteCampaignEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// campaign id
	CampaignSid int64 `protobuf:"varint,1,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// campaign name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// campaign description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// campaign type
	ChannelType commons.ChannelType `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,5,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelCompleteCampaignEvent) Reset() {
	*x = OmnichannelCompleteCampaignEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelCompleteCampaignEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelCompleteCampaignEvent) ProtoMessage() {}

func (x *OmnichannelCompleteCampaignEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelCompleteCampaignEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelCompleteCampaignEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{20}
}

func (x *OmnichannelCompleteCampaignEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelCompleteCampaignEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OmnichannelCompleteCampaignEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OmnichannelCompleteCampaignEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelCompleteCampaignEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelArchiveCampaignEvent - whenever a campaign is archived
type OmnichannelArchiveCampaignEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// campaign id
	CampaignSid int64 `protobuf:"varint,1,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// campaign name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// campaign description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// campaign type
	ChannelType commons.ChannelType `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,5,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelArchiveCampaignEvent) Reset() {
	*x = OmnichannelArchiveCampaignEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelArchiveCampaignEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelArchiveCampaignEvent) ProtoMessage() {}

func (x *OmnichannelArchiveCampaignEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelArchiveCampaignEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelArchiveCampaignEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{21}
}

func (x *OmnichannelArchiveCampaignEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelArchiveCampaignEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OmnichannelArchiveCampaignEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OmnichannelArchiveCampaignEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelArchiveCampaignEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelStartCampaignEvent - whenever a campaign is completed
type OmnichannelStartCampaignEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// campaign id
	CampaignSid int64 `protobuf:"varint,1,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// campaign name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// campaign description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// campaign type
	ChannelType commons.ChannelType `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,5,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelStartCampaignEvent) Reset() {
	*x = OmnichannelStartCampaignEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelStartCampaignEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelStartCampaignEvent) ProtoMessage() {}

func (x *OmnichannelStartCampaignEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelStartCampaignEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelStartCampaignEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{22}
}

func (x *OmnichannelStartCampaignEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelStartCampaignEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OmnichannelStartCampaignEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OmnichannelStartCampaignEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelStartCampaignEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelPauseCampaignEvent - whenever a campaign is paused
type OmnichannelPauseCampaignEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// campaign id
	CampaignSid int64 `protobuf:"varint,1,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// campaign name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// campaign description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// campaign type
	ChannelType commons.ChannelType `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,5,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelPauseCampaignEvent) Reset() {
	*x = OmnichannelPauseCampaignEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelPauseCampaignEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelPauseCampaignEvent) ProtoMessage() {}

func (x *OmnichannelPauseCampaignEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelPauseCampaignEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelPauseCampaignEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{23}
}

func (x *OmnichannelPauseCampaignEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelPauseCampaignEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OmnichannelPauseCampaignEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OmnichannelPauseCampaignEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelPauseCampaignEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelResumeCampaignEvent - whenever a campaign is resumed
type OmnichannelResumeCampaignEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// campaign id
	CampaignSid int64 `protobuf:"varint,1,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// campaign name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// campaign description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// campaign type
	ChannelType commons.ChannelType `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,5,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelResumeCampaignEvent) Reset() {
	*x = OmnichannelResumeCampaignEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelResumeCampaignEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelResumeCampaignEvent) ProtoMessage() {}

func (x *OmnichannelResumeCampaignEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelResumeCampaignEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelResumeCampaignEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{24}
}

func (x *OmnichannelResumeCampaignEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelResumeCampaignEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OmnichannelResumeCampaignEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OmnichannelResumeCampaignEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelResumeCampaignEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelScheduleModuleEvent - whenever a module is schedule status
type OmnichannelScheduleModuleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module id
	ModuleSid int64 `protobuf:"varint,1,opt,name=module_sid,json=moduleSid,proto3" json:"module_sid,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,2,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelScheduleModuleEvent) Reset() {
	*x = OmnichannelScheduleModuleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelScheduleModuleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelScheduleModuleEvent) ProtoMessage() {}

func (x *OmnichannelScheduleModuleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelScheduleModuleEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelScheduleModuleEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{25}
}

func (x *OmnichannelScheduleModuleEvent) GetModuleSid() int64 {
	if x != nil {
		return x.ModuleSid
	}
	return 0
}

func (x *OmnichannelScheduleModuleEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelStartModuleEvent - whenever a module is start status
type OmnichannelStartModuleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module id
	ModuleSid int64 `protobuf:"varint,1,opt,name=module_sid,json=moduleSid,proto3" json:"module_sid,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,2,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelStartModuleEvent) Reset() {
	*x = OmnichannelStartModuleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelStartModuleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelStartModuleEvent) ProtoMessage() {}

func (x *OmnichannelStartModuleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelStartModuleEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelStartModuleEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{26}
}

func (x *OmnichannelStartModuleEvent) GetModuleSid() int64 {
	if x != nil {
		return x.ModuleSid
	}
	return 0
}

func (x *OmnichannelStartModuleEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelPauseModuleEvent - whenever a module is pause status
type OmnichannelPauseModuleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module id
	ModuleSid int64 `protobuf:"varint,1,opt,name=module_sid,json=moduleSid,proto3" json:"module_sid,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,2,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelPauseModuleEvent) Reset() {
	*x = OmnichannelPauseModuleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelPauseModuleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelPauseModuleEvent) ProtoMessage() {}

func (x *OmnichannelPauseModuleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelPauseModuleEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelPauseModuleEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{27}
}

func (x *OmnichannelPauseModuleEvent) GetModuleSid() int64 {
	if x != nil {
		return x.ModuleSid
	}
	return 0
}

func (x *OmnichannelPauseModuleEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelResumeModuleEvent - whenever a module is resume status
type OmnichannelResumeModuleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module id
	ModuleSid int64 `protobuf:"varint,1,opt,name=module_sid,json=moduleSid,proto3" json:"module_sid,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,2,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelResumeModuleEvent) Reset() {
	*x = OmnichannelResumeModuleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelResumeModuleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelResumeModuleEvent) ProtoMessage() {}

func (x *OmnichannelResumeModuleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelResumeModuleEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelResumeModuleEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{28}
}

func (x *OmnichannelResumeModuleEvent) GetModuleSid() int64 {
	if x != nil {
		return x.ModuleSid
	}
	return 0
}

func (x *OmnichannelResumeModuleEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelErrorModuleEvent - whenever a module is error status
type OmnichannelErrorModuleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module id
	ModuleSid int64 `protobuf:"varint,1,opt,name=module_sid,json=moduleSid,proto3" json:"module_sid,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,2,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelErrorModuleEvent) Reset() {
	*x = OmnichannelErrorModuleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelErrorModuleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelErrorModuleEvent) ProtoMessage() {}

func (x *OmnichannelErrorModuleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelErrorModuleEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelErrorModuleEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{29}
}

func (x *OmnichannelErrorModuleEvent) GetModuleSid() int64 {
	if x != nil {
		return x.ModuleSid
	}
	return 0
}

func (x *OmnichannelErrorModuleEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelSuccessModuleEvent - whenever a module is success status
type OmnichannelSuccessModuleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module id
	ModuleSid int64 `protobuf:"varint,1,opt,name=module_sid,json=moduleSid,proto3" json:"module_sid,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,2,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelSuccessModuleEvent) Reset() {
	*x = OmnichannelSuccessModuleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelSuccessModuleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelSuccessModuleEvent) ProtoMessage() {}

func (x *OmnichannelSuccessModuleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelSuccessModuleEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelSuccessModuleEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{30}
}

func (x *OmnichannelSuccessModuleEvent) GetModuleSid() int64 {
	if x != nil {
		return x.ModuleSid
	}
	return 0
}

func (x *OmnichannelSuccessModuleEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelFailModuleEvent - whenever a module is fail status
type OmnichannelFailModuleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module id
	ModuleSid int64 `protobuf:"varint,1,opt,name=module_sid,json=moduleSid,proto3" json:"module_sid,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,2,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelFailModuleEvent) Reset() {
	*x = OmnichannelFailModuleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelFailModuleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelFailModuleEvent) ProtoMessage() {}

func (x *OmnichannelFailModuleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelFailModuleEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelFailModuleEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{31}
}

func (x *OmnichannelFailModuleEvent) GetModuleSid() int64 {
	if x != nil {
		return x.ModuleSid
	}
	return 0
}

func (x *OmnichannelFailModuleEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelCompleteModuleEvent - whenever a module is complete status
type OmnichannelCompleteModuleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module id
	ModuleSid int64 `protobuf:"varint,1,opt,name=module_sid,json=moduleSid,proto3" json:"module_sid,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,2,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelCompleteModuleEvent) Reset() {
	*x = OmnichannelCompleteModuleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelCompleteModuleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelCompleteModuleEvent) ProtoMessage() {}

func (x *OmnichannelCompleteModuleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelCompleteModuleEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelCompleteModuleEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{32}
}

func (x *OmnichannelCompleteModuleEvent) GetModuleSid() int64 {
	if x != nil {
		return x.ModuleSid
	}
	return 0
}

func (x *OmnichannelCompleteModuleEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelArchiveModuleEvent - whenever a module is archive status
type OmnichannelArchiveModuleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module id
	ModuleSid int64 `protobuf:"varint,1,opt,name=module_sid,json=moduleSid,proto3" json:"module_sid,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,2,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelArchiveModuleEvent) Reset() {
	*x = OmnichannelArchiveModuleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelArchiveModuleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelArchiveModuleEvent) ProtoMessage() {}

func (x *OmnichannelArchiveModuleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelArchiveModuleEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelArchiveModuleEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{33}
}

func (x *OmnichannelArchiveModuleEvent) GetModuleSid() int64 {
	if x != nil {
		return x.ModuleSid
	}
	return 0
}

func (x *OmnichannelArchiveModuleEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelUpdateModuleEvent - whenever a module is update status
type OmnichannelUpdateModuleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module id
	ModuleSid int64 `protobuf:"varint,1,opt,name=module_sid,json=moduleSid,proto3" json:"module_sid,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,2,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
}

func (x *OmnichannelUpdateModuleEvent) Reset() {
	*x = OmnichannelUpdateModuleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelUpdateModuleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelUpdateModuleEvent) ProtoMessage() {}

func (x *OmnichannelUpdateModuleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelUpdateModuleEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelUpdateModuleEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{34}
}

func (x *OmnichannelUpdateModuleEvent) GetModuleSid() int64 {
	if x != nil {
		return x.ModuleSid
	}
	return 0
}

func (x *OmnichannelUpdateModuleEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

// OmnichannelAddSmsMessageSentAuditEvent - handle omnimessage and messageunits
type OmnichannelSmsMessageSentModuleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module id
	ModuleSid int64 `protobuf:"varint,1,opt,name=module_sid,json=moduleSid,proto3" json:"module_sid,omitempty"`
	// messageunits
	MessageUnits int64 `protobuf:"varint,2,opt,name=message_units,json=messageUnits,proto3" json:"message_units,omitempty"`
	// omni campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,3,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
	// the message sent by the agent
	Message *commons.OmniMessage `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *OmnichannelSmsMessageSentModuleEvent) Reset() {
	*x = OmnichannelSmsMessageSentModuleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelSmsMessageSentModuleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelSmsMessageSentModuleEvent) ProtoMessage() {}

func (x *OmnichannelSmsMessageSentModuleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelSmsMessageSentModuleEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelSmsMessageSentModuleEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{35}
}

func (x *OmnichannelSmsMessageSentModuleEvent) GetModuleSid() int64 {
	if x != nil {
		return x.ModuleSid
	}
	return 0
}

func (x *OmnichannelSmsMessageSentModuleEvent) GetMessageUnits() int64 {
	if x != nil {
		return x.MessageUnits
	}
	return 0
}

func (x *OmnichannelSmsMessageSentModuleEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

func (x *OmnichannelSmsMessageSentModuleEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

// OmniChannelModuleInitialReplyEvent -
type OmnichannelModuleInitialReplyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// org id
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// campaign_sid
	CampaignSid int64 `protobuf:"varint,2,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// campaign_module_sid
	CampaignModuleSid int64 `protobuf:"varint,3,opt,name=campaign_module_sid,json=campaignModuleSid,proto3" json:"campaign_module_sid,omitempty"`
	// conversation_sid
	ConversationSid int64 `protobuf:"varint,4,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// channel type
	ChannelType commons.ChannelType `protobuf:"varint,5,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// omnimessage
	Message *commons.OmniMessage `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	// omnicampaign
	Campaign *commons.OmniCampaign `protobuf:"bytes,7,opt,name=campaign,proto3" json:"campaign,omitempty"`
}

func (x *OmnichannelModuleInitialReplyEvent) Reset() {
	*x = OmnichannelModuleInitialReplyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelModuleInitialReplyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelModuleInitialReplyEvent) ProtoMessage() {}

func (x *OmnichannelModuleInitialReplyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelModuleInitialReplyEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelModuleInitialReplyEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{36}
}

func (x *OmnichannelModuleInitialReplyEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *OmnichannelModuleInitialReplyEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelModuleInitialReplyEvent) GetCampaignModuleSid() int64 {
	if x != nil {
		return x.CampaignModuleSid
	}
	return 0
}

func (x *OmnichannelModuleInitialReplyEvent) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmnichannelModuleInitialReplyEvent) GetChannelType() commons.ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return commons.ChannelType(0)
}

func (x *OmnichannelModuleInitialReplyEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelModuleInitialReplyEvent) GetCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.Campaign
	}
	return nil
}

// OmnichannelTaskMessageSentEvent -
type OmnichannelTaskMessageSentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// task identifier
	TaskSid int64 `protobuf:"varint,1,opt,name=task_sid,json=taskSid,proto3" json:"task_sid,omitempty"`
	// campaign identifier
	CampaignSid int64 `protobuf:"varint,2,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// module identifier
	ModuleSid int64 `protobuf:"varint,3,opt,name=module_sid,json=moduleSid,proto3" json:"module_sid,omitempty"`
	// the number of individual messages sent out
	MessageUnits int64 `protobuf:"varint,4,opt,name=message_units,json=messageUnits,proto3" json:"message_units,omitempty"`
	// the campaign the task is a part of
	Campaign *commons.OmniCampaign `protobuf:"bytes,5,opt,name=campaign,proto3" json:"campaign,omitempty"`
	// the message sent
	Message *commons.OmniMessage `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	// the task that sent the message
	Task *commons.OmniTask `protobuf:"bytes,7,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *OmnichannelTaskMessageSentEvent) Reset() {
	*x = OmnichannelTaskMessageSentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelTaskMessageSentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelTaskMessageSentEvent) ProtoMessage() {}

func (x *OmnichannelTaskMessageSentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelTaskMessageSentEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelTaskMessageSentEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{37}
}

func (x *OmnichannelTaskMessageSentEvent) GetTaskSid() int64 {
	if x != nil {
		return x.TaskSid
	}
	return 0
}

func (x *OmnichannelTaskMessageSentEvent) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmnichannelTaskMessageSentEvent) GetModuleSid() int64 {
	if x != nil {
		return x.ModuleSid
	}
	return 0
}

func (x *OmnichannelTaskMessageSentEvent) GetMessageUnits() int64 {
	if x != nil {
		return x.MessageUnits
	}
	return 0
}

func (x *OmnichannelTaskMessageSentEvent) GetCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.Campaign
	}
	return nil
}

func (x *OmnichannelTaskMessageSentEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelTaskMessageSentEvent) GetTask() *commons.OmniTask {
	if x != nil {
		return x.Task
	}
	return nil
}

// OmnichannelConnectedInboxPollEvent -
type OmnichannelConnectedInboxPollEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// campaign
	OmniCampaign *commons.OmniCampaign `protobuf:"bytes,1,opt,name=omni_campaign,json=omniCampaign,proto3" json:"omni_campaign,omitempty"`
	// campaign_module_sid
	CampaignModuleSid int64 `protobuf:"varint,2,opt,name=campaign_module_sid,json=campaignModuleSid,proto3" json:"campaign_module_sid,omitempty"`
	// connected inbox
	ConnectedInbox *commons.ConnectedInbox `protobuf:"bytes,3,opt,name=connected_inbox,json=connectedInbox,proto3" json:"connected_inbox,omitempty"`
}

func (x *OmnichannelConnectedInboxPollEvent) Reset() {
	*x = OmnichannelConnectedInboxPollEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelConnectedInboxPollEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelConnectedInboxPollEvent) ProtoMessage() {}

func (x *OmnichannelConnectedInboxPollEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelConnectedInboxPollEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelConnectedInboxPollEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{38}
}

func (x *OmnichannelConnectedInboxPollEvent) GetOmniCampaign() *commons.OmniCampaign {
	if x != nil {
		return x.OmniCampaign
	}
	return nil
}

func (x *OmnichannelConnectedInboxPollEvent) GetCampaignModuleSid() int64 {
	if x != nil {
		return x.CampaignModuleSid
	}
	return 0
}

func (x *OmnichannelConnectedInboxPollEvent) GetConnectedInbox() *commons.ConnectedInbox {
	if x != nil {
		return x.ConnectedInbox
	}
	return nil
}

// OmnichannelConnectedInboxCreatedEvent -
type OmnichannelConnectedInboxCreatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the created connected inbox
	ConnectedInbox *commons.ConnectedInbox `protobuf:"bytes,1,opt,name=connected_inbox,json=connectedInbox,proto3" json:"connected_inbox,omitempty"`
}

func (x *OmnichannelConnectedInboxCreatedEvent) Reset() {
	*x = OmnichannelConnectedInboxCreatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelConnectedInboxCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelConnectedInboxCreatedEvent) ProtoMessage() {}

func (x *OmnichannelConnectedInboxCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelConnectedInboxCreatedEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelConnectedInboxCreatedEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{39}
}

func (x *OmnichannelConnectedInboxCreatedEvent) GetConnectedInbox() *commons.ConnectedInbox {
	if x != nil {
		return x.ConnectedInbox
	}
	return nil
}

// Omnichannel
type OmnichannelAgentMessageUnitsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the omni message
	Message *commons.OmniMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// the total number of messages sent
	MessageUnits int32 `protobuf:"varint,2,opt,name=message_units,json=messageUnits,proto3" json:"message_units,omitempty"`
}

func (x *OmnichannelAgentMessageUnitsEvent) Reset() {
	*x = OmnichannelAgentMessageUnitsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelAgentMessageUnitsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelAgentMessageUnitsEvent) ProtoMessage() {}

func (x *OmnichannelAgentMessageUnitsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelAgentMessageUnitsEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelAgentMessageUnitsEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{40}
}

func (x *OmnichannelAgentMessageUnitsEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelAgentMessageUnitsEvent) GetMessageUnits() int32 {
	if x != nil {
		return x.MessageUnits
	}
	return 0
}

// OmniChannelManagerMessageUnitsEvent -
type OmnichannelManagerMessageUnitsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the omni message
	Message *commons.OmniMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// the total number of messages sent
	MessageUnits int32 `protobuf:"varint,2,opt,name=message_units,json=messageUnits,proto3" json:"message_units,omitempty"`
}

func (x *OmnichannelManagerMessageUnitsEvent) Reset() {
	*x = OmnichannelManagerMessageUnitsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelManagerMessageUnitsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelManagerMessageUnitsEvent) ProtoMessage() {}

func (x *OmnichannelManagerMessageUnitsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelManagerMessageUnitsEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelManagerMessageUnitsEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{41}
}

func (x *OmnichannelManagerMessageUnitsEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelManagerMessageUnitsEvent) GetMessageUnits() int32 {
	if x != nil {
		return x.MessageUnits
	}
	return 0
}

// OmniChannelCustomerMessageUnitsEvent -
type OmnichannelCustomerMessageUnitsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the omni message
	Message *commons.OmniMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// the total number of messages sent
	MessageUnits int32 `protobuf:"varint,2,opt,name=message_units,json=messageUnits,proto3" json:"message_units,omitempty"`
}

func (x *OmnichannelCustomerMessageUnitsEvent) Reset() {
	*x = OmnichannelCustomerMessageUnitsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelCustomerMessageUnitsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelCustomerMessageUnitsEvent) ProtoMessage() {}

func (x *OmnichannelCustomerMessageUnitsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelCustomerMessageUnitsEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelCustomerMessageUnitsEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{42}
}

func (x *OmnichannelCustomerMessageUnitsEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelCustomerMessageUnitsEvent) GetMessageUnits() int32 {
	if x != nil {
		return x.MessageUnits
	}
	return 0
}

// OmnichannelSystemMessageUnitsEvent -
type OmnichannelSystemMessageUnitsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the omni message
	Message *commons.OmniMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// the total number of messages sent
	MessageUnits int32 `protobuf:"varint,2,opt,name=message_units,json=messageUnits,proto3" json:"message_units,omitempty"`
}

func (x *OmnichannelSystemMessageUnitsEvent) Reset() {
	*x = OmnichannelSystemMessageUnitsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelSystemMessageUnitsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelSystemMessageUnitsEvent) ProtoMessage() {}

func (x *OmnichannelSystemMessageUnitsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelSystemMessageUnitsEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelSystemMessageUnitsEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{43}
}

func (x *OmnichannelSystemMessageUnitsEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelSystemMessageUnitsEvent) GetMessageUnits() int32 {
	if x != nil {
		return x.MessageUnits
	}
	return 0
}

// OmniChannelAgentMessageSentEvent -
type OmnichannelPaymentLinkSentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the message sent
	Message *commons.OmniMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// the payment link
	Link string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *OmnichannelPaymentLinkSentEvent) Reset() {
	*x = OmnichannelPaymentLinkSentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelPaymentLinkSentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelPaymentLinkSentEvent) ProtoMessage() {}

func (x *OmnichannelPaymentLinkSentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelPaymentLinkSentEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelPaymentLinkSentEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{44}
}

func (x *OmnichannelPaymentLinkSentEvent) GetMessage() *commons.OmniMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmnichannelPaymentLinkSentEvent) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

// OmnichannelManualApproveTaskAcceptedEvent -
type OmnichannelManualApproveTaskAcceptedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the task that sent the message
	Task *commons.OmniTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	// the id of the agent
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// asm session sid
	AsmSessionSid int64 `protobuf:"varint,3,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
}

func (x *OmnichannelManualApproveTaskAcceptedEvent) Reset() {
	*x = OmnichannelManualApproveTaskAcceptedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelManualApproveTaskAcceptedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelManualApproveTaskAcceptedEvent) ProtoMessage() {}

func (x *OmnichannelManualApproveTaskAcceptedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelManualApproveTaskAcceptedEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelManualApproveTaskAcceptedEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{45}
}

func (x *OmnichannelManualApproveTaskAcceptedEvent) GetTask() *commons.OmniTask {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *OmnichannelManualApproveTaskAcceptedEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OmnichannelManualApproveTaskAcceptedEvent) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

// OmnichannelManualApproveTaskRejectedEvent -
type OmnichannelManualApproveTaskRejectedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the task that sent the message
	Task *commons.OmniTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	// the id of the agent
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// asm session sid
	AsmSessionSid int64 `protobuf:"varint,3,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
}

func (x *OmnichannelManualApproveTaskRejectedEvent) Reset() {
	*x = OmnichannelManualApproveTaskRejectedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelManualApproveTaskRejectedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelManualApproveTaskRejectedEvent) ProtoMessage() {}

func (x *OmnichannelManualApproveTaskRejectedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelManualApproveTaskRejectedEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelManualApproveTaskRejectedEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{46}
}

func (x *OmnichannelManualApproveTaskRejectedEvent) GetTask() *commons.OmniTask {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *OmnichannelManualApproveTaskRejectedEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OmnichannelManualApproveTaskRejectedEvent) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

// OmnichannelManualApproveTaskTimeoutEvent -
type OmnichannelManualApproveTaskTimeoutEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the task that sent the message
	Task *commons.OmniTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	// the id of the agent
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// asm session sid
	AsmSessionSid int64 `protobuf:"varint,3,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
}

func (x *OmnichannelManualApproveTaskTimeoutEvent) Reset() {
	*x = OmnichannelManualApproveTaskTimeoutEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelManualApproveTaskTimeoutEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelManualApproveTaskTimeoutEvent) ProtoMessage() {}

func (x *OmnichannelManualApproveTaskTimeoutEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelManualApproveTaskTimeoutEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelManualApproveTaskTimeoutEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{47}
}

func (x *OmnichannelManualApproveTaskTimeoutEvent) GetTask() *commons.OmniTask {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *OmnichannelManualApproveTaskTimeoutEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OmnichannelManualApproveTaskTimeoutEvent) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

// OmnichannelManualApproveTaskRequeueEvent -
type OmnichannelManualApproveTaskRequeueEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the task that sent the message
	Task *commons.OmniTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	// the id of the agent
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// asm session sid
	AsmSessionSid int64 `protobuf:"varint,3,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
}

func (x *OmnichannelManualApproveTaskRequeueEvent) Reset() {
	*x = OmnichannelManualApproveTaskRequeueEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmnichannelManualApproveTaskRequeueEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelManualApproveTaskRequeueEvent) ProtoMessage() {}

func (x *OmnichannelManualApproveTaskRequeueEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_audit_omnichannel_events_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelManualApproveTaskRequeueEvent.ProtoReflect.Descriptor instead.
func (*OmnichannelManualApproveTaskRequeueEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_audit_omnichannel_events_proto_rawDescGZIP(), []int{48}
}

func (x *OmnichannelManualApproveTaskRequeueEvent) GetTask() *commons.OmniTask {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *OmnichannelManualApproveTaskRequeueEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OmnichannelManualApproveTaskRequeueEvent) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

var File_api_commons_audit_omnichannel_events_proto protoreflect.FileDescriptor

var file_api_commons_audit_omnichannel_events_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x1a,
	0x1d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb,
	0x01, 0x0a, 0x1d, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x6d, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xee, 0x02, 0x0a,
	0x1e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69,
	0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d,
	0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x23, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x64, 0x22, 0x9f, 0x02,
	0x0a, 0x13, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x31, 0x30,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x47, 0x0a, 0x22, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x4c, 0x0a, 0x27, 0x4f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x91, 0x03, 0x0a, 0x27, 0x4f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x73, 0x6d,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x93, 0x03, 0x0a, 0x29, 0x4f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x3b,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x61,
	0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64,
	0x22, 0xeb, 0x03, 0x0a, 0x29, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x6e, 0x65, 0x77,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0xcb,
	0x01, 0x0a, 0x23, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d,
	0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x02, 0x0a,
	0x20, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64,
	0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61,
	0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x22, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xed, 0x02, 0x0a, 0x1c, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x57, 0x72, 0x61, 0x70, 0x55, 0x70, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x61,
	0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64,
	0x22, 0x85, 0x03, 0x0a, 0x1b, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x55, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x73,
	0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x13, 0x4f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x31, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xff, 0x01, 0x0a, 0x22, 0x4f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x1c, 0x4f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x21, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x75, 0x0a, 0x1f, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xfa, 0x01, 0x0a, 0x1e, 0x4f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x22, 0x96, 0x03, 0x0a, 0x2c, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0xfc, 0x01,
	0x0a, 0x20, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0d,
	0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c,
	0x6f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0xfb, 0x01, 0x0a,
	0x1f, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x6d,
	0x6e, 0x69, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f, 0x6d,
	0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0xf9, 0x01, 0x0a, 0x1d, 0x4f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0c,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0xf9, 0x01, 0x0a, 0x1d, 0x4f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x22, 0xfa, 0x01, 0x0a, 0x1e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22,
	0x83, 0x01, 0x0a, 0x1e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69,
	0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d,
	0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x4f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x6f,
	0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f,
	0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x1c,
	0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12,
	0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22,
	0x80, 0x01, 0x0a, 0x1b, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53,
	0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x1d, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69, 0x5f,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0x7f, 0x0a, 0x1a, 0x4f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69,
	0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d,
	0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x4f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x3e,
	0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0x82,
	0x01, 0x0a, 0x1d, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x1c, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69, 0x5f,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0xe2, 0x01, 0x0a, 0x24, 0x4f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69,
	0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d,
	0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe1, 0x02, 0x0a,
	0x22, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x22, 0xb9, 0x02, 0x0a, 0x1f, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x32, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d,
	0x6e, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xda, 0x01, 0x0a,
	0x22, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x0c, 0x6f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x22, 0x6d, 0x0a, 0x25, 0x4f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x22, 0x7c, 0x0a, 0x21, 0x4f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x7e, 0x0a, 0x23, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x7f, 0x0a, 0x24, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d,
	0x6e, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x7d, 0x0a, 0x22, 0x4f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x1f, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x22, 0x97, 0x01, 0x0a, 0x29, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73,
	0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x29,
	0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x28, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x6d, 0x6e, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x96,
	0x01, 0x0a, 0x28, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x42, 0xc3, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x42, 0x16, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x41, 0xaa,
	0x02, 0x11, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0xca, 0x02, 0x11, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0xe2, 0x02, 0x1d, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x3a, 0x3a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_audit_omnichannel_events_proto_rawDescOnce sync.Once
	file_api_commons_audit_omnichannel_events_proto_rawDescData = file_api_commons_audit_omnichannel_events_proto_rawDesc
)

func file_api_commons_audit_omnichannel_events_proto_rawDescGZIP() []byte {
	file_api_commons_audit_omnichannel_events_proto_rawDescOnce.Do(func() {
		file_api_commons_audit_omnichannel_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_audit_omnichannel_events_proto_rawDescData)
	})
	return file_api_commons_audit_omnichannel_events_proto_rawDescData
}

var file_api_commons_audit_omnichannel_events_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_api_commons_audit_omnichannel_events_proto_goTypes = []interface{}{
	(*OmnichannelCreateProjectEvent)(nil),                // 0: api.commons.audit.OmnichannelCreateProjectEvent
	(*OmnichannelCreateCampaignEvent)(nil),               // 1: api.commons.audit.OmnichannelCreateCampaignEvent
	(*OmnichannelT10Event)(nil),                          // 2: api.commons.audit.OmnichannelT10Event
	(*OmnichannelDailyProjectReportEvent)(nil),           // 3: api.commons.audit.OmnichannelDailyProjectReportEvent
	(*OmnichannelDailyConversationReportEvent)(nil),      // 4: api.commons.audit.OmnichannelDailyConversationReportEvent
	(*OmnichannelAgentAssignConversationEvent)(nil),      // 5: api.commons.audit.OmnichannelAgentAssignConversationEvent
	(*OmnichannelAgentUnassignConversationEvent)(nil),    // 6: api.commons.audit.OmnichannelAgentUnassignConversationEvent
	(*OmnichannelAgentReassignConversationEvent)(nil),    // 7: api.commons.audit.OmnichannelAgentReassignConversationEvent
	(*OmnichannelCustomerTextMessageEvent)(nil),          // 8: api.commons.audit.OmnichannelCustomerTextMessageEvent
	(*OmnichannelAgentTextMessageEvent)(nil),             // 9: api.commons.audit.OmnichannelAgentTextMessageEvent
	(*OmnichannelManagerTextMessageEvent)(nil),           // 10: api.commons.audit.OmnichannelManagerTextMessageEvent
	(*OmnichannelFinishWrapUpEvent)(nil),                 // 11: api.commons.audit.OmnichannelFinishWrapUpEvent
	(*OmnichannelBeginWrapUpEvent)(nil),                  // 12: api.commons.audit.OmnichannelBeginWrapUpEvent
	(*OmnichannelT11Event)(nil),                          // 13: api.commons.audit.OmnichannelT11Event
	(*OmnichannelCreateConversationEvent)(nil),           // 14: api.commons.audit.OmnichannelCreateConversationEvent
	(*OmnichannelAgentSuspendEvent)(nil),                 // 15: api.commons.audit.OmnichannelAgentSuspendEvent
	(*OmnichannelCloseConversationEvent)(nil),            // 16: api.commons.audit.OmnichannelCloseConversationEvent
	(*OmnichannelTranscriptSavedEvent)(nil),              // 17: api.commons.audit.OmnichannelTranscriptSavedEvent
	(*OmnichannelUpdateCampaignEvent)(nil),               // 18: api.commons.audit.OmnichannelUpdateCampaignEvent
	(*OmnichannelSetConversationCollectedDataEvent)(nil), // 19: api.commons.audit.OmnichannelSetConversationCollectedDataEvent
	(*OmnichannelCompleteCampaignEvent)(nil),             // 20: api.commons.audit.OmnichannelCompleteCampaignEvent
	(*OmnichannelArchiveCampaignEvent)(nil),              // 21: api.commons.audit.OmnichannelArchiveCampaignEvent
	(*OmnichannelStartCampaignEvent)(nil),                // 22: api.commons.audit.OmnichannelStartCampaignEvent
	(*OmnichannelPauseCampaignEvent)(nil),                // 23: api.commons.audit.OmnichannelPauseCampaignEvent
	(*OmnichannelResumeCampaignEvent)(nil),               // 24: api.commons.audit.OmnichannelResumeCampaignEvent
	(*OmnichannelScheduleModuleEvent)(nil),               // 25: api.commons.audit.OmnichannelScheduleModuleEvent
	(*OmnichannelStartModuleEvent)(nil),                  // 26: api.commons.audit.OmnichannelStartModuleEvent
	(*OmnichannelPauseModuleEvent)(nil),                  // 27: api.commons.audit.OmnichannelPauseModuleEvent
	(*OmnichannelResumeModuleEvent)(nil),                 // 28: api.commons.audit.OmnichannelResumeModuleEvent
	(*OmnichannelErrorModuleEvent)(nil),                  // 29: api.commons.audit.OmnichannelErrorModuleEvent
	(*OmnichannelSuccessModuleEvent)(nil),                // 30: api.commons.audit.OmnichannelSuccessModuleEvent
	(*OmnichannelFailModuleEvent)(nil),                   // 31: api.commons.audit.OmnichannelFailModuleEvent
	(*OmnichannelCompleteModuleEvent)(nil),               // 32: api.commons.audit.OmnichannelCompleteModuleEvent
	(*OmnichannelArchiveModuleEvent)(nil),                // 33: api.commons.audit.OmnichannelArchiveModuleEvent
	(*OmnichannelUpdateModuleEvent)(nil),                 // 34: api.commons.audit.OmnichannelUpdateModuleEvent
	(*OmnichannelSmsMessageSentModuleEvent)(nil),         // 35: api.commons.audit.OmnichannelSmsMessageSentModuleEvent
	(*OmnichannelModuleInitialReplyEvent)(nil),           // 36: api.commons.audit.OmnichannelModuleInitialReplyEvent
	(*OmnichannelTaskMessageSentEvent)(nil),              // 37: api.commons.audit.OmnichannelTaskMessageSentEvent
	(*OmnichannelConnectedInboxPollEvent)(nil),           // 38: api.commons.audit.OmnichannelConnectedInboxPollEvent
	(*OmnichannelConnectedInboxCreatedEvent)(nil),        // 39: api.commons.audit.OmnichannelConnectedInboxCreatedEvent
	(*OmnichannelAgentMessageUnitsEvent)(nil),            // 40: api.commons.audit.OmnichannelAgentMessageUnitsEvent
	(*OmnichannelManagerMessageUnitsEvent)(nil),          // 41: api.commons.audit.OmnichannelManagerMessageUnitsEvent
	(*OmnichannelCustomerMessageUnitsEvent)(nil),         // 42: api.commons.audit.OmnichannelCustomerMessageUnitsEvent
	(*OmnichannelSystemMessageUnitsEvent)(nil),           // 43: api.commons.audit.OmnichannelSystemMessageUnitsEvent
	(*OmnichannelPaymentLinkSentEvent)(nil),              // 44: api.commons.audit.OmnichannelPaymentLinkSentEvent
	(*OmnichannelManualApproveTaskAcceptedEvent)(nil),    // 45: api.commons.audit.OmnichannelManualApproveTaskAcceptedEvent
	(*OmnichannelManualApproveTaskRejectedEvent)(nil),    // 46: api.commons.audit.OmnichannelManualApproveTaskRejectedEvent
	(*OmnichannelManualApproveTaskTimeoutEvent)(nil),     // 47: api.commons.audit.OmnichannelManualApproveTaskTimeoutEvent
	(*OmnichannelManualApproveTaskRequeueEvent)(nil),     // 48: api.commons.audit.OmnichannelManualApproveTaskRequeueEvent
	(*commons.OmniProjectComplianceConfig)(nil),          // 49: api.commons.OmniProjectComplianceConfig
	(commons.ChannelType)(0),                             // 50: api.commons.ChannelType
	(commons.CampaignDirection)(0),                       // 51: api.commons.CampaignDirection
	(*commons.OmniCampaign)(nil),                         // 52: api.commons.OmniCampaign
	(*commons.OmniConversation)(nil),                     // 53: api.commons.OmniConversation
	(*commons.OmniMessage)(nil),                          // 54: api.commons.OmniMessage
	(*wrapperspb.Int64Value)(nil),                        // 55: google.protobuf.Int64Value
	(*commons.ConversationCollectedData)(nil),            // 56: api.commons.ConversationCollectedData
	(*commons.OmniTask)(nil),                             // 57: api.commons.OmniTask
	(*commons.ConnectedInbox)(nil),                       // 58: api.commons.ConnectedInbox
}
var file_api_commons_audit_omnichannel_events_proto_depIdxs = []int32{
	49, // 0: api.commons.audit.OmnichannelCreateProjectEvent.compliance_config:type_name -> api.commons.OmniProjectComplianceConfig
	50, // 1: api.commons.audit.OmnichannelCreateCampaignEvent.channel_type:type_name -> api.commons.ChannelType
	51, // 2: api.commons.audit.OmnichannelCreateCampaignEvent.campaign_direction:type_name -> api.commons.CampaignDirection
	52, // 3: api.commons.audit.OmnichannelCreateCampaignEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	50, // 4: api.commons.audit.OmnichannelT10Event.channel_type:type_name -> api.commons.ChannelType
	53, // 5: api.commons.audit.OmnichannelT10Event.conversation:type_name -> api.commons.OmniConversation
	54, // 6: api.commons.audit.OmnichannelT10Event.message:type_name -> api.commons.OmniMessage
	50, // 7: api.commons.audit.OmnichannelAgentAssignConversationEvent.channel_type:type_name -> api.commons.ChannelType
	53, // 8: api.commons.audit.OmnichannelAgentAssignConversationEvent.conversation:type_name -> api.commons.OmniConversation
	54, // 9: api.commons.audit.OmnichannelAgentAssignConversationEvent.message:type_name -> api.commons.OmniMessage
	55, // 10: api.commons.audit.OmnichannelAgentAssignConversationEvent.asm_session_sid:type_name -> google.protobuf.Int64Value
	50, // 11: api.commons.audit.OmnichannelAgentUnassignConversationEvent.channel_type:type_name -> api.commons.ChannelType
	53, // 12: api.commons.audit.OmnichannelAgentUnassignConversationEvent.conversation:type_name -> api.commons.OmniConversation
	54, // 13: api.commons.audit.OmnichannelAgentUnassignConversationEvent.message:type_name -> api.commons.OmniMessage
	55, // 14: api.commons.audit.OmnichannelAgentUnassignConversationEvent.asm_session_sid:type_name -> google.protobuf.Int64Value
	50, // 15: api.commons.audit.OmnichannelAgentReassignConversationEvent.channel_type:type_name -> api.commons.ChannelType
	53, // 16: api.commons.audit.OmnichannelAgentReassignConversationEvent.conversation:type_name -> api.commons.OmniConversation
	54, // 17: api.commons.audit.OmnichannelAgentReassignConversationEvent.message:type_name -> api.commons.OmniMessage
	55, // 18: api.commons.audit.OmnichannelAgentReassignConversationEvent.new_user_asm_session_sid:type_name -> google.protobuf.Int64Value
	54, // 19: api.commons.audit.OmnichannelCustomerTextMessageEvent.message:type_name -> api.commons.OmniMessage
	53, // 20: api.commons.audit.OmnichannelCustomerTextMessageEvent.conversation:type_name -> api.commons.OmniConversation
	54, // 21: api.commons.audit.OmnichannelAgentTextMessageEvent.message:type_name -> api.commons.OmniMessage
	53, // 22: api.commons.audit.OmnichannelAgentTextMessageEvent.conversation:type_name -> api.commons.OmniConversation
	55, // 23: api.commons.audit.OmnichannelAgentTextMessageEvent.asm_session_sid:type_name -> google.protobuf.Int64Value
	54, // 24: api.commons.audit.OmnichannelManagerTextMessageEvent.message:type_name -> api.commons.OmniMessage
	53, // 25: api.commons.audit.OmnichannelManagerTextMessageEvent.conversation:type_name -> api.commons.OmniConversation
	55, // 26: api.commons.audit.OmnichannelManagerTextMessageEvent.asm_session_sid:type_name -> google.protobuf.Int64Value
	50, // 27: api.commons.audit.OmnichannelFinishWrapUpEvent.channel_type:type_name -> api.commons.ChannelType
	53, // 28: api.commons.audit.OmnichannelFinishWrapUpEvent.conversation:type_name -> api.commons.OmniConversation
	54, // 29: api.commons.audit.OmnichannelFinishWrapUpEvent.message:type_name -> api.commons.OmniMessage
	55, // 30: api.commons.audit.OmnichannelFinishWrapUpEvent.asm_session_sid:type_name -> google.protobuf.Int64Value
	50, // 31: api.commons.audit.OmnichannelBeginWrapUpEvent.channel_type:type_name -> api.commons.ChannelType
	53, // 32: api.commons.audit.OmnichannelBeginWrapUpEvent.conversation:type_name -> api.commons.OmniConversation
	54, // 33: api.commons.audit.OmnichannelBeginWrapUpEvent.message:type_name -> api.commons.OmniMessage
	55, // 34: api.commons.audit.OmnichannelBeginWrapUpEvent.asm_session_sid:type_name -> google.protobuf.Int64Value
	50, // 35: api.commons.audit.OmnichannelT11Event.channel_type:type_name -> api.commons.ChannelType
	53, // 36: api.commons.audit.OmnichannelT11Event.conversation:type_name -> api.commons.OmniConversation
	50, // 37: api.commons.audit.OmnichannelCreateConversationEvent.channel_type:type_name -> api.commons.ChannelType
	53, // 38: api.commons.audit.OmnichannelCreateConversationEvent.conversation:type_name -> api.commons.OmniConversation
	54, // 39: api.commons.audit.OmnichannelCreateConversationEvent.message:type_name -> api.commons.OmniMessage
	54, // 40: api.commons.audit.OmnichannelAgentSuspendEvent.message:type_name -> api.commons.OmniMessage
	53, // 41: api.commons.audit.OmnichannelAgentSuspendEvent.conversation:type_name -> api.commons.OmniConversation
	55, // 42: api.commons.audit.OmnichannelAgentSuspendEvent.asm_session_sid:type_name -> google.protobuf.Int64Value
	54, // 43: api.commons.audit.OmnichannelCloseConversationEvent.message:type_name -> api.commons.OmniMessage
	53, // 44: api.commons.audit.OmnichannelCloseConversationEvent.conversation:type_name -> api.commons.OmniConversation
	55, // 45: api.commons.audit.OmnichannelCloseConversationEvent.asm_session_sid:type_name -> google.protobuf.Int64Value
	50, // 46: api.commons.audit.OmnichannelUpdateCampaignEvent.channel_type:type_name -> api.commons.ChannelType
	52, // 47: api.commons.audit.OmnichannelUpdateCampaignEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	50, // 48: api.commons.audit.OmnichannelSetConversationCollectedDataEvent.channel_type:type_name -> api.commons.ChannelType
	51, // 49: api.commons.audit.OmnichannelSetConversationCollectedDataEvent.campaign_direction:type_name -> api.commons.CampaignDirection
	56, // 50: api.commons.audit.OmnichannelSetConversationCollectedDataEvent.collected_data:type_name -> api.commons.ConversationCollectedData
	55, // 51: api.commons.audit.OmnichannelSetConversationCollectedDataEvent.asm_session_sid:type_name -> google.protobuf.Int64Value
	50, // 52: api.commons.audit.OmnichannelCompleteCampaignEvent.channel_type:type_name -> api.commons.ChannelType
	52, // 53: api.commons.audit.OmnichannelCompleteCampaignEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	50, // 54: api.commons.audit.OmnichannelArchiveCampaignEvent.channel_type:type_name -> api.commons.ChannelType
	52, // 55: api.commons.audit.OmnichannelArchiveCampaignEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	50, // 56: api.commons.audit.OmnichannelStartCampaignEvent.channel_type:type_name -> api.commons.ChannelType
	52, // 57: api.commons.audit.OmnichannelStartCampaignEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	50, // 58: api.commons.audit.OmnichannelPauseCampaignEvent.channel_type:type_name -> api.commons.ChannelType
	52, // 59: api.commons.audit.OmnichannelPauseCampaignEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	50, // 60: api.commons.audit.OmnichannelResumeCampaignEvent.channel_type:type_name -> api.commons.ChannelType
	52, // 61: api.commons.audit.OmnichannelResumeCampaignEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	52, // 62: api.commons.audit.OmnichannelScheduleModuleEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	52, // 63: api.commons.audit.OmnichannelStartModuleEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	52, // 64: api.commons.audit.OmnichannelPauseModuleEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	52, // 65: api.commons.audit.OmnichannelResumeModuleEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	52, // 66: api.commons.audit.OmnichannelErrorModuleEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	52, // 67: api.commons.audit.OmnichannelSuccessModuleEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	52, // 68: api.commons.audit.OmnichannelFailModuleEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	52, // 69: api.commons.audit.OmnichannelCompleteModuleEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	52, // 70: api.commons.audit.OmnichannelArchiveModuleEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	52, // 71: api.commons.audit.OmnichannelUpdateModuleEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	52, // 72: api.commons.audit.OmnichannelSmsMessageSentModuleEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	54, // 73: api.commons.audit.OmnichannelSmsMessageSentModuleEvent.message:type_name -> api.commons.OmniMessage
	50, // 74: api.commons.audit.OmnichannelModuleInitialReplyEvent.channel_type:type_name -> api.commons.ChannelType
	54, // 75: api.commons.audit.OmnichannelModuleInitialReplyEvent.message:type_name -> api.commons.OmniMessage
	52, // 76: api.commons.audit.OmnichannelModuleInitialReplyEvent.campaign:type_name -> api.commons.OmniCampaign
	52, // 77: api.commons.audit.OmnichannelTaskMessageSentEvent.campaign:type_name -> api.commons.OmniCampaign
	54, // 78: api.commons.audit.OmnichannelTaskMessageSentEvent.message:type_name -> api.commons.OmniMessage
	57, // 79: api.commons.audit.OmnichannelTaskMessageSentEvent.task:type_name -> api.commons.OmniTask
	52, // 80: api.commons.audit.OmnichannelConnectedInboxPollEvent.omni_campaign:type_name -> api.commons.OmniCampaign
	58, // 81: api.commons.audit.OmnichannelConnectedInboxPollEvent.connected_inbox:type_name -> api.commons.ConnectedInbox
	58, // 82: api.commons.audit.OmnichannelConnectedInboxCreatedEvent.connected_inbox:type_name -> api.commons.ConnectedInbox
	54, // 83: api.commons.audit.OmnichannelAgentMessageUnitsEvent.message:type_name -> api.commons.OmniMessage
	54, // 84: api.commons.audit.OmnichannelManagerMessageUnitsEvent.message:type_name -> api.commons.OmniMessage
	54, // 85: api.commons.audit.OmnichannelCustomerMessageUnitsEvent.message:type_name -> api.commons.OmniMessage
	54, // 86: api.commons.audit.OmnichannelSystemMessageUnitsEvent.message:type_name -> api.commons.OmniMessage
	54, // 87: api.commons.audit.OmnichannelPaymentLinkSentEvent.message:type_name -> api.commons.OmniMessage
	57, // 88: api.commons.audit.OmnichannelManualApproveTaskAcceptedEvent.task:type_name -> api.commons.OmniTask
	57, // 89: api.commons.audit.OmnichannelManualApproveTaskRejectedEvent.task:type_name -> api.commons.OmniTask
	57, // 90: api.commons.audit.OmnichannelManualApproveTaskTimeoutEvent.task:type_name -> api.commons.OmniTask
	57, // 91: api.commons.audit.OmnichannelManualApproveTaskRequeueEvent.task:type_name -> api.commons.OmniTask
	92, // [92:92] is the sub-list for method output_type
	92, // [92:92] is the sub-list for method input_type
	92, // [92:92] is the sub-list for extension type_name
	92, // [92:92] is the sub-list for extension extendee
	0,  // [0:92] is the sub-list for field type_name
}

func init() { file_api_commons_audit_omnichannel_events_proto_init() }
func file_api_commons_audit_omnichannel_events_proto_init() {
	if File_api_commons_audit_omnichannel_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_commons_audit_omnichannel_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelCreateProjectEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelCreateCampaignEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelT10Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelDailyProjectReportEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelDailyConversationReportEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelAgentAssignConversationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelAgentUnassignConversationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelAgentReassignConversationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelCustomerTextMessageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelAgentTextMessageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelManagerTextMessageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelFinishWrapUpEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelBeginWrapUpEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelT11Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelCreateConversationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelAgentSuspendEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelCloseConversationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelTranscriptSavedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelUpdateCampaignEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelSetConversationCollectedDataEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelCompleteCampaignEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelArchiveCampaignEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelStartCampaignEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelPauseCampaignEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelResumeCampaignEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelScheduleModuleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelStartModuleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelPauseModuleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelResumeModuleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelErrorModuleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelSuccessModuleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelFailModuleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelCompleteModuleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelArchiveModuleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelUpdateModuleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelSmsMessageSentModuleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelModuleInitialReplyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelTaskMessageSentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelConnectedInboxPollEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelConnectedInboxCreatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelAgentMessageUnitsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelManagerMessageUnitsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelCustomerMessageUnitsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelSystemMessageUnitsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelPaymentLinkSentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelManualApproveTaskAcceptedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelManualApproveTaskRejectedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelManualApproveTaskTimeoutEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_audit_omnichannel_events_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmnichannelManualApproveTaskRequeueEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_audit_omnichannel_events_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_audit_omnichannel_events_proto_goTypes,
		DependencyIndexes: file_api_commons_audit_omnichannel_events_proto_depIdxs,
		MessageInfos:      file_api_commons_audit_omnichannel_events_proto_msgTypes,
	}.Build()
	File_api_commons_audit_omnichannel_events_proto = out.File
	file_api_commons_audit_omnichannel_events_proto_rawDesc = nil
	file_api_commons_audit_omnichannel_events_proto_goTypes = nil
	file_api_commons_audit_omnichannel_events_proto_depIdxs = nil
}
