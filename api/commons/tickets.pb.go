// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: api/commons/tickets.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Ticket - Fields for Ticket creation, List tickets and view ticket
type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The snowflake id of a ticket row
	TicketSid int64 `protobuf:"varint,1,opt,name=ticket_sid,json=ticketSid,proto3" json:"ticket_sid,omitempty"`
	// The imported/enabled ticket_project project_sid from omni.project
	ProjectSid int64 `protobuf:"varint,2,opt,name=project_sid,json=projectSid,proto3" json:"project_sid,omitempty"`
	// project_title
	ProjectTitle string `protobuf:"bytes,3,opt,name=project_title,json=projectTitle,proto3" json:"project_title,omitempty"`
	// A globally distributable, custom sequence generated per-project-per-month for a ticket row.
	TicketCode string `protobuf:"bytes,4,opt,name=ticket_code,json=ticketCode,proto3" json:"ticket_code,omitempty"`
	// The title of the ticket
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	// The description of the ticket
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// The org where the created was created
	OrgId string `protobuf:"bytes,7,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The userId (uuid) who created the ticket
	CreatedById string `protobuf:"bytes,8,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"`
	// The created_by_name from omni.project
	CreatedByName string                 `protobuf:"bytes,9,opt,name=created_by_name,json=createdByName,proto3" json:"created_by_name,omitempty"`
	CreatedByDate *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_by_date,json=createdByDate,proto3" json:"created_by_date,omitempty"`
	// due-date
	DueDate *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	// A list of hunt groups, skills or users assigned to this ticket.
	AssigneeList string `protobuf:"bytes,12,opt,name=assignee_list,json=assigneeList,proto3" json:"assignee_list,omitempty"` // note: bound to re-factor later.
	// A list of conversation context meatadatgit stata
	Metadata []*Metadata `protobuf:"bytes,14,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// A list of skills assotiated with a ticket
	TicketSkills []*Skills `protobuf:"bytes,15,rep,name=ticket_skills,json=ticketSkills,proto3" json:"ticket_skills,omitempty"`
	// Status - Ticket status : 1 open, 2 doing, 3 close etc
	Status int64 `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	// A list of sla  assotiated with a ticket
	TicketSla []*Sla `protobuf:"bytes,17,rep,name=ticket_sla,json=ticketSla,proto3" json:"ticket_sla,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{0}
}

func (x *Ticket) GetTicketSid() int64 {
	if x != nil {
		return x.TicketSid
	}
	return 0
}

func (x *Ticket) GetProjectSid() int64 {
	if x != nil {
		return x.ProjectSid
	}
	return 0
}

func (x *Ticket) GetProjectTitle() string {
	if x != nil {
		return x.ProjectTitle
	}
	return ""
}

func (x *Ticket) GetTicketCode() string {
	if x != nil {
		return x.TicketCode
	}
	return ""
}

func (x *Ticket) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Ticket) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Ticket) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Ticket) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *Ticket) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *Ticket) GetCreatedByDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedByDate
	}
	return nil
}

func (x *Ticket) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *Ticket) GetAssigneeList() string {
	if x != nil {
		return x.AssigneeList
	}
	return ""
}

func (x *Ticket) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Ticket) GetTicketSkills() []*Skills {
	if x != nil {
		return x.TicketSkills
	}
	return nil
}

func (x *Ticket) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Ticket) GetTicketSla() []*Sla {
	if x != nil {
		return x.TicketSla
	}
	return nil
}

// Metadata - Contains a key value pair of strings, Will have metadata of an agent conversations
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{1}
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metadata) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Skills - Field for a skill set assigned to a ticket
type Skills struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId string `protobuf:"bytes,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
}

func (x *Skills) Reset() {
	*x = Skills{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skills) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skills) ProtoMessage() {}

func (x *Skills) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skills.ProtoReflect.Descriptor instead.
func (*Skills) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{2}
}

func (x *Skills) GetSkillId() string {
	if x != nil {
		return x.SkillId
	}
	return ""
}

// Sla - Field for a sla set assigned to a ticket
type Sla struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionSid int64 `protobuf:"varint,1,opt,name=condition_sid,json=conditionSid,proto3" json:"condition_sid,omitempty"`
	SlaSid       int64 `protobuf:"varint,2,opt,name=sla_sid,json=slaSid,proto3" json:"sla_sid,omitempty"`
	SlaMin       int64 `protobuf:"varint,3,opt,name=sla_min,json=slaMin,proto3" json:"sla_min,omitempty"`
}

func (x *Sla) Reset() {
	*x = Sla{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sla) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sla) ProtoMessage() {}

func (x *Sla) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sla.ProtoReflect.Descriptor instead.
func (*Sla) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{3}
}

func (x *Sla) GetConditionSid() int64 {
	if x != nil {
		return x.ConditionSid
	}
	return 0
}

func (x *Sla) GetSlaSid() int64 {
	if x != nil {
		return x.SlaSid
	}
	return 0
}

func (x *Sla) GetSlaMin() int64 {
	if x != nil {
		return x.SlaMin
	}
	return 0
}

// Comment - Fields for Comment on a ticket, listing comments of a ticket (ViewComment)
type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The snowflake id of a comment row in ticket_comment.
	CommentSid int64 `protobuf:"varint,1,opt,name=comment_sid,json=commentSid,proto3" json:"comment_sid,omitempty"`
	// The ticket reference where the comment was added.
	TicketSid int64 `protobuf:"varint,2,opt,name=ticket_sid,json=ticketSid,proto3" json:"ticket_sid,omitempty"`
	// The comment text
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// commenter by id
	CreatedById string `protobuf:"bytes,4,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"` // used in creating comment
	// comment by name
	CreatedByName string `protobuf:"bytes,5,opt,name=created_by_name,json=createdByName,proto3" json:"created_by_name,omitempty"`
	// created by date
	CreatedByDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_by_date,json=createdByDate,proto3" json:"created_by_date,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{4}
}

func (x *Comment) GetCommentSid() int64 {
	if x != nil {
		return x.CommentSid
	}
	return 0
}

func (x *Comment) GetTicketSid() int64 {
	if x != nil {
		return x.TicketSid
	}
	return 0
}

func (x *Comment) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Comment) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *Comment) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *Comment) GetCreatedByDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedByDate
	}
	return nil
}

// CloseTicket - Fields for closing a Ticket
type CloseTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketSid int64 `protobuf:"varint,1,opt,name=ticket_sid,json=ticketSid,proto3" json:"ticket_sid,omitempty"`
	Status    int64 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	// The comment text
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// before status
	FromStatus int64 `protobuf:"varint,4,opt,name=from_status,json=fromStatus,proto3" json:"from_status,omitempty"`
	// commenter by id
	CreatedById string `protobuf:"bytes,5,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"` // used in creating comment
}

func (x *CloseTicket) Reset() {
	*x = CloseTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTicket) ProtoMessage() {}

func (x *CloseTicket) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTicket.ProtoReflect.Descriptor instead.
func (*CloseTicket) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{5}
}

func (x *CloseTicket) GetTicketSid() int64 {
	if x != nil {
		return x.TicketSid
	}
	return 0
}

func (x *CloseTicket) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CloseTicket) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CloseTicket) GetFromStatus() int64 {
	if x != nil {
		return x.FromStatus
	}
	return 0
}

func (x *CloseTicket) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

// ConfirmClose - Boolean response Field post closing a Ticket
type ConfirmClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ConfirmClose) Reset() {
	*x = ConfirmClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmClose) ProtoMessage() {}

func (x *ConfirmClose) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmClose.ProtoReflect.Descriptor instead.
func (*ConfirmClose) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{6}
}

func (x *ConfirmClose) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

// TicketProject - Fields for Project setting in ticketing system
type TicketProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Seq Id of project entry
	TicketProjectId int64 `protobuf:"varint,1,opt,name=ticket_project_id,json=ticketProjectId,proto3" json:"ticket_project_id,omitempty"`
	// Logged in user's Org
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Seq Id of Project from Omni
	ProjectSid int64 `protobuf:"varint,3,opt,name=project_sid,json=projectSid,proto3" json:"project_sid,omitempty"`
	// 3 to 5 letter User entered Project Code
	ProjectCode string `protobuf:"bytes,4,opt,name=project_code,json=projectCode,proto3" json:"project_code,omitempty"`
	// Project Title as in omni
	ProjectTitle string `protobuf:"bytes,5,opt,name=project_title,json=projectTitle,proto3" json:"project_title,omitempty"`
	// Indicates if Project is enabled in ticketing system
	IsActive bool `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *TicketProject) Reset() {
	*x = TicketProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketProject) ProtoMessage() {}

func (x *TicketProject) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketProject.ProtoReflect.Descriptor instead.
func (*TicketProject) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{7}
}

func (x *TicketProject) GetTicketProjectId() int64 {
	if x != nil {
		return x.TicketProjectId
	}
	return 0
}

func (x *TicketProject) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *TicketProject) GetProjectSid() int64 {
	if x != nil {
		return x.ProjectSid
	}
	return 0
}

func (x *TicketProject) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *TicketProject) GetProjectTitle() string {
	if x != nil {
		return x.ProjectTitle
	}
	return ""
}

func (x *TicketProject) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

// TicketSla - Fields for sla on a ticket
type TicketSla struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The snowflake id of a comment row in ticket_comment.
	SlaSid int64 `protobuf:"varint,1,opt,name=sla_sid,json=slaSid,proto3" json:"sla_sid,omitempty"`
	// The name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description text
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// interval
	Interval int64 `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	// Indicates sla is enable or disable
	IsActive int64 `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *TicketSla) Reset() {
	*x = TicketSla{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketSla) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketSla) ProtoMessage() {}

func (x *TicketSla) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketSla.ProtoReflect.Descriptor instead.
func (*TicketSla) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{8}
}

func (x *TicketSla) GetSlaSid() int64 {
	if x != nil {
		return x.SlaSid
	}
	return 0
}

func (x *TicketSla) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TicketSla) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TicketSla) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *TicketSla) GetIsActive() int64 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

// SlaConditions - Condition Fields for sla on a ticket
type SlaConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The snowflake id of a comment row in ticket_comment.
	SlaConditionSid int64 `protobuf:"varint,1,opt,name=sla_condition_sid,json=slaConditionSid,proto3" json:"sla_condition_sid,omitempty"`
	// The name.
	SlaConditionName string `protobuf:"bytes,2,opt,name=sla_condition_name,json=slaConditionName,proto3" json:"sla_condition_name,omitempty"`
}

func (x *SlaConditions) Reset() {
	*x = SlaConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlaConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlaConditions) ProtoMessage() {}

func (x *SlaConditions) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlaConditions.ProtoReflect.Descriptor instead.
func (*SlaConditions) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{9}
}

func (x *SlaConditions) GetSlaConditionSid() int64 {
	if x != nil {
		return x.SlaConditionSid
	}
	return 0
}

func (x *SlaConditions) GetSlaConditionName() string {
	if x != nil {
		return x.SlaConditionName
	}
	return ""
}

// SlaConditions - Condition Fields for sla on a ticket
type ReplyComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The snowflake id of a comment row in ticket_comment.
	CommentSid int64 `protobuf:"varint,1,opt,name=comment_sid,json=commentSid,proto3" json:"comment_sid,omitempty"`
	// The ticket reference where the comment was added.
	TicketSid int64 `protobuf:"varint,2,opt,name=ticket_sid,json=ticketSid,proto3" json:"ticket_sid,omitempty"`
	// The comment text
	Reply string `protobuf:"bytes,3,opt,name=reply,proto3" json:"reply,omitempty"`
	// commenter by id
	CreatedById   string                 `protobuf:"bytes,4,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"` // used in creating comment
	CreatedByDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_by_date,json=createdByDate,proto3" json:"created_by_date,omitempty"`
}

func (x *ReplyComment) Reset() {
	*x = ReplyComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyComment) ProtoMessage() {}

func (x *ReplyComment) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyComment.ProtoReflect.Descriptor instead.
func (*ReplyComment) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{10}
}

func (x *ReplyComment) GetCommentSid() int64 {
	if x != nil {
		return x.CommentSid
	}
	return 0
}

func (x *ReplyComment) GetTicketSid() int64 {
	if x != nil {
		return x.TicketSid
	}
	return 0
}

func (x *ReplyComment) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

func (x *ReplyComment) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *ReplyComment) GetCreatedByDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedByDate
	}
	return nil
}

// ConfirmReplyComment -
type ConfirmReplyComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// boolean value to confirm edit comment
	IsCreated bool `protobuf:"varint,1,opt,name=is_created,json=isCreated,proto3" json:"is_created,omitempty"`
}

func (x *ConfirmReplyComment) Reset() {
	*x = ConfirmReplyComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmReplyComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmReplyComment) ProtoMessage() {}

func (x *ConfirmReplyComment) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmReplyComment.ProtoReflect.Descriptor instead.
func (*ConfirmReplyComment) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{11}
}

func (x *ConfirmReplyComment) GetIsCreated() bool {
	if x != nil {
		return x.IsCreated
	}
	return false
}

// TicketAuditLog -
type TicketAuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ticket_audit_event_log_id
	TicketAuditEventLogId string `protobuf:"bytes,1,opt,name=ticket_audit_event_log_id,json=ticketAuditEventLogId,proto3" json:"ticket_audit_event_log_id,omitempty"`
	// Logged in user's Org
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Logged event
	Event string `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	// ticket_sid
	TicketSid int64 `protobuf:"varint,4,opt,name=ticket_sid,json=ticketSid,proto3" json:"ticket_sid,omitempty"`
	// event_type
	EventType string `protobuf:"bytes,5,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// used in creating comment
	CreatedById string `protobuf:"bytes,6,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"`
	// created by date
	CreatedByDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_by_date,json=createdByDate,proto3" json:"created_by_date,omitempty"`
}

func (x *TicketAuditLog) Reset() {
	*x = TicketAuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketAuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketAuditLog) ProtoMessage() {}

func (x *TicketAuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketAuditLog.ProtoReflect.Descriptor instead.
func (*TicketAuditLog) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{12}
}

func (x *TicketAuditLog) GetTicketAuditEventLogId() string {
	if x != nil {
		return x.TicketAuditEventLogId
	}
	return ""
}

func (x *TicketAuditLog) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *TicketAuditLog) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *TicketAuditLog) GetTicketSid() int64 {
	if x != nil {
		return x.TicketSid
	}
	return 0
}

func (x *TicketAuditLog) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *TicketAuditLog) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *TicketAuditLog) GetCreatedByDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedByDate
	}
	return nil
}

// EditTicket - Fields for Edit Ticket , listing attributes of a ticket which can be edited
type EditTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ticket reference where the comment was added.
	TicketSid int64 `protobuf:"varint,1,opt,name=ticket_sid,json=ticketSid,proto3" json:"ticket_sid,omitempty"`
	// The comment text
	EditValue *EditAttribute `protobuf:"bytes,2,opt,name=edit_value,json=editValue,proto3" json:"edit_value,omitempty"`
}

func (x *EditTicket) Reset() {
	*x = EditTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditTicket) ProtoMessage() {}

func (x *EditTicket) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditTicket.ProtoReflect.Descriptor instead.
func (*EditTicket) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{13}
}

func (x *EditTicket) GetTicketSid() int64 {
	if x != nil {
		return x.TicketSid
	}
	return 0
}

func (x *EditTicket) GetEditValue() *EditAttribute {
	if x != nil {
		return x.EditValue
	}
	return nil
}

// Description = 1
// Skills = 2
// Status = 3
// Due Date = 4
// SLA = 5
// All Values must come as String. BE to convert values to int64, JSON and DateTime
type EditAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column Descripter
	ColDesc  int64  `protobuf:"varint,1,opt,name=col_desc,json=colDesc,proto3" json:"col_desc,omitempty"`
	FromVal  string `protobuf:"bytes,2,opt,name=from_val,json=fromVal,proto3" json:"from_val,omitempty"`
	ToVal    string `protobuf:"bytes,3,opt,name=to_val,json=toVal,proto3" json:"to_val,omitempty"`
	IsEdited bool   `protobuf:"varint,4,opt,name=is_edited,json=isEdited,proto3" json:"is_edited,omitempty"`
}

func (x *EditAttribute) Reset() {
	*x = EditAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_tickets_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditAttribute) ProtoMessage() {}

func (x *EditAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditAttribute.ProtoReflect.Descriptor instead.
func (*EditAttribute) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{14}
}

func (x *EditAttribute) GetColDesc() int64 {
	if x != nil {
		return x.ColDesc
	}
	return 0
}

func (x *EditAttribute) GetFromVal() string {
	if x != nil {
		return x.FromVal
	}
	return ""
}

func (x *EditAttribute) GetToVal() string {
	if x != nil {
		return x.ToVal
	}
	return ""
}

func (x *EditAttribute) GetIsEdited() bool {
	if x != nil {
		return x.IsEdited
	}
	return false
}

var File_api_commons_tickets_proto protoreflect.FileDescriptor

var file_api_commons_tickets_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x05, 0x0a, 0x06, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x0c, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x6c, 0x61,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6c, 0x61, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x6c, 0x61, 0x22, 0x34, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x06, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x68,
	0x0a, 0x03, 0x53, 0x6c, 0x61, 0x12, 0x27, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x07, 0x73, 0x6c, 0x61, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x61, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x73,
	0x6c, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x06, 0x73, 0x6c, 0x61, 0x4d, 0x69, 0x6e, 0x22, 0xfb, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64,
	0x22, 0x26, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0d, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x11, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x09,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x6c, 0x61,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06,
	0x73, 0x6c, 0x61, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x6d, 0x0a, 0x0d, 0x53, 0x6c, 0x61, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x6c, 0x61, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x73, 0x6c, 0x61, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6c, 0x61, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x6c, 0x61, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0x34, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x22, 0xa1, 0x02, 0x0a, 0x0e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0x6a, 0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x65, 0x64, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x7d, 0x0a, 0x0d, 0x45, 0x64, 0x69, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x42, 0x94, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x42, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x41,
	0x43, 0x58, 0xaa, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0xca, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xe2, 0x02,
	0x17, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x41, 0x70, 0x69, 0x3a, 0x3a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_tickets_proto_rawDescOnce sync.Once
	file_api_commons_tickets_proto_rawDescData = file_api_commons_tickets_proto_rawDesc
)

func file_api_commons_tickets_proto_rawDescGZIP() []byte {
	file_api_commons_tickets_proto_rawDescOnce.Do(func() {
		file_api_commons_tickets_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_tickets_proto_rawDescData)
	})
	return file_api_commons_tickets_proto_rawDescData
}

var file_api_commons_tickets_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_api_commons_tickets_proto_goTypes = []interface{}{
	(*Ticket)(nil),                // 0: api.commons.Ticket
	(*Metadata)(nil),              // 1: api.commons.Metadata
	(*Skills)(nil),                // 2: api.commons.Skills
	(*Sla)(nil),                   // 3: api.commons.Sla
	(*Comment)(nil),               // 4: api.commons.Comment
	(*CloseTicket)(nil),           // 5: api.commons.CloseTicket
	(*ConfirmClose)(nil),          // 6: api.commons.ConfirmClose
	(*TicketProject)(nil),         // 7: api.commons.TicketProject
	(*TicketSla)(nil),             // 8: api.commons.TicketSla
	(*SlaConditions)(nil),         // 9: api.commons.SlaConditions
	(*ReplyComment)(nil),          // 10: api.commons.ReplyComment
	(*ConfirmReplyComment)(nil),   // 11: api.commons.ConfirmReplyComment
	(*TicketAuditLog)(nil),        // 12: api.commons.TicketAuditLog
	(*EditTicket)(nil),            // 13: api.commons.EditTicket
	(*EditAttribute)(nil),         // 14: api.commons.EditAttribute
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
}
var file_api_commons_tickets_proto_depIdxs = []int32{
	15, // 0: api.commons.Ticket.created_by_date:type_name -> google.protobuf.Timestamp
	15, // 1: api.commons.Ticket.due_date:type_name -> google.protobuf.Timestamp
	1,  // 2: api.commons.Ticket.metadata:type_name -> api.commons.Metadata
	2,  // 3: api.commons.Ticket.ticket_skills:type_name -> api.commons.Skills
	3,  // 4: api.commons.Ticket.ticket_sla:type_name -> api.commons.Sla
	15, // 5: api.commons.Comment.created_by_date:type_name -> google.protobuf.Timestamp
	15, // 6: api.commons.ReplyComment.created_by_date:type_name -> google.protobuf.Timestamp
	15, // 7: api.commons.TicketAuditLog.created_by_date:type_name -> google.protobuf.Timestamp
	14, // 8: api.commons.EditTicket.edit_value:type_name -> api.commons.EditAttribute
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_api_commons_tickets_proto_init() }
func file_api_commons_tickets_proto_init() {
	if File_api_commons_tickets_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_commons_tickets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_tickets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_tickets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skills); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_tickets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sla); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_tickets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_tickets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_tickets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_tickets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_tickets_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketSla); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_tickets_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlaConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_tickets_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_tickets_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmReplyComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_tickets_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketAuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_tickets_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_tickets_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_tickets_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_tickets_proto_goTypes,
		DependencyIndexes: file_api_commons_tickets_proto_depIdxs,
		MessageInfos:      file_api_commons_tickets_proto_msgTypes,
	}.Build()
	File_api_commons_tickets_proto = out.File
	file_api_commons_tickets_proto_rawDesc = nil
	file_api_commons_tickets_proto_goTypes = nil
	file_api_commons_tickets_proto_depIdxs = nil
}
