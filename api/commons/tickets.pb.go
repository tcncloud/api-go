// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/commons/tickets.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimeScale int32

const (
	TimeScale_TIME_SCALE_MINUTE TimeScale = 0
	TimeScale_TIME_SCALE_HOUR   TimeScale = 1
	TimeScale_TIME_SCALE_DAY    TimeScale = 2
	TimeScale_TIME_SCALE_WEEK   TimeScale = 3
	TimeScale_TIME_SCALE_MONTH  TimeScale = 4
	TimeScale_TIME_SCALE_YEAR   TimeScale = 5
)

// Enum value maps for TimeScale.
var (
	TimeScale_name = map[int32]string{
		0: "TIME_SCALE_MINUTE",
		1: "TIME_SCALE_HOUR",
		2: "TIME_SCALE_DAY",
		3: "TIME_SCALE_WEEK",
		4: "TIME_SCALE_MONTH",
		5: "TIME_SCALE_YEAR",
	}
	TimeScale_value = map[string]int32{
		"TIME_SCALE_MINUTE": 0,
		"TIME_SCALE_HOUR":   1,
		"TIME_SCALE_DAY":    2,
		"TIME_SCALE_WEEK":   3,
		"TIME_SCALE_MONTH":  4,
		"TIME_SCALE_YEAR":   5,
	}
)

func (x TimeScale) Enum() *TimeScale {
	p := new(TimeScale)
	*p = x
	return p
}

func (x TimeScale) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeScale) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_tickets_proto_enumTypes[0].Descriptor()
}

func (TimeScale) Type() protoreflect.EnumType {
	return &file_api_commons_tickets_proto_enumTypes[0]
}

func (x TimeScale) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeScale.Descriptor instead.
func (TimeScale) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{0}
}

type TicketStatus int32

const (
	// NEW
	TicketStatus_TICKET_STATUS_NEW TicketStatus = 0
	// OPEN
	TicketStatus_TICKET_STATUS_OPEN TicketStatus = 1
	// CLOSE
	TicketStatus_TICKET_STATUS_CLOSE TicketStatus = 2
)

// Enum value maps for TicketStatus.
var (
	TicketStatus_name = map[int32]string{
		0: "TICKET_STATUS_NEW",
		1: "TICKET_STATUS_OPEN",
		2: "TICKET_STATUS_CLOSE",
	}
	TicketStatus_value = map[string]int32{
		"TICKET_STATUS_NEW":   0,
		"TICKET_STATUS_OPEN":  1,
		"TICKET_STATUS_CLOSE": 2,
	}
)

func (x TicketStatus) Enum() *TicketStatus {
	p := new(TicketStatus)
	*p = x
	return p
}

func (x TicketStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_tickets_proto_enumTypes[1].Descriptor()
}

func (TicketStatus) Type() protoreflect.EnumType {
	return &file_api_commons_tickets_proto_enumTypes[1]
}

func (x TicketStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketStatus.Descriptor instead.
func (TicketStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
type PhoneNumberType int32

const (
	// Mobile Phone NUmber
	PhoneNumberType_MOBILE PhoneNumberType = 0
	// Geographic OR Other Number
	PhoneNumberType_OTHER PhoneNumberType = 1
	// No Response/Invalid/ERROR
	PhoneNumberType_INVALID_ERROR PhoneNumberType = 2
)

// Enum value maps for PhoneNumberType.
var (
	PhoneNumberType_name = map[int32]string{
		0: "MOBILE",
		1: "OTHER",
		2: "INVALID_ERROR",
	}
	PhoneNumberType_value = map[string]int32{
		"MOBILE":        0,
		"OTHER":         1,
		"INVALID_ERROR": 2,
	}
)

func (x PhoneNumberType) Enum() *PhoneNumberType {
	p := new(PhoneNumberType)
	*p = x
	return p
}

func (x PhoneNumberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneNumberType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_tickets_proto_enumTypes[2].Descriptor()
}

func (PhoneNumberType) Type() protoreflect.EnumType {
	return &file_api_commons_tickets_proto_enumTypes[2]
}

func (x PhoneNumberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhoneNumberType.Descriptor instead.
func (PhoneNumberType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{2}
}

// CustomFieldType -
type TicketCustomFieldType int32

const (
	TicketCustomFieldType_TICKET_CUSTOMFIELD_TYPE_BOOLEAN      TicketCustomFieldType = 0
	TicketCustomFieldType_TICKET_CUSTOMFIELD_TYPE_STRING       TicketCustomFieldType = 1
	TicketCustomFieldType_TICKET_CUSTOMFIELD_TYPE_NUMBER       TicketCustomFieldType = 2
	TicketCustomFieldType_TICKET_CUSTOMFIELD_TYPE_DATETIME     TicketCustomFieldType = 3
	TicketCustomFieldType_TICKET_CUSTOMFIELD_TYPE_MULTISELECT  TicketCustomFieldType = 4
	TicketCustomFieldType_TICKET_CUSTOMFIELD_TYPE_SINGLESELECT TicketCustomFieldType = 5
)

// Enum value maps for TicketCustomFieldType.
var (
	TicketCustomFieldType_name = map[int32]string{
		0: "TICKET_CUSTOMFIELD_TYPE_BOOLEAN",
		1: "TICKET_CUSTOMFIELD_TYPE_STRING",
		2: "TICKET_CUSTOMFIELD_TYPE_NUMBER",
		3: "TICKET_CUSTOMFIELD_TYPE_DATETIME",
		4: "TICKET_CUSTOMFIELD_TYPE_MULTISELECT",
		5: "TICKET_CUSTOMFIELD_TYPE_SINGLESELECT",
	}
	TicketCustomFieldType_value = map[string]int32{
		"TICKET_CUSTOMFIELD_TYPE_BOOLEAN":      0,
		"TICKET_CUSTOMFIELD_TYPE_STRING":       1,
		"TICKET_CUSTOMFIELD_TYPE_NUMBER":       2,
		"TICKET_CUSTOMFIELD_TYPE_DATETIME":     3,
		"TICKET_CUSTOMFIELD_TYPE_MULTISELECT":  4,
		"TICKET_CUSTOMFIELD_TYPE_SINGLESELECT": 5,
	}
)

func (x TicketCustomFieldType) Enum() *TicketCustomFieldType {
	p := new(TicketCustomFieldType)
	*p = x
	return p
}

func (x TicketCustomFieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketCustomFieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_tickets_proto_enumTypes[3].Descriptor()
}

func (TicketCustomFieldType) Type() protoreflect.EnumType {
	return &file_api_commons_tickets_proto_enumTypes[3]
}

func (x TicketCustomFieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketCustomFieldType.Descriptor instead.
func (TicketCustomFieldType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{3}
}

// TicketCustomFieldAStatus
type TicketCustomFieldStatus int32

const (
	TicketCustomFieldStatus_Ticket_Custom_Field_Status_Added   TicketCustomFieldStatus = 0
	TicketCustomFieldStatus_Ticket_Custom_Field_Status_Updated TicketCustomFieldStatus = 1
	TicketCustomFieldStatus_Ticket_Custom_Field_Status_Deleted TicketCustomFieldStatus = 2
)

// Enum value maps for TicketCustomFieldStatus.
var (
	TicketCustomFieldStatus_name = map[int32]string{
		0: "Ticket_Custom_Field_Status_Added",
		1: "Ticket_Custom_Field_Status_Updated",
		2: "Ticket_Custom_Field_Status_Deleted",
	}
	TicketCustomFieldStatus_value = map[string]int32{
		"Ticket_Custom_Field_Status_Added":   0,
		"Ticket_Custom_Field_Status_Updated": 1,
		"Ticket_Custom_Field_Status_Deleted": 2,
	}
)

func (x TicketCustomFieldStatus) Enum() *TicketCustomFieldStatus {
	p := new(TicketCustomFieldStatus)
	*p = x
	return p
}

func (x TicketCustomFieldStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketCustomFieldStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_tickets_proto_enumTypes[4].Descriptor()
}

func (TicketCustomFieldStatus) Type() protoreflect.EnumType {
	return &file_api_commons_tickets_proto_enumTypes[4]
}

func (x TicketCustomFieldStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketCustomFieldStatus.Descriptor instead.
func (TicketCustomFieldStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{4}
}

// Ticket - Fields for Ticket creation, List tickets and view ticket
type Ticket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The snowflake id of a ticket row
	//
	// Deprecated: Marked as deprecated in api/commons/tickets.proto.
	TicketSid int64 `protobuf:"varint,1,opt,name=ticket_sid,json=ticketSid,proto3" json:"ticket_sid,omitempty"`
	// The imported/enabled ticket_project project_sid from omni.project
	ProjectSid int64 `protobuf:"varint,2,opt,name=project_sid,json=projectSid,proto3" json:"project_sid,omitempty"`
	// project_title
	ProjectTitle string `protobuf:"bytes,3,opt,name=project_title,json=projectTitle,proto3" json:"project_title,omitempty"`
	// A globally distributable, custom sequence generated per-project-per-month for a ticket row.
	TicketCode string `protobuf:"bytes,4,opt,name=ticket_code,json=ticketCode,proto3" json:"ticket_code,omitempty"`
	// The title of the ticket
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	// The description of the ticket
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// The org where the created was created
	OrgId string `protobuf:"bytes,7,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The userId (uuid) who created the ticket
	CreatedById string `protobuf:"bytes,8,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"`
	// The created_by_name from omni.project
	CreatedByName string `protobuf:"bytes,9,opt,name=created_by_name,json=createdByName,proto3" json:"created_by_name,omitempty"`
	// The created Date of the Ticket Object
	CreatedByDate *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_by_date,json=createdByDate,proto3" json:"created_by_date,omitempty"`
	// due-date
	//
	// Deprecated: Marked as deprecated in api/commons/tickets.proto.
	DueDate *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	// A list of users assigned to this ticket.
	//
	// Deprecated: Marked as deprecated in api/commons/tickets.proto.
	AssigneeList string `protobuf:"bytes,12,opt,name=assignee_list,json=assigneeList,proto3" json:"assignee_list,omitempty"` // note: bound to re-factor later.
	// A list of conversation context meatadata
	Metadata []*Metadata `protobuf:"bytes,14,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// A list of skills assotiated with a ticket
	//
	// Deprecated: Marked as deprecated in api/commons/tickets.proto.
	TicketSkills []*Skills `protobuf:"bytes,15,rep,name=ticket_skills,json=ticketSkills,proto3" json:"ticket_skills,omitempty"`
	// Status - Ticket status : 1 open, 2 doing, 3 close etc
	Status int64 `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	// A list of sla  assotiated with a ticket
	TicketSla []*Sla `protobuf:"bytes,17,rep,name=ticket_sla,json=ticketSla,proto3" json:"ticket_sla,omitempty"`
	// To be deprecated
	Assignee string `protobuf:"bytes,18,opt,name=assignee,proto3" json:"assignee,omitempty"`
	// A set of Action associated with a Project
	TicketAction []*TicketAction `protobuf:"bytes,19,rep,name=ticket_action,json=ticketAction,proto3" json:"ticket_action,omitempty"`
	// Status of the ticket - NEW,OPEN,CLOSED
	TicketStatus TicketStatus `protobuf:"varint,20,opt,name=ticket_status,json=ticketStatus,proto3,enum=api.commons.TicketStatus" json:"ticket_status,omitempty"`
	// assignee list
	TicketAssignee []string `protobuf:"bytes,21,rep,name=ticket_assignee,json=ticketAssignee,proto3" json:"ticket_assignee,omitempty"`
	// participant list - Any user who participates in the ticket life cycle
	TicketParticipant []string `protobuf:"bytes,22,rep,name=ticket_participant,json=ticketParticipant,proto3" json:"ticket_participant,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	mi := &file_api_commons_tickets_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
func (x *Ticket) GetTicketSid() int64 {
	if x != nil {
		return x.TicketSid
	}
	return 0
}

func (x *Ticket) GetProjectSid() int64 {
	if x != nil {
		return x.ProjectSid
	}
	return 0
}

func (x *Ticket) GetProjectTitle() string {
	if x != nil {
		return x.ProjectTitle
	}
	return ""
}

func (x *Ticket) GetTicketCode() string {
	if x != nil {
		return x.TicketCode
	}
	return ""
}

func (x *Ticket) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Ticket) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Ticket) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Ticket) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *Ticket) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *Ticket) GetCreatedByDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedByDate
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
func (x *Ticket) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
func (x *Ticket) GetAssigneeList() string {
	if x != nil {
		return x.AssigneeList
	}
	return ""
}

func (x *Ticket) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
func (x *Ticket) GetTicketSkills() []*Skills {
	if x != nil {
		return x.TicketSkills
	}
	return nil
}

func (x *Ticket) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Ticket) GetTicketSla() []*Sla {
	if x != nil {
		return x.TicketSla
	}
	return nil
}

func (x *Ticket) GetAssignee() string {
	if x != nil {
		return x.Assignee
	}
	return ""
}

func (x *Ticket) GetTicketAction() []*TicketAction {
	if x != nil {
		return x.TicketAction
	}
	return nil
}

func (x *Ticket) GetTicketStatus() TicketStatus {
	if x != nil {
		return x.TicketStatus
	}
	return TicketStatus_TICKET_STATUS_NEW
}

func (x *Ticket) GetTicketAssignee() []string {
	if x != nil {
		return x.TicketAssignee
	}
	return nil
}

func (x *Ticket) GetTicketParticipant() []string {
	if x != nil {
		return x.TicketParticipant
	}
	return nil
}

// Ticket Template
type TicketTemplate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated
	//
	// Deprecated: Marked as deprecated in api/commons/tickets.proto.
	TicketTemplateId int64 `protobuf:"varint,1,opt,name=ticket_template_id,json=ticketTemplateId,proto3" json:"ticket_template_id,omitempty"`
	// Organization ID
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// A formatted string which the FE uses to retrieve all template related information
	Template string `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
	// Version of the Template
	TemplateEntityVersion string `protobuf:"bytes,4,opt,name=template_entity_version,json=templateEntityVersion,proto3" json:"template_entity_version,omitempty"`
	// Name of the Template
	TemplateName string `protobuf:"bytes,5,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	// Template created by user
	CreatedById string `protobuf:"bytes,6,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"`
	// Template modified by user
	ModifiedBy string `protobuf:"bytes,7,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	// Template create date
	CreatedDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	// Template modified date
	ModifiedDate *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=modified_date,json=modifiedDate,proto3" json:"modified_date,omitempty"`
	// True/False Identifies if a template is active or inactive
	IsActive bool `protobuf:"varint,10,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Snowflake Id of Ticket Template
	TemplateId    int64 `protobuf:"varint,11,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketTemplate) Reset() {
	*x = TicketTemplate{}
	mi := &file_api_commons_tickets_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketTemplate) ProtoMessage() {}

func (x *TicketTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketTemplate.ProtoReflect.Descriptor instead.
func (*TicketTemplate) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
func (x *TicketTemplate) GetTicketTemplateId() int64 {
	if x != nil {
		return x.TicketTemplateId
	}
	return 0
}

func (x *TicketTemplate) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *TicketTemplate) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *TicketTemplate) GetTemplateEntityVersion() string {
	if x != nil {
		return x.TemplateEntityVersion
	}
	return ""
}

func (x *TicketTemplate) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *TicketTemplate) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *TicketTemplate) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

func (x *TicketTemplate) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *TicketTemplate) GetModifiedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedDate
	}
	return nil
}

func (x *TicketTemplate) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *TicketTemplate) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

// Mapping of Template to a Project
// Each Ticket Template Can be mapped to Multiple Projects - In ListTicketTemplateRequest we need all Template To
// Project Mapping
type TicketProjectTemplate struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TicketTemplate     *TicketTemplate        `protobuf:"bytes,1,opt,name=ticket_template,json=ticketTemplate,proto3" json:"ticket_template,omitempty"`
	ProjectDescription []*ProjectDescription  `protobuf:"bytes,2,rep,name=project_description,json=projectDescription,proto3" json:"project_description,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TicketProjectTemplate) Reset() {
	*x = TicketProjectTemplate{}
	mi := &file_api_commons_tickets_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketProjectTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketProjectTemplate) ProtoMessage() {}

func (x *TicketProjectTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketProjectTemplate.ProtoReflect.Descriptor instead.
func (*TicketProjectTemplate) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{2}
}

func (x *TicketProjectTemplate) GetTicketTemplate() *TicketTemplate {
	if x != nil {
		return x.TicketTemplate
	}
	return nil
}

func (x *TicketProjectTemplate) GetProjectDescription() []*ProjectDescription {
	if x != nil {
		return x.ProjectDescription
	}
	return nil
}

// Project Description
type ProjectDescription struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Project Id from Omni
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Project Title From Omni
	ProjectTitle  string `protobuf:"bytes,2,opt,name=project_title,json=projectTitle,proto3" json:"project_title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectDescription) Reset() {
	*x = ProjectDescription{}
	mi := &file_api_commons_tickets_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectDescription) ProtoMessage() {}

func (x *ProjectDescription) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectDescription.ProtoReflect.Descriptor instead.
func (*ProjectDescription) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{3}
}

func (x *ProjectDescription) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ProjectDescription) GetProjectTitle() string {
	if x != nil {
		return x.ProjectTitle
	}
	return ""
}

// Deprecated and will not be used
//
// Deprecated: Marked as deprecated in api/commons/tickets.proto.
type ListTemplate struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TicketTemplateId      int64                  `protobuf:"varint,1,opt,name=ticket_template_id,json=ticketTemplateId,proto3" json:"ticket_template_id,omitempty"`
	TemplateName          string                 `protobuf:"bytes,2,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	ProjectId             int64                  `protobuf:"varint,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Template              string                 `protobuf:"bytes,4,opt,name=template,proto3" json:"template,omitempty"`
	TemplateEntityVersion string                 `protobuf:"bytes,5,opt,name=template_entity_version,json=templateEntityVersion,proto3" json:"template_entity_version,omitempty"`
	IsActive              bool                   `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CreatedById           string                 `protobuf:"bytes,7,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"`
	CreatedDate           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	ProjectTitle          string                 `protobuf:"bytes,9,opt,name=project_title,json=projectTitle,proto3" json:"project_title,omitempty"`
	AssignedProject       []int64                `protobuf:"varint,10,rep,packed,name=assigned_project,json=assignedProject,proto3" json:"assigned_project,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ListTemplate) Reset() {
	*x = ListTemplate{}
	mi := &file_api_commons_tickets_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTemplate) ProtoMessage() {}

func (x *ListTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTemplate.ProtoReflect.Descriptor instead.
func (*ListTemplate) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{4}
}

func (x *ListTemplate) GetTicketTemplateId() int64 {
	if x != nil {
		return x.TicketTemplateId
	}
	return 0
}

func (x *ListTemplate) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *ListTemplate) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListTemplate) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *ListTemplate) GetTemplateEntityVersion() string {
	if x != nil {
		return x.TemplateEntityVersion
	}
	return ""
}

func (x *ListTemplate) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ListTemplate) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *ListTemplate) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *ListTemplate) GetProjectTitle() string {
	if x != nil {
		return x.ProjectTitle
	}
	return ""
}

func (x *ListTemplate) GetAssignedProject() []int64 {
	if x != nil {
		return x.AssignedProject
	}
	return nil
}

// Deprecated and will not be used
//
// Deprecated: Marked as deprecated in api/commons/tickets.proto.
type AssignProjectTemplate struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TicketTemplateId []int64                `protobuf:"varint,1,rep,packed,name=ticket_template_id,json=ticketTemplateId,proto3" json:"ticket_template_id,omitempty"`
	ProjectId        int64                  `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AssignProjectTemplate) Reset() {
	*x = AssignProjectTemplate{}
	mi := &file_api_commons_tickets_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignProjectTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignProjectTemplate) ProtoMessage() {}

func (x *AssignProjectTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignProjectTemplate.ProtoReflect.Descriptor instead.
func (*AssignProjectTemplate) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{5}
}

func (x *AssignProjectTemplate) GetTicketTemplateId() []int64 {
	if x != nil {
		return x.TicketTemplateId
	}
	return nil
}

func (x *AssignProjectTemplate) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

type Duration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Value of of the Scale
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Scale - In minutes,hour,day,week,month,year
	Scale         TimeScale `protobuf:"varint,2,opt,name=scale,proto3,enum=api.commons.TimeScale" json:"scale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Duration) Reset() {
	*x = Duration{}
	mi := &file_api_commons_tickets_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duration) ProtoMessage() {}

func (x *Duration) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duration.ProtoReflect.Descriptor instead.
func (*Duration) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{6}
}

func (x *Duration) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Duration) GetScale() TimeScale {
	if x != nil {
		return x.Scale
	}
	return TimeScale_TIME_SCALE_MINUTE
}

// TICKET_ACTION - New messgae have actions mapped to tickets
type TicketAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// snowflake id
	TicketActionId int64 `protobuf:"varint,1,opt,name=ticket_action_id,json=ticketActionId,proto3" json:"ticket_action_id,omitempty"`
	// action id from ACTION_MASTER table, Only callback for now
	ActionId int64 `protobuf:"varint,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// Attributes for a callback Action
	// To be Deprecated Later
	//
	// Deprecated: Marked as deprecated in api/commons/tickets.proto.
	CallbackContext *CallbackContext `protobuf:"bytes,3,opt,name=callback_context,json=callbackContext,proto3" json:"callback_context,omitempty"`
	// ticket id from ticket table
	//
	// Deprecated: Marked as deprecated in api/commons/tickets.proto.
	TicketId int64 `protobuf:"varint,4,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	// Start Date of the ACTION
	StartTs *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	// Expiry date of the ACTION
	ExpiryTs *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expiry_ts,json=expiryTs,proto3" json:"expiry_ts,omitempty"`
	// Ticket action status can be 1 == AVAILABLE and 2 == NOT AVAILABLE
	State int64 `protobuf:"varint,8,opt,name=state,proto3" json:"state,omitempty"`
	// Skills needed for the action to be completed
	// For action we need only skill id and not mandatory/optional
	ActionSkills []string `protobuf:"bytes,9,rep,name=action_skills,json=actionSkills,proto3" json:"action_skills,omitempty"`
	// SLA Id for the ACTION
	ActionSlaId []*Sla `protobuf:"bytes,10,rep,name=action_sla_id,json=actionSlaId,proto3" json:"action_sla_id,omitempty"`
	// work done by
	WorkDoneBy string `protobuf:"bytes,11,opt,name=work_done_by,json=workDoneBy,proto3" json:"work_done_by,omitempty"`
	// Context Object For Voice,SMS,Email - Only one object to be in Request
	//
	// Types that are valid to be assigned to Context:
	//
	//	*TicketAction_VoiceContext
	//	*TicketAction_SmsContext
	//	*TicketAction_EmailContext
	Context isTicketAction_Context `protobuf_oneof:"context"`
	// Action Type
	ActionType *ActionType `protobuf:"bytes,15,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	// ticket_code
	TicketCode    string `protobuf:"bytes,16,opt,name=ticket_code,json=ticketCode,proto3" json:"ticket_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketAction) Reset() {
	*x = TicketAction{}
	mi := &file_api_commons_tickets_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketAction) ProtoMessage() {}

func (x *TicketAction) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketAction.ProtoReflect.Descriptor instead.
func (*TicketAction) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{7}
}

func (x *TicketAction) GetTicketActionId() int64 {
	if x != nil {
		return x.TicketActionId
	}
	return 0
}

func (x *TicketAction) GetActionId() int64 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
func (x *TicketAction) GetCallbackContext() *CallbackContext {
	if x != nil {
		return x.CallbackContext
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
func (x *TicketAction) GetTicketId() int64 {
	if x != nil {
		return x.TicketId
	}
	return 0
}

func (x *TicketAction) GetStartTs() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTs
	}
	return nil
}

func (x *TicketAction) GetExpiryTs() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTs
	}
	return nil
}

func (x *TicketAction) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *TicketAction) GetActionSkills() []string {
	if x != nil {
		return x.ActionSkills
	}
	return nil
}

func (x *TicketAction) GetActionSlaId() []*Sla {
	if x != nil {
		return x.ActionSlaId
	}
	return nil
}

func (x *TicketAction) GetWorkDoneBy() string {
	if x != nil {
		return x.WorkDoneBy
	}
	return ""
}

func (x *TicketAction) GetContext() isTicketAction_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *TicketAction) GetVoiceContext() *CallbackContext {
	if x != nil {
		if x, ok := x.Context.(*TicketAction_VoiceContext); ok {
			return x.VoiceContext
		}
	}
	return nil
}

func (x *TicketAction) GetSmsContext() *SmsbackContext {
	if x != nil {
		if x, ok := x.Context.(*TicketAction_SmsContext); ok {
			return x.SmsContext
		}
	}
	return nil
}

func (x *TicketAction) GetEmailContext() *EmailbackContext {
	if x != nil {
		if x, ok := x.Context.(*TicketAction_EmailContext); ok {
			return x.EmailContext
		}
	}
	return nil
}

func (x *TicketAction) GetActionType() *ActionType {
	if x != nil {
		return x.ActionType
	}
	return nil
}

func (x *TicketAction) GetTicketCode() string {
	if x != nil {
		return x.TicketCode
	}
	return ""
}

type isTicketAction_Context interface {
	isTicketAction_Context()
}

type TicketAction_VoiceContext struct {
	// Voice Callback Context
	VoiceContext *CallbackContext `protobuf:"bytes,12,opt,name=voice_context,json=voiceContext,proto3,oneof"`
}

type TicketAction_SmsContext struct {
	// SMS Callback Context
	SmsContext *SmsbackContext `protobuf:"bytes,13,opt,name=sms_context,json=smsContext,proto3,oneof"`
}

type TicketAction_EmailContext struct {
	// Email Callback Context
	EmailContext *EmailbackContext `protobuf:"bytes,14,opt,name=email_context,json=emailContext,proto3,oneof"`
}

func (*TicketAction_VoiceContext) isTicketAction_Context() {}

func (*TicketAction_SmsContext) isTicketAction_Context() {}

func (*TicketAction_EmailContext) isTicketAction_Context() {}

// Message for Voice Callback Context
type CallbackContext struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CallerId          string                 `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	PhoneNo           string                 `protobuf:"bytes,2,opt,name=phone_no,json=phoneNo,proto3" json:"phone_no,omitempty"`
	CountryCode       string                 `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	CallerName        string                 `protobuf:"bytes,4,opt,name=caller_name,json=callerName,proto3" json:"caller_name,omitempty"`
	CallerCountryCode string                 `protobuf:"bytes,5,opt,name=caller_country_code,json=callerCountryCode,proto3" json:"caller_country_code,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CallbackContext) Reset() {
	*x = CallbackContext{}
	mi := &file_api_commons_tickets_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallbackContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackContext) ProtoMessage() {}

func (x *CallbackContext) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackContext.ProtoReflect.Descriptor instead.
func (*CallbackContext) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{8}
}

func (x *CallbackContext) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *CallbackContext) GetPhoneNo() string {
	if x != nil {
		return x.PhoneNo
	}
	return ""
}

func (x *CallbackContext) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CallbackContext) GetCallerName() string {
	if x != nil {
		return x.CallerName
	}
	return ""
}

func (x *CallbackContext) GetCallerCountryCode() string {
	if x != nil {
		return x.CallerCountryCode
	}
	return ""
}

// Message for SMS Callback Context
type SmsbackContext struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ContactName     string                 `protobuf:"bytes,1,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	ToSms           string                 `protobuf:"bytes,2,opt,name=to_sms,json=toSms,proto3" json:"to_sms,omitempty"`
	FromSms         string                 `protobuf:"bytes,3,opt,name=from_sms,json=fromSms,proto3" json:"from_sms,omitempty"`
	ToCountryCode   string                 `protobuf:"bytes,4,opt,name=to_country_code,json=toCountryCode,proto3" json:"to_country_code,omitempty"`
	FromCountryCode string                 `protobuf:"bytes,5,opt,name=from_country_code,json=fromCountryCode,proto3" json:"from_country_code,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SmsbackContext) Reset() {
	*x = SmsbackContext{}
	mi := &file_api_commons_tickets_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsbackContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsbackContext) ProtoMessage() {}

func (x *SmsbackContext) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsbackContext.ProtoReflect.Descriptor instead.
func (*SmsbackContext) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{9}
}

func (x *SmsbackContext) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *SmsbackContext) GetToSms() string {
	if x != nil {
		return x.ToSms
	}
	return ""
}

func (x *SmsbackContext) GetFromSms() string {
	if x != nil {
		return x.FromSms
	}
	return ""
}

func (x *SmsbackContext) GetToCountryCode() string {
	if x != nil {
		return x.ToCountryCode
	}
	return ""
}

func (x *SmsbackContext) GetFromCountryCode() string {
	if x != nil {
		return x.FromCountryCode
	}
	return ""
}

type ActionType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ActionTypeId  int64                  `protobuf:"varint,1,opt,name=action_type_id,json=actionTypeId,proto3" json:"action_type_id,omitempty"`
	ActionName    string                 `protobuf:"bytes,2,opt,name=action_name,json=actionName,proto3" json:"action_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionType) Reset() {
	*x = ActionType{}
	mi := &file_api_commons_tickets_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionType) ProtoMessage() {}

func (x *ActionType) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionType.ProtoReflect.Descriptor instead.
func (*ActionType) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{10}
}

func (x *ActionType) GetActionTypeId() int64 {
	if x != nil {
		return x.ActionTypeId
	}
	return 0
}

func (x *ActionType) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

// Message for EMAIL Callback Context
type EmailbackContext struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContactName   string                 `protobuf:"bytes,1,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	ToEmail       string                 `protobuf:"bytes,2,opt,name=to_email,json=toEmail,proto3" json:"to_email,omitempty"`
	FromEmail     string                 `protobuf:"bytes,3,opt,name=from_email,json=fromEmail,proto3" json:"from_email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmailbackContext) Reset() {
	*x = EmailbackContext{}
	mi := &file_api_commons_tickets_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailbackContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailbackContext) ProtoMessage() {}

func (x *EmailbackContext) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailbackContext.ProtoReflect.Descriptor instead.
func (*EmailbackContext) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{11}
}

func (x *EmailbackContext) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *EmailbackContext) GetToEmail() string {
	if x != nil {
		return x.ToEmail
	}
	return ""
}

func (x *EmailbackContext) GetFromEmail() string {
	if x != nil {
		return x.FromEmail
	}
	return ""
}

// Metadata - Contains a key value pair of strings, Will have metadata of an agent conversations
type Metadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_api_commons_tickets_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{12}
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metadata) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Skills - Field for a skill set assigned to a ticket
//
// Deprecated: Marked as deprecated in api/commons/tickets.proto.
type Skills struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	SkillId string                 `protobuf:"bytes,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	// Mandatory = 0, Preferred = 1
	IsPreferred   bool `protobuf:"varint,2,opt,name=is_preferred,json=isPreferred,proto3" json:"is_preferred,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Skills) Reset() {
	*x = Skills{}
	mi := &file_api_commons_tickets_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Skills) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skills) ProtoMessage() {}

func (x *Skills) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skills.ProtoReflect.Descriptor instead.
func (*Skills) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{13}
}

func (x *Skills) GetSkillId() string {
	if x != nil {
		return x.SkillId
	}
	return ""
}

func (x *Skills) GetIsPreferred() bool {
	if x != nil {
		return x.IsPreferred
	}
	return false
}

// Sla - Field for a sla set assigned to a ticket
type Sla struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConditionSid  int64                  `protobuf:"varint,1,opt,name=condition_sid,json=conditionSid,proto3" json:"condition_sid,omitempty"`
	SlaSid        int64                  `protobuf:"varint,2,opt,name=sla_sid,json=slaSid,proto3" json:"sla_sid,omitempty"`
	SlaMin        int64                  `protobuf:"varint,3,opt,name=sla_min,json=slaMin,proto3" json:"sla_min,omitempty"`
	SlaDuration   *Duration              `protobuf:"bytes,4,opt,name=sla_duration,json=slaDuration,proto3" json:"sla_duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sla) Reset() {
	*x = Sla{}
	mi := &file_api_commons_tickets_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sla) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sla) ProtoMessage() {}

func (x *Sla) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sla.ProtoReflect.Descriptor instead.
func (*Sla) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{14}
}

func (x *Sla) GetConditionSid() int64 {
	if x != nil {
		return x.ConditionSid
	}
	return 0
}

func (x *Sla) GetSlaSid() int64 {
	if x != nil {
		return x.SlaSid
	}
	return 0
}

func (x *Sla) GetSlaMin() int64 {
	if x != nil {
		return x.SlaMin
	}
	return 0
}

func (x *Sla) GetSlaDuration() *Duration {
	if x != nil {
		return x.SlaDuration
	}
	return nil
}

// Comment - Fields for Comment on a ticket, listing comments of a ticket (ViewComment)
type Comment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The snowflake id of a comment row in ticket_comment.
	CommentSid int64 `protobuf:"varint,1,opt,name=comment_sid,json=commentSid,proto3" json:"comment_sid,omitempty"`
	// The ticket reference where the comment was added.
	//
	// Deprecated: Marked as deprecated in api/commons/tickets.proto.
	TicketSid int64 `protobuf:"varint,2,opt,name=ticket_sid,json=ticketSid,proto3" json:"ticket_sid,omitempty"`
	// The comment text
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// commenter by id
	CreatedById string `protobuf:"bytes,4,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"` // used in creating comment
	// comment by name
	CreatedByName string `protobuf:"bytes,5,opt,name=created_by_name,json=createdByName,proto3" json:"created_by_name,omitempty"`
	// created by date
	CreatedByDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_by_date,json=createdByDate,proto3" json:"created_by_date,omitempty"`
	// ticket_code
	TicketCode    string `protobuf:"bytes,7,opt,name=ticket_code,json=ticketCode,proto3" json:"ticket_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Comment) Reset() {
	*x = Comment{}
	mi := &file_api_commons_tickets_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{15}
}

func (x *Comment) GetCommentSid() int64 {
	if x != nil {
		return x.CommentSid
	}
	return 0
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
func (x *Comment) GetTicketSid() int64 {
	if x != nil {
		return x.TicketSid
	}
	return 0
}

func (x *Comment) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Comment) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *Comment) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *Comment) GetCreatedByDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedByDate
	}
	return nil
}

func (x *Comment) GetTicketCode() string {
	if x != nil {
		return x.TicketCode
	}
	return ""
}

// CloseTicket - Fields for closing a Ticket
type CloseTicket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in api/commons/tickets.proto.
	TicketSid int64 `protobuf:"varint,1,opt,name=ticket_sid,json=ticketSid,proto3" json:"ticket_sid,omitempty"`
	Status    int64 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	// The comment text
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// before status
	FromStatus int64 `protobuf:"varint,4,opt,name=from_status,json=fromStatus,proto3" json:"from_status,omitempty"`
	// commenter by id
	CreatedById string `protobuf:"bytes,5,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"` // used in creating comment
	// ticket_code
	TicketCode    string `protobuf:"bytes,6,opt,name=ticket_code,json=ticketCode,proto3" json:"ticket_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseTicket) Reset() {
	*x = CloseTicket{}
	mi := &file_api_commons_tickets_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTicket) ProtoMessage() {}

func (x *CloseTicket) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTicket.ProtoReflect.Descriptor instead.
func (*CloseTicket) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{16}
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
func (x *CloseTicket) GetTicketSid() int64 {
	if x != nil {
		return x.TicketSid
	}
	return 0
}

func (x *CloseTicket) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CloseTicket) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CloseTicket) GetFromStatus() int64 {
	if x != nil {
		return x.FromStatus
	}
	return 0
}

func (x *CloseTicket) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *CloseTicket) GetTicketCode() string {
	if x != nil {
		return x.TicketCode
	}
	return ""
}

// ConfirmClose - Boolean response for closing a Ticket
//
// Deprecated: Marked as deprecated in api/commons/tickets.proto.
type ConfirmClose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        int64                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmClose) Reset() {
	*x = ConfirmClose{}
	mi := &file_api_commons_tickets_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmClose) ProtoMessage() {}

func (x *ConfirmClose) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmClose.ProtoReflect.Descriptor instead.
func (*ConfirmClose) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{17}
}

func (x *ConfirmClose) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

// TicketProject - Fields for Project setting in ticketing system
type TicketProject struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Seq Id of project entry
	TicketProjectId int64 `protobuf:"varint,1,opt,name=ticket_project_id,json=ticketProjectId,proto3" json:"ticket_project_id,omitempty"`
	// Logged in user's Org
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Seq Id of Project from Omni
	ProjectSid int64 `protobuf:"varint,3,opt,name=project_sid,json=projectSid,proto3" json:"project_sid,omitempty"`
	// 3 to 5 letter User entered Project Code
	ProjectCode string `protobuf:"bytes,4,opt,name=project_code,json=projectCode,proto3" json:"project_code,omitempty"`
	// Project Title as in omni
	ProjectTitle string `protobuf:"bytes,5,opt,name=project_title,json=projectTitle,proto3" json:"project_title,omitempty"`
	// Indicates if Project is enabled in ticketing system
	IsActive bool `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Added ticket template ID & add in DB too
	TemplateDesc  []*TemplateDescription `protobuf:"bytes,7,rep,name=template_desc,json=templateDesc,proto3" json:"template_desc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketProject) Reset() {
	*x = TicketProject{}
	mi := &file_api_commons_tickets_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketProject) ProtoMessage() {}

func (x *TicketProject) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketProject.ProtoReflect.Descriptor instead.
func (*TicketProject) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{18}
}

func (x *TicketProject) GetTicketProjectId() int64 {
	if x != nil {
		return x.TicketProjectId
	}
	return 0
}

func (x *TicketProject) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *TicketProject) GetProjectSid() int64 {
	if x != nil {
		return x.ProjectSid
	}
	return 0
}

func (x *TicketProject) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *TicketProject) GetProjectTitle() string {
	if x != nil {
		return x.ProjectTitle
	}
	return ""
}

func (x *TicketProject) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *TicketProject) GetTemplateDesc() []*TemplateDescription {
	if x != nil {
		return x.TemplateDesc
	}
	return nil
}

type TemplateDescription struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TicketTemplateId int64                  `protobuf:"varint,1,opt,name=ticket_template_id,json=ticketTemplateId,proto3" json:"ticket_template_id,omitempty"`
	TemplateName     string                 `protobuf:"bytes,2,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TemplateDescription) Reset() {
	*x = TemplateDescription{}
	mi := &file_api_commons_tickets_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateDescription) ProtoMessage() {}

func (x *TemplateDescription) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateDescription.ProtoReflect.Descriptor instead.
func (*TemplateDescription) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{19}
}

func (x *TemplateDescription) GetTicketTemplateId() int64 {
	if x != nil {
		return x.TicketTemplateId
	}
	return 0
}

func (x *TemplateDescription) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

// TicketSla - Fields for sla on a ticket
type TicketSla struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The snowflake id of a comment row in ticket_comment.
	SlaSid int64 `protobuf:"varint,1,opt,name=sla_sid,json=slaSid,proto3" json:"sla_sid,omitempty"`
	// The name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description text
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// interval
	Interval int64 `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	// Indicates sla is enable or disable
	IsActive          int64     `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	TicketSlaDuration *Duration `protobuf:"bytes,6,opt,name=ticket_sla_duration,json=ticketSlaDuration,proto3" json:"ticket_sla_duration,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TicketSla) Reset() {
	*x = TicketSla{}
	mi := &file_api_commons_tickets_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketSla) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketSla) ProtoMessage() {}

func (x *TicketSla) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketSla.ProtoReflect.Descriptor instead.
func (*TicketSla) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{20}
}

func (x *TicketSla) GetSlaSid() int64 {
	if x != nil {
		return x.SlaSid
	}
	return 0
}

func (x *TicketSla) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TicketSla) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TicketSla) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *TicketSla) GetIsActive() int64 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *TicketSla) GetTicketSlaDuration() *Duration {
	if x != nil {
		return x.TicketSlaDuration
	}
	return nil
}

// SlaConditions - Condition Fields for sla on a ticket
type SlaConditions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The snowflake id of a comment row in ticket_comment.
	SlaConditionSid int64 `protobuf:"varint,1,opt,name=sla_condition_sid,json=slaConditionSid,proto3" json:"sla_condition_sid,omitempty"`
	// The name.
	SlaConditionName string `protobuf:"bytes,2,opt,name=sla_condition_name,json=slaConditionName,proto3" json:"sla_condition_name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SlaConditions) Reset() {
	*x = SlaConditions{}
	mi := &file_api_commons_tickets_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlaConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlaConditions) ProtoMessage() {}

func (x *SlaConditions) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlaConditions.ProtoReflect.Descriptor instead.
func (*SlaConditions) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{21}
}

func (x *SlaConditions) GetSlaConditionSid() int64 {
	if x != nil {
		return x.SlaConditionSid
	}
	return 0
}

func (x *SlaConditions) GetSlaConditionName() string {
	if x != nil {
		return x.SlaConditionName
	}
	return ""
}

// ReplyComment -
type ReplyComment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The snowflake id of a comment row in ticket_comment.
	CommentSid int64 `protobuf:"varint,1,opt,name=comment_sid,json=commentSid,proto3" json:"comment_sid,omitempty"`
	// The ticket reference where the comment was added.
	//
	// Deprecated: Marked as deprecated in api/commons/tickets.proto.
	TicketSid int64 `protobuf:"varint,2,opt,name=ticket_sid,json=ticketSid,proto3" json:"ticket_sid,omitempty"`
	// The comment text
	Reply string `protobuf:"bytes,3,opt,name=reply,proto3" json:"reply,omitempty"`
	// commenter by id
	CreatedById   string                 `protobuf:"bytes,4,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"` // used in creating comment
	CreatedByDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_by_date,json=createdByDate,proto3" json:"created_by_date,omitempty"`
	// ticket_code
	TicketCode    string `protobuf:"bytes,6,opt,name=ticket_code,json=ticketCode,proto3" json:"ticket_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplyComment) Reset() {
	*x = ReplyComment{}
	mi := &file_api_commons_tickets_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplyComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyComment) ProtoMessage() {}

func (x *ReplyComment) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyComment.ProtoReflect.Descriptor instead.
func (*ReplyComment) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{22}
}

func (x *ReplyComment) GetCommentSid() int64 {
	if x != nil {
		return x.CommentSid
	}
	return 0
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
func (x *ReplyComment) GetTicketSid() int64 {
	if x != nil {
		return x.TicketSid
	}
	return 0
}

func (x *ReplyComment) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

func (x *ReplyComment) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *ReplyComment) GetCreatedByDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedByDate
	}
	return nil
}

func (x *ReplyComment) GetTicketCode() string {
	if x != nil {
		return x.TicketCode
	}
	return ""
}

// ConfirmReplyComment -
type ConfirmReplyComment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// boolean value to confirm edit comment
	//
	// Deprecated: Marked as deprecated in api/commons/tickets.proto.
	IsCreated     bool `protobuf:"varint,1,opt,name=is_created,json=isCreated,proto3" json:"is_created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmReplyComment) Reset() {
	*x = ConfirmReplyComment{}
	mi := &file_api_commons_tickets_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmReplyComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmReplyComment) ProtoMessage() {}

func (x *ConfirmReplyComment) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmReplyComment.ProtoReflect.Descriptor instead.
func (*ConfirmReplyComment) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{23}
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
func (x *ConfirmReplyComment) GetIsCreated() bool {
	if x != nil {
		return x.IsCreated
	}
	return false
}

// TicketAuditLog -
type TicketAuditLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ticket_audit_event_log_id
	TicketAuditEventLogId string `protobuf:"bytes,1,opt,name=ticket_audit_event_log_id,json=ticketAuditEventLogId,proto3" json:"ticket_audit_event_log_id,omitempty"`
	// Logged in user's Org
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Logged event
	Event string `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	// ticket_sid
	//
	// Deprecated: Marked as deprecated in api/commons/tickets.proto.
	TicketSid int64 `protobuf:"varint,4,opt,name=ticket_sid,json=ticketSid,proto3" json:"ticket_sid,omitempty"`
	// event_type
	EventType string `protobuf:"bytes,5,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// used in creating comment
	CreatedById string `protobuf:"bytes,6,opt,name=created_by_id,json=createdById,proto3" json:"created_by_id,omitempty"`
	// created by date
	CreatedByDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_by_date,json=createdByDate,proto3" json:"created_by_date,omitempty"`
	// ticket_code
	TicketCode    string `protobuf:"bytes,8,opt,name=ticket_code,json=ticketCode,proto3" json:"ticket_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketAuditLog) Reset() {
	*x = TicketAuditLog{}
	mi := &file_api_commons_tickets_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketAuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketAuditLog) ProtoMessage() {}

func (x *TicketAuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketAuditLog.ProtoReflect.Descriptor instead.
func (*TicketAuditLog) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{24}
}

func (x *TicketAuditLog) GetTicketAuditEventLogId() string {
	if x != nil {
		return x.TicketAuditEventLogId
	}
	return ""
}

func (x *TicketAuditLog) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *TicketAuditLog) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
func (x *TicketAuditLog) GetTicketSid() int64 {
	if x != nil {
		return x.TicketSid
	}
	return 0
}

func (x *TicketAuditLog) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *TicketAuditLog) GetCreatedById() string {
	if x != nil {
		return x.CreatedById
	}
	return ""
}

func (x *TicketAuditLog) GetCreatedByDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedByDate
	}
	return nil
}

func (x *TicketAuditLog) GetTicketCode() string {
	if x != nil {
		return x.TicketCode
	}
	return ""
}

// EditTicket - ** Only used in auditlog as a payload **
type EditTicket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ticket reference where the comment was added.
	//
	// Deprecated: Marked as deprecated in api/commons/tickets.proto.
	TicketSid int64 `protobuf:"varint,1,opt,name=ticket_sid,json=ticketSid,proto3" json:"ticket_sid,omitempty"`
	// The comment text
	EditValue *EditAttribute `protobuf:"bytes,2,opt,name=edit_value,json=editValue,proto3" json:"edit_value,omitempty"`
	// ticket_code
	TicketCode string `protobuf:"bytes,3,opt,name=ticket_code,json=ticketCode,proto3" json:"ticket_code,omitempty"`
	// ticket_action_id
	TicketActionId int64 `protobuf:"varint,4,opt,name=ticket_action_id,json=ticketActionId,proto3" json:"ticket_action_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EditTicket) Reset() {
	*x = EditTicket{}
	mi := &file_api_commons_tickets_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditTicket) ProtoMessage() {}

func (x *EditTicket) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditTicket.ProtoReflect.Descriptor instead.
func (*EditTicket) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{25}
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
func (x *EditTicket) GetTicketSid() int64 {
	if x != nil {
		return x.TicketSid
	}
	return 0
}

func (x *EditTicket) GetEditValue() *EditAttribute {
	if x != nil {
		return x.EditValue
	}
	return nil
}

func (x *EditTicket) GetTicketCode() string {
	if x != nil {
		return x.TicketCode
	}
	return ""
}

func (x *EditTicket) GetTicketActionId() int64 {
	if x != nil {
		return x.TicketActionId
	}
	return 0
}

type EditAttribute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Column Descripter
	ColDesc       int64  `protobuf:"varint,1,opt,name=col_desc,json=colDesc,proto3" json:"col_desc,omitempty"`
	FromVal       string `protobuf:"bytes,2,opt,name=from_val,json=fromVal,proto3" json:"from_val,omitempty"`
	ToVal         string `protobuf:"bytes,3,opt,name=to_val,json=toVal,proto3" json:"to_val,omitempty"`
	IsEdited      bool   `protobuf:"varint,4,opt,name=is_edited,json=isEdited,proto3" json:"is_edited,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EditAttribute) Reset() {
	*x = EditAttribute{}
	mi := &file_api_commons_tickets_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditAttribute) ProtoMessage() {}

func (x *EditAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditAttribute.ProtoReflect.Descriptor instead.
func (*EditAttribute) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{26}
}

func (x *EditAttribute) GetColDesc() int64 {
	if x != nil {
		return x.ColDesc
	}
	return 0
}

func (x *EditAttribute) GetFromVal() string {
	if x != nil {
		return x.FromVal
	}
	return ""
}

func (x *EditAttribute) GetToVal() string {
	if x != nil {
		return x.ToVal
	}
	return ""
}

func (x *EditAttribute) GetIsEdited() bool {
	if x != nil {
		return x.IsEdited
	}
	return false
}

// CustomFields - Fields for ticket
type CustomField struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The snowflake id of a custom field.
	CustomFieldSid int64 `protobuf:"varint,1,opt,name=custom_field_sid,json=customFieldSid,proto3" json:"custom_field_sid,omitempty"`
	// custom_field_name
	CustomFieldName string `protobuf:"bytes,2,opt,name=custom_field_name,json=customFieldName,proto3" json:"custom_field_name,omitempty"`
	// custom_field_value
	CustomFieldValue string `protobuf:"bytes,3,opt,name=custom_field_value,json=customFieldValue,proto3" json:"custom_field_value,omitempty"`
	// custom_field_type
	//
	// Deprecated: Marked as deprecated in api/commons/tickets.proto.
	CustomFieldType string `protobuf:"bytes,4,opt,name=custom_field_type,json=customFieldType,proto3" json:"custom_field_type,omitempty"`
	// date_modified
	DateModified *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	// True/False Identifies if a custom fields deleted
	IsDeleted bool `protobuf:"varint,6,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// custom_field_enum_type
	TicketCustomFieldType TicketCustomFieldType `protobuf:"varint,8,opt,name=ticket_custom_field_type,json=ticketCustomFieldType,proto3,enum=api.commons.TicketCustomFieldType" json:"ticket_custom_field_type,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CustomField) Reset() {
	*x = CustomField{}
	mi := &file_api_commons_tickets_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomField) ProtoMessage() {}

func (x *CustomField) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomField.ProtoReflect.Descriptor instead.
func (*CustomField) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{27}
}

func (x *CustomField) GetCustomFieldSid() int64 {
	if x != nil {
		return x.CustomFieldSid
	}
	return 0
}

func (x *CustomField) GetCustomFieldName() string {
	if x != nil {
		return x.CustomFieldName
	}
	return ""
}

func (x *CustomField) GetCustomFieldValue() string {
	if x != nil {
		return x.CustomFieldValue
	}
	return ""
}

// Deprecated: Marked as deprecated in api/commons/tickets.proto.
func (x *CustomField) GetCustomFieldType() string {
	if x != nil {
		return x.CustomFieldType
	}
	return ""
}

func (x *CustomField) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *CustomField) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *CustomField) GetTicketCustomFieldType() TicketCustomFieldType {
	if x != nil {
		return x.TicketCustomFieldType
	}
	return TicketCustomFieldType_TICKET_CUSTOMFIELD_TYPE_BOOLEAN
}

// TicketCustomFieldAuditLog - Represents an audit log entry for changes to a ticket's custom fields.
type TicketCustomFieldAuditLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of custom field  attributes.
	CustomFieldAttributes []*CustomFieldAttribute `protobuf:"bytes,1,rep,name=custom_field_attributes,json=customFieldAttributes,proto3" json:"custom_field_attributes,omitempty"`
	// The ticket code associated with the audit log entry.
	TicketCode    string `protobuf:"bytes,2,opt,name=ticket_code,json=ticketCode,proto3" json:"ticket_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketCustomFieldAuditLog) Reset() {
	*x = TicketCustomFieldAuditLog{}
	mi := &file_api_commons_tickets_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketCustomFieldAuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketCustomFieldAuditLog) ProtoMessage() {}

func (x *TicketCustomFieldAuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketCustomFieldAuditLog.ProtoReflect.Descriptor instead.
func (*TicketCustomFieldAuditLog) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{28}
}

func (x *TicketCustomFieldAuditLog) GetCustomFieldAttributes() []*CustomFieldAttribute {
	if x != nil {
		return x.CustomFieldAttributes
	}
	return nil
}

func (x *TicketCustomFieldAuditLog) GetTicketCode() string {
	if x != nil {
		return x.TicketCode
	}
	return ""
}

// CustomFieldAttribute - Represents a single edited attribute within a ticket's custom field.
type CustomFieldAttribute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the custom field.
	CustomFieldId int64 `protobuf:"varint,1,opt,name=custom_field_id,json=customFieldId,proto3" json:"custom_field_id,omitempty"`
	// The unique identifier of the custom field.
	CustomFieldType TicketCustomFieldType `protobuf:"varint,2,opt,name=custom_field_type,json=customFieldType,proto3,enum=api.commons.TicketCustomFieldType" json:"custom_field_type,omitempty"`
	// The new value of the attribute after editing - only for edit event.
	EditedValue string `protobuf:"bytes,3,opt,name=edited_value,json=editedValue,proto3" json:"edited_value,omitempty"`
	// The previous value of the attribute before editing - only for edit events.
	PreviousValue string `protobuf:"bytes,4,opt,name=previous_value,json=previousValue,proto3" json:"previous_value,omitempty"`
	// custom filed name -
	CustomFieldName string `protobuf:"bytes,5,opt,name=custom_field_name,json=customFieldName,proto3" json:"custom_field_name,omitempty"`
	// The status of field types
	TicketCustomFieldStatus TicketCustomFieldStatus `protobuf:"varint,6,opt,name=ticket_custom_field_status,json=ticketCustomFieldStatus,proto3,enum=api.commons.TicketCustomFieldStatus" json:"ticket_custom_field_status,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CustomFieldAttribute) Reset() {
	*x = CustomFieldAttribute{}
	mi := &file_api_commons_tickets_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomFieldAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomFieldAttribute) ProtoMessage() {}

func (x *CustomFieldAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_tickets_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomFieldAttribute.ProtoReflect.Descriptor instead.
func (*CustomFieldAttribute) Descriptor() ([]byte, []int) {
	return file_api_commons_tickets_proto_rawDescGZIP(), []int{29}
}

func (x *CustomFieldAttribute) GetCustomFieldId() int64 {
	if x != nil {
		return x.CustomFieldId
	}
	return 0
}

func (x *CustomFieldAttribute) GetCustomFieldType() TicketCustomFieldType {
	if x != nil {
		return x.CustomFieldType
	}
	return TicketCustomFieldType_TICKET_CUSTOMFIELD_TYPE_BOOLEAN
}

func (x *CustomFieldAttribute) GetEditedValue() string {
	if x != nil {
		return x.EditedValue
	}
	return ""
}

func (x *CustomFieldAttribute) GetPreviousValue() string {
	if x != nil {
		return x.PreviousValue
	}
	return ""
}

func (x *CustomFieldAttribute) GetCustomFieldName() string {
	if x != nil {
		return x.CustomFieldName
	}
	return ""
}

func (x *CustomFieldAttribute) GetTicketCustomFieldStatus() TicketCustomFieldStatus {
	if x != nil {
		return x.TicketCustomFieldStatus
	}
	return TicketCustomFieldStatus_Ticket_Custom_Field_Status_Added
}

var File_api_commons_tickets_proto protoreflect.FileDescriptor

const file_api_commons_tickets_proto_rawDesc = "" +
	"\n" +
	"\x19api/commons/tickets.proto\x12\vapi.commons\x1a\x1fgoogle/protobuf/timestamp.proto\"\x89\a\n" +
	"\x06Ticket\x12#\n" +
	"\n" +
	"ticket_sid\x18\x01 \x01(\x03B\x04\x18\x010\x01R\tticketSid\x12#\n" +
	"\vproject_sid\x18\x02 \x01(\x03B\x020\x01R\n" +
	"projectSid\x12#\n" +
	"\rproject_title\x18\x03 \x01(\tR\fprojectTitle\x12\x1f\n" +
	"\vticket_code\x18\x04 \x01(\tR\n" +
	"ticketCode\x12\x14\n" +
	"\x05title\x18\x05 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12\x15\n" +
	"\x06org_id\x18\a \x01(\tR\x05orgId\x12\"\n" +
	"\rcreated_by_id\x18\b \x01(\tR\vcreatedById\x12&\n" +
	"\x0fcreated_by_name\x18\t \x01(\tR\rcreatedByName\x12B\n" +
	"\x0fcreated_by_date\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\rcreatedByDate\x129\n" +
	"\bdue_date\x18\v \x01(\v2\x1a.google.protobuf.TimestampB\x02\x18\x01R\adueDate\x12'\n" +
	"\rassignee_list\x18\f \x01(\tB\x02\x18\x01R\fassigneeList\x121\n" +
	"\bmetadata\x18\x0e \x03(\v2\x15.api.commons.MetadataR\bmetadata\x12<\n" +
	"\rticket_skills\x18\x0f \x03(\v2\x13.api.commons.SkillsB\x02\x18\x01R\fticketSkills\x12\x16\n" +
	"\x06status\x18\x10 \x01(\x03R\x06status\x12/\n" +
	"\n" +
	"ticket_sla\x18\x11 \x03(\v2\x10.api.commons.SlaR\tticketSla\x12\x1a\n" +
	"\bassignee\x18\x12 \x01(\tR\bassignee\x12>\n" +
	"\rticket_action\x18\x13 \x03(\v2\x19.api.commons.TicketActionR\fticketAction\x12>\n" +
	"\rticket_status\x18\x14 \x01(\x0e2\x19.api.commons.TicketStatusR\fticketStatus\x12'\n" +
	"\x0fticket_assignee\x18\x15 \x03(\tR\x0eticketAssignee\x12-\n" +
	"\x12ticket_participant\x18\x16 \x03(\tR\x11ticketParticipant\"\xd9\x03\n" +
	"\x0eTicketTemplate\x120\n" +
	"\x12ticket_template_id\x18\x01 \x01(\x03B\x02\x18\x01R\x10ticketTemplateId\x12\x15\n" +
	"\x06org_id\x18\x02 \x01(\tR\x05orgId\x12\x1a\n" +
	"\btemplate\x18\x03 \x01(\tR\btemplate\x126\n" +
	"\x17template_entity_version\x18\x04 \x01(\tR\x15templateEntityVersion\x12#\n" +
	"\rtemplate_name\x18\x05 \x01(\tR\ftemplateName\x12\"\n" +
	"\rcreated_by_id\x18\x06 \x01(\tR\vcreatedById\x12\x1f\n" +
	"\vmodified_by\x18\a \x01(\tR\n" +
	"modifiedBy\x12=\n" +
	"\fcreated_date\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\vcreatedDate\x12?\n" +
	"\rmodified_date\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\fmodifiedDate\x12\x1b\n" +
	"\tis_active\x18\n" +
	" \x01(\bR\bisActive\x12#\n" +
	"\vtemplate_id\x18\v \x01(\x03B\x020\x01R\n" +
	"templateId\"\xaf\x01\n" +
	"\x15TicketProjectTemplate\x12D\n" +
	"\x0fticket_template\x18\x01 \x01(\v2\x1b.api.commons.TicketTemplateR\x0eticketTemplate\x12P\n" +
	"\x13project_description\x18\x02 \x03(\v2\x1f.api.commons.ProjectDescriptionR\x12projectDescription\"\\\n" +
	"\x12ProjectDescription\x12!\n" +
	"\n" +
	"project_id\x18\x01 \x01(\x03B\x020\x01R\tprojectId\x12#\n" +
	"\rproject_title\x18\x02 \x01(\tR\fprojectTitle\"\xb0\x03\n" +
	"\fListTemplate\x120\n" +
	"\x12ticket_template_id\x18\x01 \x01(\x03B\x020\x01R\x10ticketTemplateId\x12#\n" +
	"\rtemplate_name\x18\x02 \x01(\tR\ftemplateName\x12!\n" +
	"\n" +
	"project_id\x18\x03 \x01(\x03B\x020\x01R\tprojectId\x12\x1a\n" +
	"\btemplate\x18\x04 \x01(\tR\btemplate\x126\n" +
	"\x17template_entity_version\x18\x05 \x01(\tR\x15templateEntityVersion\x12\x1b\n" +
	"\tis_active\x18\x06 \x01(\bR\bisActive\x12\"\n" +
	"\rcreated_by_id\x18\a \x01(\tR\vcreatedById\x12=\n" +
	"\fcreated_date\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\vcreatedDate\x12#\n" +
	"\rproject_title\x18\t \x01(\tR\fprojectTitle\x12)\n" +
	"\x10assigned_project\x18\n" +
	" \x03(\x03R\x0fassignedProject:\x02\x18\x01\"p\n" +
	"\x15AssignProjectTemplate\x120\n" +
	"\x12ticket_template_id\x18\x01 \x03(\x03B\x020\x01R\x10ticketTemplateId\x12!\n" +
	"\n" +
	"project_id\x18\x02 \x01(\x03B\x020\x01R\tprojectId:\x02\x18\x01\"R\n" +
	"\bDuration\x12\x18\n" +
	"\x05value\x18\x01 \x01(\x03B\x020\x01R\x05value\x12,\n" +
	"\x05scale\x18\x02 \x01(\x0e2\x16.api.commons.TimeScaleR\x05scale\"\x81\x06\n" +
	"\fTicketAction\x12,\n" +
	"\x10ticket_action_id\x18\x01 \x01(\x03B\x020\x01R\x0eticketActionId\x12\x1f\n" +
	"\taction_id\x18\x02 \x01(\x03B\x020\x01R\bactionId\x12K\n" +
	"\x10callback_context\x18\x03 \x01(\v2\x1c.api.commons.CallbackContextB\x02\x18\x01R\x0fcallbackContext\x12!\n" +
	"\tticket_id\x18\x04 \x01(\x03B\x04\x18\x010\x01R\bticketId\x125\n" +
	"\bstart_ts\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\astartTs\x127\n" +
	"\texpiry_ts\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\bexpiryTs\x12\x14\n" +
	"\x05state\x18\b \x01(\x03R\x05state\x12#\n" +
	"\raction_skills\x18\t \x03(\tR\factionSkills\x124\n" +
	"\raction_sla_id\x18\n" +
	" \x03(\v2\x10.api.commons.SlaR\vactionSlaId\x12 \n" +
	"\fwork_done_by\x18\v \x01(\tR\n" +
	"workDoneBy\x12C\n" +
	"\rvoice_context\x18\f \x01(\v2\x1c.api.commons.CallbackContextH\x00R\fvoiceContext\x12>\n" +
	"\vsms_context\x18\r \x01(\v2\x1b.api.commons.SmsbackContextH\x00R\n" +
	"smsContext\x12D\n" +
	"\remail_context\x18\x0e \x01(\v2\x1d.api.commons.EmailbackContextH\x00R\femailContext\x128\n" +
	"\vaction_type\x18\x0f \x01(\v2\x17.api.commons.ActionTypeR\n" +
	"actionType\x12\x1f\n" +
	"\vticket_code\x18\x10 \x01(\tR\n" +
	"ticketCodeB\t\n" +
	"\acontext\"\xbd\x01\n" +
	"\x0fCallbackContext\x12\x1b\n" +
	"\tcaller_id\x18\x01 \x01(\tR\bcallerId\x12\x19\n" +
	"\bphone_no\x18\x02 \x01(\tR\aphoneNo\x12!\n" +
	"\fcountry_code\x18\x03 \x01(\tR\vcountryCode\x12\x1f\n" +
	"\vcaller_name\x18\x04 \x01(\tR\n" +
	"callerName\x12.\n" +
	"\x13caller_country_code\x18\x05 \x01(\tR\x11callerCountryCode\"\xb9\x01\n" +
	"\x0eSmsbackContext\x12!\n" +
	"\fcontact_name\x18\x01 \x01(\tR\vcontactName\x12\x15\n" +
	"\x06to_sms\x18\x02 \x01(\tR\x05toSms\x12\x19\n" +
	"\bfrom_sms\x18\x03 \x01(\tR\afromSms\x12&\n" +
	"\x0fto_country_code\x18\x04 \x01(\tR\rtoCountryCode\x12*\n" +
	"\x11from_country_code\x18\x05 \x01(\tR\x0ffromCountryCode\"W\n" +
	"\n" +
	"ActionType\x12(\n" +
	"\x0eaction_type_id\x18\x01 \x01(\x03B\x020\x01R\factionTypeId\x12\x1f\n" +
	"\vaction_name\x18\x02 \x01(\tR\n" +
	"actionName\"o\n" +
	"\x10EmailbackContext\x12!\n" +
	"\fcontact_name\x18\x01 \x01(\tR\vcontactName\x12\x19\n" +
	"\bto_email\x18\x02 \x01(\tR\atoEmail\x12\x1d\n" +
	"\n" +
	"from_email\x18\x03 \x01(\tR\tfromEmail\"4\n" +
	"\bMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"J\n" +
	"\x06Skills\x12\x19\n" +
	"\bskill_id\x18\x01 \x01(\tR\askillId\x12!\n" +
	"\fis_preferred\x18\x02 \x01(\bR\visPreferred:\x02\x18\x01\"\xa2\x01\n" +
	"\x03Sla\x12'\n" +
	"\rcondition_sid\x18\x01 \x01(\x03B\x020\x01R\fconditionSid\x12\x1b\n" +
	"\asla_sid\x18\x02 \x01(\x03B\x020\x01R\x06slaSid\x12\x1b\n" +
	"\asla_min\x18\x03 \x01(\x03B\x020\x01R\x06slaMin\x128\n" +
	"\fsla_duration\x18\x04 \x01(\v2\x15.api.commons.DurationR\vslaDuration\"\x9e\x02\n" +
	"\aComment\x12#\n" +
	"\vcomment_sid\x18\x01 \x01(\x03B\x020\x01R\n" +
	"commentSid\x12#\n" +
	"\n" +
	"ticket_sid\x18\x02 \x01(\x03B\x04\x18\x010\x01R\tticketSid\x12\x18\n" +
	"\acomment\x18\x03 \x01(\tR\acomment\x12\"\n" +
	"\rcreated_by_id\x18\x04 \x01(\tR\vcreatedById\x12&\n" +
	"\x0fcreated_by_name\x18\x05 \x01(\tR\rcreatedByName\x12B\n" +
	"\x0fcreated_by_date\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\rcreatedByDate\x12\x1f\n" +
	"\vticket_code\x18\a \x01(\tR\n" +
	"ticketCode\"\xca\x01\n" +
	"\vCloseTicket\x12#\n" +
	"\n" +
	"ticket_sid\x18\x01 \x01(\x03B\x04\x18\x010\x01R\tticketSid\x12\x16\n" +
	"\x06status\x18\x02 \x01(\x03R\x06status\x12\x18\n" +
	"\acomment\x18\x03 \x01(\tR\acomment\x12\x1f\n" +
	"\vfrom_status\x18\x04 \x01(\x03R\n" +
	"fromStatus\x12\"\n" +
	"\rcreated_by_id\x18\x05 \x01(\tR\vcreatedById\x12\x1f\n" +
	"\vticket_code\x18\x06 \x01(\tR\n" +
	"ticketCode\"*\n" +
	"\fConfirmClose\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x03R\x06status:\x02\x18\x01\"\xa7\x02\n" +
	"\rTicketProject\x12.\n" +
	"\x11ticket_project_id\x18\x01 \x01(\x03B\x020\x01R\x0fticketProjectId\x12\x15\n" +
	"\x06org_id\x18\x02 \x01(\tR\x05orgId\x12#\n" +
	"\vproject_sid\x18\x03 \x01(\x03B\x020\x01R\n" +
	"projectSid\x12!\n" +
	"\fproject_code\x18\x04 \x01(\tR\vprojectCode\x12#\n" +
	"\rproject_title\x18\x05 \x01(\tR\fprojectTitle\x12\x1b\n" +
	"\tis_active\x18\x06 \x01(\bR\bisActive\x12E\n" +
	"\rtemplate_desc\x18\a \x03(\v2 .api.commons.TemplateDescriptionR\ftemplateDesc\"l\n" +
	"\x13TemplateDescription\x120\n" +
	"\x12ticket_template_id\x18\x01 \x01(\x03B\x020\x01R\x10ticketTemplateId\x12#\n" +
	"\rtemplate_name\x18\x02 \x01(\tR\ftemplateName\"\xde\x01\n" +
	"\tTicketSla\x12\x1b\n" +
	"\asla_sid\x18\x01 \x01(\x03B\x020\x01R\x06slaSid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1a\n" +
	"\binterval\x18\x04 \x01(\x03R\binterval\x12\x1b\n" +
	"\tis_active\x18\x05 \x01(\x03R\bisActive\x12E\n" +
	"\x13ticket_sla_duration\x18\x06 \x01(\v2\x15.api.commons.DurationR\x11ticketSlaDuration\"m\n" +
	"\rSlaConditions\x12.\n" +
	"\x11sla_condition_sid\x18\x01 \x01(\x03B\x020\x01R\x0fslaConditionSid\x12,\n" +
	"\x12sla_condition_name\x18\x02 \x01(\tR\x10slaConditionName\"\xf7\x01\n" +
	"\fReplyComment\x12#\n" +
	"\vcomment_sid\x18\x01 \x01(\x03B\x020\x01R\n" +
	"commentSid\x12#\n" +
	"\n" +
	"ticket_sid\x18\x02 \x01(\x03B\x04\x18\x010\x01R\tticketSid\x12\x14\n" +
	"\x05reply\x18\x03 \x01(\tR\x05reply\x12\"\n" +
	"\rcreated_by_id\x18\x04 \x01(\tR\vcreatedById\x12B\n" +
	"\x0fcreated_by_date\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\rcreatedByDate\x12\x1f\n" +
	"\vticket_code\x18\x06 \x01(\tR\n" +
	"ticketCode\"8\n" +
	"\x13ConfirmReplyComment\x12!\n" +
	"\n" +
	"is_created\x18\x01 \x01(\bB\x02\x18\x01R\tisCreated\"\xc4\x02\n" +
	"\x0eTicketAuditLog\x128\n" +
	"\x19ticket_audit_event_log_id\x18\x01 \x01(\tR\x15ticketAuditEventLogId\x12\x15\n" +
	"\x06org_id\x18\x02 \x01(\tR\x05orgId\x12\x14\n" +
	"\x05event\x18\x03 \x01(\tR\x05event\x12#\n" +
	"\n" +
	"ticket_sid\x18\x04 \x01(\x03B\x04\x18\x010\x01R\tticketSid\x12\x1d\n" +
	"\n" +
	"event_type\x18\x05 \x01(\tR\teventType\x12\"\n" +
	"\rcreated_by_id\x18\x06 \x01(\tR\vcreatedById\x12B\n" +
	"\x0fcreated_by_date\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\rcreatedByDate\x12\x1f\n" +
	"\vticket_code\x18\b \x01(\tR\n" +
	"ticketCode\"\xbb\x01\n" +
	"\n" +
	"EditTicket\x12#\n" +
	"\n" +
	"ticket_sid\x18\x01 \x01(\x03B\x04\x18\x010\x01R\tticketSid\x129\n" +
	"\n" +
	"edit_value\x18\x02 \x01(\v2\x1a.api.commons.EditAttributeR\teditValue\x12\x1f\n" +
	"\vticket_code\x18\x03 \x01(\tR\n" +
	"ticketCode\x12,\n" +
	"\x10ticket_action_id\x18\x04 \x01(\x03B\x020\x01R\x0eticketActionId\"}\n" +
	"\rEditAttribute\x12\x1d\n" +
	"\bcol_desc\x18\x01 \x01(\x03B\x020\x01R\acolDesc\x12\x19\n" +
	"\bfrom_val\x18\x02 \x01(\tR\afromVal\x12\x15\n" +
	"\x06to_val\x18\x03 \x01(\tR\x05toVal\x12\x1b\n" +
	"\tis_edited\x18\x04 \x01(\bR\bisEdited\"\x82\x03\n" +
	"\vCustomField\x12,\n" +
	"\x10custom_field_sid\x18\x01 \x01(\x03B\x020\x01R\x0ecustomFieldSid\x12*\n" +
	"\x11custom_field_name\x18\x02 \x01(\tR\x0fcustomFieldName\x12,\n" +
	"\x12custom_field_value\x18\x03 \x01(\tR\x10customFieldValue\x12.\n" +
	"\x11custom_field_type\x18\x04 \x01(\tB\x02\x18\x01R\x0fcustomFieldType\x12?\n" +
	"\rdate_modified\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\fdateModified\x12\x1d\n" +
	"\n" +
	"is_deleted\x18\x06 \x01(\bR\tisDeleted\x12[\n" +
	"\x18ticket_custom_field_type\x18\b \x01(\x0e2\".api.commons.TicketCustomFieldTypeR\x15ticketCustomFieldType\"\x97\x01\n" +
	"\x19TicketCustomFieldAuditLog\x12Y\n" +
	"\x17custom_field_attributes\x18\x01 \x03(\v2!.api.commons.CustomFieldAttributeR\x15customFieldAttributes\x12\x1f\n" +
	"\vticket_code\x18\x02 \x01(\tR\n" +
	"ticketCode\"\xeb\x02\n" +
	"\x14CustomFieldAttribute\x12*\n" +
	"\x0fcustom_field_id\x18\x01 \x01(\x03B\x020\x01R\rcustomFieldId\x12N\n" +
	"\x11custom_field_type\x18\x02 \x01(\x0e2\".api.commons.TicketCustomFieldTypeR\x0fcustomFieldType\x12!\n" +
	"\fedited_value\x18\x03 \x01(\tR\veditedValue\x12%\n" +
	"\x0eprevious_value\x18\x04 \x01(\tR\rpreviousValue\x12*\n" +
	"\x11custom_field_name\x18\x05 \x01(\tR\x0fcustomFieldName\x12a\n" +
	"\x1aticket_custom_field_status\x18\x06 \x01(\x0e2$.api.commons.TicketCustomFieldStatusR\x17ticketCustomFieldStatus*\x8b\x01\n" +
	"\tTimeScale\x12\x15\n" +
	"\x11TIME_SCALE_MINUTE\x10\x00\x12\x13\n" +
	"\x0fTIME_SCALE_HOUR\x10\x01\x12\x12\n" +
	"\x0eTIME_SCALE_DAY\x10\x02\x12\x13\n" +
	"\x0fTIME_SCALE_WEEK\x10\x03\x12\x14\n" +
	"\x10TIME_SCALE_MONTH\x10\x04\x12\x13\n" +
	"\x0fTIME_SCALE_YEAR\x10\x05*V\n" +
	"\fTicketStatus\x12\x15\n" +
	"\x11TICKET_STATUS_NEW\x10\x00\x12\x16\n" +
	"\x12TICKET_STATUS_OPEN\x10\x01\x12\x17\n" +
	"\x13TICKET_STATUS_CLOSE\x10\x02*?\n" +
	"\x0fPhoneNumberType\x12\n" +
	"\n" +
	"\x06MOBILE\x10\x00\x12\t\n" +
	"\x05OTHER\x10\x01\x12\x11\n" +
	"\rINVALID_ERROR\x10\x02\x1a\x02\x18\x01*\xfd\x01\n" +
	"\x15TicketCustomFieldType\x12#\n" +
	"\x1fTICKET_CUSTOMFIELD_TYPE_BOOLEAN\x10\x00\x12\"\n" +
	"\x1eTICKET_CUSTOMFIELD_TYPE_STRING\x10\x01\x12\"\n" +
	"\x1eTICKET_CUSTOMFIELD_TYPE_NUMBER\x10\x02\x12$\n" +
	" TICKET_CUSTOMFIELD_TYPE_DATETIME\x10\x03\x12'\n" +
	"#TICKET_CUSTOMFIELD_TYPE_MULTISELECT\x10\x04\x12(\n" +
	"$TICKET_CUSTOMFIELD_TYPE_SINGLESELECT\x10\x05*\x8f\x01\n" +
	"\x17TicketCustomFieldStatus\x12$\n" +
	" Ticket_Custom_Field_Status_Added\x10\x00\x12&\n" +
	"\"Ticket_Custom_Field_Status_Updated\x10\x01\x12&\n" +
	"\"Ticket_Custom_Field_Status_Deleted\x10\x02B\x94\x01\n" +
	"\x0fcom.api.commonsB\fTicketsProtoP\x01Z&github.com/tcncloud/api-go/api/commons\xa2\x02\x03ACX\xaa\x02\vApi.Commons\xca\x02\vApi\\Commons\xe2\x02\x17Api\\Commons\\GPBMetadata\xea\x02\fApi::Commonsb\x06proto3"

var (
	file_api_commons_tickets_proto_rawDescOnce sync.Once
	file_api_commons_tickets_proto_rawDescData []byte
)

func file_api_commons_tickets_proto_rawDescGZIP() []byte {
	file_api_commons_tickets_proto_rawDescOnce.Do(func() {
		file_api_commons_tickets_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_commons_tickets_proto_rawDesc), len(file_api_commons_tickets_proto_rawDesc)))
	})
	return file_api_commons_tickets_proto_rawDescData
}

var file_api_commons_tickets_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_api_commons_tickets_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_api_commons_tickets_proto_goTypes = []any{
	(TimeScale)(0),                    // 0: api.commons.TimeScale
	(TicketStatus)(0),                 // 1: api.commons.TicketStatus
	(PhoneNumberType)(0),              // 2: api.commons.PhoneNumberType
	(TicketCustomFieldType)(0),        // 3: api.commons.TicketCustomFieldType
	(TicketCustomFieldStatus)(0),      // 4: api.commons.TicketCustomFieldStatus
	(*Ticket)(nil),                    // 5: api.commons.Ticket
	(*TicketTemplate)(nil),            // 6: api.commons.TicketTemplate
	(*TicketProjectTemplate)(nil),     // 7: api.commons.TicketProjectTemplate
	(*ProjectDescription)(nil),        // 8: api.commons.ProjectDescription
	(*ListTemplate)(nil),              // 9: api.commons.ListTemplate
	(*AssignProjectTemplate)(nil),     // 10: api.commons.AssignProjectTemplate
	(*Duration)(nil),                  // 11: api.commons.Duration
	(*TicketAction)(nil),              // 12: api.commons.TicketAction
	(*CallbackContext)(nil),           // 13: api.commons.CallbackContext
	(*SmsbackContext)(nil),            // 14: api.commons.SmsbackContext
	(*ActionType)(nil),                // 15: api.commons.ActionType
	(*EmailbackContext)(nil),          // 16: api.commons.EmailbackContext
	(*Metadata)(nil),                  // 17: api.commons.Metadata
	(*Skills)(nil),                    // 18: api.commons.Skills
	(*Sla)(nil),                       // 19: api.commons.Sla
	(*Comment)(nil),                   // 20: api.commons.Comment
	(*CloseTicket)(nil),               // 21: api.commons.CloseTicket
	(*ConfirmClose)(nil),              // 22: api.commons.ConfirmClose
	(*TicketProject)(nil),             // 23: api.commons.TicketProject
	(*TemplateDescription)(nil),       // 24: api.commons.TemplateDescription
	(*TicketSla)(nil),                 // 25: api.commons.TicketSla
	(*SlaConditions)(nil),             // 26: api.commons.SlaConditions
	(*ReplyComment)(nil),              // 27: api.commons.ReplyComment
	(*ConfirmReplyComment)(nil),       // 28: api.commons.ConfirmReplyComment
	(*TicketAuditLog)(nil),            // 29: api.commons.TicketAuditLog
	(*EditTicket)(nil),                // 30: api.commons.EditTicket
	(*EditAttribute)(nil),             // 31: api.commons.EditAttribute
	(*CustomField)(nil),               // 32: api.commons.CustomField
	(*TicketCustomFieldAuditLog)(nil), // 33: api.commons.TicketCustomFieldAuditLog
	(*CustomFieldAttribute)(nil),      // 34: api.commons.CustomFieldAttribute
	(*timestamppb.Timestamp)(nil),     // 35: google.protobuf.Timestamp
}
var file_api_commons_tickets_proto_depIdxs = []int32{
	35, // 0: api.commons.Ticket.created_by_date:type_name -> google.protobuf.Timestamp
	35, // 1: api.commons.Ticket.due_date:type_name -> google.protobuf.Timestamp
	17, // 2: api.commons.Ticket.metadata:type_name -> api.commons.Metadata
	18, // 3: api.commons.Ticket.ticket_skills:type_name -> api.commons.Skills
	19, // 4: api.commons.Ticket.ticket_sla:type_name -> api.commons.Sla
	12, // 5: api.commons.Ticket.ticket_action:type_name -> api.commons.TicketAction
	1,  // 6: api.commons.Ticket.ticket_status:type_name -> api.commons.TicketStatus
	35, // 7: api.commons.TicketTemplate.created_date:type_name -> google.protobuf.Timestamp
	35, // 8: api.commons.TicketTemplate.modified_date:type_name -> google.protobuf.Timestamp
	6,  // 9: api.commons.TicketProjectTemplate.ticket_template:type_name -> api.commons.TicketTemplate
	8,  // 10: api.commons.TicketProjectTemplate.project_description:type_name -> api.commons.ProjectDescription
	35, // 11: api.commons.ListTemplate.created_date:type_name -> google.protobuf.Timestamp
	0,  // 12: api.commons.Duration.scale:type_name -> api.commons.TimeScale
	13, // 13: api.commons.TicketAction.callback_context:type_name -> api.commons.CallbackContext
	35, // 14: api.commons.TicketAction.start_ts:type_name -> google.protobuf.Timestamp
	35, // 15: api.commons.TicketAction.expiry_ts:type_name -> google.protobuf.Timestamp
	19, // 16: api.commons.TicketAction.action_sla_id:type_name -> api.commons.Sla
	13, // 17: api.commons.TicketAction.voice_context:type_name -> api.commons.CallbackContext
	14, // 18: api.commons.TicketAction.sms_context:type_name -> api.commons.SmsbackContext
	16, // 19: api.commons.TicketAction.email_context:type_name -> api.commons.EmailbackContext
	15, // 20: api.commons.TicketAction.action_type:type_name -> api.commons.ActionType
	11, // 21: api.commons.Sla.sla_duration:type_name -> api.commons.Duration
	35, // 22: api.commons.Comment.created_by_date:type_name -> google.protobuf.Timestamp
	24, // 23: api.commons.TicketProject.template_desc:type_name -> api.commons.TemplateDescription
	11, // 24: api.commons.TicketSla.ticket_sla_duration:type_name -> api.commons.Duration
	35, // 25: api.commons.ReplyComment.created_by_date:type_name -> google.protobuf.Timestamp
	35, // 26: api.commons.TicketAuditLog.created_by_date:type_name -> google.protobuf.Timestamp
	31, // 27: api.commons.EditTicket.edit_value:type_name -> api.commons.EditAttribute
	35, // 28: api.commons.CustomField.date_modified:type_name -> google.protobuf.Timestamp
	3,  // 29: api.commons.CustomField.ticket_custom_field_type:type_name -> api.commons.TicketCustomFieldType
	34, // 30: api.commons.TicketCustomFieldAuditLog.custom_field_attributes:type_name -> api.commons.CustomFieldAttribute
	3,  // 31: api.commons.CustomFieldAttribute.custom_field_type:type_name -> api.commons.TicketCustomFieldType
	4,  // 32: api.commons.CustomFieldAttribute.ticket_custom_field_status:type_name -> api.commons.TicketCustomFieldStatus
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_api_commons_tickets_proto_init() }
func file_api_commons_tickets_proto_init() {
	if File_api_commons_tickets_proto != nil {
		return
	}
	file_api_commons_tickets_proto_msgTypes[7].OneofWrappers = []any{
		(*TicketAction_VoiceContext)(nil),
		(*TicketAction_SmsContext)(nil),
		(*TicketAction_EmailContext)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_commons_tickets_proto_rawDesc), len(file_api_commons_tickets_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_tickets_proto_goTypes,
		DependencyIndexes: file_api_commons_tickets_proto_depIdxs,
		EnumInfos:         file_api_commons_tickets_proto_enumTypes,
		MessageInfos:      file_api_commons_tickets_proto_msgTypes,
	}.Build()
	File_api_commons_tickets_proto = out.File
	file_api_commons_tickets_proto_goTypes = nil
	file_api_commons_tickets_proto_depIdxs = nil
}
