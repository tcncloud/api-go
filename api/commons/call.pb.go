// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/commons/call.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CallStatus int32

const (
	CallStatus_CALL_UNKNOWN   CallStatus = 0
	CallStatus_CALL_SCHEDULED CallStatus = 3100 // "CALL_SCHEDULED", "Call is currently waiting for scheduler"),
	CallStatus_CALL_RUNNING   CallStatus = 3200 // "CALL_RUNNING", "Call is currently being executed"),
	CallStatus_CALL_COMPLETED CallStatus = 3300 // "CALL_COMPLTED", "Call has been executed"),
)

// Enum value maps for CallStatus.
var (
	CallStatus_name = map[int32]string{
		0:    "CALL_UNKNOWN",
		3100: "CALL_SCHEDULED",
		3200: "CALL_RUNNING",
		3300: "CALL_COMPLETED",
	}
	CallStatus_value = map[string]int32{
		"CALL_UNKNOWN":   0,
		"CALL_SCHEDULED": 3100,
		"CALL_RUNNING":   3200,
		"CALL_COMPLETED": 3300,
	}
)

func (x CallStatus) Enum() *CallStatus {
	p := new(CallStatus)
	*p = x
	return p
}

func (x CallStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_call_proto_enumTypes[0].Descriptor()
}

func (CallStatus) Type() protoreflect.EnumType {
	return &file_api_commons_call_proto_enumTypes[0]
}

func (x CallStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallStatus.Descriptor instead.
func (CallStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_call_proto_rawDescGZIP(), []int{0}
}

type SimpleCallData struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TaskSid           int64                  `protobuf:"varint,1,opt,name=task_sid,json=taskSid,proto3" json:"task_sid,omitempty"`
	CallSid           int64                  `protobuf:"varint,2,opt,name=call_sid,json=callSid,proto3" json:"call_sid,omitempty"`
	TaskGroupSid      int64                  `protobuf:"varint,3,opt,name=task_group_sid,json=taskGroupSid,proto3" json:"task_group_sid,omitempty"`
	ClientSid         int64                  `protobuf:"varint,4,opt,name=client_sid,json=clientSid,proto3" json:"client_sid,omitempty"`
	CountrySid        int64                  `protobuf:"varint,5,opt,name=country_sid,json=countrySid,proto3" json:"country_sid,omitempty"`
	AgentSid          int64                  `protobuf:"varint,6,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	StartTime         int64                  `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	CallerId          string                 `protobuf:"bytes,8,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	PhoneNumber       string                 `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CountryCode       string                 `protobuf:"bytes,10,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	DeliveryDuration  int32                  `protobuf:"varint,11,opt,name=delivery_duration,json=deliveryDuration,proto3" json:"delivery_duration,omitempty"`
	LinkCallDuration  int32                  `protobuf:"varint,12,opt,name=link_call_duration,json=linkCallDuration,proto3" json:"link_call_duration,omitempty"`
	Result            CallResult             `protobuf:"varint,13,opt,name=result,proto3,enum=api.commons.CallResult" json:"result,omitempty"`
	SipCode           int32                  `protobuf:"varint,14,opt,name=sip_code,json=sipCode,proto3" json:"sip_code,omitempty"`
	DoRecord          bool                   `protobuf:"varint,15,opt,name=do_record,json=doRecord,proto3" json:"do_record,omitempty"`
	RecordingFileName string                 `protobuf:"bytes,16,opt,name=recording_file_name,json=recordingFileName,proto3" json:"recording_file_name,omitempty"`
	// WARNING: don't delete these fields randomly, the frontend checks the inverse
	// so reserved fields will trigger a false positive for the scrub. Most likely you
	// will need to hardcode the value to True in matrix-api (like custom calling rules)
	IsDialValidationOk          bool              `protobuf:"varint,17,opt,name=is_dial_validation_ok,json=isDialValidationOk,proto3" json:"is_dial_validation_ok,omitempty"`
	IsTimeZoneScrubOk           bool              `protobuf:"varint,18,opt,name=is_time_zone_scrub_ok,json=isTimeZoneScrubOk,proto3" json:"is_time_zone_scrub_ok,omitempty"`
	IsCellPhoneScrubOk          bool              `protobuf:"varint,19,opt,name=is_cell_phone_scrub_ok,json=isCellPhoneScrubOk,proto3" json:"is_cell_phone_scrub_ok,omitempty"`
	IsCustomCallingRulesScrubOk bool              `protobuf:"varint,20,opt,name=is_custom_calling_rules_scrub_ok,json=isCustomCallingRulesScrubOk,proto3" json:"is_custom_calling_rules_scrub_ok,omitempty"`
	IsDnclScrubOk               bool              `protobuf:"varint,21,opt,name=is_dncl_scrub_ok,json=isDnclScrubOk,proto3" json:"is_dncl_scrub_ok,omitempty"`
	UseGlobalTimeZoneScrub      bool              `protobuf:"varint,22,opt,name=use_global_time_zone_scrub,json=useGlobalTimeZoneScrub,proto3" json:"use_global_time_zone_scrub,omitempty"`
	DoCellPhoneScrub            bool              `protobuf:"varint,23,opt,name=do_cell_phone_scrub,json=doCellPhoneScrub,proto3" json:"do_cell_phone_scrub,omitempty"`
	DoDnclScrub                 bool              `protobuf:"varint,25,opt,name=do_dncl_scrub,json=doDnclScrub,proto3" json:"do_dncl_scrub,omitempty"`
	CallDataType                string            `protobuf:"bytes,26,opt,name=call_data_type,json=callDataType,proto3" json:"call_data_type,omitempty"`
	CallerIdCountryCode         string            `protobuf:"bytes,28,opt,name=caller_id_country_code,json=callerIdCountryCode,proto3" json:"caller_id_country_code,omitempty"`
	CallerIdCountrySid          int64             `protobuf:"varint,29,opt,name=caller_id_country_sid,json=callerIdCountrySid,proto3" json:"caller_id_country_sid,omitempty"`
	ZipCode                     string            `protobuf:"bytes,30,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
	IsPreviewByRecord           bool              `protobuf:"varint,31,opt,name=is_preview_by_record,json=isPreviewByRecord,proto3" json:"is_preview_by_record,omitempty"`
	RuleSetName                 string            `protobuf:"bytes,32,opt,name=rule_set_name,json=ruleSetName,proto3" json:"rule_set_name,omitempty"`
	IsNaturalComplianceOk       bool              `protobuf:"varint,33,opt,name=is_natural_compliance_ok,json=isNaturalComplianceOk,proto3" json:"is_natural_compliance_ok,omitempty"`
	SimpleMetaData              []*SimpleKeyValue `protobuf:"bytes,34,rep,name=simple_meta_data,json=simpleMetaData,proto3" json:"simple_meta_data,omitempty"`
	SimpleResultMetaData        []*SimpleKeyValue `protobuf:"bytes,35,rep,name=simple_result_meta_data,json=simpleResultMetaData,proto3" json:"simple_result_meta_data,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *SimpleCallData) Reset() {
	*x = SimpleCallData{}
	mi := &file_api_commons_call_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleCallData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleCallData) ProtoMessage() {}

func (x *SimpleCallData) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_call_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleCallData.ProtoReflect.Descriptor instead.
func (*SimpleCallData) Descriptor() ([]byte, []int) {
	return file_api_commons_call_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleCallData) GetTaskSid() int64 {
	if x != nil {
		return x.TaskSid
	}
	return 0
}

func (x *SimpleCallData) GetCallSid() int64 {
	if x != nil {
		return x.CallSid
	}
	return 0
}

func (x *SimpleCallData) GetTaskGroupSid() int64 {
	if x != nil {
		return x.TaskGroupSid
	}
	return 0
}

func (x *SimpleCallData) GetClientSid() int64 {
	if x != nil {
		return x.ClientSid
	}
	return 0
}

func (x *SimpleCallData) GetCountrySid() int64 {
	if x != nil {
		return x.CountrySid
	}
	return 0
}

func (x *SimpleCallData) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *SimpleCallData) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SimpleCallData) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *SimpleCallData) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SimpleCallData) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SimpleCallData) GetDeliveryDuration() int32 {
	if x != nil {
		return x.DeliveryDuration
	}
	return 0
}

func (x *SimpleCallData) GetLinkCallDuration() int32 {
	if x != nil {
		return x.LinkCallDuration
	}
	return 0
}

func (x *SimpleCallData) GetResult() CallResult {
	if x != nil {
		return x.Result
	}
	return CallResult_CALL_RESULT_UNKNOWN
}

func (x *SimpleCallData) GetSipCode() int32 {
	if x != nil {
		return x.SipCode
	}
	return 0
}

func (x *SimpleCallData) GetDoRecord() bool {
	if x != nil {
		return x.DoRecord
	}
	return false
}

func (x *SimpleCallData) GetRecordingFileName() string {
	if x != nil {
		return x.RecordingFileName
	}
	return ""
}

func (x *SimpleCallData) GetIsDialValidationOk() bool {
	if x != nil {
		return x.IsDialValidationOk
	}
	return false
}

func (x *SimpleCallData) GetIsTimeZoneScrubOk() bool {
	if x != nil {
		return x.IsTimeZoneScrubOk
	}
	return false
}

func (x *SimpleCallData) GetIsCellPhoneScrubOk() bool {
	if x != nil {
		return x.IsCellPhoneScrubOk
	}
	return false
}

func (x *SimpleCallData) GetIsCustomCallingRulesScrubOk() bool {
	if x != nil {
		return x.IsCustomCallingRulesScrubOk
	}
	return false
}

func (x *SimpleCallData) GetIsDnclScrubOk() bool {
	if x != nil {
		return x.IsDnclScrubOk
	}
	return false
}

func (x *SimpleCallData) GetUseGlobalTimeZoneScrub() bool {
	if x != nil {
		return x.UseGlobalTimeZoneScrub
	}
	return false
}

func (x *SimpleCallData) GetDoCellPhoneScrub() bool {
	if x != nil {
		return x.DoCellPhoneScrub
	}
	return false
}

func (x *SimpleCallData) GetDoDnclScrub() bool {
	if x != nil {
		return x.DoDnclScrub
	}
	return false
}

func (x *SimpleCallData) GetCallDataType() string {
	if x != nil {
		return x.CallDataType
	}
	return ""
}

func (x *SimpleCallData) GetCallerIdCountryCode() string {
	if x != nil {
		return x.CallerIdCountryCode
	}
	return ""
}

func (x *SimpleCallData) GetCallerIdCountrySid() int64 {
	if x != nil {
		return x.CallerIdCountrySid
	}
	return 0
}

func (x *SimpleCallData) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *SimpleCallData) GetIsPreviewByRecord() bool {
	if x != nil {
		return x.IsPreviewByRecord
	}
	return false
}

func (x *SimpleCallData) GetRuleSetName() string {
	if x != nil {
		return x.RuleSetName
	}
	return ""
}

func (x *SimpleCallData) GetIsNaturalComplianceOk() bool {
	if x != nil {
		return x.IsNaturalComplianceOk
	}
	return false
}

func (x *SimpleCallData) GetSimpleMetaData() []*SimpleKeyValue {
	if x != nil {
		return x.SimpleMetaData
	}
	return nil
}

func (x *SimpleCallData) GetSimpleResultMetaData() []*SimpleKeyValue {
	if x != nil {
		return x.SimpleResultMetaData
	}
	return nil
}

type SimpleKeyValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleKeyValue) Reset() {
	*x = SimpleKeyValue{}
	mi := &file_api_commons_call_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleKeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleKeyValue) ProtoMessage() {}

func (x *SimpleKeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_call_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleKeyValue.ProtoReflect.Descriptor instead.
func (*SimpleKeyValue) Descriptor() ([]byte, []int) {
	return file_api_commons_call_proto_rawDescGZIP(), []int{1}
}

func (x *SimpleKeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SimpleKeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SimpleRecordData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskSid       int64                  `protobuf:"varint,1,opt,name=task_sid,json=taskSid,proto3" json:"task_sid,omitempty"`
	TaskGroupSid  int64                  `protobuf:"varint,2,opt,name=task_group_sid,json=taskGroupSid,proto3" json:"task_group_sid,omitempty"`
	AgentSid      int64                  `protobuf:"varint,3,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StopTime      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleRecordData) Reset() {
	*x = SimpleRecordData{}
	mi := &file_api_commons_call_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleRecordData) ProtoMessage() {}

func (x *SimpleRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_call_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleRecordData.ProtoReflect.Descriptor instead.
func (*SimpleRecordData) Descriptor() ([]byte, []int) {
	return file_api_commons_call_proto_rawDescGZIP(), []int{2}
}

func (x *SimpleRecordData) GetTaskSid() int64 {
	if x != nil {
		return x.TaskSid
	}
	return 0
}

func (x *SimpleRecordData) GetTaskGroupSid() int64 {
	if x != nil {
		return x.TaskGroupSid
	}
	return 0
}

func (x *SimpleRecordData) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *SimpleRecordData) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SimpleRecordData) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

var File_api_commons_call_proto protoreflect.FileDescriptor

const file_api_commons_call_proto_rawDesc = "" +
	"\n" +
	"\x16api/commons/call.proto\x12\vapi.commons\x1a\x19api/commons/results.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xb5\v\n" +
	"\x0eSimpleCallData\x12\x19\n" +
	"\btask_sid\x18\x01 \x01(\x03R\ataskSid\x12\x19\n" +
	"\bcall_sid\x18\x02 \x01(\x03R\acallSid\x12$\n" +
	"\x0etask_group_sid\x18\x03 \x01(\x03R\ftaskGroupSid\x12\x1d\n" +
	"\n" +
	"client_sid\x18\x04 \x01(\x03R\tclientSid\x12\x1f\n" +
	"\vcountry_sid\x18\x05 \x01(\x03R\n" +
	"countrySid\x12\x1b\n" +
	"\tagent_sid\x18\x06 \x01(\x03R\bagentSid\x12\x1d\n" +
	"\n" +
	"start_time\x18\a \x01(\x03R\tstartTime\x12\x1b\n" +
	"\tcaller_id\x18\b \x01(\tR\bcallerId\x12!\n" +
	"\fphone_number\x18\t \x01(\tR\vphoneNumber\x12!\n" +
	"\fcountry_code\x18\n" +
	" \x01(\tR\vcountryCode\x12+\n" +
	"\x11delivery_duration\x18\v \x01(\x05R\x10deliveryDuration\x12,\n" +
	"\x12link_call_duration\x18\f \x01(\x05R\x10linkCallDuration\x12/\n" +
	"\x06result\x18\r \x01(\x0e2\x17.api.commons.CallResultR\x06result\x12\x19\n" +
	"\bsip_code\x18\x0e \x01(\x05R\asipCode\x12\x1b\n" +
	"\tdo_record\x18\x0f \x01(\bR\bdoRecord\x12.\n" +
	"\x13recording_file_name\x18\x10 \x01(\tR\x11recordingFileName\x121\n" +
	"\x15is_dial_validation_ok\x18\x11 \x01(\bR\x12isDialValidationOk\x120\n" +
	"\x15is_time_zone_scrub_ok\x18\x12 \x01(\bR\x11isTimeZoneScrubOk\x122\n" +
	"\x16is_cell_phone_scrub_ok\x18\x13 \x01(\bR\x12isCellPhoneScrubOk\x12E\n" +
	" is_custom_calling_rules_scrub_ok\x18\x14 \x01(\bR\x1bisCustomCallingRulesScrubOk\x12'\n" +
	"\x10is_dncl_scrub_ok\x18\x15 \x01(\bR\risDnclScrubOk\x12:\n" +
	"\x1ause_global_time_zone_scrub\x18\x16 \x01(\bR\x16useGlobalTimeZoneScrub\x12-\n" +
	"\x13do_cell_phone_scrub\x18\x17 \x01(\bR\x10doCellPhoneScrub\x12\"\n" +
	"\rdo_dncl_scrub\x18\x19 \x01(\bR\vdoDnclScrub\x12$\n" +
	"\x0ecall_data_type\x18\x1a \x01(\tR\fcallDataType\x123\n" +
	"\x16caller_id_country_code\x18\x1c \x01(\tR\x13callerIdCountryCode\x121\n" +
	"\x15caller_id_country_sid\x18\x1d \x01(\x03R\x12callerIdCountrySid\x12\x19\n" +
	"\bzip_code\x18\x1e \x01(\tR\azipCode\x12/\n" +
	"\x14is_preview_by_record\x18\x1f \x01(\bR\x11isPreviewByRecord\x12\"\n" +
	"\rrule_set_name\x18  \x01(\tR\vruleSetName\x127\n" +
	"\x18is_natural_compliance_ok\x18! \x01(\bR\x15isNaturalComplianceOk\x12E\n" +
	"\x10simple_meta_data\x18\" \x03(\v2\x1b.api.commons.SimpleKeyValueR\x0esimpleMetaData\x12R\n" +
	"\x17simple_result_meta_data\x18# \x03(\v2\x1b.api.commons.SimpleKeyValueR\x14simpleResultMetaDataJ\x04\b\x18\x10\x19J\x04\b\x1b\x10\x1c\"8\n" +
	"\x0eSimpleKeyValue\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\xe4\x01\n" +
	"\x10SimpleRecordData\x12\x19\n" +
	"\btask_sid\x18\x01 \x01(\x03R\ataskSid\x12$\n" +
	"\x0etask_group_sid\x18\x02 \x01(\x03R\ftaskGroupSid\x12\x1b\n" +
	"\tagent_sid\x18\x03 \x01(\x03R\bagentSid\x129\n" +
	"\n" +
	"start_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x127\n" +
	"\tstop_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\bstopTime*[\n" +
	"\n" +
	"CallStatus\x12\x10\n" +
	"\fCALL_UNKNOWN\x10\x00\x12\x13\n" +
	"\x0eCALL_SCHEDULED\x10\x9c\x18\x12\x11\n" +
	"\fCALL_RUNNING\x10\x80\x19\x12\x13\n" +
	"\x0eCALL_COMPLETED\x10\xe4\x19B\x91\x01\n" +
	"\x0fcom.api.commonsB\tCallProtoP\x01Z&github.com/tcncloud/api-go/api/commons\xa2\x02\x03ACX\xaa\x02\vApi.Commons\xca\x02\vApi\\Commons\xe2\x02\x17Api\\Commons\\GPBMetadata\xea\x02\fApi::Commonsb\x06proto3"

var (
	file_api_commons_call_proto_rawDescOnce sync.Once
	file_api_commons_call_proto_rawDescData []byte
)

func file_api_commons_call_proto_rawDescGZIP() []byte {
	file_api_commons_call_proto_rawDescOnce.Do(func() {
		file_api_commons_call_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_commons_call_proto_rawDesc), len(file_api_commons_call_proto_rawDesc)))
	})
	return file_api_commons_call_proto_rawDescData
}

var file_api_commons_call_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_commons_call_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_commons_call_proto_goTypes = []any{
	(CallStatus)(0),               // 0: api.commons.CallStatus
	(*SimpleCallData)(nil),        // 1: api.commons.SimpleCallData
	(*SimpleKeyValue)(nil),        // 2: api.commons.SimpleKeyValue
	(*SimpleRecordData)(nil),      // 3: api.commons.SimpleRecordData
	(CallResult)(0),               // 4: api.commons.CallResult
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_api_commons_call_proto_depIdxs = []int32{
	4, // 0: api.commons.SimpleCallData.result:type_name -> api.commons.CallResult
	2, // 1: api.commons.SimpleCallData.simple_meta_data:type_name -> api.commons.SimpleKeyValue
	2, // 2: api.commons.SimpleCallData.simple_result_meta_data:type_name -> api.commons.SimpleKeyValue
	5, // 3: api.commons.SimpleRecordData.start_time:type_name -> google.protobuf.Timestamp
	5, // 4: api.commons.SimpleRecordData.stop_time:type_name -> google.protobuf.Timestamp
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_api_commons_call_proto_init() }
func file_api_commons_call_proto_init() {
	if File_api_commons_call_proto != nil {
		return
	}
	file_api_commons_results_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_commons_call_proto_rawDesc), len(file_api_commons_call_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_call_proto_goTypes,
		DependencyIndexes: file_api_commons_call_proto_depIdxs,
		EnumInfos:         file_api_commons_call_proto_enumTypes,
		MessageInfos:      file_api_commons_call_proto_msgTypes,
	}.Build()
	File_api_commons_call_proto = out.File
	file_api_commons_call_proto_goTypes = nil
	file_api_commons_call_proto_depIdxs = nil
}
