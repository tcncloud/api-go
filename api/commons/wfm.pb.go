// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: api/commons/wfm.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum representing the different types of models for the regression forecaster.
type RegressionForecasterModelTypes int32

const (
	RegressionForecasterModelTypes_RANDOM_FOREST     RegressionForecasterModelTypes = 0
	RegressionForecasterModelTypes_ADABOOST          RegressionForecasterModelTypes = 1
	RegressionForecasterModelTypes_GRADIENT_BOOSTING RegressionForecasterModelTypes = 2
	RegressionForecasterModelTypes_LINEAR_REGRESSION RegressionForecasterModelTypes = 3
	RegressionForecasterModelTypes_LINEAR_AVG        RegressionForecasterModelTypes = 4
	RegressionForecasterModelTypes_SEGMENTED_LINEAR  RegressionForecasterModelTypes = 5
	RegressionForecasterModelTypes_MLP               RegressionForecasterModelTypes = 6
	RegressionForecasterModelTypes_AUTO              RegressionForecasterModelTypes = 7
)

// Enum value maps for RegressionForecasterModelTypes.
var (
	RegressionForecasterModelTypes_name = map[int32]string{
		0: "RANDOM_FOREST",
		1: "ADABOOST",
		2: "GRADIENT_BOOSTING",
		3: "LINEAR_REGRESSION",
		4: "LINEAR_AVG",
		5: "SEGMENTED_LINEAR",
		6: "MLP",
		7: "AUTO",
	}
	RegressionForecasterModelTypes_value = map[string]int32{
		"RANDOM_FOREST":     0,
		"ADABOOST":          1,
		"GRADIENT_BOOSTING": 2,
		"LINEAR_REGRESSION": 3,
		"LINEAR_AVG":        4,
		"SEGMENTED_LINEAR":  5,
		"MLP":               6,
		"AUTO":              7,
	}
)

func (x RegressionForecasterModelTypes) Enum() *RegressionForecasterModelTypes {
	p := new(RegressionForecasterModelTypes)
	*p = x
	return p
}

func (x RegressionForecasterModelTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegressionForecasterModelTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[0].Descriptor()
}

func (RegressionForecasterModelTypes) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[0]
}

func (x RegressionForecasterModelTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegressionForecasterModelTypes.Descriptor instead.
func (RegressionForecasterModelTypes) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{0}
}

type RegressionForecasterAvgsProcessingType int32

const (
	// a complete forecast is built for each skill profile for ACW/ASA/AHT/ATAB
	RegressionForecasterAvgsProcessingType_FORECAST RegressionForecasterAvgsProcessingType = 0
	// an average from the training data is built for each skill profile for ACW/ASA/AHT/ATAB
	RegressionForecasterAvgsProcessingType_AVERAGES RegressionForecasterAvgsProcessingType = 1
	// Fixed values are used for  ACW/ASA/AHT/ATAB
	RegressionForecasterAvgsProcessingType_FIXED_AVERAGES RegressionForecasterAvgsProcessingType = 2
)

// Enum value maps for RegressionForecasterAvgsProcessingType.
var (
	RegressionForecasterAvgsProcessingType_name = map[int32]string{
		0: "FORECAST",
		1: "AVERAGES",
		2: "FIXED_AVERAGES",
	}
	RegressionForecasterAvgsProcessingType_value = map[string]int32{
		"FORECAST":       0,
		"AVERAGES":       1,
		"FIXED_AVERAGES": 2,
	}
)

func (x RegressionForecasterAvgsProcessingType) Enum() *RegressionForecasterAvgsProcessingType {
	p := new(RegressionForecasterAvgsProcessingType)
	*p = x
	return p
}

func (x RegressionForecasterAvgsProcessingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegressionForecasterAvgsProcessingType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[1].Descriptor()
}

func (RegressionForecasterAvgsProcessingType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[1]
}

func (x RegressionForecasterAvgsProcessingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegressionForecasterAvgsProcessingType.Descriptor instead.
func (RegressionForecasterAvgsProcessingType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{1}
}

// enum representing the units of time a ConstraintRule uses
type ConstraintTimeUnit int32

const (
	ConstraintTimeUnit_MINUTES ConstraintTimeUnit = 0
	ConstraintTimeUnit_HOURS   ConstraintTimeUnit = 1
	ConstraintTimeUnit_SHIFTS  ConstraintTimeUnit = 2
	ConstraintTimeUnit_DAYS    ConstraintTimeUnit = 3
	ConstraintTimeUnit_WEEKS   ConstraintTimeUnit = 4
	ConstraintTimeUnit_MONTHS  ConstraintTimeUnit = 5
	ConstraintTimeUnit_YEARS   ConstraintTimeUnit = 6
)

// Enum value maps for ConstraintTimeUnit.
var (
	ConstraintTimeUnit_name = map[int32]string{
		0: "MINUTES",
		1: "HOURS",
		2: "SHIFTS",
		3: "DAYS",
		4: "WEEKS",
		5: "MONTHS",
		6: "YEARS",
	}
	ConstraintTimeUnit_value = map[string]int32{
		"MINUTES": 0,
		"HOURS":   1,
		"SHIFTS":  2,
		"DAYS":    3,
		"WEEKS":   4,
		"MONTHS":  5,
		"YEARS":   6,
	}
)

func (x ConstraintTimeUnit) Enum() *ConstraintTimeUnit {
	p := new(ConstraintTimeUnit)
	*p = x
	return p
}

func (x ConstraintTimeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstraintTimeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[2].Descriptor()
}

func (ConstraintTimeUnit) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[2]
}

func (x ConstraintTimeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstraintTimeUnit.Descriptor instead.
func (ConstraintTimeUnit) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{2}
}

type ConfigEntityType int32

const (
	// entity is a call center node.
	ConfigEntityType_CALL_CENTER_NODE ConfigEntityType = 0
	// entity is a client node.
	ConfigEntityType_CLIENT_NODE ConfigEntityType = 1
	// entity is a location node.
	ConfigEntityType_LOCATION_NODE ConfigEntityType = 2
	// entity is a program node.
	ConfigEntityType_PROGRAM_NODE ConfigEntityType = 3
	// entity is an agent group.
	ConfigEntityType_AGENT_GROUP ConfigEntityType = 4
	// entity is a shift template.
	ConfigEntityType_SHIFT_TEMPLATE ConfigEntityType = 5
	// entity is a wfm agent.
	ConfigEntityType_WFM_AGENT ConfigEntityType = 6
	// entity is a placement rule.
	ConfigEntityType_PLACEMENT_RULE ConfigEntityType = 7
	// entity is a constraint rule.
	ConfigEntityType_CONSTRAINT_RULE ConfigEntityType = 8
	// entity is a non skill activity.
	ConfigEntityType_NON_SKILL_ACTIVITY ConfigEntityType = 9
	// entity is an agent availability.
	ConfigEntityType_AGENT_AVAILABILITY ConfigEntityType = 10
	// entity is an open times.
	ConfigEntityType_OPEN_TIMES ConfigEntityType = 11
	// entity is a scheduling activity.
	ConfigEntityType_SCHEDULING_ACTIVITY ConfigEntityType = 12
	// entity is a skill proficiency.
	ConfigEntityType_SKILL_PROFICIENCY ConfigEntityType = 13
	// entity is a schedule scenario.
	ConfigEntityType_SCHEDULE_SCENARIO ConfigEntityType = 14
)

// Enum value maps for ConfigEntityType.
var (
	ConfigEntityType_name = map[int32]string{
		0:  "CALL_CENTER_NODE",
		1:  "CLIENT_NODE",
		2:  "LOCATION_NODE",
		3:  "PROGRAM_NODE",
		4:  "AGENT_GROUP",
		5:  "SHIFT_TEMPLATE",
		6:  "WFM_AGENT",
		7:  "PLACEMENT_RULE",
		8:  "CONSTRAINT_RULE",
		9:  "NON_SKILL_ACTIVITY",
		10: "AGENT_AVAILABILITY",
		11: "OPEN_TIMES",
		12: "SCHEDULING_ACTIVITY",
		13: "SKILL_PROFICIENCY",
		14: "SCHEDULE_SCENARIO",
	}
	ConfigEntityType_value = map[string]int32{
		"CALL_CENTER_NODE":    0,
		"CLIENT_NODE":         1,
		"LOCATION_NODE":       2,
		"PROGRAM_NODE":        3,
		"AGENT_GROUP":         4,
		"SHIFT_TEMPLATE":      5,
		"WFM_AGENT":           6,
		"PLACEMENT_RULE":      7,
		"CONSTRAINT_RULE":     8,
		"NON_SKILL_ACTIVITY":  9,
		"AGENT_AVAILABILITY":  10,
		"OPEN_TIMES":          11,
		"SCHEDULING_ACTIVITY": 12,
		"SKILL_PROFICIENCY":   13,
		"SCHEDULE_SCENARIO":   14,
	}
)

func (x ConfigEntityType) Enum() *ConfigEntityType {
	p := new(ConfigEntityType)
	*p = x
	return p
}

func (x ConfigEntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigEntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[3].Descriptor()
}

func (ConfigEntityType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[3]
}

func (x ConfigEntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigEntityType.Descriptor instead.
func (ConfigEntityType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{3}
}

// enum representing the different types of Constraint Rules
type ConstraintRuleType int32

const (
	ConstraintRuleType_MIN_CONSEC_ON   ConstraintRuleType = 0
	ConstraintRuleType_MAX_CONSEC_ON   ConstraintRuleType = 1
	ConstraintRuleType_MIN_CONSEC_OFF  ConstraintRuleType = 2
	ConstraintRuleType_MAX_CONSEC_OFF  ConstraintRuleType = 3
	ConstraintRuleType_MIN_TOTAL_ON    ConstraintRuleType = 4
	ConstraintRuleType_MAX_TOTAL_ON    ConstraintRuleType = 5
	ConstraintRuleType_MIN_TOTAL_OFF   ConstraintRuleType = 6
	ConstraintRuleType_MAX_TOTAL_OFF   ConstraintRuleType = 7
	ConstraintRuleType_MIN_SKILL_LEVEL ConstraintRuleType = 8
)

// Enum value maps for ConstraintRuleType.
var (
	ConstraintRuleType_name = map[int32]string{
		0: "MIN_CONSEC_ON",
		1: "MAX_CONSEC_ON",
		2: "MIN_CONSEC_OFF",
		3: "MAX_CONSEC_OFF",
		4: "MIN_TOTAL_ON",
		5: "MAX_TOTAL_ON",
		6: "MIN_TOTAL_OFF",
		7: "MAX_TOTAL_OFF",
		8: "MIN_SKILL_LEVEL",
	}
	ConstraintRuleType_value = map[string]int32{
		"MIN_CONSEC_ON":   0,
		"MAX_CONSEC_ON":   1,
		"MIN_CONSEC_OFF":  2,
		"MAX_CONSEC_OFF":  3,
		"MIN_TOTAL_ON":    4,
		"MAX_TOTAL_ON":    5,
		"MIN_TOTAL_OFF":   6,
		"MAX_TOTAL_OFF":   7,
		"MIN_SKILL_LEVEL": 8,
	}
)

func (x ConstraintRuleType) Enum() *ConstraintRuleType {
	p := new(ConstraintRuleType)
	*p = x
	return p
}

func (x ConstraintRuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstraintRuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[4].Descriptor()
}

func (ConstraintRuleType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[4]
}

func (x ConstraintRuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstraintRuleType.Descriptor instead.
func (ConstraintRuleType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{4}
}

// Enum representing the different types of placements for the DOW Placement.
type DOWPlacementType int32

const (
	DOWPlacementType_MUST_NOT DOWPlacementType = 0
	DOWPlacementType_MAY      DOWPlacementType = 1
	DOWPlacementType_MUST     DOWPlacementType = 2
)

// Enum value maps for DOWPlacementType.
var (
	DOWPlacementType_name = map[int32]string{
		0: "MUST_NOT",
		1: "MAY",
		2: "MUST",
	}
	DOWPlacementType_value = map[string]int32{
		"MUST_NOT": 0,
		"MAY":      1,
		"MUST":     2,
	}
)

func (x DOWPlacementType) Enum() *DOWPlacementType {
	p := new(DOWPlacementType)
	*p = x
	return p
}

func (x DOWPlacementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOWPlacementType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[5].Descriptor()
}

func (DOWPlacementType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[5]
}

func (x DOWPlacementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DOWPlacementType.Descriptor instead.
func (DOWPlacementType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{5}
}

// Enum representing the options for open times.
type OpenTimesOption int32

const (
	OpenTimesOption_CLOSED OpenTimesOption = 0
	OpenTimesOption_OPEN   OpenTimesOption = 1
)

// Enum value maps for OpenTimesOption.
var (
	OpenTimesOption_name = map[int32]string{
		0: "CLOSED",
		1: "OPEN",
	}
	OpenTimesOption_value = map[string]int32{
		"CLOSED": 0,
		"OPEN":   1,
	}
)

func (x OpenTimesOption) Enum() *OpenTimesOption {
	p := new(OpenTimesOption)
	*p = x
	return p
}

func (x OpenTimesOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenTimesOption) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[6].Descriptor()
}

func (OpenTimesOption) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[6]
}

func (x OpenTimesOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenTimesOption.Descriptor instead.
func (OpenTimesOption) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{6}
}

// Enum representing the options for agent availability.
type AvailabilityOption int32

const (
	AvailabilityOption_AVAILABLE            AvailabilityOption = 0
	AvailabilityOption_NOT_AVAILABLE        AvailabilityOption = 1
	AvailabilityOption_PREFER_NOT_AVAILABLE AvailabilityOption = 2
)

// Enum value maps for AvailabilityOption.
var (
	AvailabilityOption_name = map[int32]string{
		0: "AVAILABLE",
		1: "NOT_AVAILABLE",
		2: "PREFER_NOT_AVAILABLE",
	}
	AvailabilityOption_value = map[string]int32{
		"AVAILABLE":            0,
		"NOT_AVAILABLE":        1,
		"PREFER_NOT_AVAILABLE": 2,
	}
)

func (x AvailabilityOption) Enum() *AvailabilityOption {
	p := new(AvailabilityOption)
	*p = x
	return p
}

func (x AvailabilityOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailabilityOption) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[7].Descriptor()
}

func (AvailabilityOption) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[7]
}

func (x AvailabilityOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailabilityOption.Descriptor instead.
func (AvailabilityOption) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{7}
}

// Enum representing the options for day of the week, Monday must be 0.
type DayOfWeek int32

const (
	DayOfWeek_MON DayOfWeek = 0
	DayOfWeek_TUE DayOfWeek = 1
	DayOfWeek_WED DayOfWeek = 2
	DayOfWeek_THU DayOfWeek = 3
	DayOfWeek_FRI DayOfWeek = 4
	DayOfWeek_SAT DayOfWeek = 5
	DayOfWeek_SUN DayOfWeek = 6
)

// Enum value maps for DayOfWeek.
var (
	DayOfWeek_name = map[int32]string{
		0: "MON",
		1: "TUE",
		2: "WED",
		3: "THU",
		4: "FRI",
		5: "SAT",
		6: "SUN",
	}
	DayOfWeek_value = map[string]int32{
		"MON": 0,
		"TUE": 1,
		"WED": 2,
		"THU": 3,
		"FRI": 4,
		"SAT": 5,
		"SUN": 6,
	}
)

func (x DayOfWeek) Enum() *DayOfWeek {
	p := new(DayOfWeek)
	*p = x
	return p
}

func (x DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[8].Descriptor()
}

func (DayOfWeek) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[8]
}

func (x DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DayOfWeek.Descriptor instead.
func (DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{8}
}

// Enum representing the options for config entity relationships.
type ConfigRelationshipType int32

const (
	// The entity is associated with the other one.
	ConfigRelationshipType_IS_ASSOCIATED_WITH ConfigRelationshipType = 0
	// The entity is NOT associated with the other one.
	ConfigRelationshipType_IS_NOT_ASSOCIATED_WITH ConfigRelationshipType = 1
	// The entity is a member of the other one.
	ConfigRelationshipType_IS_MEMBER_OF ConfigRelationshipType = 2
)

// Enum value maps for ConfigRelationshipType.
var (
	ConfigRelationshipType_name = map[int32]string{
		0: "IS_ASSOCIATED_WITH",
		1: "IS_NOT_ASSOCIATED_WITH",
		2: "IS_MEMBER_OF",
	}
	ConfigRelationshipType_value = map[string]int32{
		"IS_ASSOCIATED_WITH":     0,
		"IS_NOT_ASSOCIATED_WITH": 1,
		"IS_MEMBER_OF":           2,
	}
)

func (x ConfigRelationshipType) Enum() *ConfigRelationshipType {
	p := new(ConfigRelationshipType)
	*p = x
	return p
}

func (x ConfigRelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigRelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[9].Descriptor()
}

func (ConfigRelationshipType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[9]
}

func (x ConfigRelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigRelationshipType.Descriptor instead.
func (ConfigRelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{9}
}

// Enum representing the level of a diagnostic.
type DiagnosticLevel int32

const (
	// The diagnostic is reporting an information level report.
	DiagnosticLevel_INFORMATION DiagnosticLevel = 0
	// The diagnostic is reporting a suggestion level report.
	DiagnosticLevel_SUGGESTION DiagnosticLevel = 1
	// The diagnostic is reporting a warning level report.
	DiagnosticLevel_WARNING DiagnosticLevel = 2
	// The diagnostic is reporting an error level report.
	DiagnosticLevel_DIAGNOSTIC_ERROR DiagnosticLevel = 3
	// The diagnostic is reporting an internal error level report.
	DiagnosticLevel_INTERNAL_ERROR DiagnosticLevel = 4
)

// Enum value maps for DiagnosticLevel.
var (
	DiagnosticLevel_name = map[int32]string{
		0: "INFORMATION",
		1: "SUGGESTION",
		2: "WARNING",
		3: "DIAGNOSTIC_ERROR",
		4: "INTERNAL_ERROR",
	}
	DiagnosticLevel_value = map[string]int32{
		"INFORMATION":      0,
		"SUGGESTION":       1,
		"WARNING":          2,
		"DIAGNOSTIC_ERROR": 3,
		"INTERNAL_ERROR":   4,
	}
)

func (x DiagnosticLevel) Enum() *DiagnosticLevel {
	p := new(DiagnosticLevel)
	*p = x
	return p
}

func (x DiagnosticLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[10].Descriptor()
}

func (DiagnosticLevel) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[10]
}

func (x DiagnosticLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticLevel.Descriptor instead.
func (DiagnosticLevel) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{10}
}

// Enum representing the type of a diagnostic.
type DiagnosticCode int32

const (
	// The code type used when no other code is appropriate.
	DiagnosticCode_GENERAL DiagnosticCode = 0
	// The diagnostic is reporting no errors found.
	DiagnosticCode_OK DiagnosticCode = 1
	// The diagnostic is reporting no skills in the dictionary.
	DiagnosticCode_NO_SKILLS_IN_DICTIONARY DiagnosticCode = 2
	// The diagnostic is reporting a wfm agent with no skill proficiencies.
	DiagnosticCode_AGENT_HAS_NO_SKILL_PROFICIENCIES DiagnosticCode = 3
	// The diagnostic is reporting an agent with no skills.
	DiagnosticCode_AGENT_HAS_NO_SKILLS DiagnosticCode = 4
	// The diagnostic is reporting the constraint rules don't have a scheduling activity.
	DiagnosticCode_NO_SCHEDULING_ACTIVITIES_FOR_CONSTRAINT_RULES DiagnosticCode = 5
	// The diagnostic is reporting a constraint rule pointing to a scheduling activity that cannot be found.
	DiagnosticCode_SCHEDULING_ACTIVITY_FOR_CONSTRAINT_RULE_NOT_FOUND DiagnosticCode = 6
	// The diagnostic is reporting a NONE value for a shift template
	DiagnosticCode_SHIFT_TEMPLATE_CANNOT_BE_NONE DiagnosticCode = 7
	// The diagnostic is reporting a shift template with no member placement rules.
	DiagnosticCode_SHIFT_TEMPLATE_HAS_NO_PLACEMENT_RULES DiagnosticCode = 8
	// The diagnostic is reporting a shift template whose placement rules do not include an on-call placement.
	DiagnosticCode_NO_ONCALL_IN_SHIFT_TEMPLATE_PLACEMENT_RULES DiagnosticCode = 9
	// The diagnostic is reporting the min duration for a shift templates placement rule being greater than the max duration.
	DiagnosticCode_MIN_GT_MAX_DURATION_IN_SHIFT_TEMPLATE_PLACEMENT_RULES DiagnosticCode = 10
	// The diagnostic is reporting a shift template with a min_agents value greater than it's max_agents value.
	DiagnosticCode_MIN_GT_MAX_AGENTS_IN_SHIFT_TEMPLATE DiagnosticCode = 11
	// The diagnostic is reporting no placement rules as members of the shift template.
	DiagnosticCode_NO_PLACEMENT_RULES_FOR_SHIFT_TEMPLATE DiagnosticCode = 12
	// The diagnostic is reporting that the activities are too short for the shift.
	DiagnosticCode_ACTIVITIES_SHORTER_THAN_SHIFT DiagnosticCode = 13
	// The diagnostic is reporting that a shift doesn't have a sufficient number of agents available.
	DiagnosticCode_NOT_ENOUGH_AGENTS_FOR_SHIFT DiagnosticCode = 14
	// The diagnostic is reporting that a program node has no member agent groups.
	DiagnosticCode_PROGRAM_HAS_NO_AGENT_GROUPS DiagnosticCode = 15
	// The diagnostic is reporting that a program node has no member shift templates.
	DiagnosticCode_PROGRAM_HAS_NO_SHIFT_TEMPLATES DiagnosticCode = 16
	// The diagnostic is reporting that a location node has no member program nodes.
	DiagnosticCode_LOCATION_HAS_NO_PROGRAMS DiagnosticCode = 17
	// The diagnostic is reporting that a client node has no member location nodes.
	DiagnosticCode_CLIENT_HAS_NO_LOCATIONS DiagnosticCode = 18
	// The diagnostic is reporting that a call center node has no member client nodes
	DiagnosticCode_CALL_CENTER_HAS_NO_CLIENTS DiagnosticCode = 19
	// The diagnostic is reporting that a program node has an invalid parent location node.
	DiagnosticCode_PROGRAM_HAS_INVALID_PARENT_LOCATION DiagnosticCode = 20
	// The diagnostic is reporting that a location node has an invalid parent client node.
	DiagnosticCode_LOCATION_HAS_INVALID_PARENT_CLIENT DiagnosticCode = 21
	// The diagnostic is reporting that a client node has an invalid parent call center.
	DiagnosticCode_CLIENT_HAS_INVALID_PARENT_CALL_CENTER DiagnosticCode = 22
	// The diagnostic is reporting that an agent group has an invalid parent node.
	DiagnosticCode_AGENT_GROUP_HAS_INVALID_PARENT_NODE DiagnosticCode = 23
	// The diagnostic is reporting an invalid parent program for a shift template.
	DiagnosticCode_SHIFT_TEMPLATE_HAS_INVALID_PARENT_PROGRAM DiagnosticCode = 24
	// The diagnostic is reporting a constraint rule pointing to a missing skill proficiency.
	DiagnosticCode_NO_SKILL_PROFICIENCY_FOR_MIN_SKILL_PROFICIENCY_CONSTRAINT_RULE DiagnosticCode = 25
)

// Enum value maps for DiagnosticCode.
var (
	DiagnosticCode_name = map[int32]string{
		0:  "GENERAL",
		1:  "OK",
		2:  "NO_SKILLS_IN_DICTIONARY",
		3:  "AGENT_HAS_NO_SKILL_PROFICIENCIES",
		4:  "AGENT_HAS_NO_SKILLS",
		5:  "NO_SCHEDULING_ACTIVITIES_FOR_CONSTRAINT_RULES",
		6:  "SCHEDULING_ACTIVITY_FOR_CONSTRAINT_RULE_NOT_FOUND",
		7:  "SHIFT_TEMPLATE_CANNOT_BE_NONE",
		8:  "SHIFT_TEMPLATE_HAS_NO_PLACEMENT_RULES",
		9:  "NO_ONCALL_IN_SHIFT_TEMPLATE_PLACEMENT_RULES",
		10: "MIN_GT_MAX_DURATION_IN_SHIFT_TEMPLATE_PLACEMENT_RULES",
		11: "MIN_GT_MAX_AGENTS_IN_SHIFT_TEMPLATE",
		12: "NO_PLACEMENT_RULES_FOR_SHIFT_TEMPLATE",
		13: "ACTIVITIES_SHORTER_THAN_SHIFT",
		14: "NOT_ENOUGH_AGENTS_FOR_SHIFT",
		15: "PROGRAM_HAS_NO_AGENT_GROUPS",
		16: "PROGRAM_HAS_NO_SHIFT_TEMPLATES",
		17: "LOCATION_HAS_NO_PROGRAMS",
		18: "CLIENT_HAS_NO_LOCATIONS",
		19: "CALL_CENTER_HAS_NO_CLIENTS",
		20: "PROGRAM_HAS_INVALID_PARENT_LOCATION",
		21: "LOCATION_HAS_INVALID_PARENT_CLIENT",
		22: "CLIENT_HAS_INVALID_PARENT_CALL_CENTER",
		23: "AGENT_GROUP_HAS_INVALID_PARENT_NODE",
		24: "SHIFT_TEMPLATE_HAS_INVALID_PARENT_PROGRAM",
		25: "NO_SKILL_PROFICIENCY_FOR_MIN_SKILL_PROFICIENCY_CONSTRAINT_RULE",
	}
	DiagnosticCode_value = map[string]int32{
		"GENERAL":                          0,
		"OK":                               1,
		"NO_SKILLS_IN_DICTIONARY":          2,
		"AGENT_HAS_NO_SKILL_PROFICIENCIES": 3,
		"AGENT_HAS_NO_SKILLS":              4,
		"NO_SCHEDULING_ACTIVITIES_FOR_CONSTRAINT_RULES":                  5,
		"SCHEDULING_ACTIVITY_FOR_CONSTRAINT_RULE_NOT_FOUND":              6,
		"SHIFT_TEMPLATE_CANNOT_BE_NONE":                                  7,
		"SHIFT_TEMPLATE_HAS_NO_PLACEMENT_RULES":                          8,
		"NO_ONCALL_IN_SHIFT_TEMPLATE_PLACEMENT_RULES":                    9,
		"MIN_GT_MAX_DURATION_IN_SHIFT_TEMPLATE_PLACEMENT_RULES":          10,
		"MIN_GT_MAX_AGENTS_IN_SHIFT_TEMPLATE":                            11,
		"NO_PLACEMENT_RULES_FOR_SHIFT_TEMPLATE":                          12,
		"ACTIVITIES_SHORTER_THAN_SHIFT":                                  13,
		"NOT_ENOUGH_AGENTS_FOR_SHIFT":                                    14,
		"PROGRAM_HAS_NO_AGENT_GROUPS":                                    15,
		"PROGRAM_HAS_NO_SHIFT_TEMPLATES":                                 16,
		"LOCATION_HAS_NO_PROGRAMS":                                       17,
		"CLIENT_HAS_NO_LOCATIONS":                                        18,
		"CALL_CENTER_HAS_NO_CLIENTS":                                     19,
		"PROGRAM_HAS_INVALID_PARENT_LOCATION":                            20,
		"LOCATION_HAS_INVALID_PARENT_CLIENT":                             21,
		"CLIENT_HAS_INVALID_PARENT_CALL_CENTER":                          22,
		"AGENT_GROUP_HAS_INVALID_PARENT_NODE":                            23,
		"SHIFT_TEMPLATE_HAS_INVALID_PARENT_PROGRAM":                      24,
		"NO_SKILL_PROFICIENCY_FOR_MIN_SKILL_PROFICIENCY_CONSTRAINT_RULE": 25,
	}
)

func (x DiagnosticCode) Enum() *DiagnosticCode {
	p := new(DiagnosticCode)
	*p = x
	return p
}

func (x DiagnosticCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticCode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[11].Descriptor()
}

func (DiagnosticCode) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[11]
}

func (x DiagnosticCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticCode.Descriptor instead.
func (DiagnosticCode) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{11}
}

// Enum representing the type of a performance metric.
type PerformanceMetricType int32

const (
	// The metric is a simplified comparison of FTE calls vs achieved calls.
	PerformanceMetricType_FTE_REQUIRED_VS_ACHIEVED_SIMPLE PerformanceMetricType = 0
	// The metric is an extended comparison of FTE calls vs achieved calls.
	PerformanceMetricType_FTE_REQUIRED_VS_ACHIEVED_EXTENDED PerformanceMetricType = 1
	// The metric analyzes the service level of the schedule.
	PerformanceMetricType_SERVICE_LEVEL_ANALYSIS PerformanceMetricType = 2
	// The metric returns a matrix metric of the service level for the schedule.
	PerformanceMetricType_SERVICE_LEVEL_MATRIX PerformanceMetricType = 3
	// The metric relate to contact handling performance.
	PerformanceMetricType_CONTACT_HANDLING_METRICS PerformanceMetricType = 4
	// The metric relates to the load forecast
	PerformanceMetricType_LOAD_FORECAST PerformanceMetricType = 5
)

// Enum value maps for PerformanceMetricType.
var (
	PerformanceMetricType_name = map[int32]string{
		0: "FTE_REQUIRED_VS_ACHIEVED_SIMPLE",
		1: "FTE_REQUIRED_VS_ACHIEVED_EXTENDED",
		2: "SERVICE_LEVEL_ANALYSIS",
		3: "SERVICE_LEVEL_MATRIX",
		4: "CONTACT_HANDLING_METRICS",
		5: "LOAD_FORECAST",
	}
	PerformanceMetricType_value = map[string]int32{
		"FTE_REQUIRED_VS_ACHIEVED_SIMPLE":   0,
		"FTE_REQUIRED_VS_ACHIEVED_EXTENDED": 1,
		"SERVICE_LEVEL_ANALYSIS":            2,
		"SERVICE_LEVEL_MATRIX":              3,
		"CONTACT_HANDLING_METRICS":          4,
		"LOAD_FORECAST":                     5,
	}
)

func (x PerformanceMetricType) Enum() *PerformanceMetricType {
	p := new(PerformanceMetricType)
	*p = x
	return p
}

func (x PerformanceMetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PerformanceMetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[12].Descriptor()
}

func (PerformanceMetricType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[12]
}

func (x PerformanceMetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PerformanceMetricType.Descriptor instead.
func (PerformanceMetricType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{12}
}

// Deprecated.
type ScheduleShouldInclude int32

const (
	// Include only shift instances.
	ScheduleShouldInclude_ONLY_SHIFT_INSTANCES ScheduleShouldInclude = 0
	// Include only performance metrics.
	ScheduleShouldInclude_ONLY_PERFORMANCE_METRICS ScheduleShouldInclude = 1
	// Include both entities.
	ScheduleShouldInclude_SHIFT_INSTANCES_AND_PERFORMANCE_METRICS ScheduleShouldInclude = 2
)

// Enum value maps for ScheduleShouldInclude.
var (
	ScheduleShouldInclude_name = map[int32]string{
		0: "ONLY_SHIFT_INSTANCES",
		1: "ONLY_PERFORMANCE_METRICS",
		2: "SHIFT_INSTANCES_AND_PERFORMANCE_METRICS",
	}
	ScheduleShouldInclude_value = map[string]int32{
		"ONLY_SHIFT_INSTANCES":                    0,
		"ONLY_PERFORMANCE_METRICS":                1,
		"SHIFT_INSTANCES_AND_PERFORMANCE_METRICS": 2,
	}
)

func (x ScheduleShouldInclude) Enum() *ScheduleShouldInclude {
	p := new(ScheduleShouldInclude)
	*p = x
	return p
}

func (x ScheduleShouldInclude) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleShouldInclude) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[13].Descriptor()
}

func (ScheduleShouldInclude) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[13]
}

func (x ScheduleShouldInclude) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleShouldInclude.Descriptor instead.
func (ScheduleShouldInclude) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{13}
}

// enum representing the type of a schedule.
type ScheduleType int32

const (
	// Draft schedule.
	ScheduleType_DRAFT ScheduleType = 0
	// Published schedule.
	ScheduleType_PUBLISHED ScheduleType = 1
)

// Enum value maps for ScheduleType.
var (
	ScheduleType_name = map[int32]string{
		0: "DRAFT",
		1: "PUBLISHED",
	}
	ScheduleType_value = map[string]int32{
		"DRAFT":     0,
		"PUBLISHED": 1,
	}
)

func (x ScheduleType) Enum() *ScheduleType {
	p := new(ScheduleType)
	*p = x
	return p
}

func (x ScheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[14].Descriptor()
}

func (ScheduleType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[14]
}

func (x ScheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleType.Descriptor instead.
func (ScheduleType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{14}
}

type SchedulingTargetType int32

const (
	// Node will use coverage based scheduling.
	SchedulingTargetType_COVERAGE SchedulingTargetType = 0
	// Node will use service level based scheduling.
	SchedulingTargetType_SERVICE_LEVEL SchedulingTargetType = 1
)

// Enum value maps for SchedulingTargetType.
var (
	SchedulingTargetType_name = map[int32]string{
		0: "COVERAGE",
		1: "SERVICE_LEVEL",
	}
	SchedulingTargetType_value = map[string]int32{
		"COVERAGE":      0,
		"SERVICE_LEVEL": 1,
	}
)

func (x SchedulingTargetType) Enum() *SchedulingTargetType {
	p := new(SchedulingTargetType)
	*p = x
	return p
}

func (x SchedulingTargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulingTargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[15].Descriptor()
}

func (SchedulingTargetType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[15]
}

func (x SchedulingTargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulingTargetType.Descriptor instead.
func (SchedulingTargetType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{15}
}

type SkillType_Enum int32

const (
	SkillType_AGENT_SKILL    SkillType_Enum = 0
	SkillType_HUNT_GROUP     SkillType_Enum = 1
	SkillType_AGENT_PBX      SkillType_Enum = 2 // NOT used by WFM.
	SkillType_HUNT_GROUP_PBX SkillType_Enum = 3 // NOT used by WFM.
	SkillType_PBX            SkillType_Enum = 4
	SkillType_AGENT          SkillType_Enum = 5 // NOT used by WFM.
)

// Enum value maps for SkillType_Enum.
var (
	SkillType_Enum_name = map[int32]string{
		0: "AGENT_SKILL",
		1: "HUNT_GROUP",
		2: "AGENT_PBX",
		3: "HUNT_GROUP_PBX",
		4: "PBX",
		5: "AGENT",
	}
	SkillType_Enum_value = map[string]int32{
		"AGENT_SKILL":    0,
		"HUNT_GROUP":     1,
		"AGENT_PBX":      2,
		"HUNT_GROUP_PBX": 3,
		"PBX":            4,
		"AGENT":          5,
	}
)

func (x SkillType_Enum) Enum() *SkillType_Enum {
	p := new(SkillType_Enum)
	*p = x
	return p
}

func (x SkillType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkillType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[16].Descriptor()
}

func (SkillType_Enum) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[16]
}

func (x SkillType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkillType_Enum.Descriptor instead.
func (SkillType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{0, 0}
}

// Represents the skill types that a client's skills can be.
type SkillType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SkillType) Reset() {
	*x = SkillType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_wfm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillType) ProtoMessage() {}

func (x *SkillType) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillType.ProtoReflect.Descriptor instead.
func (*SkillType) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{0}
}

type DatetimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// begining datetime
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// ending datetime
	EndDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_datetime,json=endDatetime,proto3" json:"end_datetime,omitempty"`
}

func (x *DatetimeRange) Reset() {
	*x = DatetimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_wfm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatetimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimeRange) ProtoMessage() {}

func (x *DatetimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimeRange.ProtoReflect.Descriptor instead.
func (*DatetimeRange) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{1}
}

func (x *DatetimeRange) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *DatetimeRange) GetEndDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDatetime
	}
	return nil
}

// Request message for the UpsertForecastingParameters RPC.
type ForecastingParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of minutes in which calls will be grouped together during for the duration of a forecast, must be a multiple of 5 ranging from 5 to 60.
	IntervalWidthInMinutes int32 `protobuf:"varint,1,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// period for training that the historical data will be sourced from.
	// can be either a number of months to go back from the current datetime or a datetime to start from until the present.
	//
	// Types that are assignable to HistoricalDataRange:
	//
	//	*ForecastingParameters_HistoricalDataRangeInMonths
	//	*ForecastingParameters_HistoricalDataRangeStartDatetime
	HistoricalDataRange isForecastingParameters_HistoricalDataRange `protobuf_oneof:"historical_data_range"`
	// number of weeks of the training data from the current datetime to use as a forecast test range.
	ForecastTestRangeInWeeks int32 `protobuf:"varint,8,opt,name=forecast_test_range_in_weeks,json=forecastTestRangeInWeeks,proto3" json:"forecast_test_range_in_weeks,omitempty"`
	// date range to generate forecasts.
	//
	// Types that are assignable to ForecastRange:
	//
	//	*ForecastingParameters_ForecastRangeInWeeks
	//	*ForecastingParameters_ForecastDatetimeRange
	ForecastRange isForecastingParameters_ForecastRange `protobuf_oneof:"forecast_range"`
	// date range to be used to generate training data.
	//
	// Types that are assignable to TrainingDataRange:
	//
	//	*ForecastingParameters_TrainingDataRangeInMonths
	//	*ForecastingParameters_TrainingDataDatetimeRange
	TrainingDataRange isForecastingParameters_TrainingDataRange `protobuf_oneof:"training_data_range"`
	// Number of months of training data to use when calculating averages.
	// If set to 0, then all the training data will be used when calculating the averages,
	// meaning that the start datetime of the training data to use will be the start datetime of the @training_data_range.
	// Otherwise, it will subtract that many months from the @training_data_range end datetime and use it as the start time.
	AveragesCalculationRangeInMonths int32 `protobuf:"varint,13,opt,name=averages_calculation_range_in_months,json=averagesCalculationRangeInMonths,proto3" json:"averages_calculation_range_in_months,omitempty"`
}

func (x *ForecastingParameters) Reset() {
	*x = ForecastingParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_wfm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForecastingParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastingParameters) ProtoMessage() {}

func (x *ForecastingParameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastingParameters.ProtoReflect.Descriptor instead.
func (*ForecastingParameters) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{2}
}

func (x *ForecastingParameters) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (m *ForecastingParameters) GetHistoricalDataRange() isForecastingParameters_HistoricalDataRange {
	if m != nil {
		return m.HistoricalDataRange
	}
	return nil
}

func (x *ForecastingParameters) GetHistoricalDataRangeInMonths() int32 {
	if x, ok := x.GetHistoricalDataRange().(*ForecastingParameters_HistoricalDataRangeInMonths); ok {
		return x.HistoricalDataRangeInMonths
	}
	return 0
}

func (x *ForecastingParameters) GetHistoricalDataRangeStartDatetime() *timestamppb.Timestamp {
	if x, ok := x.GetHistoricalDataRange().(*ForecastingParameters_HistoricalDataRangeStartDatetime); ok {
		return x.HistoricalDataRangeStartDatetime
	}
	return nil
}

func (x *ForecastingParameters) GetForecastTestRangeInWeeks() int32 {
	if x != nil {
		return x.ForecastTestRangeInWeeks
	}
	return 0
}

func (m *ForecastingParameters) GetForecastRange() isForecastingParameters_ForecastRange {
	if m != nil {
		return m.ForecastRange
	}
	return nil
}

func (x *ForecastingParameters) GetForecastRangeInWeeks() int32 {
	if x, ok := x.GetForecastRange().(*ForecastingParameters_ForecastRangeInWeeks); ok {
		return x.ForecastRangeInWeeks
	}
	return 0
}

func (x *ForecastingParameters) GetForecastDatetimeRange() *DatetimeRange {
	if x, ok := x.GetForecastRange().(*ForecastingParameters_ForecastDatetimeRange); ok {
		return x.ForecastDatetimeRange
	}
	return nil
}

func (m *ForecastingParameters) GetTrainingDataRange() isForecastingParameters_TrainingDataRange {
	if m != nil {
		return m.TrainingDataRange
	}
	return nil
}

func (x *ForecastingParameters) GetTrainingDataRangeInMonths() int32 {
	if x, ok := x.GetTrainingDataRange().(*ForecastingParameters_TrainingDataRangeInMonths); ok {
		return x.TrainingDataRangeInMonths
	}
	return 0
}

func (x *ForecastingParameters) GetTrainingDataDatetimeRange() *DatetimeRange {
	if x, ok := x.GetTrainingDataRange().(*ForecastingParameters_TrainingDataDatetimeRange); ok {
		return x.TrainingDataDatetimeRange
	}
	return nil
}

func (x *ForecastingParameters) GetAveragesCalculationRangeInMonths() int32 {
	if x != nil {
		return x.AveragesCalculationRangeInMonths
	}
	return 0
}

type isForecastingParameters_HistoricalDataRange interface {
	isForecastingParameters_HistoricalDataRange()
}

type ForecastingParameters_HistoricalDataRangeInMonths struct {
	// number of months back from the current datetime to look up history.
	HistoricalDataRangeInMonths int32 `protobuf:"varint,6,opt,name=historical_data_range_in_months,json=historicalDataRangeInMonths,proto3,oneof"`
}

type ForecastingParameters_HistoricalDataRangeStartDatetime struct {
	// start datetime to look up the history (end time will be the current datetime).
	HistoricalDataRangeStartDatetime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=historical_data_range_start_datetime,json=historicalDataRangeStartDatetime,proto3,oneof"`
}

func (*ForecastingParameters_HistoricalDataRangeInMonths) isForecastingParameters_HistoricalDataRange() {
}

func (*ForecastingParameters_HistoricalDataRangeStartDatetime) isForecastingParameters_HistoricalDataRange() {
}

type isForecastingParameters_ForecastRange interface {
	isForecastingParameters_ForecastRange()
}

type ForecastingParameters_ForecastRangeInWeeks struct {
	// number of weeks from the current datetime that forecast will be made.
	ForecastRangeInWeeks int32 `protobuf:"varint,9,opt,name=forecast_range_in_weeks,json=forecastRangeInWeeks,proto3,oneof"`
}

type ForecastingParameters_ForecastDatetimeRange struct {
	// date range at which a forecasts will be made.
	ForecastDatetimeRange *DatetimeRange `protobuf:"bytes,10,opt,name=forecast_datetime_range,json=forecastDatetimeRange,proto3,oneof"`
}

func (*ForecastingParameters_ForecastRangeInWeeks) isForecastingParameters_ForecastRange() {}

func (*ForecastingParameters_ForecastDatetimeRange) isForecastingParameters_ForecastRange() {}

type isForecastingParameters_TrainingDataRange interface {
	isForecastingParameters_TrainingDataRange()
}

type ForecastingParameters_TrainingDataRangeInMonths struct {
	// number of months in the past from the current datetime that the training data will be generated from.
	TrainingDataRangeInMonths int32 `protobuf:"varint,11,opt,name=training_data_range_in_months,json=trainingDataRangeInMonths,proto3,oneof"`
}

type ForecastingParameters_TrainingDataDatetimeRange struct {
	// date range in which the training data will be generated.
	TrainingDataDatetimeRange *DatetimeRange `protobuf:"bytes,12,opt,name=training_data_datetime_range,json=trainingDataDatetimeRange,proto3,oneof"`
}

func (*ForecastingParameters_TrainingDataRangeInMonths) isForecastingParameters_TrainingDataRange() {}

func (*ForecastingParameters_TrainingDataDatetimeRange) isForecastingParameters_TrainingDataRange() {}

// ----------------------- Message types used by BuildProfileForecastReq() ------------------
// a profile for time of day, for each day of the week
type ProfileTOD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sunday    []float32 `protobuf:"fixed32,1,rep,packed,name=sunday,proto3" json:"sunday,omitempty"`
	Monday    []float32 `protobuf:"fixed32,2,rep,packed,name=monday,proto3" json:"monday,omitempty"`
	Tuesday   []float32 `protobuf:"fixed32,3,rep,packed,name=tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday []float32 `protobuf:"fixed32,4,rep,packed,name=wednesday,proto3" json:"wednesday,omitempty"`
	Thursday  []float32 `protobuf:"fixed32,5,rep,packed,name=thursday,proto3" json:"thursday,omitempty"`
	Friday    []float32 `protobuf:"fixed32,6,rep,packed,name=friday,proto3" json:"friday,omitempty"`
	Saturday  []float32 `protobuf:"fixed32,7,rep,packed,name=saturday,proto3" json:"saturday,omitempty"`
}

func (x *ProfileTOD) Reset() {
	*x = ProfileTOD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_wfm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileTOD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileTOD) ProtoMessage() {}

func (x *ProfileTOD) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileTOD.ProtoReflect.Descriptor instead.
func (*ProfileTOD) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{3}
}

func (x *ProfileTOD) GetSunday() []float32 {
	if x != nil {
		return x.Sunday
	}
	return nil
}

func (x *ProfileTOD) GetMonday() []float32 {
	if x != nil {
		return x.Monday
	}
	return nil
}

func (x *ProfileTOD) GetTuesday() []float32 {
	if x != nil {
		return x.Tuesday
	}
	return nil
}

func (x *ProfileTOD) GetWednesday() []float32 {
	if x != nil {
		return x.Wednesday
	}
	return nil
}

func (x *ProfileTOD) GetThursday() []float32 {
	if x != nil {
		return x.Thursday
	}
	return nil
}

func (x *ProfileTOD) GetFriday() []float32 {
	if x != nil {
		return x.Friday
	}
	return nil
}

func (x *ProfileTOD) GetSaturday() []float32 {
	if x != nil {
		return x.Saturday
	}
	return nil
}

// a profile for week of month, for each month of the year
type ProfileWOMS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	January   []float32 `protobuf:"fixed32,1,rep,packed,name=january,proto3" json:"january,omitempty"`
	February  []float32 `protobuf:"fixed32,2,rep,packed,name=february,proto3" json:"february,omitempty"`
	March     []float32 `protobuf:"fixed32,3,rep,packed,name=march,proto3" json:"march,omitempty"`
	April     []float32 `protobuf:"fixed32,4,rep,packed,name=april,proto3" json:"april,omitempty"`
	May       []float32 `protobuf:"fixed32,5,rep,packed,name=may,proto3" json:"may,omitempty"`
	June      []float32 `protobuf:"fixed32,6,rep,packed,name=june,proto3" json:"june,omitempty"`
	July      []float32 `protobuf:"fixed32,7,rep,packed,name=july,proto3" json:"july,omitempty"`
	August    []float32 `protobuf:"fixed32,8,rep,packed,name=august,proto3" json:"august,omitempty"`
	September []float32 `protobuf:"fixed32,9,rep,packed,name=september,proto3" json:"september,omitempty"`
	October   []float32 `protobuf:"fixed32,10,rep,packed,name=october,proto3" json:"october,omitempty"`
	November  []float32 `protobuf:"fixed32,11,rep,packed,name=november,proto3" json:"november,omitempty"`
	December  []float32 `protobuf:"fixed32,12,rep,packed,name=december,proto3" json:"december,omitempty"`
}

func (x *ProfileWOMS) Reset() {
	*x = ProfileWOMS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_wfm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileWOMS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileWOMS) ProtoMessage() {}

func (x *ProfileWOMS) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileWOMS.ProtoReflect.Descriptor instead.
func (*ProfileWOMS) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{4}
}

func (x *ProfileWOMS) GetJanuary() []float32 {
	if x != nil {
		return x.January
	}
	return nil
}

func (x *ProfileWOMS) GetFebruary() []float32 {
	if x != nil {
		return x.February
	}
	return nil
}

func (x *ProfileWOMS) GetMarch() []float32 {
	if x != nil {
		return x.March
	}
	return nil
}

func (x *ProfileWOMS) GetApril() []float32 {
	if x != nil {
		return x.April
	}
	return nil
}

func (x *ProfileWOMS) GetMay() []float32 {
	if x != nil {
		return x.May
	}
	return nil
}

func (x *ProfileWOMS) GetJune() []float32 {
	if x != nil {
		return x.June
	}
	return nil
}

func (x *ProfileWOMS) GetJuly() []float32 {
	if x != nil {
		return x.July
	}
	return nil
}

func (x *ProfileWOMS) GetAugust() []float32 {
	if x != nil {
		return x.August
	}
	return nil
}

func (x *ProfileWOMS) GetSeptember() []float32 {
	if x != nil {
		return x.September
	}
	return nil
}

func (x *ProfileWOMS) GetOctober() []float32 {
	if x != nil {
		return x.October
	}
	return nil
}

func (x *ProfileWOMS) GetNovember() []float32 {
	if x != nil {
		return x.November
	}
	return nil
}

func (x *ProfileWOMS) GetDecember() []float32 {
	if x != nil {
		return x.December
	}
	return nil
}

// a profile each day of the week
type ProfileDOW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sunday    float32 `protobuf:"fixed32,1,opt,name=sunday,proto3" json:"sunday,omitempty"`
	Monday    float32 `protobuf:"fixed32,2,opt,name=monday,proto3" json:"monday,omitempty"`
	Tuesday   float32 `protobuf:"fixed32,3,opt,name=tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday float32 `protobuf:"fixed32,4,opt,name=wednesday,proto3" json:"wednesday,omitempty"`
	Thursday  float32 `protobuf:"fixed32,5,opt,name=thursday,proto3" json:"thursday,omitempty"`
	Friday    float32 `protobuf:"fixed32,6,opt,name=friday,proto3" json:"friday,omitempty"`
	Saturday  float32 `protobuf:"fixed32,7,opt,name=saturday,proto3" json:"saturday,omitempty"`
}

func (x *ProfileDOW) Reset() {
	*x = ProfileDOW{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_wfm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileDOW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileDOW) ProtoMessage() {}

func (x *ProfileDOW) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileDOW.ProtoReflect.Descriptor instead.
func (*ProfileDOW) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{5}
}

func (x *ProfileDOW) GetSunday() float32 {
	if x != nil {
		return x.Sunday
	}
	return 0
}

func (x *ProfileDOW) GetMonday() float32 {
	if x != nil {
		return x.Monday
	}
	return 0
}

func (x *ProfileDOW) GetTuesday() float32 {
	if x != nil {
		return x.Tuesday
	}
	return 0
}

func (x *ProfileDOW) GetWednesday() float32 {
	if x != nil {
		return x.Wednesday
	}
	return 0
}

func (x *ProfileDOW) GetThursday() float32 {
	if x != nil {
		return x.Thursday
	}
	return 0
}

func (x *ProfileDOW) GetFriday() float32 {
	if x != nil {
		return x.Friday
	}
	return 0
}

func (x *ProfileDOW) GetSaturday() float32 {
	if x != nil {
		return x.Saturday
	}
	return 0
}

// a profile for each month of the year
type ProfileMOY struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	January   float32 `protobuf:"fixed32,1,opt,name=january,proto3" json:"january,omitempty"`
	February  float32 `protobuf:"fixed32,2,opt,name=february,proto3" json:"february,omitempty"`
	March     float32 `protobuf:"fixed32,3,opt,name=march,proto3" json:"march,omitempty"`
	April     float32 `protobuf:"fixed32,4,opt,name=april,proto3" json:"april,omitempty"`
	May       float32 `protobuf:"fixed32,5,opt,name=may,proto3" json:"may,omitempty"`
	June      float32 `protobuf:"fixed32,6,opt,name=june,proto3" json:"june,omitempty"`
	July      float32 `protobuf:"fixed32,7,opt,name=july,proto3" json:"july,omitempty"`
	August    float32 `protobuf:"fixed32,8,opt,name=august,proto3" json:"august,omitempty"`
	September float32 `protobuf:"fixed32,9,opt,name=september,proto3" json:"september,omitempty"`
	October   float32 `protobuf:"fixed32,10,opt,name=october,proto3" json:"october,omitempty"`
	November  float32 `protobuf:"fixed32,11,opt,name=november,proto3" json:"november,omitempty"`
	December  float32 `protobuf:"fixed32,12,opt,name=december,proto3" json:"december,omitempty"`
}

func (x *ProfileMOY) Reset() {
	*x = ProfileMOY{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_wfm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileMOY) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileMOY) ProtoMessage() {}

func (x *ProfileMOY) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileMOY.ProtoReflect.Descriptor instead.
func (*ProfileMOY) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{6}
}

func (x *ProfileMOY) GetJanuary() float32 {
	if x != nil {
		return x.January
	}
	return 0
}

func (x *ProfileMOY) GetFebruary() float32 {
	if x != nil {
		return x.February
	}
	return 0
}

func (x *ProfileMOY) GetMarch() float32 {
	if x != nil {
		return x.March
	}
	return 0
}

func (x *ProfileMOY) GetApril() float32 {
	if x != nil {
		return x.April
	}
	return 0
}

func (x *ProfileMOY) GetMay() float32 {
	if x != nil {
		return x.May
	}
	return 0
}

func (x *ProfileMOY) GetJune() float32 {
	if x != nil {
		return x.June
	}
	return 0
}

func (x *ProfileMOY) GetJuly() float32 {
	if x != nil {
		return x.July
	}
	return 0
}

func (x *ProfileMOY) GetAugust() float32 {
	if x != nil {
		return x.August
	}
	return 0
}

func (x *ProfileMOY) GetSeptember() float32 {
	if x != nil {
		return x.September
	}
	return 0
}

func (x *ProfileMOY) GetOctober() float32 {
	if x != nil {
		return x.October
	}
	return 0
}

func (x *ProfileMOY) GetNovember() float32 {
	if x != nil {
		return x.November
	}
	return 0
}

func (x *ProfileMOY) GetDecember() float32 {
	if x != nil {
		return x.December
	}
	return 0
}

type DistributionProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For each of the 7 days of the week, a list of intervals signifying the distribution by time of day in intervals
	// determined by interval_minutes, starting with interval 0 = 12AM. so there would be 96 element for 15-minute intervals
	ProfileTod *ProfileTOD `protobuf:"bytes,1,opt,name=profile_tod,json=profileTod,proto3" json:"profile_tod,omitempty"`
	// For each of the 12 months of the year, a list of 6 week profiles. The first index for a given month is week 1 : the week
	//
	//	of the first day of the month. The week with the last day of the month is the last index. e.g August 2021 has
	//	6 'weeks'
	ProfileWoms *ProfileWOMS `protobuf:"bytes,2,opt,name=profile_woms,json=profileWoms,proto3" json:"profile_woms,omitempty"`
	// a profile for each day of the week
	ProfileDow *ProfileDOW `protobuf:"bytes,3,opt,name=profile_dow,json=profileDow,proto3" json:"profile_dow,omitempty"`
	// a profile for each month of the year
	ProfileMoy *ProfileMOY `protobuf:"bytes,4,opt,name=profile_moy,json=profileMoy,proto3" json:"profile_moy,omitempty"`
}

func (x *DistributionProfile) Reset() {
	*x = DistributionProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_wfm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributionProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributionProfile) ProtoMessage() {}

func (x *DistributionProfile) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributionProfile.ProtoReflect.Descriptor instead.
func (*DistributionProfile) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{7}
}

func (x *DistributionProfile) GetProfileTod() *ProfileTOD {
	if x != nil {
		return x.ProfileTod
	}
	return nil
}

func (x *DistributionProfile) GetProfileWoms() *ProfileWOMS {
	if x != nil {
		return x.ProfileWoms
	}
	return nil
}

func (x *DistributionProfile) GetProfileDow() *ProfileDOW {
	if x != nil {
		return x.ProfileDow
	}
	return nil
}

func (x *DistributionProfile) GetProfileMoy() *ProfileMOY {
	if x != nil {
		return x.ProfileMoy
	}
	return nil
}

// defines a template profile for call count distributions
type CallProfileGroupCalls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCalls          int32                `protobuf:"varint,1,opt,name=total_calls,json=totalCalls,proto3" json:"total_calls,omitempty"`
	DistributionProfile *DistributionProfile `protobuf:"bytes,2,opt,name=distribution_profile,json=distributionProfile,proto3" json:"distribution_profile,omitempty"`
}

func (x *CallProfileGroupCalls) Reset() {
	*x = CallProfileGroupCalls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_wfm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallProfileGroupCalls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallProfileGroupCalls) ProtoMessage() {}

func (x *CallProfileGroupCalls) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallProfileGroupCalls.ProtoReflect.Descriptor instead.
func (*CallProfileGroupCalls) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{8}
}

func (x *CallProfileGroupCalls) GetTotalCalls() int32 {
	if x != nil {
		return x.TotalCalls
	}
	return 0
}

func (x *CallProfileGroupCalls) GetDistributionProfile() *DistributionProfile {
	if x != nil {
		return x.DistributionProfile
	}
	return nil
}

// defines a template profile of call characteristic distributions
type CallProfileGroupAvgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// min average (e.g. min ATAB)
	MinAverage float32 `protobuf:"fixed32,1,opt,name=min_average,json=minAverage,proto3" json:"min_average,omitempty"`
	// max average (e.g. max ATAB)
	MaxAverage          float32              `protobuf:"fixed32,2,opt,name=max_average,json=maxAverage,proto3" json:"max_average,omitempty"`
	DistributionProfile *DistributionProfile `protobuf:"bytes,3,opt,name=distribution_profile,json=distributionProfile,proto3" json:"distribution_profile,omitempty"`
}

func (x *CallProfileGroupAvgs) Reset() {
	*x = CallProfileGroupAvgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_wfm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallProfileGroupAvgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallProfileGroupAvgs) ProtoMessage() {}

func (x *CallProfileGroupAvgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallProfileGroupAvgs.ProtoReflect.Descriptor instead.
func (*CallProfileGroupAvgs) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{9}
}

func (x *CallProfileGroupAvgs) GetMinAverage() float32 {
	if x != nil {
		return x.MinAverage
	}
	return 0
}

func (x *CallProfileGroupAvgs) GetMaxAverage() float32 {
	if x != nil {
		return x.MaxAverage
	}
	return 0
}

func (x *CallProfileGroupAvgs) GetDistributionProfile() *DistributionProfile {
	if x != nil {
		return x.DistributionProfile
	}
	return nil
}

// Encapsulates the two kinds of options available so they can be interchangeably used.
type OptionTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DesiredOption:
	//
	//	*OptionTypes_OpenTimesOption
	//	*OptionTypes_AvailabilityOption
	DesiredOption isOptionTypes_DesiredOption `protobuf_oneof:"desired_option"`
}

func (x *OptionTypes) Reset() {
	*x = OptionTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_wfm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionTypes) ProtoMessage() {}

func (x *OptionTypes) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionTypes.ProtoReflect.Descriptor instead.
func (*OptionTypes) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{10}
}

func (m *OptionTypes) GetDesiredOption() isOptionTypes_DesiredOption {
	if m != nil {
		return m.DesiredOption
	}
	return nil
}

func (x *OptionTypes) GetOpenTimesOption() OpenTimesOption {
	if x, ok := x.GetDesiredOption().(*OptionTypes_OpenTimesOption); ok {
		return x.OpenTimesOption
	}
	return OpenTimesOption_CLOSED
}

func (x *OptionTypes) GetAvailabilityOption() AvailabilityOption {
	if x, ok := x.GetDesiredOption().(*OptionTypes_AvailabilityOption); ok {
		return x.AvailabilityOption
	}
	return AvailabilityOption_AVAILABLE
}

type isOptionTypes_DesiredOption interface {
	isOptionTypes_DesiredOption()
}

type OptionTypes_OpenTimesOption struct {
	// Option used by OpenTime
	OpenTimesOption OpenTimesOption `protobuf:"varint,1,opt,name=open_times_option,json=openTimesOption,proto3,enum=api.commons.OpenTimesOption,oneof"`
}

type OptionTypes_AvailabilityOption struct {
	// Option used by Agent Availability
	AvailabilityOption AvailabilityOption `protobuf:"varint,2,opt,name=availability_option,json=availabilityOption,proto3,enum=api.commons.AvailabilityOption,oneof"`
}

func (*OptionTypes_OpenTimesOption) isOptionTypes_DesiredOption() {}

func (*OptionTypes_AvailabilityOption) isOptionTypes_DesiredOption() {}

// Filter for schedule selection.
type ScheduleSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the schedule to select, not needed for Published schedules.
	ScheduleSid int64 `protobuf:"varint,1,opt,name=schedule_sid,json=scheduleSid,proto3" json:"schedule_sid,omitempty"`
	// Type of the schedule to select.
	ScheduleType ScheduleType `protobuf:"varint,2,opt,name=schedule_type,json=scheduleType,proto3,enum=api.commons.ScheduleType" json:"schedule_type,omitempty"`
}

func (x *ScheduleSelector) Reset() {
	*x = ScheduleSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_wfm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleSelector) ProtoMessage() {}

func (x *ScheduleSelector) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleSelector.ProtoReflect.Descriptor instead.
func (*ScheduleSelector) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{11}
}

func (x *ScheduleSelector) GetScheduleSid() int64 {
	if x != nil {
		return x.ScheduleSid
	}
	return 0
}

func (x *ScheduleSelector) GetScheduleType() ScheduleType {
	if x != nil {
		return x.ScheduleType
	}
	return ScheduleType_DRAFT
}

var File_api_commons_wfm_proto protoreflect.FileDescriptor

var file_api_commons_wfm_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x77, 0x66,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x5e, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x48,
	0x55, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x42, 0x58, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x55,
	0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x42, 0x58, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x42, 0x58, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x10, 0x05, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa4, 0x06, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x1f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x1b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x12, 0x6c, 0x0a, 0x24, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x57, 0x65, 0x65, 0x6b,
	0x73, 0x12, 0x37, 0x0a, 0x17, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x54, 0x0a, 0x17, 0x66, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x01, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x42, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x19, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x73, 0x12, 0x5d, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x02, 0x52, 0x19, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xc4, 0x01,
	0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x4f, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x73, 0x75,
	0x6e, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x74,
	0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73,
	0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65,
	0x73, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x75,
	0x72, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x73, 0x61, 0x74, 0x75,
	0x72, 0x64, 0x61, 0x79, 0x22, 0xb1, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x57, 0x4f, 0x4d, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x6a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x65, 0x62, 0x72, 0x75, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x08, 0x66, 0x65, 0x62, 0x72, 0x75, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x6d, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x72, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x05, 0x61, 0x70, 0x72, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x79, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x75, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x6a, 0x75, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6a, 0x75, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x6a, 0x75, 0x6c, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x67, 0x75, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x06, 0x61, 0x75, 0x67, 0x75, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x70, 0x74,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x73, 0x65, 0x70,
	0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x63, 0x74, 0x6f, 0x62, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x6f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x08, 0x6e, 0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08,
	0x64, 0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc4, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x4f, 0x57, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64, 0x61,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x72, 0x69, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x66, 0x72, 0x69,
	0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x22,
	0xb0, 0x02, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x4f, 0x59, 0x12, 0x18,
	0x0a, 0x07, 0x6a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x6a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x62, 0x72,
	0x75, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x65, 0x62, 0x72,
	0x75, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x72, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x70, 0x72, 0x69, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d,
	0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x75, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x6a, 0x75, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x75, 0x6c, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6a, 0x75, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75,
	0x67, 0x75, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x75, 0x67, 0x75,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x70, 0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x65, 0x70, 0x74, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x6f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f,
	0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x6f,
	0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x65, 0x63, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x80, 0x02, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x4f, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x77, 0x6f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x57, 0x4f, 0x4d, 0x53, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x57, 0x6f, 0x6d,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x4f, 0x57, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x12, 0x38, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x4f, 0x59, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4d, 0x6f, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x53, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x67, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x53, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x52, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x3e,
	0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2a, 0xa8,
	0x01, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x46, 0x4f, 0x52, 0x45,
	0x53, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44, 0x41, 0x42, 0x4f, 0x4f, 0x53, 0x54,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x41, 0x44, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x4f, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x4e,
	0x45, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f, 0x41, 0x56, 0x47, 0x10, 0x04,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x49,
	0x4e, 0x45, 0x41, 0x52, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4c, 0x50, 0x10, 0x06, 0x12,
	0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x07, 0x2a, 0x58, 0x0a, 0x26, 0x52, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x76, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4f, 0x52, 0x45, 0x43, 0x41, 0x53, 0x54, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x53, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45,
	0x53, 0x10, 0x02, 0x2a, 0x64, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e,
	0x55, 0x54, 0x45, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x49, 0x46, 0x54, 0x53, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x41, 0x59, 0x53, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x45, 0x45, 0x4b, 0x53,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x59, 0x45, 0x41, 0x52, 0x53, 0x10, 0x06, 0x2a, 0xc2, 0x02, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x48, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x46, 0x4d, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45,
	0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54,
	0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x4e, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x09, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x45, 0x4e, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x0c,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43,
	0x49, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x41, 0x52, 0x49, 0x4f, 0x10, 0x0e, 0x2a, 0xc1,
	0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x45, 0x43, 0x5f, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x58, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x45, 0x43, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x43, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x43, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c,
	0x5f, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x4e, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41,
	0x58, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x08, 0x2a, 0x33, 0x0a, 0x10, 0x44, 0x4f, 0x57, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x4d, 0x55, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x27, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01,
	0x2a, 0x50, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x2a, 0x4a, 0x0a, 0x09, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x55, 0x45, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x48,
	0x55, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x52, 0x49, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x41, 0x54, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4e, 0x10, 0x06, 0x2a, 0x5e,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x53, 0x5f, 0x41,
	0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43,
	0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x49, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x10, 0x02, 0x2a, 0x69,
	0x0a, 0x0f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0xf5, 0x07, 0x0a, 0x0e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x5f, 0x49,
	0x4e, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x49,
	0x45, 0x53, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41,
	0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x31, 0x0a,
	0x2d, 0x4e, 0x4f, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x10, 0x05,
	0x12, 0x35, 0x0a, 0x31, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x48, 0x49, 0x46, 0x54,
	0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x42, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x48,
	0x49, 0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x53,
	0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55,
	0x4c, 0x45, 0x53, 0x10, 0x08, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x4f, 0x5f, 0x4f, 0x4e, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50,
	0x4c, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x53, 0x10, 0x09, 0x12, 0x39, 0x0a, 0x35, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x54,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x10,
	0x0a, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x4f,
	0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x49, 0x45, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e,
	0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x48, 0x49,
	0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x10, 0x10, 0x12, 0x1c,
	0x0a, 0x18, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e,
	0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x13, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x14, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48,
	0x41, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x15, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x10, 0x16, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x17, 0x12, 0x2d,
	0x0a, 0x29, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x48, 0x41, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x18, 0x12, 0x42, 0x0a,
	0x3e, 0x4e, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43,
	0x49, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10,
	0x19, 0x2a, 0xca, 0x01, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x46,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x56, 0x53, 0x5f, 0x41,
	0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x44, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x00,
	0x12, 0x25, 0x0a, 0x21, 0x46, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x5f, 0x56, 0x53, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x44, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49,
	0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x52, 0x49, 0x58, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x43, 0x41, 0x53, 0x54, 0x10, 0x05, 0x2a, 0x7c,
	0x0a, 0x15, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x4e, 0x4c, 0x59, 0x5f,
	0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10, 0x01, 0x12,
	0x2b, 0x0a, 0x27, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10, 0x02, 0x2a, 0x28, 0x0a, 0x0c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x37, 0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x01, 0x42,
	0x4c, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x63, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x72, 0x69,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5a, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_wfm_proto_rawDescOnce sync.Once
	file_api_commons_wfm_proto_rawDescData = file_api_commons_wfm_proto_rawDesc
)

func file_api_commons_wfm_proto_rawDescGZIP() []byte {
	file_api_commons_wfm_proto_rawDescOnce.Do(func() {
		file_api_commons_wfm_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_wfm_proto_rawDescData)
	})
	return file_api_commons_wfm_proto_rawDescData
}

var file_api_commons_wfm_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_api_commons_wfm_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_commons_wfm_proto_goTypes = []interface{}{
	(RegressionForecasterModelTypes)(0),         // 0: api.commons.RegressionForecasterModelTypes
	(RegressionForecasterAvgsProcessingType)(0), // 1: api.commons.RegressionForecasterAvgsProcessingType
	(ConstraintTimeUnit)(0),                     // 2: api.commons.ConstraintTimeUnit
	(ConfigEntityType)(0),                       // 3: api.commons.ConfigEntityType
	(ConstraintRuleType)(0),                     // 4: api.commons.ConstraintRuleType
	(DOWPlacementType)(0),                       // 5: api.commons.DOWPlacementType
	(OpenTimesOption)(0),                        // 6: api.commons.OpenTimesOption
	(AvailabilityOption)(0),                     // 7: api.commons.AvailabilityOption
	(DayOfWeek)(0),                              // 8: api.commons.DayOfWeek
	(ConfigRelationshipType)(0),                 // 9: api.commons.ConfigRelationshipType
	(DiagnosticLevel)(0),                        // 10: api.commons.DiagnosticLevel
	(DiagnosticCode)(0),                         // 11: api.commons.DiagnosticCode
	(PerformanceMetricType)(0),                  // 12: api.commons.PerformanceMetricType
	(ScheduleShouldInclude)(0),                  // 13: api.commons.ScheduleShouldInclude
	(ScheduleType)(0),                           // 14: api.commons.ScheduleType
	(SchedulingTargetType)(0),                   // 15: api.commons.SchedulingTargetType
	(SkillType_Enum)(0),                         // 16: api.commons.SkillType.Enum
	(*SkillType)(nil),                           // 17: api.commons.SkillType
	(*DatetimeRange)(nil),                       // 18: api.commons.DatetimeRange
	(*ForecastingParameters)(nil),               // 19: api.commons.ForecastingParameters
	(*ProfileTOD)(nil),                          // 20: api.commons.ProfileTOD
	(*ProfileWOMS)(nil),                         // 21: api.commons.ProfileWOMS
	(*ProfileDOW)(nil),                          // 22: api.commons.ProfileDOW
	(*ProfileMOY)(nil),                          // 23: api.commons.ProfileMOY
	(*DistributionProfile)(nil),                 // 24: api.commons.DistributionProfile
	(*CallProfileGroupCalls)(nil),               // 25: api.commons.CallProfileGroupCalls
	(*CallProfileGroupAvgs)(nil),                // 26: api.commons.CallProfileGroupAvgs
	(*OptionTypes)(nil),                         // 27: api.commons.OptionTypes
	(*ScheduleSelector)(nil),                    // 28: api.commons.ScheduleSelector
	(*timestamppb.Timestamp)(nil),               // 29: google.protobuf.Timestamp
}
var file_api_commons_wfm_proto_depIdxs = []int32{
	29, // 0: api.commons.DatetimeRange.start_datetime:type_name -> google.protobuf.Timestamp
	29, // 1: api.commons.DatetimeRange.end_datetime:type_name -> google.protobuf.Timestamp
	29, // 2: api.commons.ForecastingParameters.historical_data_range_start_datetime:type_name -> google.protobuf.Timestamp
	18, // 3: api.commons.ForecastingParameters.forecast_datetime_range:type_name -> api.commons.DatetimeRange
	18, // 4: api.commons.ForecastingParameters.training_data_datetime_range:type_name -> api.commons.DatetimeRange
	20, // 5: api.commons.DistributionProfile.profile_tod:type_name -> api.commons.ProfileTOD
	21, // 6: api.commons.DistributionProfile.profile_woms:type_name -> api.commons.ProfileWOMS
	22, // 7: api.commons.DistributionProfile.profile_dow:type_name -> api.commons.ProfileDOW
	23, // 8: api.commons.DistributionProfile.profile_moy:type_name -> api.commons.ProfileMOY
	24, // 9: api.commons.CallProfileGroupCalls.distribution_profile:type_name -> api.commons.DistributionProfile
	24, // 10: api.commons.CallProfileGroupAvgs.distribution_profile:type_name -> api.commons.DistributionProfile
	6,  // 11: api.commons.OptionTypes.open_times_option:type_name -> api.commons.OpenTimesOption
	7,  // 12: api.commons.OptionTypes.availability_option:type_name -> api.commons.AvailabilityOption
	14, // 13: api.commons.ScheduleSelector.schedule_type:type_name -> api.commons.ScheduleType
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_api_commons_wfm_proto_init() }
func file_api_commons_wfm_proto_init() {
	if File_api_commons_wfm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_commons_wfm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_wfm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatetimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_wfm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForecastingParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_wfm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileTOD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_wfm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileWOMS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_wfm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileDOW); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_wfm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileMOY); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_wfm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributionProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_wfm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallProfileGroupCalls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_wfm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallProfileGroupAvgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_wfm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_wfm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_commons_wfm_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ForecastingParameters_HistoricalDataRangeInMonths)(nil),
		(*ForecastingParameters_HistoricalDataRangeStartDatetime)(nil),
		(*ForecastingParameters_ForecastRangeInWeeks)(nil),
		(*ForecastingParameters_ForecastDatetimeRange)(nil),
		(*ForecastingParameters_TrainingDataRangeInMonths)(nil),
		(*ForecastingParameters_TrainingDataDatetimeRange)(nil),
	}
	file_api_commons_wfm_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*OptionTypes_OpenTimesOption)(nil),
		(*OptionTypes_AvailabilityOption)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_wfm_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_wfm_proto_goTypes,
		DependencyIndexes: file_api_commons_wfm_proto_depIdxs,
		EnumInfos:         file_api_commons_wfm_proto_enumTypes,
		MessageInfos:      file_api_commons_wfm_proto_msgTypes,
	}.Build()
	File_api_commons_wfm_proto = out.File
	file_api_commons_wfm_proto_rawDesc = nil
	file_api_commons_wfm_proto_goTypes = nil
	file_api_commons_wfm_proto_depIdxs = nil
}
