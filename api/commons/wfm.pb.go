// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/commons/wfm.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum representing the different types of models for the regression forecaster.
type RegressionForecasterModelTypes int32

const (
	RegressionForecasterModelTypes_RANDOM_FOREST     RegressionForecasterModelTypes = 0
	RegressionForecasterModelTypes_ADABOOST          RegressionForecasterModelTypes = 1
	RegressionForecasterModelTypes_GRADIENT_BOOSTING RegressionForecasterModelTypes = 2
	RegressionForecasterModelTypes_LINEAR_REGRESSION RegressionForecasterModelTypes = 3
	RegressionForecasterModelTypes_LINEAR_AVG        RegressionForecasterModelTypes = 4
	RegressionForecasterModelTypes_SEGMENTED_LINEAR  RegressionForecasterModelTypes = 5
	RegressionForecasterModelTypes_MLP               RegressionForecasterModelTypes = 6
	RegressionForecasterModelTypes_AUTO              RegressionForecasterModelTypes = 7
)

// Enum value maps for RegressionForecasterModelTypes.
var (
	RegressionForecasterModelTypes_name = map[int32]string{
		0: "RANDOM_FOREST",
		1: "ADABOOST",
		2: "GRADIENT_BOOSTING",
		3: "LINEAR_REGRESSION",
		4: "LINEAR_AVG",
		5: "SEGMENTED_LINEAR",
		6: "MLP",
		7: "AUTO",
	}
	RegressionForecasterModelTypes_value = map[string]int32{
		"RANDOM_FOREST":     0,
		"ADABOOST":          1,
		"GRADIENT_BOOSTING": 2,
		"LINEAR_REGRESSION": 3,
		"LINEAR_AVG":        4,
		"SEGMENTED_LINEAR":  5,
		"MLP":               6,
		"AUTO":              7,
	}
)

func (x RegressionForecasterModelTypes) Enum() *RegressionForecasterModelTypes {
	p := new(RegressionForecasterModelTypes)
	*p = x
	return p
}

func (x RegressionForecasterModelTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegressionForecasterModelTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[0].Descriptor()
}

func (RegressionForecasterModelTypes) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[0]
}

func (x RegressionForecasterModelTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegressionForecasterModelTypes.Descriptor instead.
func (RegressionForecasterModelTypes) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{0}
}

type RegressionForecasterAvgsProcessingType int32

const (
	// a complete forecast is built for each skill profile for ACW/ASA/AHT/ATAB
	RegressionForecasterAvgsProcessingType_FORECAST RegressionForecasterAvgsProcessingType = 0
	// an average from the training data is built for each skill profile for ACW/ASA/AHT/ATAB
	RegressionForecasterAvgsProcessingType_AVERAGES RegressionForecasterAvgsProcessingType = 1
	// Fixed values are used for  ACW/ASA/AHT/ATAB
	RegressionForecasterAvgsProcessingType_FIXED_AVERAGES RegressionForecasterAvgsProcessingType = 2
)

// Enum value maps for RegressionForecasterAvgsProcessingType.
var (
	RegressionForecasterAvgsProcessingType_name = map[int32]string{
		0: "FORECAST",
		1: "AVERAGES",
		2: "FIXED_AVERAGES",
	}
	RegressionForecasterAvgsProcessingType_value = map[string]int32{
		"FORECAST":       0,
		"AVERAGES":       1,
		"FIXED_AVERAGES": 2,
	}
)

func (x RegressionForecasterAvgsProcessingType) Enum() *RegressionForecasterAvgsProcessingType {
	p := new(RegressionForecasterAvgsProcessingType)
	*p = x
	return p
}

func (x RegressionForecasterAvgsProcessingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegressionForecasterAvgsProcessingType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[1].Descriptor()
}

func (RegressionForecasterAvgsProcessingType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[1]
}

func (x RegressionForecasterAvgsProcessingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegressionForecasterAvgsProcessingType.Descriptor instead.
func (RegressionForecasterAvgsProcessingType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{1}
}

// enum representing the units of time a ConstraintRule uses
type ConstraintTimeUnit int32

const (
	ConstraintTimeUnit_MINUTES ConstraintTimeUnit = 0
	ConstraintTimeUnit_HOURS   ConstraintTimeUnit = 1
	ConstraintTimeUnit_SHIFTS  ConstraintTimeUnit = 2
	ConstraintTimeUnit_DAYS    ConstraintTimeUnit = 3
	ConstraintTimeUnit_WEEKS   ConstraintTimeUnit = 4
	ConstraintTimeUnit_MONTHS  ConstraintTimeUnit = 5
	ConstraintTimeUnit_YEARS   ConstraintTimeUnit = 6
)

// Enum value maps for ConstraintTimeUnit.
var (
	ConstraintTimeUnit_name = map[int32]string{
		0: "MINUTES",
		1: "HOURS",
		2: "SHIFTS",
		3: "DAYS",
		4: "WEEKS",
		5: "MONTHS",
		6: "YEARS",
	}
	ConstraintTimeUnit_value = map[string]int32{
		"MINUTES": 0,
		"HOURS":   1,
		"SHIFTS":  2,
		"DAYS":    3,
		"WEEKS":   4,
		"MONTHS":  5,
		"YEARS":   6,
	}
)

func (x ConstraintTimeUnit) Enum() *ConstraintTimeUnit {
	p := new(ConstraintTimeUnit)
	*p = x
	return p
}

func (x ConstraintTimeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstraintTimeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[2].Descriptor()
}

func (ConstraintTimeUnit) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[2]
}

func (x ConstraintTimeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstraintTimeUnit.Descriptor instead.
func (ConstraintTimeUnit) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{2}
}

type ConfigEntityType int32

const (
	// entity is a call center node.
	ConfigEntityType_CALL_CENTER_NODE ConfigEntityType = 0
	// entity is a client node.
	ConfigEntityType_CLIENT_NODE ConfigEntityType = 1
	// entity is a location node.
	ConfigEntityType_LOCATION_NODE ConfigEntityType = 2
	// entity is a program node.
	ConfigEntityType_PROGRAM_NODE ConfigEntityType = 3
	// entity is an agent group.
	ConfigEntityType_AGENT_GROUP ConfigEntityType = 4
	// entity is a shift template.
	ConfigEntityType_SHIFT_TEMPLATE ConfigEntityType = 5
	// entity is a wfm agent.
	ConfigEntityType_WFM_AGENT ConfigEntityType = 6
	// entity is a placement rule.
	ConfigEntityType_PLACEMENT_RULE ConfigEntityType = 7
	// entity is a constraint rule.
	ConfigEntityType_CONSTRAINT_RULE ConfigEntityType = 8
	// entity is a non skill activity.
	ConfigEntityType_NON_SKILL_ACTIVITY ConfigEntityType = 9
	// entity is an agent availability.
	ConfigEntityType_AGENT_AVAILABILITY ConfigEntityType = 10
	// entity is an open times.
	ConfigEntityType_OPEN_TIMES ConfigEntityType = 11
	// entity is a scheduling activity.
	ConfigEntityType_SCHEDULING_ACTIVITY ConfigEntityType = 12
	// entity is a skill proficiency.
	ConfigEntityType_SKILL_PROFICIENCY ConfigEntityType = 13
	// entity is a schedule scenario.
	ConfigEntityType_SCHEDULE_SCENARIO ConfigEntityType = 14
	// entity is a skill.
	ConfigEntityType_SKILL ConfigEntityType = 15
	// entity is a tour pattern.
	ConfigEntityType_TOUR_PATTERN ConfigEntityType = 16
	// entity is a tour week pattern.
	ConfigEntityType_TOUR_WEEK_PATTERN ConfigEntityType = 17
	// entity is a tour shift instance config.
	ConfigEntityType_TOUR_SHIFT_INSTANCE_CONFIG ConfigEntityType = 18
	// entity is a tour shift segment config.
	ConfigEntityType_TOUR_SHIFT_SEGMENT_CONFIG ConfigEntityType = 19
	// entity is a tour agent collection.
	ConfigEntityType_TOUR_AGENT_COLLECTION ConfigEntityType = 20
)

// Enum value maps for ConfigEntityType.
var (
	ConfigEntityType_name = map[int32]string{
		0:  "CALL_CENTER_NODE",
		1:  "CLIENT_NODE",
		2:  "LOCATION_NODE",
		3:  "PROGRAM_NODE",
		4:  "AGENT_GROUP",
		5:  "SHIFT_TEMPLATE",
		6:  "WFM_AGENT",
		7:  "PLACEMENT_RULE",
		8:  "CONSTRAINT_RULE",
		9:  "NON_SKILL_ACTIVITY",
		10: "AGENT_AVAILABILITY",
		11: "OPEN_TIMES",
		12: "SCHEDULING_ACTIVITY",
		13: "SKILL_PROFICIENCY",
		14: "SCHEDULE_SCENARIO",
		15: "SKILL",
		16: "TOUR_PATTERN",
		17: "TOUR_WEEK_PATTERN",
		18: "TOUR_SHIFT_INSTANCE_CONFIG",
		19: "TOUR_SHIFT_SEGMENT_CONFIG",
		20: "TOUR_AGENT_COLLECTION",
	}
	ConfigEntityType_value = map[string]int32{
		"CALL_CENTER_NODE":           0,
		"CLIENT_NODE":                1,
		"LOCATION_NODE":              2,
		"PROGRAM_NODE":               3,
		"AGENT_GROUP":                4,
		"SHIFT_TEMPLATE":             5,
		"WFM_AGENT":                  6,
		"PLACEMENT_RULE":             7,
		"CONSTRAINT_RULE":            8,
		"NON_SKILL_ACTIVITY":         9,
		"AGENT_AVAILABILITY":         10,
		"OPEN_TIMES":                 11,
		"SCHEDULING_ACTIVITY":        12,
		"SKILL_PROFICIENCY":          13,
		"SCHEDULE_SCENARIO":          14,
		"SKILL":                      15,
		"TOUR_PATTERN":               16,
		"TOUR_WEEK_PATTERN":          17,
		"TOUR_SHIFT_INSTANCE_CONFIG": 18,
		"TOUR_SHIFT_SEGMENT_CONFIG":  19,
		"TOUR_AGENT_COLLECTION":      20,
	}
)

func (x ConfigEntityType) Enum() *ConfigEntityType {
	p := new(ConfigEntityType)
	*p = x
	return p
}

func (x ConfigEntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigEntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[3].Descriptor()
}

func (ConfigEntityType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[3]
}

func (x ConfigEntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigEntityType.Descriptor instead.
func (ConfigEntityType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{3}
}

// enum representing the different types of Constraint Rules
type ConstraintRuleType int32

const (
	ConstraintRuleType_MIN_CONSEC_ON   ConstraintRuleType = 0
	ConstraintRuleType_MAX_CONSEC_ON   ConstraintRuleType = 1
	ConstraintRuleType_MIN_CONSEC_OFF  ConstraintRuleType = 2
	ConstraintRuleType_MAX_CONSEC_OFF  ConstraintRuleType = 3
	ConstraintRuleType_MIN_TOTAL_ON    ConstraintRuleType = 4
	ConstraintRuleType_MAX_TOTAL_ON    ConstraintRuleType = 5
	ConstraintRuleType_MIN_TOTAL_OFF   ConstraintRuleType = 6
	ConstraintRuleType_MAX_TOTAL_OFF   ConstraintRuleType = 7
	ConstraintRuleType_MIN_SKILL_LEVEL ConstraintRuleType = 8
)

// Enum value maps for ConstraintRuleType.
var (
	ConstraintRuleType_name = map[int32]string{
		0: "MIN_CONSEC_ON",
		1: "MAX_CONSEC_ON",
		2: "MIN_CONSEC_OFF",
		3: "MAX_CONSEC_OFF",
		4: "MIN_TOTAL_ON",
		5: "MAX_TOTAL_ON",
		6: "MIN_TOTAL_OFF",
		7: "MAX_TOTAL_OFF",
		8: "MIN_SKILL_LEVEL",
	}
	ConstraintRuleType_value = map[string]int32{
		"MIN_CONSEC_ON":   0,
		"MAX_CONSEC_ON":   1,
		"MIN_CONSEC_OFF":  2,
		"MAX_CONSEC_OFF":  3,
		"MIN_TOTAL_ON":    4,
		"MAX_TOTAL_ON":    5,
		"MIN_TOTAL_OFF":   6,
		"MAX_TOTAL_OFF":   7,
		"MIN_SKILL_LEVEL": 8,
	}
)

func (x ConstraintRuleType) Enum() *ConstraintRuleType {
	p := new(ConstraintRuleType)
	*p = x
	return p
}

func (x ConstraintRuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstraintRuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[4].Descriptor()
}

func (ConstraintRuleType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[4]
}

func (x ConstraintRuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstraintRuleType.Descriptor instead.
func (ConstraintRuleType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{4}
}

// Enum representing the different types of placements for the DOW Placement.
type DOWPlacementType int32

const (
	DOWPlacementType_MUST_NOT DOWPlacementType = 0
	DOWPlacementType_MAY      DOWPlacementType = 1
	DOWPlacementType_MUST     DOWPlacementType = 2
)

// Enum value maps for DOWPlacementType.
var (
	DOWPlacementType_name = map[int32]string{
		0: "MUST_NOT",
		1: "MAY",
		2: "MUST",
	}
	DOWPlacementType_value = map[string]int32{
		"MUST_NOT": 0,
		"MAY":      1,
		"MUST":     2,
	}
)

func (x DOWPlacementType) Enum() *DOWPlacementType {
	p := new(DOWPlacementType)
	*p = x
	return p
}

func (x DOWPlacementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOWPlacementType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[5].Descriptor()
}

func (DOWPlacementType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[5]
}

func (x DOWPlacementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DOWPlacementType.Descriptor instead.
func (DOWPlacementType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{5}
}

// Enum representing the options for open times.
type OpenTimesOption int32

const (
	OpenTimesOption_CLOSED OpenTimesOption = 0
	OpenTimesOption_OPEN   OpenTimesOption = 1
)

// Enum value maps for OpenTimesOption.
var (
	OpenTimesOption_name = map[int32]string{
		0: "CLOSED",
		1: "OPEN",
	}
	OpenTimesOption_value = map[string]int32{
		"CLOSED": 0,
		"OPEN":   1,
	}
)

func (x OpenTimesOption) Enum() *OpenTimesOption {
	p := new(OpenTimesOption)
	*p = x
	return p
}

func (x OpenTimesOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenTimesOption) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[6].Descriptor()
}

func (OpenTimesOption) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[6]
}

func (x OpenTimesOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenTimesOption.Descriptor instead.
func (OpenTimesOption) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{6}
}

// Enum representing the options for agent availability.
type AvailabilityOption int32

const (
	AvailabilityOption_AVAILABLE            AvailabilityOption = 0
	AvailabilityOption_NOT_AVAILABLE        AvailabilityOption = 1
	AvailabilityOption_PREFER_NOT_AVAILABLE AvailabilityOption = 2
)

// Enum value maps for AvailabilityOption.
var (
	AvailabilityOption_name = map[int32]string{
		0: "AVAILABLE",
		1: "NOT_AVAILABLE",
		2: "PREFER_NOT_AVAILABLE",
	}
	AvailabilityOption_value = map[string]int32{
		"AVAILABLE":            0,
		"NOT_AVAILABLE":        1,
		"PREFER_NOT_AVAILABLE": 2,
	}
)

func (x AvailabilityOption) Enum() *AvailabilityOption {
	p := new(AvailabilityOption)
	*p = x
	return p
}

func (x AvailabilityOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailabilityOption) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[7].Descriptor()
}

func (AvailabilityOption) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[7]
}

func (x AvailabilityOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailabilityOption.Descriptor instead.
func (AvailabilityOption) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{7}
}

// Enum representing the options for day of the week, Monday must be 0.
type DayOfWeek int32

const (
	DayOfWeek_MON DayOfWeek = 0
	DayOfWeek_TUE DayOfWeek = 1
	DayOfWeek_WED DayOfWeek = 2
	DayOfWeek_THU DayOfWeek = 3
	DayOfWeek_FRI DayOfWeek = 4
	DayOfWeek_SAT DayOfWeek = 5
	DayOfWeek_SUN DayOfWeek = 6
)

// Enum value maps for DayOfWeek.
var (
	DayOfWeek_name = map[int32]string{
		0: "MON",
		1: "TUE",
		2: "WED",
		3: "THU",
		4: "FRI",
		5: "SAT",
		6: "SUN",
	}
	DayOfWeek_value = map[string]int32{
		"MON": 0,
		"TUE": 1,
		"WED": 2,
		"THU": 3,
		"FRI": 4,
		"SAT": 5,
		"SUN": 6,
	}
)

func (x DayOfWeek) Enum() *DayOfWeek {
	p := new(DayOfWeek)
	*p = x
	return p
}

func (x DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[8].Descriptor()
}

func (DayOfWeek) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[8]
}

func (x DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DayOfWeek.Descriptor instead.
func (DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{8}
}

// Enum representing the options for config entity relationships.
type ConfigRelationshipType int32

const (
	// The entity is associated with the other one.
	ConfigRelationshipType_IS_ASSOCIATED_WITH ConfigRelationshipType = 0
	// The entity is NOT associated with the other one.
	ConfigRelationshipType_IS_NOT_ASSOCIATED_WITH ConfigRelationshipType = 1
	// The entity is a member of the other one.
	ConfigRelationshipType_IS_MEMBER_OF ConfigRelationshipType = 2
)

// Enum value maps for ConfigRelationshipType.
var (
	ConfigRelationshipType_name = map[int32]string{
		0: "IS_ASSOCIATED_WITH",
		1: "IS_NOT_ASSOCIATED_WITH",
		2: "IS_MEMBER_OF",
	}
	ConfigRelationshipType_value = map[string]int32{
		"IS_ASSOCIATED_WITH":     0,
		"IS_NOT_ASSOCIATED_WITH": 1,
		"IS_MEMBER_OF":           2,
	}
)

func (x ConfigRelationshipType) Enum() *ConfigRelationshipType {
	p := new(ConfigRelationshipType)
	*p = x
	return p
}

func (x ConfigRelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigRelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[9].Descriptor()
}

func (ConfigRelationshipType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[9]
}

func (x ConfigRelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigRelationshipType.Descriptor instead.
func (ConfigRelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{9}
}

// Enum representing the level of a diagnostic.
type DiagnosticLevel int32

const (
	// The diagnostic is reporting an information level report.
	DiagnosticLevel_INFORMATION DiagnosticLevel = 0
	// The diagnostic is reporting a suggestion level report.
	DiagnosticLevel_SUGGESTION DiagnosticLevel = 1
	// The diagnostic is reporting a warning level report.
	DiagnosticLevel_WARNING DiagnosticLevel = 2
	// The diagnostic is reporting an error level report.
	DiagnosticLevel_DIAGNOSTIC_ERROR DiagnosticLevel = 3
	// The diagnostic is reporting an internal error level report.
	DiagnosticLevel_INTERNAL_ERROR DiagnosticLevel = 4
)

// Enum value maps for DiagnosticLevel.
var (
	DiagnosticLevel_name = map[int32]string{
		0: "INFORMATION",
		1: "SUGGESTION",
		2: "WARNING",
		3: "DIAGNOSTIC_ERROR",
		4: "INTERNAL_ERROR",
	}
	DiagnosticLevel_value = map[string]int32{
		"INFORMATION":      0,
		"SUGGESTION":       1,
		"WARNING":          2,
		"DIAGNOSTIC_ERROR": 3,
		"INTERNAL_ERROR":   4,
	}
)

func (x DiagnosticLevel) Enum() *DiagnosticLevel {
	p := new(DiagnosticLevel)
	*p = x
	return p
}

func (x DiagnosticLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[10].Descriptor()
}

func (DiagnosticLevel) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[10]
}

func (x DiagnosticLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticLevel.Descriptor instead.
func (DiagnosticLevel) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{10}
}

// Enum representing the type of a diagnostic.
type DiagnosticCode int32

const (
	// DiagnosticCodeGeneral integer value for a diagnostic coded as 'general' type.
	// The code type used when no other code is appropriate.
	// GENERAL means that this diagnostic message cannot be described by a code.
	// The consumer must interpret the text message for further details.
	DiagnosticCode_GENERAL DiagnosticCode = 0
	// DiagnosticCodeOk integer value for a diagnostic coded as 'ok' type.
	// The diagnostic is reporting no errors found.
	DiagnosticCode_OK DiagnosticCode = 1
	// DiagnosticCodeNoSkillsInDictionary integer value for a diagnostic coded as 'no skills in dictionary' type.
	// The diagnostic is reporting no skills in the dictionary.
	DiagnosticCode_NO_SKILLS_IN_DICTIONARY DiagnosticCode = 2
	// DiagnosticCodeAgentHasNoSkillProficiencies integer value for a diagnostic coded as
	// 'agent has no skill proficiencies' type.
	// The diagnostic is reporting a wfm agent with no skill proficiencies.
	DiagnosticCode_AGENT_HAS_NO_SKILL_PROFICIENCIES DiagnosticCode = 3
	// DiagnosticCodeAgentHasNoSkills integer value for a diagnostic coded as 'agent has no skills' type.
	// The diagnostic is reporting an agent with no skills.
	DiagnosticCode_AGENT_HAS_NO_SKILLS DiagnosticCode = 4
	// DiagnosticCodeNoSchedulingActivitiesForConstraintRules integer value for a diagnostic coded as
	// 'no scheduling activity for constraint rules' type.
	// The diagnostic is reporting the constraint rules don't have a scheduling activity.
	DiagnosticCode_NO_SCHEDULING_ACTIVITIES_FOR_CONSTRAINT_RULES DiagnosticCode = 5
	// DiagnosticCodeSchedulingActivityForConstraintRuleNotFound integer value for a diagnostic coded as
	// 'scheduling activity for constraint rule not found' type.
	// The diagnostic is reporting a constraint rule pointing to a scheduling activity that cannot be found.
	DiagnosticCode_SCHEDULING_ACTIVITY_FOR_CONSTRAINT_RULE_NOT_FOUND DiagnosticCode = 6
	// DiagnosticCodeShiftTemplateCannotBeNone integer value for a diagnostic coded as
	// 'shift template cannot be none' type.
	// The diagnostic is reporting a NONE value for a shift template
	DiagnosticCode_SHIFT_TEMPLATE_CANNOT_BE_NONE DiagnosticCode = 7
	// DiagnosticCodeShiftTemplateHasNoPlacementRules integer value for a diagnostic coded as
	// 'shift template has no placement rules' type.
	// The diagnostic is reporting a shift template with no member placement rules.
	DiagnosticCode_SHIFT_TEMPLATE_HAS_NO_PLACEMENT_RULES DiagnosticCode = 8
	// DiagnosticCodeNoOncallInShiftTemplatePlacementRules integer value for a diagnostic coded as
	// 'no on-call in shift template placement rules' type.
	// The diagnostic is reporting a shift template whose placement rules do not include an on-call placement.
	DiagnosticCode_NO_ONCALL_IN_SHIFT_TEMPLATE_PLACEMENT_RULES DiagnosticCode = 9
	// DiagnosticCodeMinGtMaxDurationInShiftTemplatePlacementRules integer value for a diagnostic coded as
	// 'min greater than max in shift template placement rules' type.
	// The diagnostic is reporting the min duration for a shift templates placement rule is greater than max duration.
	DiagnosticCode_MIN_GT_MAX_DURATION_IN_SHIFT_TEMPLATE_PLACEMENT_RULES DiagnosticCode = 10
	// DiagnosticCodeMinGtMaxAgentsInShiftTemplate integer value for a diagnostic coded as
	// 'min greater than max agents in shift template' type.
	// The diagnostic is reporting a shift template with a min_agents value greater than it's max_agents value.
	DiagnosticCode_MIN_GT_MAX_AGENTS_IN_SHIFT_TEMPLATE DiagnosticCode = 11
	// DiagnosticCodeNoPlacementRulesForShiftTemplate integer value for a diagnostic coded as
	// 'no placement rules for shift template' type.
	// The diagnostic is reporting no placement rules as members of the shift template.
	DiagnosticCode_NO_PLACEMENT_RULES_FOR_SHIFT_TEMPLATE DiagnosticCode = 12
	// DiagnosticCodeActivitiesShorterThanShift integer value for a diagnostic coded as
	// 'activities shorter than shift' type.
	// The diagnostic is reporting that the activities are too short for the shift.
	DiagnosticCode_ACTIVITIES_SHORTER_THAN_SHIFT DiagnosticCode = 13
	// DiagnosticCodeNotEnoughAgentsForShift integer value for a diagnostic coded as 'not enough agents for shift' type.
	// The diagnostic is reporting that a shift doesn't have a sufficient number of agents available.
	DiagnosticCode_NOT_ENOUGH_AGENTS_FOR_SHIFT DiagnosticCode = 14
	// DiagnosticCodeProgramHasNoAgentGroups integer value for a diagnostic coded as 'program has no agent groups' type.
	// The diagnostic is reporting that a program node has no member agent groups.
	DiagnosticCode_PROGRAM_HAS_NO_AGENT_GROUPS DiagnosticCode = 15
	// DiagnosticCodeProgramHasNoShiftTemplates integer value for a diagnostic coded as
	// 'program has no shift templates' type.
	// The diagnostic is reporting that a program node has no member shift templates.
	DiagnosticCode_PROGRAM_HAS_NO_SHIFT_TEMPLATES DiagnosticCode = 16
	// DiagnosticCodeLocationHasNoPrograms integer value for a diagnostic coded as 'location has no programs' type.
	// The diagnostic is reporting that a location node has no member program nodes.
	DiagnosticCode_LOCATION_HAS_NO_PROGRAMS DiagnosticCode = 17
	// DiagnosticCodeClientHasNoLocations integer value for a diagnostic coded as 'client has no locations' type.
	// The diagnostic is reporting that a client node has no member location nodes.
	DiagnosticCode_CLIENT_HAS_NO_LOCATIONS DiagnosticCode = 18
	// DiagnosticCodeCallCenterHasNoClients integer value for a diagnostic coded as 'call center has no clients' type.
	// The diagnostic is reporting that a call center node has no member client nodes
	DiagnosticCode_CALL_CENTER_HAS_NO_CLIENTS DiagnosticCode = 19
	// DiagnosticCodeProgramHasInvalidParentLocation integer value for a diagnostic coded as
	// 'program has invalid parent location' type.
	// The diagnostic is reporting that a program node has an invalid parent location node.
	DiagnosticCode_PROGRAM_HAS_INVALID_PARENT_LOCATION DiagnosticCode = 20
	// DiagnosticCodeLocationHasInvalidParentClient integer value for a diagnostic coded as
	// 'location has invalid parent client' type.
	// The diagnostic is reporting that a location node has an invalid parent client node.
	DiagnosticCode_LOCATION_HAS_INVALID_PARENT_CLIENT DiagnosticCode = 21
	// DiagnosticCodeClientHasInvalidParentCallCenter integer value for a diagnostic coded as
	// 'client has invalid parent call center' type.
	// The diagnostic is reporting that a client node has an invalid parent call center.
	DiagnosticCode_CLIENT_HAS_INVALID_PARENT_CALL_CENTER DiagnosticCode = 22
	// DiagnosticCodeAgentGroupHasInvalidParentNode integer value for a diagnostic coded as
	// 'agent group has invalid parent node' type.
	// The diagnostic is reporting that an agent group has an invalid parent node.
	DiagnosticCode_AGENT_GROUP_HAS_INVALID_PARENT_NODE DiagnosticCode = 23
	// DiagnosticCodeShiftTemplateHasInvalidParentProgram integer value for a diagnostic coded as
	// 'shift template has invalid parent program' type.
	// The diagnostic is reporting an invalid parent program for a shift template.
	DiagnosticCode_SHIFT_TEMPLATE_HAS_INVALID_PARENT_PROGRAM DiagnosticCode = 24
	// DiagnosticCodeNoSkillProficiencyForMinSkillProficiencyConstraintRule integer value for a diagnostic coded as
	// 'skill proficiency for constraint rule not found' type.
	// The diagnostic is reporting a constraint rule pointing to a missing skill proficiency.
	DiagnosticCode_NO_SKILL_PROFICIENCY_FOR_MIN_SKILL_PROFICIENCY_CONSTRAINT_RULE DiagnosticCode = 25
	// DiagnosticCodeTooManyAgentsWithLockedShiftsForMinAgents integer value for a diagnostic coded as
	// 'too many agent with locked shifts' type.
	DiagnosticCode_TOO_MANY_AGENTS_WITH_LOCKED_SHIFTS_FOR_MIN_AGENTS DiagnosticCode = 26
	// DiagnosticCodeAgentDoesNotBelongToAnAgentGroup integer value for a diagnostic coded as
	// 'agent does not belong to an agent group' type.
	DiagnosticCode_AGENT_DOES_NOT_BELONG_TO_AN_AGENT_GROUP DiagnosticCode = 27
	// DiagnosticCodeInvalidConstraintValUnits integer value for a diagnostic coded as
	// 'Invalid constraint val units' type.
	DiagnosticCode_INVALID_CONSTRAINT_VAL_UNITS DiagnosticCode = 28
	// DiagnosticCodeConstraintGeneralFailure integer value for a diagnostic coded as 'Constraint general failure' type.
	DiagnosticCode_CONSTRAINT_GENERAL_FAILURE DiagnosticCode = 29
	// DiagnosticCodeCandidateShiftCollisionDetected integer value for a diagnostic coded as
	// 'Candidate shift collision detected' type.
	DiagnosticCode_CANDIDATE_SHIFT_COLLISION_DETECTED DiagnosticCode = 30
	// DiagnosticCodeCandidateShiftAgentNotAvailable integer value for a diagnostic coded as
	// 'Candidate shift agent not available' type.
	DiagnosticCode_CANDIDATE_SHIFT_AGENT_NOT_AVAILABLE DiagnosticCode = 31
	// DiagnosticCodeCandidateClosed integer value for a diagnostic coded as 'Candidate closed' type.
	DiagnosticCode_CANDIDATE_CLOSED DiagnosticCode = 32
	// DiagnosticCodeConstraintActivityNotFound integer value for a diagnostic coded as
	// 'Constraint activity not found' type.
	DiagnosticCode_CONSTRAINT_ACTIVITY_NOT_FOUND DiagnosticCode = 33
	// DiagnosticCodeConstraintAgentDoesNotHaveProficiency integer value for a diagnostic coded as
	// 'Constraint agent does not have proficiency' type.
	DiagnosticCode_CONSTRAINT_AGENT_DOES_NOT_HAVE_PROFICIENCY DiagnosticCode = 34
	// DiagnosticCodeConstraintAgentProficiencyTooLow integer value for a diagnostic coded as
	// 'Constraint agent proficiency too low' type.
	DiagnosticCode_CONSTRAINT_AGENT_PROFICIENCY_TOO_LOW DiagnosticCode = 35
	// DiagnosticCodeConstraintMaxTotalOnFailure integer value for a diagnostic coded as
	// 'Constraint max total on failure' type.
	DiagnosticCode_CONSTRAINT_MAX_TOTAL_ON_FAILURE DiagnosticCode = 36
	// DiagnosticCodeConstraintMinTotalOnFailure integer value for a diagnostic coded as
	// 'Constraint min total on failure' type.
	DiagnosticCode_CONSTRAINT_MIN_TOTAL_ON_FAILURE DiagnosticCode = 37
	// DiagnosticCodeConstraintMaxTotalOffFailure integer value for a diagnostic coded as
	// 'Constraint max total off failure' type.
	DiagnosticCode_CONSTRAINT_MAX_TOTAL_OFF_FAILURE DiagnosticCode = 38
	// DiagnosticCodeConstraintMinTotalOffFailure integer value for a diagnostic coded as
	// 'Constraint min total off failure' type.
	DiagnosticCode_CONSTRAINT_MIN_TOTAL_OFF_FAILURE DiagnosticCode = 39
	// DiagnosticCodeConstraintMaxConsecOnFailure integer value for a diagnostic coded as
	// 'Constraint max consec on failure' type.
	DiagnosticCode_CONSTRAINT_MAX_CONSEC_ON_FAILURE DiagnosticCode = 40
	// DiagnosticCodeConstraintMinConsecOnFailure integer value for a diagnostic coded as
	// 'Constraint min consec on failure' type.
	DiagnosticCode_CONSTRAINT_MIN_CONSEC_ON_FAILURE DiagnosticCode = 41
	// DiagnosticCodeConstraintMaxConsecOffFailure integer value for a diagnostic coded as
	// 'Constraint max consec off failure' type.
	DiagnosticCode_CONSTRAINT_MAX_CONSEC_OFF_FAILURE DiagnosticCode = 42
	// DiagnosticCodeConstraintMinConsecOffFailure integer value for a diagnostic coded as
	// 'Constraint min consec off failure' type.
	DiagnosticCode_CONSTRAINT_MIN_CONSEC_OFF_FAILURE DiagnosticCode = 43
	// DiagnosticCodeConstraintCannotHaveDayWeekMonthYearShiftPerShift integer value for a diagnostic coded as
	// 'Constraint cannot have day week month year shift per shift' type.
	DiagnosticCode_CONSTRAINT_CANNOT_HAVE_DAY_WEEK_MONTH_YEAR_SHIFT__PER_SHIFT DiagnosticCode = 44
	// DiagnosticCodeConstraintCannotHaveDayWeekMonthYearPerMinutesHours integer value for a diagnostic coded as
	// 'Constraint cannot have day week month year per minutes hours' type.
	DiagnosticCode_CONSTRAINT_CANNOT_HAVE_DAY_WEEK_MONTH_YEAR__PER_MINUTES_HOURS DiagnosticCode = 45
	// DiagnosticCodeConstraintConsecutiveShiftsRuleNotAllowed integer value for a diagnostic coded as
	// 'Constraint consecutive shifts rule not allowed' type.
	DiagnosticCode_CONSTRAINT_CONSECUTIVE_SHIFTS_RULE_NOT_ALLOWED DiagnosticCode = 46
	// DiagnosticCodeConstraintWithLargerPeriodPerSmallPeriodNotAllowed integer value for a diagnostic coded as
	// 'Constraint with larger period per small period not allowed' type.
	DiagnosticCode_CONSTRAINT_WITH_LARGER_PERIOD_PER_SMALL_PERIOD_NOT_ALLOWED DiagnosticCode = 47
	// DiagnosticCodeConstraintMinMaxOffTimeForShiftsNotAllowed integer value for a diagnostic coded as
	// 'Constraint min max off time for shifts not allowed' type.
	DiagnosticCode_CONSTRAINT_MIN_MAX_OFF_TIME_FOR_SHIFTS_NOT_ALLOWED DiagnosticCode = 48
	// DiagnosticCodeConstraintCannotHaveConsecutiveTimePerMultipleShifts integer value for a diagnostic coded as
	// 'Constraint cannot have consecutive time per multiple shifts' type.
	DiagnosticCode_CONSTRAINT_CANNOT_HAVE_CONSECUTIVE_TIME_PER_MULTIPLE_SHIFTS DiagnosticCode = 49
	// DiagnosticCodeCannotGenerateTourPatternsForNonTourShiftTemplate integer value for a diagnostic coded as
	// 'Cannot generate Tour Patterns for non Tour Shift Template' type.
	// The diagnostic is reporting that the shift template to generate a tour pattern for is not a tour shift template.
	DiagnosticCode_CANNOT_GENERATE_TOUR_PATTERNS_FOR_NON_TOUR_SHIFT_TEMPLATE DiagnosticCode = 50
	// DiagnosticCodeTourPatternsNeededToScheduleTour integer value for a diagnostic coded as
	// 'Cannot generate shifts for Tour Shift Template that has no Tour Patterns' type.
	// The diagnostic is reporting a tour shift template which does not have a tour pattern.
	DiagnosticCode_TOUR_PATTERNS_NEEDED_TO_SCHEDULE_TOUR DiagnosticCode = 51
	// DiagnosticCodeShiftTemplateActivityPlacementMinMaxMustBeMultipleOf5Minutes integer value for a diagnostic coded as
	// 'Shift Template Activity Placement Min Max Must Be Multiple Of 5 Minutes' type.
	// The diagnostic is reporting the shift template activity placement min max must be a multiple of 5 minutes.
	DiagnosticCode_SHIFT_TEMPLATE_ACTIVITY_PLACEMENT_MIN_MAX_MUST_BE_MULTIPLE_OF_5_MINUTES DiagnosticCode = 52
	// DiagnosticNoShiftTemplateActivityPlacementSequenciesMatchShiftMinMaxWidth integer value for a diagnostic coded as
	// 'No Shift Template Activity Placement sequences match any Shift Template widths' type.
	// The diagnostic is reporting that there are no placements for the shift template, which would comply with the min and max width.
	DiagnosticCode_NO_SHIFT_TEMPLATE_ACTIVITY_PLACEMENT_SEQUENCES_MATCH_SHIFT_MIN_MAX_WIDTH DiagnosticCode = 53
	// DiagnosticCodeInvalidTourPattern integer value for a diagnostic coded as
	// 'Invalid Tour Pattern' type.
	// The diagnostic is reporting the Tour Pattern entity is set with invalid values.
	DiagnosticCode_INVALID_TOUR_PATTERN DiagnosticCode = 54
	// DiagnosticCodeInvalidTourAgentCollection integer value for a diagnostic coded as
	// 'Invalid Tour Agent Collection' type.
	// The diagnostic is reporting the Tour Agent Collection entity is set with invalid values.
	DiagnosticCode_INVALID_TOUR_AGENT_COLLECTION DiagnosticCode = 55
	// DiagnosticCodeInvalidTourShiftInstanceConfig integer value for a diagnostic coded as
	// 'Invalid Tour Shift Instance Config' type.
	// The diagnostic is reporting the Tour Shift Instance Config entity is set with invalid values.
	DiagnosticCode_INVALID_TOUR_SHIFT_INSTANCE_CONFIG DiagnosticCode = 56
	// DiagnosticCodeInvalidTourShiftSegmentConfig integer value for a diagnostic coded as
	// 'Invalid Tour Shift Segment Config' type.
	// The diagnostic is reporting the Tour Shift Segment Config entity is set with invalid values.
	DiagnosticCode_INVALID_TOUR_SHIFT_SEGMENT_CONFIG DiagnosticCode = 57
	// DiagnosticCodeTourShiftSegmentConfigOverlap integer value for a diagnostic coded as
	// 'Tour Shift Segment Config overlap' type.
	// The diagnostic is reporting an overlap between tour shift segment configs.
	DiagnosticCode_TOUR_SHIFT_SEGMENT_CONFIG_OVERLAP DiagnosticCode = 58
	// DiagnosticCodeTourShiftSegmentConfigDoesNotFit integer value for a diagnostic coded as
	// 'Tour Shift Segment Config does not fit' type.
	// The diagnostic is reporting that a tour shift segment config does not fit in the parent instance.
	DiagnosticCode_TOUR_SHIFT_SEGMENT_CONFIG_DOES_NOT_FIT DiagnosticCode = 59
	// DiagnosticCodeTourShiftInstanceConfigOverlap integer value for a diagnostic coded as
	// 'Invalid Tour Shift Instance Config overlap' type.
	// The diagnostic is reporting an overlap between tour shift instance configs in a tour week pattern.
	DiagnosticCode_TOUR_SHIFT_INSTANCE_CONFIG_OVERLAP DiagnosticCode = 60
	// DiagnosticCodeWeekPatternNumbersNotUniqueInTourWeekPatterns integer value for a diagnostic coded as
	// 'Week Pattern Numbers bot unique in Tour Week Patterns' type.
	// The diagnostic is reporting a Week Pattern Number being shared between multiple Tour Week Patterns
	DiagnosticCode_WEEK_PATTERN_NUMBERS_NOT_UNIQUE_IN_TOUR_WEEK_PATTERNS DiagnosticCode = 61
	// DiagnosticCodeWfmAgentSidsNotUniqueInTourAgentCollections integer value for a diagnostic coded as
	// 'WFM Agent SIDs not unique in Tour Agent Collections' type.
	// The diagnostic is reporting a WFM Agent SID being shared between multiple Tour Agent Collections.
	DiagnosticCode_WFM_AGENT_SIDS_NOT_UNIQUE_IN_TOUR_AGENT_COLLECTIONS DiagnosticCode = 62
	// DiagnosticCodeInvalidFirstWeekPatternNumbersNotUniqueInTourAgentCollections integer value for a diagnostic coded as
	// 'First Week Pattern Numbers not unique in Tour Agent Collections' type.
	// The diagnostic is reporting a First Week Pattern Number being shared between multiple Tour Agent Collections.
	DiagnosticCode_FIST_WEEK_PATTERN_NUMBERS_NOT_UNIQUE_IN_TOUR_AGENT_COLLECTIONS DiagnosticCode = 63
	// DiagnosticCodeFirstWeekPatternNumbersNotFoundInTourWeekPatterns integer value for a diagnostic coded as
	// 'First Week Patterns not found in Tour Week Patterns' type.
	// The diagnostic is reporting a First Week Pattern Number used be a Tour Agent Collection which is not found in the given Tour Week Patterns.
	DiagnosticCode_FIRST_WEEK_PATTERN_NUMBERS_NOT_FOUND_IN_TOUR_WEEK_PATTERNS DiagnosticCode = 64
	// DiagnosticCodeShiftTemplateHasNotAssociatedSchedulingAgentGroups integer value for a diagnostic coded as
	// 'Shift Template Has No Associated Scheduling Agent Groups' type.
	// The diagnostic is reporting a Shift Template with no associated Schedulable Agent Groups.
	DiagnosticCode_SHIFT_TEMPLATE_HAS_NO_ASSOCIATED_SCHEDULING_AGENT_GROUPS DiagnosticCode = 65
	// DiagnosticCodeAttemptToBuildSchedulesForInvalidParentNode integer value for a diagnostic coded as
	// 'Attempt To Build Schedules For Invalid Parent Node' type.
	// The diagnostic is reporting an attemplt to build a schedule for an invalid Parent Node.
	DiagnosticCode_ATTEMPT_TO_BUILD_SCHEDULES_FOR_INVALID_PARENT_NODE DiagnosticCode = 66
	// DiagnosticCodeSchedulableAgentsDoNotMeetTemplateMinimum integer value for a diagnostic coded as
	// 'Schedulable Agents do not meet Tamplate Minimum' type.
	// The diagnostic is reporting that agents will be auto generated upon building the schedule, unless added manually or agent generation is toggled off.
	DiagnosticCode_SCHEDULABLE_AGENTS_DO_NOT_MEET_TEMPLATE_MINIMUM DiagnosticCode = 67
	// DiagnosticCodeSchedulableAgentsDoNotMeetTemplateMaximum integer value for a diagnostic coded as
	// 'Schedulable Agents do not meet Template Maximum' type.
	// The diagnostic is reporting that agents may be auto generated upon building the schedule, unless added manually or agent generation is toggled off.
	DiagnosticCode_SCHEDULABLE_AGENTS_DO_NOT_MEET_TEMPLATE_MAXIMUM DiagnosticCode = 68
	// DiagnosticNoOpenTimesInheritedByProgram integer value for a diagnostic coded as
	// 'No Open Times were set or inherited by Program' type
	// The diagnostic is reporting that the program does not have any open time values set directly or through inheritance.
	DiagnosticCode_NO_OPEN_TIMES_SET_OR_INHERITED_BY_PROGRAM DiagnosticCode = 69
	// DiagnosticTourAgentCollectionsNeededToScheduleTour integer value for a diagnostic coded as
	// 'Cannot generate shifts for Tour Shift Template that has no Agent Collections for Tour Patterns' type.
	// The diagnostic is reporting that there are no tour agent collections, which are required to schedule the tour pattern.
	DiagnosticCode_TOUR_AGENT_COLLECTIONS_NEEDED_TO_SCHEDULE_TOUR DiagnosticCode = 70
	// DiagnosticNoPredictedCallsInShedulingRange integer value
	DiagnosticCode_NO_PREDICTED_CALLS_IN_SCHEDULING_RANGE DiagnosticCode = 71
	// DiagnosticMinShiftWidthDowMismatch integer value
	// The diagnostic is reporting that the Shift Template has a DOW Pattern that is smaller than the template MIN_WDITH.
	DiagnosticCode_SHIFT_TEMPLATE_MIN_WIDTH_DOW_MISMATCH DiagnosticCode = 72
)

// Enum value maps for DiagnosticCode.
var (
	DiagnosticCode_name = map[int32]string{
		0:  "GENERAL",
		1:  "OK",
		2:  "NO_SKILLS_IN_DICTIONARY",
		3:  "AGENT_HAS_NO_SKILL_PROFICIENCIES",
		4:  "AGENT_HAS_NO_SKILLS",
		5:  "NO_SCHEDULING_ACTIVITIES_FOR_CONSTRAINT_RULES",
		6:  "SCHEDULING_ACTIVITY_FOR_CONSTRAINT_RULE_NOT_FOUND",
		7:  "SHIFT_TEMPLATE_CANNOT_BE_NONE",
		8:  "SHIFT_TEMPLATE_HAS_NO_PLACEMENT_RULES",
		9:  "NO_ONCALL_IN_SHIFT_TEMPLATE_PLACEMENT_RULES",
		10: "MIN_GT_MAX_DURATION_IN_SHIFT_TEMPLATE_PLACEMENT_RULES",
		11: "MIN_GT_MAX_AGENTS_IN_SHIFT_TEMPLATE",
		12: "NO_PLACEMENT_RULES_FOR_SHIFT_TEMPLATE",
		13: "ACTIVITIES_SHORTER_THAN_SHIFT",
		14: "NOT_ENOUGH_AGENTS_FOR_SHIFT",
		15: "PROGRAM_HAS_NO_AGENT_GROUPS",
		16: "PROGRAM_HAS_NO_SHIFT_TEMPLATES",
		17: "LOCATION_HAS_NO_PROGRAMS",
		18: "CLIENT_HAS_NO_LOCATIONS",
		19: "CALL_CENTER_HAS_NO_CLIENTS",
		20: "PROGRAM_HAS_INVALID_PARENT_LOCATION",
		21: "LOCATION_HAS_INVALID_PARENT_CLIENT",
		22: "CLIENT_HAS_INVALID_PARENT_CALL_CENTER",
		23: "AGENT_GROUP_HAS_INVALID_PARENT_NODE",
		24: "SHIFT_TEMPLATE_HAS_INVALID_PARENT_PROGRAM",
		25: "NO_SKILL_PROFICIENCY_FOR_MIN_SKILL_PROFICIENCY_CONSTRAINT_RULE",
		26: "TOO_MANY_AGENTS_WITH_LOCKED_SHIFTS_FOR_MIN_AGENTS",
		27: "AGENT_DOES_NOT_BELONG_TO_AN_AGENT_GROUP",
		28: "INVALID_CONSTRAINT_VAL_UNITS",
		29: "CONSTRAINT_GENERAL_FAILURE",
		30: "CANDIDATE_SHIFT_COLLISION_DETECTED",
		31: "CANDIDATE_SHIFT_AGENT_NOT_AVAILABLE",
		32: "CANDIDATE_CLOSED",
		33: "CONSTRAINT_ACTIVITY_NOT_FOUND",
		34: "CONSTRAINT_AGENT_DOES_NOT_HAVE_PROFICIENCY",
		35: "CONSTRAINT_AGENT_PROFICIENCY_TOO_LOW",
		36: "CONSTRAINT_MAX_TOTAL_ON_FAILURE",
		37: "CONSTRAINT_MIN_TOTAL_ON_FAILURE",
		38: "CONSTRAINT_MAX_TOTAL_OFF_FAILURE",
		39: "CONSTRAINT_MIN_TOTAL_OFF_FAILURE",
		40: "CONSTRAINT_MAX_CONSEC_ON_FAILURE",
		41: "CONSTRAINT_MIN_CONSEC_ON_FAILURE",
		42: "CONSTRAINT_MAX_CONSEC_OFF_FAILURE",
		43: "CONSTRAINT_MIN_CONSEC_OFF_FAILURE",
		44: "CONSTRAINT_CANNOT_HAVE_DAY_WEEK_MONTH_YEAR_SHIFT__PER_SHIFT",
		45: "CONSTRAINT_CANNOT_HAVE_DAY_WEEK_MONTH_YEAR__PER_MINUTES_HOURS",
		46: "CONSTRAINT_CONSECUTIVE_SHIFTS_RULE_NOT_ALLOWED",
		47: "CONSTRAINT_WITH_LARGER_PERIOD_PER_SMALL_PERIOD_NOT_ALLOWED",
		48: "CONSTRAINT_MIN_MAX_OFF_TIME_FOR_SHIFTS_NOT_ALLOWED",
		49: "CONSTRAINT_CANNOT_HAVE_CONSECUTIVE_TIME_PER_MULTIPLE_SHIFTS",
		50: "CANNOT_GENERATE_TOUR_PATTERNS_FOR_NON_TOUR_SHIFT_TEMPLATE",
		51: "TOUR_PATTERNS_NEEDED_TO_SCHEDULE_TOUR",
		52: "SHIFT_TEMPLATE_ACTIVITY_PLACEMENT_MIN_MAX_MUST_BE_MULTIPLE_OF_5_MINUTES",
		53: "NO_SHIFT_TEMPLATE_ACTIVITY_PLACEMENT_SEQUENCES_MATCH_SHIFT_MIN_MAX_WIDTH",
		54: "INVALID_TOUR_PATTERN",
		55: "INVALID_TOUR_AGENT_COLLECTION",
		56: "INVALID_TOUR_SHIFT_INSTANCE_CONFIG",
		57: "INVALID_TOUR_SHIFT_SEGMENT_CONFIG",
		58: "TOUR_SHIFT_SEGMENT_CONFIG_OVERLAP",
		59: "TOUR_SHIFT_SEGMENT_CONFIG_DOES_NOT_FIT",
		60: "TOUR_SHIFT_INSTANCE_CONFIG_OVERLAP",
		61: "WEEK_PATTERN_NUMBERS_NOT_UNIQUE_IN_TOUR_WEEK_PATTERNS",
		62: "WFM_AGENT_SIDS_NOT_UNIQUE_IN_TOUR_AGENT_COLLECTIONS",
		63: "FIST_WEEK_PATTERN_NUMBERS_NOT_UNIQUE_IN_TOUR_AGENT_COLLECTIONS",
		64: "FIRST_WEEK_PATTERN_NUMBERS_NOT_FOUND_IN_TOUR_WEEK_PATTERNS",
		65: "SHIFT_TEMPLATE_HAS_NO_ASSOCIATED_SCHEDULING_AGENT_GROUPS",
		66: "ATTEMPT_TO_BUILD_SCHEDULES_FOR_INVALID_PARENT_NODE",
		67: "SCHEDULABLE_AGENTS_DO_NOT_MEET_TEMPLATE_MINIMUM",
		68: "SCHEDULABLE_AGENTS_DO_NOT_MEET_TEMPLATE_MAXIMUM",
		69: "NO_OPEN_TIMES_SET_OR_INHERITED_BY_PROGRAM",
		70: "TOUR_AGENT_COLLECTIONS_NEEDED_TO_SCHEDULE_TOUR",
		71: "NO_PREDICTED_CALLS_IN_SCHEDULING_RANGE",
		72: "SHIFT_TEMPLATE_MIN_WIDTH_DOW_MISMATCH",
	}
	DiagnosticCode_value = map[string]int32{
		"GENERAL":                          0,
		"OK":                               1,
		"NO_SKILLS_IN_DICTIONARY":          2,
		"AGENT_HAS_NO_SKILL_PROFICIENCIES": 3,
		"AGENT_HAS_NO_SKILLS":              4,
		"NO_SCHEDULING_ACTIVITIES_FOR_CONSTRAINT_RULES":                            5,
		"SCHEDULING_ACTIVITY_FOR_CONSTRAINT_RULE_NOT_FOUND":                        6,
		"SHIFT_TEMPLATE_CANNOT_BE_NONE":                                            7,
		"SHIFT_TEMPLATE_HAS_NO_PLACEMENT_RULES":                                    8,
		"NO_ONCALL_IN_SHIFT_TEMPLATE_PLACEMENT_RULES":                              9,
		"MIN_GT_MAX_DURATION_IN_SHIFT_TEMPLATE_PLACEMENT_RULES":                    10,
		"MIN_GT_MAX_AGENTS_IN_SHIFT_TEMPLATE":                                      11,
		"NO_PLACEMENT_RULES_FOR_SHIFT_TEMPLATE":                                    12,
		"ACTIVITIES_SHORTER_THAN_SHIFT":                                            13,
		"NOT_ENOUGH_AGENTS_FOR_SHIFT":                                              14,
		"PROGRAM_HAS_NO_AGENT_GROUPS":                                              15,
		"PROGRAM_HAS_NO_SHIFT_TEMPLATES":                                           16,
		"LOCATION_HAS_NO_PROGRAMS":                                                 17,
		"CLIENT_HAS_NO_LOCATIONS":                                                  18,
		"CALL_CENTER_HAS_NO_CLIENTS":                                               19,
		"PROGRAM_HAS_INVALID_PARENT_LOCATION":                                      20,
		"LOCATION_HAS_INVALID_PARENT_CLIENT":                                       21,
		"CLIENT_HAS_INVALID_PARENT_CALL_CENTER":                                    22,
		"AGENT_GROUP_HAS_INVALID_PARENT_NODE":                                      23,
		"SHIFT_TEMPLATE_HAS_INVALID_PARENT_PROGRAM":                                24,
		"NO_SKILL_PROFICIENCY_FOR_MIN_SKILL_PROFICIENCY_CONSTRAINT_RULE":           25,
		"TOO_MANY_AGENTS_WITH_LOCKED_SHIFTS_FOR_MIN_AGENTS":                        26,
		"AGENT_DOES_NOT_BELONG_TO_AN_AGENT_GROUP":                                  27,
		"INVALID_CONSTRAINT_VAL_UNITS":                                             28,
		"CONSTRAINT_GENERAL_FAILURE":                                               29,
		"CANDIDATE_SHIFT_COLLISION_DETECTED":                                       30,
		"CANDIDATE_SHIFT_AGENT_NOT_AVAILABLE":                                      31,
		"CANDIDATE_CLOSED":                                                         32,
		"CONSTRAINT_ACTIVITY_NOT_FOUND":                                            33,
		"CONSTRAINT_AGENT_DOES_NOT_HAVE_PROFICIENCY":                               34,
		"CONSTRAINT_AGENT_PROFICIENCY_TOO_LOW":                                     35,
		"CONSTRAINT_MAX_TOTAL_ON_FAILURE":                                          36,
		"CONSTRAINT_MIN_TOTAL_ON_FAILURE":                                          37,
		"CONSTRAINT_MAX_TOTAL_OFF_FAILURE":                                         38,
		"CONSTRAINT_MIN_TOTAL_OFF_FAILURE":                                         39,
		"CONSTRAINT_MAX_CONSEC_ON_FAILURE":                                         40,
		"CONSTRAINT_MIN_CONSEC_ON_FAILURE":                                         41,
		"CONSTRAINT_MAX_CONSEC_OFF_FAILURE":                                        42,
		"CONSTRAINT_MIN_CONSEC_OFF_FAILURE":                                        43,
		"CONSTRAINT_CANNOT_HAVE_DAY_WEEK_MONTH_YEAR_SHIFT__PER_SHIFT":              44,
		"CONSTRAINT_CANNOT_HAVE_DAY_WEEK_MONTH_YEAR__PER_MINUTES_HOURS":            45,
		"CONSTRAINT_CONSECUTIVE_SHIFTS_RULE_NOT_ALLOWED":                           46,
		"CONSTRAINT_WITH_LARGER_PERIOD_PER_SMALL_PERIOD_NOT_ALLOWED":               47,
		"CONSTRAINT_MIN_MAX_OFF_TIME_FOR_SHIFTS_NOT_ALLOWED":                       48,
		"CONSTRAINT_CANNOT_HAVE_CONSECUTIVE_TIME_PER_MULTIPLE_SHIFTS":              49,
		"CANNOT_GENERATE_TOUR_PATTERNS_FOR_NON_TOUR_SHIFT_TEMPLATE":                50,
		"TOUR_PATTERNS_NEEDED_TO_SCHEDULE_TOUR":                                    51,
		"SHIFT_TEMPLATE_ACTIVITY_PLACEMENT_MIN_MAX_MUST_BE_MULTIPLE_OF_5_MINUTES":  52,
		"NO_SHIFT_TEMPLATE_ACTIVITY_PLACEMENT_SEQUENCES_MATCH_SHIFT_MIN_MAX_WIDTH": 53,
		"INVALID_TOUR_PATTERN":                                                     54,
		"INVALID_TOUR_AGENT_COLLECTION":                                            55,
		"INVALID_TOUR_SHIFT_INSTANCE_CONFIG":                                       56,
		"INVALID_TOUR_SHIFT_SEGMENT_CONFIG":                                        57,
		"TOUR_SHIFT_SEGMENT_CONFIG_OVERLAP":                                        58,
		"TOUR_SHIFT_SEGMENT_CONFIG_DOES_NOT_FIT":                                   59,
		"TOUR_SHIFT_INSTANCE_CONFIG_OVERLAP":                                       60,
		"WEEK_PATTERN_NUMBERS_NOT_UNIQUE_IN_TOUR_WEEK_PATTERNS":                    61,
		"WFM_AGENT_SIDS_NOT_UNIQUE_IN_TOUR_AGENT_COLLECTIONS":                      62,
		"FIST_WEEK_PATTERN_NUMBERS_NOT_UNIQUE_IN_TOUR_AGENT_COLLECTIONS":           63,
		"FIRST_WEEK_PATTERN_NUMBERS_NOT_FOUND_IN_TOUR_WEEK_PATTERNS":               64,
		"SHIFT_TEMPLATE_HAS_NO_ASSOCIATED_SCHEDULING_AGENT_GROUPS":                 65,
		"ATTEMPT_TO_BUILD_SCHEDULES_FOR_INVALID_PARENT_NODE":                       66,
		"SCHEDULABLE_AGENTS_DO_NOT_MEET_TEMPLATE_MINIMUM":                          67,
		"SCHEDULABLE_AGENTS_DO_NOT_MEET_TEMPLATE_MAXIMUM":                          68,
		"NO_OPEN_TIMES_SET_OR_INHERITED_BY_PROGRAM":                                69,
		"TOUR_AGENT_COLLECTIONS_NEEDED_TO_SCHEDULE_TOUR":                           70,
		"NO_PREDICTED_CALLS_IN_SCHEDULING_RANGE":                                   71,
		"SHIFT_TEMPLATE_MIN_WIDTH_DOW_MISMATCH":                                    72,
	}
)

func (x DiagnosticCode) Enum() *DiagnosticCode {
	p := new(DiagnosticCode)
	*p = x
	return p
}

func (x DiagnosticCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticCode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[11].Descriptor()
}

func (DiagnosticCode) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[11]
}

func (x DiagnosticCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticCode.Descriptor instead.
func (DiagnosticCode) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{11}
}

// Enum representing the type of a performance metric.
type PerformanceMetricType int32

const (
	// The metric is a simplified comparison of FTE calls vs achieved calls.
	PerformanceMetricType_FTE_REQUIRED_VS_ACHIEVED_SIMPLE PerformanceMetricType = 0
	// The metric is an extended comparison of FTE calls vs achieved calls.
	PerformanceMetricType_FTE_REQUIRED_VS_ACHIEVED_EXTENDED PerformanceMetricType = 1
	// The metric analyzes the service level of the schedule.
	PerformanceMetricType_SERVICE_LEVEL_ANALYSIS PerformanceMetricType = 2
	// The metric returns a matrix metric of the service level for the schedule.
	PerformanceMetricType_SERVICE_LEVEL_MATRIX PerformanceMetricType = 3
	// The metric relate to contact handling performance.
	PerformanceMetricType_CONTACT_HANDLING_METRICS PerformanceMetricType = 4
	// The metric relates to the load forecast
	PerformanceMetricType_LOAD_FORECAST PerformanceMetricType = 5
)

// Enum value maps for PerformanceMetricType.
var (
	PerformanceMetricType_name = map[int32]string{
		0: "FTE_REQUIRED_VS_ACHIEVED_SIMPLE",
		1: "FTE_REQUIRED_VS_ACHIEVED_EXTENDED",
		2: "SERVICE_LEVEL_ANALYSIS",
		3: "SERVICE_LEVEL_MATRIX",
		4: "CONTACT_HANDLING_METRICS",
		5: "LOAD_FORECAST",
	}
	PerformanceMetricType_value = map[string]int32{
		"FTE_REQUIRED_VS_ACHIEVED_SIMPLE":   0,
		"FTE_REQUIRED_VS_ACHIEVED_EXTENDED": 1,
		"SERVICE_LEVEL_ANALYSIS":            2,
		"SERVICE_LEVEL_MATRIX":              3,
		"CONTACT_HANDLING_METRICS":          4,
		"LOAD_FORECAST":                     5,
	}
)

func (x PerformanceMetricType) Enum() *PerformanceMetricType {
	p := new(PerformanceMetricType)
	*p = x
	return p
}

func (x PerformanceMetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PerformanceMetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[12].Descriptor()
}

func (PerformanceMetricType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[12]
}

func (x PerformanceMetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PerformanceMetricType.Descriptor instead.
func (PerformanceMetricType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{12}
}

// Deprecated.
type ScheduleShouldInclude int32

const (
	// Include only shift instances.
	ScheduleShouldInclude_ONLY_SHIFT_INSTANCES ScheduleShouldInclude = 0
	// Include only performance metrics.
	ScheduleShouldInclude_ONLY_PERFORMANCE_METRICS ScheduleShouldInclude = 1
	// Include both entities.
	ScheduleShouldInclude_SHIFT_INSTANCES_AND_PERFORMANCE_METRICS ScheduleShouldInclude = 2
)

// Enum value maps for ScheduleShouldInclude.
var (
	ScheduleShouldInclude_name = map[int32]string{
		0: "ONLY_SHIFT_INSTANCES",
		1: "ONLY_PERFORMANCE_METRICS",
		2: "SHIFT_INSTANCES_AND_PERFORMANCE_METRICS",
	}
	ScheduleShouldInclude_value = map[string]int32{
		"ONLY_SHIFT_INSTANCES":                    0,
		"ONLY_PERFORMANCE_METRICS":                1,
		"SHIFT_INSTANCES_AND_PERFORMANCE_METRICS": 2,
	}
)

func (x ScheduleShouldInclude) Enum() *ScheduleShouldInclude {
	p := new(ScheduleShouldInclude)
	*p = x
	return p
}

func (x ScheduleShouldInclude) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleShouldInclude) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[13].Descriptor()
}

func (ScheduleShouldInclude) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[13]
}

func (x ScheduleShouldInclude) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleShouldInclude.Descriptor instead.
func (ScheduleShouldInclude) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{13}
}

// enum representing the type of a schedule.
type ScheduleType int32

const (
	// Draft schedule.
	ScheduleType_DRAFT ScheduleType = 0
	// Published schedule.
	ScheduleType_PUBLISHED ScheduleType = 1
)

// Enum value maps for ScheduleType.
var (
	ScheduleType_name = map[int32]string{
		0: "DRAFT",
		1: "PUBLISHED",
	}
	ScheduleType_value = map[string]int32{
		"DRAFT":     0,
		"PUBLISHED": 1,
	}
)

func (x ScheduleType) Enum() *ScheduleType {
	p := new(ScheduleType)
	*p = x
	return p
}

func (x ScheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[14].Descriptor()
}

func (ScheduleType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[14]
}

func (x ScheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleType.Descriptor instead.
func (ScheduleType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{14}
}

type SchedulingTargetType int32

const (
	// Node will use coverage based scheduling.
	SchedulingTargetType_COVERAGE SchedulingTargetType = 0
	// Node will use service level based scheduling.
	SchedulingTargetType_SERVICE_LEVEL SchedulingTargetType = 1
)

// Enum value maps for SchedulingTargetType.
var (
	SchedulingTargetType_name = map[int32]string{
		0: "COVERAGE",
		1: "SERVICE_LEVEL",
	}
	SchedulingTargetType_value = map[string]int32{
		"COVERAGE":      0,
		"SERVICE_LEVEL": 1,
	}
)

func (x SchedulingTargetType) Enum() *SchedulingTargetType {
	p := new(SchedulingTargetType)
	*p = x
	return p
}

func (x SchedulingTargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulingTargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[15].Descriptor()
}

func (SchedulingTargetType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[15]
}

func (x SchedulingTargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulingTargetType.Descriptor instead.
func (SchedulingTargetType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{15}
}

// enum representing the state of a draft build.
type BuildDraftStatus int32

const (
	// No build has ever been started for this draft.
	BuildDraftStatus_NO_BUILD BuildDraftStatus = 0
	// The build is currently in progress.
	BuildDraftStatus_IN_PROGRESS BuildDraftStatus = 1
	// The build succeeded.
	BuildDraftStatus_SUCCEEDED BuildDraftStatus = 2
	// The build failed.
	BuildDraftStatus_FAILED BuildDraftStatus = 3
	// The build was canceled
	BuildDraftStatus_CANCELED BuildDraftStatus = 4
)

// Enum value maps for BuildDraftStatus.
var (
	BuildDraftStatus_name = map[int32]string{
		0: "NO_BUILD",
		1: "IN_PROGRESS",
		2: "SUCCEEDED",
		3: "FAILED",
		4: "CANCELED",
	}
	BuildDraftStatus_value = map[string]int32{
		"NO_BUILD":    0,
		"IN_PROGRESS": 1,
		"SUCCEEDED":   2,
		"FAILED":      3,
		"CANCELED":    4,
	}
)

func (x BuildDraftStatus) Enum() *BuildDraftStatus {
	p := new(BuildDraftStatus)
	*p = x
	return p
}

func (x BuildDraftStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildDraftStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[16].Descriptor()
}

func (BuildDraftStatus) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[16]
}

func (x BuildDraftStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuildDraftStatus.Descriptor instead.
func (BuildDraftStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{16}
}

// Enum representing the options for bitmap creation.
type BitmapType int32

const (
	// The complete bitmap type. Bitmaps will be generated using all relevant pattern data.
	BitmapType_COMPLETE BitmapType = 0
	// The bitmaps will be created using only the weekmaps from the patterns.
	BitmapType_ONLY_WEEKMAPS BitmapType = 1
	// The bitmaps will be created using only the calendar items from the patterns.
	BitmapType_ONLY_CALENDAR_ITEMS BitmapType = 2
)

// Enum value maps for BitmapType.
var (
	BitmapType_name = map[int32]string{
		0: "COMPLETE",
		1: "ONLY_WEEKMAPS",
		2: "ONLY_CALENDAR_ITEMS",
	}
	BitmapType_value = map[string]int32{
		"COMPLETE":            0,
		"ONLY_WEEKMAPS":       1,
		"ONLY_CALENDAR_ITEMS": 2,
	}
)

func (x BitmapType) Enum() *BitmapType {
	p := new(BitmapType)
	*p = x
	return p
}

func (x BitmapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BitmapType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[17].Descriptor()
}

func (BitmapType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[17]
}

func (x BitmapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BitmapType.Descriptor instead.
func (BitmapType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{17}
}

// Enum representing the state of the history cache.
type HistoryCacheState int32

const (
	// Cache is not loaded and no loading attempts have been made.
	HistoryCacheState_NOT_LOADED HistoryCacheState = 0
	// Cache is currently being loaded.
	HistoryCacheState_LOADING HistoryCacheState = 1
	// Cache has been successfully loaded.
	HistoryCacheState_LOADING_COMPLETE HistoryCacheState = 2
	// Cache was attempted to be loaded but failed, and no new attempts have been made.
	HistoryCacheState_LOADING_FAILED HistoryCacheState = 3
)

// Enum value maps for HistoryCacheState.
var (
	HistoryCacheState_name = map[int32]string{
		0: "NOT_LOADED",
		1: "LOADING",
		2: "LOADING_COMPLETE",
		3: "LOADING_FAILED",
	}
	HistoryCacheState_value = map[string]int32{
		"NOT_LOADED":       0,
		"LOADING":          1,
		"LOADING_COMPLETE": 2,
		"LOADING_FAILED":   3,
	}
)

func (x HistoryCacheState) Enum() *HistoryCacheState {
	p := new(HistoryCacheState)
	*p = x
	return p
}

func (x HistoryCacheState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HistoryCacheState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[18].Descriptor()
}

func (HistoryCacheState) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[18]
}

func (x HistoryCacheState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HistoryCacheState.Descriptor instead.
func (HistoryCacheState) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{18}
}

// Enum representing the state of a client's initial setup to use WFM.
type InitialSetupState int32

const (
	// Not setup and no set up attempts have been made.
	InitialSetupState_NOT_SETUP InitialSetupState = 0
	// Currently doing setup tasks.
	InitialSetupState_SETTING_UP InitialSetupState = 1
	// Set up for client is complete.
	InitialSetupState_SETUP_COMPLETE InitialSetupState = 2
	// Setup was attempted but failed and no new setup attempts have been made.
	InitialSetupState_FAILURE InitialSetupState = 3
)

// Enum value maps for InitialSetupState.
var (
	InitialSetupState_name = map[int32]string{
		0: "NOT_SETUP",
		1: "SETTING_UP",
		2: "SETUP_COMPLETE",
		3: "FAILURE",
	}
	InitialSetupState_value = map[string]int32{
		"NOT_SETUP":      0,
		"SETTING_UP":     1,
		"SETUP_COMPLETE": 2,
		"FAILURE":        3,
	}
)

func (x InitialSetupState) Enum() *InitialSetupState {
	p := new(InitialSetupState)
	*p = x
	return p
}

func (x InitialSetupState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitialSetupState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[19].Descriptor()
}

func (InitialSetupState) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[19]
}

func (x InitialSetupState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InitialSetupState.Descriptor instead.
func (InitialSetupState) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{19}
}

// The RealTimeManagementState, which is translated as a reduced AgentStatus from the acd service.
type RealTimeManagementState int32

const (
	// Not set.
	RealTimeManagementState_UNSPECIFIED RealTimeManagementState = 0
	// The agent is logged in.
	RealTimeManagementState_LOGGED_IN RealTimeManagementState = 1
	// The agent's call is on hold.
	RealTimeManagementState_CALL_ON_HOLD RealTimeManagementState = 4
	// Agent is on an outbound call.
	RealTimeManagementState_OUTBOUND_CALL RealTimeManagementState = 5
	// Agent is on a transfered call.
	RealTimeManagementState_TRANSFER RealTimeManagementState = 7
	// Agent is on a conference call.
	RealTimeManagementState_CONFERENCE RealTimeManagementState = 8
	// Agent is ready to accept a call.
	RealTimeManagementState_READY RealTimeManagementState = 9
	// Agent is not_ready to accept a call.
	RealTimeManagementState_NOT_READY RealTimeManagementState = 10
	// The agent is is the wrap up state.
	RealTimeManagementState_WRAP_UP RealTimeManagementState = 11
	// The agent is logged out.
	RealTimeManagementState_LOGGED_OUT RealTimeManagementState = 13
	// The agent is in pause.
	RealTimeManagementState_PAUSE RealTimeManagementState = 14
)

// Enum value maps for RealTimeManagementState.
var (
	RealTimeManagementState_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "LOGGED_IN",
		4:  "CALL_ON_HOLD",
		5:  "OUTBOUND_CALL",
		7:  "TRANSFER",
		8:  "CONFERENCE",
		9:  "READY",
		10: "NOT_READY",
		11: "WRAP_UP",
		13: "LOGGED_OUT",
		14: "PAUSE",
	}
	RealTimeManagementState_value = map[string]int32{
		"UNSPECIFIED":   0,
		"LOGGED_IN":     1,
		"CALL_ON_HOLD":  4,
		"OUTBOUND_CALL": 5,
		"TRANSFER":      7,
		"CONFERENCE":    8,
		"READY":         9,
		"NOT_READY":     10,
		"WRAP_UP":       11,
		"LOGGED_OUT":    13,
		"PAUSE":         14,
	}
)

func (x RealTimeManagementState) Enum() *RealTimeManagementState {
	p := new(RealTimeManagementState)
	*p = x
	return p
}

func (x RealTimeManagementState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RealTimeManagementState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[20].Descriptor()
}

func (RealTimeManagementState) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[20]
}

func (x RealTimeManagementState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RealTimeManagementState.Descriptor instead.
func (RealTimeManagementState) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{20}
}

// The AgentLeavePetitionStatus, which is the current state of an agent's AgentLeavePetition for the scheduler service.
type AgentLeavePetitionStatus int32

const (
	// Not Set.
	AgentLeavePetitionStatus_UNSPECIFIED_PETITION_STATUS AgentLeavePetitionStatus = 0
	// The petition is pending approval.
	AgentLeavePetitionStatus_PENDING_PETITION AgentLeavePetitionStatus = 1
	// The petition has been approved.
	AgentLeavePetitionStatus_APPROVED_PETITION AgentLeavePetitionStatus = 2
	// The petition has been denied.
	AgentLeavePetitionStatus_DENIED_PETITION AgentLeavePetitionStatus = 3
	// The petition has been cancelled.
	AgentLeavePetitionStatus_CANCELLED_PETITION AgentLeavePetitionStatus = 4
)

// Enum value maps for AgentLeavePetitionStatus.
var (
	AgentLeavePetitionStatus_name = map[int32]string{
		0: "UNSPECIFIED_PETITION_STATUS",
		1: "PENDING_PETITION",
		2: "APPROVED_PETITION",
		3: "DENIED_PETITION",
		4: "CANCELLED_PETITION",
	}
	AgentLeavePetitionStatus_value = map[string]int32{
		"UNSPECIFIED_PETITION_STATUS": 0,
		"PENDING_PETITION":            1,
		"APPROVED_PETITION":           2,
		"DENIED_PETITION":             3,
		"CANCELLED_PETITION":          4,
	}
)

func (x AgentLeavePetitionStatus) Enum() *AgentLeavePetitionStatus {
	p := new(AgentLeavePetitionStatus)
	*p = x
	return p
}

func (x AgentLeavePetitionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentLeavePetitionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[21].Descriptor()
}

func (AgentLeavePetitionStatus) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[21]
}

func (x AgentLeavePetitionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentLeavePetitionStatus.Descriptor instead.
func (AgentLeavePetitionStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{21}
}

// The SchedulingActivityClassification, which is used to distinguish use cases for the Scheduling Activity.
type SchedulingActivityClassification int32

const (
	// This wraps a generic Skill or Non Skill Activity.
	SchedulingActivityClassification_STANDARD_SCHEDULING_ACTIVITY SchedulingActivityClassification = 0
	// This wraps the On Call Skill Activity.
	SchedulingActivityClassification_ON_CALL_ACTIVITY SchedulingActivityClassification = 1
	// This wraps the Time Off Non Skill Activity.
	SchedulingActivityClassification_TIME_OFF_ACTIVITY SchedulingActivityClassification = 2
	// This wraps a Meeting Non Skill Activity
	SchedulingActivityClassification_MEETING_ACTIVITY SchedulingActivityClassification = 3
)

// Enum value maps for SchedulingActivityClassification.
var (
	SchedulingActivityClassification_name = map[int32]string{
		0: "STANDARD_SCHEDULING_ACTIVITY",
		1: "ON_CALL_ACTIVITY",
		2: "TIME_OFF_ACTIVITY",
		3: "MEETING_ACTIVITY",
	}
	SchedulingActivityClassification_value = map[string]int32{
		"STANDARD_SCHEDULING_ACTIVITY": 0,
		"ON_CALL_ACTIVITY":             1,
		"TIME_OFF_ACTIVITY":            2,
		"MEETING_ACTIVITY":             3,
	}
)

func (x SchedulingActivityClassification) Enum() *SchedulingActivityClassification {
	p := new(SchedulingActivityClassification)
	*p = x
	return p
}

func (x SchedulingActivityClassification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulingActivityClassification) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[22].Descriptor()
}

func (SchedulingActivityClassification) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[22]
}

func (x SchedulingActivityClassification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulingActivityClassification.Descriptor instead.
func (SchedulingActivityClassification) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{22}
}

// Supported mediums to be used when delivering notifications about violations of adherence rules.
type AdherenceRuleNotificationMedium int32

const (
	// UI notification.
	AdherenceRuleNotificationMedium_ADHERENCE_RULE_NOTIFICATION_MEDIUM_IN_PRODUCT AdherenceRuleNotificationMedium = 0
	// Email will be sent to the specified user.
	AdherenceRuleNotificationMedium_ADHERENCE_RULE_NOTIFICATION_MEDIUM_EMAIL AdherenceRuleNotificationMedium = 1
)

// Enum value maps for AdherenceRuleNotificationMedium.
var (
	AdherenceRuleNotificationMedium_name = map[int32]string{
		0: "ADHERENCE_RULE_NOTIFICATION_MEDIUM_IN_PRODUCT",
		1: "ADHERENCE_RULE_NOTIFICATION_MEDIUM_EMAIL",
	}
	AdherenceRuleNotificationMedium_value = map[string]int32{
		"ADHERENCE_RULE_NOTIFICATION_MEDIUM_IN_PRODUCT": 0,
		"ADHERENCE_RULE_NOTIFICATION_MEDIUM_EMAIL":      1,
	}
)

func (x AdherenceRuleNotificationMedium) Enum() *AdherenceRuleNotificationMedium {
	p := new(AdherenceRuleNotificationMedium)
	*p = x
	return p
}

func (x AdherenceRuleNotificationMedium) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdherenceRuleNotificationMedium) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[23].Descriptor()
}

func (AdherenceRuleNotificationMedium) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[23]
}

func (x AdherenceRuleNotificationMedium) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdherenceRuleNotificationMedium.Descriptor instead.
func (AdherenceRuleNotificationMedium) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{23}
}

// Types of requirements for adherence rules.
type AdherenceRuleRequirementType int32

const (
	// Rule is not used.
	AdherenceRuleRequirementType_ADHERENCE_RULE_REQUIREMENT_TYPE_NOT_USED AdherenceRuleRequirementType = 0
	// Rule is optional.
	AdherenceRuleRequirementType_ADHERENCE_RULE_REQUIREMENT_TYPE_OPTIONAL AdherenceRuleRequirementType = 1
	// Rule is mandatory.
	AdherenceRuleRequirementType_ADHERENCE_RULE_REQUIREMENT_TYPE_MANDATORY AdherenceRuleRequirementType = 2
)

// Enum value maps for AdherenceRuleRequirementType.
var (
	AdherenceRuleRequirementType_name = map[int32]string{
		0: "ADHERENCE_RULE_REQUIREMENT_TYPE_NOT_USED",
		1: "ADHERENCE_RULE_REQUIREMENT_TYPE_OPTIONAL",
		2: "ADHERENCE_RULE_REQUIREMENT_TYPE_MANDATORY",
	}
	AdherenceRuleRequirementType_value = map[string]int32{
		"ADHERENCE_RULE_REQUIREMENT_TYPE_NOT_USED":  0,
		"ADHERENCE_RULE_REQUIREMENT_TYPE_OPTIONAL":  1,
		"ADHERENCE_RULE_REQUIREMENT_TYPE_MANDATORY": 2,
	}
)

func (x AdherenceRuleRequirementType) Enum() *AdherenceRuleRequirementType {
	p := new(AdherenceRuleRequirementType)
	*p = x
	return p
}

func (x AdherenceRuleRequirementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdherenceRuleRequirementType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[24].Descriptor()
}

func (AdherenceRuleRequirementType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[24]
}

func (x AdherenceRuleRequirementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdherenceRuleRequirementType.Descriptor instead.
func (AdherenceRuleRequirementType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{24}
}

// Types of ranges that an adherence rule can cover.
type AdherenceRuleRange int32

const (
	// Range starts at the beggining of each day.
	AdherenceRuleRange_ADHERENCE_RULE_RANGE_START_OF_DAY AdherenceRuleRange = 0
	// Range starts at the beggining of each week.
	AdherenceRuleRange_ADHERENCE_RULE_RANGE_START_OF_WEEK AdherenceRuleRange = 1
	// Range starts at the beggining of each month.
	AdherenceRuleRange_ADHERENCE_RULE_RANGE_START_OF_MONTH AdherenceRuleRange = 2
	// Range starts from the current time to the end of the day.
	AdherenceRuleRange_ADHERENCE_RULE_RANGE_REST_OF_DAY AdherenceRuleRange = 3
	// Custom range, if set the @custom_range field on the rule itself must be set.
	AdherenceRuleRange_ADHERENCE_RULE_RANGE_CUSTOM_DATE_RANGE AdherenceRuleRange = 4
)

// Enum value maps for AdherenceRuleRange.
var (
	AdherenceRuleRange_name = map[int32]string{
		0: "ADHERENCE_RULE_RANGE_START_OF_DAY",
		1: "ADHERENCE_RULE_RANGE_START_OF_WEEK",
		2: "ADHERENCE_RULE_RANGE_START_OF_MONTH",
		3: "ADHERENCE_RULE_RANGE_REST_OF_DAY",
		4: "ADHERENCE_RULE_RANGE_CUSTOM_DATE_RANGE",
	}
	AdherenceRuleRange_value = map[string]int32{
		"ADHERENCE_RULE_RANGE_START_OF_DAY":      0,
		"ADHERENCE_RULE_RANGE_START_OF_WEEK":     1,
		"ADHERENCE_RULE_RANGE_START_OF_MONTH":    2,
		"ADHERENCE_RULE_RANGE_REST_OF_DAY":       3,
		"ADHERENCE_RULE_RANGE_CUSTOM_DATE_RANGE": 4,
	}
)

func (x AdherenceRuleRange) Enum() *AdherenceRuleRange {
	p := new(AdherenceRuleRange)
	*p = x
	return p
}

func (x AdherenceRuleRange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdherenceRuleRange) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[25].Descriptor()
}

func (AdherenceRuleRange) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[25]
}

func (x AdherenceRuleRange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdherenceRuleRange.Descriptor instead.
func (AdherenceRuleRange) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{25}
}

// Types of departmental rule actions.
type AdherenceDepartmentalRuleActionType int32

const (
	// Number of calls answered.
	AdherenceDepartmentalRuleActionType_ADHERENCE_DEPARTMENTAL_RULE_ACTION_TYPE_CALLS_ANSWERED AdherenceDepartmentalRuleActionType = 0
)

// Enum value maps for AdherenceDepartmentalRuleActionType.
var (
	AdherenceDepartmentalRuleActionType_name = map[int32]string{
		0: "ADHERENCE_DEPARTMENTAL_RULE_ACTION_TYPE_CALLS_ANSWERED",
	}
	AdherenceDepartmentalRuleActionType_value = map[string]int32{
		"ADHERENCE_DEPARTMENTAL_RULE_ACTION_TYPE_CALLS_ANSWERED": 0,
	}
)

func (x AdherenceDepartmentalRuleActionType) Enum() *AdherenceDepartmentalRuleActionType {
	p := new(AdherenceDepartmentalRuleActionType)
	*p = x
	return p
}

func (x AdherenceDepartmentalRuleActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdherenceDepartmentalRuleActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[26].Descriptor()
}

func (AdherenceDepartmentalRuleActionType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[26]
}

func (x AdherenceDepartmentalRuleActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdherenceDepartmentalRuleActionType.Descriptor instead.
func (AdherenceDepartmentalRuleActionType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{26}
}

// Conditions compared when evaluating adherence rules.
type AdherenceRuleCondition int32

const (
	// Left operand is greater than right.
	AdherenceRuleCondition_ADHERENCE_RULE_CONDITION_GREATER_THAN AdherenceRuleCondition = 0
	// Left operand is greater than or equal to right.
	AdherenceRuleCondition_ADHERENCE_RULE_CONDITION_GREATER_THAN_EQUAL AdherenceRuleCondition = 1
	// Left operand is less than right.
	AdherenceRuleCondition_ADHERENCE_RULE_CONDITION_LESS_THAN AdherenceRuleCondition = 2
	// Left operand is less than or equal to right.
	AdherenceRuleCondition_ADHERENCE_RULE_CONDITION_LESS_THAN_EQUAL AdherenceRuleCondition = 3
)

// Enum value maps for AdherenceRuleCondition.
var (
	AdherenceRuleCondition_name = map[int32]string{
		0: "ADHERENCE_RULE_CONDITION_GREATER_THAN",
		1: "ADHERENCE_RULE_CONDITION_GREATER_THAN_EQUAL",
		2: "ADHERENCE_RULE_CONDITION_LESS_THAN",
		3: "ADHERENCE_RULE_CONDITION_LESS_THAN_EQUAL",
	}
	AdherenceRuleCondition_value = map[string]int32{
		"ADHERENCE_RULE_CONDITION_GREATER_THAN":       0,
		"ADHERENCE_RULE_CONDITION_GREATER_THAN_EQUAL": 1,
		"ADHERENCE_RULE_CONDITION_LESS_THAN":          2,
		"ADHERENCE_RULE_CONDITION_LESS_THAN_EQUAL":    3,
	}
)

func (x AdherenceRuleCondition) Enum() *AdherenceRuleCondition {
	p := new(AdherenceRuleCondition)
	*p = x
	return p
}

func (x AdherenceRuleCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdherenceRuleCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[27].Descriptor()
}

func (AdherenceRuleCondition) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[27]
}

func (x AdherenceRuleCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdherenceRuleCondition.Descriptor instead.
func (AdherenceRuleCondition) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{27}
}

// Units supported in adherence rule condition evaluations.
type AdherenceRuleUnit int32

const (
	// Represents number of seconds.
	AdherenceRuleUnit_ADHERENCE_RULE_UNIT_SECONDS AdherenceRuleUnit = 0
	// Represents number of minutes.
	AdherenceRuleUnit_ADHERENCE_RULE_UNIT_MINUTES AdherenceRuleUnit = 1
	// Represents number of calls.
	AdherenceRuleUnit_ADHERENCE_RULE_UNIT_CALLS AdherenceRuleUnit = 2
	// Represents a percentage.
	AdherenceRuleUnit_ADHERENCE_RULE_UNIT_PERCENTAGE AdherenceRuleUnit = 3
)

// Enum value maps for AdherenceRuleUnit.
var (
	AdherenceRuleUnit_name = map[int32]string{
		0: "ADHERENCE_RULE_UNIT_SECONDS",
		1: "ADHERENCE_RULE_UNIT_MINUTES",
		2: "ADHERENCE_RULE_UNIT_CALLS",
		3: "ADHERENCE_RULE_UNIT_PERCENTAGE",
	}
	AdherenceRuleUnit_value = map[string]int32{
		"ADHERENCE_RULE_UNIT_SECONDS":    0,
		"ADHERENCE_RULE_UNIT_MINUTES":    1,
		"ADHERENCE_RULE_UNIT_CALLS":      2,
		"ADHERENCE_RULE_UNIT_PERCENTAGE": 3,
	}
)

func (x AdherenceRuleUnit) Enum() *AdherenceRuleUnit {
	p := new(AdherenceRuleUnit)
	*p = x
	return p
}

func (x AdherenceRuleUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdherenceRuleUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[28].Descriptor()
}

func (AdherenceRuleUnit) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[28]
}

func (x AdherenceRuleUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdherenceRuleUnit.Descriptor instead.
func (AdherenceRuleUnit) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{28}
}

// Types of agent rule actions.
type AdherenceAgentRuleActionType int32

const (
	// Action type for the agent state of wrap up.
	AdherenceAgentRuleActionType_ADHERENCE_AGENT_RULE_ACTION_TYPE_WRAP_UP AdherenceAgentRuleActionType = 0
	// Action type for the agent state of waiting.
	AdherenceAgentRuleActionType_ADHERENCE_AGENT_RULE_ACTION_TYPE_WAITING AdherenceAgentRuleActionType = 1
	// Action type for the agent state of manual dial.
	AdherenceAgentRuleActionType_ADHERENCE_AGENT_RULE_ACTION_TYPE_MANUAL_DIAL AdherenceAgentRuleActionType = 2
	// Action type for the agent state of preview dial.
	AdherenceAgentRuleActionType_ADHERENCE_AGENT_RULE_ACTION_TYPE_PREVIEW_DIAL AdherenceAgentRuleActionType = 3
	// Action type for answering calls.
	AdherenceAgentRuleActionType_ADHERENCE_AGENT_RULE_ACTION_TYPE_ANSWER_CALLS AdherenceAgentRuleActionType = 4
	// Action type for the agent state of on call.
	AdherenceAgentRuleActionType_ADHERENCE_AGENT_RULE_ACTION_TYPE_ON_CALL AdherenceAgentRuleActionType = 5
	// Action type for the agent state of on hold.
	AdherenceAgentRuleActionType_ADHERENCE_AGENT_RULE_ACTION_TYPE_ON_HOLD AdherenceAgentRuleActionType = 6
	// Action type for the agent state of start of shift.
	AdherenceAgentRuleActionType_ADHERENCE_AGENT_RULE_ACTION_TYPE_SHIFT_START AdherenceAgentRuleActionType = 7
	// Action type for starting a shift late.
	AdherenceAgentRuleActionType_ADHERENCE_AGENT_RULE_ACTION_TYPE_SHIFT_START_LATE AdherenceAgentRuleActionType = 8
	// Action type for ending a shift early.
	AdherenceAgentRuleActionType_ADHERENCE_AGENT_RULE_ACTION_TYPE_SHIFT_END_EARLY AdherenceAgentRuleActionType = 9
)

// Enum value maps for AdherenceAgentRuleActionType.
var (
	AdherenceAgentRuleActionType_name = map[int32]string{
		0: "ADHERENCE_AGENT_RULE_ACTION_TYPE_WRAP_UP",
		1: "ADHERENCE_AGENT_RULE_ACTION_TYPE_WAITING",
		2: "ADHERENCE_AGENT_RULE_ACTION_TYPE_MANUAL_DIAL",
		3: "ADHERENCE_AGENT_RULE_ACTION_TYPE_PREVIEW_DIAL",
		4: "ADHERENCE_AGENT_RULE_ACTION_TYPE_ANSWER_CALLS",
		5: "ADHERENCE_AGENT_RULE_ACTION_TYPE_ON_CALL",
		6: "ADHERENCE_AGENT_RULE_ACTION_TYPE_ON_HOLD",
		7: "ADHERENCE_AGENT_RULE_ACTION_TYPE_SHIFT_START",
		8: "ADHERENCE_AGENT_RULE_ACTION_TYPE_SHIFT_START_LATE",
		9: "ADHERENCE_AGENT_RULE_ACTION_TYPE_SHIFT_END_EARLY",
	}
	AdherenceAgentRuleActionType_value = map[string]int32{
		"ADHERENCE_AGENT_RULE_ACTION_TYPE_WRAP_UP":          0,
		"ADHERENCE_AGENT_RULE_ACTION_TYPE_WAITING":          1,
		"ADHERENCE_AGENT_RULE_ACTION_TYPE_MANUAL_DIAL":      2,
		"ADHERENCE_AGENT_RULE_ACTION_TYPE_PREVIEW_DIAL":     3,
		"ADHERENCE_AGENT_RULE_ACTION_TYPE_ANSWER_CALLS":     4,
		"ADHERENCE_AGENT_RULE_ACTION_TYPE_ON_CALL":          5,
		"ADHERENCE_AGENT_RULE_ACTION_TYPE_ON_HOLD":          6,
		"ADHERENCE_AGENT_RULE_ACTION_TYPE_SHIFT_START":      7,
		"ADHERENCE_AGENT_RULE_ACTION_TYPE_SHIFT_START_LATE": 8,
		"ADHERENCE_AGENT_RULE_ACTION_TYPE_SHIFT_END_EARLY":  9,
	}
)

func (x AdherenceAgentRuleActionType) Enum() *AdherenceAgentRuleActionType {
	p := new(AdherenceAgentRuleActionType)
	*p = x
	return p
}

func (x AdherenceAgentRuleActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdherenceAgentRuleActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[29].Descriptor()
}

func (AdherenceAgentRuleActionType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[29]
}

func (x AdherenceAgentRuleActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdherenceAgentRuleActionType.Descriptor instead.
func (AdherenceAgentRuleActionType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{29}
}

type SkillType_Enum int32

const (
	SkillType_AGENT_SKILL    SkillType_Enum = 0
	SkillType_HUNT_GROUP     SkillType_Enum = 1
	SkillType_AGENT_PBX      SkillType_Enum = 2 // NOT used by WFM.
	SkillType_HUNT_GROUP_PBX SkillType_Enum = 3 // NOT used by WFM.
	SkillType_PBX            SkillType_Enum = 4
	SkillType_AGENT          SkillType_Enum = 5 // NOT used by WFM.
)

// Enum value maps for SkillType_Enum.
var (
	SkillType_Enum_name = map[int32]string{
		0: "AGENT_SKILL",
		1: "HUNT_GROUP",
		2: "AGENT_PBX",
		3: "HUNT_GROUP_PBX",
		4: "PBX",
		5: "AGENT",
	}
	SkillType_Enum_value = map[string]int32{
		"AGENT_SKILL":    0,
		"HUNT_GROUP":     1,
		"AGENT_PBX":      2,
		"HUNT_GROUP_PBX": 3,
		"PBX":            4,
		"AGENT":          5,
	}
)

func (x SkillType_Enum) Enum() *SkillType_Enum {
	p := new(SkillType_Enum)
	*p = x
	return p
}

func (x SkillType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkillType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[30].Descriptor()
}

func (SkillType_Enum) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[30]
}

func (x SkillType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkillType_Enum.Descriptor instead.
func (SkillType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{0, 0}
}

// enum representing the type of a of skill profile category.
type SkillProfileCategory_CategoryType int32

const (
	// Single skill profile.
	SkillProfileCategory_SINGLE_SKILL_PROFILE SkillProfileCategory_CategoryType = 0
	// Skill profile group.
	SkillProfileCategory_SKILL_PROFILE_GROUP SkillProfileCategory_CategoryType = 1
)

// Enum value maps for SkillProfileCategory_CategoryType.
var (
	SkillProfileCategory_CategoryType_name = map[int32]string{
		0: "SINGLE_SKILL_PROFILE",
		1: "SKILL_PROFILE_GROUP",
	}
	SkillProfileCategory_CategoryType_value = map[string]int32{
		"SINGLE_SKILL_PROFILE": 0,
		"SKILL_PROFILE_GROUP":  1,
	}
)

func (x SkillProfileCategory_CategoryType) Enum() *SkillProfileCategory_CategoryType {
	p := new(SkillProfileCategory_CategoryType)
	*p = x
	return p
}

func (x SkillProfileCategory_CategoryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkillProfileCategory_CategoryType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_wfm_proto_enumTypes[31].Descriptor()
}

func (SkillProfileCategory_CategoryType) Type() protoreflect.EnumType {
	return &file_api_commons_wfm_proto_enumTypes[31]
}

func (x SkillProfileCategory_CategoryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkillProfileCategory_CategoryType.Descriptor instead.
func (SkillProfileCategory_CategoryType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{12, 0}
}

// Represents the skill types that a client's skills can be.
type SkillType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SkillType) Reset() {
	*x = SkillType{}
	mi := &file_api_commons_wfm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkillType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillType) ProtoMessage() {}

func (x *SkillType) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillType.ProtoReflect.Descriptor instead.
func (*SkillType) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{0}
}

type DatetimeRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// begining datetime
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// ending datetime
	EndDatetime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_datetime,json=endDatetime,proto3" json:"end_datetime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatetimeRange) Reset() {
	*x = DatetimeRange{}
	mi := &file_api_commons_wfm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatetimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimeRange) ProtoMessage() {}

func (x *DatetimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimeRange.ProtoReflect.Descriptor instead.
func (*DatetimeRange) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{1}
}

func (x *DatetimeRange) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *DatetimeRange) GetEndDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDatetime
	}
	return nil
}

// Request message for the UpsertForecastingParameters RPC.
type ForecastingParameters struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// number of minutes in which calls will be grouped together during for the duration of a forecast, must be a multiple of 5 ranging from 5 to 60.
	IntervalWidthInMinutes int32 `protobuf:"varint,1,opt,name=interval_width_in_minutes,json=intervalWidthInMinutes,proto3" json:"interval_width_in_minutes,omitempty"`
	// period for training that the historical data will be sourced from.
	// can be either a number of months to go back from the current datetime or a datetime to start from until the present.
	//
	// Types that are valid to be assigned to HistoricalDataRange:
	//
	//	*ForecastingParameters_HistoricalDataRangeInMonths
	//	*ForecastingParameters_HistoricalDataRangeStartDatetime
	HistoricalDataRange isForecastingParameters_HistoricalDataRange `protobuf_oneof:"historical_data_range"`
	// number of weeks of the training data from the current datetime to use as a forecast test range.
	ForecastTestRangeInWeeks int32 `protobuf:"varint,8,opt,name=forecast_test_range_in_weeks,json=forecastTestRangeInWeeks,proto3" json:"forecast_test_range_in_weeks,omitempty"`
	// date range to generate forecasts.
	//
	// Types that are valid to be assigned to ForecastRange:
	//
	//	*ForecastingParameters_ForecastRangeInWeeks
	//	*ForecastingParameters_ForecastDatetimeRange
	ForecastRange isForecastingParameters_ForecastRange `protobuf_oneof:"forecast_range"`
	// date range to be used to generate training data.
	//
	// Types that are valid to be assigned to TrainingDataRange:
	//
	//	*ForecastingParameters_TrainingDataRangeInMonths
	//	*ForecastingParameters_TrainingDataDatetimeRange
	TrainingDataRange isForecastingParameters_TrainingDataRange `protobuf_oneof:"training_data_range"`
	// Number of months of training data to use when calculating averages.
	// If set to 0, then all the training data will be used when calculating the averages,
	// meaning that the start datetime of the training data to use will be the start datetime of the @training_data_range.
	// Otherwise, it will subtract that many months from the @training_data_range end datetime and use it as the start time.
	AveragesCalculationRangeInMonths int32 `protobuf:"varint,13,opt,name=averages_calculation_range_in_months,json=averagesCalculationRangeInMonths,proto3" json:"averages_calculation_range_in_months,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *ForecastingParameters) Reset() {
	*x = ForecastingParameters{}
	mi := &file_api_commons_wfm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForecastingParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastingParameters) ProtoMessage() {}

func (x *ForecastingParameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastingParameters.ProtoReflect.Descriptor instead.
func (*ForecastingParameters) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{2}
}

func (x *ForecastingParameters) GetIntervalWidthInMinutes() int32 {
	if x != nil {
		return x.IntervalWidthInMinutes
	}
	return 0
}

func (x *ForecastingParameters) GetHistoricalDataRange() isForecastingParameters_HistoricalDataRange {
	if x != nil {
		return x.HistoricalDataRange
	}
	return nil
}

func (x *ForecastingParameters) GetHistoricalDataRangeInMonths() int32 {
	if x != nil {
		if x, ok := x.HistoricalDataRange.(*ForecastingParameters_HistoricalDataRangeInMonths); ok {
			return x.HistoricalDataRangeInMonths
		}
	}
	return 0
}

func (x *ForecastingParameters) GetHistoricalDataRangeStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.HistoricalDataRange.(*ForecastingParameters_HistoricalDataRangeStartDatetime); ok {
			return x.HistoricalDataRangeStartDatetime
		}
	}
	return nil
}

func (x *ForecastingParameters) GetForecastTestRangeInWeeks() int32 {
	if x != nil {
		return x.ForecastTestRangeInWeeks
	}
	return 0
}

func (x *ForecastingParameters) GetForecastRange() isForecastingParameters_ForecastRange {
	if x != nil {
		return x.ForecastRange
	}
	return nil
}

func (x *ForecastingParameters) GetForecastRangeInWeeks() int32 {
	if x != nil {
		if x, ok := x.ForecastRange.(*ForecastingParameters_ForecastRangeInWeeks); ok {
			return x.ForecastRangeInWeeks
		}
	}
	return 0
}

func (x *ForecastingParameters) GetForecastDatetimeRange() *DatetimeRange {
	if x != nil {
		if x, ok := x.ForecastRange.(*ForecastingParameters_ForecastDatetimeRange); ok {
			return x.ForecastDatetimeRange
		}
	}
	return nil
}

func (x *ForecastingParameters) GetTrainingDataRange() isForecastingParameters_TrainingDataRange {
	if x != nil {
		return x.TrainingDataRange
	}
	return nil
}

func (x *ForecastingParameters) GetTrainingDataRangeInMonths() int32 {
	if x != nil {
		if x, ok := x.TrainingDataRange.(*ForecastingParameters_TrainingDataRangeInMonths); ok {
			return x.TrainingDataRangeInMonths
		}
	}
	return 0
}

func (x *ForecastingParameters) GetTrainingDataDatetimeRange() *DatetimeRange {
	if x != nil {
		if x, ok := x.TrainingDataRange.(*ForecastingParameters_TrainingDataDatetimeRange); ok {
			return x.TrainingDataDatetimeRange
		}
	}
	return nil
}

func (x *ForecastingParameters) GetAveragesCalculationRangeInMonths() int32 {
	if x != nil {
		return x.AveragesCalculationRangeInMonths
	}
	return 0
}

type isForecastingParameters_HistoricalDataRange interface {
	isForecastingParameters_HistoricalDataRange()
}

type ForecastingParameters_HistoricalDataRangeInMonths struct {
	// number of months back from the current datetime to look up history.
	HistoricalDataRangeInMonths int32 `protobuf:"varint,6,opt,name=historical_data_range_in_months,json=historicalDataRangeInMonths,proto3,oneof"`
}

type ForecastingParameters_HistoricalDataRangeStartDatetime struct {
	// start datetime to look up the history (end time will be the current datetime).
	HistoricalDataRangeStartDatetime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=historical_data_range_start_datetime,json=historicalDataRangeStartDatetime,proto3,oneof"`
}

func (*ForecastingParameters_HistoricalDataRangeInMonths) isForecastingParameters_HistoricalDataRange() {
}

func (*ForecastingParameters_HistoricalDataRangeStartDatetime) isForecastingParameters_HistoricalDataRange() {
}

type isForecastingParameters_ForecastRange interface {
	isForecastingParameters_ForecastRange()
}

type ForecastingParameters_ForecastRangeInWeeks struct {
	// number of weeks from the current datetime that forecast will be made.
	ForecastRangeInWeeks int32 `protobuf:"varint,9,opt,name=forecast_range_in_weeks,json=forecastRangeInWeeks,proto3,oneof"`
}

type ForecastingParameters_ForecastDatetimeRange struct {
	// date range at which a forecasts will be made.
	ForecastDatetimeRange *DatetimeRange `protobuf:"bytes,10,opt,name=forecast_datetime_range,json=forecastDatetimeRange,proto3,oneof"`
}

func (*ForecastingParameters_ForecastRangeInWeeks) isForecastingParameters_ForecastRange() {}

func (*ForecastingParameters_ForecastDatetimeRange) isForecastingParameters_ForecastRange() {}

type isForecastingParameters_TrainingDataRange interface {
	isForecastingParameters_TrainingDataRange()
}

type ForecastingParameters_TrainingDataRangeInMonths struct {
	// number of months in the past from the current datetime that the training data will be generated from.
	TrainingDataRangeInMonths int32 `protobuf:"varint,11,opt,name=training_data_range_in_months,json=trainingDataRangeInMonths,proto3,oneof"`
}

type ForecastingParameters_TrainingDataDatetimeRange struct {
	// date range in which the training data will be generated.
	TrainingDataDatetimeRange *DatetimeRange `protobuf:"bytes,12,opt,name=training_data_datetime_range,json=trainingDataDatetimeRange,proto3,oneof"`
}

func (*ForecastingParameters_TrainingDataRangeInMonths) isForecastingParameters_TrainingDataRange() {}

func (*ForecastingParameters_TrainingDataDatetimeRange) isForecastingParameters_TrainingDataRange() {}

// ----------------------- Message types used by BuildProfileForecastReq() ------------------
// a profile for time of day, for each day of the week
type ProfileTOD struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sunday        []float32              `protobuf:"fixed32,1,rep,packed,name=sunday,proto3" json:"sunday,omitempty"`
	Monday        []float32              `protobuf:"fixed32,2,rep,packed,name=monday,proto3" json:"monday,omitempty"`
	Tuesday       []float32              `protobuf:"fixed32,3,rep,packed,name=tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday     []float32              `protobuf:"fixed32,4,rep,packed,name=wednesday,proto3" json:"wednesday,omitempty"`
	Thursday      []float32              `protobuf:"fixed32,5,rep,packed,name=thursday,proto3" json:"thursday,omitempty"`
	Friday        []float32              `protobuf:"fixed32,6,rep,packed,name=friday,proto3" json:"friday,omitempty"`
	Saturday      []float32              `protobuf:"fixed32,7,rep,packed,name=saturday,proto3" json:"saturday,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileTOD) Reset() {
	*x = ProfileTOD{}
	mi := &file_api_commons_wfm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileTOD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileTOD) ProtoMessage() {}

func (x *ProfileTOD) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileTOD.ProtoReflect.Descriptor instead.
func (*ProfileTOD) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{3}
}

func (x *ProfileTOD) GetSunday() []float32 {
	if x != nil {
		return x.Sunday
	}
	return nil
}

func (x *ProfileTOD) GetMonday() []float32 {
	if x != nil {
		return x.Monday
	}
	return nil
}

func (x *ProfileTOD) GetTuesday() []float32 {
	if x != nil {
		return x.Tuesday
	}
	return nil
}

func (x *ProfileTOD) GetWednesday() []float32 {
	if x != nil {
		return x.Wednesday
	}
	return nil
}

func (x *ProfileTOD) GetThursday() []float32 {
	if x != nil {
		return x.Thursday
	}
	return nil
}

func (x *ProfileTOD) GetFriday() []float32 {
	if x != nil {
		return x.Friday
	}
	return nil
}

func (x *ProfileTOD) GetSaturday() []float32 {
	if x != nil {
		return x.Saturday
	}
	return nil
}

// a profile for week of month, for each month of the year
type ProfileWOMS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	January       []float32              `protobuf:"fixed32,1,rep,packed,name=january,proto3" json:"january,omitempty"`
	February      []float32              `protobuf:"fixed32,2,rep,packed,name=february,proto3" json:"february,omitempty"`
	March         []float32              `protobuf:"fixed32,3,rep,packed,name=march,proto3" json:"march,omitempty"`
	April         []float32              `protobuf:"fixed32,4,rep,packed,name=april,proto3" json:"april,omitempty"`
	May           []float32              `protobuf:"fixed32,5,rep,packed,name=may,proto3" json:"may,omitempty"`
	June          []float32              `protobuf:"fixed32,6,rep,packed,name=june,proto3" json:"june,omitempty"`
	July          []float32              `protobuf:"fixed32,7,rep,packed,name=july,proto3" json:"july,omitempty"`
	August        []float32              `protobuf:"fixed32,8,rep,packed,name=august,proto3" json:"august,omitempty"`
	September     []float32              `protobuf:"fixed32,9,rep,packed,name=september,proto3" json:"september,omitempty"`
	October       []float32              `protobuf:"fixed32,10,rep,packed,name=october,proto3" json:"october,omitempty"`
	November      []float32              `protobuf:"fixed32,11,rep,packed,name=november,proto3" json:"november,omitempty"`
	December      []float32              `protobuf:"fixed32,12,rep,packed,name=december,proto3" json:"december,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileWOMS) Reset() {
	*x = ProfileWOMS{}
	mi := &file_api_commons_wfm_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileWOMS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileWOMS) ProtoMessage() {}

func (x *ProfileWOMS) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileWOMS.ProtoReflect.Descriptor instead.
func (*ProfileWOMS) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{4}
}

func (x *ProfileWOMS) GetJanuary() []float32 {
	if x != nil {
		return x.January
	}
	return nil
}

func (x *ProfileWOMS) GetFebruary() []float32 {
	if x != nil {
		return x.February
	}
	return nil
}

func (x *ProfileWOMS) GetMarch() []float32 {
	if x != nil {
		return x.March
	}
	return nil
}

func (x *ProfileWOMS) GetApril() []float32 {
	if x != nil {
		return x.April
	}
	return nil
}

func (x *ProfileWOMS) GetMay() []float32 {
	if x != nil {
		return x.May
	}
	return nil
}

func (x *ProfileWOMS) GetJune() []float32 {
	if x != nil {
		return x.June
	}
	return nil
}

func (x *ProfileWOMS) GetJuly() []float32 {
	if x != nil {
		return x.July
	}
	return nil
}

func (x *ProfileWOMS) GetAugust() []float32 {
	if x != nil {
		return x.August
	}
	return nil
}

func (x *ProfileWOMS) GetSeptember() []float32 {
	if x != nil {
		return x.September
	}
	return nil
}

func (x *ProfileWOMS) GetOctober() []float32 {
	if x != nil {
		return x.October
	}
	return nil
}

func (x *ProfileWOMS) GetNovember() []float32 {
	if x != nil {
		return x.November
	}
	return nil
}

func (x *ProfileWOMS) GetDecember() []float32 {
	if x != nil {
		return x.December
	}
	return nil
}

// a profile each day of the week
type ProfileDOW struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sunday        float32                `protobuf:"fixed32,1,opt,name=sunday,proto3" json:"sunday,omitempty"`
	Monday        float32                `protobuf:"fixed32,2,opt,name=monday,proto3" json:"monday,omitempty"`
	Tuesday       float32                `protobuf:"fixed32,3,opt,name=tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday     float32                `protobuf:"fixed32,4,opt,name=wednesday,proto3" json:"wednesday,omitempty"`
	Thursday      float32                `protobuf:"fixed32,5,opt,name=thursday,proto3" json:"thursday,omitempty"`
	Friday        float32                `protobuf:"fixed32,6,opt,name=friday,proto3" json:"friday,omitempty"`
	Saturday      float32                `protobuf:"fixed32,7,opt,name=saturday,proto3" json:"saturday,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileDOW) Reset() {
	*x = ProfileDOW{}
	mi := &file_api_commons_wfm_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileDOW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileDOW) ProtoMessage() {}

func (x *ProfileDOW) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileDOW.ProtoReflect.Descriptor instead.
func (*ProfileDOW) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{5}
}

func (x *ProfileDOW) GetSunday() float32 {
	if x != nil {
		return x.Sunday
	}
	return 0
}

func (x *ProfileDOW) GetMonday() float32 {
	if x != nil {
		return x.Monday
	}
	return 0
}

func (x *ProfileDOW) GetTuesday() float32 {
	if x != nil {
		return x.Tuesday
	}
	return 0
}

func (x *ProfileDOW) GetWednesday() float32 {
	if x != nil {
		return x.Wednesday
	}
	return 0
}

func (x *ProfileDOW) GetThursday() float32 {
	if x != nil {
		return x.Thursday
	}
	return 0
}

func (x *ProfileDOW) GetFriday() float32 {
	if x != nil {
		return x.Friday
	}
	return 0
}

func (x *ProfileDOW) GetSaturday() float32 {
	if x != nil {
		return x.Saturday
	}
	return 0
}

// a profile for each month of the year
type ProfileMOY struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	January       float32                `protobuf:"fixed32,1,opt,name=january,proto3" json:"january,omitempty"`
	February      float32                `protobuf:"fixed32,2,opt,name=february,proto3" json:"february,omitempty"`
	March         float32                `protobuf:"fixed32,3,opt,name=march,proto3" json:"march,omitempty"`
	April         float32                `protobuf:"fixed32,4,opt,name=april,proto3" json:"april,omitempty"`
	May           float32                `protobuf:"fixed32,5,opt,name=may,proto3" json:"may,omitempty"`
	June          float32                `protobuf:"fixed32,6,opt,name=june,proto3" json:"june,omitempty"`
	July          float32                `protobuf:"fixed32,7,opt,name=july,proto3" json:"july,omitempty"`
	August        float32                `protobuf:"fixed32,8,opt,name=august,proto3" json:"august,omitempty"`
	September     float32                `protobuf:"fixed32,9,opt,name=september,proto3" json:"september,omitempty"`
	October       float32                `protobuf:"fixed32,10,opt,name=october,proto3" json:"october,omitempty"`
	November      float32                `protobuf:"fixed32,11,opt,name=november,proto3" json:"november,omitempty"`
	December      float32                `protobuf:"fixed32,12,opt,name=december,proto3" json:"december,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileMOY) Reset() {
	*x = ProfileMOY{}
	mi := &file_api_commons_wfm_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileMOY) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileMOY) ProtoMessage() {}

func (x *ProfileMOY) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileMOY.ProtoReflect.Descriptor instead.
func (*ProfileMOY) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{6}
}

func (x *ProfileMOY) GetJanuary() float32 {
	if x != nil {
		return x.January
	}
	return 0
}

func (x *ProfileMOY) GetFebruary() float32 {
	if x != nil {
		return x.February
	}
	return 0
}

func (x *ProfileMOY) GetMarch() float32 {
	if x != nil {
		return x.March
	}
	return 0
}

func (x *ProfileMOY) GetApril() float32 {
	if x != nil {
		return x.April
	}
	return 0
}

func (x *ProfileMOY) GetMay() float32 {
	if x != nil {
		return x.May
	}
	return 0
}

func (x *ProfileMOY) GetJune() float32 {
	if x != nil {
		return x.June
	}
	return 0
}

func (x *ProfileMOY) GetJuly() float32 {
	if x != nil {
		return x.July
	}
	return 0
}

func (x *ProfileMOY) GetAugust() float32 {
	if x != nil {
		return x.August
	}
	return 0
}

func (x *ProfileMOY) GetSeptember() float32 {
	if x != nil {
		return x.September
	}
	return 0
}

func (x *ProfileMOY) GetOctober() float32 {
	if x != nil {
		return x.October
	}
	return 0
}

func (x *ProfileMOY) GetNovember() float32 {
	if x != nil {
		return x.November
	}
	return 0
}

func (x *ProfileMOY) GetDecember() float32 {
	if x != nil {
		return x.December
	}
	return 0
}

type DistributionProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// For each of the 7 days of the week, a list of intervals signifying the distribution by time of day in intervals
	// determined by interval_minutes, starting with interval 0 = 12AM. so there would be 96 element for 15-minute intervals
	ProfileTod *ProfileTOD `protobuf:"bytes,1,opt,name=profile_tod,json=profileTod,proto3" json:"profile_tod,omitempty"`
	// For each of the 12 months of the year, a list of 6 week profiles. The first index for a given month is week 1 : the week
	//
	//	of the first day of the month. The week with the last day of the month is the last index. e.g August 2021 has
	//	6 'weeks'
	ProfileWoms *ProfileWOMS `protobuf:"bytes,2,opt,name=profile_woms,json=profileWoms,proto3" json:"profile_woms,omitempty"`
	// a profile for each day of the week
	ProfileDow *ProfileDOW `protobuf:"bytes,3,opt,name=profile_dow,json=profileDow,proto3" json:"profile_dow,omitempty"`
	// a profile for each month of the year
	ProfileMoy    *ProfileMOY `protobuf:"bytes,4,opt,name=profile_moy,json=profileMoy,proto3" json:"profile_moy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DistributionProfile) Reset() {
	*x = DistributionProfile{}
	mi := &file_api_commons_wfm_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistributionProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributionProfile) ProtoMessage() {}

func (x *DistributionProfile) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributionProfile.ProtoReflect.Descriptor instead.
func (*DistributionProfile) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{7}
}

func (x *DistributionProfile) GetProfileTod() *ProfileTOD {
	if x != nil {
		return x.ProfileTod
	}
	return nil
}

func (x *DistributionProfile) GetProfileWoms() *ProfileWOMS {
	if x != nil {
		return x.ProfileWoms
	}
	return nil
}

func (x *DistributionProfile) GetProfileDow() *ProfileDOW {
	if x != nil {
		return x.ProfileDow
	}
	return nil
}

func (x *DistributionProfile) GetProfileMoy() *ProfileMOY {
	if x != nil {
		return x.ProfileMoy
	}
	return nil
}

// defines a template profile for call count distributions
type CallProfileGroupCalls struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TotalCalls          int32                  `protobuf:"varint,1,opt,name=total_calls,json=totalCalls,proto3" json:"total_calls,omitempty"`
	DistributionProfile *DistributionProfile   `protobuf:"bytes,2,opt,name=distribution_profile,json=distributionProfile,proto3" json:"distribution_profile,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CallProfileGroupCalls) Reset() {
	*x = CallProfileGroupCalls{}
	mi := &file_api_commons_wfm_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallProfileGroupCalls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallProfileGroupCalls) ProtoMessage() {}

func (x *CallProfileGroupCalls) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallProfileGroupCalls.ProtoReflect.Descriptor instead.
func (*CallProfileGroupCalls) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{8}
}

func (x *CallProfileGroupCalls) GetTotalCalls() int32 {
	if x != nil {
		return x.TotalCalls
	}
	return 0
}

func (x *CallProfileGroupCalls) GetDistributionProfile() *DistributionProfile {
	if x != nil {
		return x.DistributionProfile
	}
	return nil
}

// defines a template profile of call characteristic distributions
type CallProfileGroupAvgs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// min average (e.g. min ATAB)
	MinAverage float32 `protobuf:"fixed32,1,opt,name=min_average,json=minAverage,proto3" json:"min_average,omitempty"`
	// max average (e.g. max ATAB)
	MaxAverage          float32              `protobuf:"fixed32,2,opt,name=max_average,json=maxAverage,proto3" json:"max_average,omitempty"`
	DistributionProfile *DistributionProfile `protobuf:"bytes,3,opt,name=distribution_profile,json=distributionProfile,proto3" json:"distribution_profile,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CallProfileGroupAvgs) Reset() {
	*x = CallProfileGroupAvgs{}
	mi := &file_api_commons_wfm_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallProfileGroupAvgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallProfileGroupAvgs) ProtoMessage() {}

func (x *CallProfileGroupAvgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallProfileGroupAvgs.ProtoReflect.Descriptor instead.
func (*CallProfileGroupAvgs) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{9}
}

func (x *CallProfileGroupAvgs) GetMinAverage() float32 {
	if x != nil {
		return x.MinAverage
	}
	return 0
}

func (x *CallProfileGroupAvgs) GetMaxAverage() float32 {
	if x != nil {
		return x.MaxAverage
	}
	return 0
}

func (x *CallProfileGroupAvgs) GetDistributionProfile() *DistributionProfile {
	if x != nil {
		return x.DistributionProfile
	}
	return nil
}

// Encapsulates the two kinds of options available so they can be interchangeably used.
type OptionTypes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to DesiredOption:
	//
	//	*OptionTypes_OpenTimesOption
	//	*OptionTypes_AvailabilityOption
	DesiredOption isOptionTypes_DesiredOption `protobuf_oneof:"desired_option"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptionTypes) Reset() {
	*x = OptionTypes{}
	mi := &file_api_commons_wfm_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionTypes) ProtoMessage() {}

func (x *OptionTypes) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionTypes.ProtoReflect.Descriptor instead.
func (*OptionTypes) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{10}
}

func (x *OptionTypes) GetDesiredOption() isOptionTypes_DesiredOption {
	if x != nil {
		return x.DesiredOption
	}
	return nil
}

func (x *OptionTypes) GetOpenTimesOption() OpenTimesOption {
	if x != nil {
		if x, ok := x.DesiredOption.(*OptionTypes_OpenTimesOption); ok {
			return x.OpenTimesOption
		}
	}
	return OpenTimesOption_CLOSED
}

func (x *OptionTypes) GetAvailabilityOption() AvailabilityOption {
	if x != nil {
		if x, ok := x.DesiredOption.(*OptionTypes_AvailabilityOption); ok {
			return x.AvailabilityOption
		}
	}
	return AvailabilityOption_AVAILABLE
}

type isOptionTypes_DesiredOption interface {
	isOptionTypes_DesiredOption()
}

type OptionTypes_OpenTimesOption struct {
	// Option used by OpenTime
	OpenTimesOption OpenTimesOption `protobuf:"varint,1,opt,name=open_times_option,json=openTimesOption,proto3,enum=api.commons.OpenTimesOption,oneof"`
}

type OptionTypes_AvailabilityOption struct {
	// Option used by Agent Availability
	AvailabilityOption AvailabilityOption `protobuf:"varint,2,opt,name=availability_option,json=availabilityOption,proto3,enum=api.commons.AvailabilityOption,oneof"`
}

func (*OptionTypes_OpenTimesOption) isOptionTypes_DesiredOption() {}

func (*OptionTypes_AvailabilityOption) isOptionTypes_DesiredOption() {}

// Filter for schedule selection.
type ScheduleSelector struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the schedule to select, not needed for Published schedules.
	ScheduleSid int64 `protobuf:"varint,1,opt,name=schedule_sid,json=scheduleSid,proto3" json:"schedule_sid,omitempty"`
	// Type of the schedule to select.
	ScheduleType  ScheduleType `protobuf:"varint,2,opt,name=schedule_type,json=scheduleType,proto3,enum=api.commons.ScheduleType" json:"schedule_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleSelector) Reset() {
	*x = ScheduleSelector{}
	mi := &file_api_commons_wfm_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleSelector) ProtoMessage() {}

func (x *ScheduleSelector) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleSelector.ProtoReflect.Descriptor instead.
func (*ScheduleSelector) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{11}
}

func (x *ScheduleSelector) GetScheduleSid() int64 {
	if x != nil {
		return x.ScheduleSid
	}
	return 0
}

func (x *ScheduleSelector) GetScheduleType() ScheduleType {
	if x != nil {
		return x.ScheduleType
	}
	return ScheduleType_DRAFT
}

// Indetifier for a skill profile category.
type SkillProfileCategory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of either a skill profile or a skill profile group determined by @skill_profile_category_type.
	SkillProfileCategorySid int64 `protobuf:"varint,1,opt,name=skill_profile_category_sid,json=skillProfileCategorySid,proto3" json:"skill_profile_category_sid,omitempty"`
	// Category type for @skill_profile_category_sid.
	SkillProfileCategoryType SkillProfileCategory_CategoryType `protobuf:"varint,2,opt,name=skill_profile_category_type,json=skillProfileCategoryType,proto3,enum=api.commons.SkillProfileCategory_CategoryType" json:"skill_profile_category_type,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *SkillProfileCategory) Reset() {
	*x = SkillProfileCategory{}
	mi := &file_api_commons_wfm_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkillProfileCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillProfileCategory) ProtoMessage() {}

func (x *SkillProfileCategory) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillProfileCategory.ProtoReflect.Descriptor instead.
func (*SkillProfileCategory) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{12}
}

func (x *SkillProfileCategory) GetSkillProfileCategorySid() int64 {
	if x != nil {
		return x.SkillProfileCategorySid
	}
	return 0
}

func (x *SkillProfileCategory) GetSkillProfileCategoryType() SkillProfileCategory_CategoryType {
	if x != nil {
		return x.SkillProfileCategoryType
	}
	return SkillProfileCategory_SINGLE_SKILL_PROFILE
}

// Defines the per-skill metrics for SchedulingResultMetric from the Scheduler.
// Wanted to define this in api.v1alpha1.wfm, but had a backwards compatibility error trying to move SchedulingResultMetric.
// Not a top-level entity:
// * No primary-key field.
// * No org_id field.
// * No rpc endpoints, part of SchedulingResultMetric only.
type SchedulingResultMetricForSkillCollection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The total number of minute-width intervals that were scheduled and measured.
	TotalInternalIntervals int32 `protobuf:"varint,1,opt,name=total_internal_intervals,json=totalInternalIntervals,proto3" json:"total_internal_intervals,omitempty"`
	// The total number of minute-width intervals that had enough scheduled ftes to meet the predicted call FTEs.
	TotalIntervalsWithFteRequired int32 `protobuf:"varint,2,opt,name=total_intervals_with_fte_required,json=totalIntervalsWithFteRequired,proto3" json:"total_intervals_with_fte_required,omitempty"`
	// The total number of intervals that have unmet predicted call FTEs (not enough scheduled FTEs).
	TotalIntervalsWithFtesRemaining int32 `protobuf:"varint,3,opt,name=total_intervals_with_ftes_remaining,json=totalIntervalsWithFtesRemaining,proto3" json:"total_intervals_with_ftes_remaining,omitempty"`
	// The average ratio of interval metrics (min(1,  scheduled/predicted)). A value of 1 means every interval
	//
	//	with predicted call FTEs has enough scheduled FTEs to meet requirements.
	Coverage float32 `protobuf:"fixed32,4,opt,name=coverage,proto3" json:"coverage,omitempty"`
	// Root Mean Square metric for predicted - scheduled FTEs.
	RootMeanSquare float32 `protobuf:"fixed32,5,opt,name=root_mean_square,json=rootMeanSquare,proto3" json:"root_mean_square,omitempty"`
	// Set to TRUE if this object contains valid metrics.
	HasResult bool `protobuf:"varint,6,opt,name=has_result,json=hasResult,proto3" json:"has_result,omitempty"`
	// Pointer to skill collection.
	SkillCollection *SkillProfileCategory `protobuf:"bytes,7,opt,name=skill_collection,json=skillCollection,proto3" json:"skill_collection,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SchedulingResultMetricForSkillCollection) Reset() {
	*x = SchedulingResultMetricForSkillCollection{}
	mi := &file_api_commons_wfm_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchedulingResultMetricForSkillCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulingResultMetricForSkillCollection) ProtoMessage() {}

func (x *SchedulingResultMetricForSkillCollection) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulingResultMetricForSkillCollection.ProtoReflect.Descriptor instead.
func (*SchedulingResultMetricForSkillCollection) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{13}
}

func (x *SchedulingResultMetricForSkillCollection) GetTotalInternalIntervals() int32 {
	if x != nil {
		return x.TotalInternalIntervals
	}
	return 0
}

func (x *SchedulingResultMetricForSkillCollection) GetTotalIntervalsWithFteRequired() int32 {
	if x != nil {
		return x.TotalIntervalsWithFteRequired
	}
	return 0
}

func (x *SchedulingResultMetricForSkillCollection) GetTotalIntervalsWithFtesRemaining() int32 {
	if x != nil {
		return x.TotalIntervalsWithFtesRemaining
	}
	return 0
}

func (x *SchedulingResultMetricForSkillCollection) GetCoverage() float32 {
	if x != nil {
		return x.Coverage
	}
	return 0
}

func (x *SchedulingResultMetricForSkillCollection) GetRootMeanSquare() float32 {
	if x != nil {
		return x.RootMeanSquare
	}
	return 0
}

func (x *SchedulingResultMetricForSkillCollection) GetHasResult() bool {
	if x != nil {
		return x.HasResult
	}
	return false
}

func (x *SchedulingResultMetricForSkillCollection) GetSkillCollection() *SkillProfileCategory {
	if x != nil {
		return x.SkillCollection
	}
	return nil
}

// Defines a Scheduling Result Metric from the Scheduler.
// Wanted to define this in api.v1alpha1.wfm, but had a backwards compatibility error trying to move it there.
type SchedulingResultMetric struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The total number of minute-width intervals that were scheduled and measured.
	TotalInternalIntervals int32 `protobuf:"varint,1,opt,name=total_internal_intervals,json=totalInternalIntervals,proto3" json:"total_internal_intervals,omitempty"`
	// The total number of minute-width intervals that had enough scheduled ftes to meet the predicted call FTEs.
	TotalIntervalsWithFteRequired int32 `protobuf:"varint,2,opt,name=total_intervals_with_fte_required,json=totalIntervalsWithFteRequired,proto3" json:"total_intervals_with_fte_required,omitempty"`
	// The total number of intervals that have unmet predicted call FTEs (not enough scheduled FTEs).
	TotalIntervalsWithFtesRemaining int32 `protobuf:"varint,3,opt,name=total_intervals_with_ftes_remaining,json=totalIntervalsWithFtesRemaining,proto3" json:"total_intervals_with_ftes_remaining,omitempty"`
	// The average ratio of interval metrics (min(1,  scheduled/predicted)). A value of 1 means every interval
	//
	//	with predicted call FTEs has enough scheduled FTEs to meet requirements.
	Coverage float32 `protobuf:"fixed32,4,opt,name=coverage,proto3" json:"coverage,omitempty"`
	// Root Mean Square metric for predicted - scheduled FTEs.
	RootMeanSquare float32 `protobuf:"fixed32,5,opt,name=root_mean_square,json=rootMeanSquare,proto3" json:"root_mean_square,omitempty"`
	// Set to TRUE if this object contains valid metrics.
	HasResult bool `protobuf:"varint,6,opt,name=has_result,json=hasResult,proto3" json:"has_result,omitempty"`
	// Per-skill metrics.
	MetricsBySkillCollection []*SchedulingResultMetricForSkillCollection `protobuf:"bytes,7,rep,name=metrics_by_skill_collection,json=metricsBySkillCollection,proto3" json:"metrics_by_skill_collection,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *SchedulingResultMetric) Reset() {
	*x = SchedulingResultMetric{}
	mi := &file_api_commons_wfm_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchedulingResultMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulingResultMetric) ProtoMessage() {}

func (x *SchedulingResultMetric) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulingResultMetric.ProtoReflect.Descriptor instead.
func (*SchedulingResultMetric) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{14}
}

func (x *SchedulingResultMetric) GetTotalInternalIntervals() int32 {
	if x != nil {
		return x.TotalInternalIntervals
	}
	return 0
}

func (x *SchedulingResultMetric) GetTotalIntervalsWithFteRequired() int32 {
	if x != nil {
		return x.TotalIntervalsWithFteRequired
	}
	return 0
}

func (x *SchedulingResultMetric) GetTotalIntervalsWithFtesRemaining() int32 {
	if x != nil {
		return x.TotalIntervalsWithFtesRemaining
	}
	return 0
}

func (x *SchedulingResultMetric) GetCoverage() float32 {
	if x != nil {
		return x.Coverage
	}
	return 0
}

func (x *SchedulingResultMetric) GetRootMeanSquare() float32 {
	if x != nil {
		return x.RootMeanSquare
	}
	return 0
}

func (x *SchedulingResultMetric) GetHasResult() bool {
	if x != nil {
		return x.HasResult
	}
	return false
}

func (x *SchedulingResultMetric) GetMetricsBySkillCollection() []*SchedulingResultMetricForSkillCollection {
	if x != nil {
		return x.MetricsBySkillCollection
	}
	return nil
}

type ClientHistoryCacheInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current state that a client's cache is at.
	State HistoryCacheState `protobuf:"varint,1,opt,name=state,proto3,enum=api.commons.HistoryCacheState" json:"state,omitempty"`
	// Percentage estimate of how much of the cache has been loaded.
	ProgressPercentage int32 `protobuf:"varint,2,opt,name=progress_percentage,json=progressPercentage,proto3" json:"progress_percentage,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ClientHistoryCacheInfo) Reset() {
	*x = ClientHistoryCacheInfo{}
	mi := &file_api_commons_wfm_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientHistoryCacheInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHistoryCacheInfo) ProtoMessage() {}

func (x *ClientHistoryCacheInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHistoryCacheInfo.ProtoReflect.Descriptor instead.
func (*ClientHistoryCacheInfo) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{15}
}

func (x *ClientHistoryCacheInfo) GetState() HistoryCacheState {
	if x != nil {
		return x.State
	}
	return HistoryCacheState_NOT_LOADED
}

func (x *ClientHistoryCacheInfo) GetProgressPercentage() int32 {
	if x != nil {
		return x.ProgressPercentage
	}
	return 0
}

// Defines an ErrorTrace to relate the error to associated log entries.
type ErrorTrace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// unique identifier to find any logs related to the error.
	GrpcTraceBin  string `protobuf:"bytes,1,opt,name=grpc_trace_bin,json=grpcTraceBin,proto3" json:"grpc_trace_bin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorTrace) Reset() {
	*x = ErrorTrace{}
	mi := &file_api_commons_wfm_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorTrace) ProtoMessage() {}

func (x *ErrorTrace) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorTrace.ProtoReflect.Descriptor instead.
func (*ErrorTrace) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{16}
}

func (x *ErrorTrace) GetGrpcTraceBin() string {
	if x != nil {
		return x.GrpcTraceBin
	}
	return ""
}

// Represents the status of a client's initial setup and progress to use WFM.
type InitialSetupStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current state that a client is at.
	State InitialSetupState `protobuf:"varint,1,opt,name=state,proto3,enum=api.commons.InitialSetupState" json:"state,omitempty"`
	// Progress percentage estimate of the setup process.
	ProgressPercentage int32 `protobuf:"varint,2,opt,name=progress_percentage,json=progressPercentage,proto3" json:"progress_percentage,omitempty"`
	// Any message that a service has in regards to their current state.
	Message       string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitialSetupStatus) Reset() {
	*x = InitialSetupStatus{}
	mi := &file_api_commons_wfm_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitialSetupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialSetupStatus) ProtoMessage() {}

func (x *InitialSetupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialSetupStatus.ProtoReflect.Descriptor instead.
func (*InitialSetupStatus) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{17}
}

func (x *InitialSetupStatus) GetState() InitialSetupState {
	if x != nil {
		return x.State
	}
	return InitialSetupState_NOT_SETUP
}

func (x *InitialSetupStatus) GetProgressPercentage() int32 {
	if x != nil {
		return x.ProgressPercentage
	}
	return 0
}

func (x *InitialSetupStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Represents an agents real time state over a period of time.
//
// Deprecated: Marked as deprecated in api/commons/wfm.proto.
type AgentStateSegment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The order that this agent state segment fits into the AgentStateSequence.
	// Sequence starts at 0.
	OrderInRts int32 `protobuf:"varint,1,opt,name=order_in_rts,json=orderInRts,proto3" json:"order_in_rts,omitempty"`
	// The state of the agent during this segment.
	States []RealTimeManagementState `protobuf:"varint,2,rep,packed,name=states,proto3,enum=api.commons.RealTimeManagementState" json:"states,omitempty"`
	// The width of this segment in minutes.
	//
	// Deprecated: Marked as deprecated in api/commons/wfm.proto.
	WidthInMinutes int32 `protobuf:"varint,3,opt,name=width_in_minutes,json=widthInMinutes,proto3" json:"width_in_minutes,omitempty"`
	// The width of this segment in seconds.
	WidthInSeconds int32 `protobuf:"varint,4,opt,name=width_in_seconds,json=widthInSeconds,proto3" json:"width_in_seconds,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AgentStateSegment) Reset() {
	*x = AgentStateSegment{}
	mi := &file_api_commons_wfm_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentStateSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentStateSegment) ProtoMessage() {}

func (x *AgentStateSegment) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentStateSegment.ProtoReflect.Descriptor instead.
func (*AgentStateSegment) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{18}
}

func (x *AgentStateSegment) GetOrderInRts() int32 {
	if x != nil {
		return x.OrderInRts
	}
	return 0
}

func (x *AgentStateSegment) GetStates() []RealTimeManagementState {
	if x != nil {
		return x.States
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/wfm.proto.
func (x *AgentStateSegment) GetWidthInMinutes() int32 {
	if x != nil {
		return x.WidthInMinutes
	}
	return 0
}

func (x *AgentStateSegment) GetWidthInSeconds() int32 {
	if x != nil {
		return x.WidthInSeconds
	}
	return 0
}

// Represents a sequence of real time states for a WFM agent.
//
// Deprecated: Marked as deprecated in api/commons/wfm.proto.
type AgentStateSequence struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the agent that the real time state sequence relates to.
	WfmAgentSid int64 `protobuf:"varint,1,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// The datetime where the agent state sequence starts.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// The list of agent state segments that cover the length of the sequence.
	StateSegments []*AgentStateSegment `protobuf:"bytes,3,rep,name=state_segments,json=stateSegments,proto3" json:"state_segments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentStateSequence) Reset() {
	*x = AgentStateSequence{}
	mi := &file_api_commons_wfm_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentStateSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentStateSequence) ProtoMessage() {}

func (x *AgentStateSequence) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentStateSequence.ProtoReflect.Descriptor instead.
func (*AgentStateSequence) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{19}
}

func (x *AgentStateSequence) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

func (x *AgentStateSequence) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *AgentStateSequence) GetStateSegments() []*AgentStateSegment {
	if x != nil {
		return x.StateSegments
	}
	return nil
}

// Represents a single agent's state at a given point in time.
type AdherenceAgentState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// WFM agent sid that the state belongs to.
	WfmAgentSid int64 `protobuf:"varint,1,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// The datetime that the agent state starts.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// The adherence states of the agent at this point in time.
	AdmStates []RealTimeManagementState `protobuf:"varint,3,rep,packed,name=adm_states,json=admStates,proto3,enum=api.commons.RealTimeManagementState" json:"adm_states,omitempty"`
	// Pause Code that the agent is using for this state. Only set when @adm_states contains PAUSED.
	PauseCode     string `protobuf:"bytes,4,opt,name=pause_code,json=pauseCode,proto3" json:"pause_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdherenceAgentState) Reset() {
	*x = AdherenceAgentState{}
	mi := &file_api_commons_wfm_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdherenceAgentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdherenceAgentState) ProtoMessage() {}

func (x *AdherenceAgentState) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdherenceAgentState.ProtoReflect.Descriptor instead.
func (*AdherenceAgentState) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{20}
}

func (x *AdherenceAgentState) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

func (x *AdherenceAgentState) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *AdherenceAgentState) GetAdmStates() []RealTimeManagementState {
	if x != nil {
		return x.AdmStates
	}
	return nil
}

func (x *AdherenceAgentState) GetPauseCode() string {
	if x != nil {
		return x.PauseCode
	}
	return ""
}

// Represents a single violation for an agent's state at a given point in time.
type AdherenceAgentStateViolation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// WFM agent sid that the state belongs to.
	WfmAgentSid int64 `protobuf:"varint,1,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// The datetime that the violation starts.
	StartDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_datetime,json=startDatetime,proto3" json:"start_datetime,omitempty"`
	// The expected adherence states that the agent should be at at this point in time.
	ExpectedRtmStates []RealTimeManagementState `protobuf:"varint,3,rep,packed,name=expected_rtm_states,json=expectedRtmStates,proto3,enum=api.commons.RealTimeManagementState" json:"expected_rtm_states,omitempty"`
	// Expected pause Code that the agent should be using if they were on Pause.
	//
	// Deprecated: Marked as deprecated in api/commons/wfm.proto.
	ExpectedPauseCode string `protobuf:"bytes,4,opt,name=expected_pause_code,json=expectedPauseCode,proto3" json:"expected_pause_code,omitempty"`
	// The actual adherence states that the agent is at this point in time.
	ActualRtmStates []RealTimeManagementState `protobuf:"varint,5,rep,packed,name=actual_rtm_states,json=actualRtmStates,proto3,enum=api.commons.RealTimeManagementState" json:"actual_rtm_states,omitempty"`
	// Actual pause Code that the agent is using if they are on Pause.
	ActualPauseCode string `protobuf:"bytes,6,opt,name=actual_pause_code,json=actualPauseCode,proto3" json:"actual_pause_code,omitempty"`
	// Number of seconds that this violation took.
	ViolationDurationSeconds int32 `protobuf:"varint,7,opt,name=violation_duration_seconds,json=violationDurationSeconds,proto3" json:"violation_duration_seconds,omitempty"`
	// Expected pause codes that the agent should be using if they were on Pause.
	ExpectedPauseCodes []string `protobuf:"bytes,8,rep,name=expected_pause_codes,json=expectedPauseCodes,proto3" json:"expected_pause_codes,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AdherenceAgentStateViolation) Reset() {
	*x = AdherenceAgentStateViolation{}
	mi := &file_api_commons_wfm_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdherenceAgentStateViolation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdherenceAgentStateViolation) ProtoMessage() {}

func (x *AdherenceAgentStateViolation) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdherenceAgentStateViolation.ProtoReflect.Descriptor instead.
func (*AdherenceAgentStateViolation) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{21}
}

func (x *AdherenceAgentStateViolation) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

func (x *AdherenceAgentStateViolation) GetStartDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDatetime
	}
	return nil
}

func (x *AdherenceAgentStateViolation) GetExpectedRtmStates() []RealTimeManagementState {
	if x != nil {
		return x.ExpectedRtmStates
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/wfm.proto.
func (x *AdherenceAgentStateViolation) GetExpectedPauseCode() string {
	if x != nil {
		return x.ExpectedPauseCode
	}
	return ""
}

func (x *AdherenceAgentStateViolation) GetActualRtmStates() []RealTimeManagementState {
	if x != nil {
		return x.ActualRtmStates
	}
	return nil
}

func (x *AdherenceAgentStateViolation) GetActualPauseCode() string {
	if x != nil {
		return x.ActualPauseCode
	}
	return ""
}

func (x *AdherenceAgentStateViolation) GetViolationDurationSeconds() int32 {
	if x != nil {
		return x.ViolationDurationSeconds
	}
	return 0
}

func (x *AdherenceAgentStateViolation) GetExpectedPauseCodes() []string {
	if x != nil {
		return x.ExpectedPauseCodes
	}
	return nil
}

// Bundle of agent states, used when returned as a bundle in a map.
type AdherenceAgentStates struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AgentStates   []*AdherenceAgentState `protobuf:"bytes,1,rep,name=agent_states,json=agentStates,proto3" json:"agent_states,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdherenceAgentStates) Reset() {
	*x = AdherenceAgentStates{}
	mi := &file_api_commons_wfm_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdherenceAgentStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdherenceAgentStates) ProtoMessage() {}

func (x *AdherenceAgentStates) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdherenceAgentStates.ProtoReflect.Descriptor instead.
func (*AdherenceAgentStates) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{22}
}

func (x *AdherenceAgentStates) GetAgentStates() []*AdherenceAgentState {
	if x != nil {
		return x.AgentStates
	}
	return nil
}

// Bundle of agent state violations, used when returned as a bundle in a map.
type AdherenceAgentStateViolations struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Violations    []*AdherenceAgentStateViolation `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdherenceAgentStateViolations) Reset() {
	*x = AdherenceAgentStateViolations{}
	mi := &file_api_commons_wfm_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdherenceAgentStateViolations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdherenceAgentStateViolations) ProtoMessage() {}

func (x *AdherenceAgentStateViolations) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdherenceAgentStateViolations.ProtoReflect.Descriptor instead.
func (*AdherenceAgentStateViolations) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{23}
}

func (x *AdherenceAgentStateViolations) GetViolations() []*AdherenceAgentStateViolation {
	if x != nil {
		return x.Violations
	}
	return nil
}

// Represents an agent's request for time off.
type AgentLeavePetition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the agent leave petition.
	AgentLeavePetitionId int64 `protobuf:"varint,1,opt,name=agent_leave_petition_id,json=agentLeavePetitionId,proto3" json:"agent_leave_petition_id,omitempty"`
	// ID of the agent requesting the time off.
	WfmAgentSid int64 `protobuf:"varint,2,opt,name=wfm_agent_sid,json=wfmAgentSid,proto3" json:"wfm_agent_sid,omitempty"`
	// Current status of the time off request.
	PetitionStatus AgentLeavePetitionStatus `protobuf:"varint,3,opt,name=petition_status,json=petitionStatus,proto3,enum=api.commons.AgentLeavePetitionStatus" json:"petition_status,omitempty"`
	// A comment sent by agent when the time off was requested.
	PetitionComment string `protobuf:"bytes,4,opt,name=petition_comment,json=petitionComment,proto3" json:"petition_comment,omitempty"`
	// A response from the manager when the request was approved or denied.
	// This field is null by default.
	ResponseComment string `protobuf:"bytes,5,opt,name=response_comment,json=responseComment,proto3" json:"response_comment,omitempty"`
	// A list of datetime ranges to be blocked off on the schedule.
	RequestedDatetimeRanges []*DatetimeRange `protobuf:"bytes,6,rep,name=requested_datetime_ranges,json=requestedDatetimeRanges,proto3" json:"requested_datetime_ranges,omitempty"`
	// The timestamp from when the request was created.
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// The timestamp from when the timestamp was archived, if it has been archived.
	// This field is null by default.
	ArchivedTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=archived_time,json=archivedTime,proto3" json:"archived_time,omitempty"`
	// The timestamp from when the timestamp was resolved, if it has been resolved.
	// The request is resolved when it is either approved or denied.
	// This field is null by default.
	ResolvedTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=resolved_time,json=resolvedTime,proto3" json:"resolved_time,omitempty"`
	// The user ID of the manager who approved or denied the request.
	// This field is null by default.
	ResolvedByUserId string `protobuf:"bytes,10,opt,name=resolved_by_user_id,json=resolvedByUserId,proto3" json:"resolved_by_user_id,omitempty"`
	// The number of working hours requested off.
	// This does not need to relate directly to the datetime range being requested off,
	// For example in the case where a 14 hour schedulable range is being taken off but 8 hours of work will be paid out with PTO.
	RequestedHoursOff float32 `protobuf:"fixed32,11,opt,name=requested_hours_off,json=requestedHoursOff,proto3" json:"requested_hours_off,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AgentLeavePetition) Reset() {
	*x = AgentLeavePetition{}
	mi := &file_api_commons_wfm_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentLeavePetition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentLeavePetition) ProtoMessage() {}

func (x *AgentLeavePetition) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentLeavePetition.ProtoReflect.Descriptor instead.
func (*AgentLeavePetition) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{24}
}

func (x *AgentLeavePetition) GetAgentLeavePetitionId() int64 {
	if x != nil {
		return x.AgentLeavePetitionId
	}
	return 0
}

func (x *AgentLeavePetition) GetWfmAgentSid() int64 {
	if x != nil {
		return x.WfmAgentSid
	}
	return 0
}

func (x *AgentLeavePetition) GetPetitionStatus() AgentLeavePetitionStatus {
	if x != nil {
		return x.PetitionStatus
	}
	return AgentLeavePetitionStatus_UNSPECIFIED_PETITION_STATUS
}

func (x *AgentLeavePetition) GetPetitionComment() string {
	if x != nil {
		return x.PetitionComment
	}
	return ""
}

func (x *AgentLeavePetition) GetResponseComment() string {
	if x != nil {
		return x.ResponseComment
	}
	return ""
}

func (x *AgentLeavePetition) GetRequestedDatetimeRanges() []*DatetimeRange {
	if x != nil {
		return x.RequestedDatetimeRanges
	}
	return nil
}

func (x *AgentLeavePetition) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *AgentLeavePetition) GetArchivedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedTime
	}
	return nil
}

func (x *AgentLeavePetition) GetResolvedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ResolvedTime
	}
	return nil
}

func (x *AgentLeavePetition) GetResolvedByUserId() string {
	if x != nil {
		return x.ResolvedByUserId
	}
	return ""
}

func (x *AgentLeavePetition) GetRequestedHoursOff() float32 {
	if x != nil {
		return x.RequestedHoursOff
	}
	return 0
}

// ID and type of a config entity.
type ConfigEntity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the config entity.
	EntitySid int64 `protobuf:"varint,1,opt,name=entity_sid,json=entitySid,proto3" json:"entity_sid,omitempty"`
	// Type of entity that the @entity_sid will reference.
	EntityType    ConfigEntityType `protobuf:"varint,2,opt,name=entity_type,json=entityType,proto3,enum=api.commons.ConfigEntityType" json:"entity_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigEntity) Reset() {
	*x = ConfigEntity{}
	mi := &file_api_commons_wfm_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigEntity) ProtoMessage() {}

func (x *ConfigEntity) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigEntity.ProtoReflect.Descriptor instead.
func (*ConfigEntity) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{25}
}

func (x *ConfigEntity) GetEntitySid() int64 {
	if x != nil {
		return x.EntitySid
	}
	return 0
}

func (x *ConfigEntity) GetEntityType() ConfigEntityType {
	if x != nil {
		return x.EntityType
	}
	return ConfigEntityType_CALL_CENTER_NODE
}

// Represents a configuration for adherence rule notifications.
type AdherenceRuleNotificationConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the notification config.
	AdherenceRuleNotificationConfigId int64 `protobuf:"varint,1,opt,name=adherence_rule_notification_config_id,json=adherenceRuleNotificationConfigId,proto3" json:"adherence_rule_notification_config_id,omitempty"`
	// Name of the notification config.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Entries that belong to this rule. Only used by List methods.
	Entries       []*AdherenceRuleNotificationConfigEntry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdherenceRuleNotificationConfig) Reset() {
	*x = AdherenceRuleNotificationConfig{}
	mi := &file_api_commons_wfm_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdherenceRuleNotificationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdherenceRuleNotificationConfig) ProtoMessage() {}

func (x *AdherenceRuleNotificationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdherenceRuleNotificationConfig.ProtoReflect.Descriptor instead.
func (*AdherenceRuleNotificationConfig) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{26}
}

func (x *AdherenceRuleNotificationConfig) GetAdherenceRuleNotificationConfigId() int64 {
	if x != nil {
		return x.AdherenceRuleNotificationConfigId
	}
	return 0
}

func (x *AdherenceRuleNotificationConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdherenceRuleNotificationConfig) GetEntries() []*AdherenceRuleNotificationConfigEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Represents a user entry for a notification.
type AdherenceRuleNotificationConfigEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the notification config entry.
	AdherenceRuleNotificationConfigEntryId int64 `protobuf:"varint,1,opt,name=adherence_rule_notification_config_entry_id,json=adherenceRuleNotificationConfigEntryId,proto3" json:"adherence_rule_notification_config_entry_id,omitempty"`
	// ID of the notification config that this entry belongs to.
	AdherenceRuleNotificationConfigId int64 `protobuf:"varint,2,opt,name=adherence_rule_notification_config_id,json=adherenceRuleNotificationConfigId,proto3" json:"adherence_rule_notification_config_id,omitempty"`
	// ID of the user ID that will receive this notification.
	RecipientUserId string `protobuf:"bytes,3,opt,name=recipient_user_id,json=recipientUserId,proto3" json:"recipient_user_id,omitempty"`
	// Medium to be used for deliving the notification.
	NotificationMedium AdherenceRuleNotificationMedium `protobuf:"varint,4,opt,name=notification_medium,json=notificationMedium,proto3,enum=api.commons.AdherenceRuleNotificationMedium" json:"notification_medium,omitempty"`
	// Number of seconds to wait to trigger this notification entry after the rule that uses this config was violated.
	SecondsToWaitForNoResponse int32 `protobuf:"varint,5,opt,name=seconds_to_wait_for_no_response,json=secondsToWaitForNoResponse,proto3" json:"seconds_to_wait_for_no_response,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *AdherenceRuleNotificationConfigEntry) Reset() {
	*x = AdherenceRuleNotificationConfigEntry{}
	mi := &file_api_commons_wfm_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdherenceRuleNotificationConfigEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdherenceRuleNotificationConfigEntry) ProtoMessage() {}

func (x *AdherenceRuleNotificationConfigEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdherenceRuleNotificationConfigEntry.ProtoReflect.Descriptor instead.
func (*AdherenceRuleNotificationConfigEntry) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{27}
}

func (x *AdherenceRuleNotificationConfigEntry) GetAdherenceRuleNotificationConfigEntryId() int64 {
	if x != nil {
		return x.AdherenceRuleNotificationConfigEntryId
	}
	return 0
}

func (x *AdherenceRuleNotificationConfigEntry) GetAdherenceRuleNotificationConfigId() int64 {
	if x != nil {
		return x.AdherenceRuleNotificationConfigId
	}
	return 0
}

func (x *AdherenceRuleNotificationConfigEntry) GetRecipientUserId() string {
	if x != nil {
		return x.RecipientUserId
	}
	return ""
}

func (x *AdherenceRuleNotificationConfigEntry) GetNotificationMedium() AdherenceRuleNotificationMedium {
	if x != nil {
		return x.NotificationMedium
	}
	return AdherenceRuleNotificationMedium_ADHERENCE_RULE_NOTIFICATION_MEDIUM_IN_PRODUCT
}

func (x *AdherenceRuleNotificationConfigEntry) GetSecondsToWaitForNoResponse() int32 {
	if x != nil {
		return x.SecondsToWaitForNoResponse
	}
	return 0
}

// Represents a departmental rule action.
type AdherenceDepartmentalRuleAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of ths action.
	ActionType    AdherenceDepartmentalRuleActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=api.commons.AdherenceDepartmentalRuleActionType" json:"action_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdherenceDepartmentalRuleAction) Reset() {
	*x = AdherenceDepartmentalRuleAction{}
	mi := &file_api_commons_wfm_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdherenceDepartmentalRuleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdherenceDepartmentalRuleAction) ProtoMessage() {}

func (x *AdherenceDepartmentalRuleAction) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdherenceDepartmentalRuleAction.ProtoReflect.Descriptor instead.
func (*AdherenceDepartmentalRuleAction) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{28}
}

func (x *AdherenceDepartmentalRuleAction) GetActionType() AdherenceDepartmentalRuleActionType {
	if x != nil {
		return x.ActionType
	}
	return AdherenceDepartmentalRuleActionType_ADHERENCE_DEPARTMENTAL_RULE_ACTION_TYPE_CALLS_ANSWERED
}

// Represents an adherence departmental rule.
type AdherenceDepartmentalRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of this departmental rule.
	AdherenceDepartmentalRuleId int64 `protobuf:"varint,1,opt,name=adherence_departmental_rule_id,json=adherenceDepartmentalRuleId,proto3" json:"adherence_departmental_rule_id,omitempty"`
	// Name of this departmental rule.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Config entity that the rule applies to, supported ones are:
	// CALL_CENTER_NODE, CLIENT_NODE, LOCATION_NODE, PROGRAM_NODE, SHIFT_TEMPLATE, AGENT_GROUP.
	SelectedEntity *ConfigEntity `protobuf:"bytes,3,opt,name=selected_entity,json=selectedEntity,proto3" json:"selected_entity,omitempty"`
	// Specifies the requirement type of this rule.
	RuleRequirementType AdherenceRuleRequirementType `protobuf:"varint,4,opt,name=rule_requirement_type,json=ruleRequirementType,proto3,enum=api.commons.AdherenceRuleRequirementType" json:"rule_requirement_type,omitempty"`
	// ID of the notification config that this rule will use/follow.
	AdherenceRuleNotificationConfigId int64 `protobuf:"varint,5,opt,name=adherence_rule_notification_config_id,json=adherenceRuleNotificationConfigId,proto3" json:"adherence_rule_notification_config_id,omitempty"`
	// Range that this rule will be applied at.
	RuleRange AdherenceRuleRange `protobuf:"varint,6,opt,name=rule_range,json=ruleRange,proto3,enum=api.commons.AdherenceRuleRange" json:"rule_range,omitempty"`
	// Custom date range to apply the rule, must only be set when @rule_range is CUSTOM_DATE_RANGE.
	CustomRange *DatetimeRange `protobuf:"bytes,7,opt,name=custom_range,json=customRange,proto3" json:"custom_range,omitempty"`
	// Clauses that belong to this rule. Only used by List methods.
	RuleClauses   []*AdherenceDepartmentalRuleClause `protobuf:"bytes,9,rep,name=rule_clauses,json=ruleClauses,proto3" json:"rule_clauses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdherenceDepartmentalRule) Reset() {
	*x = AdherenceDepartmentalRule{}
	mi := &file_api_commons_wfm_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdherenceDepartmentalRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdherenceDepartmentalRule) ProtoMessage() {}

func (x *AdherenceDepartmentalRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdherenceDepartmentalRule.ProtoReflect.Descriptor instead.
func (*AdherenceDepartmentalRule) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{29}
}

func (x *AdherenceDepartmentalRule) GetAdherenceDepartmentalRuleId() int64 {
	if x != nil {
		return x.AdherenceDepartmentalRuleId
	}
	return 0
}

func (x *AdherenceDepartmentalRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdherenceDepartmentalRule) GetSelectedEntity() *ConfigEntity {
	if x != nil {
		return x.SelectedEntity
	}
	return nil
}

func (x *AdherenceDepartmentalRule) GetRuleRequirementType() AdherenceRuleRequirementType {
	if x != nil {
		return x.RuleRequirementType
	}
	return AdherenceRuleRequirementType_ADHERENCE_RULE_REQUIREMENT_TYPE_NOT_USED
}

func (x *AdherenceDepartmentalRule) GetAdherenceRuleNotificationConfigId() int64 {
	if x != nil {
		return x.AdherenceRuleNotificationConfigId
	}
	return 0
}

func (x *AdherenceDepartmentalRule) GetRuleRange() AdherenceRuleRange {
	if x != nil {
		return x.RuleRange
	}
	return AdherenceRuleRange_ADHERENCE_RULE_RANGE_START_OF_DAY
}

func (x *AdherenceDepartmentalRule) GetCustomRange() *DatetimeRange {
	if x != nil {
		return x.CustomRange
	}
	return nil
}

func (x *AdherenceDepartmentalRule) GetRuleClauses() []*AdherenceDepartmentalRuleClause {
	if x != nil {
		return x.RuleClauses
	}
	return nil
}

// Represents an adherence departmental rule clause.
type AdherenceDepartmentalRuleClause struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of this departmental rule clause.
	AdherenceDepartmentalRuleClauseId int64 `protobuf:"varint,1,opt,name=adherence_departmental_rule_clause_id,json=adherenceDepartmentalRuleClauseId,proto3" json:"adherence_departmental_rule_clause_id,omitempty"`
	// ID of the departmental rule that this clause belongs to.
	AdherenceDepartmentalRuleId int64 `protobuf:"varint,2,opt,name=adherence_departmental_rule_id,json=adherenceDepartmentalRuleId,proto3" json:"adherence_departmental_rule_id,omitempty"`
	// Action that this departmental rule clause evaluates.
	Action *AdherenceDepartmentalRuleAction `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	// Condition that will be evaluated between the @action and the @amount.
	Condition AdherenceRuleCondition `protobuf:"varint,4,opt,name=condition,proto3,enum=api.commons.AdherenceRuleCondition" json:"condition,omitempty"`
	// Amount to evaluate.
	Amount int32 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Unit that the @amount is on.
	Unit AdherenceRuleUnit `protobuf:"varint,6,opt,name=unit,proto3,enum=api.commons.AdherenceRuleUnit" json:"unit,omitempty"`
	// Optional amount to evaluate e.g:
	// drops below <80%> calls answered in <10> seconds will be - amount: 80, unit: percentage, per_amount: 10, per_unit: seconds.
	PerAmount *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=per_amount,json=perAmount,proto3" json:"per_amount,omitempty"`
	// Unit that the @per_amount is on, only used when the @per_amount is set.
	PerUnit       AdherenceRuleUnit `protobuf:"varint,8,opt,name=per_unit,json=perUnit,proto3,enum=api.commons.AdherenceRuleUnit" json:"per_unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdherenceDepartmentalRuleClause) Reset() {
	*x = AdherenceDepartmentalRuleClause{}
	mi := &file_api_commons_wfm_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdherenceDepartmentalRuleClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdherenceDepartmentalRuleClause) ProtoMessage() {}

func (x *AdherenceDepartmentalRuleClause) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdherenceDepartmentalRuleClause.ProtoReflect.Descriptor instead.
func (*AdherenceDepartmentalRuleClause) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{30}
}

func (x *AdherenceDepartmentalRuleClause) GetAdherenceDepartmentalRuleClauseId() int64 {
	if x != nil {
		return x.AdherenceDepartmentalRuleClauseId
	}
	return 0
}

func (x *AdherenceDepartmentalRuleClause) GetAdherenceDepartmentalRuleId() int64 {
	if x != nil {
		return x.AdherenceDepartmentalRuleId
	}
	return 0
}

func (x *AdherenceDepartmentalRuleClause) GetAction() *AdherenceDepartmentalRuleAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *AdherenceDepartmentalRuleClause) GetCondition() AdherenceRuleCondition {
	if x != nil {
		return x.Condition
	}
	return AdherenceRuleCondition_ADHERENCE_RULE_CONDITION_GREATER_THAN
}

func (x *AdherenceDepartmentalRuleClause) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AdherenceDepartmentalRuleClause) GetUnit() AdherenceRuleUnit {
	if x != nil {
		return x.Unit
	}
	return AdherenceRuleUnit_ADHERENCE_RULE_UNIT_SECONDS
}

func (x *AdherenceDepartmentalRuleClause) GetPerAmount() *wrapperspb.Int32Value {
	if x != nil {
		return x.PerAmount
	}
	return nil
}

func (x *AdherenceDepartmentalRuleClause) GetPerUnit() AdherenceRuleUnit {
	if x != nil {
		return x.PerUnit
	}
	return AdherenceRuleUnit_ADHERENCE_RULE_UNIT_SECONDS
}

// Represents an adherence agent rule.
type AdherenceAgentRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of this agent rule.
	AdherenceAgentRuleId int64 `protobuf:"varint,1,opt,name=adherence_agent_rule_id,json=adherenceAgentRuleId,proto3" json:"adherence_agent_rule_id,omitempty"`
	// Name of this agent rule.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Config entity that the rule applies to, supported ones are:
	// CALL_CENTER_NODE, CLIENT_NODE, LOCATION_NODE, PROGRAM_NODE, AGENT_GROUP, WFM_AGENT, SHIFT_TEMPLATE.
	SelectedEntity *ConfigEntity `protobuf:"bytes,3,opt,name=selected_entity,json=selectedEntity,proto3" json:"selected_entity,omitempty"`
	// Specifies the requirement type of this rule.
	RuleRequirementType AdherenceRuleRequirementType `protobuf:"varint,4,opt,name=rule_requirement_type,json=ruleRequirementType,proto3,enum=api.commons.AdherenceRuleRequirementType" json:"rule_requirement_type,omitempty"`
	// ID of the notification config that this rule will use/follow.
	AdherenceRuleNotificationConfigId int64 `protobuf:"varint,5,opt,name=adherence_rule_notification_config_id,json=adherenceRuleNotificationConfigId,proto3" json:"adherence_rule_notification_config_id,omitempty"`
	// Clauses that belong to this rule. Only used by List methods.
	RuleClauses   []*AdherenceAgentRuleClause `protobuf:"bytes,7,rep,name=rule_clauses,json=ruleClauses,proto3" json:"rule_clauses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdherenceAgentRule) Reset() {
	*x = AdherenceAgentRule{}
	mi := &file_api_commons_wfm_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdherenceAgentRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdherenceAgentRule) ProtoMessage() {}

func (x *AdherenceAgentRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdherenceAgentRule.ProtoReflect.Descriptor instead.
func (*AdherenceAgentRule) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{31}
}

func (x *AdherenceAgentRule) GetAdherenceAgentRuleId() int64 {
	if x != nil {
		return x.AdherenceAgentRuleId
	}
	return 0
}

func (x *AdherenceAgentRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdherenceAgentRule) GetSelectedEntity() *ConfigEntity {
	if x != nil {
		return x.SelectedEntity
	}
	return nil
}

func (x *AdherenceAgentRule) GetRuleRequirementType() AdherenceRuleRequirementType {
	if x != nil {
		return x.RuleRequirementType
	}
	return AdherenceRuleRequirementType_ADHERENCE_RULE_REQUIREMENT_TYPE_NOT_USED
}

func (x *AdherenceAgentRule) GetAdherenceRuleNotificationConfigId() int64 {
	if x != nil {
		return x.AdherenceRuleNotificationConfigId
	}
	return 0
}

func (x *AdherenceAgentRule) GetRuleClauses() []*AdherenceAgentRuleClause {
	if x != nil {
		return x.RuleClauses
	}
	return nil
}

// Represents a agent rule action.
type AdherenceAgentRuleAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of ths action.
	ActionType    AdherenceAgentRuleActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=api.commons.AdherenceAgentRuleActionType" json:"action_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdherenceAgentRuleAction) Reset() {
	*x = AdherenceAgentRuleAction{}
	mi := &file_api_commons_wfm_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdherenceAgentRuleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdherenceAgentRuleAction) ProtoMessage() {}

func (x *AdherenceAgentRuleAction) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdherenceAgentRuleAction.ProtoReflect.Descriptor instead.
func (*AdherenceAgentRuleAction) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{32}
}

func (x *AdherenceAgentRuleAction) GetActionType() AdherenceAgentRuleActionType {
	if x != nil {
		return x.ActionType
	}
	return AdherenceAgentRuleActionType_ADHERENCE_AGENT_RULE_ACTION_TYPE_WRAP_UP
}

// Represents an adherence agent rule clause.
type AdherenceAgentRuleClause struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of this agent rule clause.
	AdherenceAgentRuleClauseId int64 `protobuf:"varint,1,opt,name=adherence_agent_rule_clause_id,json=adherenceAgentRuleClauseId,proto3" json:"adherence_agent_rule_clause_id,omitempty"`
	// ID of the agent rule that this clause belongs to.
	AdherenceAgentRuleId int64 `protobuf:"varint,2,opt,name=adherence_agent_rule_id,json=adherenceAgentRuleId,proto3" json:"adherence_agent_rule_id,omitempty"`
	// Action that this agent rule clause evaluates.
	Action *AdherenceAgentRuleAction `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	// Condition that will be evaluated between the @action and the @amount.
	Condition AdherenceRuleCondition `protobuf:"varint,4,opt,name=condition,proto3,enum=api.commons.AdherenceRuleCondition" json:"condition,omitempty"`
	// Amount to evaluate.
	Amount int32 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Unit that the @amount is on.
	Unit          AdherenceRuleUnit `protobuf:"varint,6,opt,name=unit,proto3,enum=api.commons.AdherenceRuleUnit" json:"unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdherenceAgentRuleClause) Reset() {
	*x = AdherenceAgentRuleClause{}
	mi := &file_api_commons_wfm_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdherenceAgentRuleClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdherenceAgentRuleClause) ProtoMessage() {}

func (x *AdherenceAgentRuleClause) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_wfm_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdherenceAgentRuleClause.ProtoReflect.Descriptor instead.
func (*AdherenceAgentRuleClause) Descriptor() ([]byte, []int) {
	return file_api_commons_wfm_proto_rawDescGZIP(), []int{33}
}

func (x *AdherenceAgentRuleClause) GetAdherenceAgentRuleClauseId() int64 {
	if x != nil {
		return x.AdherenceAgentRuleClauseId
	}
	return 0
}

func (x *AdherenceAgentRuleClause) GetAdherenceAgentRuleId() int64 {
	if x != nil {
		return x.AdherenceAgentRuleId
	}
	return 0
}

func (x *AdherenceAgentRuleClause) GetAction() *AdherenceAgentRuleAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *AdherenceAgentRuleClause) GetCondition() AdherenceRuleCondition {
	if x != nil {
		return x.Condition
	}
	return AdherenceRuleCondition_ADHERENCE_RULE_CONDITION_GREATER_THAN
}

func (x *AdherenceAgentRuleClause) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AdherenceAgentRuleClause) GetUnit() AdherenceRuleUnit {
	if x != nil {
		return x.Unit
	}
	return AdherenceRuleUnit_ADHERENCE_RULE_UNIT_SECONDS
}

var File_api_commons_wfm_proto protoreflect.FileDescriptor

var file_api_commons_wfm_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x77, 0x66,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x5e, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x48,
	0x55, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x42, 0x58, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x55,
	0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x42, 0x58, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x42, 0x58, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x10, 0x05, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa4, 0x06, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x1f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x1b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x12, 0x6c, 0x0a, 0x24, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x57, 0x65, 0x65, 0x6b,
	0x73, 0x12, 0x37, 0x0a, 0x17, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x54, 0x0a, 0x17, 0x66, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x01, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x42, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x19, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x73, 0x12, 0x5d, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x02, 0x52, 0x19, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xc4, 0x01,
	0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x4f, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x73, 0x75,
	0x6e, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x74,
	0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73,
	0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65,
	0x73, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x75,
	0x72, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x73, 0x61, 0x74, 0x75,
	0x72, 0x64, 0x61, 0x79, 0x22, 0xb1, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x57, 0x4f, 0x4d, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x6a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x65, 0x62, 0x72, 0x75, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x08, 0x66, 0x65, 0x62, 0x72, 0x75, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x6d, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x72, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x05, 0x61, 0x70, 0x72, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x79, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x75, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x6a, 0x75, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6a, 0x75, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x6a, 0x75, 0x6c, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x67, 0x75, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x06, 0x61, 0x75, 0x67, 0x75, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x70, 0x74,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x73, 0x65, 0x70,
	0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x63, 0x74, 0x6f, 0x62, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x6f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x08, 0x6e, 0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08,
	0x64, 0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc4, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x4f, 0x57, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64, 0x61,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x72, 0x69, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x66, 0x72, 0x69,
	0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x22,
	0xb0, 0x02, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x4f, 0x59, 0x12, 0x18,
	0x0a, 0x07, 0x6a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x6a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x62, 0x72,
	0x75, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x65, 0x62, 0x72,
	0x75, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x6d, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x72, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x70, 0x72, 0x69, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d,
	0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x75, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x6a, 0x75, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x75, 0x6c, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6a, 0x75, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75,
	0x67, 0x75, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x75, 0x67, 0x75,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x70, 0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x65, 0x70, 0x74, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x6f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f,
	0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x6f,
	0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x65, 0x63, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x80, 0x02, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x4f, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x77, 0x6f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x57, 0x4f, 0x4d, 0x53, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x57, 0x6f, 0x6d,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x4f, 0x57, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x12, 0x38, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x4f, 0x59, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4d, 0x6f, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x53, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x67, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x53, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x52, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x3e,
	0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x89,
	0x02, 0x0a, 0x14, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x1a, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x17, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x64, 0x12, 0x6d, 0x0a, 0x1b, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x18, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x41, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x49, 0x4e, 0x47, 0x4c,
	0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x22, 0xaf, 0x03, 0x0a, 0x28, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x12, 0x48, 0x0a, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x23, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x65,
	0x61, 0x6e, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c,
	0x0a, 0x10, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x03, 0x0a,
	0x16, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x12, 0x48, 0x0a, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x23, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x66, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x65,
	0x61, 0x6e, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x74,
	0x0a, 0x1b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x42, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x70,
	0x63, 0x54, 0x72, 0x61, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x12, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x52, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x10, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a,
	0x02, 0x18, 0x01, 0x22, 0xc6, 0x01, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x66,
	0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xe0, 0x01, 0x0a,
	0x13, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x66, 0x6d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x61,
	0x64, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xfd, 0x03, 0x0a, 0x1c, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0d, 0x77, 0x66, 0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x74, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x74, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x50, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x74, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x74, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3c, 0x0a, 0x1a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x18, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x5b, 0x0a, 0x14, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x1d,
	0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a,
	0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x91, 0x05, 0x0a, 0x12, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x14, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x66,
	0x6d, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x77, 0x66, 0x6d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x4e,
	0x0a, 0x0f, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f,
	0x6f, 0x66, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x4f, 0x66, 0x66, 0x22, 0x71, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0a,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x64, 0x12,
	0x3e, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xd8, 0x01, 0x0a, 0x1f, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x25, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x21, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xad, 0x03, 0x0a, 0x24, 0x41,
	0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x5f, 0x0a, 0x2b, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x26, 0x61, 0x64,
	0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x25, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x21, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x75,
	0x6d, 0x52, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x43, 0x0a, 0x1f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x0a, 0x1f, 0x41, 0x64,
	0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xd0, 0x04, 0x0a, 0x19, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x47,
	0x0a, 0x1e, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x1b, 0x61, 0x64, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x5d, 0x0a, 0x15, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x72, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54,
	0x0a, 0x25, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x21, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x73, 0x22, 0x8c, 0x04, 0x0a, 0x1f, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x25, 0x61, 0x64, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x21, 0x61, 0x64, 0x68, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x1e, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x1b, 0x61, 0x64, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64,
	0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x70, 0x65, 0x72, 0x55, 0x6e,
	0x69, 0x74, 0x22, 0xb5, 0x03, 0x0a, 0x12, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x17, 0x61, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x14,
	0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x5d, 0x0a, 0x15,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x72, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x25, 0x61,
	0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x21,
	0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x12, 0x48, 0x0a, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0b,
	0x72, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x06, 0x10,
	0x07, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x18, 0x41, 0x64,
	0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x18, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x1e, 0x61, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x1a, 0x61, 0x64, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x17, 0x61, 0x64, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x14, 0x61, 0x64,
	0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x2a, 0xa8, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x46, 0x4f,
	0x52, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44, 0x41, 0x42, 0x4f, 0x4f,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x41, 0x44, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c,
	0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f, 0x41, 0x56, 0x47,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4c, 0x50, 0x10,
	0x06, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x07, 0x2a, 0x58, 0x0a, 0x26, 0x52,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x76, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4f, 0x52, 0x45, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x53, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41,
	0x47, 0x45, 0x53, 0x10, 0x02, 0x2a, 0x64, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x4f, 0x55, 0x52,
	0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x49, 0x46, 0x54, 0x53, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x41, 0x59, 0x53, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x45, 0x45,
	0x4b, 0x53, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x59, 0x45, 0x41, 0x52, 0x53, 0x10, 0x06, 0x2a, 0xd0, 0x03, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x04, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x46, 0x4d, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x06,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55,
	0x4c, 0x45, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49,
	0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x4e,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10,
	0x09, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x45,
	0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x41, 0x52, 0x49, 0x4f, 0x10, 0x0e,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x4f, 0x55, 0x52, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x10, 0x10, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45,
	0x52, 0x4e, 0x10, 0x11, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x53, 0x48, 0x49,
	0x46, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x10, 0x12, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x53, 0x48, 0x49,
	0x46, 0x54, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x2a, 0xc1,
	0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x45, 0x43, 0x5f, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x58, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x45, 0x43, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x43, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x43, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c,
	0x5f, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x4e, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41,
	0x58, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x08, 0x2a, 0x33, 0x0a, 0x10, 0x44, 0x4f, 0x57, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x4d, 0x55, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x27, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01,
	0x2a, 0x50, 0x0a, 0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x2a, 0x4a, 0x0a, 0x09, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x55, 0x45, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x48,
	0x55, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x52, 0x49, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x41, 0x54, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4e, 0x10, 0x06, 0x2a, 0x5e,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x53, 0x5f, 0x41,
	0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43,
	0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x49, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x10, 0x02, 0x2a, 0x69,
	0x0a, 0x0f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0xbe, 0x19, 0x0a, 0x0e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x5f, 0x49,
	0x4e, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x49,
	0x45, 0x53, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41,
	0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x31, 0x0a,
	0x2d, 0x4e, 0x4f, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x10, 0x05,
	0x12, 0x35, 0x0a, 0x31, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x48, 0x49, 0x46, 0x54,
	0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x42, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x48,
	0x49, 0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x53,
	0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55,
	0x4c, 0x45, 0x53, 0x10, 0x08, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x4f, 0x5f, 0x4f, 0x4e, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50,
	0x4c, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x53, 0x10, 0x09, 0x12, 0x39, 0x0a, 0x35, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x54,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x10,
	0x0a, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x4f,
	0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x49, 0x45, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e,
	0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x48, 0x49,
	0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x10, 0x10, 0x12, 0x1c,
	0x0a, 0x18, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e,
	0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x13, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x14, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48,
	0x41, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x15, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x10, 0x16, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x17, 0x12, 0x2d,
	0x0a, 0x29, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x48, 0x41, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x18, 0x12, 0x42, 0x0a,
	0x3e, 0x4e, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43,
	0x49, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10,
	0x19, 0x12, 0x35, 0x0a, 0x31, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x1a, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x4e,
	0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x4e, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x1b, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x1c, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x1d, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x41, 0x4e, 0x44, 0x49,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x1e, 0x12,
	0x27, 0x0a, 0x23, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x49,
	0x46, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x1f, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x4e, 0x44,
	0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x20, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x21, 0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x48,
	0x41, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x59, 0x10,
	0x22, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x43,
	0x59, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x23, 0x12, 0x23, 0x0a, 0x1f, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x24,
	0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x4d,
	0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x25, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41,
	0x49, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4f, 0x46,
	0x46, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x26, 0x12, 0x24, 0x0a, 0x20, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x27, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x43, 0x5f, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x28, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x43,
	0x5f, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x29, 0x12, 0x25, 0x0a,
	0x21, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x45, 0x43, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x2a, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49,
	0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x43, 0x5f, 0x4f, 0x46,
	0x46, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x2b, 0x12, 0x3f, 0x0a, 0x3b, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f,
	0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x10, 0x2c, 0x12, 0x41, 0x0a, 0x3d,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f,
	0x54, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f,
	0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x5f, 0x50, 0x45, 0x52, 0x5f,
	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x2d, 0x12,
	0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x45, 0x43, 0x55, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x53,
	0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x10, 0x2e, 0x12, 0x3e, 0x0a, 0x3a, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e,
	0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x52, 0x5f, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x10, 0x2f, 0x12, 0x36, 0x0a, 0x32, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e,
	0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x30, 0x12, 0x3f, 0x0a, 0x3b, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x43, 0x55, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x50, 0x4c, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x53, 0x10, 0x31, 0x12, 0x3d, 0x0a, 0x39,
	0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x4f, 0x55, 0x52, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x53, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54,
	0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x32, 0x12, 0x29, 0x0a, 0x25, 0x54,
	0x4f, 0x55, 0x52, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x53, 0x5f, 0x4e, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x54, 0x4f, 0x55, 0x52, 0x10, 0x33, 0x12, 0x4b, 0x0a, 0x47, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x50, 0x4c, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x35, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45,
	0x53, 0x10, 0x34, 0x12, 0x4c, 0x0a, 0x48, 0x4e, 0x4f, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x48, 0x49, 0x46,
	0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10,
	0x35, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x55,
	0x52, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x10, 0x36, 0x12, 0x21, 0x0a, 0x1d, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x37, 0x12, 0x26,
	0x0a, 0x22, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x53,
	0x48, 0x49, 0x46, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x10, 0x38, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x39, 0x12, 0x25, 0x0a,
	0x21, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c,
	0x41, 0x50, 0x10, 0x3a, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x53, 0x48, 0x49,
	0x46, 0x54, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x54, 0x10, 0x3b,
	0x12, 0x26, 0x0a, 0x22, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x4c, 0x41, 0x50, 0x10, 0x3c, 0x12, 0x39, 0x0a, 0x35, 0x57, 0x45, 0x45, 0x4b,
	0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x54,
	0x4f, 0x55, 0x52, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e,
	0x53, 0x10, 0x3d, 0x12, 0x37, 0x0a, 0x33, 0x57, 0x46, 0x4d, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x49, 0x44, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45,
	0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x3e, 0x12, 0x42, 0x0a, 0x3e,
	0x46, 0x49, 0x53, 0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x4e,
	0x49, 0x51, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x3f,
	0x12, 0x3e, 0x0a, 0x3a, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x50,
	0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x55, 0x52,
	0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x53, 0x10, 0x40,
	0x12, 0x3c, 0x0a, 0x38, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41,
	0x54, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x41, 0x12, 0x36,
	0x0a, 0x32, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x10, 0x42, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x44, 0x4f, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x45, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54,
	0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x10, 0x43, 0x12, 0x33, 0x0a, 0x2f, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x53, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x45, 0x45, 0x54, 0x5f, 0x54, 0x45,
	0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x10, 0x44,
	0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x48, 0x45, 0x52, 0x49, 0x54,
	0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x45, 0x12,
	0x32, 0x0a, 0x2e, 0x54, 0x4f, 0x55, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x55,
	0x52, 0x10, 0x46, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43,
	0x54, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x47, 0x12,
	0x29, 0x0a, 0x25, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54,
	0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x57, 0x5f,
	0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x48, 0x2a, 0xca, 0x01, 0x0a, 0x15, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x44, 0x5f, 0x56, 0x53, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x44,
	0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x56, 0x53, 0x5f, 0x41, 0x43, 0x48,
	0x49, 0x45, 0x56, 0x45, 0x44, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4d, 0x41,
	0x54, 0x52, 0x49, 0x58, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43,
	0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x53, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x4f, 0x52,
	0x45, 0x43, 0x41, 0x53, 0x54, 0x10, 0x05, 0x2a, 0x7c, 0x0a, 0x15, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x4e,
	0x4c, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x48, 0x49, 0x46,
	0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x53, 0x10, 0x02, 0x2a, 0x28, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x2a,
	0x37, 0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x01, 0x2a, 0x5a, 0x0a, 0x10, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x4f, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x2a, 0x46, 0x0a, 0x0a, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x4d, 0x41, 0x50,
	0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x43, 0x41, 0x4c, 0x45,
	0x4e, 0x44, 0x41, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x02, 0x2a, 0x5a, 0x0a, 0x11,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x53, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x2a, 0xbe, 0x01,
	0x0a, 0x17, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f,
	0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4f,
	0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4f, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x52, 0x41, 0x50, 0x5f, 0x55,
	0x50, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4f, 0x55,
	0x54, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x0e, 0x2a, 0x95,
	0x01, 0x0a, 0x18, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x54, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x50,
	0x45, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x54, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0x87, 0x01, 0x0a, 0x20, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45,
	0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x03,
	0x2a, 0x82, 0x01, 0x0a, 0x1f, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x44, 0x48, 0x45, 0x52,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x10, 0x01, 0x2a, 0xa9, 0x01, 0x0a, 0x1c, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x10,
	0x02, 0x2a, 0xde, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x44, 0x48, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55, 0x4c,
	0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46,
	0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x44, 0x48, 0x45, 0x52,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x02,
	0x12, 0x24, 0x0a, 0x20, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55,
	0x4c, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46,
	0x5f, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x04, 0x2a, 0x61, 0x0a, 0x23, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x36, 0x41, 0x44, 0x48,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x4c, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x00, 0x2a, 0xca, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x25, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55,
	0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x41,
	0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22,
	0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x10, 0x03, 0x2a, 0x98, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x44, 0x48, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x44, 0x48,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x44,
	0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x44, 0x48,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x03, 0x2a, 0x8d, 0x04,
	0x0a, 0x1c, 0x41, 0x64, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x28, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x5f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28,
	0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x41, 0x44,
	0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d,
	0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x12,
	0x31, 0x0a, 0x2d, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53,
	0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x05,
	0x12, 0x2c, 0x0a, 0x28, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x12, 0x30,
	0x0a, 0x2c, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x07,
	0x12, 0x35, 0x0a, 0x31, 0x41, 0x44, 0x48, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x08, 0x12, 0x34, 0x0a, 0x30, 0x41, 0x44, 0x48, 0x45, 0x52,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x46,
	0x54, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x09, 0x42, 0x90, 0x01,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x42, 0x08, 0x57, 0x66, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x58, 0xaa, 0x02, 0x0b, 0x41, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xca, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x5c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xe2, 0x02, 0x17, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0c, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_commons_wfm_proto_rawDescOnce sync.Once
	file_api_commons_wfm_proto_rawDescData []byte
)

func file_api_commons_wfm_proto_rawDescGZIP() []byte {
	file_api_commons_wfm_proto_rawDescOnce.Do(func() {
		file_api_commons_wfm_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_commons_wfm_proto_rawDesc), len(file_api_commons_wfm_proto_rawDesc)))
	})
	return file_api_commons_wfm_proto_rawDescData
}

var file_api_commons_wfm_proto_enumTypes = make([]protoimpl.EnumInfo, 32)
var file_api_commons_wfm_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_api_commons_wfm_proto_goTypes = []any{
	(RegressionForecasterModelTypes)(0),              // 0: api.commons.RegressionForecasterModelTypes
	(RegressionForecasterAvgsProcessingType)(0),      // 1: api.commons.RegressionForecasterAvgsProcessingType
	(ConstraintTimeUnit)(0),                          // 2: api.commons.ConstraintTimeUnit
	(ConfigEntityType)(0),                            // 3: api.commons.ConfigEntityType
	(ConstraintRuleType)(0),                          // 4: api.commons.ConstraintRuleType
	(DOWPlacementType)(0),                            // 5: api.commons.DOWPlacementType
	(OpenTimesOption)(0),                             // 6: api.commons.OpenTimesOption
	(AvailabilityOption)(0),                          // 7: api.commons.AvailabilityOption
	(DayOfWeek)(0),                                   // 8: api.commons.DayOfWeek
	(ConfigRelationshipType)(0),                      // 9: api.commons.ConfigRelationshipType
	(DiagnosticLevel)(0),                             // 10: api.commons.DiagnosticLevel
	(DiagnosticCode)(0),                              // 11: api.commons.DiagnosticCode
	(PerformanceMetricType)(0),                       // 12: api.commons.PerformanceMetricType
	(ScheduleShouldInclude)(0),                       // 13: api.commons.ScheduleShouldInclude
	(ScheduleType)(0),                                // 14: api.commons.ScheduleType
	(SchedulingTargetType)(0),                        // 15: api.commons.SchedulingTargetType
	(BuildDraftStatus)(0),                            // 16: api.commons.BuildDraftStatus
	(BitmapType)(0),                                  // 17: api.commons.BitmapType
	(HistoryCacheState)(0),                           // 18: api.commons.HistoryCacheState
	(InitialSetupState)(0),                           // 19: api.commons.InitialSetupState
	(RealTimeManagementState)(0),                     // 20: api.commons.RealTimeManagementState
	(AgentLeavePetitionStatus)(0),                    // 21: api.commons.AgentLeavePetitionStatus
	(SchedulingActivityClassification)(0),            // 22: api.commons.SchedulingActivityClassification
	(AdherenceRuleNotificationMedium)(0),             // 23: api.commons.AdherenceRuleNotificationMedium
	(AdherenceRuleRequirementType)(0),                // 24: api.commons.AdherenceRuleRequirementType
	(AdherenceRuleRange)(0),                          // 25: api.commons.AdherenceRuleRange
	(AdherenceDepartmentalRuleActionType)(0),         // 26: api.commons.AdherenceDepartmentalRuleActionType
	(AdherenceRuleCondition)(0),                      // 27: api.commons.AdherenceRuleCondition
	(AdherenceRuleUnit)(0),                           // 28: api.commons.AdherenceRuleUnit
	(AdherenceAgentRuleActionType)(0),                // 29: api.commons.AdherenceAgentRuleActionType
	(SkillType_Enum)(0),                              // 30: api.commons.SkillType.Enum
	(SkillProfileCategory_CategoryType)(0),           // 31: api.commons.SkillProfileCategory.CategoryType
	(*SkillType)(nil),                                // 32: api.commons.SkillType
	(*DatetimeRange)(nil),                            // 33: api.commons.DatetimeRange
	(*ForecastingParameters)(nil),                    // 34: api.commons.ForecastingParameters
	(*ProfileTOD)(nil),                               // 35: api.commons.ProfileTOD
	(*ProfileWOMS)(nil),                              // 36: api.commons.ProfileWOMS
	(*ProfileDOW)(nil),                               // 37: api.commons.ProfileDOW
	(*ProfileMOY)(nil),                               // 38: api.commons.ProfileMOY
	(*DistributionProfile)(nil),                      // 39: api.commons.DistributionProfile
	(*CallProfileGroupCalls)(nil),                    // 40: api.commons.CallProfileGroupCalls
	(*CallProfileGroupAvgs)(nil),                     // 41: api.commons.CallProfileGroupAvgs
	(*OptionTypes)(nil),                              // 42: api.commons.OptionTypes
	(*ScheduleSelector)(nil),                         // 43: api.commons.ScheduleSelector
	(*SkillProfileCategory)(nil),                     // 44: api.commons.SkillProfileCategory
	(*SchedulingResultMetricForSkillCollection)(nil), // 45: api.commons.SchedulingResultMetricForSkillCollection
	(*SchedulingResultMetric)(nil),                   // 46: api.commons.SchedulingResultMetric
	(*ClientHistoryCacheInfo)(nil),                   // 47: api.commons.ClientHistoryCacheInfo
	(*ErrorTrace)(nil),                               // 48: api.commons.ErrorTrace
	(*InitialSetupStatus)(nil),                       // 49: api.commons.InitialSetupStatus
	(*AgentStateSegment)(nil),                        // 50: api.commons.AgentStateSegment
	(*AgentStateSequence)(nil),                       // 51: api.commons.AgentStateSequence
	(*AdherenceAgentState)(nil),                      // 52: api.commons.AdherenceAgentState
	(*AdherenceAgentStateViolation)(nil),             // 53: api.commons.AdherenceAgentStateViolation
	(*AdherenceAgentStates)(nil),                     // 54: api.commons.AdherenceAgentStates
	(*AdherenceAgentStateViolations)(nil),            // 55: api.commons.AdherenceAgentStateViolations
	(*AgentLeavePetition)(nil),                       // 56: api.commons.AgentLeavePetition
	(*ConfigEntity)(nil),                             // 57: api.commons.ConfigEntity
	(*AdherenceRuleNotificationConfig)(nil),          // 58: api.commons.AdherenceRuleNotificationConfig
	(*AdherenceRuleNotificationConfigEntry)(nil),     // 59: api.commons.AdherenceRuleNotificationConfigEntry
	(*AdherenceDepartmentalRuleAction)(nil),          // 60: api.commons.AdherenceDepartmentalRuleAction
	(*AdherenceDepartmentalRule)(nil),                // 61: api.commons.AdherenceDepartmentalRule
	(*AdherenceDepartmentalRuleClause)(nil),          // 62: api.commons.AdherenceDepartmentalRuleClause
	(*AdherenceAgentRule)(nil),                       // 63: api.commons.AdherenceAgentRule
	(*AdherenceAgentRuleAction)(nil),                 // 64: api.commons.AdherenceAgentRuleAction
	(*AdherenceAgentRuleClause)(nil),                 // 65: api.commons.AdherenceAgentRuleClause
	(*timestamppb.Timestamp)(nil),                    // 66: google.protobuf.Timestamp
	(*wrapperspb.Int32Value)(nil),                    // 67: google.protobuf.Int32Value
}
var file_api_commons_wfm_proto_depIdxs = []int32{
	66, // 0: api.commons.DatetimeRange.start_datetime:type_name -> google.protobuf.Timestamp
	66, // 1: api.commons.DatetimeRange.end_datetime:type_name -> google.protobuf.Timestamp
	66, // 2: api.commons.ForecastingParameters.historical_data_range_start_datetime:type_name -> google.protobuf.Timestamp
	33, // 3: api.commons.ForecastingParameters.forecast_datetime_range:type_name -> api.commons.DatetimeRange
	33, // 4: api.commons.ForecastingParameters.training_data_datetime_range:type_name -> api.commons.DatetimeRange
	35, // 5: api.commons.DistributionProfile.profile_tod:type_name -> api.commons.ProfileTOD
	36, // 6: api.commons.DistributionProfile.profile_woms:type_name -> api.commons.ProfileWOMS
	37, // 7: api.commons.DistributionProfile.profile_dow:type_name -> api.commons.ProfileDOW
	38, // 8: api.commons.DistributionProfile.profile_moy:type_name -> api.commons.ProfileMOY
	39, // 9: api.commons.CallProfileGroupCalls.distribution_profile:type_name -> api.commons.DistributionProfile
	39, // 10: api.commons.CallProfileGroupAvgs.distribution_profile:type_name -> api.commons.DistributionProfile
	6,  // 11: api.commons.OptionTypes.open_times_option:type_name -> api.commons.OpenTimesOption
	7,  // 12: api.commons.OptionTypes.availability_option:type_name -> api.commons.AvailabilityOption
	14, // 13: api.commons.ScheduleSelector.schedule_type:type_name -> api.commons.ScheduleType
	31, // 14: api.commons.SkillProfileCategory.skill_profile_category_type:type_name -> api.commons.SkillProfileCategory.CategoryType
	44, // 15: api.commons.SchedulingResultMetricForSkillCollection.skill_collection:type_name -> api.commons.SkillProfileCategory
	45, // 16: api.commons.SchedulingResultMetric.metrics_by_skill_collection:type_name -> api.commons.SchedulingResultMetricForSkillCollection
	18, // 17: api.commons.ClientHistoryCacheInfo.state:type_name -> api.commons.HistoryCacheState
	19, // 18: api.commons.InitialSetupStatus.state:type_name -> api.commons.InitialSetupState
	20, // 19: api.commons.AgentStateSegment.states:type_name -> api.commons.RealTimeManagementState
	66, // 20: api.commons.AgentStateSequence.start_datetime:type_name -> google.protobuf.Timestamp
	50, // 21: api.commons.AgentStateSequence.state_segments:type_name -> api.commons.AgentStateSegment
	66, // 22: api.commons.AdherenceAgentState.start_datetime:type_name -> google.protobuf.Timestamp
	20, // 23: api.commons.AdherenceAgentState.adm_states:type_name -> api.commons.RealTimeManagementState
	66, // 24: api.commons.AdherenceAgentStateViolation.start_datetime:type_name -> google.protobuf.Timestamp
	20, // 25: api.commons.AdherenceAgentStateViolation.expected_rtm_states:type_name -> api.commons.RealTimeManagementState
	20, // 26: api.commons.AdherenceAgentStateViolation.actual_rtm_states:type_name -> api.commons.RealTimeManagementState
	52, // 27: api.commons.AdherenceAgentStates.agent_states:type_name -> api.commons.AdherenceAgentState
	53, // 28: api.commons.AdherenceAgentStateViolations.violations:type_name -> api.commons.AdherenceAgentStateViolation
	21, // 29: api.commons.AgentLeavePetition.petition_status:type_name -> api.commons.AgentLeavePetitionStatus
	33, // 30: api.commons.AgentLeavePetition.requested_datetime_ranges:type_name -> api.commons.DatetimeRange
	66, // 31: api.commons.AgentLeavePetition.created_time:type_name -> google.protobuf.Timestamp
	66, // 32: api.commons.AgentLeavePetition.archived_time:type_name -> google.protobuf.Timestamp
	66, // 33: api.commons.AgentLeavePetition.resolved_time:type_name -> google.protobuf.Timestamp
	3,  // 34: api.commons.ConfigEntity.entity_type:type_name -> api.commons.ConfigEntityType
	59, // 35: api.commons.AdherenceRuleNotificationConfig.entries:type_name -> api.commons.AdherenceRuleNotificationConfigEntry
	23, // 36: api.commons.AdherenceRuleNotificationConfigEntry.notification_medium:type_name -> api.commons.AdherenceRuleNotificationMedium
	26, // 37: api.commons.AdherenceDepartmentalRuleAction.action_type:type_name -> api.commons.AdherenceDepartmentalRuleActionType
	57, // 38: api.commons.AdherenceDepartmentalRule.selected_entity:type_name -> api.commons.ConfigEntity
	24, // 39: api.commons.AdherenceDepartmentalRule.rule_requirement_type:type_name -> api.commons.AdherenceRuleRequirementType
	25, // 40: api.commons.AdherenceDepartmentalRule.rule_range:type_name -> api.commons.AdherenceRuleRange
	33, // 41: api.commons.AdherenceDepartmentalRule.custom_range:type_name -> api.commons.DatetimeRange
	62, // 42: api.commons.AdherenceDepartmentalRule.rule_clauses:type_name -> api.commons.AdherenceDepartmentalRuleClause
	60, // 43: api.commons.AdherenceDepartmentalRuleClause.action:type_name -> api.commons.AdherenceDepartmentalRuleAction
	27, // 44: api.commons.AdherenceDepartmentalRuleClause.condition:type_name -> api.commons.AdherenceRuleCondition
	28, // 45: api.commons.AdherenceDepartmentalRuleClause.unit:type_name -> api.commons.AdherenceRuleUnit
	67, // 46: api.commons.AdherenceDepartmentalRuleClause.per_amount:type_name -> google.protobuf.Int32Value
	28, // 47: api.commons.AdherenceDepartmentalRuleClause.per_unit:type_name -> api.commons.AdherenceRuleUnit
	57, // 48: api.commons.AdherenceAgentRule.selected_entity:type_name -> api.commons.ConfigEntity
	24, // 49: api.commons.AdherenceAgentRule.rule_requirement_type:type_name -> api.commons.AdherenceRuleRequirementType
	65, // 50: api.commons.AdherenceAgentRule.rule_clauses:type_name -> api.commons.AdherenceAgentRuleClause
	29, // 51: api.commons.AdherenceAgentRuleAction.action_type:type_name -> api.commons.AdherenceAgentRuleActionType
	64, // 52: api.commons.AdherenceAgentRuleClause.action:type_name -> api.commons.AdherenceAgentRuleAction
	27, // 53: api.commons.AdherenceAgentRuleClause.condition:type_name -> api.commons.AdherenceRuleCondition
	28, // 54: api.commons.AdherenceAgentRuleClause.unit:type_name -> api.commons.AdherenceRuleUnit
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_api_commons_wfm_proto_init() }
func file_api_commons_wfm_proto_init() {
	if File_api_commons_wfm_proto != nil {
		return
	}
	file_api_commons_wfm_proto_msgTypes[2].OneofWrappers = []any{
		(*ForecastingParameters_HistoricalDataRangeInMonths)(nil),
		(*ForecastingParameters_HistoricalDataRangeStartDatetime)(nil),
		(*ForecastingParameters_ForecastRangeInWeeks)(nil),
		(*ForecastingParameters_ForecastDatetimeRange)(nil),
		(*ForecastingParameters_TrainingDataRangeInMonths)(nil),
		(*ForecastingParameters_TrainingDataDatetimeRange)(nil),
	}
	file_api_commons_wfm_proto_msgTypes[10].OneofWrappers = []any{
		(*OptionTypes_OpenTimesOption)(nil),
		(*OptionTypes_AvailabilityOption)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_commons_wfm_proto_rawDesc), len(file_api_commons_wfm_proto_rawDesc)),
			NumEnums:      32,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_wfm_proto_goTypes,
		DependencyIndexes: file_api_commons_wfm_proto_depIdxs,
		EnumInfos:         file_api_commons_wfm_proto_enumTypes,
		MessageInfos:      file_api_commons_wfm_proto_msgTypes,
	}.Build()
	File_api_commons_wfm_proto = out.File
	file_api_commons_wfm_proto_goTypes = nil
	file_api_commons_wfm_proto_depIdxs = nil
}
