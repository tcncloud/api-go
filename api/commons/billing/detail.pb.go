// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: api/commons/billing/detail.proto

package billing

import (
	audit "github.com/tcncloud/api-go/api/commons/audit"
	modules "github.com/tcncloud/api-go/api/commons/billing/modules"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
type DetailConfigType int32

const (
	DetailConfigType_DETAIL_CONFIG_TYPE_UNSPECIFIED DetailConfigType = 0
	DetailConfigType_DETAIL_CONFIG_TYPE_NOOP        DetailConfigType = 1
	DetailConfigType_DETAIL_CONFIG_TYPE_AGENT_SEATS DetailConfigType = 2
	// omni config types
	DetailConfigType_DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_CHAT             DetailConfigType = 100
	DetailConfigType_DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_EMAIL_MESSAGE    DetailConfigType = 101
	DetailConfigType_DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_EMAIL_SIZE       DetailConfigType = 102
	DetailConfigType_DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_SMS              DetailConfigType = 103
	DetailConfigType_DETAIL_CONFIG_TYPE_TASK_MESSAGE_SENT_EMAIL_MESSAGE     DetailConfigType = 104
	DetailConfigType_DETAIL_CONFIG_TYPE_TASK_MESSAGE_SENT_EMAIL_SIZE        DetailConfigType = 105
	DetailConfigType_DETAIL_CONFIG_TYPE_TASK_MESSAGE_SENT_SMS               DetailConfigType = 106
	DetailConfigType_DETAIL_CONFIG_TYPE_CONNECTED_INBOX_POLL                DetailConfigType = 107
	DetailConfigType_DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_CHAT           DetailConfigType = 108
	DetailConfigType_DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_EMAIL_MESSAGE  DetailConfigType = 109
	DetailConfigType_DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_EMAIL_SIZE     DetailConfigType = 110
	DetailConfigType_DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_SMS            DetailConfigType = 111
	DetailConfigType_DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_CHAT          DetailConfigType = 112
	DetailConfigType_DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_EMAIL_MESSAGE DetailConfigType = 113
	DetailConfigType_DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_EMAIL_SIZE    DetailConfigType = 114
	DetailConfigType_DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_SMS           DetailConfigType = 115
	DetailConfigType_DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_CHAT_SIZE        DetailConfigType = 116
	DetailConfigType_DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_CHAT_SIZE      DetailConfigType = 117
	DetailConfigType_DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_CHAT_SIZE     DetailConfigType = 118
	DetailConfigType_DETAIL_CONFIG_TYPE_CONNECTED_INBOX_CREATED             DetailConfigType = 119
	DetailConfigType_DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_SMS_SIZE         DetailConfigType = 120
	DetailConfigType_DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_SMS_SIZE       DetailConfigType = 121
	DetailConfigType_DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_SMS_SIZE      DetailConfigType = 122
	DetailConfigType_DETAIL_CONFIG_TYPE_TASK_MESSAGE_SENT_SMS_SIZE          DetailConfigType = 123
	DetailConfigType_DETAIL_CONFIG_TYPE_AGENT_CHAT_MESSAGE_UNITS            DetailConfigType = 124
	DetailConfigType_DETAIL_CONFIG_TYPE_AGENT_EMAIL_MESSAGE_UNITS           DetailConfigType = 125
	DetailConfigType_DETAIL_CONFIG_TYPE_AGENT_SMS_MESSAGE_UNITS             DetailConfigType = 126
	DetailConfigType_DETAIL_CONFIG_TYPE_MANAGER_CHAT_MESSAGE_UNITS          DetailConfigType = 127
	DetailConfigType_DETAIL_CONFIG_TYPE_MANAGER_EMAIL_MESSAGE_UNITS         DetailConfigType = 128
	DetailConfigType_DETAIL_CONFIG_TYPE_MANAGER_SMS_MESSAGE_UNITS           DetailConfigType = 129
	DetailConfigType_DETAIL_CONFIG_TYPE_CUSTOMER_CHAT_MESSAGE_UNITS         DetailConfigType = 130
	DetailConfigType_DETAIL_CONFIG_TYPE_CUSTOMER_EMAIL_MESSAGE_UNITS        DetailConfigType = 131
	DetailConfigType_DETAIL_CONFIG_TYPE_CUSTOMER_SMS_MESSAGE_UNITS          DetailConfigType = 132
	DetailConfigType_DETAIL_CONFIG_TYPE_SYSTEM_CHAT_MESSAGE_UNITS           DetailConfigType = 133
	DetailConfigType_DETAIL_CONFIG_TYPE_SYSTEM_EMAIL_MESSAGE_UNITS          DetailConfigType = 134
	DetailConfigType_DETAIL_CONFIG_TYPE_SYSTEM_SMS_MESSAGE_UNITS            DetailConfigType = 135
	// compliance config types
	DetailConfigType_BillingDetailConfigType_COMPLIANCE_RND_QUERY        DetailConfigType = 200
	DetailConfigType_BillingDetailConfigType_COMPLIANCE_RND_QUERY_CACHED DetailConfigType = 201
)

// Enum value maps for DetailConfigType.
var (
	DetailConfigType_name = map[int32]string{
		0:   "DETAIL_CONFIG_TYPE_UNSPECIFIED",
		1:   "DETAIL_CONFIG_TYPE_NOOP",
		2:   "DETAIL_CONFIG_TYPE_AGENT_SEATS",
		100: "DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_CHAT",
		101: "DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_EMAIL_MESSAGE",
		102: "DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_EMAIL_SIZE",
		103: "DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_SMS",
		104: "DETAIL_CONFIG_TYPE_TASK_MESSAGE_SENT_EMAIL_MESSAGE",
		105: "DETAIL_CONFIG_TYPE_TASK_MESSAGE_SENT_EMAIL_SIZE",
		106: "DETAIL_CONFIG_TYPE_TASK_MESSAGE_SENT_SMS",
		107: "DETAIL_CONFIG_TYPE_CONNECTED_INBOX_POLL",
		108: "DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_CHAT",
		109: "DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_EMAIL_MESSAGE",
		110: "DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_EMAIL_SIZE",
		111: "DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_SMS",
		112: "DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_CHAT",
		113: "DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_EMAIL_MESSAGE",
		114: "DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_EMAIL_SIZE",
		115: "DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_SMS",
		116: "DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_CHAT_SIZE",
		117: "DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_CHAT_SIZE",
		118: "DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_CHAT_SIZE",
		119: "DETAIL_CONFIG_TYPE_CONNECTED_INBOX_CREATED",
		120: "DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_SMS_SIZE",
		121: "DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_SMS_SIZE",
		122: "DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_SMS_SIZE",
		123: "DETAIL_CONFIG_TYPE_TASK_MESSAGE_SENT_SMS_SIZE",
		124: "DETAIL_CONFIG_TYPE_AGENT_CHAT_MESSAGE_UNITS",
		125: "DETAIL_CONFIG_TYPE_AGENT_EMAIL_MESSAGE_UNITS",
		126: "DETAIL_CONFIG_TYPE_AGENT_SMS_MESSAGE_UNITS",
		127: "DETAIL_CONFIG_TYPE_MANAGER_CHAT_MESSAGE_UNITS",
		128: "DETAIL_CONFIG_TYPE_MANAGER_EMAIL_MESSAGE_UNITS",
		129: "DETAIL_CONFIG_TYPE_MANAGER_SMS_MESSAGE_UNITS",
		130: "DETAIL_CONFIG_TYPE_CUSTOMER_CHAT_MESSAGE_UNITS",
		131: "DETAIL_CONFIG_TYPE_CUSTOMER_EMAIL_MESSAGE_UNITS",
		132: "DETAIL_CONFIG_TYPE_CUSTOMER_SMS_MESSAGE_UNITS",
		133: "DETAIL_CONFIG_TYPE_SYSTEM_CHAT_MESSAGE_UNITS",
		134: "DETAIL_CONFIG_TYPE_SYSTEM_EMAIL_MESSAGE_UNITS",
		135: "DETAIL_CONFIG_TYPE_SYSTEM_SMS_MESSAGE_UNITS",
		200: "BillingDetailConfigType_COMPLIANCE_RND_QUERY",
		201: "BillingDetailConfigType_COMPLIANCE_RND_QUERY_CACHED",
	}
	DetailConfigType_value = map[string]int32{
		"DETAIL_CONFIG_TYPE_UNSPECIFIED":                         0,
		"DETAIL_CONFIG_TYPE_NOOP":                                1,
		"DETAIL_CONFIG_TYPE_AGENT_SEATS":                         2,
		"DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_CHAT":             100,
		"DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_EMAIL_MESSAGE":    101,
		"DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_EMAIL_SIZE":       102,
		"DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_SMS":              103,
		"DETAIL_CONFIG_TYPE_TASK_MESSAGE_SENT_EMAIL_MESSAGE":     104,
		"DETAIL_CONFIG_TYPE_TASK_MESSAGE_SENT_EMAIL_SIZE":        105,
		"DETAIL_CONFIG_TYPE_TASK_MESSAGE_SENT_SMS":               106,
		"DETAIL_CONFIG_TYPE_CONNECTED_INBOX_POLL":                107,
		"DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_CHAT":           108,
		"DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_EMAIL_MESSAGE":  109,
		"DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_EMAIL_SIZE":     110,
		"DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_SMS":            111,
		"DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_CHAT":          112,
		"DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_EMAIL_MESSAGE": 113,
		"DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_EMAIL_SIZE":    114,
		"DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_SMS":           115,
		"DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_CHAT_SIZE":        116,
		"DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_CHAT_SIZE":      117,
		"DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_CHAT_SIZE":     118,
		"DETAIL_CONFIG_TYPE_CONNECTED_INBOX_CREATED":             119,
		"DETAIL_CONFIG_TYPE_AGENT_TEXT_MESSAGE_SMS_SIZE":         120,
		"DETAIL_CONFIG_TYPE_MANAGER_TEXT_MESSAGE_SMS_SIZE":       121,
		"DETAIL_CONFIG_TYPE_CUSTOMER_TEXT_MESSAGE_SMS_SIZE":      122,
		"DETAIL_CONFIG_TYPE_TASK_MESSAGE_SENT_SMS_SIZE":          123,
		"DETAIL_CONFIG_TYPE_AGENT_CHAT_MESSAGE_UNITS":            124,
		"DETAIL_CONFIG_TYPE_AGENT_EMAIL_MESSAGE_UNITS":           125,
		"DETAIL_CONFIG_TYPE_AGENT_SMS_MESSAGE_UNITS":             126,
		"DETAIL_CONFIG_TYPE_MANAGER_CHAT_MESSAGE_UNITS":          127,
		"DETAIL_CONFIG_TYPE_MANAGER_EMAIL_MESSAGE_UNITS":         128,
		"DETAIL_CONFIG_TYPE_MANAGER_SMS_MESSAGE_UNITS":           129,
		"DETAIL_CONFIG_TYPE_CUSTOMER_CHAT_MESSAGE_UNITS":         130,
		"DETAIL_CONFIG_TYPE_CUSTOMER_EMAIL_MESSAGE_UNITS":        131,
		"DETAIL_CONFIG_TYPE_CUSTOMER_SMS_MESSAGE_UNITS":          132,
		"DETAIL_CONFIG_TYPE_SYSTEM_CHAT_MESSAGE_UNITS":           133,
		"DETAIL_CONFIG_TYPE_SYSTEM_EMAIL_MESSAGE_UNITS":          134,
		"DETAIL_CONFIG_TYPE_SYSTEM_SMS_MESSAGE_UNITS":            135,
		"BillingDetailConfigType_COMPLIANCE_RND_QUERY":           200,
		"BillingDetailConfigType_COMPLIANCE_RND_QUERY_CACHED":    201,
	}
)

func (x DetailConfigType) Enum() *DetailConfigType {
	p := new(DetailConfigType)
	*p = x
	return p
}

func (x DetailConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetailConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_billing_detail_proto_enumTypes[0].Descriptor()
}

func (DetailConfigType) Type() protoreflect.EnumType {
	return &file_api_commons_billing_detail_proto_enumTypes[0]
}

func (x DetailConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetailConfigType.Descriptor instead.
func (DetailConfigType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_billing_detail_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	Details []*Detail `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	OrgId string `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	BillingPlanId int64 `protobuf:"varint,3,opt,name=billing_plan_id,json=billingPlanId,proto3" json:"billing_plan_id,omitempty"`
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_billing_detail_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_billing_detail_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_api_commons_billing_detail_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Plan) GetDetails() []*Detail {
	if x != nil {
		return x.Details
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Plan) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Plan) GetBillingPlanId() int64 {
	if x != nil {
		return x.BillingPlanId
	}
	return 0
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Plan) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Plan) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Plan) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Plan) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
type Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	BillingDetailSid int64 `protobuf:"varint,1,opt,name=billing_detail_sid,json=billingDetailSid,proto3" json:"billing_detail_sid,omitempty"`
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	EventType audit.EventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=api.commons.audit.EventType" json:"event_type,omitempty"`
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	ConfigType DetailConfigType `protobuf:"varint,3,opt,name=config_type,json=configType,proto3,enum=api.commons.billing.DetailConfigType" json:"config_type,omitempty"`
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	Config *DetailConfig `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	DateModified *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	DeletedOn *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deleted_on,json=deletedOn,proto3" json:"deleted_on,omitempty"`
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	BillingPlanId int64 `protobuf:"varint,8,opt,name=billing_plan_id,json=billingPlanId,proto3" json:"billing_plan_id,omitempty"`
}

func (x *Detail) Reset() {
	*x = Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_billing_detail_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detail) ProtoMessage() {}

func (x *Detail) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_billing_detail_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detail.ProtoReflect.Descriptor instead.
func (*Detail) Descriptor() ([]byte, []int) {
	return file_api_commons_billing_detail_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Detail) GetBillingDetailSid() int64 {
	if x != nil {
		return x.BillingDetailSid
	}
	return 0
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Detail) GetEventType() audit.EventType {
	if x != nil {
		return x.EventType
	}
	return audit.EventType(0)
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Detail) GetConfigType() DetailConfigType {
	if x != nil {
		return x.ConfigType
	}
	return DetailConfigType_DETAIL_CONFIG_TYPE_UNSPECIFIED
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Detail) GetConfig() *DetailConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Detail) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Detail) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Detail) GetDeletedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedOn
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *Detail) GetBillingPlanId() int64 {
	if x != nil {
		return x.BillingPlanId
	}
	return 0
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
type DetailConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*DetailConfig_AgentSeatsConfig
	//	*DetailConfig_AgentTextMessageChatConfig
	//	*DetailConfig_AgentTextMessageEmailMessageConfig
	//	*DetailConfig_AgentTextMessageEmailSizeConfig
	//	*DetailConfig_AgentTextMessageSmsConfig
	//	*DetailConfig_TaskMessageSentEmailMessageConfig
	//	*DetailConfig_TaskMessageSentEmailSizeConfig
	//	*DetailConfig_TaskMessageSentSmsConfig
	//	*DetailConfig_ConnectedInboxPollConfig
	//	*DetailConfig_ManagerTextMessageChatConfig
	//	*DetailConfig_ManagerTextMessageEmailMessageConfig
	//	*DetailConfig_ManagerTextMessageEmailSizeConfig
	//	*DetailConfig_ManagerTextMessageSmsConfig
	//	*DetailConfig_CustomerTextMessageChatConfig
	//	*DetailConfig_CustomerTextMessageEmailMessageConfig
	//	*DetailConfig_CustomerTextMessageEmailSizeConfig
	//	*DetailConfig_CustomerTextMessageSmsConfig
	//	*DetailConfig_AgentTextMessageChatSizeConfig
	//	*DetailConfig_ManagerTextMessageChatSizeConfig
	//	*DetailConfig_CustomerTextMessageChatSizeConfig
	//	*DetailConfig_ConnectedInboxCreatedConfig
	//	*DetailConfig_AgentTextMessageSmsSizeConfig
	//	*DetailConfig_ManagerTextMessageSmsSizeConfig
	//	*DetailConfig_CustomerTextMessageSmsSizeConfig
	//	*DetailConfig_TaskMessageSentSmsSizeConfig
	//	*DetailConfig_AgentChatMessageUnitsConfig
	//	*DetailConfig_AgentEmailMessageUnitsConfig
	//	*DetailConfig_AgentSmsMessageUnitsConfig
	//	*DetailConfig_ManagerChatMessageUnitsConfig
	//	*DetailConfig_ManagerEmailMessageUnitsConfig
	//	*DetailConfig_ManagerSmsMessageUnitsConfig
	//	*DetailConfig_CustomerChatMessageUnitsConfig
	//	*DetailConfig_CustomerEmailMessageUnitsConfig
	//	*DetailConfig_CustomerSmsMessageUnitsConfig
	//	*DetailConfig_SystemChatMessageUnitsConfig
	//	*DetailConfig_SystemEmailMessageUnitsConfig
	//	*DetailConfig_SystemSmsMessageUnitsConfig
	//	*DetailConfig_ComplianceRndQueryConfig
	//	*DetailConfig_ComplianceRndQueryCachedConfig
	Config isDetailConfig_Config `protobuf_oneof:"config"`
}

func (x *DetailConfig) Reset() {
	*x = DetailConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_billing_detail_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailConfig) ProtoMessage() {}

func (x *DetailConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_billing_detail_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailConfig.ProtoReflect.Descriptor instead.
func (*DetailConfig) Descriptor() ([]byte, []int) {
	return file_api_commons_billing_detail_proto_rawDescGZIP(), []int{2}
}

func (m *DetailConfig) GetConfig() isDetailConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetAgentSeatsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_AgentSeatsConfig); ok {
		return x.AgentSeatsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetAgentTextMessageChatConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_AgentTextMessageChatConfig); ok {
		return x.AgentTextMessageChatConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetAgentTextMessageEmailMessageConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_AgentTextMessageEmailMessageConfig); ok {
		return x.AgentTextMessageEmailMessageConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetAgentTextMessageEmailSizeConfig() *modules.BasicAmountConfig {
	if x, ok := x.GetConfig().(*DetailConfig_AgentTextMessageEmailSizeConfig); ok {
		return x.AgentTextMessageEmailSizeConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetAgentTextMessageSmsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_AgentTextMessageSmsConfig); ok {
		return x.AgentTextMessageSmsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetTaskMessageSentEmailMessageConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_TaskMessageSentEmailMessageConfig); ok {
		return x.TaskMessageSentEmailMessageConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetTaskMessageSentEmailSizeConfig() *modules.BasicAmountConfig {
	if x, ok := x.GetConfig().(*DetailConfig_TaskMessageSentEmailSizeConfig); ok {
		return x.TaskMessageSentEmailSizeConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetTaskMessageSentSmsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_TaskMessageSentSmsConfig); ok {
		return x.TaskMessageSentSmsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetConnectedInboxPollConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_ConnectedInboxPollConfig); ok {
		return x.ConnectedInboxPollConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetManagerTextMessageChatConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_ManagerTextMessageChatConfig); ok {
		return x.ManagerTextMessageChatConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetManagerTextMessageEmailMessageConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_ManagerTextMessageEmailMessageConfig); ok {
		return x.ManagerTextMessageEmailMessageConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetManagerTextMessageEmailSizeConfig() *modules.BasicAmountConfig {
	if x, ok := x.GetConfig().(*DetailConfig_ManagerTextMessageEmailSizeConfig); ok {
		return x.ManagerTextMessageEmailSizeConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetManagerTextMessageSmsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_ManagerTextMessageSmsConfig); ok {
		return x.ManagerTextMessageSmsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetCustomerTextMessageChatConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_CustomerTextMessageChatConfig); ok {
		return x.CustomerTextMessageChatConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetCustomerTextMessageEmailMessageConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_CustomerTextMessageEmailMessageConfig); ok {
		return x.CustomerTextMessageEmailMessageConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetCustomerTextMessageEmailSizeConfig() *modules.BasicAmountConfig {
	if x, ok := x.GetConfig().(*DetailConfig_CustomerTextMessageEmailSizeConfig); ok {
		return x.CustomerTextMessageEmailSizeConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetCustomerTextMessageSmsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_CustomerTextMessageSmsConfig); ok {
		return x.CustomerTextMessageSmsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetAgentTextMessageChatSizeConfig() *modules.BasicAmountConfig {
	if x, ok := x.GetConfig().(*DetailConfig_AgentTextMessageChatSizeConfig); ok {
		return x.AgentTextMessageChatSizeConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetManagerTextMessageChatSizeConfig() *modules.BasicAmountConfig {
	if x, ok := x.GetConfig().(*DetailConfig_ManagerTextMessageChatSizeConfig); ok {
		return x.ManagerTextMessageChatSizeConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetCustomerTextMessageChatSizeConfig() *modules.BasicAmountConfig {
	if x, ok := x.GetConfig().(*DetailConfig_CustomerTextMessageChatSizeConfig); ok {
		return x.CustomerTextMessageChatSizeConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetConnectedInboxCreatedConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_ConnectedInboxCreatedConfig); ok {
		return x.ConnectedInboxCreatedConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetAgentTextMessageSmsSizeConfig() *modules.BasicAmountConfig {
	if x, ok := x.GetConfig().(*DetailConfig_AgentTextMessageSmsSizeConfig); ok {
		return x.AgentTextMessageSmsSizeConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetManagerTextMessageSmsSizeConfig() *modules.BasicAmountConfig {
	if x, ok := x.GetConfig().(*DetailConfig_ManagerTextMessageSmsSizeConfig); ok {
		return x.ManagerTextMessageSmsSizeConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetCustomerTextMessageSmsSizeConfig() *modules.BasicAmountConfig {
	if x, ok := x.GetConfig().(*DetailConfig_CustomerTextMessageSmsSizeConfig); ok {
		return x.CustomerTextMessageSmsSizeConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetTaskMessageSentSmsSizeConfig() *modules.BasicAmountConfig {
	if x, ok := x.GetConfig().(*DetailConfig_TaskMessageSentSmsSizeConfig); ok {
		return x.TaskMessageSentSmsSizeConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetAgentChatMessageUnitsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_AgentChatMessageUnitsConfig); ok {
		return x.AgentChatMessageUnitsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetAgentEmailMessageUnitsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_AgentEmailMessageUnitsConfig); ok {
		return x.AgentEmailMessageUnitsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetAgentSmsMessageUnitsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_AgentSmsMessageUnitsConfig); ok {
		return x.AgentSmsMessageUnitsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetManagerChatMessageUnitsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_ManagerChatMessageUnitsConfig); ok {
		return x.ManagerChatMessageUnitsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetManagerEmailMessageUnitsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_ManagerEmailMessageUnitsConfig); ok {
		return x.ManagerEmailMessageUnitsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetManagerSmsMessageUnitsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_ManagerSmsMessageUnitsConfig); ok {
		return x.ManagerSmsMessageUnitsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetCustomerChatMessageUnitsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_CustomerChatMessageUnitsConfig); ok {
		return x.CustomerChatMessageUnitsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetCustomerEmailMessageUnitsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_CustomerEmailMessageUnitsConfig); ok {
		return x.CustomerEmailMessageUnitsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetCustomerSmsMessageUnitsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_CustomerSmsMessageUnitsConfig); ok {
		return x.CustomerSmsMessageUnitsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetSystemChatMessageUnitsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_SystemChatMessageUnitsConfig); ok {
		return x.SystemChatMessageUnitsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetSystemEmailMessageUnitsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_SystemEmailMessageUnitsConfig); ok {
		return x.SystemEmailMessageUnitsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetSystemSmsMessageUnitsConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_SystemSmsMessageUnitsConfig); ok {
		return x.SystemSmsMessageUnitsConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetComplianceRndQueryConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_ComplianceRndQueryConfig); ok {
		return x.ComplianceRndQueryConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
func (x *DetailConfig) GetComplianceRndQueryCachedConfig() *modules.BasicConfig {
	if x, ok := x.GetConfig().(*DetailConfig_ComplianceRndQueryCachedConfig); ok {
		return x.ComplianceRndQueryCachedConfig
	}
	return nil
}

type isDetailConfig_Config interface {
	isDetailConfig_Config()
}

type DetailConfig_AgentSeatsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	AgentSeatsConfig *modules.BasicConfig `protobuf:"bytes,2,opt,name=agent_seats_config,json=agentSeatsConfig,proto3,oneof"`
}

type DetailConfig_AgentTextMessageChatConfig struct {
	// omni configs
	//
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	AgentTextMessageChatConfig *modules.BasicConfig `protobuf:"bytes,100,opt,name=agent_text_message_chat_config,json=agentTextMessageChatConfig,proto3,oneof"`
}

type DetailConfig_AgentTextMessageEmailMessageConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	AgentTextMessageEmailMessageConfig *modules.BasicConfig `protobuf:"bytes,101,opt,name=agent_text_message_email_message_config,json=agentTextMessageEmailMessageConfig,proto3,oneof"`
}

type DetailConfig_AgentTextMessageEmailSizeConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	AgentTextMessageEmailSizeConfig *modules.BasicAmountConfig `protobuf:"bytes,102,opt,name=agent_text_message_email_size_config,json=agentTextMessageEmailSizeConfig,proto3,oneof"`
}

type DetailConfig_AgentTextMessageSmsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	AgentTextMessageSmsConfig *modules.BasicConfig `protobuf:"bytes,103,opt,name=agent_text_message_sms_config,json=agentTextMessageSmsConfig,proto3,oneof"`
}

type DetailConfig_TaskMessageSentEmailMessageConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	TaskMessageSentEmailMessageConfig *modules.BasicConfig `protobuf:"bytes,104,opt,name=task_message_sent_email_message_config,json=taskMessageSentEmailMessageConfig,proto3,oneof"`
}

type DetailConfig_TaskMessageSentEmailSizeConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	TaskMessageSentEmailSizeConfig *modules.BasicAmountConfig `protobuf:"bytes,105,opt,name=task_message_sent_email_size_config,json=taskMessageSentEmailSizeConfig,proto3,oneof"`
}

type DetailConfig_TaskMessageSentSmsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	TaskMessageSentSmsConfig *modules.BasicConfig `protobuf:"bytes,106,opt,name=task_message_sent_sms_config,json=taskMessageSentSmsConfig,proto3,oneof"`
}

type DetailConfig_ConnectedInboxPollConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	ConnectedInboxPollConfig *modules.BasicConfig `protobuf:"bytes,107,opt,name=connected_inbox_poll_config,json=connectedInboxPollConfig,proto3,oneof"`
}

type DetailConfig_ManagerTextMessageChatConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	ManagerTextMessageChatConfig *modules.BasicConfig `protobuf:"bytes,108,opt,name=manager_text_message_chat_config,json=managerTextMessageChatConfig,proto3,oneof"`
}

type DetailConfig_ManagerTextMessageEmailMessageConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	ManagerTextMessageEmailMessageConfig *modules.BasicConfig `protobuf:"bytes,109,opt,name=manager_text_message_email_message_config,json=managerTextMessageEmailMessageConfig,proto3,oneof"`
}

type DetailConfig_ManagerTextMessageEmailSizeConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	ManagerTextMessageEmailSizeConfig *modules.BasicAmountConfig `protobuf:"bytes,110,opt,name=manager_text_message_email_size_config,json=managerTextMessageEmailSizeConfig,proto3,oneof"`
}

type DetailConfig_ManagerTextMessageSmsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	ManagerTextMessageSmsConfig *modules.BasicConfig `protobuf:"bytes,111,opt,name=manager_text_message_sms_config,json=managerTextMessageSmsConfig,proto3,oneof"`
}

type DetailConfig_CustomerTextMessageChatConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	CustomerTextMessageChatConfig *modules.BasicConfig `protobuf:"bytes,112,opt,name=customer_text_message_chat_config,json=customerTextMessageChatConfig,proto3,oneof"`
}

type DetailConfig_CustomerTextMessageEmailMessageConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	CustomerTextMessageEmailMessageConfig *modules.BasicConfig `protobuf:"bytes,113,opt,name=customer_text_message_email_message_config,json=customerTextMessageEmailMessageConfig,proto3,oneof"`
}

type DetailConfig_CustomerTextMessageEmailSizeConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	CustomerTextMessageEmailSizeConfig *modules.BasicAmountConfig `protobuf:"bytes,114,opt,name=customer_text_message_email_size_config,json=customerTextMessageEmailSizeConfig,proto3,oneof"`
}

type DetailConfig_CustomerTextMessageSmsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	CustomerTextMessageSmsConfig *modules.BasicConfig `protobuf:"bytes,115,opt,name=customer_text_message_sms_config,json=customerTextMessageSmsConfig,proto3,oneof"`
}

type DetailConfig_AgentTextMessageChatSizeConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	AgentTextMessageChatSizeConfig *modules.BasicAmountConfig `protobuf:"bytes,116,opt,name=agent_text_message_chat_size_config,json=agentTextMessageChatSizeConfig,proto3,oneof"`
}

type DetailConfig_ManagerTextMessageChatSizeConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	ManagerTextMessageChatSizeConfig *modules.BasicAmountConfig `protobuf:"bytes,117,opt,name=manager_text_message_chat_size_config,json=managerTextMessageChatSizeConfig,proto3,oneof"`
}

type DetailConfig_CustomerTextMessageChatSizeConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	CustomerTextMessageChatSizeConfig *modules.BasicAmountConfig `protobuf:"bytes,118,opt,name=customer_text_message_chat_size_config,json=customerTextMessageChatSizeConfig,proto3,oneof"`
}

type DetailConfig_ConnectedInboxCreatedConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	ConnectedInboxCreatedConfig *modules.BasicConfig `protobuf:"bytes,119,opt,name=connected_inbox_created_config,json=connectedInboxCreatedConfig,proto3,oneof"`
}

type DetailConfig_AgentTextMessageSmsSizeConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	AgentTextMessageSmsSizeConfig *modules.BasicAmountConfig `protobuf:"bytes,120,opt,name=agent_text_message_sms_size_config,json=agentTextMessageSmsSizeConfig,proto3,oneof"`
}

type DetailConfig_ManagerTextMessageSmsSizeConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	ManagerTextMessageSmsSizeConfig *modules.BasicAmountConfig `protobuf:"bytes,121,opt,name=manager_text_message_sms_size_config,json=managerTextMessageSmsSizeConfig,proto3,oneof"`
}

type DetailConfig_CustomerTextMessageSmsSizeConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	CustomerTextMessageSmsSizeConfig *modules.BasicAmountConfig `protobuf:"bytes,122,opt,name=customer_text_message_sms_size_config,json=customerTextMessageSmsSizeConfig,proto3,oneof"`
}

type DetailConfig_TaskMessageSentSmsSizeConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	TaskMessageSentSmsSizeConfig *modules.BasicAmountConfig `protobuf:"bytes,123,opt,name=task_message_sent_sms_size_config,json=taskMessageSentSmsSizeConfig,proto3,oneof"`
}

type DetailConfig_AgentChatMessageUnitsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	AgentChatMessageUnitsConfig *modules.BasicConfig `protobuf:"bytes,124,opt,name=agent_chat_message_units_config,json=agentChatMessageUnitsConfig,proto3,oneof"`
}

type DetailConfig_AgentEmailMessageUnitsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	AgentEmailMessageUnitsConfig *modules.BasicConfig `protobuf:"bytes,125,opt,name=agent_email_message_units_config,json=agentEmailMessageUnitsConfig,proto3,oneof"`
}

type DetailConfig_AgentSmsMessageUnitsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	AgentSmsMessageUnitsConfig *modules.BasicConfig `protobuf:"bytes,126,opt,name=agent_sms_message_units_config,json=agentSmsMessageUnitsConfig,proto3,oneof"`
}

type DetailConfig_ManagerChatMessageUnitsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	ManagerChatMessageUnitsConfig *modules.BasicConfig `protobuf:"bytes,127,opt,name=manager_chat_message_units_config,json=managerChatMessageUnitsConfig,proto3,oneof"`
}

type DetailConfig_ManagerEmailMessageUnitsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	ManagerEmailMessageUnitsConfig *modules.BasicConfig `protobuf:"bytes,128,opt,name=manager_email_message_units_config,json=managerEmailMessageUnitsConfig,proto3,oneof"`
}

type DetailConfig_ManagerSmsMessageUnitsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	ManagerSmsMessageUnitsConfig *modules.BasicConfig `protobuf:"bytes,129,opt,name=manager_sms_message_units_config,json=managerSmsMessageUnitsConfig,proto3,oneof"`
}

type DetailConfig_CustomerChatMessageUnitsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	CustomerChatMessageUnitsConfig *modules.BasicConfig `protobuf:"bytes,130,opt,name=customer_chat_message_units_config,json=customerChatMessageUnitsConfig,proto3,oneof"`
}

type DetailConfig_CustomerEmailMessageUnitsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	CustomerEmailMessageUnitsConfig *modules.BasicConfig `protobuf:"bytes,131,opt,name=customer_email_message_units_config,json=customerEmailMessageUnitsConfig,proto3,oneof"`
}

type DetailConfig_CustomerSmsMessageUnitsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	CustomerSmsMessageUnitsConfig *modules.BasicConfig `protobuf:"bytes,132,opt,name=customer_sms_message_units_config,json=customerSmsMessageUnitsConfig,proto3,oneof"`
}

type DetailConfig_SystemChatMessageUnitsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	SystemChatMessageUnitsConfig *modules.BasicConfig `protobuf:"bytes,133,opt,name=system_chat_message_units_config,json=systemChatMessageUnitsConfig,proto3,oneof"`
}

type DetailConfig_SystemEmailMessageUnitsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	SystemEmailMessageUnitsConfig *modules.BasicConfig `protobuf:"bytes,134,opt,name=system_email_message_units_config,json=systemEmailMessageUnitsConfig,proto3,oneof"`
}

type DetailConfig_SystemSmsMessageUnitsConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	SystemSmsMessageUnitsConfig *modules.BasicConfig `protobuf:"bytes,135,opt,name=system_sms_message_units_config,json=systemSmsMessageUnitsConfig,proto3,oneof"`
}

type DetailConfig_ComplianceRndQueryConfig struct {
	// compliance configs
	//
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	ComplianceRndQueryConfig *modules.BasicConfig `protobuf:"bytes,200,opt,name=compliance_rnd_query_config,json=complianceRndQueryConfig,proto3,oneof"`
}

type DetailConfig_ComplianceRndQueryCachedConfig struct {
	// Deprecated: Marked as deprecated in api/commons/billing/detail.proto.
	ComplianceRndQueryCachedConfig *modules.BasicConfig `protobuf:"bytes,201,opt,name=compliance_rnd_query_cached_config,json=complianceRndQueryCachedConfig,proto3,oneof"`
}

func (*DetailConfig_AgentSeatsConfig) isDetailConfig_Config() {}

func (*DetailConfig_AgentTextMessageChatConfig) isDetailConfig_Config() {}

func (*DetailConfig_AgentTextMessageEmailMessageConfig) isDetailConfig_Config() {}

func (*DetailConfig_AgentTextMessageEmailSizeConfig) isDetailConfig_Config() {}

func (*DetailConfig_AgentTextMessageSmsConfig) isDetailConfig_Config() {}

func (*DetailConfig_TaskMessageSentEmailMessageConfig) isDetailConfig_Config() {}

func (*DetailConfig_TaskMessageSentEmailSizeConfig) isDetailConfig_Config() {}

func (*DetailConfig_TaskMessageSentSmsConfig) isDetailConfig_Config() {}

func (*DetailConfig_ConnectedInboxPollConfig) isDetailConfig_Config() {}

func (*DetailConfig_ManagerTextMessageChatConfig) isDetailConfig_Config() {}

func (*DetailConfig_ManagerTextMessageEmailMessageConfig) isDetailConfig_Config() {}

func (*DetailConfig_ManagerTextMessageEmailSizeConfig) isDetailConfig_Config() {}

func (*DetailConfig_ManagerTextMessageSmsConfig) isDetailConfig_Config() {}

func (*DetailConfig_CustomerTextMessageChatConfig) isDetailConfig_Config() {}

func (*DetailConfig_CustomerTextMessageEmailMessageConfig) isDetailConfig_Config() {}

func (*DetailConfig_CustomerTextMessageEmailSizeConfig) isDetailConfig_Config() {}

func (*DetailConfig_CustomerTextMessageSmsConfig) isDetailConfig_Config() {}

func (*DetailConfig_AgentTextMessageChatSizeConfig) isDetailConfig_Config() {}

func (*DetailConfig_ManagerTextMessageChatSizeConfig) isDetailConfig_Config() {}

func (*DetailConfig_CustomerTextMessageChatSizeConfig) isDetailConfig_Config() {}

func (*DetailConfig_ConnectedInboxCreatedConfig) isDetailConfig_Config() {}

func (*DetailConfig_AgentTextMessageSmsSizeConfig) isDetailConfig_Config() {}

func (*DetailConfig_ManagerTextMessageSmsSizeConfig) isDetailConfig_Config() {}

func (*DetailConfig_CustomerTextMessageSmsSizeConfig) isDetailConfig_Config() {}

func (*DetailConfig_TaskMessageSentSmsSizeConfig) isDetailConfig_Config() {}

func (*DetailConfig_AgentChatMessageUnitsConfig) isDetailConfig_Config() {}

func (*DetailConfig_AgentEmailMessageUnitsConfig) isDetailConfig_Config() {}

func (*DetailConfig_AgentSmsMessageUnitsConfig) isDetailConfig_Config() {}

func (*DetailConfig_ManagerChatMessageUnitsConfig) isDetailConfig_Config() {}

func (*DetailConfig_ManagerEmailMessageUnitsConfig) isDetailConfig_Config() {}

func (*DetailConfig_ManagerSmsMessageUnitsConfig) isDetailConfig_Config() {}

func (*DetailConfig_CustomerChatMessageUnitsConfig) isDetailConfig_Config() {}

func (*DetailConfig_CustomerEmailMessageUnitsConfig) isDetailConfig_Config() {}

func (*DetailConfig_CustomerSmsMessageUnitsConfig) isDetailConfig_Config() {}

func (*DetailConfig_SystemChatMessageUnitsConfig) isDetailConfig_Config() {}

func (*DetailConfig_SystemEmailMessageUnitsConfig) isDetailConfig_Config() {}

func (*DetailConfig_SystemSmsMessageUnitsConfig) isDetailConfig_Config() {}

func (*DetailConfig_ComplianceRndQueryConfig) isDetailConfig_Config() {}

func (*DetailConfig_ComplianceRndQueryCachedConfig) isDetailConfig_Config() {}

var File_api_commons_billing_detail_proto protoreflect.FileDescriptor

var file_api_commons_billing_detail_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x03, 0x0a, 0x04, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x04, 0x18, 0x01, 0x30, 0x01, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xff, 0x03, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x30, 0x0a, 0x12, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x43, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x2c, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04,
	0x18, 0x01, 0x30, 0x01, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x99, 0x26, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5c, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x72, 0x0a, 0x1e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1a,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x27, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x22, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x83, 0x01, 0x0a, 0x24, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x70, 0x0a, 0x1d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x19, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x26, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x21, 0x74, 0x61, 0x73, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x81, 0x01, 0x0a,
	0x23, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x1e, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x6e, 0x0a, 0x1c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x18, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x6d, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x62, 0x6f, 0x78, 0x50, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x76, 0x0a, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x87, 0x01, 0x0a, 0x29, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x24, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x87, 0x01, 0x0a, 0x26, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x21, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x74, 0x0a, 0x1f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x6f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x1b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x78, 0x0a, 0x21, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x2a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x25, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x89, 0x01, 0x0a, 0x27, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x22, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x76, 0x0a, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x23,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x1e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x85, 0x01, 0x0a, 0x25, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x65,
	0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x87, 0x01, 0x0a, 0x26, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x21,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x73, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x22, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x69, 0x7a,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x24, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x6d, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x85, 0x01,
	0x0a, 0x25, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7d, 0x0a, 0x21, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1c, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x53, 0x6d, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x74, 0x0a, 0x1f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1b, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x76, 0x0a, 0x20, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x7d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x72, 0x0a, 0x1e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6d, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1a, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x78, 0x0a, 0x21, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x7f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48,
	0x00, 0x52, 0x1d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x7b, 0x0a, 0x22, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x77, 0x0a,
	0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7b, 0x0a, 0x22, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x82, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x1e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x7d, 0x0a, 0x23, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48,
	0x00, 0x52, 0x1f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x79, 0x0a, 0x21, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x6d, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x77, 0x0a,
	0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x79, 0x0a, 0x21, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x86, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x1d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x75, 0x0a, 0x1f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x6d, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x6d, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x18,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6e, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7b, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x02, 0x18, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2a, 0xbc, 0x10, 0x0a, 0x10, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x53, 0x10, 0x02, 0x12, 0x2e, 0x0a,
	0x2a, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x64, 0x12, 0x37, 0x0a,
	0x33, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x10, 0x65, 0x12, 0x34, 0x0a, 0x30, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x66, 0x12, 0x2d, 0x0a, 0x29,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x67, 0x12, 0x36, 0x0a, 0x32, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x68, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x69, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x4d, 0x53, 0x10, 0x6a, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x58, 0x5f, 0x50, 0x4f, 0x4c,
	0x4c, 0x10, 0x6b, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x10, 0x6c, 0x12, 0x39, 0x0a, 0x35, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x6d,
	0x12, 0x36, 0x0a, 0x32, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x6e, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x6f, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x70, 0x12, 0x3a, 0x0a, 0x36,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x71, 0x12, 0x37, 0x0a, 0x33, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10,
	0x72, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d,
	0x53, 0x10, 0x73, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x74, 0x12, 0x35, 0x0a, 0x31, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x75, 0x12,
	0x36, 0x0a, 0x32, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54,
	0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x76, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x58, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x77, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x78, 0x12, 0x34, 0x0a, 0x30, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10,
	0x79, 0x12, 0x35, 0x0a, 0x31, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4d,
	0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x7a, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x7b, 0x12, 0x2f, 0x0a, 0x2b, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x7c, 0x12, 0x30, 0x0a, 0x2c,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x7d, 0x12, 0x2e,
	0x0a, 0x2a, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x7e, 0x12, 0x31,
	0x0a, 0x2d, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10,
	0x7f, 0x12, 0x33, 0x0a, 0x2e, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x53, 0x10, 0x80, 0x01, 0x12, 0x31, 0x0a, 0x2c, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x81, 0x01, 0x12, 0x33, 0x0a, 0x2e, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x82, 0x01, 0x12, 0x34,
	0x0a, 0x2f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x53, 0x10, 0x83, 0x01, 0x12, 0x32, 0x0a, 0x2d, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x84, 0x01, 0x12, 0x31, 0x0a, 0x2c, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x85, 0x01, 0x12, 0x32, 0x0a, 0x2d, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x86, 0x01, 0x12,
	0x30, 0x0a, 0x2b, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x4d, 0x53,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x87,
	0x01, 0x12, 0x31, 0x0a, 0x2c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x10, 0xc8, 0x01, 0x12, 0x38, 0x0a, 0x33, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x4e, 0x44, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0xc9, 0x01, 0x1a, 0x02,
	0x18, 0x01, 0x42, 0xc4, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x0b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0xa2, 0x02, 0x03,
	0x41, 0x43, 0x42, 0xaa, 0x02, 0x13, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0xca, 0x02, 0x13, 0x41, 0x70, 0x69, 0x5c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0xe2,
	0x02, 0x1f, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x15, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x3a, 0x3a, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_commons_billing_detail_proto_rawDescOnce sync.Once
	file_api_commons_billing_detail_proto_rawDescData = file_api_commons_billing_detail_proto_rawDesc
)

func file_api_commons_billing_detail_proto_rawDescGZIP() []byte {
	file_api_commons_billing_detail_proto_rawDescOnce.Do(func() {
		file_api_commons_billing_detail_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_billing_detail_proto_rawDescData)
	})
	return file_api_commons_billing_detail_proto_rawDescData
}

var file_api_commons_billing_detail_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_commons_billing_detail_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_commons_billing_detail_proto_goTypes = []interface{}{
	(DetailConfigType)(0),             // 0: api.commons.billing.DetailConfigType
	(*Plan)(nil),                      // 1: api.commons.billing.Plan
	(*Detail)(nil),                    // 2: api.commons.billing.Detail
	(*DetailConfig)(nil),              // 3: api.commons.billing.DetailConfig
	(*timestamppb.Timestamp)(nil),     // 4: google.protobuf.Timestamp
	(audit.EventType)(0),              // 5: api.commons.audit.EventType
	(*modules.BasicConfig)(nil),       // 6: api.commons.billing.modules.BasicConfig
	(*modules.BasicAmountConfig)(nil), // 7: api.commons.billing.modules.BasicAmountConfig
}
var file_api_commons_billing_detail_proto_depIdxs = []int32{
	2,  // 0: api.commons.billing.Plan.details:type_name -> api.commons.billing.Detail
	4,  // 1: api.commons.billing.Plan.create_time:type_name -> google.protobuf.Timestamp
	4,  // 2: api.commons.billing.Plan.update_time:type_name -> google.protobuf.Timestamp
	4,  // 3: api.commons.billing.Plan.start_time:type_name -> google.protobuf.Timestamp
	4,  // 4: api.commons.billing.Plan.end_time:type_name -> google.protobuf.Timestamp
	5,  // 5: api.commons.billing.Detail.event_type:type_name -> api.commons.audit.EventType
	0,  // 6: api.commons.billing.Detail.config_type:type_name -> api.commons.billing.DetailConfigType
	3,  // 7: api.commons.billing.Detail.config:type_name -> api.commons.billing.DetailConfig
	4,  // 8: api.commons.billing.Detail.date_created:type_name -> google.protobuf.Timestamp
	4,  // 9: api.commons.billing.Detail.date_modified:type_name -> google.protobuf.Timestamp
	4,  // 10: api.commons.billing.Detail.deleted_on:type_name -> google.protobuf.Timestamp
	6,  // 11: api.commons.billing.DetailConfig.agent_seats_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 12: api.commons.billing.DetailConfig.agent_text_message_chat_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 13: api.commons.billing.DetailConfig.agent_text_message_email_message_config:type_name -> api.commons.billing.modules.BasicConfig
	7,  // 14: api.commons.billing.DetailConfig.agent_text_message_email_size_config:type_name -> api.commons.billing.modules.BasicAmountConfig
	6,  // 15: api.commons.billing.DetailConfig.agent_text_message_sms_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 16: api.commons.billing.DetailConfig.task_message_sent_email_message_config:type_name -> api.commons.billing.modules.BasicConfig
	7,  // 17: api.commons.billing.DetailConfig.task_message_sent_email_size_config:type_name -> api.commons.billing.modules.BasicAmountConfig
	6,  // 18: api.commons.billing.DetailConfig.task_message_sent_sms_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 19: api.commons.billing.DetailConfig.connected_inbox_poll_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 20: api.commons.billing.DetailConfig.manager_text_message_chat_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 21: api.commons.billing.DetailConfig.manager_text_message_email_message_config:type_name -> api.commons.billing.modules.BasicConfig
	7,  // 22: api.commons.billing.DetailConfig.manager_text_message_email_size_config:type_name -> api.commons.billing.modules.BasicAmountConfig
	6,  // 23: api.commons.billing.DetailConfig.manager_text_message_sms_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 24: api.commons.billing.DetailConfig.customer_text_message_chat_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 25: api.commons.billing.DetailConfig.customer_text_message_email_message_config:type_name -> api.commons.billing.modules.BasicConfig
	7,  // 26: api.commons.billing.DetailConfig.customer_text_message_email_size_config:type_name -> api.commons.billing.modules.BasicAmountConfig
	6,  // 27: api.commons.billing.DetailConfig.customer_text_message_sms_config:type_name -> api.commons.billing.modules.BasicConfig
	7,  // 28: api.commons.billing.DetailConfig.agent_text_message_chat_size_config:type_name -> api.commons.billing.modules.BasicAmountConfig
	7,  // 29: api.commons.billing.DetailConfig.manager_text_message_chat_size_config:type_name -> api.commons.billing.modules.BasicAmountConfig
	7,  // 30: api.commons.billing.DetailConfig.customer_text_message_chat_size_config:type_name -> api.commons.billing.modules.BasicAmountConfig
	6,  // 31: api.commons.billing.DetailConfig.connected_inbox_created_config:type_name -> api.commons.billing.modules.BasicConfig
	7,  // 32: api.commons.billing.DetailConfig.agent_text_message_sms_size_config:type_name -> api.commons.billing.modules.BasicAmountConfig
	7,  // 33: api.commons.billing.DetailConfig.manager_text_message_sms_size_config:type_name -> api.commons.billing.modules.BasicAmountConfig
	7,  // 34: api.commons.billing.DetailConfig.customer_text_message_sms_size_config:type_name -> api.commons.billing.modules.BasicAmountConfig
	7,  // 35: api.commons.billing.DetailConfig.task_message_sent_sms_size_config:type_name -> api.commons.billing.modules.BasicAmountConfig
	6,  // 36: api.commons.billing.DetailConfig.agent_chat_message_units_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 37: api.commons.billing.DetailConfig.agent_email_message_units_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 38: api.commons.billing.DetailConfig.agent_sms_message_units_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 39: api.commons.billing.DetailConfig.manager_chat_message_units_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 40: api.commons.billing.DetailConfig.manager_email_message_units_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 41: api.commons.billing.DetailConfig.manager_sms_message_units_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 42: api.commons.billing.DetailConfig.customer_chat_message_units_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 43: api.commons.billing.DetailConfig.customer_email_message_units_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 44: api.commons.billing.DetailConfig.customer_sms_message_units_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 45: api.commons.billing.DetailConfig.system_chat_message_units_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 46: api.commons.billing.DetailConfig.system_email_message_units_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 47: api.commons.billing.DetailConfig.system_sms_message_units_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 48: api.commons.billing.DetailConfig.compliance_rnd_query_config:type_name -> api.commons.billing.modules.BasicConfig
	6,  // 49: api.commons.billing.DetailConfig.compliance_rnd_query_cached_config:type_name -> api.commons.billing.modules.BasicConfig
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_api_commons_billing_detail_proto_init() }
func file_api_commons_billing_detail_proto_init() {
	if File_api_commons_billing_detail_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_commons_billing_detail_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_billing_detail_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_billing_detail_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_commons_billing_detail_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*DetailConfig_AgentSeatsConfig)(nil),
		(*DetailConfig_AgentTextMessageChatConfig)(nil),
		(*DetailConfig_AgentTextMessageEmailMessageConfig)(nil),
		(*DetailConfig_AgentTextMessageEmailSizeConfig)(nil),
		(*DetailConfig_AgentTextMessageSmsConfig)(nil),
		(*DetailConfig_TaskMessageSentEmailMessageConfig)(nil),
		(*DetailConfig_TaskMessageSentEmailSizeConfig)(nil),
		(*DetailConfig_TaskMessageSentSmsConfig)(nil),
		(*DetailConfig_ConnectedInboxPollConfig)(nil),
		(*DetailConfig_ManagerTextMessageChatConfig)(nil),
		(*DetailConfig_ManagerTextMessageEmailMessageConfig)(nil),
		(*DetailConfig_ManagerTextMessageEmailSizeConfig)(nil),
		(*DetailConfig_ManagerTextMessageSmsConfig)(nil),
		(*DetailConfig_CustomerTextMessageChatConfig)(nil),
		(*DetailConfig_CustomerTextMessageEmailMessageConfig)(nil),
		(*DetailConfig_CustomerTextMessageEmailSizeConfig)(nil),
		(*DetailConfig_CustomerTextMessageSmsConfig)(nil),
		(*DetailConfig_AgentTextMessageChatSizeConfig)(nil),
		(*DetailConfig_ManagerTextMessageChatSizeConfig)(nil),
		(*DetailConfig_CustomerTextMessageChatSizeConfig)(nil),
		(*DetailConfig_ConnectedInboxCreatedConfig)(nil),
		(*DetailConfig_AgentTextMessageSmsSizeConfig)(nil),
		(*DetailConfig_ManagerTextMessageSmsSizeConfig)(nil),
		(*DetailConfig_CustomerTextMessageSmsSizeConfig)(nil),
		(*DetailConfig_TaskMessageSentSmsSizeConfig)(nil),
		(*DetailConfig_AgentChatMessageUnitsConfig)(nil),
		(*DetailConfig_AgentEmailMessageUnitsConfig)(nil),
		(*DetailConfig_AgentSmsMessageUnitsConfig)(nil),
		(*DetailConfig_ManagerChatMessageUnitsConfig)(nil),
		(*DetailConfig_ManagerEmailMessageUnitsConfig)(nil),
		(*DetailConfig_ManagerSmsMessageUnitsConfig)(nil),
		(*DetailConfig_CustomerChatMessageUnitsConfig)(nil),
		(*DetailConfig_CustomerEmailMessageUnitsConfig)(nil),
		(*DetailConfig_CustomerSmsMessageUnitsConfig)(nil),
		(*DetailConfig_SystemChatMessageUnitsConfig)(nil),
		(*DetailConfig_SystemEmailMessageUnitsConfig)(nil),
		(*DetailConfig_SystemSmsMessageUnitsConfig)(nil),
		(*DetailConfig_ComplianceRndQueryConfig)(nil),
		(*DetailConfig_ComplianceRndQueryCachedConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_billing_detail_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_billing_detail_proto_goTypes,
		DependencyIndexes: file_api_commons_billing_detail_proto_depIdxs,
		EnumInfos:         file_api_commons_billing_detail_proto_enumTypes,
		MessageInfos:      file_api_commons_billing_detail_proto_msgTypes,
	}.Build()
	File_api_commons_billing_detail_proto = out.File
	file_api_commons_billing_detail_proto_rawDesc = nil
	file_api_commons_billing_detail_proto_goTypes = nil
	file_api_commons_billing_detail_proto_depIdxs = nil
}
