// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: api/commons/acd.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ACDStatus int32

const (
	ACDStatus_ACD_UNKNOWN                    ACDStatus = 0    // never used
	ACDStatus_AGENT_SESSION_LOGGING_IN       ACDStatus = 4100 // "AGENT_SESSION_LOGGING_IN", "Agent is logging in"),
	ACDStatus_AGENT_SESSION_LOGGED_IN        ACDStatus = 4110 // "AGENT_SESSION_LOGGED_IN", "Agent is logged in"),
	ACDStatus_AGENT_SESSION_COMPLETED        ACDStatus = 4200 // "AGENT_SESSION_COMPLETED", "Agent Session completed"),
	ACDStatus_AGENT_SESSION_SUMMED           ACDStatus = 4300 // "AGENT_SESSION_SUMMED", "Agent Session Summed"),
	ACDStatus_AGENT_SESSION_ACCOUNTINGEXPORT ACDStatus = 4400 // "AGENT_SESSION_ACCOUNTINGEXPORT", "Agent Session Exported into
)

// Enum value maps for ACDStatus.
var (
	ACDStatus_name = map[int32]string{
		0:    "ACD_UNKNOWN",
		4100: "AGENT_SESSION_LOGGING_IN",
		4110: "AGENT_SESSION_LOGGED_IN",
		4200: "AGENT_SESSION_COMPLETED",
		4300: "AGENT_SESSION_SUMMED",
		4400: "AGENT_SESSION_ACCOUNTINGEXPORT",
	}
	ACDStatus_value = map[string]int32{
		"ACD_UNKNOWN":                    0,
		"AGENT_SESSION_LOGGING_IN":       4100,
		"AGENT_SESSION_LOGGED_IN":        4110,
		"AGENT_SESSION_COMPLETED":        4200,
		"AGENT_SESSION_SUMMED":           4300,
		"AGENT_SESSION_ACCOUNTINGEXPORT": 4400,
	}
)

func (x ACDStatus) Enum() *ACDStatus {
	p := new(ACDStatus)
	*p = x
	return p
}

func (x ACDStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACDStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[0].Descriptor()
}

func (ACDStatus) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[0]
}

func (x ACDStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACDStatus.Descriptor instead.
func (ACDStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{0}
}

type AgentCallLogCallEnded int32

const (
	AgentCallLogCallEnded_AGENT_CANCELLED     AgentCallLogCallEnded = 0
	AgentCallLogCallEnded_CALLER_DISCONNECTED AgentCallLogCallEnded = 1
	AgentCallLogCallEnded_NOT_CONNECTED       AgentCallLogCallEnded = 2
	AgentCallLogCallEnded_AGENT_LOST          AgentCallLogCallEnded = 3
	AgentCallLogCallEnded_AGENT_HANGUP        AgentCallLogCallEnded = 4
	AgentCallLogCallEnded_CALLER_HANGUP       AgentCallLogCallEnded = 5
	AgentCallLogCallEnded_CALL_END_ESTIMATE   AgentCallLogCallEnded = 6
)

// Enum value maps for AgentCallLogCallEnded.
var (
	AgentCallLogCallEnded_name = map[int32]string{
		0: "AGENT_CANCELLED",
		1: "CALLER_DISCONNECTED",
		2: "NOT_CONNECTED",
		3: "AGENT_LOST",
		4: "AGENT_HANGUP",
		5: "CALLER_HANGUP",
		6: "CALL_END_ESTIMATE",
	}
	AgentCallLogCallEnded_value = map[string]int32{
		"AGENT_CANCELLED":     0,
		"CALLER_DISCONNECTED": 1,
		"NOT_CONNECTED":       2,
		"AGENT_LOST":          3,
		"AGENT_HANGUP":        4,
		"CALLER_HANGUP":       5,
		"CALL_END_ESTIMATE":   6,
	}
)

func (x AgentCallLogCallEnded) Enum() *AgentCallLogCallEnded {
	p := new(AgentCallLogCallEnded)
	*p = x
	return p
}

func (x AgentCallLogCallEnded) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentCallLogCallEnded) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[1].Descriptor()
}

func (AgentCallLogCallEnded) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[1]
}

func (x AgentCallLogCallEnded) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentCallLogCallEnded.Descriptor instead.
func (AgentCallLogCallEnded) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{1}
}

type HoldType int32

const (
	HoldType_UNKNOWN HoldType = 0
	HoldType_SIMPLE  HoldType = 1
	HoldType_MULTI   HoldType = 2
)

// Enum value maps for HoldType.
var (
	HoldType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SIMPLE",
		2: "MULTI",
	}
	HoldType_value = map[string]int32{
		"UNKNOWN": 0,
		"SIMPLE":  1,
		"MULTI":   2,
	}
)

func (x HoldType) Enum() *HoldType {
	p := new(HoldType)
	*p = x
	return p
}

func (x HoldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HoldType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[2].Descriptor()
}

func (HoldType) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[2]
}

func (x HoldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HoldType.Descriptor instead.
func (HoldType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{2}
}

// Queued notification type definition that's going to be used by the ACD client to determine
// the notification type of the queued call
type QueuedNotificationType int32

const (
	// does not have PBX Skill, doesn't have an Agent Skill, and isn't requeued
	QueuedNotificationType_QueuedNotificationType_GENERAL_INITIAL QueuedNotificationType = 0
	// a call with the PBX skill
	QueuedNotificationType_QueuedNotificationType_PBX_INITIAL QueuedNotificationType = 1
	// A call that has an agent specific call and has been isn't requeued
	QueuedNotificationType_QueuedNotificationType_AGENT_BOUND_INITIAL QueuedNotificationType = 2
	// A call that been requeued
	QueuedNotificationType_QueuedNotificationType_GENERAL_REQUEUED QueuedNotificationType = 3
	// A call that has an agent specific call and has been requeued
	QueuedNotificationType_QueuedNotificationType_AGENT_BOUND_REQUEUED QueuedNotificationType = 4
)

// Enum value maps for QueuedNotificationType.
var (
	QueuedNotificationType_name = map[int32]string{
		0: "QueuedNotificationType_GENERAL_INITIAL",
		1: "QueuedNotificationType_PBX_INITIAL",
		2: "QueuedNotificationType_AGENT_BOUND_INITIAL",
		3: "QueuedNotificationType_GENERAL_REQUEUED",
		4: "QueuedNotificationType_AGENT_BOUND_REQUEUED",
	}
	QueuedNotificationType_value = map[string]int32{
		"QueuedNotificationType_GENERAL_INITIAL":      0,
		"QueuedNotificationType_PBX_INITIAL":          1,
		"QueuedNotificationType_AGENT_BOUND_INITIAL":  2,
		"QueuedNotificationType_GENERAL_REQUEUED":     3,
		"QueuedNotificationType_AGENT_BOUND_REQUEUED": 4,
	}
)

func (x QueuedNotificationType) Enum() *QueuedNotificationType {
	p := new(QueuedNotificationType)
	*p = x
	return p
}

func (x QueuedNotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueuedNotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[3].Descriptor()
}

func (QueuedNotificationType) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[3]
}

func (x QueuedNotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueuedNotificationType.Descriptor instead.
func (QueuedNotificationType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{3}
}

type TransferMemberType int32

const (
	TransferMemberType_TransferMemberType_AGENT    TransferMemberType = 0
	TransferMemberType_TransferMemberType_CALLER   TransferMemberType = 1
	TransferMemberType_TransferMemberType_OUTBOUND TransferMemberType = 2
)

// Enum value maps for TransferMemberType.
var (
	TransferMemberType_name = map[int32]string{
		0: "TransferMemberType_AGENT",
		1: "TransferMemberType_CALLER",
		2: "TransferMemberType_OUTBOUND",
	}
	TransferMemberType_value = map[string]int32{
		"TransferMemberType_AGENT":    0,
		"TransferMemberType_CALLER":   1,
		"TransferMemberType_OUTBOUND": 2,
	}
)

func (x TransferMemberType) Enum() *TransferMemberType {
	p := new(TransferMemberType)
	*p = x
	return p
}

func (x TransferMemberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferMemberType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[4].Descriptor()
}

func (TransferMemberType) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[4]
}

func (x TransferMemberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferMemberType.Descriptor instead.
func (TransferMemberType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{4}
}

// enum used to represent a dtmf tone
type DTMFDigit int32

const (
	DTMFDigit_DTMFDigit_0     DTMFDigit = 0
	DTMFDigit_DTMFDigit_1     DTMFDigit = 1
	DTMFDigit_DTMFDigit_2     DTMFDigit = 2
	DTMFDigit_DTMFDigit_3     DTMFDigit = 3
	DTMFDigit_DTMFDigit_4     DTMFDigit = 4
	DTMFDigit_DTMFDigit_5     DTMFDigit = 5
	DTMFDigit_DTMFDigit_6     DTMFDigit = 6
	DTMFDigit_DTMFDigit_7     DTMFDigit = 7
	DTMFDigit_DTMFDigit_8     DTMFDigit = 8
	DTMFDigit_DTMFDigit_9     DTMFDigit = 9
	DTMFDigit_DTMFDigit_A     DTMFDigit = 10
	DTMFDigit_DTMFDigit_B     DTMFDigit = 11
	DTMFDigit_DTMFDigit_C     DTMFDigit = 12
	DTMFDigit_DTMFDigit_D     DTMFDigit = 13
	DTMFDigit_DTMFDigit_STAR  DTMFDigit = 14
	DTMFDigit_DTMFDigit_POUND DTMFDigit = 15
)

// Enum value maps for DTMFDigit.
var (
	DTMFDigit_name = map[int32]string{
		0:  "DTMFDigit_0",
		1:  "DTMFDigit_1",
		2:  "DTMFDigit_2",
		3:  "DTMFDigit_3",
		4:  "DTMFDigit_4",
		5:  "DTMFDigit_5",
		6:  "DTMFDigit_6",
		7:  "DTMFDigit_7",
		8:  "DTMFDigit_8",
		9:  "DTMFDigit_9",
		10: "DTMFDigit_A",
		11: "DTMFDigit_B",
		12: "DTMFDigit_C",
		13: "DTMFDigit_D",
		14: "DTMFDigit_STAR",
		15: "DTMFDigit_POUND",
	}
	DTMFDigit_value = map[string]int32{
		"DTMFDigit_0":     0,
		"DTMFDigit_1":     1,
		"DTMFDigit_2":     2,
		"DTMFDigit_3":     3,
		"DTMFDigit_4":     4,
		"DTMFDigit_5":     5,
		"DTMFDigit_6":     6,
		"DTMFDigit_7":     7,
		"DTMFDigit_8":     8,
		"DTMFDigit_9":     9,
		"DTMFDigit_A":     10,
		"DTMFDigit_B":     11,
		"DTMFDigit_C":     12,
		"DTMFDigit_D":     13,
		"DTMFDigit_STAR":  14,
		"DTMFDigit_POUND": 15,
	}
)

func (x DTMFDigit) Enum() *DTMFDigit {
	p := new(DTMFDigit)
	*p = x
	return p
}

func (x DTMFDigit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DTMFDigit) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[5].Descriptor()
}

func (DTMFDigit) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[5]
}

func (x DTMFDigit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DTMFDigit.Descriptor instead.
func (DTMFDigit) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{5}
}

type AgentStatus_Enum int32

const (
	AgentStatus_UNAVALIABLE                             AgentStatus_Enum = 0
	AgentStatus_IDLE                                    AgentStatus_Enum = 1
	AgentStatus_READY                                   AgentStatus_Enum = 2
	AgentStatus_HUNGUP                                  AgentStatus_Enum = 3
	AgentStatus_DESTROYED                               AgentStatus_Enum = 4
	AgentStatus_PEERED                                  AgentStatus_Enum = 5
	AgentStatus_PAUSED                                  AgentStatus_Enum = 6
	AgentStatus_WRAPUP                                  AgentStatus_Enum = 7
	AgentStatus_PREPARING_AFTER_IDLE                    AgentStatus_Enum = 8
	AgentStatus_PREPARING_AFTER_WRAPUP                  AgentStatus_Enum = 9
	AgentStatus_PREPARING_AFTER_PAUSE                   AgentStatus_Enum = 10
	AgentStatus_PREPARING_AFTER_DIAL_CANCEL             AgentStatus_Enum = 11
	AgentStatus_PREPARING_AFTER_PBX_REJECT              AgentStatus_Enum = 12
	AgentStatus_PREPARING_AFTER_PBX_HANGUP              AgentStatus_Enum = 13
	AgentStatus_PREPARING_AFTER_PBX_WAS_TAKEN           AgentStatus_Enum = 14
	AgentStatus_PREPARING_AFTER_GUI_BUSY                AgentStatus_Enum = 15
	AgentStatus_MANUAL_DIAL_PREPARED                    AgentStatus_Enum = 16
	AgentStatus_PREVIEW_DIAL_PREPARED                   AgentStatus_Enum = 17
	AgentStatus_MANUAL_DIAL_STARTED                     AgentStatus_Enum = 18
	AgentStatus_PREVIEW_DIAL_STARTED                    AgentStatus_Enum = 19
	AgentStatus_OUTBOUND_LOCKED                         AgentStatus_Enum = 20
	AgentStatus_WARM_AGENT_TRANSFER_STARTED_SOURCE      AgentStatus_Enum = 21
	AgentStatus_WARM_AGENT_TRANSFER_STARTED_DESTINATION AgentStatus_Enum = 22
	AgentStatus_WARM_OUTBOUND_TRANSFER_STARTED          AgentStatus_Enum = 23
	AgentStatus_WARM_OUTBOUND_TRANSFER_PEER_LOST        AgentStatus_Enum = 24
	AgentStatus_PBX_POPUP_LOCKED                        AgentStatus_Enum = 25
	AgentStatus_PEERED_WITH_CALL_ON_HOLD                AgentStatus_Enum = 26
	AgentStatus_CALLBACK_RESUMING                       AgentStatus_Enum = 27
	AgentStatus_GUI_BUSY                                AgentStatus_Enum = 28
	AgentStatus_INTERCOM                                AgentStatus_Enum = 29
	AgentStatus_INTERCOM_RINGING_SOURCE                 AgentStatus_Enum = 30
	AgentStatus_INTERCOM_RINGING_DESTINATION            AgentStatus_Enum = 31
	AgentStatus_WARM_OUTBOUND_TRANSFER_OUTBOUND_LOST    AgentStatus_Enum = 32
	AgentStatus_PREPARED_TO_PEER                        AgentStatus_Enum = 33
	AgentStatus_WARM_SKILL_TRANSFER_SOURCE_PENDING      AgentStatus_Enum = 34
	// when the transfer has started
	AgentStatus_CALLER_TRANSFER_STARTED AgentStatus_Enum = 35
	// when the transfer is running and the peer hangs up
	AgentStatus_CALLER_TRANSFER_LOST_PEER AgentStatus_Enum = 36
	// when the transfer is running and the dest caller hangs up
	AgentStatus_CALLER_TRANSFER_LOST_MERGED_CALLER AgentStatus_Enum = 37
	// interim state for cold outbound transfer
	AgentStatus_COLD_OUTBOUND_TRANSFER_STARTED AgentStatus_Enum = 38
	// interim state for cold agent transfer
	AgentStatus_COLD_AGENT_TRANSFER_STARTED AgentStatus_Enum = 39
)

// Enum value maps for AgentStatus_Enum.
var (
	AgentStatus_Enum_name = map[int32]string{
		0:  "UNAVALIABLE",
		1:  "IDLE",
		2:  "READY",
		3:  "HUNGUP",
		4:  "DESTROYED",
		5:  "PEERED",
		6:  "PAUSED",
		7:  "WRAPUP",
		8:  "PREPARING_AFTER_IDLE",
		9:  "PREPARING_AFTER_WRAPUP",
		10: "PREPARING_AFTER_PAUSE",
		11: "PREPARING_AFTER_DIAL_CANCEL",
		12: "PREPARING_AFTER_PBX_REJECT",
		13: "PREPARING_AFTER_PBX_HANGUP",
		14: "PREPARING_AFTER_PBX_WAS_TAKEN",
		15: "PREPARING_AFTER_GUI_BUSY",
		16: "MANUAL_DIAL_PREPARED",
		17: "PREVIEW_DIAL_PREPARED",
		18: "MANUAL_DIAL_STARTED",
		19: "PREVIEW_DIAL_STARTED",
		20: "OUTBOUND_LOCKED",
		21: "WARM_AGENT_TRANSFER_STARTED_SOURCE",
		22: "WARM_AGENT_TRANSFER_STARTED_DESTINATION",
		23: "WARM_OUTBOUND_TRANSFER_STARTED",
		24: "WARM_OUTBOUND_TRANSFER_PEER_LOST",
		25: "PBX_POPUP_LOCKED",
		26: "PEERED_WITH_CALL_ON_HOLD",
		27: "CALLBACK_RESUMING",
		28: "GUI_BUSY",
		29: "INTERCOM",
		30: "INTERCOM_RINGING_SOURCE",
		31: "INTERCOM_RINGING_DESTINATION",
		32: "WARM_OUTBOUND_TRANSFER_OUTBOUND_LOST",
		33: "PREPARED_TO_PEER",
		34: "WARM_SKILL_TRANSFER_SOURCE_PENDING",
		35: "CALLER_TRANSFER_STARTED",
		36: "CALLER_TRANSFER_LOST_PEER",
		37: "CALLER_TRANSFER_LOST_MERGED_CALLER",
		38: "COLD_OUTBOUND_TRANSFER_STARTED",
		39: "COLD_AGENT_TRANSFER_STARTED",
	}
	AgentStatus_Enum_value = map[string]int32{
		"UNAVALIABLE":                             0,
		"IDLE":                                    1,
		"READY":                                   2,
		"HUNGUP":                                  3,
		"DESTROYED":                               4,
		"PEERED":                                  5,
		"PAUSED":                                  6,
		"WRAPUP":                                  7,
		"PREPARING_AFTER_IDLE":                    8,
		"PREPARING_AFTER_WRAPUP":                  9,
		"PREPARING_AFTER_PAUSE":                   10,
		"PREPARING_AFTER_DIAL_CANCEL":             11,
		"PREPARING_AFTER_PBX_REJECT":              12,
		"PREPARING_AFTER_PBX_HANGUP":              13,
		"PREPARING_AFTER_PBX_WAS_TAKEN":           14,
		"PREPARING_AFTER_GUI_BUSY":                15,
		"MANUAL_DIAL_PREPARED":                    16,
		"PREVIEW_DIAL_PREPARED":                   17,
		"MANUAL_DIAL_STARTED":                     18,
		"PREVIEW_DIAL_STARTED":                    19,
		"OUTBOUND_LOCKED":                         20,
		"WARM_AGENT_TRANSFER_STARTED_SOURCE":      21,
		"WARM_AGENT_TRANSFER_STARTED_DESTINATION": 22,
		"WARM_OUTBOUND_TRANSFER_STARTED":          23,
		"WARM_OUTBOUND_TRANSFER_PEER_LOST":        24,
		"PBX_POPUP_LOCKED":                        25,
		"PEERED_WITH_CALL_ON_HOLD":                26,
		"CALLBACK_RESUMING":                       27,
		"GUI_BUSY":                                28,
		"INTERCOM":                                29,
		"INTERCOM_RINGING_SOURCE":                 30,
		"INTERCOM_RINGING_DESTINATION":            31,
		"WARM_OUTBOUND_TRANSFER_OUTBOUND_LOST":    32,
		"PREPARED_TO_PEER":                        33,
		"WARM_SKILL_TRANSFER_SOURCE_PENDING":      34,
		"CALLER_TRANSFER_STARTED":                 35,
		"CALLER_TRANSFER_LOST_PEER":               36,
		"CALLER_TRANSFER_LOST_MERGED_CALLER":      37,
		"COLD_OUTBOUND_TRANSFER_STARTED":          38,
		"COLD_AGENT_TRANSFER_STARTED":             39,
	}
)

func (x AgentStatus_Enum) Enum() *AgentStatus_Enum {
	p := new(AgentStatus_Enum)
	*p = x
	return p
}

func (x AgentStatus_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentStatus_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[6].Descriptor()
}

func (AgentStatus_Enum) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[6]
}

func (x AgentStatus_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentStatus_Enum.Descriptor instead.
func (AgentStatus_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{2, 0}
}

type CallerStatus_Enum int32

const (
	CallerStatus_UNAVALIABLE                    CallerStatus_Enum = 0
	CallerStatus_IDLE                           CallerStatus_Enum = 1
	CallerStatus_READY                          CallerStatus_Enum = 2
	CallerStatus_HUNGUP                         CallerStatus_Enum = 3
	CallerStatus_DESTROYED                      CallerStatus_Enum = 4
	CallerStatus_PEERED                         CallerStatus_Enum = 5
	CallerStatus_OUTBOUND_LOCKED                CallerStatus_Enum = 6
	CallerStatus_OUTBOUND_PEERED                CallerStatus_Enum = 7
	CallerStatus_PBX_POPUP_LOCKED               CallerStatus_Enum = 8
	CallerStatus_VOICEMAIL                      CallerStatus_Enum = 9
	CallerStatus_PEERED_WITH_CALL_ON_HOLD       CallerStatus_Enum = 10
	CallerStatus_CALLBACK_SUSPENDED             CallerStatus_Enum = 11
	CallerStatus_WARM_AGENT_TRANSFER_STARTED    CallerStatus_Enum = 12
	CallerStatus_WARM_OUTBOUND_TRANSFER_STARTED CallerStatus_Enum = 13
	CallerStatus_OUTBOUND_DIAL_TRANSFER_STARTED CallerStatus_Enum = 14
	CallerStatus_PREPARED_TO_PEER               CallerStatus_Enum = 15
	CallerStatus_WARM_SKILL_TRANSFER_PENDING    CallerStatus_Enum = 16
	// when the transfer starts for the peer
	CallerStatus_CALLER_TRANSFER_PEER CallerStatus_Enum = 17
	// when the transfer starts for the destination caller
	CallerStatus_CALLER_TRANSFER_MERGED_CALLER CallerStatus_Enum = 18
	// when the transfer is accepted and the agent leaves the transfer
	CallerStatus_CALLER_PEERED CallerStatus_Enum = 19
)

// Enum value maps for CallerStatus_Enum.
var (
	CallerStatus_Enum_name = map[int32]string{
		0:  "UNAVALIABLE",
		1:  "IDLE",
		2:  "READY",
		3:  "HUNGUP",
		4:  "DESTROYED",
		5:  "PEERED",
		6:  "OUTBOUND_LOCKED",
		7:  "OUTBOUND_PEERED",
		8:  "PBX_POPUP_LOCKED",
		9:  "VOICEMAIL",
		10: "PEERED_WITH_CALL_ON_HOLD",
		11: "CALLBACK_SUSPENDED",
		12: "WARM_AGENT_TRANSFER_STARTED",
		13: "WARM_OUTBOUND_TRANSFER_STARTED",
		14: "OUTBOUND_DIAL_TRANSFER_STARTED",
		15: "PREPARED_TO_PEER",
		16: "WARM_SKILL_TRANSFER_PENDING",
		17: "CALLER_TRANSFER_PEER",
		18: "CALLER_TRANSFER_MERGED_CALLER",
		19: "CALLER_PEERED",
	}
	CallerStatus_Enum_value = map[string]int32{
		"UNAVALIABLE":                    0,
		"IDLE":                           1,
		"READY":                          2,
		"HUNGUP":                         3,
		"DESTROYED":                      4,
		"PEERED":                         5,
		"OUTBOUND_LOCKED":                6,
		"OUTBOUND_PEERED":                7,
		"PBX_POPUP_LOCKED":               8,
		"VOICEMAIL":                      9,
		"PEERED_WITH_CALL_ON_HOLD":       10,
		"CALLBACK_SUSPENDED":             11,
		"WARM_AGENT_TRANSFER_STARTED":    12,
		"WARM_OUTBOUND_TRANSFER_STARTED": 13,
		"OUTBOUND_DIAL_TRANSFER_STARTED": 14,
		"PREPARED_TO_PEER":               15,
		"WARM_SKILL_TRANSFER_PENDING":    16,
		"CALLER_TRANSFER_PEER":           17,
		"CALLER_TRANSFER_MERGED_CALLER":  18,
		"CALLER_PEERED":                  19,
	}
)

func (x CallerStatus_Enum) Enum() *CallerStatus_Enum {
	p := new(CallerStatus_Enum)
	*p = x
	return p
}

func (x CallerStatus_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallerStatus_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[7].Descriptor()
}

func (CallerStatus_Enum) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[7]
}

func (x CallerStatus_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallerStatus_Enum.Descriptor instead.
func (CallerStatus_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{3, 0}
}

type CallType_Enum int32

const (
	// INBOUND should be default
	CallType_INBOUND  CallType_Enum = 0
	CallType_OUTBOUND CallType_Enum = 1
	CallType_PREVIEW  CallType_Enum = 2
	CallType_MANUAL   CallType_Enum = 3
	CallType_MAC      CallType_Enum = 4
)

// Enum value maps for CallType_Enum.
var (
	CallType_Enum_name = map[int32]string{
		0: "INBOUND",
		1: "OUTBOUND",
		2: "PREVIEW",
		3: "MANUAL",
		4: "MAC",
	}
	CallType_Enum_value = map[string]int32{
		"INBOUND":  0,
		"OUTBOUND": 1,
		"PREVIEW":  2,
		"MANUAL":   3,
		"MAC":      4,
	}
)

func (x CallType_Enum) Enum() *CallType_Enum {
	p := new(CallType_Enum)
	*p = x
	return p
}

func (x CallType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[8].Descriptor()
}

func (CallType_Enum) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[8]
}

func (x CallType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallType_Enum.Descriptor instead.
func (CallType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{4, 0}
}

type AgentDialIn_Enum int32

const (
	AgentDialIn_TOLL_FREE AgentDialIn_Enum = 0
	AgentDialIn_SOFTPHONE AgentDialIn_Enum = 1
	AgentDialIn_LOCAL     AgentDialIn_Enum = 2
)

// Enum value maps for AgentDialIn_Enum.
var (
	AgentDialIn_Enum_name = map[int32]string{
		0: "TOLL_FREE",
		1: "SOFTPHONE",
		2: "LOCAL",
	}
	AgentDialIn_Enum_value = map[string]int32{
		"TOLL_FREE": 0,
		"SOFTPHONE": 1,
		"LOCAL":     2,
	}
)

func (x AgentDialIn_Enum) Enum() *AgentDialIn_Enum {
	p := new(AgentDialIn_Enum)
	*p = x
	return p
}

func (x AgentDialIn_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentDialIn_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[9].Descriptor()
}

func (AgentDialIn_Enum) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[9]
}

func (x AgentDialIn_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentDialIn_Enum.Descriptor instead.
func (AgentDialIn_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{5, 0}
}

type HuntGroupType_Enum int32

const (
	HuntGroupType_UNCONNECTED HuntGroupType_Enum = 0
	HuntGroupType_CONNECTED   HuntGroupType_Enum = 1
	HuntGroupType_SOFTPHONE   HuntGroupType_Enum = 2
)

// Enum value maps for HuntGroupType_Enum.
var (
	HuntGroupType_Enum_name = map[int32]string{
		0: "UNCONNECTED",
		1: "CONNECTED",
		2: "SOFTPHONE",
	}
	HuntGroupType_Enum_value = map[string]int32{
		"UNCONNECTED": 0,
		"CONNECTED":   1,
		"SOFTPHONE":   2,
	}
)

func (x HuntGroupType_Enum) Enum() *HuntGroupType_Enum {
	p := new(HuntGroupType_Enum)
	*p = x
	return p
}

func (x HuntGroupType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HuntGroupType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[10].Descriptor()
}

func (HuntGroupType_Enum) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[10]
}

func (x HuntGroupType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HuntGroupType_Enum.Descriptor instead.
func (HuntGroupType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{6, 0}
}

type AgentSessionLogActionKey_Enum int32

const (
	// FRONTEND ENUMS
	AgentSessionLogActionKey_AGENT_PAUSE_START         AgentSessionLogActionKey_Enum = 0
	AgentSessionLogActionKey_AGENT_PAUSE_STOP          AgentSessionLogActionKey_Enum = 1
	AgentSessionLogActionKey_AGENT_SKILLS_INITIAL      AgentSessionLogActionKey_Enum = 2
	AgentSessionLogActionKey_AGENT_LOGOUT              AgentSessionLogActionKey_Enum = 3
	AgentSessionLogActionKey_EXECUTED_AGENT_TRIGGER    AgentSessionLogActionKey_Enum = 4
	AgentSessionLogActionKey_DURATION_SINCE_LAST_LOGON AgentSessionLogActionKey_Enum = 5
	AgentSessionLogActionKey_AGENT_LOGIN_IP            AgentSessionLogActionKey_Enum = 6
	AgentSessionLogActionKey_MAC_DECISION              AgentSessionLogActionKey_Enum = 7
	AgentSessionLogActionKey_MAC_10_KEY_DECISION       AgentSessionLogActionKey_Enum = 8
	AgentSessionLogActionKey_MAC_10_KEY_CONFIRM        AgentSessionLogActionKey_Enum = 9
	AgentSessionLogActionKey_HUNT_GROUP_REASSIGNMENT   AgentSessionLogActionKey_Enum = 10
	// PBX
	AgentSessionLogActionKey_PBX_ACCEPT  AgentSessionLogActionKey_Enum = 11
	AgentSessionLogActionKey_PBX_HANGUP  AgentSessionLogActionKey_Enum = 12
	AgentSessionLogActionKey_PBX_LOST    AgentSessionLogActionKey_Enum = 13
	AgentSessionLogActionKey_PBX_REJECT  AgentSessionLogActionKey_Enum = 14
	AgentSessionLogActionKey_PBX_TIMEOUT AgentSessionLogActionKey_Enum = 15
	// WARM AGENT TRANSFER
	AgentSessionLogActionKey_WARM_TRANSFER_AGENT_INVITE_CALLER_INITIAL AgentSessionLogActionKey_Enum = 16
	AgentSessionLogActionKey_WARM_TRANSFER_AGENT_INVITE_CALLER         AgentSessionLogActionKey_Enum = 17
	AgentSessionLogActionKey_WARM_TRANSFER_AGENT_START_SOURCE          AgentSessionLogActionKey_Enum = 18
	AgentSessionLogActionKey_WARM_TRANSFER_AGENT_END_SOURCE            AgentSessionLogActionKey_Enum = 19
	AgentSessionLogActionKey_WARM_TRANSFER_AGENT_START_DESTINATION     AgentSessionLogActionKey_Enum = 20
	AgentSessionLogActionKey_WARM_TRANSFER_AGENT_END_DESTINATION       AgentSessionLogActionKey_Enum = 21
	// WARM OUTBOUND TRANSFER
	AgentSessionLogActionKey_WARM_TRANSFER_OUTBOUND_INVITE_CALLER_INITIAL AgentSessionLogActionKey_Enum = 22
	AgentSessionLogActionKey_WARM_TRANSFER_OUTBOUND_INVITE_CALLER         AgentSessionLogActionKey_Enum = 23
	AgentSessionLogActionKey_WARM_TRANSFER_OUTBOUND_START                 AgentSessionLogActionKey_Enum = 24
	AgentSessionLogActionKey_WARM_TRANSFER_OUTBOUND_END                   AgentSessionLogActionKey_Enum = 25
	// COLD OUTBOUND TRANSFER
	AgentSessionLogActionKey_COLD_TRANSFER_OUTBOUND_START AgentSessionLogActionKey_Enum = 26
	// COLD AGENT TRANSFER
	AgentSessionLogActionKey_COLD_TRANSFER_AGENT_START_SOURCE      AgentSessionLogActionKey_Enum = 27
	AgentSessionLogActionKey_COLD_TRANSFER_AGENT_END_SOURCE        AgentSessionLogActionKey_Enum = 28
	AgentSessionLogActionKey_COLD_TRANSFER_AGENT_START_DESTINATION AgentSessionLogActionKey_Enum = 29
	AgentSessionLogActionKey_COLD_TRANSFER_AGENT_END_DESTINATION   AgentSessionLogActionKey_Enum = 30
	// HOLD
	AgentSessionLogActionKey_HOLD_START AgentSessionLogActionKey_Enum = 31
	AgentSessionLogActionKey_HOLD_END   AgentSessionLogActionKey_Enum = 32
	// QUEUE
	AgentSessionLogActionKey_REQUEUE AgentSessionLogActionKey_Enum = 33
	// VOICEMAIL
	AgentSessionLogActionKey_CALLER_SENT_TO_VOICEMAIL AgentSessionLogActionKey_Enum = 34
	// RECORDING
	AgentSessionLogActionKey_RECORDING_START AgentSessionLogActionKey_Enum = 35
	AgentSessionLogActionKey_RECORDING_STOP  AgentSessionLogActionKey_Enum = 36
	// PREVIEW BY RECORD
	AgentSessionLogActionKey_PBR_STARTED_RECORD  AgentSessionLogActionKey_Enum = 37
	AgentSessionLogActionKey_PBR_FINISHED_RECORD AgentSessionLogActionKey_Enum = 38
	// ACD ENUMS
	AgentSessionLogActionKey_ACD_LOGOUT   AgentSessionLogActionKey_Enum = 39
	AgentSessionLogActionKey_ACD_REGISTER AgentSessionLogActionKey_Enum = 40
	// FRONTEND WEBLINK ENUM
	AgentSessionLogActionKey_EXECUTED_AGENT_WEBLINK AgentSessionLogActionKey_Enum = 41
	// Transfer Hold and Unhold
	AgentSessionLogActionKey_TRANSFER_HOLD_CALLER     AgentSessionLogActionKey_Enum = 42
	AgentSessionLogActionKey_TRANSFER_UNHOLD_CALLER   AgentSessionLogActionKey_Enum = 43
	AgentSessionLogActionKey_TRANSFER_HOLD_AGENT      AgentSessionLogActionKey_Enum = 44
	AgentSessionLogActionKey_TRANSFER_UNHOLD_AGENT    AgentSessionLogActionKey_Enum = 45
	AgentSessionLogActionKey_TRANSFER_HOLD            AgentSessionLogActionKey_Enum = 46
	AgentSessionLogActionKey_TRANSFER_UNHOLD          AgentSessionLogActionKey_Enum = 47
	AgentSessionLogActionKey_TRANSFER_HOLD_OUTBOUND   AgentSessionLogActionKey_Enum = 48
	AgentSessionLogActionKey_TRANSFER_UNHOLD_OUTBOUND AgentSessionLogActionKey_Enum = 49
	// Transfer Add and Remove
	AgentSessionLogActionKey_TRANSFER_ADD_OUTBOUND    AgentSessionLogActionKey_Enum = 50
	AgentSessionLogActionKey_TRANSFER_REMOVE_OUTBOUND AgentSessionLogActionKey_Enum = 51
	// when the transfer starts for the agent
	AgentSessionLogActionKey_WARM_CALLER_TRANSFER_START AgentSessionLogActionKey_Enum = 52
	// when the transfer starts and the source caller is not on hold
	AgentSessionLogActionKey_WARM_CALLER_TRANSFER_INVITE_CALLER_INITIAL AgentSessionLogActionKey_Enum = 53
	// when during transfer and the source caller is taken of hold
	AgentSessionLogActionKey_WARM_CALLER_TRANSFER_INVITE_CALLER AgentSessionLogActionKey_Enum = 54
	// when the transfer ends
	AgentSessionLogActionKey_WARM_CALLER_TRANSFER_END AgentSessionLogActionKey_Enum = 55
	// when a manager starts a barge in
	AgentSessionLogActionKey_BARGE_IN_START AgentSessionLogActionKey_Enum = 56
	// when a manager stops a barge in
	AgentSessionLogActionKey_BARGE_IN_STOP AgentSessionLogActionKey_Enum = 57
	// when a manager joins a barge in
	AgentSessionLogActionKey_BargeInCallJoined AgentSessionLogActionKey_Enum = 58
	// when a manager leaves a barge in
	AgentSessionLogActionKey_BargeInCallLeft AgentSessionLogActionKey_Enum = 59
)

// Enum value maps for AgentSessionLogActionKey_Enum.
var (
	AgentSessionLogActionKey_Enum_name = map[int32]string{
		0:  "AGENT_PAUSE_START",
		1:  "AGENT_PAUSE_STOP",
		2:  "AGENT_SKILLS_INITIAL",
		3:  "AGENT_LOGOUT",
		4:  "EXECUTED_AGENT_TRIGGER",
		5:  "DURATION_SINCE_LAST_LOGON",
		6:  "AGENT_LOGIN_IP",
		7:  "MAC_DECISION",
		8:  "MAC_10_KEY_DECISION",
		9:  "MAC_10_KEY_CONFIRM",
		10: "HUNT_GROUP_REASSIGNMENT",
		11: "PBX_ACCEPT",
		12: "PBX_HANGUP",
		13: "PBX_LOST",
		14: "PBX_REJECT",
		15: "PBX_TIMEOUT",
		16: "WARM_TRANSFER_AGENT_INVITE_CALLER_INITIAL",
		17: "WARM_TRANSFER_AGENT_INVITE_CALLER",
		18: "WARM_TRANSFER_AGENT_START_SOURCE",
		19: "WARM_TRANSFER_AGENT_END_SOURCE",
		20: "WARM_TRANSFER_AGENT_START_DESTINATION",
		21: "WARM_TRANSFER_AGENT_END_DESTINATION",
		22: "WARM_TRANSFER_OUTBOUND_INVITE_CALLER_INITIAL",
		23: "WARM_TRANSFER_OUTBOUND_INVITE_CALLER",
		24: "WARM_TRANSFER_OUTBOUND_START",
		25: "WARM_TRANSFER_OUTBOUND_END",
		26: "COLD_TRANSFER_OUTBOUND_START",
		27: "COLD_TRANSFER_AGENT_START_SOURCE",
		28: "COLD_TRANSFER_AGENT_END_SOURCE",
		29: "COLD_TRANSFER_AGENT_START_DESTINATION",
		30: "COLD_TRANSFER_AGENT_END_DESTINATION",
		31: "HOLD_START",
		32: "HOLD_END",
		33: "REQUEUE",
		34: "CALLER_SENT_TO_VOICEMAIL",
		35: "RECORDING_START",
		36: "RECORDING_STOP",
		37: "PBR_STARTED_RECORD",
		38: "PBR_FINISHED_RECORD",
		39: "ACD_LOGOUT",
		40: "ACD_REGISTER",
		41: "EXECUTED_AGENT_WEBLINK",
		42: "TRANSFER_HOLD_CALLER",
		43: "TRANSFER_UNHOLD_CALLER",
		44: "TRANSFER_HOLD_AGENT",
		45: "TRANSFER_UNHOLD_AGENT",
		46: "TRANSFER_HOLD",
		47: "TRANSFER_UNHOLD",
		48: "TRANSFER_HOLD_OUTBOUND",
		49: "TRANSFER_UNHOLD_OUTBOUND",
		50: "TRANSFER_ADD_OUTBOUND",
		51: "TRANSFER_REMOVE_OUTBOUND",
		52: "WARM_CALLER_TRANSFER_START",
		53: "WARM_CALLER_TRANSFER_INVITE_CALLER_INITIAL",
		54: "WARM_CALLER_TRANSFER_INVITE_CALLER",
		55: "WARM_CALLER_TRANSFER_END",
		56: "BARGE_IN_START",
		57: "BARGE_IN_STOP",
		58: "BargeInCallJoined",
		59: "BargeInCallLeft",
	}
	AgentSessionLogActionKey_Enum_value = map[string]int32{
		"AGENT_PAUSE_START":         0,
		"AGENT_PAUSE_STOP":          1,
		"AGENT_SKILLS_INITIAL":      2,
		"AGENT_LOGOUT":              3,
		"EXECUTED_AGENT_TRIGGER":    4,
		"DURATION_SINCE_LAST_LOGON": 5,
		"AGENT_LOGIN_IP":            6,
		"MAC_DECISION":              7,
		"MAC_10_KEY_DECISION":       8,
		"MAC_10_KEY_CONFIRM":        9,
		"HUNT_GROUP_REASSIGNMENT":   10,
		"PBX_ACCEPT":                11,
		"PBX_HANGUP":                12,
		"PBX_LOST":                  13,
		"PBX_REJECT":                14,
		"PBX_TIMEOUT":               15,
		"WARM_TRANSFER_AGENT_INVITE_CALLER_INITIAL":    16,
		"WARM_TRANSFER_AGENT_INVITE_CALLER":            17,
		"WARM_TRANSFER_AGENT_START_SOURCE":             18,
		"WARM_TRANSFER_AGENT_END_SOURCE":               19,
		"WARM_TRANSFER_AGENT_START_DESTINATION":        20,
		"WARM_TRANSFER_AGENT_END_DESTINATION":          21,
		"WARM_TRANSFER_OUTBOUND_INVITE_CALLER_INITIAL": 22,
		"WARM_TRANSFER_OUTBOUND_INVITE_CALLER":         23,
		"WARM_TRANSFER_OUTBOUND_START":                 24,
		"WARM_TRANSFER_OUTBOUND_END":                   25,
		"COLD_TRANSFER_OUTBOUND_START":                 26,
		"COLD_TRANSFER_AGENT_START_SOURCE":             27,
		"COLD_TRANSFER_AGENT_END_SOURCE":               28,
		"COLD_TRANSFER_AGENT_START_DESTINATION":        29,
		"COLD_TRANSFER_AGENT_END_DESTINATION":          30,
		"HOLD_START":                                   31,
		"HOLD_END":                                     32,
		"REQUEUE":                                      33,
		"CALLER_SENT_TO_VOICEMAIL":                     34,
		"RECORDING_START":                              35,
		"RECORDING_STOP":                               36,
		"PBR_STARTED_RECORD":                           37,
		"PBR_FINISHED_RECORD":                          38,
		"ACD_LOGOUT":                                   39,
		"ACD_REGISTER":                                 40,
		"EXECUTED_AGENT_WEBLINK":                       41,
		"TRANSFER_HOLD_CALLER":                         42,
		"TRANSFER_UNHOLD_CALLER":                       43,
		"TRANSFER_HOLD_AGENT":                          44,
		"TRANSFER_UNHOLD_AGENT":                        45,
		"TRANSFER_HOLD":                                46,
		"TRANSFER_UNHOLD":                              47,
		"TRANSFER_HOLD_OUTBOUND":                       48,
		"TRANSFER_UNHOLD_OUTBOUND":                     49,
		"TRANSFER_ADD_OUTBOUND":                        50,
		"TRANSFER_REMOVE_OUTBOUND":                     51,
		"WARM_CALLER_TRANSFER_START":                   52,
		"WARM_CALLER_TRANSFER_INVITE_CALLER_INITIAL":   53,
		"WARM_CALLER_TRANSFER_INVITE_CALLER":           54,
		"WARM_CALLER_TRANSFER_END":                     55,
		"BARGE_IN_START":                               56,
		"BARGE_IN_STOP":                                57,
		"BargeInCallJoined":                            58,
		"BargeInCallLeft":                              59,
	}
)

func (x AgentSessionLogActionKey_Enum) Enum() *AgentSessionLogActionKey_Enum {
	p := new(AgentSessionLogActionKey_Enum)
	*p = x
	return p
}

func (x AgentSessionLogActionKey_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentSessionLogActionKey_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[11].Descriptor()
}

func (AgentSessionLogActionKey_Enum) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[11]
}

func (x AgentSessionLogActionKey_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentSessionLogActionKey_Enum.Descriptor instead.
func (AgentSessionLogActionKey_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{7, 0}
}

type AgentCallLogActionKey_Enum int32

const (
	AgentCallLogActionKey_DNCL_ADD        AgentCallLogActionKey_Enum = 0
	AgentCallLogActionKey_CALL_ENDED      AgentCallLogActionKey_Enum = 1
	AgentCallLogActionKey_CALL_DISCONNECT AgentCallLogActionKey_Enum = 2
	AgentCallLogActionKey_CALLER_HUNGUP   AgentCallLogActionKey_Enum = 3
	// WARM TRANSFER
	AgentCallLogActionKey_WARM_TRANSFER_AGENT_INVITE_CALLER_INITIAL    AgentCallLogActionKey_Enum = 4
	AgentCallLogActionKey_WARM_TRANSFER_AGENT_INVITE_CALLER            AgentCallLogActionKey_Enum = 5
	AgentCallLogActionKey_WARM_TRANSFER_AGENT_START                    AgentCallLogActionKey_Enum = 6
	AgentCallLogActionKey_WARM_TRANSFER_AGENT_END                      AgentCallLogActionKey_Enum = 7
	AgentCallLogActionKey_WARM_TRANSFER_OUTBOUND_INVITE_CALLER         AgentCallLogActionKey_Enum = 8
	AgentCallLogActionKey_WARM_TRANSFER_OUTBOUND_INVITE_CALLER_INITIAL AgentCallLogActionKey_Enum = 9
	AgentCallLogActionKey_WARM_TRANSFER_OUTBOUND_START                 AgentCallLogActionKey_Enum = 10
	AgentCallLogActionKey_WARM_TRANSFER_OUTBOUND_END                   AgentCallLogActionKey_Enum = 11
	// COLD TRANSFER
	AgentCallLogActionKey_COLD_TRANSFER_AGENT_START    AgentCallLogActionKey_Enum = 12
	AgentCallLogActionKey_COLD_TRANSFER_AGENT_END      AgentCallLogActionKey_Enum = 13
	AgentCallLogActionKey_COLD_TRANSFER_OUTBOUND_START AgentCallLogActionKey_Enum = 14
	// CALLBACK SUSPEND
	AgentCallLogActionKey_CALLBACK_SUSPEND_START AgentCallLogActionKey_Enum = 15
	AgentCallLogActionKey_CALLBACK_RESUMING      AgentCallLogActionKey_Enum = 16
	// VOICEMAIL
	AgentCallLogActionKey_VOICEMAIL_END            AgentCallLogActionKey_Enum = 17
	AgentCallLogActionKey_CALLER_SENT_TO_VOICEMAIL AgentCallLogActionKey_Enum = 18
	// HOLD
	AgentCallLogActionKey_HOLD_START AgentCallLogActionKey_Enum = 19
	AgentCallLogActionKey_HOLD_END   AgentCallLogActionKey_Enum = 20
	// RECORDING
	AgentCallLogActionKey_RECORDING_START AgentCallLogActionKey_Enum = 21
	AgentCallLogActionKey_RECORDING_STOP  AgentCallLogActionKey_Enum = 22
	// SKILLS
	AgentCallLogActionKey_CALL_SKILLS_SCORE         AgentCallLogActionKey_Enum = 23
	AgentCallLogActionKey_CALL_SKILLS_MATCHED       AgentCallLogActionKey_Enum = 24
	AgentCallLogActionKey_CALL_SKILLS_CURRENT       AgentCallLogActionKey_Enum = 25
	AgentCallLogActionKey_CALL_SKILLS_INITIAL       AgentCallLogActionKey_Enum = 26
	AgentCallLogActionKey_SKILLS_CHANGED_DROPSKILLS AgentCallLogActionKey_Enum = 27
	AgentCallLogActionKey_SKILLS_CHANGED_ADDSKILLS  AgentCallLogActionKey_Enum = 28
	// QUEUEING
	AgentCallLogActionKey_REQUEUE                AgentCallLogActionKey_Enum = 29
	AgentCallLogActionKey_SKILLS_CHANGED_REQUEUE AgentCallLogActionKey_Enum = 30
	// SCRUBBING
	AgentCallLogActionKey_SCRUB_OVERRIDE AgentCallLogActionKey_Enum = 31
	// More CALLBACK SUSPEND
	AgentCallLogActionKey_CALLBACK_RESUMING_WITH_MANUAL_CALL_START    AgentCallLogActionKey_Enum = 32
	AgentCallLogActionKey_CALLBACK_RESUMING_WITH_MANUAL_CALL_FINISH   AgentCallLogActionKey_Enum = 33
	AgentCallLogActionKey_CALLBACK_RESUMING_WITH_MANUAL_CALL_TIMEDOUT AgentCallLogActionKey_Enum = 34
	AgentCallLogActionKey_CALLBACK_RESUMING_WITH_MANUAL_CALL_REPLACED AgentCallLogActionKey_Enum = 35
	// Tranfer Hold and Unhold
	AgentCallLogActionKey_TRANSFER_HOLD   AgentCallLogActionKey_Enum = 36
	AgentCallLogActionKey_TRANSFER_UNHOLD AgentCallLogActionKey_Enum = 37
	// when the transfer starts for the source caller
	AgentCallLogActionKey_WARM_CALLER_TRANSFER_SOURCE_START AgentCallLogActionKey_Enum = 38
	// when the transfer starts for the destination caller
	AgentCallLogActionKey_WARM_CALLER_TRANSFER_DESTINATION_START AgentCallLogActionKey_Enum = 39
	// when the transfer starts and the source caller is not on hold
	AgentCallLogActionKey_WARM_CALLER_TRANSFER_INVITE_CALLER_INITIAL AgentCallLogActionKey_Enum = 40
	// when during transfer and the source caller is taken of hold
	AgentCallLogActionKey_WARM_CALLER_TRANSFER_INVITE_CALLER AgentCallLogActionKey_Enum = 41
	// when the transfer ends for a caller
	AgentCallLogActionKey_WARM_CALLER_TRANSFER_END AgentCallLogActionKey_Enum = 42
	// when a manager starts a barge in
	AgentCallLogActionKey_BARGE_IN_START AgentCallLogActionKey_Enum = 43
	// when a manager stops a barge in
	AgentCallLogActionKey_BARGE_IN_STOP AgentCallLogActionKey_Enum = 44
)

// Enum value maps for AgentCallLogActionKey_Enum.
var (
	AgentCallLogActionKey_Enum_name = map[int32]string{
		0:  "DNCL_ADD",
		1:  "CALL_ENDED",
		2:  "CALL_DISCONNECT",
		3:  "CALLER_HUNGUP",
		4:  "WARM_TRANSFER_AGENT_INVITE_CALLER_INITIAL",
		5:  "WARM_TRANSFER_AGENT_INVITE_CALLER",
		6:  "WARM_TRANSFER_AGENT_START",
		7:  "WARM_TRANSFER_AGENT_END",
		8:  "WARM_TRANSFER_OUTBOUND_INVITE_CALLER",
		9:  "WARM_TRANSFER_OUTBOUND_INVITE_CALLER_INITIAL",
		10: "WARM_TRANSFER_OUTBOUND_START",
		11: "WARM_TRANSFER_OUTBOUND_END",
		12: "COLD_TRANSFER_AGENT_START",
		13: "COLD_TRANSFER_AGENT_END",
		14: "COLD_TRANSFER_OUTBOUND_START",
		15: "CALLBACK_SUSPEND_START",
		16: "CALLBACK_RESUMING",
		17: "VOICEMAIL_END",
		18: "CALLER_SENT_TO_VOICEMAIL",
		19: "HOLD_START",
		20: "HOLD_END",
		21: "RECORDING_START",
		22: "RECORDING_STOP",
		23: "CALL_SKILLS_SCORE",
		24: "CALL_SKILLS_MATCHED",
		25: "CALL_SKILLS_CURRENT",
		26: "CALL_SKILLS_INITIAL",
		27: "SKILLS_CHANGED_DROPSKILLS",
		28: "SKILLS_CHANGED_ADDSKILLS",
		29: "REQUEUE",
		30: "SKILLS_CHANGED_REQUEUE",
		31: "SCRUB_OVERRIDE",
		32: "CALLBACK_RESUMING_WITH_MANUAL_CALL_START",
		33: "CALLBACK_RESUMING_WITH_MANUAL_CALL_FINISH",
		34: "CALLBACK_RESUMING_WITH_MANUAL_CALL_TIMEDOUT",
		35: "CALLBACK_RESUMING_WITH_MANUAL_CALL_REPLACED",
		36: "TRANSFER_HOLD",
		37: "TRANSFER_UNHOLD",
		38: "WARM_CALLER_TRANSFER_SOURCE_START",
		39: "WARM_CALLER_TRANSFER_DESTINATION_START",
		40: "WARM_CALLER_TRANSFER_INVITE_CALLER_INITIAL",
		41: "WARM_CALLER_TRANSFER_INVITE_CALLER",
		42: "WARM_CALLER_TRANSFER_END",
		43: "BARGE_IN_START",
		44: "BARGE_IN_STOP",
	}
	AgentCallLogActionKey_Enum_value = map[string]int32{
		"DNCL_ADD":        0,
		"CALL_ENDED":      1,
		"CALL_DISCONNECT": 2,
		"CALLER_HUNGUP":   3,
		"WARM_TRANSFER_AGENT_INVITE_CALLER_INITIAL":    4,
		"WARM_TRANSFER_AGENT_INVITE_CALLER":            5,
		"WARM_TRANSFER_AGENT_START":                    6,
		"WARM_TRANSFER_AGENT_END":                      7,
		"WARM_TRANSFER_OUTBOUND_INVITE_CALLER":         8,
		"WARM_TRANSFER_OUTBOUND_INVITE_CALLER_INITIAL": 9,
		"WARM_TRANSFER_OUTBOUND_START":                 10,
		"WARM_TRANSFER_OUTBOUND_END":                   11,
		"COLD_TRANSFER_AGENT_START":                    12,
		"COLD_TRANSFER_AGENT_END":                      13,
		"COLD_TRANSFER_OUTBOUND_START":                 14,
		"CALLBACK_SUSPEND_START":                       15,
		"CALLBACK_RESUMING":                            16,
		"VOICEMAIL_END":                                17,
		"CALLER_SENT_TO_VOICEMAIL":                     18,
		"HOLD_START":                                   19,
		"HOLD_END":                                     20,
		"RECORDING_START":                              21,
		"RECORDING_STOP":                               22,
		"CALL_SKILLS_SCORE":                            23,
		"CALL_SKILLS_MATCHED":                          24,
		"CALL_SKILLS_CURRENT":                          25,
		"CALL_SKILLS_INITIAL":                          26,
		"SKILLS_CHANGED_DROPSKILLS":                    27,
		"SKILLS_CHANGED_ADDSKILLS":                     28,
		"REQUEUE":                                      29,
		"SKILLS_CHANGED_REQUEUE":                       30,
		"SCRUB_OVERRIDE":                               31,
		"CALLBACK_RESUMING_WITH_MANUAL_CALL_START":     32,
		"CALLBACK_RESUMING_WITH_MANUAL_CALL_FINISH":    33,
		"CALLBACK_RESUMING_WITH_MANUAL_CALL_TIMEDOUT":  34,
		"CALLBACK_RESUMING_WITH_MANUAL_CALL_REPLACED":  35,
		"TRANSFER_HOLD":                                36,
		"TRANSFER_UNHOLD":                              37,
		"WARM_CALLER_TRANSFER_SOURCE_START":            38,
		"WARM_CALLER_TRANSFER_DESTINATION_START":       39,
		"WARM_CALLER_TRANSFER_INVITE_CALLER_INITIAL":   40,
		"WARM_CALLER_TRANSFER_INVITE_CALLER":           41,
		"WARM_CALLER_TRANSFER_END":                     42,
		"BARGE_IN_START":                               43,
		"BARGE_IN_STOP":                                44,
	}
)

func (x AgentCallLogActionKey_Enum) Enum() *AgentCallLogActionKey_Enum {
	p := new(AgentCallLogActionKey_Enum)
	*p = x
	return p
}

func (x AgentCallLogActionKey_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentCallLogActionKey_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[12].Descriptor()
}

func (AgentCallLogActionKey_Enum) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[12]
}

func (x AgentCallLogActionKey_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentCallLogActionKey_Enum.Descriptor instead.
func (AgentCallLogActionKey_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{8, 0}
}

type AgentCallLogActionValue_Enum int32

const (
	AgentCallLogActionValue_UNSPECIFIED                    AgentCallLogActionValue_Enum = 0
	AgentCallLogActionValue_DNCL_RESULT_FAILED             AgentCallLogActionValue_Enum = 1
	AgentCallLogActionValue_CALL_ENDED_CALLER_DISCONNECTED AgentCallLogActionValue_Enum = 2 // Ended via the agent.
)

// Enum value maps for AgentCallLogActionValue_Enum.
var (
	AgentCallLogActionValue_Enum_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "DNCL_RESULT_FAILED",
		2: "CALL_ENDED_CALLER_DISCONNECTED",
	}
	AgentCallLogActionValue_Enum_value = map[string]int32{
		"UNSPECIFIED":                    0,
		"DNCL_RESULT_FAILED":             1,
		"CALL_ENDED_CALLER_DISCONNECTED": 2,
	}
)

func (x AgentCallLogActionValue_Enum) Enum() *AgentCallLogActionValue_Enum {
	p := new(AgentCallLogActionValue_Enum)
	*p = x
	return p
}

func (x AgentCallLogActionValue_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentCallLogActionValue_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[13].Descriptor()
}

func (AgentCallLogActionValue_Enum) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[13]
}

func (x AgentCallLogActionValue_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentCallLogActionValue_Enum.Descriptor instead.
func (AgentCallLogActionValue_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{9, 0}
}

type HuntGroupParamKey_Enum int32

const (
	HuntGroupParamKey_AGENT_DIAL_IN_NUMBER                               HuntGroupParamKey_Enum = 0
	HuntGroupParamKey_AGENT_LOGIN_GUI_STATISTICS_TEMPLATE                HuntGroupParamKey_Enum = 1
	HuntGroupParamKey_AGENT_PASSWORD_REQUIRES_LETTER                     HuntGroupParamKey_Enum = 2
	HuntGroupParamKey_AGENT_PASSWORD_REQUIRES_NUMBER                     HuntGroupParamKey_Enum = 3
	HuntGroupParamKey_AGENT_PASSWORD_REQUIRES_SYMBOL                     HuntGroupParamKey_Enum = 4
	HuntGroupParamKey_AGENT_PASSWORD_REQUIRES_UPPER_LOWER                HuntGroupParamKey_Enum = 5
	HuntGroupParamKey_AGENT_SKILLS_REASSIGNMENT                          HuntGroupParamKey_Enum = 6
	HuntGroupParamKey_AGENT_STATS_CALL_HISTORY                           HuntGroupParamKey_Enum = 7
	HuntGroupParamKey_AGENT_TRIGGER                                      HuntGroupParamKey_Enum = 8
	HuntGroupParamKey_AGENT_DISPOSITION_CONDITIONAL_DNCL                 HuntGroupParamKey_Enum = 9
	HuntGroupParamKey_ALLOWED_IPS                                        HuntGroupParamKey_Enum = 10
	HuntGroupParamKey_ALLOW_AGENT_HOLD                                   HuntGroupParamKey_Enum = 11
	HuntGroupParamKey_ALLOW_AGENT_INTERCOM                               HuntGroupParamKey_Enum = 12
	HuntGroupParamKey_ALLOW_AGENT_PASSWORD_RESET                         HuntGroupParamKey_Enum = 13
	HuntGroupParamKey_ALLOW_AGENT_PAUSE_CODE_RESET                       HuntGroupParamKey_Enum = 14
	HuntGroupParamKey_ALLOW_AGENT_TO_PAUSE                               HuntGroupParamKey_Enum = 15
	HuntGroupParamKey_ALLOW_CALLBACK_SCHEDULING                          HuntGroupParamKey_Enum = 16
	HuntGroupParamKey_ALLOW_EXPORT_PHONE_NUMBER_ACTIVITY                 HuntGroupParamKey_Enum = 17
	HuntGroupParamKey_ALLOW_MANUAL_APPROVAL_OF_CALLS                     HuntGroupParamKey_Enum = 18
	HuntGroupParamKey_ALLOW_MANUAL_DIALING                               HuntGroupParamKey_Enum = 19
	HuntGroupParamKey_ALLOW_PHONE_NUMBER_ACTIVITY                        HuntGroupParamKey_Enum = 20
	HuntGroupParamKey_ALLOW_PREVIEW_DIAL_CANCEL                          HuntGroupParamKey_Enum = 21
	HuntGroupParamKey_ALLOW_SCHEDULED_CALLBACK_CALLING                   HuntGroupParamKey_Enum = 22
	HuntGroupParamKey_ALLOW_TRANSFER_CALLS                               HuntGroupParamKey_Enum = 23
	HuntGroupParamKey_ALPHANUMERIC_KEYPAD                                HuntGroupParamKey_Enum = 24
	HuntGroupParamKey_AUTO_PAUSE_ON_MULTI_HOLD                           HuntGroupParamKey_Enum = 25
	HuntGroupParamKey_AUTO_PAUSE_ON_PREVIEW_CANCEL                       HuntGroupParamKey_Enum = 26
	HuntGroupParamKey_DEFAULT_AGENT_PAUSE_CODE                           HuntGroupParamKey_Enum = 27
	HuntGroupParamKey_DEFAULT_AGENT_TRANSFERS_FILTERING                  HuntGroupParamKey_Enum = 28
	HuntGroupParamKey_DEFAULT_DNCL_COUNTRY                               HuntGroupParamKey_Enum = 29
	HuntGroupParamKey_DEFAULT_DNCL_EXPIRATION                            HuntGroupParamKey_Enum = 30
	HuntGroupParamKey_DEFAULT_INBOUND_CALL_DNCL_EXPIRATION               HuntGroupParamKey_Enum = 31
	HuntGroupParamKey_DEFAULT_MANUAL_CALL_DNCL_EXPIRATION                HuntGroupParamKey_Enum = 32
	HuntGroupParamKey_DEFAULT_OUTBOUND_CALL_DNCL_EXPIRATION              HuntGroupParamKey_Enum = 33
	HuntGroupParamKey_DEFAULT_PREVIEW_CALL_DNCL_EXPIRATION               HuntGroupParamKey_Enum = 34
	HuntGroupParamKey_DEFAULT_SCHEDULED_CALLBACK_ROUTING                 HuntGroupParamKey_Enum = 35
	HuntGroupParamKey_DISCONNECT_CALL_CONFIRMATION                       HuntGroupParamKey_Enum = 36
	HuntGroupParamKey_DISPLAY_AGENT_TRANSFERS_FILTERING                  HuntGroupParamKey_Enum = 37
	HuntGroupParamKey_DISPLAY_DATA_COLLECT_DATA                          HuntGroupParamKey_Enum = 38
	HuntGroupParamKey_DISPLAY_DATA_DIPPED_DATA                           HuntGroupParamKey_Enum = 39
	HuntGroupParamKey_DISPLAY_IVR_KEYS_PRESSED                           HuntGroupParamKey_Enum = 40
	HuntGroupParamKey_DISPLAY_PHONE_ZIP_METADATA                         HuntGroupParamKey_Enum = 41
	HuntGroupParamKey_DISPLAY_RECORDING_INDICATOR                        HuntGroupParamKey_Enum = 42
	HuntGroupParamKey_DO_ALLOW_ADD_DNCL                                  HuntGroupParamKey_Enum = 43
	HuntGroupParamKey_ENABLE_RECORDING_PAUSE                             HuntGroupParamKey_Enum = 44
	HuntGroupParamKey_HOLD_QUEUE_MONITORING                              HuntGroupParamKey_Enum = 45
	HuntGroupParamKey_HOLD_QUEUE_MONITORING_AGENT_ROUTING                HuntGroupParamKey_Enum = 46
	HuntGroupParamKey_HOLD_QUEUE_MONITORING_PREFERRED_HUNT_GROUP_ROUTING HuntGroupParamKey_Enum = 47
	HuntGroupParamKey_HOLD_QUEUE_MONITORING_REQUIRED_HUNT_GROUP_ROUTING  HuntGroupParamKey_Enum = 48
	HuntGroupParamKey_HUNT_GROUP_CLIENT_INFO_DISPLAY_TEMPLATE            HuntGroupParamKey_Enum = 49
	HuntGroupParamKey_HUNT_GROUP_SCRIPT                                  HuntGroupParamKey_Enum = 50
	HuntGroupParamKey_HUNT_GROUP_WEB_LINK                                HuntGroupParamKey_Enum = 51
	HuntGroupParamKey_MANUAL_APPROVAL_NUMBER_CONFIRMATION                HuntGroupParamKey_Enum = 52
	HuntGroupParamKey_MANUAL_DIAL_AUTO_DNCL_ADD                          HuntGroupParamKey_Enum = 53
	HuntGroupParamKey_MANUAL_DIAL_DEFAULT_CALLER_ID                      HuntGroupParamKey_Enum = 54
	HuntGroupParamKey_MANUAL_DIAL_DEFAULT_COUNTRY                        HuntGroupParamKey_Enum = 55
	HuntGroupParamKey_MANUAL_DIAL_DISPLAY_COUNTRY_SELECT_MENU            HuntGroupParamKey_Enum = 56
	HuntGroupParamKey_MANUAL_DIAL_DEFAULT_CALLER_ID_COUNTRY              HuntGroupParamKey_Enum = 57
	HuntGroupParamKey_MANUAL_DIAL_DISPLAY_CALLER_ID_COUNTRY_SELECT_MENU  HuntGroupParamKey_Enum = 58
	HuntGroupParamKey_MANUAL_DIAL_DISPLAY_OUTBOUND_NUMBER_PHONE_BOOK     HuntGroupParamKey_Enum = 59
	HuntGroupParamKey_MANUAL_DIAL_DISPLAY_PHONE_BOOK                     HuntGroupParamKey_Enum = 60
	HuntGroupParamKey_MANUAL_DIAL_NUMBER_WHITE_LIST                      HuntGroupParamKey_Enum = 61
	HuntGroupParamKey_MANUAL_DIAL_OVERRIDE_CELL_SCRUB                    HuntGroupParamKey_Enum = 62
	HuntGroupParamKey_MANUAL_DIAL_OVERRIDE_RECORDING_SETTINGS            HuntGroupParamKey_Enum = 64
	HuntGroupParamKey_MANUAL_DIAL_SCRUB_OVERRIDE                         HuntGroupParamKey_Enum = 65
	HuntGroupParamKey_MANUAL_DIAL_TIMEZONE_OVERRIDE                      HuntGroupParamKey_Enum = 66
	HuntGroupParamKey_MANUAL_DIAL_USER_EDITABLE_CALLER_ID                HuntGroupParamKey_Enum = 67
	HuntGroupParamKey_MANUAL_QUEUE_CONFIGURATION_NAME                    HuntGroupParamKey_Enum = 68
	HuntGroupParamKey_MINIMUM_AGENT_PASSWORD_LENGTH                      HuntGroupParamKey_Enum = 69
	HuntGroupParamKey_PHONE_NUMBER_ACTIVITY_EDIT_RESPONSES               HuntGroupParamKey_Enum = 70
	HuntGroupParamKey_PHONE_NUMBER_ACTIVITY_RECORDINGS_DOWNLOAD          HuntGroupParamKey_Enum = 71
	HuntGroupParamKey_PREVIEW_DIAL_AUTO_DNCL_ADD                         HuntGroupParamKey_Enum = 72
	HuntGroupParamKey_PREVIEW_DIAL_CALL_TIMEOUT                          HuntGroupParamKey_Enum = 73
	HuntGroupParamKey_PREVIEW_DIAL_CONFIRMATION                          HuntGroupParamKey_Enum = 74
	HuntGroupParamKey_PREVIEW_QUEUE_CONFIGURATION_NAME                   HuntGroupParamKey_Enum = 75
	HuntGroupParamKey_RECORDING_DELAY                                    HuntGroupParamKey_Enum = 76
	HuntGroupParamKey_REQUEUE_TRANSFER_QUEUE_CONFIGURATION_NAME          HuntGroupParamKey_Enum = 77
	HuntGroupParamKey_SCHEDULED_CALLBACKS_RETRIEVAL_MODE                 HuntGroupParamKey_Enum = 78
	HuntGroupParamKey_SCHEDULED_CALLBACK_ROUTING_DISALLOWED              HuntGroupParamKey_Enum = 79
	HuntGroupParamKey_TRANSFER_CALLS_DEFAULT_CALLER_ID                   HuntGroupParamKey_Enum = 80
	HuntGroupParamKey_TRANSFER_CALLS_DEFAULT_COUNTRY                     HuntGroupParamKey_Enum = 81
	HuntGroupParamKey_TRANSFER_CALLS_DEFAULT_TRANSFER_NUMBER             HuntGroupParamKey_Enum = 82
	HuntGroupParamKey_TRANSFER_CALLS_DISPLAY_CALLER_ID_PHONE_BOOK        HuntGroupParamKey_Enum = 83
	HuntGroupParamKey_TRANSFER_CALLS_DISPLAY_COUNTRY_SELECT_MENU         HuntGroupParamKey_Enum = 84
	HuntGroupParamKey_TRANSFER_CALLS_DISPLAY_TRANSFER_NUMBER_PHONE_BOOK  HuntGroupParamKey_Enum = 85
	HuntGroupParamKey_TRANSFER_CALLS_HAND_OFF_TYPE                       HuntGroupParamKey_Enum = 86
	HuntGroupParamKey_TRANSFER_CALLS_TRANSFER_TYPE                       HuntGroupParamKey_Enum = 87
	HuntGroupParamKey_TRANSFER_CALLS_USER_EDITABLE_CALLER_ID             HuntGroupParamKey_Enum = 88
	HuntGroupParamKey_TRANSFER_CALLS_USER_EDITABLE_TRANSFER_NUMBER       HuntGroupParamKey_Enum = 89
	HuntGroupParamKey_TRANSFER_RECORDING_STATUS                          HuntGroupParamKey_Enum = 90
	HuntGroupParamKey_USE_ADVANCED_GATEWAY_TITLE                         HuntGroupParamKey_Enum = 91
	HuntGroupParamKey_USE_AGENT_PAUSE_CODES                              HuntGroupParamKey_Enum = 92
	HuntGroupParamKey_USE_IP_BASED_AUTH                                  HuntGroupParamKey_Enum = 93
	HuntGroupParamKey_HUNT_GROUP_REASSIGNMENT_DISALLOWED                 HuntGroupParamKey_Enum = 94
	HuntGroupParamKey_REQUEUE_TRANSFER_DISALLOWED_SKILLS                 HuntGroupParamKey_Enum = 95
	HuntGroupParamKey_ALLOW_MANUAL_APPROVAL_FOR_MESSAGING                HuntGroupParamKey_Enum = 96
	HuntGroupParamKey_DISPLAY_SKILLS                                     HuntGroupParamKey_Enum = 97
	HuntGroupParamKey_PBX_TRANSFER_DISALLOWED_EXTENSIONS                 HuntGroupParamKey_Enum = 98
)

// Enum value maps for HuntGroupParamKey_Enum.
var (
	HuntGroupParamKey_Enum_name = map[int32]string{
		0:  "AGENT_DIAL_IN_NUMBER",
		1:  "AGENT_LOGIN_GUI_STATISTICS_TEMPLATE",
		2:  "AGENT_PASSWORD_REQUIRES_LETTER",
		3:  "AGENT_PASSWORD_REQUIRES_NUMBER",
		4:  "AGENT_PASSWORD_REQUIRES_SYMBOL",
		5:  "AGENT_PASSWORD_REQUIRES_UPPER_LOWER",
		6:  "AGENT_SKILLS_REASSIGNMENT",
		7:  "AGENT_STATS_CALL_HISTORY",
		8:  "AGENT_TRIGGER",
		9:  "AGENT_DISPOSITION_CONDITIONAL_DNCL",
		10: "ALLOWED_IPS",
		11: "ALLOW_AGENT_HOLD",
		12: "ALLOW_AGENT_INTERCOM",
		13: "ALLOW_AGENT_PASSWORD_RESET",
		14: "ALLOW_AGENT_PAUSE_CODE_RESET",
		15: "ALLOW_AGENT_TO_PAUSE",
		16: "ALLOW_CALLBACK_SCHEDULING",
		17: "ALLOW_EXPORT_PHONE_NUMBER_ACTIVITY",
		18: "ALLOW_MANUAL_APPROVAL_OF_CALLS",
		19: "ALLOW_MANUAL_DIALING",
		20: "ALLOW_PHONE_NUMBER_ACTIVITY",
		21: "ALLOW_PREVIEW_DIAL_CANCEL",
		22: "ALLOW_SCHEDULED_CALLBACK_CALLING",
		23: "ALLOW_TRANSFER_CALLS",
		24: "ALPHANUMERIC_KEYPAD",
		25: "AUTO_PAUSE_ON_MULTI_HOLD",
		26: "AUTO_PAUSE_ON_PREVIEW_CANCEL",
		27: "DEFAULT_AGENT_PAUSE_CODE",
		28: "DEFAULT_AGENT_TRANSFERS_FILTERING",
		29: "DEFAULT_DNCL_COUNTRY",
		30: "DEFAULT_DNCL_EXPIRATION",
		31: "DEFAULT_INBOUND_CALL_DNCL_EXPIRATION",
		32: "DEFAULT_MANUAL_CALL_DNCL_EXPIRATION",
		33: "DEFAULT_OUTBOUND_CALL_DNCL_EXPIRATION",
		34: "DEFAULT_PREVIEW_CALL_DNCL_EXPIRATION",
		35: "DEFAULT_SCHEDULED_CALLBACK_ROUTING",
		36: "DISCONNECT_CALL_CONFIRMATION",
		37: "DISPLAY_AGENT_TRANSFERS_FILTERING",
		38: "DISPLAY_DATA_COLLECT_DATA",
		39: "DISPLAY_DATA_DIPPED_DATA",
		40: "DISPLAY_IVR_KEYS_PRESSED",
		41: "DISPLAY_PHONE_ZIP_METADATA",
		42: "DISPLAY_RECORDING_INDICATOR",
		43: "DO_ALLOW_ADD_DNCL",
		44: "ENABLE_RECORDING_PAUSE",
		45: "HOLD_QUEUE_MONITORING",
		46: "HOLD_QUEUE_MONITORING_AGENT_ROUTING",
		47: "HOLD_QUEUE_MONITORING_PREFERRED_HUNT_GROUP_ROUTING",
		48: "HOLD_QUEUE_MONITORING_REQUIRED_HUNT_GROUP_ROUTING",
		49: "HUNT_GROUP_CLIENT_INFO_DISPLAY_TEMPLATE",
		50: "HUNT_GROUP_SCRIPT",
		51: "HUNT_GROUP_WEB_LINK",
		52: "MANUAL_APPROVAL_NUMBER_CONFIRMATION",
		53: "MANUAL_DIAL_AUTO_DNCL_ADD",
		54: "MANUAL_DIAL_DEFAULT_CALLER_ID",
		55: "MANUAL_DIAL_DEFAULT_COUNTRY",
		56: "MANUAL_DIAL_DISPLAY_COUNTRY_SELECT_MENU",
		57: "MANUAL_DIAL_DEFAULT_CALLER_ID_COUNTRY",
		58: "MANUAL_DIAL_DISPLAY_CALLER_ID_COUNTRY_SELECT_MENU",
		59: "MANUAL_DIAL_DISPLAY_OUTBOUND_NUMBER_PHONE_BOOK",
		60: "MANUAL_DIAL_DISPLAY_PHONE_BOOK",
		61: "MANUAL_DIAL_NUMBER_WHITE_LIST",
		62: "MANUAL_DIAL_OVERRIDE_CELL_SCRUB",
		64: "MANUAL_DIAL_OVERRIDE_RECORDING_SETTINGS",
		65: "MANUAL_DIAL_SCRUB_OVERRIDE",
		66: "MANUAL_DIAL_TIMEZONE_OVERRIDE",
		67: "MANUAL_DIAL_USER_EDITABLE_CALLER_ID",
		68: "MANUAL_QUEUE_CONFIGURATION_NAME",
		69: "MINIMUM_AGENT_PASSWORD_LENGTH",
		70: "PHONE_NUMBER_ACTIVITY_EDIT_RESPONSES",
		71: "PHONE_NUMBER_ACTIVITY_RECORDINGS_DOWNLOAD",
		72: "PREVIEW_DIAL_AUTO_DNCL_ADD",
		73: "PREVIEW_DIAL_CALL_TIMEOUT",
		74: "PREVIEW_DIAL_CONFIRMATION",
		75: "PREVIEW_QUEUE_CONFIGURATION_NAME",
		76: "RECORDING_DELAY",
		77: "REQUEUE_TRANSFER_QUEUE_CONFIGURATION_NAME",
		78: "SCHEDULED_CALLBACKS_RETRIEVAL_MODE",
		79: "SCHEDULED_CALLBACK_ROUTING_DISALLOWED",
		80: "TRANSFER_CALLS_DEFAULT_CALLER_ID",
		81: "TRANSFER_CALLS_DEFAULT_COUNTRY",
		82: "TRANSFER_CALLS_DEFAULT_TRANSFER_NUMBER",
		83: "TRANSFER_CALLS_DISPLAY_CALLER_ID_PHONE_BOOK",
		84: "TRANSFER_CALLS_DISPLAY_COUNTRY_SELECT_MENU",
		85: "TRANSFER_CALLS_DISPLAY_TRANSFER_NUMBER_PHONE_BOOK",
		86: "TRANSFER_CALLS_HAND_OFF_TYPE",
		87: "TRANSFER_CALLS_TRANSFER_TYPE",
		88: "TRANSFER_CALLS_USER_EDITABLE_CALLER_ID",
		89: "TRANSFER_CALLS_USER_EDITABLE_TRANSFER_NUMBER",
		90: "TRANSFER_RECORDING_STATUS",
		91: "USE_ADVANCED_GATEWAY_TITLE",
		92: "USE_AGENT_PAUSE_CODES",
		93: "USE_IP_BASED_AUTH",
		94: "HUNT_GROUP_REASSIGNMENT_DISALLOWED",
		95: "REQUEUE_TRANSFER_DISALLOWED_SKILLS",
		96: "ALLOW_MANUAL_APPROVAL_FOR_MESSAGING",
		97: "DISPLAY_SKILLS",
		98: "PBX_TRANSFER_DISALLOWED_EXTENSIONS",
	}
	HuntGroupParamKey_Enum_value = map[string]int32{
		"AGENT_DIAL_IN_NUMBER":                               0,
		"AGENT_LOGIN_GUI_STATISTICS_TEMPLATE":                1,
		"AGENT_PASSWORD_REQUIRES_LETTER":                     2,
		"AGENT_PASSWORD_REQUIRES_NUMBER":                     3,
		"AGENT_PASSWORD_REQUIRES_SYMBOL":                     4,
		"AGENT_PASSWORD_REQUIRES_UPPER_LOWER":                5,
		"AGENT_SKILLS_REASSIGNMENT":                          6,
		"AGENT_STATS_CALL_HISTORY":                           7,
		"AGENT_TRIGGER":                                      8,
		"AGENT_DISPOSITION_CONDITIONAL_DNCL":                 9,
		"ALLOWED_IPS":                                        10,
		"ALLOW_AGENT_HOLD":                                   11,
		"ALLOW_AGENT_INTERCOM":                               12,
		"ALLOW_AGENT_PASSWORD_RESET":                         13,
		"ALLOW_AGENT_PAUSE_CODE_RESET":                       14,
		"ALLOW_AGENT_TO_PAUSE":                               15,
		"ALLOW_CALLBACK_SCHEDULING":                          16,
		"ALLOW_EXPORT_PHONE_NUMBER_ACTIVITY":                 17,
		"ALLOW_MANUAL_APPROVAL_OF_CALLS":                     18,
		"ALLOW_MANUAL_DIALING":                               19,
		"ALLOW_PHONE_NUMBER_ACTIVITY":                        20,
		"ALLOW_PREVIEW_DIAL_CANCEL":                          21,
		"ALLOW_SCHEDULED_CALLBACK_CALLING":                   22,
		"ALLOW_TRANSFER_CALLS":                               23,
		"ALPHANUMERIC_KEYPAD":                                24,
		"AUTO_PAUSE_ON_MULTI_HOLD":                           25,
		"AUTO_PAUSE_ON_PREVIEW_CANCEL":                       26,
		"DEFAULT_AGENT_PAUSE_CODE":                           27,
		"DEFAULT_AGENT_TRANSFERS_FILTERING":                  28,
		"DEFAULT_DNCL_COUNTRY":                               29,
		"DEFAULT_DNCL_EXPIRATION":                            30,
		"DEFAULT_INBOUND_CALL_DNCL_EXPIRATION":               31,
		"DEFAULT_MANUAL_CALL_DNCL_EXPIRATION":                32,
		"DEFAULT_OUTBOUND_CALL_DNCL_EXPIRATION":              33,
		"DEFAULT_PREVIEW_CALL_DNCL_EXPIRATION":               34,
		"DEFAULT_SCHEDULED_CALLBACK_ROUTING":                 35,
		"DISCONNECT_CALL_CONFIRMATION":                       36,
		"DISPLAY_AGENT_TRANSFERS_FILTERING":                  37,
		"DISPLAY_DATA_COLLECT_DATA":                          38,
		"DISPLAY_DATA_DIPPED_DATA":                           39,
		"DISPLAY_IVR_KEYS_PRESSED":                           40,
		"DISPLAY_PHONE_ZIP_METADATA":                         41,
		"DISPLAY_RECORDING_INDICATOR":                        42,
		"DO_ALLOW_ADD_DNCL":                                  43,
		"ENABLE_RECORDING_PAUSE":                             44,
		"HOLD_QUEUE_MONITORING":                              45,
		"HOLD_QUEUE_MONITORING_AGENT_ROUTING":                46,
		"HOLD_QUEUE_MONITORING_PREFERRED_HUNT_GROUP_ROUTING": 47,
		"HOLD_QUEUE_MONITORING_REQUIRED_HUNT_GROUP_ROUTING":  48,
		"HUNT_GROUP_CLIENT_INFO_DISPLAY_TEMPLATE":            49,
		"HUNT_GROUP_SCRIPT":                                  50,
		"HUNT_GROUP_WEB_LINK":                                51,
		"MANUAL_APPROVAL_NUMBER_CONFIRMATION":                52,
		"MANUAL_DIAL_AUTO_DNCL_ADD":                          53,
		"MANUAL_DIAL_DEFAULT_CALLER_ID":                      54,
		"MANUAL_DIAL_DEFAULT_COUNTRY":                        55,
		"MANUAL_DIAL_DISPLAY_COUNTRY_SELECT_MENU":            56,
		"MANUAL_DIAL_DEFAULT_CALLER_ID_COUNTRY":              57,
		"MANUAL_DIAL_DISPLAY_CALLER_ID_COUNTRY_SELECT_MENU":  58,
		"MANUAL_DIAL_DISPLAY_OUTBOUND_NUMBER_PHONE_BOOK":     59,
		"MANUAL_DIAL_DISPLAY_PHONE_BOOK":                     60,
		"MANUAL_DIAL_NUMBER_WHITE_LIST":                      61,
		"MANUAL_DIAL_OVERRIDE_CELL_SCRUB":                    62,
		"MANUAL_DIAL_OVERRIDE_RECORDING_SETTINGS":            64,
		"MANUAL_DIAL_SCRUB_OVERRIDE":                         65,
		"MANUAL_DIAL_TIMEZONE_OVERRIDE":                      66,
		"MANUAL_DIAL_USER_EDITABLE_CALLER_ID":                67,
		"MANUAL_QUEUE_CONFIGURATION_NAME":                    68,
		"MINIMUM_AGENT_PASSWORD_LENGTH":                      69,
		"PHONE_NUMBER_ACTIVITY_EDIT_RESPONSES":               70,
		"PHONE_NUMBER_ACTIVITY_RECORDINGS_DOWNLOAD":          71,
		"PREVIEW_DIAL_AUTO_DNCL_ADD":                         72,
		"PREVIEW_DIAL_CALL_TIMEOUT":                          73,
		"PREVIEW_DIAL_CONFIRMATION":                          74,
		"PREVIEW_QUEUE_CONFIGURATION_NAME":                   75,
		"RECORDING_DELAY":                                    76,
		"REQUEUE_TRANSFER_QUEUE_CONFIGURATION_NAME":          77,
		"SCHEDULED_CALLBACKS_RETRIEVAL_MODE":                 78,
		"SCHEDULED_CALLBACK_ROUTING_DISALLOWED":              79,
		"TRANSFER_CALLS_DEFAULT_CALLER_ID":                   80,
		"TRANSFER_CALLS_DEFAULT_COUNTRY":                     81,
		"TRANSFER_CALLS_DEFAULT_TRANSFER_NUMBER":             82,
		"TRANSFER_CALLS_DISPLAY_CALLER_ID_PHONE_BOOK":        83,
		"TRANSFER_CALLS_DISPLAY_COUNTRY_SELECT_MENU":         84,
		"TRANSFER_CALLS_DISPLAY_TRANSFER_NUMBER_PHONE_BOOK":  85,
		"TRANSFER_CALLS_HAND_OFF_TYPE":                       86,
		"TRANSFER_CALLS_TRANSFER_TYPE":                       87,
		"TRANSFER_CALLS_USER_EDITABLE_CALLER_ID":             88,
		"TRANSFER_CALLS_USER_EDITABLE_TRANSFER_NUMBER":       89,
		"TRANSFER_RECORDING_STATUS":                          90,
		"USE_ADVANCED_GATEWAY_TITLE":                         91,
		"USE_AGENT_PAUSE_CODES":                              92,
		"USE_IP_BASED_AUTH":                                  93,
		"HUNT_GROUP_REASSIGNMENT_DISALLOWED":                 94,
		"REQUEUE_TRANSFER_DISALLOWED_SKILLS":                 95,
		"ALLOW_MANUAL_APPROVAL_FOR_MESSAGING":                96,
		"DISPLAY_SKILLS":                                     97,
		"PBX_TRANSFER_DISALLOWED_EXTENSIONS":                 98,
	}
)

func (x HuntGroupParamKey_Enum) Enum() *HuntGroupParamKey_Enum {
	p := new(HuntGroupParamKey_Enum)
	*p = x
	return p
}

func (x HuntGroupParamKey_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HuntGroupParamKey_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[14].Descriptor()
}

func (HuntGroupParamKey_Enum) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[14]
}

func (x HuntGroupParamKey_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HuntGroupParamKey_Enum.Descriptor instead.
func (HuntGroupParamKey_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{10, 0}
}

type ReplaceConfig_Enum int32

const (
	ReplaceConfig_NO_CHANGE ReplaceConfig_Enum = 0
	ReplaceConfig_TENANT    ReplaceConfig_Enum = 1
	ReplaceConfig_REPLACE   ReplaceConfig_Enum = 2
)

// Enum value maps for ReplaceConfig_Enum.
var (
	ReplaceConfig_Enum_name = map[int32]string{
		0: "NO_CHANGE",
		1: "TENANT",
		2: "REPLACE",
	}
	ReplaceConfig_Enum_value = map[string]int32{
		"NO_CHANGE": 0,
		"TENANT":    1,
		"REPLACE":   2,
	}
)

func (x ReplaceConfig_Enum) Enum() *ReplaceConfig_Enum {
	p := new(ReplaceConfig_Enum)
	*p = x
	return p
}

func (x ReplaceConfig_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplaceConfig_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_acd_proto_enumTypes[15].Descriptor()
}

func (ReplaceConfig_Enum) Type() protoreflect.EnumType {
	return &file_api_commons_acd_proto_enumTypes[15]
}

func (x ReplaceConfig_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplaceConfig_Enum.Descriptor instead.
func (ReplaceConfig_Enum) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{11, 0}
}

// a complex type that completely identifies an agent
type AgentSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the agent's sid
	AgentSid int64 `protobuf:"varint,1,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	// the client's sid
	TenantSid int64 `protobuf:"varint,2,opt,name=tenant_sid,json=tenantSid,proto3" json:"tenant_sid,omitempty"`
	// the voice session sid
	SessionSid int64 `protobuf:"varint,3,opt,name=session_sid,json=sessionSid,proto3" json:"session_sid,omitempty"`
	// the asm session sid
	AsmSessionSid int64 `protobuf:"varint,4,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	// the org id of the user/agent
	OrgId string `protobuf:"bytes,5,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// the region id of the user/agent
	RegionId string `protobuf:"bytes,6,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// the user's id
	UserId string `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AgentSession) Reset() {
	*x = AgentSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentSession) ProtoMessage() {}

func (x *AgentSession) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentSession.ProtoReflect.Descriptor instead.
func (*AgentSession) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{0}
}

func (x *AgentSession) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *AgentSession) GetTenantSid() int64 {
	if x != nil {
		return x.TenantSid
	}
	return 0
}

func (x *AgentSession) GetSessionSid() int64 {
	if x != nil {
		return x.SessionSid
	}
	return 0
}

func (x *AgentSession) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

func (x *AgentSession) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *AgentSession) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *AgentSession) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// a complex type that completely identifies a caller
type CallerSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the caller's sid
	CallerSid int64 `protobuf:"varint,1,opt,name=caller_sid,json=callerSid,proto3" json:"caller_sid,omitempty"`
	// the type of the caller
	Type CallType_Enum `protobuf:"varint,2,opt,name=type,proto3,enum=api.commons.CallType_Enum" json:"type,omitempty"`
	// the client's sid
	TenantSid int64 `protobuf:"varint,3,opt,name=tenant_sid,json=tenantSid,proto3" json:"tenant_sid,omitempty"`
	// org id of the caller
	OrgId string `protobuf:"bytes,4,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *CallerSid) Reset() {
	*x = CallerSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallerSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerSid) ProtoMessage() {}

func (x *CallerSid) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerSid.ProtoReflect.Descriptor instead.
func (*CallerSid) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{1}
}

func (x *CallerSid) GetCallerSid() int64 {
	if x != nil {
		return x.CallerSid
	}
	return 0
}

func (x *CallerSid) GetType() CallType_Enum {
	if x != nil {
		return x.Type
	}
	return CallType_INBOUND
}

func (x *CallerSid) GetTenantSid() int64 {
	if x != nil {
		return x.TenantSid
	}
	return 0
}

func (x *CallerSid) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type AgentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentStatus) Reset() {
	*x = AgentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentStatus) ProtoMessage() {}

func (x *AgentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentStatus.ProtoReflect.Descriptor instead.
func (*AgentStatus) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{2}
}

type CallerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallerStatus) Reset() {
	*x = CallerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerStatus) ProtoMessage() {}

func (x *CallerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerStatus.ProtoReflect.Descriptor instead.
func (*CallerStatus) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{3}
}

// Call type definition that's going to be used by the ACD client to determine
// the call_id type
type CallType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallType) Reset() {
	*x = CallType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallType) ProtoMessage() {}

func (x *CallType) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallType.ProtoReflect.Descriptor instead.
func (*CallType) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{4}
}

type AgentDialIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentDialIn) Reset() {
	*x = AgentDialIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentDialIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDialIn) ProtoMessage() {}

func (x *AgentDialIn) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDialIn.ProtoReflect.Descriptor instead.
func (*AgentDialIn) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{5}
}

type HuntGroupType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HuntGroupType) Reset() {
	*x = HuntGroupType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuntGroupType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuntGroupType) ProtoMessage() {}

func (x *HuntGroupType) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuntGroupType.ProtoReflect.Descriptor instead.
func (*HuntGroupType) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{6}
}

type AgentSessionLogActionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentSessionLogActionKey) Reset() {
	*x = AgentSessionLogActionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentSessionLogActionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentSessionLogActionKey) ProtoMessage() {}

func (x *AgentSessionLogActionKey) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentSessionLogActionKey.ProtoReflect.Descriptor instead.
func (*AgentSessionLogActionKey) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{7}
}

type AgentCallLogActionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentCallLogActionKey) Reset() {
	*x = AgentCallLogActionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentCallLogActionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentCallLogActionKey) ProtoMessage() {}

func (x *AgentCallLogActionKey) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentCallLogActionKey.ProtoReflect.Descriptor instead.
func (*AgentCallLogActionKey) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{8}
}

type AgentCallLogActionValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentCallLogActionValue) Reset() {
	*x = AgentCallLogActionValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentCallLogActionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentCallLogActionValue) ProtoMessage() {}

func (x *AgentCallLogActionValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentCallLogActionValue.ProtoReflect.Descriptor instead.
func (*AgentCallLogActionValue) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{9}
}

type HuntGroupParamKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HuntGroupParamKey) Reset() {
	*x = HuntGroupParamKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuntGroupParamKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuntGroupParamKey) ProtoMessage() {}

func (x *HuntGroupParamKey) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuntGroupParamKey.ProtoReflect.Descriptor instead.
func (*HuntGroupParamKey) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{10}
}

type ReplaceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplaceConfig) Reset() {
	*x = ReplaceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfig) ProtoMessage() {}

func (x *ReplaceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfig.ProtoReflect.Descriptor instead.
func (*ReplaceConfig) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{11}
}

type TransferMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier   string             `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	DisplayLabel string             `protobuf:"bytes,2,opt,name=display_label,json=displayLabel,proto3" json:"display_label,omitempty"`
	MemberType   TransferMemberType `protobuf:"varint,3,opt,name=member_type,json=memberType,proto3,enum=api.commons.TransferMemberType" json:"member_type,omitempty"`
	// Types that are assignable to LocatableData:
	//
	//	*TransferMember_AgentSession
	//	*TransferMember_CallerSid
	//	*TransferMember_OutboundId
	LocatableData isTransferMember_LocatableData `protobuf_oneof:"locatable_data"`
}

func (x *TransferMember) Reset() {
	*x = TransferMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferMember) ProtoMessage() {}

func (x *TransferMember) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferMember.ProtoReflect.Descriptor instead.
func (*TransferMember) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{12}
}

func (x *TransferMember) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *TransferMember) GetDisplayLabel() string {
	if x != nil {
		return x.DisplayLabel
	}
	return ""
}

func (x *TransferMember) GetMemberType() TransferMemberType {
	if x != nil {
		return x.MemberType
	}
	return TransferMemberType_TransferMemberType_AGENT
}

func (m *TransferMember) GetLocatableData() isTransferMember_LocatableData {
	if m != nil {
		return m.LocatableData
	}
	return nil
}

func (x *TransferMember) GetAgentSession() *AgentSession {
	if x, ok := x.GetLocatableData().(*TransferMember_AgentSession); ok {
		return x.AgentSession
	}
	return nil
}

func (x *TransferMember) GetCallerSid() *CallerSid {
	if x, ok := x.GetLocatableData().(*TransferMember_CallerSid); ok {
		return x.CallerSid
	}
	return nil
}

func (x *TransferMember) GetOutboundId() string {
	if x, ok := x.GetLocatableData().(*TransferMember_OutboundId); ok {
		return x.OutboundId
	}
	return ""
}

type isTransferMember_LocatableData interface {
	isTransferMember_LocatableData()
}

type TransferMember_AgentSession struct {
	AgentSession *AgentSession `protobuf:"bytes,100,opt,name=agent_session,json=agentSession,proto3,oneof"`
}

type TransferMember_CallerSid struct {
	CallerSid *CallerSid `protobuf:"bytes,101,opt,name=caller_sid,json=callerSid,proto3,oneof"`
}

type TransferMember_OutboundId struct {
	OutboundId string `protobuf:"bytes,102,opt,name=outbound_id,json=outboundId,proto3,oneof"`
}

func (*TransferMember_AgentSession) isTransferMember_LocatableData() {}

func (*TransferMember_CallerSid) isTransferMember_LocatableData() {}

func (*TransferMember_OutboundId) isTransferMember_LocatableData() {}

// message used to wrap the alert one of
type AgentAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the one for the agent alert
	//
	// Types that are assignable to Alert:
	//
	//	*AgentAlert_BackofficeMessage
	//	*AgentAlert_DirectedCallRinging
	//	*AgentAlert_DirectedCallHangup
	Alert isAgentAlert_Alert `protobuf_oneof:"alert"`
}

func (x *AgentAlert) Reset() {
	*x = AgentAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentAlert) ProtoMessage() {}

func (x *AgentAlert) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentAlert.ProtoReflect.Descriptor instead.
func (*AgentAlert) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{13}
}

func (m *AgentAlert) GetAlert() isAgentAlert_Alert {
	if m != nil {
		return m.Alert
	}
	return nil
}

func (x *AgentAlert) GetBackofficeMessage() *AgentBackofficeMessageAlert {
	if x, ok := x.GetAlert().(*AgentAlert_BackofficeMessage); ok {
		return x.BackofficeMessage
	}
	return nil
}

func (x *AgentAlert) GetDirectedCallRinging() *AgentDirectedCallRingingAlert {
	if x, ok := x.GetAlert().(*AgentAlert_DirectedCallRinging); ok {
		return x.DirectedCallRinging
	}
	return nil
}

func (x *AgentAlert) GetDirectedCallHangup() *AgentDirectedCallHangupAlert {
	if x, ok := x.GetAlert().(*AgentAlert_DirectedCallHangup); ok {
		return x.DirectedCallHangup
	}
	return nil
}

type isAgentAlert_Alert interface {
	isAgentAlert_Alert()
}

type AgentAlert_BackofficeMessage struct {
	// a message from backoffice
	BackofficeMessage *AgentBackofficeMessageAlert `protobuf:"bytes,1,opt,name=backoffice_message,json=backofficeMessage,proto3,oneof"`
}

type AgentAlert_DirectedCallRinging struct {
	// alert that a direct agent call is ringing
	DirectedCallRinging *AgentDirectedCallRingingAlert `protobuf:"bytes,2,opt,name=directed_call_ringing,json=directedCallRinging,proto3,oneof"`
}

type AgentAlert_DirectedCallHangup struct {
	// alert that a direct agent call hungup
	DirectedCallHangup *AgentDirectedCallHangupAlert `protobuf:"bytes,3,opt,name=directed_call_hangup,json=directedCallHangup,proto3,oneof"`
}

func (*AgentAlert_BackofficeMessage) isAgentAlert_Alert() {}

func (*AgentAlert_DirectedCallRinging) isAgentAlert_Alert() {}

func (*AgentAlert_DirectedCallHangup) isAgentAlert_Alert() {}

// an event used to send a back office message to an agent
type AgentBackofficeMessageAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the amount of time in seconds the event should expire - 0 mean no expiration
	ExpireDuration int64 `protobuf:"varint,1,opt,name=expire_duration,json=expireDuration,proto3" json:"expire_duration,omitempty"`
	// the date/time that the even happened
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// the information of the agent this event is for
	TargetAgentSession *AgentSession `protobuf:"bytes,3,opt,name=target_agent_session,json=targetAgentSession,proto3" json:"target_agent_session,omitempty"`
	// the message send from backoffice
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// a unique id for the message
	Id string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AgentBackofficeMessageAlert) Reset() {
	*x = AgentBackofficeMessageAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentBackofficeMessageAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentBackofficeMessageAlert) ProtoMessage() {}

func (x *AgentBackofficeMessageAlert) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentBackofficeMessageAlert.ProtoReflect.Descriptor instead.
func (*AgentBackofficeMessageAlert) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{14}
}

func (x *AgentBackofficeMessageAlert) GetExpireDuration() int64 {
	if x != nil {
		return x.ExpireDuration
	}
	return 0
}

func (x *AgentBackofficeMessageAlert) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AgentBackofficeMessageAlert) GetTargetAgentSession() *AgentSession {
	if x != nil {
		return x.TargetAgentSession
	}
	return nil
}

func (x *AgentBackofficeMessageAlert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AgentBackofficeMessageAlert) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// an event used to alert an agent that they have an agent directed call that came in
type AgentDirectedCallRingingAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the amount of time in seconds the event should expire - 0 mean no expiration
	ExpireDuration int64 `protobuf:"varint,1,opt,name=expire_duration,json=expireDuration,proto3" json:"expire_duration,omitempty"`
	// the date/time that the even happened
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// the information of the agent this event is for
	TargetAgentSession *AgentSession `protobuf:"bytes,3,opt,name=target_agent_session,json=targetAgentSession,proto3" json:"target_agent_session,omitempty"`
	// the information of the caller entity
	CallerSid *CallerSid `protobuf:"bytes,4,opt,name=caller_sid,json=callerSid,proto3" json:"caller_sid,omitempty"`
	// the number the caller called from
	CallerId string `protobuf:"bytes,5,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// the number the caller called
	DestinationNumber string `protobuf:"bytes,6,opt,name=destination_number,json=destinationNumber,proto3" json:"destination_number,omitempty"`
	// a unique id for the message
	Id string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AgentDirectedCallRingingAlert) Reset() {
	*x = AgentDirectedCallRingingAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentDirectedCallRingingAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDirectedCallRingingAlert) ProtoMessage() {}

func (x *AgentDirectedCallRingingAlert) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDirectedCallRingingAlert.ProtoReflect.Descriptor instead.
func (*AgentDirectedCallRingingAlert) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{15}
}

func (x *AgentDirectedCallRingingAlert) GetExpireDuration() int64 {
	if x != nil {
		return x.ExpireDuration
	}
	return 0
}

func (x *AgentDirectedCallRingingAlert) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AgentDirectedCallRingingAlert) GetTargetAgentSession() *AgentSession {
	if x != nil {
		return x.TargetAgentSession
	}
	return nil
}

func (x *AgentDirectedCallRingingAlert) GetCallerSid() *CallerSid {
	if x != nil {
		return x.CallerSid
	}
	return nil
}

func (x *AgentDirectedCallRingingAlert) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *AgentDirectedCallRingingAlert) GetDestinationNumber() string {
	if x != nil {
		return x.DestinationNumber
	}
	return ""
}

func (x *AgentDirectedCallRingingAlert) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// an event used to alert an agent that they have an agent directed call that hung up
type AgentDirectedCallHangupAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the amount of time in seconds the event should expire - 0 mean no expiration
	ExpireDuration int64 `protobuf:"varint,1,opt,name=expire_duration,json=expireDuration,proto3" json:"expire_duration,omitempty"`
	// the date/time that the even happened
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// the information of the agent this event is for
	TargetAgentSession *AgentSession `protobuf:"bytes,3,opt,name=target_agent_session,json=targetAgentSession,proto3" json:"target_agent_session,omitempty"`
	// the information of the caller entity
	CallerSid *CallerSid `protobuf:"bytes,4,opt,name=caller_sid,json=callerSid,proto3" json:"caller_sid,omitempty"`
	// a unique id for the message
	Id string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AgentDirectedCallHangupAlert) Reset() {
	*x = AgentDirectedCallHangupAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentDirectedCallHangupAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDirectedCallHangupAlert) ProtoMessage() {}

func (x *AgentDirectedCallHangupAlert) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDirectedCallHangupAlert.ProtoReflect.Descriptor instead.
func (*AgentDirectedCallHangupAlert) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{16}
}

func (x *AgentDirectedCallHangupAlert) GetExpireDuration() int64 {
	if x != nil {
		return x.ExpireDuration
	}
	return 0
}

func (x *AgentDirectedCallHangupAlert) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AgentDirectedCallHangupAlert) GetTargetAgentSession() *AgentSession {
	if x != nil {
		return x.TargetAgentSession
	}
	return nil
}

func (x *AgentDirectedCallHangupAlert) GetCallerSid() *CallerSid {
	if x != nil {
		return x.CallerSid
	}
	return nil
}

func (x *AgentDirectedCallHangupAlert) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AgentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the asterisk status
	Status int64 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	// the status enum
	StatusDesc AgentStatus_Enum `protobuf:"varint,3,opt,name=status_desc,json=statusDesc,proto3,enum=api.commons.AgentStatus_Enum" json:"status_desc,omitempty"`
	// if the agent is paused
	Paused bool `protobuf:"varint,4,opt,name=paused,proto3" json:"paused,omitempty"`
	// the queue the agent is in (client id)
	Queue string `protobuf:"bytes,5,opt,name=queue,proto3" json:"queue,omitempty"`
	// the voice session id
	CurrentSessionId int64 `protobuf:"varint,6,opt,name=current_session_id,json=currentSessionId,proto3" json:"current_session_id,omitempty"`
	// the time the status changed
	LastStatusChange int64 `protobuf:"varint,7,opt,name=last_status_change,json=lastStatusChange,proto3" json:"last_status_change,omitempty"`
	// if the agent is monitoring
	Monitoring bool `protobuf:"varint,8,opt,name=monitoring,proto3" json:"monitoring,omitempty"`
	// the number of calls the agent has taken
	CallsCount int64 `protobuf:"varint,9,opt,name=calls_count,json=callsCount,proto3" json:"calls_count,omitempty"`
	// the last sip code
	LastSipCode int64 `protobuf:"varint,10,opt,name=last_sip_code,json=lastSipCode,proto3" json:"last_sip_code,omitempty"`
	// if the agent is on call with a lost call
	AgentPeerIsLostCall bool `protobuf:"varint,11,opt,name=agent_peer_is_lost_call,json=agentPeerIsLostCall,proto3" json:"agent_peer_is_lost_call,omitempty"`
	// if the agent is disabled
	Disabled bool `protobuf:"varint,12,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// if the agent is on call with a call that was suspended
	CallerWasSuspended bool `protobuf:"varint,13,opt,name=caller_was_suspended,json=callerWasSuspended,proto3" json:"caller_was_suspended,omitempty"`
	// the list of transfer members
	TransferMembers []*TransferMember `protobuf:"bytes,14,rep,name=transfer_members,json=transferMembers,proto3" json:"transfer_members,omitempty"`
	// if the agent is on call with a direct to agent call
	AgentPeerIsDirectToAgent bool `protobuf:"varint,15,opt,name=agent_peer_is_direct_to_agent,json=agentPeerIsDirectToAgent,proto3" json:"agent_peer_is_direct_to_agent,omitempty"`
	// the user_id of the agent
	UserId string `protobuf:"bytes,16,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the agent_sid of the agent
	AgentSid int64 `protobuf:"varint,17,opt,name=agent_sid,json=agentSid,proto3" json:"agent_sid,omitempty"`
	// the asm_session_sid of the agent
	AsmSessionSid int64 `protobuf:"varint,18,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
	// indicates if the agent is muted or not
	AgentIsMuted bool `protobuf:"varint,19,opt,name=agent_is_muted,json=agentIsMuted,proto3" json:"agent_is_muted,omitempty"`
}

func (x *AgentState) Reset() {
	*x = AgentState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_acd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentState) ProtoMessage() {}

func (x *AgentState) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_acd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentState.ProtoReflect.Descriptor instead.
func (*AgentState) Descriptor() ([]byte, []int) {
	return file_api_commons_acd_proto_rawDescGZIP(), []int{17}
}

func (x *AgentState) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AgentState) GetStatusDesc() AgentStatus_Enum {
	if x != nil {
		return x.StatusDesc
	}
	return AgentStatus_UNAVALIABLE
}

func (x *AgentState) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *AgentState) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *AgentState) GetCurrentSessionId() int64 {
	if x != nil {
		return x.CurrentSessionId
	}
	return 0
}

func (x *AgentState) GetLastStatusChange() int64 {
	if x != nil {
		return x.LastStatusChange
	}
	return 0
}

func (x *AgentState) GetMonitoring() bool {
	if x != nil {
		return x.Monitoring
	}
	return false
}

func (x *AgentState) GetCallsCount() int64 {
	if x != nil {
		return x.CallsCount
	}
	return 0
}

func (x *AgentState) GetLastSipCode() int64 {
	if x != nil {
		return x.LastSipCode
	}
	return 0
}

func (x *AgentState) GetAgentPeerIsLostCall() bool {
	if x != nil {
		return x.AgentPeerIsLostCall
	}
	return false
}

func (x *AgentState) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *AgentState) GetCallerWasSuspended() bool {
	if x != nil {
		return x.CallerWasSuspended
	}
	return false
}

func (x *AgentState) GetTransferMembers() []*TransferMember {
	if x != nil {
		return x.TransferMembers
	}
	return nil
}

func (x *AgentState) GetAgentPeerIsDirectToAgent() bool {
	if x != nil {
		return x.AgentPeerIsDirectToAgent
	}
	return false
}

func (x *AgentState) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AgentState) GetAgentSid() int64 {
	if x != nil {
		return x.AgentSid
	}
	return 0
}

func (x *AgentState) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

func (x *AgentState) GetAgentIsMuted() bool {
	if x != nil {
		return x.AgentIsMuted
	}
	return false
}

var File_api_commons_acd_proto protoreflect.FileDescriptor

var file_api_commons_acd_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x01, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73,
	0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0xc1, 0x08, 0x0a, 0x0b,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb1, 0x08, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x4c, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x55,
	0x4e, 0x47, 0x55, 0x50, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f,
	0x59, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x57, 0x52, 0x41, 0x50, 0x55, 0x50, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45,
	0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x4c,
	0x45, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x55, 0x50, 0x10, 0x09, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x46, 0x54,
	0x45, 0x52, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52,
	0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x49,
	0x41, 0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x50,
	0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x50,
	0x42, 0x58, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x50,
	0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x50,
	0x42, 0x58, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x50,
	0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x50,
	0x42, 0x58, 0x5f, 0x57, 0x41, 0x53, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x0e, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x5f, 0x47, 0x55, 0x49, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x45, 0x50,
	0x41, 0x52, 0x45, 0x44, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x44, 0x10,
	0x11, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x14, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x41, 0x52,
	0x4d, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10,
	0x15, 0x12, 0x2b, 0x0a, 0x27, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x16, 0x12, 0x22,
	0x0a, 0x1e, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x17, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x45,
	0x52, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x18, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x42, 0x58, 0x5f,
	0x50, 0x4f, 0x50, 0x55, 0x50, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x19, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x45, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x1a, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x49, 0x4e,
	0x47, 0x10, 0x1b, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x55, 0x49, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10,
	0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x4f, 0x4d, 0x10, 0x1d, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x4f, 0x4d, 0x5f, 0x52, 0x49, 0x4e, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x1e, 0x12, 0x20, 0x0a, 0x1c,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x4f, 0x4d, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1f, 0x12, 0x28,
	0x0a, 0x24, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x50,
	0x41, 0x52, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x21, 0x12, 0x26,
	0x0a, 0x22, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x22, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x23, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x45, 0x52,
	0x10, 0x24, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45,
	0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f,
	0x4c, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x26, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4f, 0x4c, 0x44, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x27, 0x22,
	0xd9, 0x03, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xc8, 0x03, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41,
	0x56, 0x41, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x48, 0x55, 0x4e, 0x47, 0x55, 0x50, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45,
	0x45, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x4f,
	0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x42, 0x58, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x50, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x45, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c,
	0x44, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x57,
	0x41, 0x52, 0x4d, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e,
	0x57, 0x41, 0x52, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0d,
	0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x41,
	0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x44,
	0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x41,
	0x52, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x50,
	0x45, 0x45, 0x52, 0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x44, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x4c, 0x4c,
	0x45, 0x52, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x45, 0x44, 0x10, 0x13, 0x22, 0x4f, 0x0a, 0x08, 0x43,
	0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x43, 0x10, 0x04, 0x22, 0x3e, 0x0a, 0x0b,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x22, 0x2f, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x4f, 0x4c, 0x4c, 0x5f, 0x46, 0x52, 0x45, 0x45,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4f, 0x46, 0x54, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x22, 0x46, 0x0a, 0x0d,
	0x48, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x35, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4f, 0x46, 0x54, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x10, 0x02, 0x22, 0x9b, 0x0d, 0x0a, 0x18, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x22, 0xfe, 0x0c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55,
	0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x1d, 0x0a, 0x19, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x4e, 0x43,
	0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x49, 0x50,
	0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x43, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x43, 0x5f, 0x31, 0x30, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x16, 0x0a,
	0x12, 0x4d, 0x41, 0x43, 0x5f, 0x31, 0x30, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x55, 0x4e, 0x54, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x42, 0x58, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x42, 0x58, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50,
	0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x42, 0x58, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x0d,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x42, 0x58, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x0e,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x42, 0x58, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x0f, 0x12, 0x2d, 0x0a, 0x29, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x10,
	0x12, 0x25, 0x0a, 0x21, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x11, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x41, 0x52, 0x4d, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x12, 0x12, 0x22, 0x0a,
	0x1e, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10,
	0x13, 0x12, 0x29, 0x0a, 0x25, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x44,
	0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x27, 0x0a, 0x23,
	0x57, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x15, 0x12, 0x30, 0x0a, 0x2c, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x16, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x41, 0x52, 0x4d, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10,
	0x17, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x10, 0x18, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x4e,
	0x44, 0x10, 0x19, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4c, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x1a, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4c, 0x44, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x1b, 0x12, 0x22, 0x0a, 0x1e, 0x43,
	0x4f, 0x4c, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x1c, 0x12,
	0x29, 0x0a, 0x25, 0x43, 0x4f, 0x4c, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x53,
	0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1d, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f,
	0x4c, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x1e, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x10, 0x1f, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0x20, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x21, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f,
	0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x22, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x23, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x10, 0x24, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x42, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x25, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x42, 0x52, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x10, 0x26, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x44, 0x5f, 0x4c, 0x4f,
	0x47, 0x4f, 0x55, 0x54, 0x10, 0x27, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x44, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x28, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x45, 0x42, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x29, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x2a, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x48, 0x4f, 0x4c,
	0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x2b, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x10, 0x2c, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x55, 0x4e, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x2d, 0x12, 0x11,
	0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10,
	0x2e, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x48, 0x4f, 0x4c, 0x44, 0x10, 0x2f, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x30, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x31,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x32, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4f,
	0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x33, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x41, 0x52,
	0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x34, 0x12, 0x2e, 0x0a, 0x2a, 0x57, 0x41, 0x52,
	0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x35, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x41, 0x52,
	0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10,
	0x36, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x37, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x10, 0x38, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x10, 0x39, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x61, 0x72, 0x67, 0x65, 0x49,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x3a, 0x12, 0x13, 0x0a,
	0x0f, 0x42, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x65, 0x66, 0x74,
	0x10, 0x3b, 0x22, 0xd2, 0x0a, 0x0a, 0x15, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0xb8, 0x0a, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4e, 0x43, 0x4c, 0x5f, 0x41, 0x44,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x4c, 0x4c,
	0x45, 0x52, 0x5f, 0x48, 0x55, 0x4e, 0x47, 0x55, 0x50, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x57,
	0x41, 0x52, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x41,
	0x52, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10,
	0x05, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x06,
	0x12, 0x1b, 0x0a, 0x17, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x28, 0x0a,
	0x24, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f,
	0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x08, 0x12, 0x30, 0x0a, 0x2c, 0x57, 0x41, 0x52, 0x4d, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x41, 0x52,
	0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x57,
	0x41, 0x52, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x4f, 0x4c, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f,
	0x4c, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4c, 0x44, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4c,
	0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x11, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x4f, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x12, 0x12, 0x0e, 0x0a,
	0x0a, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x13, 0x12, 0x0c, 0x0a,
	0x08, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x15,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x10, 0x16, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x53, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x45, 0x44, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x53, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x19, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x10, 0x1a, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x53, 0x10, 0x1b, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x53, 0x10, 0x1c, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x1d,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x1e, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x43, 0x52, 0x55, 0x42, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x1f,
	0x12, 0x2c, 0x0a, 0x28, 0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x20, 0x12, 0x2d,
	0x0a, 0x29, 0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d,
	0x49, 0x4e, 0x47, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x21, 0x12, 0x2f, 0x0a,
	0x2b, 0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x49,
	0x4e, 0x47, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x22, 0x12, 0x2f,
	0x0a, 0x2b, 0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d,
	0x49, 0x4e, 0x47, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x23, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4c, 0x44,
	0x10, 0x24, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x25, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x41, 0x52, 0x4d, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x26, 0x12, 0x2a,
	0x0a, 0x26, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x27, 0x12, 0x2e, 0x0a, 0x2a, 0x57, 0x41,
	0x52, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x28, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x41,
	0x52, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52,
	0x10, 0x29, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45,
	0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x2a,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x2b, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x2c, 0x22, 0x6e, 0x0a, 0x17, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x53, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x4e, 0x43, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0xc1, 0x1b, 0x0a, 0x11, 0x48, 0x75, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x22, 0xab, 0x1b,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x44, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f,
	0x47, 0x55, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x54,
	0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x53, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57,
	0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x53,
	0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x1c, 0x0a,
	0x18, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x08, 0x12, 0x26,
	0x0a, 0x22, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f,
	0x44, 0x4e, 0x43, 0x4c, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x5f, 0x49, 0x50, 0x53, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x0b, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x43, 0x4f, 0x4d, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x41, 0x55, 0x53,
	0x45, 0x10, 0x0f, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47,
	0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x11, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x41, 0x4c, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x10, 0x12, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44,
	0x49, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x13, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x15, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x16, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x44, 0x10,
	0x18, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x4f, 0x4e, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x19, 0x12,
	0x20, 0x0a, 0x1c, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10,
	0x1a, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x1b, 0x12,
	0x25, 0x0a, 0x21, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x1c, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x44, 0x4e, 0x43, 0x4c, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x1d,
	0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x44, 0x4e, 0x43, 0x4c,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x12, 0x28, 0x0a,
	0x24, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x4e, 0x43, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1f, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x44,
	0x4e, 0x43, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x20,
	0x12, 0x29, 0x0a, 0x25, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x4e, 0x43, 0x4c, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x21, 0x12, 0x28, 0x0a, 0x24, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x4e, 0x43, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x22, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x42,
	0x41, 0x43, 0x4b, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x23, 0x12, 0x20, 0x0a,
	0x1c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x24, 0x12,
	0x25, 0x0a, 0x21, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x25, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41,
	0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x26, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x49, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x10, 0x27, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x49,
	0x56, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10,
	0x28, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x5f, 0x5a, 0x49, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x29, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52,
	0x10, 0x2a, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x4f, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x44, 0x4e, 0x43, 0x4c, 0x10, 0x2b, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41,
	0x55, 0x53, 0x45, 0x10, 0x2c, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x2d,
	0x12, 0x27, 0x0a, 0x23, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4d,
	0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x2e, 0x12, 0x36, 0x0a, 0x32, 0x48, 0x4f, 0x4c,
	0x44, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x5f, 0x48, 0x55, 0x4e,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x2f, 0x12, 0x35, 0x0a, 0x31, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f,
	0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x5f, 0x48, 0x55, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x30, 0x12, 0x2b, 0x0a, 0x27, 0x48, 0x55, 0x4e, 0x54,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x10, 0x31, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x55, 0x4e, 0x54, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x32, 0x12, 0x17, 0x0a, 0x13,
	0x48, 0x55, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x10, 0x33, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x34, 0x12, 0x1d,
	0x0a, 0x19, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x5f, 0x44, 0x4e, 0x43, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x35, 0x12, 0x21, 0x0a,
	0x1d, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x36,
	0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10,
	0x37, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x4e, 0x55, 0x10, 0x38, 0x12, 0x29,
	0x0a, 0x25, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x39, 0x12, 0x35, 0x0a, 0x31, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x4e, 0x55, 0x10, 0x3a,
	0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x42, 0x4f,
	0x4f, 0x4b, 0x10, 0x3b, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44,
	0x49, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x48, 0x4f, 0x4e,
	0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x3c, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x57,
	0x48, 0x49, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x3d, 0x12, 0x23, 0x0a, 0x1f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52,
	0x49, 0x44, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x43, 0x52, 0x55, 0x42, 0x10, 0x3e,
	0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x40, 0x12, 0x1e, 0x0a,
	0x1a, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x43, 0x52,
	0x55, 0x42, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x41, 0x12, 0x21, 0x0a,
	0x1d, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x42,
	0x12, 0x27, 0x0a, 0x23, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x43, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x44, 0x12, 0x21,
	0x0a, 0x1d, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10,
	0x45, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x53, 0x10, 0x46, 0x12, 0x2d, 0x0a, 0x29, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x47, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f,
	0x44, 0x4e, 0x43, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x48, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x49, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x4a, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x45, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x4b, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x10, 0x4c, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x4d, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45,
	0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x4e, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x45, 0x44, 0x10, 0x4f, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x50, 0x12, 0x22, 0x0a, 0x1e, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x51, 0x12,
	0x2a, 0x0a, 0x26, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x52, 0x12, 0x2f, 0x0a, 0x2b, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x53, 0x12, 0x2e, 0x0a, 0x2a,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x4e, 0x55, 0x10, 0x54, 0x12, 0x35, 0x0a, 0x31,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x42, 0x4f, 0x4f,
	0x4b, 0x10, 0x55, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x53, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x56, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x57, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x49,
	0x44, 0x10, 0x58, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x10, 0x59, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x5a, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x41,
	0x4e, 0x43, 0x45, 0x44, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x54, 0x49, 0x54,
	0x4c, 0x45, 0x10, 0x5b, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x10, 0x5c, 0x12,
	0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x10, 0x5d, 0x12, 0x26, 0x0a, 0x22, 0x48, 0x55, 0x4e, 0x54, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x5e, 0x12, 0x26,
	0x0a, 0x22, 0x52, 0x45, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x53, 0x10, 0x5f, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x60, 0x12,
	0x12, 0x0a, 0x0e, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x53, 0x10, 0x61, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x42, 0x58, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x62, 0x22, 0x3f, 0x0a, 0x0d, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2e, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x02, 0x22, 0xc7, 0x02, 0x0a,
	0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x53, 0x69, 0x64, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb1, 0x02, 0x0a, 0x0a, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x11, 0x62,
	0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x60, 0x0a, 0x15, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x69, 0x6e, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x5d, 0x0a, 0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x12, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x67, 0x75,
	0x70, 0x42, 0x07, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x1b, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4b, 0x0a,
	0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xe2, 0x02, 0x0a, 0x1d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x69, 0x6e, 0x67, 0x69, 0x6e,
	0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4b, 0x0a, 0x14, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x69, 0x64, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x1c, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x61, 0x6e, 0x67, 0x75, 0x70, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4b, 0x0a,
	0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x53, 0x69, 0x64, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x69,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xe4, 0x05, 0x0a, 0x0a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x70, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x49, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x57,
	0x61, 0x73, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x1d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73,
	0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x6d,
	0x75, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x2a, 0xb7, 0x01, 0x0a, 0x09, 0x41, 0x43, 0x44,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x18, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x49, 0x4e, 0x10, 0x84, 0x20, 0x12, 0x1c, 0x0a, 0x17, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x10, 0x8e, 0x20, 0x12, 0x1c, 0x0a, 0x17, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0xe8, 0x20, 0x12, 0x19, 0x0a, 0x14, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x45, 0x44, 0x10, 0xcc, 0x21, 0x12, 0x23, 0x0a,
	0x1e, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0xb0, 0x22, 0x2a, 0xa4, 0x01, 0x0a, 0x15, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x4c, 0x6f, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50,
	0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x45,
	0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x10, 0x06, 0x2a, 0x2e, 0x0a, 0x08, 0x48, 0x6f, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x10, 0x02, 0x2a, 0xfa, 0x01, 0x0a, 0x16, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x26, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x58, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x72, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0xa2, 0x02, 0x0a, 0x09, 0x44,
	0x54, 0x4d, 0x46, 0x44, 0x69, 0x67, 0x69, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x4d, 0x46,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x4d,
	0x46, 0x44, 0x69, 0x67, 0x69, 0x74, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54,
	0x4d, 0x46, 0x44, 0x69, 0x67, 0x69, 0x74, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44,
	0x54, 0x4d, 0x46, 0x44, 0x69, 0x67, 0x69, 0x74, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x44, 0x54, 0x4d, 0x46, 0x44, 0x69, 0x67, 0x69, 0x74, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x54, 0x4d, 0x46, 0x44, 0x69, 0x67, 0x69, 0x74, 0x5f, 0x35, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x54, 0x4d, 0x46, 0x44, 0x69, 0x67, 0x69, 0x74, 0x5f, 0x36, 0x10, 0x06, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x4d, 0x46, 0x44, 0x69, 0x67, 0x69, 0x74, 0x5f, 0x37, 0x10, 0x07,
	0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x4d, 0x46, 0x44, 0x69, 0x67, 0x69, 0x74, 0x5f, 0x38, 0x10,
	0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x4d, 0x46, 0x44, 0x69, 0x67, 0x69, 0x74, 0x5f, 0x39,
	0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x4d, 0x46, 0x44, 0x69, 0x67, 0x69, 0x74, 0x5f,
	0x41, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x4d, 0x46, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x5f, 0x42, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x4d, 0x46, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x5f, 0x43, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x4d, 0x46, 0x44, 0x69, 0x67,
	0x69, 0x74, 0x5f, 0x44, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x54, 0x4d, 0x46, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x54,
	0x4d, 0x46, 0x44, 0x69, 0x67, 0x69, 0x74, 0x5f, 0x50, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0f, 0x42,
	0x90, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x42, 0x08, 0x41, 0x63, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x58, 0xaa, 0x02, 0x0b,
	0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xca, 0x02, 0x0b, 0x41, 0x70,
	0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xe2, 0x02, 0x17, 0x41, 0x70, 0x69, 0x5c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_acd_proto_rawDescOnce sync.Once
	file_api_commons_acd_proto_rawDescData = file_api_commons_acd_proto_rawDesc
)

func file_api_commons_acd_proto_rawDescGZIP() []byte {
	file_api_commons_acd_proto_rawDescOnce.Do(func() {
		file_api_commons_acd_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_acd_proto_rawDescData)
	})
	return file_api_commons_acd_proto_rawDescData
}

var file_api_commons_acd_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_api_commons_acd_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_api_commons_acd_proto_goTypes = []interface{}{
	(ACDStatus)(0),                        // 0: api.commons.ACDStatus
	(AgentCallLogCallEnded)(0),            // 1: api.commons.AgentCallLogCallEnded
	(HoldType)(0),                         // 2: api.commons.HoldType
	(QueuedNotificationType)(0),           // 3: api.commons.QueuedNotificationType
	(TransferMemberType)(0),               // 4: api.commons.TransferMemberType
	(DTMFDigit)(0),                        // 5: api.commons.DTMFDigit
	(AgentStatus_Enum)(0),                 // 6: api.commons.AgentStatus.Enum
	(CallerStatus_Enum)(0),                // 7: api.commons.CallerStatus.Enum
	(CallType_Enum)(0),                    // 8: api.commons.CallType.Enum
	(AgentDialIn_Enum)(0),                 // 9: api.commons.AgentDialIn.Enum
	(HuntGroupType_Enum)(0),               // 10: api.commons.HuntGroupType.Enum
	(AgentSessionLogActionKey_Enum)(0),    // 11: api.commons.AgentSessionLogActionKey.Enum
	(AgentCallLogActionKey_Enum)(0),       // 12: api.commons.AgentCallLogActionKey.Enum
	(AgentCallLogActionValue_Enum)(0),     // 13: api.commons.AgentCallLogActionValue.Enum
	(HuntGroupParamKey_Enum)(0),           // 14: api.commons.HuntGroupParamKey.Enum
	(ReplaceConfig_Enum)(0),               // 15: api.commons.ReplaceConfig.Enum
	(*AgentSession)(nil),                  // 16: api.commons.AgentSession
	(*CallerSid)(nil),                     // 17: api.commons.CallerSid
	(*AgentStatus)(nil),                   // 18: api.commons.AgentStatus
	(*CallerStatus)(nil),                  // 19: api.commons.CallerStatus
	(*CallType)(nil),                      // 20: api.commons.CallType
	(*AgentDialIn)(nil),                   // 21: api.commons.AgentDialIn
	(*HuntGroupType)(nil),                 // 22: api.commons.HuntGroupType
	(*AgentSessionLogActionKey)(nil),      // 23: api.commons.AgentSessionLogActionKey
	(*AgentCallLogActionKey)(nil),         // 24: api.commons.AgentCallLogActionKey
	(*AgentCallLogActionValue)(nil),       // 25: api.commons.AgentCallLogActionValue
	(*HuntGroupParamKey)(nil),             // 26: api.commons.HuntGroupParamKey
	(*ReplaceConfig)(nil),                 // 27: api.commons.ReplaceConfig
	(*TransferMember)(nil),                // 28: api.commons.TransferMember
	(*AgentAlert)(nil),                    // 29: api.commons.AgentAlert
	(*AgentBackofficeMessageAlert)(nil),   // 30: api.commons.AgentBackofficeMessageAlert
	(*AgentDirectedCallRingingAlert)(nil), // 31: api.commons.AgentDirectedCallRingingAlert
	(*AgentDirectedCallHangupAlert)(nil),  // 32: api.commons.AgentDirectedCallHangupAlert
	(*AgentState)(nil),                    // 33: api.commons.AgentState
	(*timestamppb.Timestamp)(nil),         // 34: google.protobuf.Timestamp
}
var file_api_commons_acd_proto_depIdxs = []int32{
	8,  // 0: api.commons.CallerSid.type:type_name -> api.commons.CallType.Enum
	4,  // 1: api.commons.TransferMember.member_type:type_name -> api.commons.TransferMemberType
	16, // 2: api.commons.TransferMember.agent_session:type_name -> api.commons.AgentSession
	17, // 3: api.commons.TransferMember.caller_sid:type_name -> api.commons.CallerSid
	30, // 4: api.commons.AgentAlert.backoffice_message:type_name -> api.commons.AgentBackofficeMessageAlert
	31, // 5: api.commons.AgentAlert.directed_call_ringing:type_name -> api.commons.AgentDirectedCallRingingAlert
	32, // 6: api.commons.AgentAlert.directed_call_hangup:type_name -> api.commons.AgentDirectedCallHangupAlert
	34, // 7: api.commons.AgentBackofficeMessageAlert.timestamp:type_name -> google.protobuf.Timestamp
	16, // 8: api.commons.AgentBackofficeMessageAlert.target_agent_session:type_name -> api.commons.AgentSession
	34, // 9: api.commons.AgentDirectedCallRingingAlert.timestamp:type_name -> google.protobuf.Timestamp
	16, // 10: api.commons.AgentDirectedCallRingingAlert.target_agent_session:type_name -> api.commons.AgentSession
	17, // 11: api.commons.AgentDirectedCallRingingAlert.caller_sid:type_name -> api.commons.CallerSid
	34, // 12: api.commons.AgentDirectedCallHangupAlert.timestamp:type_name -> google.protobuf.Timestamp
	16, // 13: api.commons.AgentDirectedCallHangupAlert.target_agent_session:type_name -> api.commons.AgentSession
	17, // 14: api.commons.AgentDirectedCallHangupAlert.caller_sid:type_name -> api.commons.CallerSid
	6,  // 15: api.commons.AgentState.status_desc:type_name -> api.commons.AgentStatus.Enum
	28, // 16: api.commons.AgentState.transfer_members:type_name -> api.commons.TransferMember
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_api_commons_acd_proto_init() }
func file_api_commons_acd_proto_init() {
	if File_api_commons_acd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_commons_acd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallerSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentDialIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuntGroupType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentSessionLogActionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentCallLogActionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentCallLogActionValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuntGroupParamKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentBackofficeMessageAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentDirectedCallRingingAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentDirectedCallHangupAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_acd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_commons_acd_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*TransferMember_AgentSession)(nil),
		(*TransferMember_CallerSid)(nil),
		(*TransferMember_OutboundId)(nil),
	}
	file_api_commons_acd_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*AgentAlert_BackofficeMessage)(nil),
		(*AgentAlert_DirectedCallRinging)(nil),
		(*AgentAlert_DirectedCallHangup)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_acd_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_acd_proto_goTypes,
		DependencyIndexes: file_api_commons_acd_proto_depIdxs,
		EnumInfos:         file_api_commons_acd_proto_enumTypes,
		MessageInfos:      file_api_commons_acd_proto_msgTypes,
	}.Build()
	File_api_commons_acd_proto = out.File
	file_api_commons_acd_proto_rawDesc = nil
	file_api_commons_acd_proto_goTypes = nil
	file_api_commons_acd_proto_depIdxs = nil
}
