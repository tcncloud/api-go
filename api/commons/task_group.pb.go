// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/commons/task_group.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskGroupStatus int32

const (
	TaskGroupStatus_TG_UNKNOWN                            TaskGroupStatus = 0
	TaskGroupStatus_TG_PREPARE                            TaskGroupStatus = 1000 // "TG_PREPARE", "Task Group is being prepared for scheduler"),
	TaskGroupStatus_TG_SCHEDULED                          TaskGroupStatus = 1100 // "TG_SCHEDULED", "Task Group is waiting for scheduler"),
	TaskGroupStatus_TG_SCHEDULED_LINKING                  TaskGroupStatus = 1110 // "TG_SCHEDULED_LINKING", "Task Group is scheduling a link campaign"),
	TaskGroupStatus_TG_SCHEDULED_PAUSED                   TaskGroupStatus = 1120 // "TG_SCHEDULED_PAUSED", "Task Group will be set to paused when scheduled"),
	TaskGroupStatus_TG_RUNNING                            TaskGroupStatus = 1200 // "TG_RUNNING", "Task Group is currently executing calls"),
	TaskGroupStatus_TG_PAUSED                             TaskGroupStatus = 1210 // "TG_PAUSED", "Task Group has been signaled to pause calls until further notice"),
	TaskGroupStatus_TG_WAITING                            TaskGroupStatus = 1220 // "TG_WAITING", "Task Group has been signaled to wait until the schedule rules it will allow it to run again"),
	TaskGroupStatus_TG_COMPLETED                          TaskGroupStatus = 1300 // "TG_COMPLETED", "Task Group completed normally"),
	TaskGroupStatus_TG_CANCELLED_TIMEOUT                  TaskGroupStatus = 1310 // "TG_CANCELLED_TIMEOUT", "Task Group was cancelled due to time restrictions"),
	TaskGroupStatus_TG_CANCELLED_USER                     TaskGroupStatus = 1320 // "TG_CANCELLED_USER", "Task Group was cancelled by login belonging to client"),
	TaskGroupStatus_TG_CANCELLED_ADMIN                    TaskGroupStatus = 1330 // "TG_CANCELLED_ADMIN", "Task Group was cancelled by some login not belonging to client with permissions"),
	TaskGroupStatus_TG_SUMMED_COMPLETED                   TaskGroupStatus = 1400 // "TG_SUMMED_COMPLETED", "Task Group completed normally and is summed"),
	TaskGroupStatus_TG_SUMMED_CANCELLED_TIMEOUT           TaskGroupStatus = 1410 // "TG_SUMMED_CANCELLED_TIMEOUT", "Task Group timedout and is summed"),
	TaskGroupStatus_TG_SUMMED_CANCELLED_USER              TaskGroupStatus = 1420 // "TG_SUMMED_CANCELLED_USER", "Task Group was cancelled by login belonging to client and is summed"),
	TaskGroupStatus_TG_SUMMED_CANCELLED_ADMIN             TaskGroupStatus = 1430 // "TG_SUMMED_CANCELLED_ADMIN", "Task Group was cancelled by login not belonging to client and is summed")
	TaskGroupStatus_TG_ACCOUNTINGEXPORT_COMPLETED         TaskGroupStatus = 1500 // "TG_SUMMED_COMPLETED", "Task Group completed normally, summed normally, and has been exported into the accounting packages
	TaskGroupStatus_TG_ACCOUNTINGEXPORT_CANCELLED_TIMEOUT TaskGroupStatus = 1510 // "TG_SUMMED_CANCELLED_TIMEOUT", "Task Group timedout, was summed normally, and has been exported into the accounting packages
	TaskGroupStatus_TG_ACCOUNTINGEXPORT_CANCELLED_USER    TaskGroupStatus = 1520 // "TG_SUMMED_CANCELLED_USER", "Task Group was cancelled by login belonging to client, was summed normally, and has been exported into the accounting packages
	TaskGroupStatus_TG_ACCOUNTINGEXPORT_CANCELLED_ADMIN   TaskGroupStatus = 1530 // "TG_SUMMED_CANCELLED_ADMIN", "Task Group was cancelled by login not belonging to client, was summed normally, and has been exported into the accounting packages
)

// Enum value maps for TaskGroupStatus.
var (
	TaskGroupStatus_name = map[int32]string{
		0:    "TG_UNKNOWN",
		1000: "TG_PREPARE",
		1100: "TG_SCHEDULED",
		1110: "TG_SCHEDULED_LINKING",
		1120: "TG_SCHEDULED_PAUSED",
		1200: "TG_RUNNING",
		1210: "TG_PAUSED",
		1220: "TG_WAITING",
		1300: "TG_COMPLETED",
		1310: "TG_CANCELLED_TIMEOUT",
		1320: "TG_CANCELLED_USER",
		1330: "TG_CANCELLED_ADMIN",
		1400: "TG_SUMMED_COMPLETED",
		1410: "TG_SUMMED_CANCELLED_TIMEOUT",
		1420: "TG_SUMMED_CANCELLED_USER",
		1430: "TG_SUMMED_CANCELLED_ADMIN",
		1500: "TG_ACCOUNTINGEXPORT_COMPLETED",
		1510: "TG_ACCOUNTINGEXPORT_CANCELLED_TIMEOUT",
		1520: "TG_ACCOUNTINGEXPORT_CANCELLED_USER",
		1530: "TG_ACCOUNTINGEXPORT_CANCELLED_ADMIN",
	}
	TaskGroupStatus_value = map[string]int32{
		"TG_UNKNOWN":                            0,
		"TG_PREPARE":                            1000,
		"TG_SCHEDULED":                          1100,
		"TG_SCHEDULED_LINKING":                  1110,
		"TG_SCHEDULED_PAUSED":                   1120,
		"TG_RUNNING":                            1200,
		"TG_PAUSED":                             1210,
		"TG_WAITING":                            1220,
		"TG_COMPLETED":                          1300,
		"TG_CANCELLED_TIMEOUT":                  1310,
		"TG_CANCELLED_USER":                     1320,
		"TG_CANCELLED_ADMIN":                    1330,
		"TG_SUMMED_COMPLETED":                   1400,
		"TG_SUMMED_CANCELLED_TIMEOUT":           1410,
		"TG_SUMMED_CANCELLED_USER":              1420,
		"TG_SUMMED_CANCELLED_ADMIN":             1430,
		"TG_ACCOUNTINGEXPORT_COMPLETED":         1500,
		"TG_ACCOUNTINGEXPORT_CANCELLED_TIMEOUT": 1510,
		"TG_ACCOUNTINGEXPORT_CANCELLED_USER":    1520,
		"TG_ACCOUNTINGEXPORT_CANCELLED_ADMIN":   1530,
	}
)

func (x TaskGroupStatus) Enum() *TaskGroupStatus {
	p := new(TaskGroupStatus)
	*p = x
	return p
}

func (x TaskGroupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskGroupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_task_group_proto_enumTypes[0].Descriptor()
}

func (TaskGroupStatus) Type() protoreflect.EnumType {
	return &file_api_commons_task_group_proto_enumTypes[0]
}

func (x TaskGroupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskGroupStatus.Descriptor instead.
func (TaskGroupStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_task_group_proto_rawDescGZIP(), []int{0}
}

var File_api_commons_task_group_proto protoreflect.FileDescriptor

const file_api_commons_task_group_proto_rawDesc = "" +
	"\n" +
	"\x1capi/commons/task_group.proto\x12\vapi.commons*\xa9\x04\n" +
	"\x0fTaskGroupStatus\x12\x0e\n" +
	"\n" +
	"TG_UNKNOWN\x10\x00\x12\x0f\n" +
	"\n" +
	"TG_PREPARE\x10\xe8\a\x12\x11\n" +
	"\fTG_SCHEDULED\x10\xcc\b\x12\x19\n" +
	"\x14TG_SCHEDULED_LINKING\x10\xd6\b\x12\x18\n" +
	"\x13TG_SCHEDULED_PAUSED\x10\xe0\b\x12\x0f\n" +
	"\n" +
	"TG_RUNNING\x10\xb0\t\x12\x0e\n" +
	"\tTG_PAUSED\x10\xba\t\x12\x0f\n" +
	"\n" +
	"TG_WAITING\x10\xc4\t\x12\x11\n" +
	"\fTG_COMPLETED\x10\x94\n" +
	"\x12\x19\n" +
	"\x14TG_CANCELLED_TIMEOUT\x10\x9e\n" +
	"\x12\x16\n" +
	"\x11TG_CANCELLED_USER\x10\xa8\n" +
	"\x12\x17\n" +
	"\x12TG_CANCELLED_ADMIN\x10\xb2\n" +
	"\x12\x18\n" +
	"\x13TG_SUMMED_COMPLETED\x10\xf8\n" +
	"\x12 \n" +
	"\x1bTG_SUMMED_CANCELLED_TIMEOUT\x10\x82\v\x12\x1d\n" +
	"\x18TG_SUMMED_CANCELLED_USER\x10\x8c\v\x12\x1e\n" +
	"\x19TG_SUMMED_CANCELLED_ADMIN\x10\x96\v\x12\"\n" +
	"\x1dTG_ACCOUNTINGEXPORT_COMPLETED\x10\xdc\v\x12*\n" +
	"%TG_ACCOUNTINGEXPORT_CANCELLED_TIMEOUT\x10\xe6\v\x12'\n" +
	"\"TG_ACCOUNTINGEXPORT_CANCELLED_USER\x10\xf0\v\x12(\n" +
	"#TG_ACCOUNTINGEXPORT_CANCELLED_ADMIN\x10\xfa\vB\x96\x01\n" +
	"\x0fcom.api.commonsB\x0eTaskGroupProtoP\x01Z&github.com/tcncloud/api-go/api/commons\xa2\x02\x03ACX\xaa\x02\vApi.Commons\xca\x02\vApi\\Commons\xe2\x02\x17Api\\Commons\\GPBMetadata\xea\x02\fApi::Commonsb\x06proto3"

var (
	file_api_commons_task_group_proto_rawDescOnce sync.Once
	file_api_commons_task_group_proto_rawDescData []byte
)

func file_api_commons_task_group_proto_rawDescGZIP() []byte {
	file_api_commons_task_group_proto_rawDescOnce.Do(func() {
		file_api_commons_task_group_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_commons_task_group_proto_rawDesc), len(file_api_commons_task_group_proto_rawDesc)))
	})
	return file_api_commons_task_group_proto_rawDescData
}

var file_api_commons_task_group_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_commons_task_group_proto_goTypes = []any{
	(TaskGroupStatus)(0), // 0: api.commons.TaskGroupStatus
}
var file_api_commons_task_group_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_commons_task_group_proto_init() }
func file_api_commons_task_group_proto_init() {
	if File_api_commons_task_group_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_commons_task_group_proto_rawDesc), len(file_api_commons_task_group_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_task_group_proto_goTypes,
		DependencyIndexes: file_api_commons_task_group_proto_depIdxs,
		EnumInfos:         file_api_commons_task_group_proto_enumTypes,
	}.Build()
	File_api_commons_task_group_proto = out.File
	file_api_commons_task_group_proto_goTypes = nil
	file_api_commons_task_group_proto_depIdxs = nil
}
