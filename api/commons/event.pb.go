// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/commons/event.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// this event will be depricated and asmevent will be used instead
type Event struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	State     StatusState            `protobuf:"varint,1,opt,name=state,proto3,enum=api.commons.StatusState" json:"state,omitempty"`
	EventTime int64                  `protobuf:"varint,2,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// Types that are valid to be assigned to Event:
	//
	//	*Event_ActivatedConversationEvent
	//	*Event_DeactivatedConversationEvent
	//	*Event_SentMessageEvent
	//	*Event_SendStatusEvent
	//	*Event_PauseEvent
	//	*Event_ResumeEvent
	Event         isEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_api_commons_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_api_commons_event_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetState() StatusState {
	if x != nil {
		return x.State
	}
	return StatusState_STATUS_STATE_UNKNOWN
}

func (x *Event) GetEventTime() int64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (x *Event) GetEvent() isEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Event) GetActivatedConversationEvent() *ActivatedConversationEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_ActivatedConversationEvent); ok {
			return x.ActivatedConversationEvent
		}
	}
	return nil
}

func (x *Event) GetDeactivatedConversationEvent() *DeactivatedConversationEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_DeactivatedConversationEvent); ok {
			return x.DeactivatedConversationEvent
		}
	}
	return nil
}

func (x *Event) GetSentMessageEvent() *SentMessageEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_SentMessageEvent); ok {
			return x.SentMessageEvent
		}
	}
	return nil
}

func (x *Event) GetSendStatusEvent() *SendStatusEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_SendStatusEvent); ok {
			return x.SendStatusEvent
		}
	}
	return nil
}

func (x *Event) GetPauseEvent() *PauseEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_PauseEvent); ok {
			return x.PauseEvent
		}
	}
	return nil
}

func (x *Event) GetResumeEvent() *ResumeEvent {
	if x != nil {
		if x, ok := x.Event.(*Event_ResumeEvent); ok {
			return x.ResumeEvent
		}
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_ActivatedConversationEvent struct {
	ActivatedConversationEvent *ActivatedConversationEvent `protobuf:"bytes,5,opt,name=activated_conversation_event,json=activatedConversationEvent,proto3,oneof"`
}

type Event_DeactivatedConversationEvent struct {
	DeactivatedConversationEvent *DeactivatedConversationEvent `protobuf:"bytes,6,opt,name=deactivated_conversation_event,json=deactivatedConversationEvent,proto3,oneof"`
}

type Event_SentMessageEvent struct {
	SentMessageEvent *SentMessageEvent `protobuf:"bytes,7,opt,name=sent_message_event,json=sentMessageEvent,proto3,oneof"`
}

type Event_SendStatusEvent struct {
	// An event to indicate that the status has changed
	SendStatusEvent *SendStatusEvent `protobuf:"bytes,8,opt,name=send_status_event,json=sendStatusEvent,proto3,oneof"`
}

type Event_PauseEvent struct {
	PauseEvent *PauseEvent `protobuf:"bytes,9,opt,name=pause_event,json=pauseEvent,proto3,oneof"`
}

type Event_ResumeEvent struct {
	ResumeEvent *ResumeEvent `protobuf:"bytes,10,opt,name=resume_event,json=resumeEvent,proto3,oneof"`
}

func (*Event_ActivatedConversationEvent) isEvent_Event() {}

func (*Event_DeactivatedConversationEvent) isEvent_Event() {}

func (*Event_SentMessageEvent) isEvent_Event() {}

func (*Event_SendStatusEvent) isEvent_Event() {}

func (*Event_PauseEvent) isEvent_Event() {}

func (*Event_ResumeEvent) isEvent_Event() {}

type ActivatedConversationEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conversation  *OmniConversation      `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivatedConversationEvent) Reset() {
	*x = ActivatedConversationEvent{}
	mi := &file_api_commons_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivatedConversationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivatedConversationEvent) ProtoMessage() {}

func (x *ActivatedConversationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivatedConversationEvent.ProtoReflect.Descriptor instead.
func (*ActivatedConversationEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_event_proto_rawDescGZIP(), []int{1}
}

func (x *ActivatedConversationEvent) GetConversation() *OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

type DeactivatedConversationEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conversation  *OmniConversation      `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeactivatedConversationEvent) Reset() {
	*x = DeactivatedConversationEvent{}
	mi := &file_api_commons_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeactivatedConversationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivatedConversationEvent) ProtoMessage() {}

func (x *DeactivatedConversationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivatedConversationEvent.ProtoReflect.Descriptor instead.
func (*DeactivatedConversationEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_event_proto_rawDescGZIP(), []int{2}
}

func (x *DeactivatedConversationEvent) GetConversation() *OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

type SentMessageEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the time between the first customer message from the last set of customer messages and the current agent message
	// this will be 0 for subsequest agent messages. i.e. the agent sends more than one message before the customer respnds
	ResponseTimeSeconds int64 `protobuf:"varint,1,opt,name=response_time_seconds,json=responseTimeSeconds,proto3" json:"response_time_seconds,omitempty"`
	// if this is the first agent message in this set of agent messages
	IsInitialAgentMessage bool `protobuf:"varint,2,opt,name=is_initial_agent_message,json=isInitialAgentMessage,proto3" json:"is_initial_agent_message,omitempty"`
	// which conversation this message was sent in
	Conversation  *OmniConversation `protobuf:"bytes,3,opt,name=conversation,proto3" json:"conversation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SentMessageEvent) Reset() {
	*x = SentMessageEvent{}
	mi := &file_api_commons_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentMessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentMessageEvent) ProtoMessage() {}

func (x *SentMessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentMessageEvent.ProtoReflect.Descriptor instead.
func (*SentMessageEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_event_proto_rawDescGZIP(), []int{3}
}

func (x *SentMessageEvent) GetResponseTimeSeconds() int64 {
	if x != nil {
		return x.ResponseTimeSeconds
	}
	return 0
}

func (x *SentMessageEvent) GetIsInitialAgentMessage() bool {
	if x != nil {
		return x.IsInitialAgentMessage
	}
	return false
}

func (x *SentMessageEvent) GetConversation() *OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

// Indicate that the status has changed
type SendStatusEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the status to send
	Status        StatusState `protobuf:"varint,1,opt,name=status,proto3,enum=api.commons.StatusState" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendStatusEvent) Reset() {
	*x = SendStatusEvent{}
	mi := &file_api_commons_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendStatusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendStatusEvent) ProtoMessage() {}

func (x *SendStatusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendStatusEvent.ProtoReflect.Descriptor instead.
func (*SendStatusEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_event_proto_rawDescGZIP(), []int{4}
}

func (x *SendStatusEvent) GetStatus() StatusState {
	if x != nil {
		return x.Status
	}
	return StatusState_STATUS_STATE_UNKNOWN
}

// AsmEvent
type AsmEvent struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	State     StatusState            `protobuf:"varint,1,opt,name=state,proto3,enum=api.commons.StatusState" json:"state,omitempty"`
	EventTime int64                  `protobuf:"varint,2,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// Types that are valid to be assigned to Event:
	//
	//	*AsmEvent_ActivatedConversationAsmEvent
	//	*AsmEvent_DeactivatedConversationAsmEvent
	//	*AsmEvent_SentMessageAsmEvent
	//	*AsmEvent_SendStatusAsmEvent
	//	*AsmEvent_PauseEvent
	//	*AsmEvent_ResumeEvent
	//	*AsmEvent_ConversationPulledEvent
	Event         isAsmEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsmEvent) Reset() {
	*x = AsmEvent{}
	mi := &file_api_commons_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsmEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsmEvent) ProtoMessage() {}

func (x *AsmEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsmEvent.ProtoReflect.Descriptor instead.
func (*AsmEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_event_proto_rawDescGZIP(), []int{5}
}

func (x *AsmEvent) GetState() StatusState {
	if x != nil {
		return x.State
	}
	return StatusState_STATUS_STATE_UNKNOWN
}

func (x *AsmEvent) GetEventTime() int64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (x *AsmEvent) GetEvent() isAsmEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *AsmEvent) GetActivatedConversationAsmEvent() *ActivatedConversationAsmEvent {
	if x != nil {
		if x, ok := x.Event.(*AsmEvent_ActivatedConversationAsmEvent); ok {
			return x.ActivatedConversationAsmEvent
		}
	}
	return nil
}

func (x *AsmEvent) GetDeactivatedConversationAsmEvent() *DeactivatedConversationAsmEvent {
	if x != nil {
		if x, ok := x.Event.(*AsmEvent_DeactivatedConversationAsmEvent); ok {
			return x.DeactivatedConversationAsmEvent
		}
	}
	return nil
}

func (x *AsmEvent) GetSentMessageAsmEvent() *SentMessageAsmEvent {
	if x != nil {
		if x, ok := x.Event.(*AsmEvent_SentMessageAsmEvent); ok {
			return x.SentMessageAsmEvent
		}
	}
	return nil
}

func (x *AsmEvent) GetSendStatusAsmEvent() *SendStatusAsmEvent {
	if x != nil {
		if x, ok := x.Event.(*AsmEvent_SendStatusAsmEvent); ok {
			return x.SendStatusAsmEvent
		}
	}
	return nil
}

func (x *AsmEvent) GetPauseEvent() *PauseEvent {
	if x != nil {
		if x, ok := x.Event.(*AsmEvent_PauseEvent); ok {
			return x.PauseEvent
		}
	}
	return nil
}

func (x *AsmEvent) GetResumeEvent() *ResumeEvent {
	if x != nil {
		if x, ok := x.Event.(*AsmEvent_ResumeEvent); ok {
			return x.ResumeEvent
		}
	}
	return nil
}

func (x *AsmEvent) GetConversationPulledEvent() *ConversationPulledEvent {
	if x != nil {
		if x, ok := x.Event.(*AsmEvent_ConversationPulledEvent); ok {
			return x.ConversationPulledEvent
		}
	}
	return nil
}

type isAsmEvent_Event interface {
	isAsmEvent_Event()
}

type AsmEvent_ActivatedConversationAsmEvent struct {
	ActivatedConversationAsmEvent *ActivatedConversationAsmEvent `protobuf:"bytes,5,opt,name=activated_conversation_asm_event,json=activatedConversationAsmEvent,proto3,oneof"`
}

type AsmEvent_DeactivatedConversationAsmEvent struct {
	DeactivatedConversationAsmEvent *DeactivatedConversationAsmEvent `protobuf:"bytes,6,opt,name=deactivated_conversation_asm_event,json=deactivatedConversationAsmEvent,proto3,oneof"`
}

type AsmEvent_SentMessageAsmEvent struct {
	SentMessageAsmEvent *SentMessageAsmEvent `protobuf:"bytes,7,opt,name=sent_message_asm_event,json=sentMessageAsmEvent,proto3,oneof"`
}

type AsmEvent_SendStatusAsmEvent struct {
	// An event to indicate that the status has changed
	SendStatusAsmEvent *SendStatusAsmEvent `protobuf:"bytes,8,opt,name=send_status_asm_event,json=sendStatusAsmEvent,proto3,oneof"`
}

type AsmEvent_PauseEvent struct {
	PauseEvent *PauseEvent `protobuf:"bytes,9,opt,name=pause_event,json=pauseEvent,proto3,oneof"`
}

type AsmEvent_ResumeEvent struct {
	ResumeEvent *ResumeEvent `protobuf:"bytes,10,opt,name=resume_event,json=resumeEvent,proto3,oneof"`
}

type AsmEvent_ConversationPulledEvent struct {
	ConversationPulledEvent *ConversationPulledEvent `protobuf:"bytes,11,opt,name=conversation_pulled_event,json=conversationPulledEvent,proto3,oneof"`
}

func (*AsmEvent_ActivatedConversationAsmEvent) isAsmEvent_Event() {}

func (*AsmEvent_DeactivatedConversationAsmEvent) isAsmEvent_Event() {}

func (*AsmEvent_SentMessageAsmEvent) isAsmEvent_Event() {}

func (*AsmEvent_SendStatusAsmEvent) isAsmEvent_Event() {}

func (*AsmEvent_PauseEvent) isAsmEvent_Event() {}

func (*AsmEvent_ResumeEvent) isAsmEvent_Event() {}

func (*AsmEvent_ConversationPulledEvent) isAsmEvent_Event() {}

type ActivatedConversationAsmEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conversation  *OmniConversation      `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivatedConversationAsmEvent) Reset() {
	*x = ActivatedConversationAsmEvent{}
	mi := &file_api_commons_event_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivatedConversationAsmEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivatedConversationAsmEvent) ProtoMessage() {}

func (x *ActivatedConversationAsmEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_event_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivatedConversationAsmEvent.ProtoReflect.Descriptor instead.
func (*ActivatedConversationAsmEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_event_proto_rawDescGZIP(), []int{6}
}

func (x *ActivatedConversationAsmEvent) GetConversation() *OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

type DeactivatedConversationAsmEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conversation  *OmniConversation      `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeactivatedConversationAsmEvent) Reset() {
	*x = DeactivatedConversationAsmEvent{}
	mi := &file_api_commons_event_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeactivatedConversationAsmEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivatedConversationAsmEvent) ProtoMessage() {}

func (x *DeactivatedConversationAsmEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_event_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivatedConversationAsmEvent.ProtoReflect.Descriptor instead.
func (*DeactivatedConversationAsmEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_event_proto_rawDescGZIP(), []int{7}
}

func (x *DeactivatedConversationAsmEvent) GetConversation() *OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

type SentMessageAsmEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the time between the first customer message from the last set of customer messages and the current agent message
	// this will be 0 for subsequest agent messages. i.e. the agent sends more than one message before the customer respnds
	ResponseTimeSeconds int64 `protobuf:"varint,1,opt,name=response_time_seconds,json=responseTimeSeconds,proto3" json:"response_time_seconds,omitempty"`
	// if this is the first agent message in this set of agent messages
	IsInitialAgentMessage bool `protobuf:"varint,2,opt,name=is_initial_agent_message,json=isInitialAgentMessage,proto3" json:"is_initial_agent_message,omitempty"`
	// which conversation this message was sent in
	Conversation  *OmniConversation `protobuf:"bytes,3,opt,name=conversation,proto3" json:"conversation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SentMessageAsmEvent) Reset() {
	*x = SentMessageAsmEvent{}
	mi := &file_api_commons_event_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentMessageAsmEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentMessageAsmEvent) ProtoMessage() {}

func (x *SentMessageAsmEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_event_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentMessageAsmEvent.ProtoReflect.Descriptor instead.
func (*SentMessageAsmEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_event_proto_rawDescGZIP(), []int{8}
}

func (x *SentMessageAsmEvent) GetResponseTimeSeconds() int64 {
	if x != nil {
		return x.ResponseTimeSeconds
	}
	return 0
}

func (x *SentMessageAsmEvent) GetIsInitialAgentMessage() bool {
	if x != nil {
		return x.IsInitialAgentMessage
	}
	return false
}

func (x *SentMessageAsmEvent) GetConversation() *OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

// Indicate that the status has changed
type SendStatusAsmEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendStatusAsmEvent) Reset() {
	*x = SendStatusAsmEvent{}
	mi := &file_api_commons_event_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendStatusAsmEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendStatusAsmEvent) ProtoMessage() {}

func (x *SendStatusAsmEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_event_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendStatusAsmEvent.ProtoReflect.Descriptor instead.
func (*SendStatusAsmEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_event_proto_rawDescGZIP(), []int{9}
}

type PauseEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseEvent) Reset() {
	*x = PauseEvent{}
	mi := &file_api_commons_event_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseEvent) ProtoMessage() {}

func (x *PauseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_event_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseEvent.ProtoReflect.Descriptor instead.
func (*PauseEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_event_proto_rawDescGZIP(), []int{10}
}

type ResumeEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeEvent) Reset() {
	*x = ResumeEvent{}
	mi := &file_api_commons_event_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeEvent) ProtoMessage() {}

func (x *ResumeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_event_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeEvent.ProtoReflect.Descriptor instead.
func (*ResumeEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_event_proto_rawDescGZIP(), []int{11}
}

type ConversationPulledEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conversation  *OmniConversation      `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConversationPulledEvent) Reset() {
	*x = ConversationPulledEvent{}
	mi := &file_api_commons_event_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationPulledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationPulledEvent) ProtoMessage() {}

func (x *ConversationPulledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_event_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationPulledEvent.ProtoReflect.Descriptor instead.
func (*ConversationPulledEvent) Descriptor() ([]byte, []int) {
	return file_api_commons_event_proto_rawDescGZIP(), []int{12}
}

func (x *ConversationPulledEvent) GetConversation() *OmniConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

var File_api_commons_event_proto protoreflect.FileDescriptor

const file_api_commons_event_proto_rawDesc = "" +
	"\n" +
	"\x17api/commons/event.proto\x12\vapi.commons\x1a\x15api/commons/asm.proto\x1a\x1dapi/commons/omnichannel.proto\"\xd5\x04\n" +
	"\x05Event\x12.\n" +
	"\x05state\x18\x01 \x01(\x0e2\x18.api.commons.StatusStateR\x05state\x12\x1d\n" +
	"\n" +
	"event_time\x18\x02 \x01(\x03R\teventTime\x12k\n" +
	"\x1cactivated_conversation_event\x18\x05 \x01(\v2'.api.commons.ActivatedConversationEventH\x00R\x1aactivatedConversationEvent\x12q\n" +
	"\x1edeactivated_conversation_event\x18\x06 \x01(\v2).api.commons.DeactivatedConversationEventH\x00R\x1cdeactivatedConversationEvent\x12M\n" +
	"\x12sent_message_event\x18\a \x01(\v2\x1d.api.commons.SentMessageEventH\x00R\x10sentMessageEvent\x12J\n" +
	"\x11send_status_event\x18\b \x01(\v2\x1c.api.commons.SendStatusEventH\x00R\x0fsendStatusEvent\x12:\n" +
	"\vpause_event\x18\t \x01(\v2\x17.api.commons.PauseEventH\x00R\n" +
	"pauseEvent\x12=\n" +
	"\fresume_event\x18\n" +
	" \x01(\v2\x18.api.commons.ResumeEventH\x00R\vresumeEventB\a\n" +
	"\x05event\"_\n" +
	"\x1aActivatedConversationEvent\x12A\n" +
	"\fconversation\x18\x01 \x01(\v2\x1d.api.commons.OmniConversationR\fconversation\"a\n" +
	"\x1cDeactivatedConversationEvent\x12A\n" +
	"\fconversation\x18\x01 \x01(\v2\x1d.api.commons.OmniConversationR\fconversation\"\xc2\x01\n" +
	"\x10SentMessageEvent\x122\n" +
	"\x15response_time_seconds\x18\x01 \x01(\x03R\x13responseTimeSeconds\x127\n" +
	"\x18is_initial_agent_message\x18\x02 \x01(\bR\x15isInitialAgentMessage\x12A\n" +
	"\fconversation\x18\x03 \x01(\v2\x1d.api.commons.OmniConversationR\fconversation\"C\n" +
	"\x0fSendStatusEvent\x120\n" +
	"\x06status\x18\x01 \x01(\x0e2\x18.api.commons.StatusStateR\x06status\"\xe4\x05\n" +
	"\bAsmEvent\x12.\n" +
	"\x05state\x18\x01 \x01(\x0e2\x18.api.commons.StatusStateR\x05state\x12\x1d\n" +
	"\n" +
	"event_time\x18\x02 \x01(\x03R\teventTime\x12u\n" +
	" activated_conversation_asm_event\x18\x05 \x01(\v2*.api.commons.ActivatedConversationAsmEventH\x00R\x1dactivatedConversationAsmEvent\x12{\n" +
	"\"deactivated_conversation_asm_event\x18\x06 \x01(\v2,.api.commons.DeactivatedConversationAsmEventH\x00R\x1fdeactivatedConversationAsmEvent\x12W\n" +
	"\x16sent_message_asm_event\x18\a \x01(\v2 .api.commons.SentMessageAsmEventH\x00R\x13sentMessageAsmEvent\x12T\n" +
	"\x15send_status_asm_event\x18\b \x01(\v2\x1f.api.commons.SendStatusAsmEventH\x00R\x12sendStatusAsmEvent\x12:\n" +
	"\vpause_event\x18\t \x01(\v2\x17.api.commons.PauseEventH\x00R\n" +
	"pauseEvent\x12=\n" +
	"\fresume_event\x18\n" +
	" \x01(\v2\x18.api.commons.ResumeEventH\x00R\vresumeEvent\x12b\n" +
	"\x19conversation_pulled_event\x18\v \x01(\v2$.api.commons.ConversationPulledEventH\x00R\x17conversationPulledEventB\a\n" +
	"\x05event\"b\n" +
	"\x1dActivatedConversationAsmEvent\x12A\n" +
	"\fconversation\x18\x01 \x01(\v2\x1d.api.commons.OmniConversationR\fconversation\"d\n" +
	"\x1fDeactivatedConversationAsmEvent\x12A\n" +
	"\fconversation\x18\x01 \x01(\v2\x1d.api.commons.OmniConversationR\fconversation\"\xc5\x01\n" +
	"\x13SentMessageAsmEvent\x122\n" +
	"\x15response_time_seconds\x18\x01 \x01(\x03R\x13responseTimeSeconds\x127\n" +
	"\x18is_initial_agent_message\x18\x02 \x01(\bR\x15isInitialAgentMessage\x12A\n" +
	"\fconversation\x18\x03 \x01(\v2\x1d.api.commons.OmniConversationR\fconversation\"\x14\n" +
	"\x12SendStatusAsmEvent\"\f\n" +
	"\n" +
	"PauseEvent\"\r\n" +
	"\vResumeEvent\"\\\n" +
	"\x17ConversationPulledEvent\x12A\n" +
	"\fconversation\x18\x01 \x01(\v2\x1d.api.commons.OmniConversationR\fconversationB\x92\x01\n" +
	"\x0fcom.api.commonsB\n" +
	"EventProtoP\x01Z&github.com/tcncloud/api-go/api/commons\xa2\x02\x03ACX\xaa\x02\vApi.Commons\xca\x02\vApi\\Commons\xe2\x02\x17Api\\Commons\\GPBMetadata\xea\x02\fApi::Commonsb\x06proto3"

var (
	file_api_commons_event_proto_rawDescOnce sync.Once
	file_api_commons_event_proto_rawDescData []byte
)

func file_api_commons_event_proto_rawDescGZIP() []byte {
	file_api_commons_event_proto_rawDescOnce.Do(func() {
		file_api_commons_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_commons_event_proto_rawDesc), len(file_api_commons_event_proto_rawDesc)))
	})
	return file_api_commons_event_proto_rawDescData
}

var file_api_commons_event_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_api_commons_event_proto_goTypes = []any{
	(*Event)(nil),                           // 0: api.commons.Event
	(*ActivatedConversationEvent)(nil),      // 1: api.commons.ActivatedConversationEvent
	(*DeactivatedConversationEvent)(nil),    // 2: api.commons.DeactivatedConversationEvent
	(*SentMessageEvent)(nil),                // 3: api.commons.SentMessageEvent
	(*SendStatusEvent)(nil),                 // 4: api.commons.SendStatusEvent
	(*AsmEvent)(nil),                        // 5: api.commons.AsmEvent
	(*ActivatedConversationAsmEvent)(nil),   // 6: api.commons.ActivatedConversationAsmEvent
	(*DeactivatedConversationAsmEvent)(nil), // 7: api.commons.DeactivatedConversationAsmEvent
	(*SentMessageAsmEvent)(nil),             // 8: api.commons.SentMessageAsmEvent
	(*SendStatusAsmEvent)(nil),              // 9: api.commons.SendStatusAsmEvent
	(*PauseEvent)(nil),                      // 10: api.commons.PauseEvent
	(*ResumeEvent)(nil),                     // 11: api.commons.ResumeEvent
	(*ConversationPulledEvent)(nil),         // 12: api.commons.ConversationPulledEvent
	(StatusState)(0),                        // 13: api.commons.StatusState
	(*OmniConversation)(nil),                // 14: api.commons.OmniConversation
}
var file_api_commons_event_proto_depIdxs = []int32{
	13, // 0: api.commons.Event.state:type_name -> api.commons.StatusState
	1,  // 1: api.commons.Event.activated_conversation_event:type_name -> api.commons.ActivatedConversationEvent
	2,  // 2: api.commons.Event.deactivated_conversation_event:type_name -> api.commons.DeactivatedConversationEvent
	3,  // 3: api.commons.Event.sent_message_event:type_name -> api.commons.SentMessageEvent
	4,  // 4: api.commons.Event.send_status_event:type_name -> api.commons.SendStatusEvent
	10, // 5: api.commons.Event.pause_event:type_name -> api.commons.PauseEvent
	11, // 6: api.commons.Event.resume_event:type_name -> api.commons.ResumeEvent
	14, // 7: api.commons.ActivatedConversationEvent.conversation:type_name -> api.commons.OmniConversation
	14, // 8: api.commons.DeactivatedConversationEvent.conversation:type_name -> api.commons.OmniConversation
	14, // 9: api.commons.SentMessageEvent.conversation:type_name -> api.commons.OmniConversation
	13, // 10: api.commons.SendStatusEvent.status:type_name -> api.commons.StatusState
	13, // 11: api.commons.AsmEvent.state:type_name -> api.commons.StatusState
	6,  // 12: api.commons.AsmEvent.activated_conversation_asm_event:type_name -> api.commons.ActivatedConversationAsmEvent
	7,  // 13: api.commons.AsmEvent.deactivated_conversation_asm_event:type_name -> api.commons.DeactivatedConversationAsmEvent
	8,  // 14: api.commons.AsmEvent.sent_message_asm_event:type_name -> api.commons.SentMessageAsmEvent
	9,  // 15: api.commons.AsmEvent.send_status_asm_event:type_name -> api.commons.SendStatusAsmEvent
	10, // 16: api.commons.AsmEvent.pause_event:type_name -> api.commons.PauseEvent
	11, // 17: api.commons.AsmEvent.resume_event:type_name -> api.commons.ResumeEvent
	12, // 18: api.commons.AsmEvent.conversation_pulled_event:type_name -> api.commons.ConversationPulledEvent
	14, // 19: api.commons.ActivatedConversationAsmEvent.conversation:type_name -> api.commons.OmniConversation
	14, // 20: api.commons.DeactivatedConversationAsmEvent.conversation:type_name -> api.commons.OmniConversation
	14, // 21: api.commons.SentMessageAsmEvent.conversation:type_name -> api.commons.OmniConversation
	14, // 22: api.commons.ConversationPulledEvent.conversation:type_name -> api.commons.OmniConversation
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_api_commons_event_proto_init() }
func file_api_commons_event_proto_init() {
	if File_api_commons_event_proto != nil {
		return
	}
	file_api_commons_asm_proto_init()
	file_api_commons_omnichannel_proto_init()
	file_api_commons_event_proto_msgTypes[0].OneofWrappers = []any{
		(*Event_ActivatedConversationEvent)(nil),
		(*Event_DeactivatedConversationEvent)(nil),
		(*Event_SentMessageEvent)(nil),
		(*Event_SendStatusEvent)(nil),
		(*Event_PauseEvent)(nil),
		(*Event_ResumeEvent)(nil),
	}
	file_api_commons_event_proto_msgTypes[5].OneofWrappers = []any{
		(*AsmEvent_ActivatedConversationAsmEvent)(nil),
		(*AsmEvent_DeactivatedConversationAsmEvent)(nil),
		(*AsmEvent_SentMessageAsmEvent)(nil),
		(*AsmEvent_SendStatusAsmEvent)(nil),
		(*AsmEvent_PauseEvent)(nil),
		(*AsmEvent_ResumeEvent)(nil),
		(*AsmEvent_ConversationPulledEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_commons_event_proto_rawDesc), len(file_api_commons_event_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_event_proto_goTypes,
		DependencyIndexes: file_api_commons_event_proto_depIdxs,
		MessageInfos:      file_api_commons_event_proto_msgTypes,
	}.Build()
	File_api_commons_event_proto = out.File
	file_api_commons_event_proto_goTypes = nil
	file_api_commons_event_proto_depIdxs = nil
}
