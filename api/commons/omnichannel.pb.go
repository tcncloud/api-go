// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: api/commons/omnichannel.proto

package commons

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SmsNumbertype
type SmsNumberType int32

const (
	// SmsShortCodeType
	SmsNumberType_SMS_SHORT_CODE_TYPE SmsNumberType = 0
	// SmsAlphanumericType
	SmsNumberType_SMS_ALPHANUMERIC_TYPE SmsNumberType = 1
	// SmsNumberType
	SmsNumberType_SMS_NUMBER_TYPE SmsNumberType = 2
)

// Enum value maps for SmsNumberType.
var (
	SmsNumberType_name = map[int32]string{
		0: "SMS_SHORT_CODE_TYPE",
		1: "SMS_ALPHANUMERIC_TYPE",
		2: "SMS_NUMBER_TYPE",
	}
	SmsNumberType_value = map[string]int32{
		"SMS_SHORT_CODE_TYPE":   0,
		"SMS_ALPHANUMERIC_TYPE": 1,
		"SMS_NUMBER_TYPE":       2,
	}
)

func (x SmsNumberType) Enum() *SmsNumberType {
	p := new(SmsNumberType)
	*p = x
	return p
}

func (x SmsNumberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SmsNumberType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[0].Descriptor()
}

func (SmsNumberType) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[0]
}

func (x SmsNumberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SmsNumberType.Descriptor instead.
func (SmsNumberType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{0}
}

// SmsNumberProvider
type SmsNumberProvider int32

const (
	// Unknown provider
	SmsNumberProvider_UNKNOWN_PROVIDER SmsNumberProvider = 0
	// BandwidthProvder
	SmsNumberProvider_BANDWIDTH_PROVIDER SmsNumberProvider = 1
	// BurstSMSProvider
	SmsNumberProvider_BURST_SMS_PROVIDER SmsNumberProvider = 2
	// PlivoProvider
	SmsNumberProvider_PLIVO_PROVIDER SmsNumberProvider = 3
	// ApeironProvider
	SmsNumberProvider_APEIRON_PROVIDER SmsNumberProvider = 4
	// AusburstSMSProvider
	SmsNumberProvider_AUSBURST_SMS_PROVIDER SmsNumberProvider = 5
	// MediaSat sms provider
	SmsNumberProvider_MEDIASAT_SMS_PROVIDER SmsNumberProvider = 6
	// TextLocal sms provider
	SmsNumberProvider_TEXTLOCAL_SMS_PROVIDER SmsNumberProvider = 7
	// smartping sms provider
	SmsNumberProvider_SMARTPING_SMS_PROVIDER SmsNumberProvider = 8
)

// Enum value maps for SmsNumberProvider.
var (
	SmsNumberProvider_name = map[int32]string{
		0: "UNKNOWN_PROVIDER",
		1: "BANDWIDTH_PROVIDER",
		2: "BURST_SMS_PROVIDER",
		3: "PLIVO_PROVIDER",
		4: "APEIRON_PROVIDER",
		5: "AUSBURST_SMS_PROVIDER",
		6: "MEDIASAT_SMS_PROVIDER",
		7: "TEXTLOCAL_SMS_PROVIDER",
		8: "SMARTPING_SMS_PROVIDER",
	}
	SmsNumberProvider_value = map[string]int32{
		"UNKNOWN_PROVIDER":       0,
		"BANDWIDTH_PROVIDER":     1,
		"BURST_SMS_PROVIDER":     2,
		"PLIVO_PROVIDER":         3,
		"APEIRON_PROVIDER":       4,
		"AUSBURST_SMS_PROVIDER":  5,
		"MEDIASAT_SMS_PROVIDER":  6,
		"TEXTLOCAL_SMS_PROVIDER": 7,
		"SMARTPING_SMS_PROVIDER": 8,
	}
)

func (x SmsNumberProvider) Enum() *SmsNumberProvider {
	p := new(SmsNumberProvider)
	*p = x
	return p
}

func (x SmsNumberProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SmsNumberProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[1].Descriptor()
}

func (SmsNumberProvider) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[1]
}

func (x SmsNumberProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SmsNumberProvider.Descriptor instead.
func (SmsNumberProvider) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{1}
}

// OmniCampaignModuleType -
type OmniCampaignModuleType int32

const (
	// inbound module
	OmniCampaignModuleType_MODULE_TYPE_INBOUND OmniCampaignModuleType = 0
	// outbound module
	OmniCampaignModuleType_MODULE_TYPE_OUTBOUND OmniCampaignModuleType = 1
	// manual approve module
	OmniCampaignModuleType_MODULE_TYPE_MANUAL_APPROVAL OmniCampaignModuleType = 2
	// manual module
	OmniCampaignModuleType_MODULE_TYPE_MANUAL OmniCampaignModuleType = 3
)

// Enum value maps for OmniCampaignModuleType.
var (
	OmniCampaignModuleType_name = map[int32]string{
		0: "MODULE_TYPE_INBOUND",
		1: "MODULE_TYPE_OUTBOUND",
		2: "MODULE_TYPE_MANUAL_APPROVAL",
		3: "MODULE_TYPE_MANUAL",
	}
	OmniCampaignModuleType_value = map[string]int32{
		"MODULE_TYPE_INBOUND":         0,
		"MODULE_TYPE_OUTBOUND":        1,
		"MODULE_TYPE_MANUAL_APPROVAL": 2,
		"MODULE_TYPE_MANUAL":          3,
	}
)

func (x OmniCampaignModuleType) Enum() *OmniCampaignModuleType {
	p := new(OmniCampaignModuleType)
	*p = x
	return p
}

func (x OmniCampaignModuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OmniCampaignModuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[2].Descriptor()
}

func (OmniCampaignModuleType) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[2]
}

func (x OmniCampaignModuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OmniCampaignModuleType.Descriptor instead.
func (OmniCampaignModuleType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{2}
}

type ChannelType int32

const (
	ChannelType_CHANNEL_TYPE_EMAIL    ChannelType = 0
	ChannelType_CHANNEL_TYPE_SMS      ChannelType = 1
	ChannelType_CHANNEL_TYPE_CHAT     ChannelType = 2
	ChannelType_CHANNEL_TYPE_VOICE    ChannelType = 3
	ChannelType_CHANNEL_TYPE_WHATSAPP ChannelType = 4
)

// Enum value maps for ChannelType.
var (
	ChannelType_name = map[int32]string{
		0: "CHANNEL_TYPE_EMAIL",
		1: "CHANNEL_TYPE_SMS",
		2: "CHANNEL_TYPE_CHAT",
		3: "CHANNEL_TYPE_VOICE",
		4: "CHANNEL_TYPE_WHATSAPP",
	}
	ChannelType_value = map[string]int32{
		"CHANNEL_TYPE_EMAIL":    0,
		"CHANNEL_TYPE_SMS":      1,
		"CHANNEL_TYPE_CHAT":     2,
		"CHANNEL_TYPE_VOICE":    3,
		"CHANNEL_TYPE_WHATSAPP": 4,
	}
)

func (x ChannelType) Enum() *ChannelType {
	p := new(ChannelType)
	*p = x
	return p
}

func (x ChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[3].Descriptor()
}

func (ChannelType) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[3]
}

func (x ChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelType.Descriptor instead.
func (ChannelType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{3}
}

// OmniCampaignDirection -
type OmniCampaignDirection int32

const (
	// campaigns focused on receiving messages
	OmniCampaignDirection_INBOUND OmniCampaignDirection = 0
	// campaigns focused on sending messages
	OmniCampaignDirection_OUTBOUND OmniCampaignDirection = 1
)

// Enum value maps for OmniCampaignDirection.
var (
	OmniCampaignDirection_name = map[int32]string{
		0: "INBOUND",
		1: "OUTBOUND",
	}
	OmniCampaignDirection_value = map[string]int32{
		"INBOUND":  0,
		"OUTBOUND": 1,
	}
)

func (x OmniCampaignDirection) Enum() *OmniCampaignDirection {
	p := new(OmniCampaignDirection)
	*p = x
	return p
}

func (x OmniCampaignDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OmniCampaignDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[4].Descriptor()
}

func (OmniCampaignDirection) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[4]
}

func (x OmniCampaignDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OmniCampaignDirection.Descriptor instead.
func (OmniCampaignDirection) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{4}
}

type OmniCampaignStatus int32

const (
	// Campaign has been created but hasn't reached it's start date
	OmniCampaignStatus_SCHEDULING OmniCampaignStatus = 0
	// Campaign that is able to process events
	OmniCampaignStatus_RUNNING OmniCampaignStatus = 200
	// Campaign was paused
	OmniCampaignStatus_PAUSED OmniCampaignStatus = 400
	// Campaign was finished
	OmniCampaignStatus_COMPLETED OmniCampaignStatus = 600
	// Campaign has been archived/closed
	OmniCampaignStatus_ARCHIVED OmniCampaignStatus = 800
)

// Enum value maps for OmniCampaignStatus.
var (
	OmniCampaignStatus_name = map[int32]string{
		0:   "SCHEDULING",
		200: "RUNNING",
		400: "PAUSED",
		600: "COMPLETED",
		800: "ARCHIVED",
	}
	OmniCampaignStatus_value = map[string]int32{
		"SCHEDULING": 0,
		"RUNNING":    200,
		"PAUSED":     400,
		"COMPLETED":  600,
		"ARCHIVED":   800,
	}
)

func (x OmniCampaignStatus) Enum() *OmniCampaignStatus {
	p := new(OmniCampaignStatus)
	*p = x
	return p
}

func (x OmniCampaignStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OmniCampaignStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[5].Descriptor()
}

func (OmniCampaignStatus) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[5]
}

func (x OmniCampaignStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OmniCampaignStatus.Descriptor instead.
func (OmniCampaignStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{5}
}

type OmniCampaignModuleStatus int32

const (
	// initial module status
	OmniCampaignModuleStatus_MODULE_PREPARING OmniCampaignModuleStatus = 0
	// module is in the process of getting scheduled
	OmniCampaignModuleStatus_MODULE_SCHEDULING OmniCampaignModuleStatus = 100
	// module is currently processing requests/data
	OmniCampaignModuleStatus_MODULE_RUNNING OmniCampaignModuleStatus = 200
	// module is processing requests/data, but has received an ERROR event
	OmniCampaignModuleStatus_MODULE_RUNNING_ERROR OmniCampaignModuleStatus = 250
	// module has received a FAIL event (i.e. too many consecutive errors have occurred)
	OmniCampaignModuleStatus_MODULE_ERROR_STANDBY OmniCampaignModuleStatus = 300
	// module is paused
	OmniCampaignModuleStatus_MODULE_PAUSED OmniCampaignModuleStatus = 400
	// module is preparing to run again
	OmniCampaignModuleStatus_MODULE_RESUMING OmniCampaignModuleStatus = 500
	// module has completed (i.e. finished, done running)
	OmniCampaignModuleStatus_MODULE_COMPLETED OmniCampaignModuleStatus = 600
	// module has been archived/closed
	OmniCampaignModuleStatus_MODULE_ARCHIVED OmniCampaignModuleStatus = 700
)

// Enum value maps for OmniCampaignModuleStatus.
var (
	OmniCampaignModuleStatus_name = map[int32]string{
		0:   "MODULE_PREPARING",
		100: "MODULE_SCHEDULING",
		200: "MODULE_RUNNING",
		250: "MODULE_RUNNING_ERROR",
		300: "MODULE_ERROR_STANDBY",
		400: "MODULE_PAUSED",
		500: "MODULE_RESUMING",
		600: "MODULE_COMPLETED",
		700: "MODULE_ARCHIVED",
	}
	OmniCampaignModuleStatus_value = map[string]int32{
		"MODULE_PREPARING":     0,
		"MODULE_SCHEDULING":    100,
		"MODULE_RUNNING":       200,
		"MODULE_RUNNING_ERROR": 250,
		"MODULE_ERROR_STANDBY": 300,
		"MODULE_PAUSED":        400,
		"MODULE_RESUMING":      500,
		"MODULE_COMPLETED":     600,
		"MODULE_ARCHIVED":      700,
	}
)

func (x OmniCampaignModuleStatus) Enum() *OmniCampaignModuleStatus {
	p := new(OmniCampaignModuleStatus)
	*p = x
	return p
}

func (x OmniCampaignModuleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OmniCampaignModuleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[6].Descriptor()
}

func (OmniCampaignModuleStatus) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[6]
}

func (x OmniCampaignModuleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OmniCampaignModuleStatus.Descriptor instead.
func (OmniCampaignModuleStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{6}
}

type ConversationStatus int32

const (
	// Conversation was just created. It is both open and active
	ConversationStatus_CONVERSATION_STATUS_NEW ConversationStatus = 0
	// Conversation is waiting for the customer to reply. It is open but not active
	ConversationStatus_CONVERSATION_STATUS_AWAITING_REPLY_FROM_CUSTOMER ConversationStatus = 1
	// Conversation is waiting for the agent to reply. It is both open and active
	ConversationStatus_CONVERSATION_STATUS_AWAITING_REPLY_FROM_AGENT ConversationStatus = 2
	// The conversation is closed because of a timeout
	ConversationStatus_CONVERSATION_STATUS_CLOSED_TIMEOUT ConversationStatus = 3
	// The conversation is closed because of an action from the agent
	ConversationStatus_CONVERSATION_STATUS_CLOSED_AGENT ConversationStatus = 4
	// The conversation is closed because of an action from the customer
	ConversationStatus_CONVERSATION_STATUS_CLOSED_CUSTOMER ConversationStatus = 5
	// The conversation is suspended while waiting for the customer to reply
	ConversationStatus_CONVERSATION_STATUS_SUSPENDED_AWAITING_REPLY_FROM_CUSTOMER ConversationStatus = 6
	// the conversation was assigned at one point but it was unassigned and now its wait to be reassigned
	ConversationStatus_CONVERSATION_STATUS_AWAITING_ASSIGNMENT ConversationStatus = 7
	// the conversation was just assigned
	ConversationStatus_CONVERSATION_STATUS_NEWLY_ASSIGNED ConversationStatus = 8
	// The conversation is in wrap up via customer closing
	ConversationStatus_CONVERSATION_STATUS_WRAP_UP_CUSTOMER ConversationStatus = 9
	// The conversation is in wrap up after timeout.
	ConversationStatus_CONVERSATION_STATUS_WRAP_UP_TIMEOUT ConversationStatus = 10
	// The conversation is closed because of an action from the customer
	ConversationStatus_CONVERSATION_STATUS_CLOSED_MANAGER ConversationStatus = 11
	// Conversation was just created but we are waiting for the customer to reply
	ConversationStatus_CONVERSATION_STATUS_NEW_PENDING_CUSTOMER_REPLY ConversationStatus = 12
	// Conversation is being handled by flow engine
	ConversationStatus_CONVERSATION_STATUS_FLOW ConversationStatus = 13
	// Conversation was closed because a duplicate thread was created
	ConversationStatus_CONVERSATION_STATUS_CLOSED_DUPLICATE_THREAD ConversationStatus = 14
)

// Enum value maps for ConversationStatus.
var (
	ConversationStatus_name = map[int32]string{
		0:  "CONVERSATION_STATUS_NEW",
		1:  "CONVERSATION_STATUS_AWAITING_REPLY_FROM_CUSTOMER",
		2:  "CONVERSATION_STATUS_AWAITING_REPLY_FROM_AGENT",
		3:  "CONVERSATION_STATUS_CLOSED_TIMEOUT",
		4:  "CONVERSATION_STATUS_CLOSED_AGENT",
		5:  "CONVERSATION_STATUS_CLOSED_CUSTOMER",
		6:  "CONVERSATION_STATUS_SUSPENDED_AWAITING_REPLY_FROM_CUSTOMER",
		7:  "CONVERSATION_STATUS_AWAITING_ASSIGNMENT",
		8:  "CONVERSATION_STATUS_NEWLY_ASSIGNED",
		9:  "CONVERSATION_STATUS_WRAP_UP_CUSTOMER",
		10: "CONVERSATION_STATUS_WRAP_UP_TIMEOUT",
		11: "CONVERSATION_STATUS_CLOSED_MANAGER",
		12: "CONVERSATION_STATUS_NEW_PENDING_CUSTOMER_REPLY",
		13: "CONVERSATION_STATUS_FLOW",
		14: "CONVERSATION_STATUS_CLOSED_DUPLICATE_THREAD",
	}
	ConversationStatus_value = map[string]int32{
		"CONVERSATION_STATUS_NEW":                                    0,
		"CONVERSATION_STATUS_AWAITING_REPLY_FROM_CUSTOMER":           1,
		"CONVERSATION_STATUS_AWAITING_REPLY_FROM_AGENT":              2,
		"CONVERSATION_STATUS_CLOSED_TIMEOUT":                         3,
		"CONVERSATION_STATUS_CLOSED_AGENT":                           4,
		"CONVERSATION_STATUS_CLOSED_CUSTOMER":                        5,
		"CONVERSATION_STATUS_SUSPENDED_AWAITING_REPLY_FROM_CUSTOMER": 6,
		"CONVERSATION_STATUS_AWAITING_ASSIGNMENT":                    7,
		"CONVERSATION_STATUS_NEWLY_ASSIGNED":                         8,
		"CONVERSATION_STATUS_WRAP_UP_CUSTOMER":                       9,
		"CONVERSATION_STATUS_WRAP_UP_TIMEOUT":                        10,
		"CONVERSATION_STATUS_CLOSED_MANAGER":                         11,
		"CONVERSATION_STATUS_NEW_PENDING_CUSTOMER_REPLY":             12,
		"CONVERSATION_STATUS_FLOW":                                   13,
		"CONVERSATION_STATUS_CLOSED_DUPLICATE_THREAD":                14,
	}
)

func (x ConversationStatus) Enum() *ConversationStatus {
	p := new(ConversationStatus)
	*p = x
	return p
}

func (x ConversationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[7].Descriptor()
}

func (ConversationStatus) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[7]
}

func (x ConversationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationStatus.Descriptor instead.
func (ConversationStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{7}
}

// indicates if we want to pull conversations that are assigned
// actively, not actively, or both
type AgentAssignmentActiveSearchType int32

const (
	// The conversations that are actively assigned to the agent
	AgentAssignmentActiveSearchType_AGENT_ASSIGNMENT_ACTIVE_SEARCH_TYPE_ACTIVE AgentAssignmentActiveSearchType = 0
	// The conversations that are not actively assigned to the agent
	AgentAssignmentActiveSearchType_AGENT_ASSIGNMENT_ACTIVE_SEARCH_TYPE_INACTIVE AgentAssignmentActiveSearchType = 1
	// All conversations that are assigned to the agent
	AgentAssignmentActiveSearchType_AGENT_ASSIGNMENT_ACTIVE_SEARCH_TYPE_ALL AgentAssignmentActiveSearchType = 2
)

// Enum value maps for AgentAssignmentActiveSearchType.
var (
	AgentAssignmentActiveSearchType_name = map[int32]string{
		0: "AGENT_ASSIGNMENT_ACTIVE_SEARCH_TYPE_ACTIVE",
		1: "AGENT_ASSIGNMENT_ACTIVE_SEARCH_TYPE_INACTIVE",
		2: "AGENT_ASSIGNMENT_ACTIVE_SEARCH_TYPE_ALL",
	}
	AgentAssignmentActiveSearchType_value = map[string]int32{
		"AGENT_ASSIGNMENT_ACTIVE_SEARCH_TYPE_ACTIVE":   0,
		"AGENT_ASSIGNMENT_ACTIVE_SEARCH_TYPE_INACTIVE": 1,
		"AGENT_ASSIGNMENT_ACTIVE_SEARCH_TYPE_ALL":      2,
	}
)

func (x AgentAssignmentActiveSearchType) Enum() *AgentAssignmentActiveSearchType {
	p := new(AgentAssignmentActiveSearchType)
	*p = x
	return p
}

func (x AgentAssignmentActiveSearchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentAssignmentActiveSearchType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[8].Descriptor()
}

func (AgentAssignmentActiveSearchType) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[8]
}

func (x AgentAssignmentActiveSearchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentAssignmentActiveSearchType.Descriptor instead.
func (AgentAssignmentActiveSearchType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{8}
}

type AgentConversationAssignmentStatus int32

const (
	AgentConversationAssignmentStatus_ACTIVE_AGENT   AgentConversationAssignmentStatus = 0 // agent is active for the assigned conversation
	AgentConversationAssignmentStatus_INACTIVE_AGENT AgentConversationAssignmentStatus = 1 // agent is not active for the assignment conversation
)

// Enum value maps for AgentConversationAssignmentStatus.
var (
	AgentConversationAssignmentStatus_name = map[int32]string{
		0: "ACTIVE_AGENT",
		1: "INACTIVE_AGENT",
	}
	AgentConversationAssignmentStatus_value = map[string]int32{
		"ACTIVE_AGENT":   0,
		"INACTIVE_AGENT": 1,
	}
)

func (x AgentConversationAssignmentStatus) Enum() *AgentConversationAssignmentStatus {
	p := new(AgentConversationAssignmentStatus)
	*p = x
	return p
}

func (x AgentConversationAssignmentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentConversationAssignmentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[9].Descriptor()
}

func (AgentConversationAssignmentStatus) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[9]
}

func (x AgentConversationAssignmentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentConversationAssignmentStatus.Descriptor instead.
func (AgentConversationAssignmentStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{9}
}

type AgentConversationAssignmentType int32

const (
	AgentConversationAssignmentType_PRIMARY_AGENT   AgentConversationAssignmentType = 0 // primary agent for the assigned conversation
	AgentConversationAssignmentType_SECONDARY_AGENT AgentConversationAssignmentType = 1 // secondary agent for the assigned conversation
)

// Enum value maps for AgentConversationAssignmentType.
var (
	AgentConversationAssignmentType_name = map[int32]string{
		0: "PRIMARY_AGENT",
		1: "SECONDARY_AGENT",
	}
	AgentConversationAssignmentType_value = map[string]int32{
		"PRIMARY_AGENT":   0,
		"SECONDARY_AGENT": 1,
	}
)

func (x AgentConversationAssignmentType) Enum() *AgentConversationAssignmentType {
	p := new(AgentConversationAssignmentType)
	*p = x
	return p
}

func (x AgentConversationAssignmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentConversationAssignmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[10].Descriptor()
}

func (AgentConversationAssignmentType) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[10]
}

func (x AgentConversationAssignmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentConversationAssignmentType.Descriptor instead.
func (AgentConversationAssignmentType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{10}
}

// MessageFormat -
type MessageFormat int32

const (
	MessageFormat_MESSAGE_FORMAT_UNSPECIFIED MessageFormat = 0 // default (plain text)
	MessageFormat_MESSAGE_FORMAT_HTML        MessageFormat = 1
	// For forms from flows; should be sanitized, but keep form elements
	// The frontend handles the form logic (the message can't have js)
	MessageFormat_MESSAGE_FORMAT_HTML_FORM MessageFormat = 2
)

// Enum value maps for MessageFormat.
var (
	MessageFormat_name = map[int32]string{
		0: "MESSAGE_FORMAT_UNSPECIFIED",
		1: "MESSAGE_FORMAT_HTML",
		2: "MESSAGE_FORMAT_HTML_FORM",
	}
	MessageFormat_value = map[string]int32{
		"MESSAGE_FORMAT_UNSPECIFIED": 0,
		"MESSAGE_FORMAT_HTML":        1,
		"MESSAGE_FORMAT_HTML_FORM":   2,
	}
)

func (x MessageFormat) Enum() *MessageFormat {
	p := new(MessageFormat)
	*p = x
	return p
}

func (x MessageFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[11].Descriptor()
}

func (MessageFormat) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[11]
}

func (x MessageFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageFormat.Descriptor instead.
func (MessageFormat) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{11}
}

type OmniMessageStatus int32

const (
	OmniMessageStatus_OMNI_MESSAGE_CREATED                   OmniMessageStatus = 0
	OmniMessageStatus_OMNI_INBOUND_MESSAGE_RECEIVED          OmniMessageStatus = 16000 // message received from customer
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_RECEIVED         OmniMessageStatus = 16010 // message received from agent
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_WAITING          OmniMessageStatus = 16100 // message is ready to be sent
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_PROCESSING       OmniMessageStatus = 16110 // message is sent
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_DNC              OmniMessageStatus = 16120 // message is on Do Not Call list
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_INVALID          OmniMessageStatus = 16130 // message is flagged as invalid
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_ATTACHMENT_ERROR OmniMessageStatus = 16140 // message was cancelled due to an attachment error
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_CANCELLED        OmniMessageStatus = 16150 // message was cancelled
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_QUEUED           OmniMessageStatus = 16160 // message is queued in provider
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_DELIVERED        OmniMessageStatus = 16170 // message has been delivered to receiver
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_DROPPED          OmniMessageStatus = 16180 // message was dropped
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_DEFERRED         OmniMessageStatus = 16190 // message was temporarily rejected
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_BOUNCED          OmniMessageStatus = 16200 // receiver could not/would not accept message
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_OPENED           OmniMessageStatus = 16210 // message was opened
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_CLICKED          OmniMessageStatus = 16220 // link in message was clicked
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_UNSUBSCRIBED     OmniMessageStatus = 16230 // recipient clicked on unsubscribe link
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_MARKED_AS_SPAM   OmniMessageStatus = 16240 // message marked as spam
	OmniMessageStatus_OMNI_OUTBOUND_MESSAGE_BLOCKED          OmniMessageStatus = 16250 // message marked as blocked
	OmniMessageStatus_OMNI_SYSTEM_MESSAGE                    OmniMessageStatus = 16050 // message sent from system
)

// Enum value maps for OmniMessageStatus.
var (
	OmniMessageStatus_name = map[int32]string{
		0:     "OMNI_MESSAGE_CREATED",
		16000: "OMNI_INBOUND_MESSAGE_RECEIVED",
		16010: "OMNI_OUTBOUND_MESSAGE_RECEIVED",
		16100: "OMNI_OUTBOUND_MESSAGE_WAITING",
		16110: "OMNI_OUTBOUND_MESSAGE_PROCESSING",
		16120: "OMNI_OUTBOUND_MESSAGE_DNC",
		16130: "OMNI_OUTBOUND_MESSAGE_INVALID",
		16140: "OMNI_OUTBOUND_MESSAGE_ATTACHMENT_ERROR",
		16150: "OMNI_OUTBOUND_MESSAGE_CANCELLED",
		16160: "OMNI_OUTBOUND_MESSAGE_QUEUED",
		16170: "OMNI_OUTBOUND_MESSAGE_DELIVERED",
		16180: "OMNI_OUTBOUND_MESSAGE_DROPPED",
		16190: "OMNI_OUTBOUND_MESSAGE_DEFERRED",
		16200: "OMNI_OUTBOUND_MESSAGE_BOUNCED",
		16210: "OMNI_OUTBOUND_MESSAGE_OPENED",
		16220: "OMNI_OUTBOUND_MESSAGE_CLICKED",
		16230: "OMNI_OUTBOUND_MESSAGE_UNSUBSCRIBED",
		16240: "OMNI_OUTBOUND_MESSAGE_MARKED_AS_SPAM",
		16250: "OMNI_OUTBOUND_MESSAGE_BLOCKED",
		16050: "OMNI_SYSTEM_MESSAGE",
	}
	OmniMessageStatus_value = map[string]int32{
		"OMNI_MESSAGE_CREATED":                   0,
		"OMNI_INBOUND_MESSAGE_RECEIVED":          16000,
		"OMNI_OUTBOUND_MESSAGE_RECEIVED":         16010,
		"OMNI_OUTBOUND_MESSAGE_WAITING":          16100,
		"OMNI_OUTBOUND_MESSAGE_PROCESSING":       16110,
		"OMNI_OUTBOUND_MESSAGE_DNC":              16120,
		"OMNI_OUTBOUND_MESSAGE_INVALID":          16130,
		"OMNI_OUTBOUND_MESSAGE_ATTACHMENT_ERROR": 16140,
		"OMNI_OUTBOUND_MESSAGE_CANCELLED":        16150,
		"OMNI_OUTBOUND_MESSAGE_QUEUED":           16160,
		"OMNI_OUTBOUND_MESSAGE_DELIVERED":        16170,
		"OMNI_OUTBOUND_MESSAGE_DROPPED":          16180,
		"OMNI_OUTBOUND_MESSAGE_DEFERRED":         16190,
		"OMNI_OUTBOUND_MESSAGE_BOUNCED":          16200,
		"OMNI_OUTBOUND_MESSAGE_OPENED":           16210,
		"OMNI_OUTBOUND_MESSAGE_CLICKED":          16220,
		"OMNI_OUTBOUND_MESSAGE_UNSUBSCRIBED":     16230,
		"OMNI_OUTBOUND_MESSAGE_MARKED_AS_SPAM":   16240,
		"OMNI_OUTBOUND_MESSAGE_BLOCKED":          16250,
		"OMNI_SYSTEM_MESSAGE":                    16050,
	}
)

func (x OmniMessageStatus) Enum() *OmniMessageStatus {
	p := new(OmniMessageStatus)
	*p = x
	return p
}

func (x OmniMessageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OmniMessageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[12].Descriptor()
}

func (OmniMessageStatus) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[12]
}

func (x OmniMessageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OmniMessageStatus.Descriptor instead.
func (OmniMessageStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{12}
}

// OmniConversationResult -
type OmniConversationResult int32

const (
	OmniConversationResult_NONE      OmniConversationResult = 0
	OmniConversationResult_ABANDONED OmniConversationResult = 1
)

// Enum value maps for OmniConversationResult.
var (
	OmniConversationResult_name = map[int32]string{
		0: "NONE",
		1: "ABANDONED",
	}
	OmniConversationResult_value = map[string]int32{
		"NONE":      0,
		"ABANDONED": 1,
	}
)

func (x OmniConversationResult) Enum() *OmniConversationResult {
	p := new(OmniConversationResult)
	*p = x
	return p
}

func (x OmniConversationResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OmniConversationResult) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[13].Descriptor()
}

func (OmniConversationResult) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[13]
}

func (x OmniConversationResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OmniConversationResult.Descriptor instead.
func (OmniConversationResult) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{13}
}

// OmniTaskStatus -
type OmniTaskStatus int32

const (
	OmniTaskStatus_OMNI_TASK_WAITING              OmniTaskStatus = 0   // initial task created waiting to be processed
	OmniTaskStatus_OMNI_TASK_WAITING_FOR_QUEUE    OmniTaskStatus = 1   // task is waiting to be queue
	OmniTaskStatus_OMNI_TASK_WAITING_FOR_APPROVAL OmniTaskStatus = 2   // task is waiting for approval
	OmniTaskStatus_OMNI_TASK_SENDING              OmniTaskStatus = 100 // the task is currently being sent
	OmniTaskStatus_OMNI_TASK_SENDING_FAILED       OmniTaskStatus = 110 // the task attempted to send but failed
	OmniTaskStatus_OMNI_TASK_SENDING_INCOMPLETE   OmniTaskStatus = 111 // the task began the process of sending but did not complete
	OmniTaskStatus_OMNI_TASK_SENT                 OmniTaskStatus = 120 // the task successfully sent
	OmniTaskStatus_OMNI_TASK_RECEIVED             OmniTaskStatus = 130 // the task was received by the destination
	OmniTaskStatus_OMNI_TASK_CANCELLED            OmniTaskStatus = 140 // the task was cancelled
)

// Enum value maps for OmniTaskStatus.
var (
	OmniTaskStatus_name = map[int32]string{
		0:   "OMNI_TASK_WAITING",
		1:   "OMNI_TASK_WAITING_FOR_QUEUE",
		2:   "OMNI_TASK_WAITING_FOR_APPROVAL",
		100: "OMNI_TASK_SENDING",
		110: "OMNI_TASK_SENDING_FAILED",
		111: "OMNI_TASK_SENDING_INCOMPLETE",
		120: "OMNI_TASK_SENT",
		130: "OMNI_TASK_RECEIVED",
		140: "OMNI_TASK_CANCELLED",
	}
	OmniTaskStatus_value = map[string]int32{
		"OMNI_TASK_WAITING":              0,
		"OMNI_TASK_WAITING_FOR_QUEUE":    1,
		"OMNI_TASK_WAITING_FOR_APPROVAL": 2,
		"OMNI_TASK_SENDING":              100,
		"OMNI_TASK_SENDING_FAILED":       110,
		"OMNI_TASK_SENDING_INCOMPLETE":   111,
		"OMNI_TASK_SENT":                 120,
		"OMNI_TASK_RECEIVED":             130,
		"OMNI_TASK_CANCELLED":            140,
	}
)

func (x OmniTaskStatus) Enum() *OmniTaskStatus {
	p := new(OmniTaskStatus)
	*p = x
	return p
}

func (x OmniTaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OmniTaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[14].Descriptor()
}

func (OmniTaskStatus) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[14]
}

func (x OmniTaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OmniTaskStatus.Descriptor instead.
func (OmniTaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{14}
}

type OmniSenderType int32

const (
	OmniSenderType_OMNI_SENDER_TYPE_AGENT    OmniSenderType = 0
	OmniSenderType_OMNI_SENDER_TYPE_CUSTOMER OmniSenderType = 1
	OmniSenderType_OMNI_SENDER_TYPE_SYSTEM   OmniSenderType = 2
	OmniSenderType_OMNI_SENDER_TYPE_MANAGER  OmniSenderType = 3
	OmniSenderType_OMNI_SENDER_TYPE_FLOW     OmniSenderType = 4
)

// Enum value maps for OmniSenderType.
var (
	OmniSenderType_name = map[int32]string{
		0: "OMNI_SENDER_TYPE_AGENT",
		1: "OMNI_SENDER_TYPE_CUSTOMER",
		2: "OMNI_SENDER_TYPE_SYSTEM",
		3: "OMNI_SENDER_TYPE_MANAGER",
		4: "OMNI_SENDER_TYPE_FLOW",
	}
	OmniSenderType_value = map[string]int32{
		"OMNI_SENDER_TYPE_AGENT":    0,
		"OMNI_SENDER_TYPE_CUSTOMER": 1,
		"OMNI_SENDER_TYPE_SYSTEM":   2,
		"OMNI_SENDER_TYPE_MANAGER":  3,
		"OMNI_SENDER_TYPE_FLOW":     4,
	}
)

func (x OmniSenderType) Enum() *OmniSenderType {
	p := new(OmniSenderType)
	*p = x
	return p
}

func (x OmniSenderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OmniSenderType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[15].Descriptor()
}

func (OmniSenderType) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[15]
}

func (x OmniSenderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OmniSenderType.Descriptor instead.
func (OmniSenderType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{15}
}

// ConnectedInboxAuthenticationType -
type ConnectedInboxAuthenticationType int32

const (
	ConnectedInboxAuthenticationType_CONNECTED_INBOX_AUTHENTICATION_TYPE_PASSWORD       ConnectedInboxAuthenticationType = 0
	ConnectedInboxAuthenticationType_CONNECTED_INBOX_AUTHENTICATION_TYPE_GOOGLE_XOAUTH2 ConnectedInboxAuthenticationType = 1
	ConnectedInboxAuthenticationType_CONNECTED_INBOX_AUTHENTICATION_TYPE_MICROSOFT_365  ConnectedInboxAuthenticationType = 2
)

// Enum value maps for ConnectedInboxAuthenticationType.
var (
	ConnectedInboxAuthenticationType_name = map[int32]string{
		0: "CONNECTED_INBOX_AUTHENTICATION_TYPE_PASSWORD",
		1: "CONNECTED_INBOX_AUTHENTICATION_TYPE_GOOGLE_XOAUTH2",
		2: "CONNECTED_INBOX_AUTHENTICATION_TYPE_MICROSOFT_365",
	}
	ConnectedInboxAuthenticationType_value = map[string]int32{
		"CONNECTED_INBOX_AUTHENTICATION_TYPE_PASSWORD":       0,
		"CONNECTED_INBOX_AUTHENTICATION_TYPE_GOOGLE_XOAUTH2": 1,
		"CONNECTED_INBOX_AUTHENTICATION_TYPE_MICROSOFT_365":  2,
	}
)

func (x ConnectedInboxAuthenticationType) Enum() *ConnectedInboxAuthenticationType {
	p := new(ConnectedInboxAuthenticationType)
	*p = x
	return p
}

func (x ConnectedInboxAuthenticationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectedInboxAuthenticationType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[16].Descriptor()
}

func (ConnectedInboxAuthenticationType) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[16]
}

func (x ConnectedInboxAuthenticationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectedInboxAuthenticationType.Descriptor instead.
func (ConnectedInboxAuthenticationType) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{16}
}

// ConversationStateChangeTimerName -
type ConversationStateChangeTimerName int32

const (
	ConversationStateChangeTimerName_CONVERSATION_STATE_CHANGE_TIMER_NAME_WAIT                        ConversationStateChangeTimerName = 0
	ConversationStateChangeTimerName_CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK                        ConversationStateChangeTimerName = 100
	ConversationStateChangeTimerName_CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK_INITIAL_AGENT_RESPONSE ConversationStateChangeTimerName = 101
	ConversationStateChangeTimerName_CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK_AGENT_RESPONSE         ConversationStateChangeTimerName = 102
	ConversationStateChangeTimerName_CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK_CUSTOMER_RESPONSE      ConversationStateChangeTimerName = 103
	ConversationStateChangeTimerName_CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK_SUSPENDED              ConversationStateChangeTimerName = 104
	ConversationStateChangeTimerName_CONVERSATION_STATE_CHANGE_TIMER_NAME_WRAP_UP                     ConversationStateChangeTimerName = 200
	ConversationStateChangeTimerName_CONVERSATION_STATE_CHANGE_TIMER_NAME_IDLE                        ConversationStateChangeTimerName = 300
)

// Enum value maps for ConversationStateChangeTimerName.
var (
	ConversationStateChangeTimerName_name = map[int32]string{
		0:   "CONVERSATION_STATE_CHANGE_TIMER_NAME_WAIT",
		100: "CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK",
		101: "CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK_INITIAL_AGENT_RESPONSE",
		102: "CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK_AGENT_RESPONSE",
		103: "CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK_CUSTOMER_RESPONSE",
		104: "CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK_SUSPENDED",
		200: "CONVERSATION_STATE_CHANGE_TIMER_NAME_WRAP_UP",
		300: "CONVERSATION_STATE_CHANGE_TIMER_NAME_IDLE",
	}
	ConversationStateChangeTimerName_value = map[string]int32{
		"CONVERSATION_STATE_CHANGE_TIMER_NAME_WAIT":                        0,
		"CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK":                        100,
		"CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK_INITIAL_AGENT_RESPONSE": 101,
		"CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK_AGENT_RESPONSE":         102,
		"CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK_CUSTOMER_RESPONSE":      103,
		"CONVERSATION_STATE_CHANGE_TIMER_NAME_TALK_SUSPENDED":              104,
		"CONVERSATION_STATE_CHANGE_TIMER_NAME_WRAP_UP":                     200,
		"CONVERSATION_STATE_CHANGE_TIMER_NAME_IDLE":                        300,
	}
)

func (x ConversationStateChangeTimerName) Enum() *ConversationStateChangeTimerName {
	p := new(ConversationStateChangeTimerName)
	*p = x
	return p
}

func (x ConversationStateChangeTimerName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationStateChangeTimerName) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[17].Descriptor()
}

func (ConversationStateChangeTimerName) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[17]
}

func (x ConversationStateChangeTimerName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationStateChangeTimerName.Descriptor instead.
func (ConversationStateChangeTimerName) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{17}
}

// OmniConversationMetadataName -
type OmniConversationMetadataName int32

const (
	OmniConversationMetadataName_AGENT_RESPONSE_TIME                                               OmniConversationMetadataName = 0
	OmniConversationMetadataName_CUSTOMER_WAIT_TIME                                                OmniConversationMetadataName = 1
	OmniConversationMetadataName_HANDLE_TIME                                                       OmniConversationMetadataName = 2
	OmniConversationMetadataName_TRANSCRIPT_PATH                                                   OmniConversationMetadataName = 3
	OmniConversationMetadataName_OMNI_CONVERSATION_METADATA_NAME_FLOW_DATA                         OmniConversationMetadataName = 4
	OmniConversationMetadataName_OMNI_CONVERSATION_METADATA_NAME_TIMER_WAIT                        OmniConversationMetadataName = 10
	OmniConversationMetadataName_OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK                        OmniConversationMetadataName = 100
	OmniConversationMetadataName_OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK_INITIAL_AGENT_RESPONSE OmniConversationMetadataName = 101
	OmniConversationMetadataName_OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK_AGENT_RESPONSE         OmniConversationMetadataName = 102
	OmniConversationMetadataName_OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK_CUSTOMER_RESPONSE      OmniConversationMetadataName = 103
	OmniConversationMetadataName_OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK_SUSPENDED              OmniConversationMetadataName = 104
	OmniConversationMetadataName_OMNI_CONVERSATION_METADATA_NAME_TIMER_WRAP_UP                     OmniConversationMetadataName = 200
	OmniConversationMetadataName_OMNI_CONVERSATION_METADATA_NAME_TIMER_IDLE                        OmniConversationMetadataName = 300
)

// Enum value maps for OmniConversationMetadataName.
var (
	OmniConversationMetadataName_name = map[int32]string{
		0:   "AGENT_RESPONSE_TIME",
		1:   "CUSTOMER_WAIT_TIME",
		2:   "HANDLE_TIME",
		3:   "TRANSCRIPT_PATH",
		4:   "OMNI_CONVERSATION_METADATA_NAME_FLOW_DATA",
		10:  "OMNI_CONVERSATION_METADATA_NAME_TIMER_WAIT",
		100: "OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK",
		101: "OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK_INITIAL_AGENT_RESPONSE",
		102: "OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK_AGENT_RESPONSE",
		103: "OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK_CUSTOMER_RESPONSE",
		104: "OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK_SUSPENDED",
		200: "OMNI_CONVERSATION_METADATA_NAME_TIMER_WRAP_UP",
		300: "OMNI_CONVERSATION_METADATA_NAME_TIMER_IDLE",
	}
	OmniConversationMetadataName_value = map[string]int32{
		"AGENT_RESPONSE_TIME":                        0,
		"CUSTOMER_WAIT_TIME":                         1,
		"HANDLE_TIME":                                2,
		"TRANSCRIPT_PATH":                            3,
		"OMNI_CONVERSATION_METADATA_NAME_FLOW_DATA":  4,
		"OMNI_CONVERSATION_METADATA_NAME_TIMER_WAIT": 10,
		"OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK": 100,
		"OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK_INITIAL_AGENT_RESPONSE": 101,
		"OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK_AGENT_RESPONSE":         102,
		"OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK_CUSTOMER_RESPONSE":      103,
		"OMNI_CONVERSATION_METADATA_NAME_TIMER_TALK_SUSPENDED":              104,
		"OMNI_CONVERSATION_METADATA_NAME_TIMER_WRAP_UP":                     200,
		"OMNI_CONVERSATION_METADATA_NAME_TIMER_IDLE":                        300,
	}
)

func (x OmniConversationMetadataName) Enum() *OmniConversationMetadataName {
	p := new(OmniConversationMetadataName)
	*p = x
	return p
}

func (x OmniConversationMetadataName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OmniConversationMetadataName) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[18].Descriptor()
}

func (OmniConversationMetadataName) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[18]
}

func (x OmniConversationMetadataName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OmniConversationMetadataName.Descriptor instead.
func (OmniConversationMetadataName) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{18}
}

type ProjectStatus int32

const (
	ProjectStatus_PROJECT_STATUS_UNKNOWN ProjectStatus = 0
	ProjectStatus_PROJECT_STATUS_OPEN    ProjectStatus = 17000 //Project status is Open
	ProjectStatus_PROJECT_STATUS_CLOSED  ProjectStatus = 17010 //Project status is Closed
)

// Enum value maps for ProjectStatus.
var (
	ProjectStatus_name = map[int32]string{
		0:     "PROJECT_STATUS_UNKNOWN",
		17000: "PROJECT_STATUS_OPEN",
		17010: "PROJECT_STATUS_CLOSED",
	}
	ProjectStatus_value = map[string]int32{
		"PROJECT_STATUS_UNKNOWN": 0,
		"PROJECT_STATUS_OPEN":    17000,
		"PROJECT_STATUS_CLOSED":  17010,
	}
)

func (x ProjectStatus) Enum() *ProjectStatus {
	p := new(ProjectStatus)
	*p = x
	return p
}

func (x ProjectStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[19].Descriptor()
}

func (ProjectStatus) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[19]
}

func (x ProjectStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectStatus.Descriptor instead.
func (ProjectStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{19}
}

type CampaignStatus int32

const (
	CampaignStatus_CAMPAIGN_STATUS_SCHEDULED    CampaignStatus = 0
	CampaignStatus_CAMPAIGN_STATUS_RUNNING      CampaignStatus = 1
	CampaignStatus_CAMPAIGN_STATUS_PAUSED       CampaignStatus = 2
	CampaignStatus_CAMPAIGN_STATUS_COMPLETED    CampaignStatus = 3
	CampaignStatus_CAMPAIGN_STATUS_CANCELED     CampaignStatus = 4
	CampaignStatus_CAMPAIGN_STATUS_ERROR_PAUSED CampaignStatus = 5
)

// Enum value maps for CampaignStatus.
var (
	CampaignStatus_name = map[int32]string{
		0: "CAMPAIGN_STATUS_SCHEDULED",
		1: "CAMPAIGN_STATUS_RUNNING",
		2: "CAMPAIGN_STATUS_PAUSED",
		3: "CAMPAIGN_STATUS_COMPLETED",
		4: "CAMPAIGN_STATUS_CANCELED",
		5: "CAMPAIGN_STATUS_ERROR_PAUSED",
	}
	CampaignStatus_value = map[string]int32{
		"CAMPAIGN_STATUS_SCHEDULED":    0,
		"CAMPAIGN_STATUS_RUNNING":      1,
		"CAMPAIGN_STATUS_PAUSED":       2,
		"CAMPAIGN_STATUS_COMPLETED":    3,
		"CAMPAIGN_STATUS_CANCELED":     4,
		"CAMPAIGN_STATUS_ERROR_PAUSED": 5,
	}
)

func (x CampaignStatus) Enum() *CampaignStatus {
	p := new(CampaignStatus)
	*p = x
	return p
}

func (x CampaignStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CampaignStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[20].Descriptor()
}

func (CampaignStatus) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[20]
}

func (x CampaignStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CampaignStatus.Descriptor instead.
func (CampaignStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{20}
}

type CampaignDirection int32

const (
	CampaignDirection_CAMPAIGN_DIRECTION_INBOUND  CampaignDirection = 0
	CampaignDirection_CAMPAIGN_DIRECTION_OUTBOUND CampaignDirection = 1
)

// Enum value maps for CampaignDirection.
var (
	CampaignDirection_name = map[int32]string{
		0: "CAMPAIGN_DIRECTION_INBOUND",
		1: "CAMPAIGN_DIRECTION_OUTBOUND",
	}
	CampaignDirection_value = map[string]int32{
		"CAMPAIGN_DIRECTION_INBOUND":  0,
		"CAMPAIGN_DIRECTION_OUTBOUND": 1,
	}
)

func (x CampaignDirection) Enum() *CampaignDirection {
	p := new(CampaignDirection)
	*p = x
	return p
}

func (x CampaignDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CampaignDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[21].Descriptor()
}

func (CampaignDirection) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[21]
}

func (x CampaignDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CampaignDirection.Descriptor instead.
func (CampaignDirection) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{21}
}

// WhatsAppNumberProvider
type WhatsAppNumberProvider int32

const (
	// Unknown provider
	WhatsAppNumberProvider_UNKNOWN_WHATSAPP_PROVIDER WhatsAppNumberProvider = 0
	// WhatsAppSmsProvder
	WhatsAppNumberProvider_WHATSAPP_SMS_PROVIDER WhatsAppNumberProvider = 1
)

// Enum value maps for WhatsAppNumberProvider.
var (
	WhatsAppNumberProvider_name = map[int32]string{
		0: "UNKNOWN_WHATSAPP_PROVIDER",
		1: "WHATSAPP_SMS_PROVIDER",
	}
	WhatsAppNumberProvider_value = map[string]int32{
		"UNKNOWN_WHATSAPP_PROVIDER": 0,
		"WHATSAPP_SMS_PROVIDER":     1,
	}
)

func (x WhatsAppNumberProvider) Enum() *WhatsAppNumberProvider {
	p := new(WhatsAppNumberProvider)
	*p = x
	return p
}

func (x WhatsAppNumberProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WhatsAppNumberProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_api_commons_omnichannel_proto_enumTypes[22].Descriptor()
}

func (WhatsAppNumberProvider) Type() protoreflect.EnumType {
	return &file_api_commons_omnichannel_proto_enumTypes[22]
}

func (x WhatsAppNumberProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WhatsAppNumberProvider.Descriptor instead.
func (WhatsAppNumberProvider) EnumDescriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{22}
}

// OmniCampaign -
type OmniCampaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the campaign identifier
	CampaignSid int64 `protobuf:"varint,1,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// the campaign name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// the campaign description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// skills associated with the campaign
	//
	// Deprecated: Marked as deprecated in api/commons/omnichannel.proto.
	Skills *OmniConversationSkills `protobuf:"bytes,4,opt,name=skills,proto3" json:"skills,omitempty"`
	// time the campaign should start; null == (not scheduled) || (start now)
	StartDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// campaign status (i.e. running|stopped|paused|etc.)
	Status OmniCampaignStatus `protobuf:"varint,6,opt,name=status,proto3,enum=api.commons.OmniCampaignStatus" json:"status,omitempty"`
	// campaign channel type (chat|email|sms|whatsapp|etc.)
	ChannelType ChannelType `protobuf:"varint,7,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// the time the campaign was created
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// the time the campaign was last modified
	DateModified *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	// identifier of the project the campaign belongs to
	ProjectSid int64 `protobuf:"varint,10,opt,name=project_sid,json=projectSid,proto3" json:"project_sid,omitempty"`
	// associated modules
	Modules []*OmniCampaignModule `protobuf:"bytes,11,rep,name=modules,proto3" json:"modules,omitempty"`
	// the campaign timezone
	TimeZone *TimeZoneWrapper `protobuf:"bytes,12,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// shorten URL
	ShortenUrl bool `protobuf:"varint,13,opt,name=shorten_url,json=shortenUrl,proto3" json:"shorten_url,omitempty"`
	// compliance configuration
	ComplianceConfig *OmniComplianceConfig `protobuf:"bytes,14,opt,name=compliance_config,json=complianceConfig,proto3" json:"compliance_config,omitempty"`
}

func (x *OmniCampaign) Reset() {
	*x = OmniCampaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniCampaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniCampaign) ProtoMessage() {}

func (x *OmniCampaign) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniCampaign.ProtoReflect.Descriptor instead.
func (*OmniCampaign) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{0}
}

func (x *OmniCampaign) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmniCampaign) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OmniCampaign) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Deprecated: Marked as deprecated in api/commons/omnichannel.proto.
func (x *OmniCampaign) GetSkills() *OmniConversationSkills {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *OmniCampaign) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *OmniCampaign) GetStatus() OmniCampaignStatus {
	if x != nil {
		return x.Status
	}
	return OmniCampaignStatus_SCHEDULING
}

func (x *OmniCampaign) GetChannelType() ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return ChannelType_CHANNEL_TYPE_EMAIL
}

func (x *OmniCampaign) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *OmniCampaign) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *OmniCampaign) GetProjectSid() int64 {
	if x != nil {
		return x.ProjectSid
	}
	return 0
}

func (x *OmniCampaign) GetModules() []*OmniCampaignModule {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *OmniCampaign) GetTimeZone() *TimeZoneWrapper {
	if x != nil {
		return x.TimeZone
	}
	return nil
}

func (x *OmniCampaign) GetShortenUrl() bool {
	if x != nil {
		return x.ShortenUrl
	}
	return false
}

func (x *OmniCampaign) GetComplianceConfig() *OmniComplianceConfig {
	if x != nil {
		return x.ComplianceConfig
	}
	return nil
}

// OmniCampaign -
type OmniCampaignModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the campaign module identifier
	CampaignModuleSid int64 `protobuf:"varint,1,opt,name=campaign_module_sid,json=campaignModuleSid,proto3" json:"campaign_module_sid,omitempty"`
	// the campaign identifier
	CampaignSid int64 `protobuf:"varint,2,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// module type (inbound|outbound)
	ModuleType OmniCampaignModuleType `protobuf:"varint,3,opt,name=module_type,json=moduleType,proto3,enum=api.commons.OmniCampaignModuleType" json:"module_type,omitempty"`
	// campaign module status (running|stopped|etc.)
	Status OmniCampaignModuleStatus `protobuf:"varint,4,opt,name=status,proto3,enum=api.commons.OmniCampaignModuleStatus" json:"status,omitempty"`
	// config data specific to the module
	Config *OmniCampaignModuleConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// date module was created
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// date module was last modified
	DateModified *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	// when campaign is scheduled to stop; null == not a scheduled module
	ScheduledStopDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=scheduled_stop_date,json=scheduledStopDate,proto3" json:"scheduled_stop_date,omitempty"`
	// time campaign was actually stopped; null == not stopped yet
	ActualStopDate *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=actual_stop_date,json=actualStopDate,proto3" json:"actual_stop_date,omitempty"`
	// campaign module operating time; nullable
	HoursOfOperation *WeekdayTimeRange `protobuf:"bytes,10,opt,name=hours_of_operation,json=hoursOfOperation,proto3" json:"hours_of_operation,omitempty"`
	// read-only (i.e. only returned from the BE, never read, so setting this does nothing) selectable details when retrieving a module
	Details *OmniCampaignModule_Details `protobuf:"bytes,11,opt,name=details,proto3" json:"details,omitempty"`
	// attachments
	Attachments []*OmniAttachment `protobuf:"bytes,12,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *OmniCampaignModule) Reset() {
	*x = OmniCampaignModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniCampaignModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniCampaignModule) ProtoMessage() {}

func (x *OmniCampaignModule) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniCampaignModule.ProtoReflect.Descriptor instead.
func (*OmniCampaignModule) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{1}
}

func (x *OmniCampaignModule) GetCampaignModuleSid() int64 {
	if x != nil {
		return x.CampaignModuleSid
	}
	return 0
}

func (x *OmniCampaignModule) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmniCampaignModule) GetModuleType() OmniCampaignModuleType {
	if x != nil {
		return x.ModuleType
	}
	return OmniCampaignModuleType_MODULE_TYPE_INBOUND
}

func (x *OmniCampaignModule) GetStatus() OmniCampaignModuleStatus {
	if x != nil {
		return x.Status
	}
	return OmniCampaignModuleStatus_MODULE_PREPARING
}

func (x *OmniCampaignModule) GetConfig() *OmniCampaignModuleConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *OmniCampaignModule) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *OmniCampaignModule) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *OmniCampaignModule) GetScheduledStopDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStopDate
	}
	return nil
}

func (x *OmniCampaignModule) GetActualStopDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualStopDate
	}
	return nil
}

func (x *OmniCampaignModule) GetHoursOfOperation() *WeekdayTimeRange {
	if x != nil {
		return x.HoursOfOperation
	}
	return nil
}

func (x *OmniCampaignModule) GetDetails() *OmniCampaignModule_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *OmniCampaignModule) GetAttachments() []*OmniAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// OmniCampaignModuleConfig -
type OmniCampaignModuleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary api key for chat widget
	ApiKeyPrimary *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=api_key_primary,json=apiKeyPrimary,proto3" json:"api_key_primary,omitempty"`
	// secondary api key for chat widget
	ApiKeySecondary *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=api_key_secondary,json=apiKeySecondary,proto3" json:"api_key_secondary,omitempty"`
	// chat widget color properties
	ColorProperties *ChatColorProperties `protobuf:"bytes,3,opt,name=color_properties,json=colorProperties,proto3" json:"color_properties,omitempty"`
	// identifier of the connected inbox associated to the CampaignModule
	ConnectedInboxSid *Int64Id `protobuf:"bytes,4,opt,name=connected_inbox_sid,json=connectedInboxSid,proto3" json:"connected_inbox_sid,omitempty"`
	// list of dispositions associated to the CampaignModule
	Dispositions []*Disposition `protobuf:"bytes,5,rep,name=dispositions,proto3" json:"dispositions,omitempty"`
	// email associated to the CampaignModule
	Email *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	// message body
	MessageBody *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=message_body,json=messageBody,proto3" json:"message_body,omitempty"`
	// email subject
	EmailSubject *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=email_subject,json=emailSubject,proto3" json:"email_subject,omitempty"`
	// sms number
	SmsNumber *SmsNumber `protobuf:"bytes,9,opt,name=sms_number,json=smsNumber,proto3" json:"sms_number,omitempty"`
	// chat widget header
	Header *ChatHeader `protobuf:"bytes,10,opt,name=header,proto3" json:"header,omitempty"`
	// sla timeouts associated with the CampaignModule
	SlaTimeouts *SLATimeouts `protobuf:"bytes,11,opt,name=sla_timeouts,json=slaTimeouts,proto3" json:"sla_timeouts,omitempty"`
	// maximum number of sends per hour for outbound CampaignModules
	SendsPerHour *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=sends_per_hour,json=sendsPerHour,proto3" json:"sends_per_hour,omitempty"`
	// identifier of associated custom unsubscribe link
	UnsubscribeLinkSid *Int64Id `protobuf:"bytes,13,opt,name=unsubscribe_link_sid,json=unsubscribeLinkSid,proto3" json:"unsubscribe_link_sid,omitempty"`
	// verified email identifier
	VerifiedEmailSid *Int64Id `protobuf:"bytes,15,opt,name=verified_email_sid,json=verifiedEmailSid,proto3" json:"verified_email_sid,omitempty"`
	// stop module with all tasks are completed
	StopOnTaskDeplete *wrapperspb.BoolValue `protobuf:"bytes,16,opt,name=stop_on_task_deplete,json=stopOnTaskDeplete,proto3" json:"stop_on_task_deplete,omitempty"`
	// attachments
	Attachments []*OmniAttachment `protobuf:"bytes,17,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// Optional. compliance rule set to use for this campaign
	ComplianceRuleSetId *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=compliance_rule_set_id,json=complianceRuleSetId,proto3" json:"compliance_rule_set_id,omitempty"`
	// Payment Portal Ids
	PaymentPortalIds []string `protobuf:"bytes,19,rep,name=payment_portal_ids,json=paymentPortalIds,proto3" json:"payment_portal_ids,omitempty"`
	// Flow Id
	FlowId *Int64Id `protobuf:"bytes,20,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	// skills
	Skills *OmniConversationSkills `protobuf:"bytes,21,opt,name=skills,proto3" json:"skills,omitempty"`
	// whatsapp number
	WhatsappNumber *WhatsAppNumber `protobuf:"bytes,22,opt,name=whatsapp_number,json=whatsappNumber,proto3" json:"whatsapp_number,omitempty"`
	// ProviderMetadata
	//   - SmartPing
	//     content_id - the id of the premade message in the smartping system
	ProviderMetadata map[string]string `protobuf:"bytes,23,rep,name=provider_metadata,json=providerMetadata,proto3" json:"provider_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The country code and postal code field together determine timezone for email time based compliance rulesets
	// country code
	CountryCode int32 `protobuf:"varint,24,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// postal code field
	PostalCodeField string `protobuf:"bytes,25,opt,name=postal_code_field,json=postalCodeField,proto3" json:"postal_code_field,omitempty"`
	// allows the user to configure a custom message for when a conversation times out, or to disable the message all together
	TimeoutMessageConfig *ConversationTimeoutMessageConfig `protobuf:"bytes,26,opt,name=timeout_message_config,json=timeoutMessageConfig,proto3" json:"timeout_message_config,omitempty"`
}

func (x *OmniCampaignModuleConfig) Reset() {
	*x = OmniCampaignModuleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniCampaignModuleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniCampaignModuleConfig) ProtoMessage() {}

func (x *OmniCampaignModuleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniCampaignModuleConfig.ProtoReflect.Descriptor instead.
func (*OmniCampaignModuleConfig) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{2}
}

func (x *OmniCampaignModuleConfig) GetApiKeyPrimary() *wrapperspb.StringValue {
	if x != nil {
		return x.ApiKeyPrimary
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetApiKeySecondary() *wrapperspb.StringValue {
	if x != nil {
		return x.ApiKeySecondary
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetColorProperties() *ChatColorProperties {
	if x != nil {
		return x.ColorProperties
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetConnectedInboxSid() *Int64Id {
	if x != nil {
		return x.ConnectedInboxSid
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetDispositions() []*Disposition {
	if x != nil {
		return x.Dispositions
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetMessageBody() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageBody
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetEmailSubject() *wrapperspb.StringValue {
	if x != nil {
		return x.EmailSubject
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetSmsNumber() *SmsNumber {
	if x != nil {
		return x.SmsNumber
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetHeader() *ChatHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetSlaTimeouts() *SLATimeouts {
	if x != nil {
		return x.SlaTimeouts
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetSendsPerHour() *wrapperspb.Int64Value {
	if x != nil {
		return x.SendsPerHour
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetUnsubscribeLinkSid() *Int64Id {
	if x != nil {
		return x.UnsubscribeLinkSid
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetVerifiedEmailSid() *Int64Id {
	if x != nil {
		return x.VerifiedEmailSid
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetStopOnTaskDeplete() *wrapperspb.BoolValue {
	if x != nil {
		return x.StopOnTaskDeplete
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetAttachments() []*OmniAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetComplianceRuleSetId() *wrapperspb.StringValue {
	if x != nil {
		return x.ComplianceRuleSetId
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetPaymentPortalIds() []string {
	if x != nil {
		return x.PaymentPortalIds
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetFlowId() *Int64Id {
	if x != nil {
		return x.FlowId
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetSkills() *OmniConversationSkills {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetWhatsappNumber() *WhatsAppNumber {
	if x != nil {
		return x.WhatsappNumber
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetProviderMetadata() map[string]string {
	if x != nil {
		return x.ProviderMetadata
	}
	return nil
}

func (x *OmniCampaignModuleConfig) GetCountryCode() int32 {
	if x != nil {
		return x.CountryCode
	}
	return 0
}

func (x *OmniCampaignModuleConfig) GetPostalCodeField() string {
	if x != nil {
		return x.PostalCodeField
	}
	return ""
}

func (x *OmniCampaignModuleConfig) GetTimeoutMessageConfig() *ConversationTimeoutMessageConfig {
	if x != nil {
		return x.TimeoutMessageConfig
	}
	return nil
}

// allows the user to configure a custom message for when a conversation times out, or to disable the message all together
type ConversationTimeoutMessageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// disables timeout messages altogether, defaults at false for no change is previous behavior
	IsDisabled bool `protobuf:"varint,1,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
	// msg is the configurable message for the timeout. If msg is left blank, the canned message is sent
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ConversationTimeoutMessageConfig) Reset() {
	*x = ConversationTimeoutMessageConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationTimeoutMessageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationTimeoutMessageConfig) ProtoMessage() {}

func (x *ConversationTimeoutMessageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationTimeoutMessageConfig.ProtoReflect.Descriptor instead.
func (*ConversationTimeoutMessageConfig) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{3}
}

func (x *ConversationTimeoutMessageConfig) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *ConversationTimeoutMessageConfig) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// SmsNumber
type SmsNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string representation of the sms number
	Number string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	// the type of sms number (Alphanumeric|Short Code|Number)
	Type SmsNumberType `protobuf:"varint,2,opt,name=type,proto3,enum=api.commons.SmsNumberType" json:"type,omitempty"`
	// associated provider (Bandwidth|BurstSMS|etc.)
	Provider SmsNumberProvider `protobuf:"varint,3,opt,name=provider,proto3,enum=api.commons.SmsNumberProvider" json:"provider,omitempty"`
	// country code the sms number belongs to
	CountryCode int32 `protobuf:"varint,4,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
}

func (x *SmsNumber) Reset() {
	*x = SmsNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmsNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsNumber) ProtoMessage() {}

func (x *SmsNumber) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsNumber.ProtoReflect.Descriptor instead.
func (*SmsNumber) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{4}
}

func (x *SmsNumber) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *SmsNumber) GetType() SmsNumberType {
	if x != nil {
		return x.Type
	}
	return SmsNumberType_SMS_SHORT_CODE_TYPE
}

func (x *SmsNumber) GetProvider() SmsNumberProvider {
	if x != nil {
		return x.Provider
	}
	return SmsNumberProvider_UNKNOWN_PROVIDER
}

func (x *SmsNumber) GetCountryCode() int32 {
	if x != nil {
		return x.CountryCode
	}
	return 0
}

type ConversationCustomerInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PhoneNumber  string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	EmailAddress string `protobuf:"bytes,3,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
}

func (x *ConversationCustomerInformation) Reset() {
	*x = ConversationCustomerInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationCustomerInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationCustomerInformation) ProtoMessage() {}

func (x *ConversationCustomerInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationCustomerInformation.ProtoReflect.Descriptor instead.
func (*ConversationCustomerInformation) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{5}
}

func (x *ConversationCustomerInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConversationCustomerInformation) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ConversationCustomerInformation) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

type SLATimeouts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// max amount of time in seconds that it should take for an agent to respond to a customer message. Will reset after each customer response.
	T1 int64 `protobuf:"varint,1,opt,name=t1,proto3" json:"t1,omitempty"`
	// amount of time in seconds the conversation takes space in an agent's queue waiting for a customer's response
	T2 int64 `protobuf:"varint,2,opt,name=t2,proto3" json:"t2,omitempty"`
	// amount of time in seconds that the frontend system will wait for an agent response before a conversation gets reassigned
	T3 int64 `protobuf:"varint,3,opt,name=t3,proto3" json:"t3,omitempty"`
	// amount of time in seconds that the backend system will wait for an agent response before a conversation gets reassigned
	T10 int64 `protobuf:"varint,10,opt,name=t10,proto3" json:"t10,omitempty"`
	// amount of time in seconds that the backend system will wait for a customer response before a conversation gets closed
	T11 int64 `protobuf:"varint,11,opt,name=t11,proto3" json:"t11,omitempty"`
	// amount of time in seconds that the backend system will wait until a unassigned conversation is closed timeout
	T12 int64 `protobuf:"varint,12,opt,name=t12,proto3" json:"t12,omitempty"`
}

func (x *SLATimeouts) Reset() {
	*x = SLATimeouts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLATimeouts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLATimeouts) ProtoMessage() {}

func (x *SLATimeouts) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLATimeouts.ProtoReflect.Descriptor instead.
func (*SLATimeouts) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{6}
}

func (x *SLATimeouts) GetT1() int64 {
	if x != nil {
		return x.T1
	}
	return 0
}

func (x *SLATimeouts) GetT2() int64 {
	if x != nil {
		return x.T2
	}
	return 0
}

func (x *SLATimeouts) GetT3() int64 {
	if x != nil {
		return x.T3
	}
	return 0
}

func (x *SLATimeouts) GetT10() int64 {
	if x != nil {
		return x.T10
	}
	return 0
}

func (x *SLATimeouts) GetT11() int64 {
	if x != nil {
		return x.T11
	}
	return 0
}

func (x *SLATimeouts) GetT12() int64 {
	if x != nil {
		return x.T12
	}
	return 0
}

// represents a a list of information collected for a conversation
type ConversationCollectedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the list of data
	Items []*ConversationCollectedData_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ConversationCollectedData) Reset() {
	*x = ConversationCollectedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationCollectedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationCollectedData) ProtoMessage() {}

func (x *ConversationCollectedData) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationCollectedData.ProtoReflect.Descriptor instead.
func (*ConversationCollectedData) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{7}
}

func (x *ConversationCollectedData) GetItems() []*ConversationCollectedData_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

// represents a piece of meta information collect for a particular conversation
type ConversationCollectedData_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the record
	ConversationCollectedDataSid int64 `protobuf:"varint,1,opt,name=conversation_collected_data_sid,json=conversationCollectedDataSid,proto3" json:"conversation_collected_data_sid,omitempty"`
	// the id of the conversation
	ConversationSid int64 `protobuf:"varint,2,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// the name of the data
	DataName string `protobuf:"bytes,3,opt,name=data_name,json=dataName,proto3" json:"data_name,omitempty"`
	// the value of the data
	DataValue string `protobuf:"bytes,4,opt,name=data_value,json=dataValue,proto3" json:"data_value,omitempty"`
	// when the data was collected
	CollectionTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=collection_time,json=collectionTime,proto3" json:"collection_time,omitempty"`
	// the user that collected the data (if this is not set then it was collected by the customer)
	UserId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ConversationCollectedData_Item) Reset() {
	*x = ConversationCollectedData_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationCollectedData_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationCollectedData_Item) ProtoMessage() {}

func (x *ConversationCollectedData_Item) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationCollectedData_Item.ProtoReflect.Descriptor instead.
func (*ConversationCollectedData_Item) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{8}
}

func (x *ConversationCollectedData_Item) GetConversationCollectedDataSid() int64 {
	if x != nil {
		return x.ConversationCollectedDataSid
	}
	return 0
}

func (x *ConversationCollectedData_Item) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *ConversationCollectedData_Item) GetDataName() string {
	if x != nil {
		return x.DataName
	}
	return ""
}

func (x *ConversationCollectedData_Item) GetDataValue() string {
	if x != nil {
		return x.DataValue
	}
	return ""
}

func (x *ConversationCollectedData_Item) GetCollectionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CollectionTime
	}
	return nil
}

func (x *ConversationCollectedData_Item) GetUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.UserId
	}
	return nil
}

type OmniMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this is the primary key or internal tcn identifier for the message
	MessageSid int64 `protobuf:"varint,1,opt,name=message_sid,json=messageSid,proto3" json:"message_sid,omitempty"`
	// this is the user id that sent the message - this can be not set which would
	// be the case if it's not an agent message
	UserId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// this is who the message is from
	// chat = if agent then user_id, if customer then name
	// email = email address
	// sms = phone number
	// whatsapp = phone number
	SentFrom string `protobuf:"bytes,5,opt,name=sent_from,json=sentFrom,proto3" json:"sent_from,omitempty"`
	// this is who the message is to
	// chat = if customer then name, otherwise leave as an empty string
	// email = email address
	// sms = phone number
	// whatsapp = phone number
	SentTo string `protobuf:"bytes,6,opt,name=sent_to,json=sentTo,proto3" json:"sent_to,omitempty"`
	// the message channel type
	ChannelType ChannelType `protobuf:"varint,7,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// this is how the message is referenced by the outside world
	// chat = not set
	// email = email message header
	// sms = not set
	// whatsapp = not set
	ReferenceId *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	// this is an id that the UI generates so it's able to identify it when it sees it again
	UiReferenceId string `protobuf:"bytes,10,opt,name=ui_reference_id,json=uiReferenceId,proto3" json:"ui_reference_id,omitempty"`
	// this is the payload of the message
	Payload *OmniMessagePayload `protobuf:"bytes,11,opt,name=payload,proto3" json:"payload,omitempty"`
	// the id of the conversation. This is not required to be set because the message could
	// belong to a outbound campaign only
	ConversationSid *Int64Id `protobuf:"bytes,12,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// the current status of the message.
	Status OmniMessageStatus `protobuf:"varint,14,opt,name=status,proto3,enum=api.commons.OmniMessageStatus" json:"status,omitempty"`
	// the time the message was created
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// the time the message was last modified
	DateModified *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	// identifier of the campaign the message belongs to
	CampaignSid int64 `protobuf:"varint,17,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// The subject of the conversation
	// chat = not set
	// email = the email subject line
	// sms = not set
	// whatsapp = not set
	Subject *wrapperspb.StringValue `protobuf:"bytes,19,opt,name=subject,proto3" json:"subject,omitempty"`
	// if this message is coming from omni boss is a manager message
	SenderType OmniSenderType `protobuf:"varint,21,opt,name=sender_type,json=senderType,proto3,enum=api.commons.OmniSenderType" json:"sender_type,omitempty"`
	// status message
	StatusMessage *wrapperspb.StringValue `protobuf:"bytes,22,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// the message format
	MessageFormat MessageFormat `protobuf:"varint,23,opt,name=message_format,json=messageFormat,proto3,enum=api.commons.MessageFormat" json:"message_format,omitempty"`
}

func (x *OmniMessage) Reset() {
	*x = OmniMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniMessage) ProtoMessage() {}

func (x *OmniMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniMessage.ProtoReflect.Descriptor instead.
func (*OmniMessage) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{9}
}

func (x *OmniMessage) GetMessageSid() int64 {
	if x != nil {
		return x.MessageSid
	}
	return 0
}

func (x *OmniMessage) GetUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *OmniMessage) GetSentFrom() string {
	if x != nil {
		return x.SentFrom
	}
	return ""
}

func (x *OmniMessage) GetSentTo() string {
	if x != nil {
		return x.SentTo
	}
	return ""
}

func (x *OmniMessage) GetChannelType() ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return ChannelType_CHANNEL_TYPE_EMAIL
}

func (x *OmniMessage) GetReferenceId() *wrapperspb.StringValue {
	if x != nil {
		return x.ReferenceId
	}
	return nil
}

func (x *OmniMessage) GetUiReferenceId() string {
	if x != nil {
		return x.UiReferenceId
	}
	return ""
}

func (x *OmniMessage) GetPayload() *OmniMessagePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *OmniMessage) GetConversationSid() *Int64Id {
	if x != nil {
		return x.ConversationSid
	}
	return nil
}

func (x *OmniMessage) GetStatus() OmniMessageStatus {
	if x != nil {
		return x.Status
	}
	return OmniMessageStatus_OMNI_MESSAGE_CREATED
}

func (x *OmniMessage) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *OmniMessage) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *OmniMessage) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmniMessage) GetSubject() *wrapperspb.StringValue {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *OmniMessage) GetSenderType() OmniSenderType {
	if x != nil {
		return x.SenderType
	}
	return OmniSenderType_OMNI_SENDER_TYPE_AGENT
}

func (x *OmniMessage) GetStatusMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.StatusMessage
	}
	return nil
}

func (x *OmniMessage) GetMessageFormat() MessageFormat {
	if x != nil {
		return x.MessageFormat
	}
	return MessageFormat_MESSAGE_FORMAT_UNSPECIFIED
}

type CustomerChatWidgetMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id for this given message
	MessageSid int64 `protobuf:"varint,1,opt,name=message_sid,json=messageSid,proto3" json:"message_sid,omitempty"`
	// this is the payload of the message
	Payload *OmniMessagePayload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// the time the message got publish and made available for other parties to
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// a unique id created by the client to ensure it doesn't send the same message twice
	UiReferenceId string `protobuf:"bytes,4,opt,name=ui_reference_id,json=uiReferenceId,proto3" json:"ui_reference_id,omitempty"`
	// that sender of this message
	CustomerInformation *ConversationCustomerInformation `protobuf:"bytes,5,opt,name=customer_information,json=customerInformation,proto3" json:"customer_information,omitempty"`
}

func (x *CustomerChatWidgetMessage) Reset() {
	*x = CustomerChatWidgetMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerChatWidgetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerChatWidgetMessage) ProtoMessage() {}

func (x *CustomerChatWidgetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerChatWidgetMessage.ProtoReflect.Descriptor instead.
func (*CustomerChatWidgetMessage) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{10}
}

func (x *CustomerChatWidgetMessage) GetMessageSid() int64 {
	if x != nil {
		return x.MessageSid
	}
	return 0
}

func (x *CustomerChatWidgetMessage) GetPayload() *OmniMessagePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CustomerChatWidgetMessage) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *CustomerChatWidgetMessage) GetUiReferenceId() string {
	if x != nil {
		return x.UiReferenceId
	}
	return ""
}

func (x *CustomerChatWidgetMessage) GetCustomerInformation() *ConversationCustomerInformation {
	if x != nil {
		return x.CustomerInformation
	}
	return nil
}

type AgentChatWidgetMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id for this given message
	MessageSid int64 `protobuf:"varint,1,opt,name=message_sid,json=messageSid,proto3" json:"message_sid,omitempty"`
	// this is the payload of the message
	Payload *OmniMessagePayload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// the time the message got publish and made available for other parties to
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// a unique id created by the client to ensure it doesn't send the same message twice
	UiReferenceId string `protobuf:"bytes,4,opt,name=ui_reference_id,json=uiReferenceId,proto3" json:"ui_reference_id,omitempty"`
	// that sender of this message
	UserInformation *OmniConversationUserInformation `protobuf:"bytes,5,opt,name=user_information,json=userInformation,proto3" json:"user_information,omitempty"`
	// the sender type of this message
	SenderType OmniSenderType `protobuf:"varint,6,opt,name=sender_type,json=senderType,proto3,enum=api.commons.OmniSenderType" json:"sender_type,omitempty"`
	// the message format
	MessageFormat MessageFormat `protobuf:"varint,7,opt,name=message_format,json=messageFormat,proto3,enum=api.commons.MessageFormat" json:"message_format,omitempty"`
}

func (x *AgentChatWidgetMessage) Reset() {
	*x = AgentChatWidgetMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentChatWidgetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentChatWidgetMessage) ProtoMessage() {}

func (x *AgentChatWidgetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentChatWidgetMessage.ProtoReflect.Descriptor instead.
func (*AgentChatWidgetMessage) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{11}
}

func (x *AgentChatWidgetMessage) GetMessageSid() int64 {
	if x != nil {
		return x.MessageSid
	}
	return 0
}

func (x *AgentChatWidgetMessage) GetPayload() *OmniMessagePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AgentChatWidgetMessage) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *AgentChatWidgetMessage) GetUiReferenceId() string {
	if x != nil {
		return x.UiReferenceId
	}
	return ""
}

func (x *AgentChatWidgetMessage) GetUserInformation() *OmniConversationUserInformation {
	if x != nil {
		return x.UserInformation
	}
	return nil
}

func (x *AgentChatWidgetMessage) GetSenderType() OmniSenderType {
	if x != nil {
		return x.SenderType
	}
	return OmniSenderType_OMNI_SENDER_TYPE_AGENT
}

func (x *AgentChatWidgetMessage) GetMessageFormat() MessageFormat {
	if x != nil {
		return x.MessageFormat
	}
	return MessageFormat_MESSAGE_FORMAT_UNSPECIFIED
}

type OmniMessagePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*OmniMessagePayload_TextMessage
	//	*OmniMessagePayload_TypingNotification
	//	*OmniMessagePayload_Reassignment
	//	*OmniMessagePayload_RequestAttachmentUploadUrl
	//	*OmniMessagePayload_AttachmentUploadUrl
	//	*OmniMessagePayload_Attachment
	//	*OmniMessagePayload_CloseConversation
	//	*OmniMessagePayload_AssignConversation
	//	*OmniMessagePayload_UnassignConversation
	//	*OmniMessagePayload_FinishWrapUp
	//	*OmniMessagePayload_Suspend
	//	*OmniMessagePayload_StartWrapUp
	//	*OmniMessagePayload_QueueInformation
	//	*OmniMessagePayload_RequestQueueInformation
	//	*OmniMessagePayload_OffLoadedTextMessage
	//	*OmniMessagePayload_CannedMessage
	//	*OmniMessagePayload_DataMessage
	Payload isOmniMessagePayload_Payload `protobuf_oneof:"payload"`
}

func (x *OmniMessagePayload) Reset() {
	*x = OmniMessagePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniMessagePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniMessagePayload) ProtoMessage() {}

func (x *OmniMessagePayload) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniMessagePayload.ProtoReflect.Descriptor instead.
func (*OmniMessagePayload) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{12}
}

func (m *OmniMessagePayload) GetPayload() isOmniMessagePayload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *OmniMessagePayload) GetTextMessage() *OmniTextMessage {
	if x, ok := x.GetPayload().(*OmniMessagePayload_TextMessage); ok {
		return x.TextMessage
	}
	return nil
}

func (x *OmniMessagePayload) GetTypingNotification() *OmniTypingNotification {
	if x, ok := x.GetPayload().(*OmniMessagePayload_TypingNotification); ok {
		return x.TypingNotification
	}
	return nil
}

func (x *OmniMessagePayload) GetReassignment() *OmniReassignmentNotification {
	if x, ok := x.GetPayload().(*OmniMessagePayload_Reassignment); ok {
		return x.Reassignment
	}
	return nil
}

func (x *OmniMessagePayload) GetRequestAttachmentUploadUrl() *OmniRequestAttachmentUploadURL {
	if x, ok := x.GetPayload().(*OmniMessagePayload_RequestAttachmentUploadUrl); ok {
		return x.RequestAttachmentUploadUrl
	}
	return nil
}

func (x *OmniMessagePayload) GetAttachmentUploadUrl() *OmniAttachmentUploadURL {
	if x, ok := x.GetPayload().(*OmniMessagePayload_AttachmentUploadUrl); ok {
		return x.AttachmentUploadUrl
	}
	return nil
}

func (x *OmniMessagePayload) GetAttachment() *OmniAttachment {
	if x, ok := x.GetPayload().(*OmniMessagePayload_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *OmniMessagePayload) GetCloseConversation() *OmniCloseConversation {
	if x, ok := x.GetPayload().(*OmniMessagePayload_CloseConversation); ok {
		return x.CloseConversation
	}
	return nil
}

func (x *OmniMessagePayload) GetAssignConversation() *OmniAssignConversation {
	if x, ok := x.GetPayload().(*OmniMessagePayload_AssignConversation); ok {
		return x.AssignConversation
	}
	return nil
}

func (x *OmniMessagePayload) GetUnassignConversation() *OmniUnassignConversation {
	if x, ok := x.GetPayload().(*OmniMessagePayload_UnassignConversation); ok {
		return x.UnassignConversation
	}
	return nil
}

func (x *OmniMessagePayload) GetFinishWrapUp() *OmniFinishWrapUp {
	if x, ok := x.GetPayload().(*OmniMessagePayload_FinishWrapUp); ok {
		return x.FinishWrapUp
	}
	return nil
}

func (x *OmniMessagePayload) GetSuspend() *OmniSuspend {
	if x, ok := x.GetPayload().(*OmniMessagePayload_Suspend); ok {
		return x.Suspend
	}
	return nil
}

func (x *OmniMessagePayload) GetStartWrapUp() *OmniStartWrapUp {
	if x, ok := x.GetPayload().(*OmniMessagePayload_StartWrapUp); ok {
		return x.StartWrapUp
	}
	return nil
}

func (x *OmniMessagePayload) GetQueueInformation() *OmniQueueInformation {
	if x, ok := x.GetPayload().(*OmniMessagePayload_QueueInformation); ok {
		return x.QueueInformation
	}
	return nil
}

func (x *OmniMessagePayload) GetRequestQueueInformation() *OmniRequestQueueInformation {
	if x, ok := x.GetPayload().(*OmniMessagePayload_RequestQueueInformation); ok {
		return x.RequestQueueInformation
	}
	return nil
}

func (x *OmniMessagePayload) GetOffLoadedTextMessage() *OmniOffLoadedTextMessage {
	if x, ok := x.GetPayload().(*OmniMessagePayload_OffLoadedTextMessage); ok {
		return x.OffLoadedTextMessage
	}
	return nil
}

func (x *OmniMessagePayload) GetCannedMessage() *OmniCannedMessage {
	if x, ok := x.GetPayload().(*OmniMessagePayload_CannedMessage); ok {
		return x.CannedMessage
	}
	return nil
}

func (x *OmniMessagePayload) GetDataMessage() *OmniDataMessage {
	if x, ok := x.GetPayload().(*OmniMessagePayload_DataMessage); ok {
		return x.DataMessage
	}
	return nil
}

type isOmniMessagePayload_Payload interface {
	isOmniMessagePayload_Payload()
}

type OmniMessagePayload_TextMessage struct {
	// text message
	TextMessage *OmniTextMessage `protobuf:"bytes,100,opt,name=text_message,json=textMessage,proto3,oneof"`
}

type OmniMessagePayload_TypingNotification struct {
	// typing notification
	TypingNotification *OmniTypingNotification `protobuf:"bytes,101,opt,name=typing_notification,json=typingNotification,proto3,oneof"`
}

type OmniMessagePayload_Reassignment struct {
	// reassignment notification
	Reassignment *OmniReassignmentNotification `protobuf:"bytes,102,opt,name=reassignment,proto3,oneof"`
}

type OmniMessagePayload_RequestAttachmentUploadUrl struct {
	// requesting attachment upload url
	RequestAttachmentUploadUrl *OmniRequestAttachmentUploadURL `protobuf:"bytes,103,opt,name=request_attachment_upload_url,json=requestAttachmentUploadUrl,proto3,oneof"`
}

type OmniMessagePayload_AttachmentUploadUrl struct {
	// attachment upload url
	AttachmentUploadUrl *OmniAttachmentUploadURL `protobuf:"bytes,104,opt,name=attachment_upload_url,json=attachmentUploadUrl,proto3,oneof"`
}

type OmniMessagePayload_Attachment struct {
	// attachment
	Attachment *OmniAttachment `protobuf:"bytes,105,opt,name=attachment,proto3,oneof"`
}

type OmniMessagePayload_CloseConversation struct {
	// close conversation
	CloseConversation *OmniCloseConversation `protobuf:"bytes,106,opt,name=close_conversation,json=closeConversation,proto3,oneof"`
}

type OmniMessagePayload_AssignConversation struct {
	// assign conversation
	AssignConversation *OmniAssignConversation `protobuf:"bytes,107,opt,name=assign_conversation,json=assignConversation,proto3,oneof"`
}

type OmniMessagePayload_UnassignConversation struct {
	// unassign conversation
	UnassignConversation *OmniUnassignConversation `protobuf:"bytes,108,opt,name=unassign_conversation,json=unassignConversation,proto3,oneof"`
}

type OmniMessagePayload_FinishWrapUp struct {
	// finished wrap up
	FinishWrapUp *OmniFinishWrapUp `protobuf:"bytes,109,opt,name=finish_wrap_up,json=finishWrapUp,proto3,oneof"`
}

type OmniMessagePayload_Suspend struct {
	// suspend
	Suspend *OmniSuspend `protobuf:"bytes,110,opt,name=suspend,proto3,oneof"`
}

type OmniMessagePayload_StartWrapUp struct {
	// start wrap up
	StartWrapUp *OmniStartWrapUp `protobuf:"bytes,111,opt,name=start_wrap_up,json=startWrapUp,proto3,oneof"`
}

type OmniMessagePayload_QueueInformation struct {
	// queue information
	QueueInformation *OmniQueueInformation `protobuf:"bytes,112,opt,name=queue_information,json=queueInformation,proto3,oneof"`
}

type OmniMessagePayload_RequestQueueInformation struct {
	// request queue information
	RequestQueueInformation *OmniRequestQueueInformation `protobuf:"bytes,113,opt,name=request_queue_information,json=requestQueueInformation,proto3,oneof"`
}

type OmniMessagePayload_OffLoadedTextMessage struct {
	// off loaded text message
	OffLoadedTextMessage *OmniOffLoadedTextMessage `protobuf:"bytes,114,opt,name=off_loaded_text_message,json=offLoadedTextMessage,proto3,oneof"`
}

type OmniMessagePayload_CannedMessage struct {
	// canned message
	CannedMessage *OmniCannedMessage `protobuf:"bytes,115,opt,name=canned_message,json=cannedMessage,proto3,oneof"`
}

type OmniMessagePayload_DataMessage struct {
	// data message
	DataMessage *OmniDataMessage `protobuf:"bytes,116,opt,name=data_message,json=dataMessage,proto3,oneof"`
}

func (*OmniMessagePayload_TextMessage) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_TypingNotification) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_Reassignment) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_RequestAttachmentUploadUrl) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_AttachmentUploadUrl) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_Attachment) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_CloseConversation) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_AssignConversation) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_UnassignConversation) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_FinishWrapUp) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_Suspend) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_StartWrapUp) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_QueueInformation) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_RequestQueueInformation) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_OffLoadedTextMessage) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_CannedMessage) isOmniMessagePayload_Payload() {}

func (*OmniMessagePayload_DataMessage) isOmniMessagePayload_Payload() {}

type OmniTextMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// message containing Urls
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// attachments
	Attachments []*OmniAttachment `protobuf:"bytes,2,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// primary asm session identifier
	PrimaryAsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=primary_asm_session_sid,json=primaryAsmSessionSid,proto3" json:"primary_asm_session_sid,omitempty"`
}

func (x *OmniTextMessage) Reset() {
	*x = OmniTextMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniTextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniTextMessage) ProtoMessage() {}

func (x *OmniTextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniTextMessage.ProtoReflect.Descriptor instead.
func (*OmniTextMessage) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{13}
}

func (x *OmniTextMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OmniTextMessage) GetAttachments() []*OmniAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *OmniTextMessage) GetPrimaryAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.PrimaryAsmSessionSid
	}
	return nil
}

type OmniOffLoadedTextMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location    string            `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Attachments []*OmniAttachment `protobuf:"bytes,2,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *OmniOffLoadedTextMessage) Reset() {
	*x = OmniOffLoadedTextMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniOffLoadedTextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniOffLoadedTextMessage) ProtoMessage() {}

func (x *OmniOffLoadedTextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniOffLoadedTextMessage.ProtoReflect.Descriptor instead.
func (*OmniOffLoadedTextMessage) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{14}
}

func (x *OmniOffLoadedTextMessage) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *OmniOffLoadedTextMessage) GetAttachments() []*OmniAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type OmniTypingNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OmniTypingNotification) Reset() {
	*x = OmniTypingNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniTypingNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniTypingNotification) ProtoMessage() {}

func (x *OmniTypingNotification) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniTypingNotification.ProtoReflect.Descriptor instead.
func (*OmniTypingNotification) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{15}
}

// assign conversation to agent
type OmniAssignConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// agent user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// user name used to display in the UI. This field is only set by
	// the backend when the payload is being sent to the UI
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// primary asm session identifier
	PrimaryAsmSessionSid int64 `protobuf:"varint,5,opt,name=primary_asm_session_sid,json=primaryAsmSessionSid,proto3" json:"primary_asm_session_sid,omitempty"`
}

func (x *OmniAssignConversation) Reset() {
	*x = OmniAssignConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniAssignConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniAssignConversation) ProtoMessage() {}

func (x *OmniAssignConversation) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniAssignConversation.ProtoReflect.Descriptor instead.
func (*OmniAssignConversation) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{16}
}

func (x *OmniAssignConversation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OmniAssignConversation) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *OmniAssignConversation) GetPrimaryAsmSessionSid() int64 {
	if x != nil {
		return x.PrimaryAsmSessionSid
	}
	return 0
}

// OmniMessage payload for reassigning agents
type OmniReassignmentNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the assigned user
	CurrentUserId string `protobuf:"bytes,1,opt,name=current_user_id,json=currentUserId,proto3" json:"current_user_id,omitempty"`
	// current user name used to display in the UI. This field is only set by
	// the backend when the payload is being sent to the UI
	CurrentUserName string `protobuf:"bytes,2,opt,name=current_user_name,json=currentUserName,proto3" json:"current_user_name,omitempty"`
	// the id of the user to be assigned
	NewUserId string `protobuf:"bytes,3,opt,name=new_user_id,json=newUserId,proto3" json:"new_user_id,omitempty"`
	// new user name used to display in the UI. This field is only set by
	// the backend when the payload is being sent to the UI
	NewUserName string `protobuf:"bytes,4,opt,name=new_user_name,json=newUserName,proto3" json:"new_user_name,omitempty"`
	// new user asm session sid
	NewUserAsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=new_user_asm_session_sid,json=newUserAsmSessionSid,proto3" json:"new_user_asm_session_sid,omitempty"`
}

func (x *OmniReassignmentNotification) Reset() {
	*x = OmniReassignmentNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniReassignmentNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniReassignmentNotification) ProtoMessage() {}

func (x *OmniReassignmentNotification) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniReassignmentNotification.ProtoReflect.Descriptor instead.
func (*OmniReassignmentNotification) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{17}
}

func (x *OmniReassignmentNotification) GetCurrentUserId() string {
	if x != nil {
		return x.CurrentUserId
	}
	return ""
}

func (x *OmniReassignmentNotification) GetCurrentUserName() string {
	if x != nil {
		return x.CurrentUserName
	}
	return ""
}

func (x *OmniReassignmentNotification) GetNewUserId() string {
	if x != nil {
		return x.NewUserId
	}
	return ""
}

func (x *OmniReassignmentNotification) GetNewUserName() string {
	if x != nil {
		return x.NewUserName
	}
	return ""
}

func (x *OmniReassignmentNotification) GetNewUserAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.NewUserAsmSessionSid
	}
	return nil
}

// OmniMessage payload for unassigning an agent(s)
type OmniUnassignConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the user to unassign
	UserId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// user name used to display in the UI. This field is only set by
	// the backend when the payload is being sent to the UI
	UserName string `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// whether or not all users should be unassigned
	All bool `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`
	// primary asm session identifier
	PrimaryAsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=primary_asm_session_sid,json=primaryAsmSessionSid,proto3" json:"primary_asm_session_sid,omitempty"`
}

func (x *OmniUnassignConversation) Reset() {
	*x = OmniUnassignConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniUnassignConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniUnassignConversation) ProtoMessage() {}

func (x *OmniUnassignConversation) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniUnassignConversation.ProtoReflect.Descriptor instead.
func (*OmniUnassignConversation) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{18}
}

func (x *OmniUnassignConversation) GetUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *OmniUnassignConversation) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *OmniUnassignConversation) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *OmniUnassignConversation) GetPrimaryAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.PrimaryAsmSessionSid
	}
	return nil
}

type OmniRequestAttachmentUploadURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OmniRequestAttachmentUploadURL) Reset() {
	*x = OmniRequestAttachmentUploadURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniRequestAttachmentUploadURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniRequestAttachmentUploadURL) ProtoMessage() {}

func (x *OmniRequestAttachmentUploadURL) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniRequestAttachmentUploadURL.ProtoReflect.Descriptor instead.
func (*OmniRequestAttachmentUploadURL) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{19}
}

// attachment upload details
type OmniAttachmentUploadURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// attachment file upload url
	UploadUrl string `protobuf:"bytes,1,opt,name=upload_url,json=uploadUrl,proto3" json:"upload_url,omitempty"`
	// attachment id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OmniAttachmentUploadURL) Reset() {
	*x = OmniAttachmentUploadURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniAttachmentUploadURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniAttachmentUploadURL) ProtoMessage() {}

func (x *OmniAttachmentUploadURL) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniAttachmentUploadURL.ProtoReflect.Descriptor instead.
func (*OmniAttachmentUploadURL) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{20}
}

func (x *OmniAttachmentUploadURL) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

func (x *OmniAttachmentUploadURL) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// attachment details
type OmniAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary key or internal identifier for attachment
	OmniAttachmentSid int64 `protobuf:"varint,1,opt,name=omni_attachment_sid,json=omniAttachmentSid,proto3" json:"omni_attachment_sid,omitempty"`
	// attachment file name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// attachment file type
	FileType string `protobuf:"bytes,3,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	// attachment file size
	FileSize int64 `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	// attachment file path
	Path string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	// temp id
	TempId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=temp_id,json=tempId,proto3" json:"temp_id,omitempty"`
	// download attachment file url
	DownloadUrl string `protobuf:"bytes,7,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
	// time when the attachment was created
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// time when the attachment was last modified
	DateModified *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	// Optional. the id of the attachment in text if inline
	ContentId *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	// Optional. the width of the inline attachment
	Width *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=width,proto3" json:"width,omitempty"`
	// Optional. the height of the inline attachment
	Height *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *OmniAttachment) Reset() {
	*x = OmniAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniAttachment) ProtoMessage() {}

func (x *OmniAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniAttachment.ProtoReflect.Descriptor instead.
func (*OmniAttachment) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{21}
}

func (x *OmniAttachment) GetOmniAttachmentSid() int64 {
	if x != nil {
		return x.OmniAttachmentSid
	}
	return 0
}

func (x *OmniAttachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OmniAttachment) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *OmniAttachment) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *OmniAttachment) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *OmniAttachment) GetTempId() *wrapperspb.StringValue {
	if x != nil {
		return x.TempId
	}
	return nil
}

func (x *OmniAttachment) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *OmniAttachment) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *OmniAttachment) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *OmniAttachment) GetContentId() *wrapperspb.StringValue {
	if x != nil {
		return x.ContentId
	}
	return nil
}

func (x *OmniAttachment) GetWidth() *wrapperspb.StringValue {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *OmniAttachment) GetHeight() *wrapperspb.StringValue {
	if x != nil {
		return x.Height
	}
	return nil
}

type OmniStartWrapUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary asm session identifier
	PrimaryAsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=primary_asm_session_sid,json=primaryAsmSessionSid,proto3" json:"primary_asm_session_sid,omitempty"`
}

func (x *OmniStartWrapUp) Reset() {
	*x = OmniStartWrapUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniStartWrapUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniStartWrapUp) ProtoMessage() {}

func (x *OmniStartWrapUp) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniStartWrapUp.ProtoReflect.Descriptor instead.
func (*OmniStartWrapUp) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{22}
}

func (x *OmniStartWrapUp) GetPrimaryAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.PrimaryAsmSessionSid
	}
	return nil
}

type OmniFinishWrapUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary asm session identifier
	PrimaryAsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=primary_asm_session_sid,json=primaryAsmSessionSid,proto3" json:"primary_asm_session_sid,omitempty"`
}

func (x *OmniFinishWrapUp) Reset() {
	*x = OmniFinishWrapUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniFinishWrapUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniFinishWrapUp) ProtoMessage() {}

func (x *OmniFinishWrapUp) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniFinishWrapUp.ProtoReflect.Descriptor instead.
func (*OmniFinishWrapUp) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{23}
}

func (x *OmniFinishWrapUp) GetPrimaryAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.PrimaryAsmSessionSid
	}
	return nil
}

type OmniSuspend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary asm session identifier
	PrimaryAsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=primary_asm_session_sid,json=primaryAsmSessionSid,proto3" json:"primary_asm_session_sid,omitempty"`
}

func (x *OmniSuspend) Reset() {
	*x = OmniSuspend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniSuspend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniSuspend) ProtoMessage() {}

func (x *OmniSuspend) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniSuspend.ProtoReflect.Descriptor instead.
func (*OmniSuspend) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{24}
}

func (x *OmniSuspend) GetPrimaryAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.PrimaryAsmSessionSid
	}
	return nil
}

type OmniCloseConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary asm session identifier
	PrimaryAsmSessionSid *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=primary_asm_session_sid,json=primaryAsmSessionSid,proto3" json:"primary_asm_session_sid,omitempty"`
}

func (x *OmniCloseConversation) Reset() {
	*x = OmniCloseConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniCloseConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniCloseConversation) ProtoMessage() {}

func (x *OmniCloseConversation) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniCloseConversation.ProtoReflect.Descriptor instead.
func (*OmniCloseConversation) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{25}
}

func (x *OmniCloseConversation) GetPrimaryAsmSessionSid() *wrapperspb.Int64Value {
	if x != nil {
		return x.PrimaryAsmSessionSid
	}
	return nil
}

type OmniQueueInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position int64 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *OmniQueueInformation) Reset() {
	*x = OmniQueueInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniQueueInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniQueueInformation) ProtoMessage() {}

func (x *OmniQueueInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniQueueInformation.ProtoReflect.Descriptor instead.
func (*OmniQueueInformation) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{26}
}

func (x *OmniQueueInformation) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

type OmniRequestQueueInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position bool `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *OmniRequestQueueInformation) Reset() {
	*x = OmniRequestQueueInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniRequestQueueInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniRequestQueueInformation) ProtoMessage() {}

func (x *OmniRequestQueueInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniRequestQueueInformation.ProtoReflect.Descriptor instead.
func (*OmniRequestQueueInformation) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{27}
}

func (x *OmniRequestQueueInformation) GetPosition() bool {
	if x != nil {
		return x.Position
	}
	return false
}

type OmniCannedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// canned message id
	CannedMessageId string `protobuf:"bytes,1,opt,name=canned_message_id,json=cannedMessageId,proto3" json:"canned_message_id,omitempty"`
}

func (x *OmniCannedMessage) Reset() {
	*x = OmniCannedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniCannedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniCannedMessage) ProtoMessage() {}

func (x *OmniCannedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniCannedMessage.ProtoReflect.Descriptor instead.
func (*OmniCannedMessage) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{28}
}

func (x *OmniCannedMessage) GetCannedMessageId() string {
	if x != nil {
		return x.CannedMessageId
	}
	return ""
}

type OmniDataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data for flows, should always be json
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Message id of the html form this is in reply to
	MessageSid int64 `protobuf:"varint,2,opt,name=message_sid,json=messageSid,proto3" json:"message_sid,omitempty"`
}

func (x *OmniDataMessage) Reset() {
	*x = OmniDataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniDataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniDataMessage) ProtoMessage() {}

func (x *OmniDataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniDataMessage.ProtoReflect.Descriptor instead.
func (*OmniDataMessage) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{29}
}

func (x *OmniDataMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OmniDataMessage) GetMessageSid() int64 {
	if x != nil {
		return x.MessageSid
	}
	return 0
}

type OmniConversationUserInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *OmniConversationUserInformation) Reset() {
	*x = OmniConversationUserInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniConversationUserInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniConversationUserInformation) ProtoMessage() {}

func (x *OmniConversationUserInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniConversationUserInformation.ProtoReflect.Descriptor instead.
func (*OmniConversationUserInformation) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{30}
}

func (x *OmniConversationUserInformation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OmniConversationUserInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// represents a a list of customer information collected for a conversation
type CustomerCollectedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the list of data
	Items []*CustomerCollectedDataItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CustomerCollectedData) Reset() {
	*x = CustomerCollectedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerCollectedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerCollectedData) ProtoMessage() {}

func (x *CustomerCollectedData) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerCollectedData.ProtoReflect.Descriptor instead.
func (*CustomerCollectedData) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{31}
}

func (x *CustomerCollectedData) GetItems() []*CustomerCollectedDataItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// represents customer information collected for a conversation
type CustomerCollectedDataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the key of the data
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// the value of the data
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CustomerCollectedDataItem) Reset() {
	*x = CustomerCollectedDataItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerCollectedDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerCollectedDataItem) ProtoMessage() {}

func (x *CustomerCollectedDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerCollectedDataItem.ProtoReflect.Descriptor instead.
func (*CustomerCollectedDataItem) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{32}
}

func (x *CustomerCollectedDataItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CustomerCollectedDataItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// OmniConversation -
type OmniConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary key or internal identifier for conversation
	ConversationSid int64 `protobuf:"varint,1,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// the conversation's channel type i.e. chat|email|sms|whatsapp|etc.
	ChannelType ChannelType `protobuf:"varint,2,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// the agent's skills
	Skills *OmniConversationSkills `protobuf:"bytes,3,opt,name=skills,proto3" json:"skills,omitempty"`
	// when the conversation was created
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// time the conversation was last modified
	DateModified *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	// the current status of the conversation i.e. AwaitingAssignment
	Status ConversationStatus `protobuf:"varint,6,opt,name=status,proto3,enum=api.commons.ConversationStatus" json:"status,omitempty"`
	// the customer's email address
	CustomerEmailAddress *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=customer_email_address,json=customerEmailAddress,proto3" json:"customer_email_address,omitempty"`
	// the customer's phone number
	CustomerPhoneNumber *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=customer_phone_number,json=customerPhoneNumber,proto3" json:"customer_phone_number,omitempty"`
	// the customer's name
	CustomerName *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	// the identifier of the inbound campaign this conversation is a part of
	CampaignSid int64 `protobuf:"varint,10,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// the identifier used to reference this conversation
	ReferenceId *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	// time the last message was received
	LastMessageTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=last_message_time,json=lastMessageTime,proto3" json:"last_message_time,omitempty"`
	// information collected during the conversation
	ConversationCollectedData *ConversationCollectedData `protobuf:"bytes,13,opt,name=conversation_collected_data,json=conversationCollectedData,proto3" json:"conversation_collected_data,omitempty"`
	// SLA timers
	SlaTimeouts *SLATimeouts `protobuf:"bytes,14,opt,name=sla_timeouts,json=slaTimeouts,proto3" json:"sla_timeouts,omitempty"`
	// assignments list
	ConversationAssignments []*OmniConversationAssignment `protobuf:"bytes,15,rep,name=conversation_assignments,json=conversationAssignments,proto3" json:"conversation_assignments,omitempty"`
	// conversation optional metadata
	Metadata *OmniConversation_ConversationDetails `protobuf:"bytes,16,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// time the conversation was ended
	EndTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// the identifier of the campaign module this conversation is a part of
	CampaignModuleSid int64 `protobuf:"varint,19,opt,name=campaign_module_sid,json=campaignModuleSid,proto3" json:"campaign_module_sid,omitempty"`
	// the time that the last group of message started. A message group is a
	// continuous set of messages from the same type of sender
	LastMessageGroupTime *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=last_message_group_time,json=lastMessageGroupTime,proto3" json:"last_message_group_time,omitempty"`
	// the sender type of the last message group
	LastMessageGroupType OmniSenderType `protobuf:"varint,21,opt,name=last_message_group_type,json=lastMessageGroupType,proto3,enum=api.commons.OmniSenderType" json:"last_message_group_type,omitempty"`
	// the result type of the conversation
	Result OmniConversationResult `protobuf:"varint,22,opt,name=result,proto3,enum=api.commons.OmniConversationResult" json:"result,omitempty"`
	// time the status was changed
	LastStateChangedTime *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=last_state_changed_time,json=lastStateChangedTime,proto3" json:"last_state_changed_time,omitempty"`
}

func (x *OmniConversation) Reset() {
	*x = OmniConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniConversation) ProtoMessage() {}

func (x *OmniConversation) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniConversation.ProtoReflect.Descriptor instead.
func (*OmniConversation) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{33}
}

func (x *OmniConversation) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmniConversation) GetChannelType() ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return ChannelType_CHANNEL_TYPE_EMAIL
}

func (x *OmniConversation) GetSkills() *OmniConversationSkills {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *OmniConversation) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *OmniConversation) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *OmniConversation) GetStatus() ConversationStatus {
	if x != nil {
		return x.Status
	}
	return ConversationStatus_CONVERSATION_STATUS_NEW
}

func (x *OmniConversation) GetCustomerEmailAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomerEmailAddress
	}
	return nil
}

func (x *OmniConversation) GetCustomerPhoneNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomerPhoneNumber
	}
	return nil
}

func (x *OmniConversation) GetCustomerName() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *OmniConversation) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmniConversation) GetReferenceId() *wrapperspb.StringValue {
	if x != nil {
		return x.ReferenceId
	}
	return nil
}

func (x *OmniConversation) GetLastMessageTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastMessageTime
	}
	return nil
}

func (x *OmniConversation) GetConversationCollectedData() *ConversationCollectedData {
	if x != nil {
		return x.ConversationCollectedData
	}
	return nil
}

func (x *OmniConversation) GetSlaTimeouts() *SLATimeouts {
	if x != nil {
		return x.SlaTimeouts
	}
	return nil
}

func (x *OmniConversation) GetConversationAssignments() []*OmniConversationAssignment {
	if x != nil {
		return x.ConversationAssignments
	}
	return nil
}

func (x *OmniConversation) GetMetadata() *OmniConversation_ConversationDetails {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *OmniConversation) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *OmniConversation) GetCampaignModuleSid() int64 {
	if x != nil {
		return x.CampaignModuleSid
	}
	return 0
}

func (x *OmniConversation) GetLastMessageGroupTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastMessageGroupTime
	}
	return nil
}

func (x *OmniConversation) GetLastMessageGroupType() OmniSenderType {
	if x != nil {
		return x.LastMessageGroupType
	}
	return OmniSenderType_OMNI_SENDER_TYPE_AGENT
}

func (x *OmniConversation) GetResult() OmniConversationResult {
	if x != nil {
		return x.Result
	}
	return OmniConversationResult_NONE
}

func (x *OmniConversation) GetLastStateChangedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastStateChangedTime
	}
	return nil
}

// OmniConversationAssignment -
type OmniConversationAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary key or internal identifier for conversation
	ConversationAssignmentSid int64 `protobuf:"varint,1,opt,name=conversation_assignment_sid,json=conversationAssignmentSid,proto3" json:"conversation_assignment_sid,omitempty"`
	// conversation id
	ConversationSid int64 `protobuf:"varint,2,opt,name=conversation_sid,json=conversationSid,proto3" json:"conversation_sid,omitempty"`
	// is an active
	IsActive bool `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// type of assignment
	AssignmentType AgentConversationAssignmentType `protobuf:"varint,6,opt,name=assignment_type,json=assignmentType,proto3,enum=api.commons.AgentConversationAssignmentType" json:"assignment_type,omitempty"`
	// date assignment was created
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// date assignment was last modified
	DateModified *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	// user assigned to the conversation
	UserId string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// conversation assignment optional metadata
	Metadata *OmniConversationAssignment_ConversationAssignmentDetails `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// asm conversations id
	AsmSessionSid int64 `protobuf:"varint,11,opt,name=asm_session_sid,json=asmSessionSid,proto3" json:"asm_session_sid,omitempty"`
}

func (x *OmniConversationAssignment) Reset() {
	*x = OmniConversationAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniConversationAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniConversationAssignment) ProtoMessage() {}

func (x *OmniConversationAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniConversationAssignment.ProtoReflect.Descriptor instead.
func (*OmniConversationAssignment) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{34}
}

func (x *OmniConversationAssignment) GetConversationAssignmentSid() int64 {
	if x != nil {
		return x.ConversationAssignmentSid
	}
	return 0
}

func (x *OmniConversationAssignment) GetConversationSid() int64 {
	if x != nil {
		return x.ConversationSid
	}
	return 0
}

func (x *OmniConversationAssignment) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *OmniConversationAssignment) GetAssignmentType() AgentConversationAssignmentType {
	if x != nil {
		return x.AssignmentType
	}
	return AgentConversationAssignmentType_PRIMARY_AGENT
}

func (x *OmniConversationAssignment) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *OmniConversationAssignment) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *OmniConversationAssignment) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OmniConversationAssignment) GetMetadata() *OmniConversationAssignment_ConversationAssignmentDetails {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *OmniConversationAssignment) GetAsmSessionSid() int64 {
	if x != nil {
		return x.AsmSessionSid
	}
	return 0
}

// OmniConversationSkills -
type OmniConversationSkills struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// map of agent skills
	Skills map[string]bool `protobuf:"bytes,1,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *OmniConversationSkills) Reset() {
	*x = OmniConversationSkills{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniConversationSkills) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniConversationSkills) ProtoMessage() {}

func (x *OmniConversationSkills) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniConversationSkills.ProtoReflect.Descriptor instead.
func (*OmniConversationSkills) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{35}
}

func (x *OmniConversationSkills) GetSkills() map[string]bool {
	if x != nil {
		return x.Skills
	}
	return nil
}

// WeekdayTimeRange - a group of time range entries
type WeekdayTimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the group of time ranges
	Entries []*WeekdayTimeRangeEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *WeekdayTimeRange) Reset() {
	*x = WeekdayTimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeekdayTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeekdayTimeRange) ProtoMessage() {}

func (x *WeekdayTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeekdayTimeRange.ProtoReflect.Descriptor instead.
func (*WeekdayTimeRange) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{36}
}

func (x *WeekdayTimeRange) GetEntries() []*WeekdayTimeRangeEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// WeekdayTimeRangeEntry - an entry defining the same time range over a span of one or more days
type WeekdayTimeRangeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the day the span starts
	StartDay Weekday_Enum `protobuf:"varint,1,opt,name=start_day,json=startDay,proto3,enum=api.commons.Weekday_Enum" json:"start_day,omitempty"`
	// the hour the range starts
	StartHour int64 `protobuf:"varint,2,opt,name=start_hour,json=startHour,proto3" json:"start_hour,omitempty"`
	// the minute the range starts
	StartMinute int64 `protobuf:"varint,3,opt,name=start_minute,json=startMinute,proto3" json:"start_minute,omitempty"`
	// the day the span ends
	EndDay Weekday_Enum `protobuf:"varint,4,opt,name=end_day,json=endDay,proto3,enum=api.commons.Weekday_Enum" json:"end_day,omitempty"`
	// the hour the range ends
	EndHour int64 `protobuf:"varint,5,opt,name=end_hour,json=endHour,proto3" json:"end_hour,omitempty"`
	// the minute the range ends
	EndMinute int64 `protobuf:"varint,6,opt,name=end_minute,json=endMinute,proto3" json:"end_minute,omitempty"`
}

func (x *WeekdayTimeRangeEntry) Reset() {
	*x = WeekdayTimeRangeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeekdayTimeRangeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeekdayTimeRangeEntry) ProtoMessage() {}

func (x *WeekdayTimeRangeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeekdayTimeRangeEntry.ProtoReflect.Descriptor instead.
func (*WeekdayTimeRangeEntry) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{37}
}

func (x *WeekdayTimeRangeEntry) GetStartDay() Weekday_Enum {
	if x != nil {
		return x.StartDay
	}
	return Weekday_SUNDAY
}

func (x *WeekdayTimeRangeEntry) GetStartHour() int64 {
	if x != nil {
		return x.StartHour
	}
	return 0
}

func (x *WeekdayTimeRangeEntry) GetStartMinute() int64 {
	if x != nil {
		return x.StartMinute
	}
	return 0
}

func (x *WeekdayTimeRangeEntry) GetEndDay() Weekday_Enum {
	if x != nil {
		return x.EndDay
	}
	return Weekday_SUNDAY
}

func (x *WeekdayTimeRangeEntry) GetEndHour() int64 {
	if x != nil {
		return x.EndHour
	}
	return 0
}

func (x *WeekdayTimeRangeEntry) GetEndMinute() int64 {
	if x != nil {
		return x.EndMinute
	}
	return 0
}

// Disposition -
type Disposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier of the disposition
	DispositionSid int64 `protobuf:"varint,1,opt,name=disposition_sid,json=dispositionSid,proto3" json:"disposition_sid,omitempty"`
	// the time the disposition was created
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// the time the disposition was last modified
	DateModified *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	// the disposition string
	Disposition string `protobuf:"bytes,4,opt,name=disposition,proto3" json:"disposition,omitempty"`
	// if the disposition was deleted
	Deleted bool `protobuf:"varint,5,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *Disposition) Reset() {
	*x = Disposition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disposition) ProtoMessage() {}

func (x *Disposition) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disposition.ProtoReflect.Descriptor instead.
func (*Disposition) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{38}
}

func (x *Disposition) GetDispositionSid() int64 {
	if x != nil {
		return x.DispositionSid
	}
	return 0
}

func (x *Disposition) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *Disposition) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *Disposition) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *Disposition) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

// GetQueuesDetailsRes - response for GetQueuesDetails
type GetQueuesDetailsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the queue details
	QueueDetails []*GetQueuesDetailsRes_QueueDetails `protobuf:"bytes,1,rep,name=queue_details,json=queueDetails,proto3" json:"queue_details,omitempty"`
}

func (x *GetQueuesDetailsRes) Reset() {
	*x = GetQueuesDetailsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueuesDetailsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueuesDetailsRes) ProtoMessage() {}

func (x *GetQueuesDetailsRes) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueuesDetailsRes.ProtoReflect.Descriptor instead.
func (*GetQueuesDetailsRes) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{39}
}

func (x *GetQueuesDetailsRes) GetQueueDetails() []*GetQueuesDetailsRes_QueueDetails {
	if x != nil {
		return x.QueueDetails
	}
	return nil
}

// OmniCustomUnsubscribeLink -
type OmniCustomUnsubscribeLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for the custom unsubscribe link
	CustomUnsubscribeLinkSid int64 `protobuf:"varint,1,opt,name=custom_unsubscribe_link_sid,json=customUnsubscribeLinkSid,proto3" json:"custom_unsubscribe_link_sid,omitempty"`
	// the name of the link
	LinkName string `protobuf:"bytes,2,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`
	// the link's url
	LinkUrl string `protobuf:"bytes,3,opt,name=link_url,json=linkUrl,proto3" json:"link_url,omitempty"`
	// if the link has been validated
	Validated bool `protobuf:"varint,4,opt,name=validated,proto3" json:"validated,omitempty"`
	// the time the link was created
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// the time the link was last modified
	DateModified *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	// the time the link was validated
	DateValidated *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=date_validated,json=dateValidated,proto3" json:"date_validated,omitempty"`
	// the link's description
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// if the link was deleted
	Deleted bool `protobuf:"varint,10,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *OmniCustomUnsubscribeLink) Reset() {
	*x = OmniCustomUnsubscribeLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniCustomUnsubscribeLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniCustomUnsubscribeLink) ProtoMessage() {}

func (x *OmniCustomUnsubscribeLink) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniCustomUnsubscribeLink.ProtoReflect.Descriptor instead.
func (*OmniCustomUnsubscribeLink) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{40}
}

func (x *OmniCustomUnsubscribeLink) GetCustomUnsubscribeLinkSid() int64 {
	if x != nil {
		return x.CustomUnsubscribeLinkSid
	}
	return 0
}

func (x *OmniCustomUnsubscribeLink) GetLinkName() string {
	if x != nil {
		return x.LinkName
	}
	return ""
}

func (x *OmniCustomUnsubscribeLink) GetLinkUrl() string {
	if x != nil {
		return x.LinkUrl
	}
	return ""
}

func (x *OmniCustomUnsubscribeLink) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

func (x *OmniCustomUnsubscribeLink) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *OmniCustomUnsubscribeLink) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *OmniCustomUnsubscribeLink) GetDateValidated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateValidated
	}
	return nil
}

func (x *OmniCustomUnsubscribeLink) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OmniCustomUnsubscribeLink) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

// ContactList -
type ContactList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier of the contact list
	ContactListSid int64 `protobuf:"varint,1,opt,name=contact_list_sid,json=contactListSid,proto3" json:"contact_list_sid,omitempty"`
	// the name string
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// the description string
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// list of field names
	FieldNames []string `protobuf:"bytes,4,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	// the project sid
	ProjectSid *Int64Id `protobuf:"bytes,6,opt,name=project_sid,json=projectSid,proto3" json:"project_sid,omitempty"`
	// the time the disposition was created
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// the time the disposition was last modified
	DateModified *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	// the list of contact entries
	ContactEntries []*ContactEntry `protobuf:"bytes,9,rep,name=contact_entries,json=contactEntries,proto3" json:"contact_entries,omitempty"`
	// metaData
	Metadata *ContactList_Metadata `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ContactList) Reset() {
	*x = ContactList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactList) ProtoMessage() {}

func (x *ContactList) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactList.ProtoReflect.Descriptor instead.
func (*ContactList) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{41}
}

func (x *ContactList) GetContactListSid() int64 {
	if x != nil {
		return x.ContactListSid
	}
	return 0
}

func (x *ContactList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContactList) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContactList) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *ContactList) GetProjectSid() *Int64Id {
	if x != nil {
		return x.ProjectSid
	}
	return nil
}

func (x *ContactList) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *ContactList) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *ContactList) GetContactEntries() []*ContactEntry {
	if x != nil {
		return x.ContactEntries
	}
	return nil
}

func (x *ContactList) GetMetadata() *ContactList_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ContactEntry -
type ContactEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier of the contact entry list
	ContactEntrySid int64 `protobuf:"varint,1,opt,name=contact_entry_sid,json=contactEntrySid,proto3" json:"contact_entry_sid,omitempty"`
	// the identifier of the contact list
	ContactListSid int64 `protobuf:"varint,2,opt,name=contact_list_sid,json=contactListSid,proto3" json:"contact_list_sid,omitempty"`
	// the time the disposition was created
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// the time the disposition was last modified
	DateModified *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	// the list of field names
	FieldNames []string `protobuf:"bytes,5,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	// list of fields associated to contact entry (can contain different types of data: string|int64|etc.)
	DataFields []*OmniDataField `protobuf:"bytes,6,rep,name=data_fields,json=dataFields,proto3" json:"data_fields,omitempty"`
}

func (x *ContactEntry) Reset() {
	*x = ContactEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactEntry) ProtoMessage() {}

func (x *ContactEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactEntry.ProtoReflect.Descriptor instead.
func (*ContactEntry) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{42}
}

func (x *ContactEntry) GetContactEntrySid() int64 {
	if x != nil {
		return x.ContactEntrySid
	}
	return 0
}

func (x *ContactEntry) GetContactListSid() int64 {
	if x != nil {
		return x.ContactListSid
	}
	return 0
}

func (x *ContactEntry) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *ContactEntry) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *ContactEntry) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *ContactEntry) GetDataFields() []*OmniDataField {
	if x != nil {
		return x.DataFields
	}
	return nil
}

// OmniTask -
type OmniTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the task identifier
	TaskSid int64 `protobuf:"varint,1,opt,name=task_sid,json=taskSid,proto3" json:"task_sid,omitempty"`
	// the task status
	Status OmniTaskStatus `protobuf:"varint,2,opt,name=status,proto3,enum=api.commons.OmniTaskStatus" json:"status,omitempty"`
	// the time the task was created
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// the time the task was last updated
	DateModified *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	// identifier of associated campaign module
	CampaignModuleSid int64 `protobuf:"varint,5,opt,name=campaign_module_sid,json=campaignModuleSid,proto3" json:"campaign_module_sid,omitempty"`
	// identifier of associated campaign
	CampaignSid int64 `protobuf:"varint,6,opt,name=campaign_sid,json=campaignSid,proto3" json:"campaign_sid,omitempty"`
	// identifier of associated contact entry
	ContactEntrySid *Int64Id `protobuf:"bytes,7,opt,name=contact_entry_sid,json=contactEntrySid,proto3" json:"contact_entry_sid,omitempty"`
	// task state
	State *OmniTaskState `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	// list of fields associated to task (can contain different types of data: string|int64|etc.)
	DataFields []*OmniDataField `protobuf:"bytes,9,rep,name=data_fields,json=dataFields,proto3" json:"data_fields,omitempty"`
	// retrievable fields with field mask
	Details *OmniTask_Details `protobuf:"bytes,10,opt,name=details,proto3" json:"details,omitempty"`
	// the name of the task for easy identification of a task (this is generated by mapping contact entry fields as provided by the ui)
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// a message regarding the task's status, should be ignored if there is an associated OmniMessage
	StatusMessage *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// scheduled time for task
	ScheduledTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	// holds extra details about how a task should be processed
	TaskConfig *OmniTaskConfig `protobuf:"bytes,15,opt,name=task_config,json=taskConfig,proto3" json:"task_config,omitempty"`
}

func (x *OmniTask) Reset() {
	*x = OmniTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniTask) ProtoMessage() {}

func (x *OmniTask) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniTask.ProtoReflect.Descriptor instead.
func (*OmniTask) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{43}
}

func (x *OmniTask) GetTaskSid() int64 {
	if x != nil {
		return x.TaskSid
	}
	return 0
}

func (x *OmniTask) GetStatus() OmniTaskStatus {
	if x != nil {
		return x.Status
	}
	return OmniTaskStatus_OMNI_TASK_WAITING
}

func (x *OmniTask) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *OmniTask) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *OmniTask) GetCampaignModuleSid() int64 {
	if x != nil {
		return x.CampaignModuleSid
	}
	return 0
}

func (x *OmniTask) GetCampaignSid() int64 {
	if x != nil {
		return x.CampaignSid
	}
	return 0
}

func (x *OmniTask) GetContactEntrySid() *Int64Id {
	if x != nil {
		return x.ContactEntrySid
	}
	return nil
}

func (x *OmniTask) GetState() *OmniTaskState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *OmniTask) GetDataFields() []*OmniDataField {
	if x != nil {
		return x.DataFields
	}
	return nil
}

func (x *OmniTask) GetDetails() *OmniTask_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *OmniTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OmniTask) GetStatusMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.StatusMessage
	}
	return nil
}

func (x *OmniTask) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *OmniTask) GetTaskConfig() *OmniTaskConfig {
	if x != nil {
		return x.TaskConfig
	}
	return nil
}

// TaskConfig -
type OmniTaskConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skills                  *OmniConversationSkills `protobuf:"bytes,1,opt,name=skills,proto3" json:"skills,omitempty"`
	AbsoluteTimeoutDuration *durationpb.Duration    `protobuf:"bytes,2,opt,name=absolute_timeout_duration,json=absoluteTimeoutDuration,proto3" json:"absolute_timeout_duration,omitempty"`
	AgentTimeoutDuration    *durationpb.Duration    `protobuf:"bytes,3,opt,name=agent_timeout_duration,json=agentTimeoutDuration,proto3" json:"agent_timeout_duration,omitempty"`
	Subject                 string                  `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Message                 *OmniMessagePayload     `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	UserId                  string                  `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *OmniTaskConfig) Reset() {
	*x = OmniTaskConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniTaskConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniTaskConfig) ProtoMessage() {}

func (x *OmniTaskConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniTaskConfig.ProtoReflect.Descriptor instead.
func (*OmniTaskConfig) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{44}
}

func (x *OmniTaskConfig) GetSkills() *OmniConversationSkills {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *OmniTaskConfig) GetAbsoluteTimeoutDuration() *durationpb.Duration {
	if x != nil {
		return x.AbsoluteTimeoutDuration
	}
	return nil
}

func (x *OmniTaskConfig) GetAgentTimeoutDuration() *durationpb.Duration {
	if x != nil {
		return x.AgentTimeoutDuration
	}
	return nil
}

func (x *OmniTaskConfig) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *OmniTaskConfig) GetMessage() *OmniMessagePayload {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OmniTaskConfig) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// OmniTaskState -
type OmniTaskState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of destination addresses (should not include same destination twice)
	Destinations []*OmniTaskState_Entry `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// list of source addresses (should not include same source twice)
	Sources []*OmniTaskState_Entry `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
	// the rule set used with the task. This won't be set if a rule set didn't exist
	// when the task ran.
	RuleSet *ComplianceRuleSet `protobuf:"bytes,3,opt,name=rule_set,json=ruleSet,proto3" json:"rule_set,omitempty"`
	// scrub list id the task uses
	ScrubListId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=scrub_list_id,json=scrubListId,proto3" json:"scrub_list_id,omitempty"`
}

func (x *OmniTaskState) Reset() {
	*x = OmniTaskState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniTaskState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniTaskState) ProtoMessage() {}

func (x *OmniTaskState) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniTaskState.ProtoReflect.Descriptor instead.
func (*OmniTaskState) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{45}
}

func (x *OmniTaskState) GetDestinations() []*OmniTaskState_Entry {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *OmniTaskState) GetSources() []*OmniTaskState_Entry {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *OmniTaskState) GetRuleSet() *ComplianceRuleSet {
	if x != nil {
		return x.RuleSet
	}
	return nil
}

func (x *OmniTaskState) GetScrubListId() *wrapperspb.StringValue {
	if x != nil {
		return x.ScrubListId
	}
	return nil
}

// ComplianceRuleSet -
type ComplianceRuleSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the compliance rule set identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name of the compliance rule set
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// the SHA indicating the version of the rule set
	Sha string `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
	// list of compliance rules ran in this version of the
	// rule set.
	Rules []*ComplianceRule `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ComplianceRuleSet) Reset() {
	*x = ComplianceRuleSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceRuleSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceRuleSet) ProtoMessage() {}

func (x *ComplianceRuleSet) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceRuleSet.ProtoReflect.Descriptor instead.
func (*ComplianceRuleSet) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{46}
}

func (x *ComplianceRuleSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceRuleSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplianceRuleSet) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *ComplianceRuleSet) GetRules() []*ComplianceRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// ComplianceRule -
type ComplianceRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// text representation of the compliance rule
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// whether the compliance rule passed or not
	Permit bool `protobuf:"varint,2,opt,name=permit,proto3" json:"permit,omitempty"`
	// extra response data
	PluginResponse string `protobuf:"bytes,3,opt,name=plugin_response,json=pluginResponse,proto3" json:"plugin_response,omitempty"`
}

func (x *ComplianceRule) Reset() {
	*x = ComplianceRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceRule) ProtoMessage() {}

func (x *ComplianceRule) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceRule.ProtoReflect.Descriptor instead.
func (*ComplianceRule) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{47}
}

func (x *ComplianceRule) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ComplianceRule) GetPermit() bool {
	if x != nil {
		return x.Permit
	}
	return false
}

func (x *ComplianceRule) GetPluginResponse() string {
	if x != nil {
		return x.PluginResponse
	}
	return ""
}

// OmniDataField -
type OmniDataField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the field identifier
	FieldSid int64 `protobuf:"varint,1,opt,name=field_sid,json=fieldSid,proto3" json:"field_sid,omitempty"`
	// the identifier of the "parent" this field belongs to
	ParentSid int64 `protobuf:"varint,2,opt,name=parent_sid,json=parentSid,proto3" json:"parent_sid,omitempty"`
	// the name of this field
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// the value of this field encoded as a string
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// the type of value stored in this field (string|json|int|etc.)
	Type FieldType `protobuf:"varint,5,opt,name=type,proto3,enum=api.commons.FieldType" json:"type,omitempty"`
}

func (x *OmniDataField) Reset() {
	*x = OmniDataField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniDataField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniDataField) ProtoMessage() {}

func (x *OmniDataField) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniDataField.ProtoReflect.Descriptor instead.
func (*OmniDataField) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{48}
}

func (x *OmniDataField) GetFieldSid() int64 {
	if x != nil {
		return x.FieldSid
	}
	return 0
}

func (x *OmniDataField) GetParentSid() int64 {
	if x != nil {
		return x.ParentSid
	}
	return 0
}

func (x *OmniDataField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OmniDataField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *OmniDataField) GetType() FieldType {
	if x != nil {
		return x.Type
	}
	return FieldType_FIELD_TYPE_STRING
}

// ConnectedInbox -
type ConnectedInbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connected inbox identifier
	ConnectedInboxSid int64 `protobuf:"varint,1,opt,name=connected_inbox_sid,json=connectedInboxSid,proto3" json:"connected_inbox_sid,omitempty"`
	// connected email address
	EmailAddress string `protobuf:"bytes,2,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	// username for accessing email
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// password for accessing email
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// how often the email should be checked (in minutes)
	CheckFrequencyMinutes int64 `protobuf:"varint,5,opt,name=check_frequency_minutes,json=checkFrequencyMinutes,proto3" json:"check_frequency_minutes,omitempty"`
	// server name the email is located on
	ServerName string `protobuf:"bytes,6,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// server port the email is located on
	ServerPort int64 `protobuf:"varint,7,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	// time the email was last scheduled to be checked
	LastScheduledTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_scheduled_time,json=lastScheduledTime,proto3" json:"last_scheduled_time,omitempty"`
	// time the email was last checked
	LastChecked *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last_checked,json=lastChecked,proto3" json:"last_checked,omitempty"`
	// how many emails should build up before getting purged
	PurgeThreshold int64 `protobuf:"varint,10,opt,name=purge_threshold,json=purgeThreshold,proto3" json:"purge_threshold,omitempty"`
	// salt used in encoding
	EmailSalt string `protobuf:"bytes,11,opt,name=email_salt,json=emailSalt,proto3" json:"email_salt,omitempty"`
	// number of consecutive failures allowed before entering an ERROR_STANDBY state
	NumConsecutiveFailures int32 `protobuf:"varint,12,opt,name=num_consecutive_failures,json=numConsecutiveFailures,proto3" json:"num_consecutive_failures,omitempty"`
	// the last error that occurred
	LastError *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=last_error,json=lastError,proto3" json:"last_error,omitempty"`
	// time the email entered ERROR_STANDBY
	StandbyErrorTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=standby_error_time,json=standbyErrorTime,proto3" json:"standby_error_time,omitempty"`
	// time the inbox was last updated
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// maximum message size
	MaxMessageSize int32 `protobuf:"varint,16,opt,name=max_message_size,json=maxMessageSize,proto3" json:"max_message_size,omitempty"`
	// maximum number of messages
	MaxMessages int32 `protobuf:"varint,17,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
	// google xoauth2 refresh token (if using google xoauth2)
	//
	// Deprecated: Marked as deprecated in api/commons/omnichannel.proto.
	GoogleXoauth2RefreshToken *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=google_xoauth2_refresh_token,json=googleXoauth2RefreshToken,proto3" json:"google_xoauth2_refresh_token,omitempty"`
	// google xoauth2 access token (if using google xoauth2)
	//
	// Deprecated: Marked as deprecated in api/commons/omnichannel.proto.
	GoogleXoauth2AccessToken *wrapperspb.StringValue `protobuf:"bytes,19,opt,name=google_xoauth2_access_token,json=googleXoauth2AccessToken,proto3" json:"google_xoauth2_access_token,omitempty"`
	// time the google xoauth2 access token expires (if using google xoauth2)
	//
	// Deprecated: Marked as deprecated in api/commons/omnichannel.proto.
	GoogleXoauth2AccessTokenExpiration *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=google_xoauth2_access_token_expiration,json=googleXoauth2AccessTokenExpiration,proto3" json:"google_xoauth2_access_token_expiration,omitempty"`
	// type of authentication that should be used
	AuthenticationType ConnectedInboxAuthenticationType `protobuf:"varint,21,opt,name=authentication_type,json=authenticationType,proto3,enum=api.commons.ConnectedInboxAuthenticationType" json:"authentication_type,omitempty"`
	// config for the oauth provider
	OauthReferenceId *ConnectedInboxOAuthConfig `protobuf:"bytes,22,opt,name=oauth_reference_id,json=oauthReferenceId,proto3" json:"oauth_reference_id,omitempty"`
}

func (x *ConnectedInbox) Reset() {
	*x = ConnectedInbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectedInbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectedInbox) ProtoMessage() {}

func (x *ConnectedInbox) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectedInbox.ProtoReflect.Descriptor instead.
func (*ConnectedInbox) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{49}
}

func (x *ConnectedInbox) GetConnectedInboxSid() int64 {
	if x != nil {
		return x.ConnectedInboxSid
	}
	return 0
}

func (x *ConnectedInbox) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *ConnectedInbox) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ConnectedInbox) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ConnectedInbox) GetCheckFrequencyMinutes() int64 {
	if x != nil {
		return x.CheckFrequencyMinutes
	}
	return 0
}

func (x *ConnectedInbox) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *ConnectedInbox) GetServerPort() int64 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *ConnectedInbox) GetLastScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastScheduledTime
	}
	return nil
}

func (x *ConnectedInbox) GetLastChecked() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChecked
	}
	return nil
}

func (x *ConnectedInbox) GetPurgeThreshold() int64 {
	if x != nil {
		return x.PurgeThreshold
	}
	return 0
}

func (x *ConnectedInbox) GetEmailSalt() string {
	if x != nil {
		return x.EmailSalt
	}
	return ""
}

func (x *ConnectedInbox) GetNumConsecutiveFailures() int32 {
	if x != nil {
		return x.NumConsecutiveFailures
	}
	return 0
}

func (x *ConnectedInbox) GetLastError() *wrapperspb.StringValue {
	if x != nil {
		return x.LastError
	}
	return nil
}

func (x *ConnectedInbox) GetStandbyErrorTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StandbyErrorTime
	}
	return nil
}

func (x *ConnectedInbox) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *ConnectedInbox) GetMaxMessageSize() int32 {
	if x != nil {
		return x.MaxMessageSize
	}
	return 0
}

func (x *ConnectedInbox) GetMaxMessages() int32 {
	if x != nil {
		return x.MaxMessages
	}
	return 0
}

// Deprecated: Marked as deprecated in api/commons/omnichannel.proto.
func (x *ConnectedInbox) GetGoogleXoauth2RefreshToken() *wrapperspb.StringValue {
	if x != nil {
		return x.GoogleXoauth2RefreshToken
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/omnichannel.proto.
func (x *ConnectedInbox) GetGoogleXoauth2AccessToken() *wrapperspb.StringValue {
	if x != nil {
		return x.GoogleXoauth2AccessToken
	}
	return nil
}

// Deprecated: Marked as deprecated in api/commons/omnichannel.proto.
func (x *ConnectedInbox) GetGoogleXoauth2AccessTokenExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.GoogleXoauth2AccessTokenExpiration
	}
	return nil
}

func (x *ConnectedInbox) GetAuthenticationType() ConnectedInboxAuthenticationType {
	if x != nil {
		return x.AuthenticationType
	}
	return ConnectedInboxAuthenticationType_CONNECTED_INBOX_AUTHENTICATION_TYPE_PASSWORD
}

func (x *ConnectedInbox) GetOauthReferenceId() *ConnectedInboxOAuthConfig {
	if x != nil {
		return x.OauthReferenceId
	}
	return nil
}

// ConnectedInboxOAuthConfig -
type ConnectedInboxOAuthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken  string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	ExpiresAt    int64  `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	ReferenceId  string `protobuf:"bytes,4,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
}

func (x *ConnectedInboxOAuthConfig) Reset() {
	*x = ConnectedInboxOAuthConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectedInboxOAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectedInboxOAuthConfig) ProtoMessage() {}

func (x *ConnectedInboxOAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectedInboxOAuthConfig.ProtoReflect.Descriptor instead.
func (*ConnectedInboxOAuthConfig) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{50}
}

func (x *ConnectedInboxOAuthConfig) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *ConnectedInboxOAuthConfig) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *ConnectedInboxOAuthConfig) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *ConnectedInboxOAuthConfig) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

// VerifiedEmail -
type VerifiedEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// verified email identifier
	VerifiedEmailSid int64 `protobuf:"varint,1,opt,name=verified_email_sid,json=verifiedEmailSid,proto3" json:"verified_email_sid,omitempty"`
	// connected email address
	EmailAddress string `protobuf:"bytes,3,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	// if the email has been verified
	Verified bool `protobuf:"varint,4,opt,name=verified,proto3" json:"verified,omitempty"`
	// when the verified email was created
	CreatedOn *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	// when the email was verified
	VerifiedOn *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=verified_on,json=verifiedOn,proto3" json:"verified_on,omitempty"`
	// if the email was deleted
	Deleted bool `protobuf:"varint,7,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// description of the email
	Description *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *VerifiedEmail) Reset() {
	*x = VerifiedEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiedEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiedEmail) ProtoMessage() {}

func (x *VerifiedEmail) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiedEmail.ProtoReflect.Descriptor instead.
func (*VerifiedEmail) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{51}
}

func (x *VerifiedEmail) GetVerifiedEmailSid() int64 {
	if x != nil {
		return x.VerifiedEmailSid
	}
	return 0
}

func (x *VerifiedEmail) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *VerifiedEmail) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VerifiedEmail) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *VerifiedEmail) GetVerifiedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedOn
	}
	return nil
}

func (x *VerifiedEmail) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *VerifiedEmail) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

// Signature - a preset ending to outgoing messages
type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for the signature
	SignatureSid int64 `protobuf:"varint,1,opt,name=signature_sid,json=signatureSid,proto3" json:"signature_sid,omitempty"`
	// the signature text
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// when the signature was created
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// when the signature was last updated
	DateModified *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
	// when the signature was deleted (if ever)
	DeletedOn *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=deleted_on,json=deletedOn,proto3" json:"deleted_on,omitempty"`
	// name for the signature
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// description for the signature
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{52}
}

func (x *Signature) GetSignatureSid() int64 {
	if x != nil {
		return x.SignatureSid
	}
	return 0
}

func (x *Signature) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Signature) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *Signature) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

func (x *Signature) GetDeletedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedOn
	}
	return nil
}

func (x *Signature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Signature) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// OmniProjectComplianceConfig - compliance config for omni projects
type OmniProjectComplianceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// compliance configuration for an email
	Email *OmniComplianceConfig `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// compliance configuration for sms
	Sms *OmniComplianceConfig `protobuf:"bytes,2,opt,name=sms,proto3" json:"sms,omitempty"`
	// compliance configuration for whatsapp
	Whatsapp *OmniComplianceConfig `protobuf:"bytes,3,opt,name=whatsapp,proto3" json:"whatsapp,omitempty"`
}

func (x *OmniProjectComplianceConfig) Reset() {
	*x = OmniProjectComplianceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniProjectComplianceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniProjectComplianceConfig) ProtoMessage() {}

func (x *OmniProjectComplianceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniProjectComplianceConfig.ProtoReflect.Descriptor instead.
func (*OmniProjectComplianceConfig) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{53}
}

func (x *OmniProjectComplianceConfig) GetEmail() *OmniComplianceConfig {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *OmniProjectComplianceConfig) GetSms() *OmniComplianceConfig {
	if x != nil {
		return x.Sms
	}
	return nil
}

func (x *OmniProjectComplianceConfig) GetWhatsapp() *OmniComplianceConfig {
	if x != nil {
		return x.Whatsapp
	}
	return nil
}

// OmniComplianceAction - configuration action for omni compliance
type OmniComplianceAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a list of config keywords
	Keywords []string `protobuf:"bytes,1,rep,name=keywords,proto3" json:"keywords,omitempty"`
	// confirmation for the config
	ConfirmationMessage string `protobuf:"bytes,2,opt,name=confirmation_message,json=confirmationMessage,proto3" json:"confirmation_message,omitempty"`
	IsFuzzyMatch        bool   `protobuf:"varint,3,opt,name=is_fuzzy_match,json=isFuzzyMatch,proto3" json:"is_fuzzy_match,omitempty"`
}

func (x *OmniComplianceAction) Reset() {
	*x = OmniComplianceAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniComplianceAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniComplianceAction) ProtoMessage() {}

func (x *OmniComplianceAction) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniComplianceAction.ProtoReflect.Descriptor instead.
func (*OmniComplianceAction) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{54}
}

func (x *OmniComplianceAction) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *OmniComplianceAction) GetConfirmationMessage() string {
	if x != nil {
		return x.ConfirmationMessage
	}
	return ""
}

func (x *OmniComplianceAction) GetIsFuzzyMatch() bool {
	if x != nil {
		return x.IsFuzzyMatch
	}
	return false
}

// OmniComplianceConfig -
type OmniComplianceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// opting in to different compliance settings
	OptIn *OmniComplianceAction `protobuf:"bytes,1,opt,name=opt_in,json=optIn,proto3" json:"opt_in,omitempty"`
	// opting out of different compliance settings
	OptOut *OmniComplianceAction `protobuf:"bytes,2,opt,name=opt_out,json=optOut,proto3" json:"opt_out,omitempty"`
	// help regarding compliance settings
	Help *OmniComplianceAction `protobuf:"bytes,3,opt,name=help,proto3" json:"help,omitempty"`
	// information regarding compliance settings
	Information *OmniComplianceAction `protobuf:"bytes,4,opt,name=information,proto3" json:"information,omitempty"`
	// scrub list identifier
	ScrubListId string `protobuf:"bytes,5,opt,name=scrub_list_id,json=scrubListId,proto3" json:"scrub_list_id,omitempty"`
	// rule set identifier
	RuleSetId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=rule_set_id,json=ruleSetId,proto3" json:"rule_set_id,omitempty"`
}

func (x *OmniComplianceConfig) Reset() {
	*x = OmniComplianceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniComplianceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniComplianceConfig) ProtoMessage() {}

func (x *OmniComplianceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniComplianceConfig.ProtoReflect.Descriptor instead.
func (*OmniComplianceConfig) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{55}
}

func (x *OmniComplianceConfig) GetOptIn() *OmniComplianceAction {
	if x != nil {
		return x.OptIn
	}
	return nil
}

func (x *OmniComplianceConfig) GetOptOut() *OmniComplianceAction {
	if x != nil {
		return x.OptOut
	}
	return nil
}

func (x *OmniComplianceConfig) GetHelp() *OmniComplianceAction {
	if x != nil {
		return x.Help
	}
	return nil
}

func (x *OmniComplianceConfig) GetInformation() *OmniComplianceAction {
	if x != nil {
		return x.Information
	}
	return nil
}

func (x *OmniComplianceConfig) GetScrubListId() string {
	if x != nil {
		return x.ScrubListId
	}
	return ""
}

func (x *OmniComplianceConfig) GetRuleSetId() *wrapperspb.StringValue {
	if x != nil {
		return x.RuleSetId
	}
	return nil
}

// WhatsAppNumber
type WhatsAppNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string representation of the whatsapp number
	Number string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	// associated provider (whatsappsms)
	Provider WhatsAppNumberProvider `protobuf:"varint,2,opt,name=provider,proto3,enum=api.commons.WhatsAppNumberProvider" json:"provider,omitempty"`
	// country code the whatsapp number belongs to
	CountryCode int32 `protobuf:"varint,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// the whatsapp number identifier
	WhatsappNumberSid int64 `protobuf:"varint,4,opt,name=whatsapp_number_sid,json=whatsappNumberSid,proto3" json:"whatsapp_number_sid,omitempty"`
	// the display name
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// the time the whatsapp_number was created
	DateCreated *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// the time the whatsapp_number was last modified
	DateModified *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=date_modified,json=dateModified,proto3" json:"date_modified,omitempty"`
}

func (x *WhatsAppNumber) Reset() {
	*x = WhatsAppNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhatsAppNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhatsAppNumber) ProtoMessage() {}

func (x *WhatsAppNumber) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhatsAppNumber.ProtoReflect.Descriptor instead.
func (*WhatsAppNumber) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{56}
}

func (x *WhatsAppNumber) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *WhatsAppNumber) GetProvider() WhatsAppNumberProvider {
	if x != nil {
		return x.Provider
	}
	return WhatsAppNumberProvider_UNKNOWN_WHATSAPP_PROVIDER
}

func (x *WhatsAppNumber) GetCountryCode() int32 {
	if x != nil {
		return x.CountryCode
	}
	return 0
}

func (x *WhatsAppNumber) GetWhatsappNumberSid() int64 {
	if x != nil {
		return x.WhatsappNumberSid
	}
	return 0
}

func (x *WhatsAppNumber) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *WhatsAppNumber) GetDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *WhatsAppNumber) GetDateModified() *timestamppb.Timestamp {
	if x != nil {
		return x.DateModified
	}
	return nil
}

// Details -
type OmniCampaignModule_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the total number of tasks created by an outbound module
	TotalTaskCount *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=total_task_count,json=totalTaskCount,proto3" json:"total_task_count,omitempty"`
	// the total number of tasks that have successfully completed for an outbound module
	CompletedTaskCount *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=completed_task_count,json=completedTaskCount,proto3" json:"completed_task_count,omitempty"`
	// the name of the associated connected_inbox for this module
	ConnectedInboxAddress *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=connected_inbox_address,json=connectedInboxAddress,proto3" json:"connected_inbox_address,omitempty"`
	// the name of the associated verified_email for this module
	VerifiedEmailAddress *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=verified_email_address,json=verifiedEmailAddress,proto3" json:"verified_email_address,omitempty"`
	// the number of tasks pending
	PendingTaskCount *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=pending_task_count,json=pendingTaskCount,proto3" json:"pending_task_count,omitempty"`
	// the number of tasks that failed
	FailedTaskCount *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=failed_task_count,json=failedTaskCount,proto3" json:"failed_task_count,omitempty"`
	// the number of tasks that are canceled
	CanceledTaskCount *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=canceled_task_count,json=canceledTaskCount,proto3" json:"canceled_task_count,omitempty"`
}

func (x *OmniCampaignModule_Details) Reset() {
	*x = OmniCampaignModule_Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniCampaignModule_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniCampaignModule_Details) ProtoMessage() {}

func (x *OmniCampaignModule_Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniCampaignModule_Details.ProtoReflect.Descriptor instead.
func (*OmniCampaignModule_Details) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{1, 0}
}

func (x *OmniCampaignModule_Details) GetTotalTaskCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.TotalTaskCount
	}
	return nil
}

func (x *OmniCampaignModule_Details) GetCompletedTaskCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.CompletedTaskCount
	}
	return nil
}

func (x *OmniCampaignModule_Details) GetConnectedInboxAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.ConnectedInboxAddress
	}
	return nil
}

func (x *OmniCampaignModule_Details) GetVerifiedEmailAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.VerifiedEmailAddress
	}
	return nil
}

func (x *OmniCampaignModule_Details) GetPendingTaskCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.PendingTaskCount
	}
	return nil
}

func (x *OmniCampaignModule_Details) GetFailedTaskCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.FailedTaskCount
	}
	return nil
}

func (x *OmniCampaignModule_Details) GetCanceledTaskCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.CanceledTaskCount
	}
	return nil
}

// metadata details related to the conversation
type OmniConversation_ConversationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the associated campaign's name
	CampaignName string `protobuf:"bytes,1,opt,name=campaign_name,json=campaignName,proto3" json:"campaign_name,omitempty"`
	// support_email
	SupportEmail string `protobuf:"bytes,2,opt,name=support_email,json=supportEmail,proto3" json:"support_email,omitempty"`
	// campaign shorten url
	CampaignShortenUrl bool `protobuf:"varint,3,opt,name=campaign_shorten_url,json=campaignShortenUrl,proto3" json:"campaign_shorten_url,omitempty"`
	// payment portal ids
	PaymentPortalIds []string `protobuf:"bytes,4,rep,name=payment_portal_ids,json=paymentPortalIds,proto3" json:"payment_portal_ids,omitempty"`
}

func (x *OmniConversation_ConversationDetails) Reset() {
	*x = OmniConversation_ConversationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniConversation_ConversationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniConversation_ConversationDetails) ProtoMessage() {}

func (x *OmniConversation_ConversationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniConversation_ConversationDetails.ProtoReflect.Descriptor instead.
func (*OmniConversation_ConversationDetails) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{33, 0}
}

func (x *OmniConversation_ConversationDetails) GetCampaignName() string {
	if x != nil {
		return x.CampaignName
	}
	return ""
}

func (x *OmniConversation_ConversationDetails) GetSupportEmail() string {
	if x != nil {
		return x.SupportEmail
	}
	return ""
}

func (x *OmniConversation_ConversationDetails) GetCampaignShortenUrl() bool {
	if x != nil {
		return x.CampaignShortenUrl
	}
	return false
}

func (x *OmniConversation_ConversationDetails) GetPaymentPortalIds() []string {
	if x != nil {
		return x.PaymentPortalIds
	}
	return nil
}

// metadata details related to the conversation assignment
type OmniConversationAssignment_ConversationAssignmentDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the assigned user's name
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *OmniConversationAssignment_ConversationAssignmentDetails) Reset() {
	*x = OmniConversationAssignment_ConversationAssignmentDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniConversationAssignment_ConversationAssignmentDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniConversationAssignment_ConversationAssignmentDetails) ProtoMessage() {}

func (x *OmniConversationAssignment_ConversationAssignmentDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniConversationAssignment_ConversationAssignmentDetails.ProtoReflect.Descriptor instead.
func (*OmniConversationAssignment_ConversationAssignmentDetails) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{34, 0}
}

func (x *OmniConversationAssignment_ConversationAssignmentDetails) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// hold the details about a queue
type GetQueuesDetailsRes_QueueDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the channel type for the queue
	ChannelType ChannelType `protobuf:"varint,1,opt,name=channel_type,json=channelType,proto3,enum=api.commons.ChannelType" json:"channel_type,omitempty"`
	// the size of the queue
	QueueSize int64 `protobuf:"varint,2,opt,name=queueSize,proto3" json:"queueSize,omitempty"`
}

func (x *GetQueuesDetailsRes_QueueDetails) Reset() {
	*x = GetQueuesDetailsRes_QueueDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueuesDetailsRes_QueueDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueuesDetailsRes_QueueDetails) ProtoMessage() {}

func (x *GetQueuesDetailsRes_QueueDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueuesDetailsRes_QueueDetails.ProtoReflect.Descriptor instead.
func (*GetQueuesDetailsRes_QueueDetails) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{39, 0}
}

func (x *GetQueuesDetailsRes_QueueDetails) GetChannelType() ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return ChannelType_CHANNEL_TYPE_EMAIL
}

func (x *GetQueuesDetailsRes_QueueDetails) GetQueueSize() int64 {
	if x != nil {
		return x.QueueSize
	}
	return 0
}

// Metadata - contains extra details for contact lists
type ContactList_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryCount int64 `protobuf:"varint,1,opt,name=entry_count,json=entryCount,proto3" json:"entry_count,omitempty"`
}

func (x *ContactList_Metadata) Reset() {
	*x = ContactList_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactList_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactList_Metadata) ProtoMessage() {}

func (x *ContactList_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactList_Metadata.ProtoReflect.Descriptor instead.
func (*ContactList_Metadata) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{41, 0}
}

func (x *ContactList_Metadata) GetEntryCount() int64 {
	if x != nil {
		return x.EntryCount
	}
	return 0
}

type OmniTask_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the contact list
	ContactListName *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=contact_list_name,json=contactListName,proto3" json:"contact_list_name,omitempty"`
}

func (x *OmniTask_Details) Reset() {
	*x = OmniTask_Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniTask_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniTask_Details) ProtoMessage() {}

func (x *OmniTask_Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniTask_Details.ProtoReflect.Descriptor instead.
func (*OmniTask_Details) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{43, 0}
}

func (x *OmniTask_Details) GetContactListName() *wrapperspb.StringValue {
	if x != nil {
		return x.ContactListName
	}
	return nil
}

type OmniTaskState_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address (email_address|phone_number|etc.)
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// times address was used
	TimesUsed int64 `protobuf:"varint,2,opt,name=times_used,json=timesUsed,proto3" json:"times_used,omitempty"`
	// the time this entry was last used
	LastUsed *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"`
}

func (x *OmniTaskState_Entry) Reset() {
	*x = OmniTaskState_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_commons_omnichannel_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniTaskState_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniTaskState_Entry) ProtoMessage() {}

func (x *OmniTaskState_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_api_commons_omnichannel_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniTaskState_Entry.ProtoReflect.Descriptor instead.
func (*OmniTaskState_Entry) Descriptor() ([]byte, []int) {
	return file_api_commons_omnichannel_proto_rawDescGZIP(), []int{45, 0}
}

func (x *OmniTaskState_Entry) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OmniTaskState_Entry) GetTimesUsed() int64 {
	if x != nil {
		return x.TimesUsed
	}
	return 0
}

func (x *OmniTaskState_Entry) GetLastUsed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsed
	}
	return nil
}

var File_api_commons_omnichannel_proto protoreflect.FileDescriptor

var file_api_commons_omnichannel_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x1a, 0x16, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x05, 0x0a, 0x0c, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d,
	0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x4e, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0xc1, 0x0a, 0x0a, 0x12, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x13, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x11, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0c,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x68, 0x6f, 0x75,
	0x72, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x4f, 0x66, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xaa, 0x04, 0x0a, 0x07, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x17, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x52, 0x0a, 0x16, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x47, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc9, 0x0d, 0x0a, 0x18, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x12, 0x4b, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x49, 0x64, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62,
	0x6f, 0x78, 0x53, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x73,
	0x6d, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6d,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x09, 0x73, 0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x6c, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x4c, 0x41, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x73, 0x52, 0x0b, 0x73, 0x6c, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73,
	0x12, 0x41, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x50, 0x65, 0x72, 0x48,
	0x6f, 0x75, 0x72, 0x12, 0x46, 0x0a, 0x14, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x64, 0x52, 0x12, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x12, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x64, 0x52, 0x10, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x64, 0x12,
	0x4b, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x4f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0b,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x6d, 0x6e, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x16, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x07,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x49, 0x64, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x77, 0x68, 0x61, 0x74,
	0x73, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x57, 0x68, 0x61, 0x74, 0x73, 0x41, 0x70, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e,
	0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x68,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x63, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x43, 0x0a, 0x15,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x55, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xb2, 0x01, 0x0a, 0x09, 0x53, 0x6d, 0x73,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6d, 0x73, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7d, 0x0a,
	0x1f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x73, 0x0a, 0x0b,
	0x53, 0x4c, 0x41, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x33, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x31, 0x30, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x31, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x31, 0x31, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x31, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x31,
	0x32, 0x22, 0x5e, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xd2, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9e, 0x07, 0x0a, 0x0b, 0x4f, 0x6d, 0x6e, 0x69, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x75, 0x69, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d,
	0x6e, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x64, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x43, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xc3, 0x02, 0x0a, 0x19, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75,
	0x69, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x14,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb9, 0x03,
	0x0a, 0x16, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x69, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x75, 0x69, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x57, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x8a, 0x0b, 0x0a, 0x12, 0x4f, 0x6d,
	0x6e, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x41, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x6d, 0x6e, 0x69, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0c, 0x72,
	0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x6d, 0x6e, 0x69, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x70, 0x0a, 0x1d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c,
	0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x5a,
	0x0a, 0x15, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x52, 0x4c, 0x48, 0x00, 0x52, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x12, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56,
	0x0a, 0x13, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x15, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14,
	0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x77,
	0x72, 0x61, 0x70, 0x5f, 0x75, 0x70, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x57, 0x72, 0x61, 0x70, 0x55, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x57, 0x72, 0x61, 0x70, 0x55, 0x70, 0x12, 0x34, 0x0a, 0x07, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x53,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x5f,
	0x75, 0x70, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x57, 0x72, 0x61, 0x70, 0x55, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57,
	0x72, 0x61, 0x70, 0x55, 0x70, 0x12, 0x50, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x6d, 0x6e, 0x69, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5e, 0x0a, 0x17, 0x6f, 0x66, 0x66, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x6d, 0x6e, 0x69, 0x4f, 0x66, 0x66, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x66, 0x66, 0x4c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x47, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x4f, 0x6d, 0x6e, 0x69, 0x54,
	0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61,
	0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x73, 0x6d, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x75, 0x0a, 0x18, 0x4f, 0x6d, 0x6e, 0x69, 0x4f,
	0x66, 0x66, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x18,
	0x0a, 0x16, 0x4f, 0x6d, 0x6e, 0x69, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x4f, 0x6d, 0x6e,
	0x69, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x41, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64,
	0x22, 0x8b, 0x02, 0x0a, 0x1c, 0x4f, 0x6d, 0x6e, 0x69, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65,
	0x77, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x6e, 0x65, 0x77,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0xd4,
	0x01, 0x0a, 0x18, 0x4f, 0x6d, 0x6e, 0x69, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c,
	0x6c, 0x12, 0x52, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x73, 0x6d,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x4f, 0x6d, 0x6e, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x22, 0x48, 0x0a, 0x17, 0x4f, 0x6d, 0x6e, 0x69, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x52, 0x4c, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xa7, 0x04, 0x0a, 0x0e, 0x4f, 0x6d, 0x6e, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x13, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x11, 0x6f, 0x6d, 0x6e, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x65,
	0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x65, 0x0a, 0x0f, 0x4f,
	0x6d, 0x6e, 0x69, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x72, 0x61, 0x70, 0x55, 0x70, 0x12, 0x52,
	0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x64, 0x22, 0x66, 0x0a, 0x10, 0x4f, 0x6d, 0x6e, 0x69, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x57, 0x72, 0x61, 0x70, 0x55, 0x70, 0x12, 0x52, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x73, 0x6d,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x0b, 0x4f, 0x6d,
	0x6e, 0x69, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x52, 0x0a, 0x17, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x41, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x6b, 0x0a,
	0x15, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x73, 0x6d,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x14, 0x4f, 0x6d,
	0x6e, 0x69, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39,
	0x0a, 0x1b, 0x4f, 0x6d, 0x6e, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x11, 0x4f, 0x6d, 0x6e,
	0x69, 0x43, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x0f, 0x4f, 0x6d,
	0x6e, 0x69, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x1f,
	0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x15,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x43, 0x0a, 0x19, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc9, 0x0d, 0x0a, 0x10, 0x4f, 0x6d, 0x6e,
	0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x06,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x52, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x6c, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x4c, 0x41, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73,
	0x52, 0x0b, 0x73, 0x6c, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x62, 0x0a,
	0x18, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d,
	0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x13, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x11, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x17, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52,
	0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d,
	0x6e, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x51, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x1a, 0xbf, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x49, 0x64, 0x73, 0x22, 0xe5, 0x04, 0x0a, 0x1a, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x19, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x6d, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x61, 0x73, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x1a, 0x3c,
	0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a,
	0x16, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x10, 0x57,
	0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x3c, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x57,
	0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xff, 0x01,
	0x0a, 0x15, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x12, 0x32, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x75, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22,
	0xf6, 0x01, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x52, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x1a, 0x69, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xb3, 0x03, 0x0a, 0x19, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x41, 0x0a,
	0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xf9, 0x03, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x49, 0x64, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69,
	0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x2b, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xca, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x2e, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53,
	0x69, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x64,
	0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xd8,
	0x06, 0x0a, 0x08, 0x4f, 0x6d, 0x6e, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3f,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x13, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x11, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x64, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x54,
	0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x53,
	0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x22, 0xe3, 0x02, 0x0a, 0x0e, 0x4f, 0x6d,
	0x6e, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x06,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x19, 0x61, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4f, 0x0a, 0x16, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x89, 0x03, 0x0a, 0x0d, 0x4f, 0x6d, 0x6e, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x44, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x40,
	0x0a, 0x0d, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x1a, 0x79, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x22, 0x7c, 0x0a, 0x11, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x4f, 0x6d, 0x6e, 0x69, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa9, 0x0a, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12,
	0x32, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78,
	0x53, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x70, 0x75, 0x72, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x38, 0x0a,
	0x18, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x78, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x58, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x32, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5f, 0x0a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x78, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x58, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x32, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x72,
	0x0a, 0x26, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x78, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x52, 0x22,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x58, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x22, 0xd4, 0x02, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x30, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x53, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e,
	0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc3, 0x02, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x01,
	0x0a, 0x1b, 0x4f, 0x6d, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x03, 0x73, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x73, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x77,
	0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x08, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x4f,
	0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x75,
	0x7a, 0x7a, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0xea, 0x02, 0x0a, 0x14, 0x4f, 0x6d, 0x6e,
	0x69, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6f, 0x70, 0x74, 0x49, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x12, 0x43,
	0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x75,
	0x62, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0xe3, 0x02, 0x0a, 0x0e, 0x57, 0x68, 0x61, 0x74, 0x73, 0x41,
	0x70, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x3f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x57, 0x68, 0x61, 0x74, 0x73, 0x41, 0x70, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x13, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x11, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2a, 0x58, 0x0a, 0x0d, 0x53,
	0x6d, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x4d, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4d, 0x53, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4d, 0x53, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x02, 0x2a, 0xf1, 0x01, 0x0a, 0x11, 0x53, 0x6d, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x55, 0x52,
	0x53, 0x54, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c, 0x49, 0x56, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x50, 0x45, 0x49, 0x52, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x55, 0x53, 0x42, 0x55, 0x52, 0x53, 0x54, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x53,
	0x41, 0x54, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10,
	0x06, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x58, 0x54, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x53,
	0x4d, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x08, 0x2a, 0x84, 0x01, 0x0a, 0x16, 0x4f, 0x6d,
	0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x03,
	0x2a, 0x85, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x48,
	0x41, 0x54, 0x53, 0x41, 0x50, 0x50, 0x10, 0x04, 0x2a, 0x32, 0x0a, 0x15, 0x4f, 0x6d, 0x6e, 0x69,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x2a, 0xf6, 0x01, 0x0a,
	0x12, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e,
	0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0xc8,
	0x01, 0x12, 0x0b, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x90, 0x03, 0x12, 0x0e,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xd8, 0x04, 0x12, 0x0d,
	0x0a, 0x08, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0xa0, 0x06, 0x22, 0x06, 0x08,
	0x8a, 0x05, 0x10, 0x8a, 0x05, 0x22, 0x06, 0x08, 0xbc, 0x05, 0x10, 0xbc, 0x05, 0x22, 0x06, 0x08,
	0xee, 0x05, 0x10, 0xee, 0x05, 0x22, 0x04, 0x08, 0x64, 0x10, 0x64, 0x22, 0x06, 0x08, 0xfa, 0x01,
	0x10, 0xfa, 0x01, 0x22, 0x06, 0x08, 0xac, 0x02, 0x10, 0xac, 0x02, 0x22, 0x06, 0x08, 0xf4, 0x03,
	0x10, 0xf4, 0x03, 0x2a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x53,
	0x55, 0x4d, 0x4d, 0x45, 0x44, 0x2a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x2a, 0x10, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x4d, 0x4d,
	0x45, 0x44, 0x2a, 0x09, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x2a, 0x0d, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x2a, 0x0d, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x2a, 0x08, 0x52, 0x45, 0x53,
	0x55, 0x4d, 0x49, 0x4e, 0x47, 0x2a, 0xe9, 0x01, 0x0a, 0x18, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x64, 0x12,
	0x13, 0x0a, 0x0e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0xc8, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xfa, 0x01, 0x12,
	0x19, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0xac, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x90, 0x03, 0x12, 0x14,
	0x0a, 0x0f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x49, 0x4e,
	0x47, 0x10, 0xf4, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xd8, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0xbc,
	0x05, 0x2a, 0xa4, 0x05, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x56,
	0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x46, 0x52, 0x4f, 0x4d,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x43,
	0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x26,
	0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52,
	0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x44, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23,
	0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x10, 0x05, 0x12, 0x3e, 0x0a, 0x3a, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x53,
	0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x4c, 0x59, 0x5f,
	0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f,
	0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x5f, 0x55, 0x50, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x45, 0x52, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x52, 0x41, 0x50,
	0x5f, 0x55, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x0a, 0x12, 0x26, 0x0a,
	0x22, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x57,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e,
	0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x0d, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4f, 0x4e, 0x56, 0x45,
	0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x10, 0x0e, 0x2a, 0xb0, 0x01, 0x0a, 0x1f, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x2a,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x2b,
	0x0a, 0x27, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x49, 0x0a, 0x21, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x49, 0x0a, 0x1f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x49,
	0x4d, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x2a, 0x66, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x48, 0x54,
	0x4d, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x2a, 0xe7, 0x05, 0x0a, 0x11, 0x4f, 0x6d,
	0x6e, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x14, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1d, 0x4f, 0x4d, 0x4e,
	0x49, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x80, 0x7d, 0x12, 0x23, 0x0a,
	0x1e, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10,
	0x8a, 0x7d, 0x12, 0x22, 0x0a, 0x1d, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0xe4, 0x7d, 0x12, 0x25, 0x0a, 0x20, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4f,
	0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xee, 0x7d, 0x12, 0x1e, 0x0a,
	0x19, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x4e, 0x43, 0x10, 0xf8, 0x7d, 0x12, 0x22, 0x0a,
	0x1d, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x82,
	0x7e, 0x12, 0x2b, 0x0a, 0x26, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x8c, 0x7e, 0x12, 0x24,
	0x0a, 0x1f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x96, 0x7e, 0x12, 0x21, 0x0a, 0x1c, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4f, 0x55, 0x54,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x44, 0x10, 0xa0, 0x7e, 0x12, 0x24, 0x0a, 0x1f, 0x4f, 0x4d, 0x4e, 0x49, 0x5f,
	0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0xaa, 0x7e, 0x12, 0x22, 0x0a,
	0x1d, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0xb4,
	0x7e, 0x12, 0x23, 0x0a, 0x1e, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x52,
	0x52, 0x45, 0x44, 0x10, 0xbe, 0x7e, 0x12, 0x22, 0x0a, 0x1d, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4f,
	0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x44, 0x10, 0xc8, 0x7e, 0x12, 0x21, 0x0a, 0x1c, 0x4f, 0x4d,
	0x4e, 0x49, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0xd2, 0x7e, 0x12, 0x22, 0x0a,
	0x1d, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xdc,
	0x7e, 0x12, 0x27, 0x0a, 0x22, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0xe6, 0x7e, 0x12, 0x29, 0x0a, 0x24, 0x4f, 0x4d,
	0x4e, 0x49, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x53, 0x50,
	0x41, 0x4d, 0x10, 0xf0, 0x7e, 0x12, 0x22, 0x0a, 0x1d, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x4f, 0x55,
	0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xfa, 0x7e, 0x12, 0x18, 0x0a, 0x13, 0x4f, 0x4d, 0x4e,
	0x49, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x10, 0xb2, 0x7d, 0x2a, 0x31, 0x0a, 0x16, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x42, 0x41, 0x4e, 0x44,
	0x4f, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x8a, 0x02, 0x0a, 0x0e, 0x4f, 0x6d, 0x6e, 0x69, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x4d, 0x4e,
	0x49, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x57,
	0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x64, 0x12, 0x1c, 0x0a, 0x18,
	0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x4d,
	0x4e, 0x49, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x6f, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x78,
	0x12, 0x17, 0x0a, 0x12, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x82, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4f, 0x4d, 0x4e,
	0x49, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x8c, 0x01, 0x2a, 0xa1, 0x01, 0x0a, 0x0e, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x2a, 0xc3, 0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x2c,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x58, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x00, 0x12, 0x36,
	0x0a, 0x32, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x42, 0x4f,
	0x58, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x58, 0x4f, 0x41,
	0x55, 0x54, 0x48, 0x32, 0x10, 0x01, 0x12, 0x35, 0x0a, 0x31, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x58, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x43, 0x52, 0x4f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x33, 0x36, 0x35, 0x10, 0x02, 0x2a, 0xe1, 0x03,
	0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10,
	0x00, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x10, 0x64,
	0x12, 0x44, 0x0a, 0x40, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x65, 0x12, 0x3c, 0x0a, 0x38, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52,
	0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54,
	0x41, 0x4c, 0x4b, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x66, 0x12, 0x3f, 0x0a, 0x3b, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x41, 0x4c,
	0x4b, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x67, 0x12, 0x37, 0x0a, 0x33, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x41,
	0x4c, 0x4b, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x68, 0x12, 0x31,
	0x0a, 0x2c, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x5f, 0x55, 0x50, 0x10, 0xc8,
	0x01, 0x12, 0x2e, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0xac,
	0x02, 0x2a, 0xeb, 0x04, 0x0a, 0x1c, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x4d, 0x4e,
	0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x4d, 0x4e, 0x49,
	0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45,
	0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x52, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x0a, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x4d, 0x4e, 0x49,
	0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45,
	0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x52, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x10, 0x64, 0x12, 0x45, 0x0a, 0x41, 0x4f, 0x4d, 0x4e, 0x49,
	0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45,
	0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x52, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x65, 0x12,
	0x3d, 0x0a, 0x39, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x66, 0x12, 0x40,
	0x0a, 0x3c, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x67,
	0x12, 0x38, 0x0a, 0x34, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x53,
	0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x68, 0x12, 0x32, 0x0a, 0x2d, 0x4f, 0x4d,
	0x4e, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x52, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x5f, 0x55, 0x50, 0x10, 0xc8, 0x01, 0x12, 0x2f,
	0x0a, 0x2a, 0x4f, 0x4d, 0x4e, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0xac, 0x02, 0x2a,
	0x63, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x13,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x10, 0xe8, 0x84, 0x01, 0x12, 0x1b, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44,
	0x10, 0xf2, 0x84, 0x01, 0x2a, 0xc7, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x4d, 0x50, 0x41,
	0x49, 0x47, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49,
	0x47, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x54,
	0x0a, 0x11, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x2a, 0x52, 0x0a, 0x16, 0x57, 0x68, 0x61, 0x74, 0x73, 0x41, 0x70, 0x70,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x19, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x57, 0x48, 0x41, 0x54, 0x53, 0x41,
	0x50, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x57, 0x48, 0x41, 0x54, 0x53, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x01, 0x42, 0x98, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x4f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x6e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x58, 0xaa, 0x02,
	0x0b, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xca, 0x02, 0x0b, 0x41,
	0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0xe2, 0x02, 0x17, 0x41, 0x70, 0x69,
	0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_commons_omnichannel_proto_rawDescOnce sync.Once
	file_api_commons_omnichannel_proto_rawDescData = file_api_commons_omnichannel_proto_rawDesc
)

func file_api_commons_omnichannel_proto_rawDescGZIP() []byte {
	file_api_commons_omnichannel_proto_rawDescOnce.Do(func() {
		file_api_commons_omnichannel_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_commons_omnichannel_proto_rawDescData)
	})
	return file_api_commons_omnichannel_proto_rawDescData
}

var file_api_commons_omnichannel_proto_enumTypes = make([]protoimpl.EnumInfo, 23)
var file_api_commons_omnichannel_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_api_commons_omnichannel_proto_goTypes = []any{
	(SmsNumberType)(0),                           // 0: api.commons.SmsNumberType
	(SmsNumberProvider)(0),                       // 1: api.commons.SmsNumberProvider
	(OmniCampaignModuleType)(0),                  // 2: api.commons.OmniCampaignModuleType
	(ChannelType)(0),                             // 3: api.commons.ChannelType
	(OmniCampaignDirection)(0),                   // 4: api.commons.OmniCampaignDirection
	(OmniCampaignStatus)(0),                      // 5: api.commons.OmniCampaignStatus
	(OmniCampaignModuleStatus)(0),                // 6: api.commons.OmniCampaignModuleStatus
	(ConversationStatus)(0),                      // 7: api.commons.ConversationStatus
	(AgentAssignmentActiveSearchType)(0),         // 8: api.commons.AgentAssignmentActiveSearchType
	(AgentConversationAssignmentStatus)(0),       // 9: api.commons.AgentConversationAssignmentStatus
	(AgentConversationAssignmentType)(0),         // 10: api.commons.AgentConversationAssignmentType
	(MessageFormat)(0),                           // 11: api.commons.MessageFormat
	(OmniMessageStatus)(0),                       // 12: api.commons.OmniMessageStatus
	(OmniConversationResult)(0),                  // 13: api.commons.OmniConversationResult
	(OmniTaskStatus)(0),                          // 14: api.commons.OmniTaskStatus
	(OmniSenderType)(0),                          // 15: api.commons.OmniSenderType
	(ConnectedInboxAuthenticationType)(0),        // 16: api.commons.ConnectedInboxAuthenticationType
	(ConversationStateChangeTimerName)(0),        // 17: api.commons.ConversationStateChangeTimerName
	(OmniConversationMetadataName)(0),            // 18: api.commons.OmniConversationMetadataName
	(ProjectStatus)(0),                           // 19: api.commons.ProjectStatus
	(CampaignStatus)(0),                          // 20: api.commons.CampaignStatus
	(CampaignDirection)(0),                       // 21: api.commons.CampaignDirection
	(WhatsAppNumberProvider)(0),                  // 22: api.commons.WhatsAppNumberProvider
	(*OmniCampaign)(nil),                         // 23: api.commons.OmniCampaign
	(*OmniCampaignModule)(nil),                   // 24: api.commons.OmniCampaignModule
	(*OmniCampaignModuleConfig)(nil),             // 25: api.commons.OmniCampaignModuleConfig
	(*ConversationTimeoutMessageConfig)(nil),     // 26: api.commons.ConversationTimeoutMessageConfig
	(*SmsNumber)(nil),                            // 27: api.commons.SmsNumber
	(*ConversationCustomerInformation)(nil),      // 28: api.commons.ConversationCustomerInformation
	(*SLATimeouts)(nil),                          // 29: api.commons.SLATimeouts
	(*ConversationCollectedData)(nil),            // 30: api.commons.ConversationCollectedData
	(*ConversationCollectedData_Item)(nil),       // 31: api.commons.ConversationCollectedData_Item
	(*OmniMessage)(nil),                          // 32: api.commons.OmniMessage
	(*CustomerChatWidgetMessage)(nil),            // 33: api.commons.CustomerChatWidgetMessage
	(*AgentChatWidgetMessage)(nil),               // 34: api.commons.AgentChatWidgetMessage
	(*OmniMessagePayload)(nil),                   // 35: api.commons.OmniMessagePayload
	(*OmniTextMessage)(nil),                      // 36: api.commons.OmniTextMessage
	(*OmniOffLoadedTextMessage)(nil),             // 37: api.commons.OmniOffLoadedTextMessage
	(*OmniTypingNotification)(nil),               // 38: api.commons.OmniTypingNotification
	(*OmniAssignConversation)(nil),               // 39: api.commons.OmniAssignConversation
	(*OmniReassignmentNotification)(nil),         // 40: api.commons.OmniReassignmentNotification
	(*OmniUnassignConversation)(nil),             // 41: api.commons.OmniUnassignConversation
	(*OmniRequestAttachmentUploadURL)(nil),       // 42: api.commons.OmniRequestAttachmentUploadURL
	(*OmniAttachmentUploadURL)(nil),              // 43: api.commons.OmniAttachmentUploadURL
	(*OmniAttachment)(nil),                       // 44: api.commons.OmniAttachment
	(*OmniStartWrapUp)(nil),                      // 45: api.commons.OmniStartWrapUp
	(*OmniFinishWrapUp)(nil),                     // 46: api.commons.OmniFinishWrapUp
	(*OmniSuspend)(nil),                          // 47: api.commons.OmniSuspend
	(*OmniCloseConversation)(nil),                // 48: api.commons.OmniCloseConversation
	(*OmniQueueInformation)(nil),                 // 49: api.commons.OmniQueueInformation
	(*OmniRequestQueueInformation)(nil),          // 50: api.commons.OmniRequestQueueInformation
	(*OmniCannedMessage)(nil),                    // 51: api.commons.OmniCannedMessage
	(*OmniDataMessage)(nil),                      // 52: api.commons.OmniDataMessage
	(*OmniConversationUserInformation)(nil),      // 53: api.commons.OmniConversationUserInformation
	(*CustomerCollectedData)(nil),                // 54: api.commons.CustomerCollectedData
	(*CustomerCollectedDataItem)(nil),            // 55: api.commons.CustomerCollectedDataItem
	(*OmniConversation)(nil),                     // 56: api.commons.OmniConversation
	(*OmniConversationAssignment)(nil),           // 57: api.commons.OmniConversationAssignment
	(*OmniConversationSkills)(nil),               // 58: api.commons.OmniConversationSkills
	(*WeekdayTimeRange)(nil),                     // 59: api.commons.WeekdayTimeRange
	(*WeekdayTimeRangeEntry)(nil),                // 60: api.commons.WeekdayTimeRangeEntry
	(*Disposition)(nil),                          // 61: api.commons.Disposition
	(*GetQueuesDetailsRes)(nil),                  // 62: api.commons.GetQueuesDetailsRes
	(*OmniCustomUnsubscribeLink)(nil),            // 63: api.commons.OmniCustomUnsubscribeLink
	(*ContactList)(nil),                          // 64: api.commons.ContactList
	(*ContactEntry)(nil),                         // 65: api.commons.ContactEntry
	(*OmniTask)(nil),                             // 66: api.commons.OmniTask
	(*OmniTaskConfig)(nil),                       // 67: api.commons.OmniTaskConfig
	(*OmniTaskState)(nil),                        // 68: api.commons.OmniTaskState
	(*ComplianceRuleSet)(nil),                    // 69: api.commons.ComplianceRuleSet
	(*ComplianceRule)(nil),                       // 70: api.commons.ComplianceRule
	(*OmniDataField)(nil),                        // 71: api.commons.OmniDataField
	(*ConnectedInbox)(nil),                       // 72: api.commons.ConnectedInbox
	(*ConnectedInboxOAuthConfig)(nil),            // 73: api.commons.ConnectedInboxOAuthConfig
	(*VerifiedEmail)(nil),                        // 74: api.commons.VerifiedEmail
	(*Signature)(nil),                            // 75: api.commons.Signature
	(*OmniProjectComplianceConfig)(nil),          // 76: api.commons.OmniProjectComplianceConfig
	(*OmniComplianceAction)(nil),                 // 77: api.commons.OmniComplianceAction
	(*OmniComplianceConfig)(nil),                 // 78: api.commons.OmniComplianceConfig
	(*WhatsAppNumber)(nil),                       // 79: api.commons.WhatsAppNumber
	(*OmniCampaignModule_Details)(nil),           // 80: api.commons.OmniCampaignModule.Details
	nil,                                          // 81: api.commons.OmniCampaignModuleConfig.ProviderMetadataEntry
	(*OmniConversation_ConversationDetails)(nil), // 82: api.commons.OmniConversation.ConversationDetails
	(*OmniConversationAssignment_ConversationAssignmentDetails)(nil), // 83: api.commons.OmniConversationAssignment.ConversationAssignmentDetails
	nil,                                      // 84: api.commons.OmniConversationSkills.SkillsEntry
	(*GetQueuesDetailsRes_QueueDetails)(nil), // 85: api.commons.GetQueuesDetailsRes.QueueDetails
	(*ContactList_Metadata)(nil),             // 86: api.commons.ContactList.Metadata
	(*OmniTask_Details)(nil),                 // 87: api.commons.OmniTask.Details
	(*OmniTaskState_Entry)(nil),              // 88: api.commons.OmniTaskState.Entry
	(*timestamppb.Timestamp)(nil),            // 89: google.protobuf.Timestamp
	(*TimeZoneWrapper)(nil),                  // 90: api.commons.TimeZoneWrapper
	(*wrapperspb.StringValue)(nil),           // 91: google.protobuf.StringValue
	(*ChatColorProperties)(nil),              // 92: api.commons.ChatColorProperties
	(*Int64Id)(nil),                          // 93: api.commons.Int64Id
	(*ChatHeader)(nil),                       // 94: api.commons.ChatHeader
	(*wrapperspb.Int64Value)(nil),            // 95: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),             // 96: google.protobuf.BoolValue
	(Weekday_Enum)(0),                        // 97: api.commons.Weekday.Enum
	(*durationpb.Duration)(nil),              // 98: google.protobuf.Duration
	(FieldType)(0),                           // 99: api.commons.FieldType
}
var file_api_commons_omnichannel_proto_depIdxs = []int32{
	58,  // 0: api.commons.OmniCampaign.skills:type_name -> api.commons.OmniConversationSkills
	89,  // 1: api.commons.OmniCampaign.start_date:type_name -> google.protobuf.Timestamp
	5,   // 2: api.commons.OmniCampaign.status:type_name -> api.commons.OmniCampaignStatus
	3,   // 3: api.commons.OmniCampaign.channel_type:type_name -> api.commons.ChannelType
	89,  // 4: api.commons.OmniCampaign.date_created:type_name -> google.protobuf.Timestamp
	89,  // 5: api.commons.OmniCampaign.date_modified:type_name -> google.protobuf.Timestamp
	24,  // 6: api.commons.OmniCampaign.modules:type_name -> api.commons.OmniCampaignModule
	90,  // 7: api.commons.OmniCampaign.time_zone:type_name -> api.commons.TimeZoneWrapper
	78,  // 8: api.commons.OmniCampaign.compliance_config:type_name -> api.commons.OmniComplianceConfig
	2,   // 9: api.commons.OmniCampaignModule.module_type:type_name -> api.commons.OmniCampaignModuleType
	6,   // 10: api.commons.OmniCampaignModule.status:type_name -> api.commons.OmniCampaignModuleStatus
	25,  // 11: api.commons.OmniCampaignModule.config:type_name -> api.commons.OmniCampaignModuleConfig
	89,  // 12: api.commons.OmniCampaignModule.date_created:type_name -> google.protobuf.Timestamp
	89,  // 13: api.commons.OmniCampaignModule.date_modified:type_name -> google.protobuf.Timestamp
	89,  // 14: api.commons.OmniCampaignModule.scheduled_stop_date:type_name -> google.protobuf.Timestamp
	89,  // 15: api.commons.OmniCampaignModule.actual_stop_date:type_name -> google.protobuf.Timestamp
	59,  // 16: api.commons.OmniCampaignModule.hours_of_operation:type_name -> api.commons.WeekdayTimeRange
	80,  // 17: api.commons.OmniCampaignModule.details:type_name -> api.commons.OmniCampaignModule.Details
	44,  // 18: api.commons.OmniCampaignModule.attachments:type_name -> api.commons.OmniAttachment
	91,  // 19: api.commons.OmniCampaignModuleConfig.api_key_primary:type_name -> google.protobuf.StringValue
	91,  // 20: api.commons.OmniCampaignModuleConfig.api_key_secondary:type_name -> google.protobuf.StringValue
	92,  // 21: api.commons.OmniCampaignModuleConfig.color_properties:type_name -> api.commons.ChatColorProperties
	93,  // 22: api.commons.OmniCampaignModuleConfig.connected_inbox_sid:type_name -> api.commons.Int64Id
	61,  // 23: api.commons.OmniCampaignModuleConfig.dispositions:type_name -> api.commons.Disposition
	91,  // 24: api.commons.OmniCampaignModuleConfig.email:type_name -> google.protobuf.StringValue
	91,  // 25: api.commons.OmniCampaignModuleConfig.message_body:type_name -> google.protobuf.StringValue
	91,  // 26: api.commons.OmniCampaignModuleConfig.email_subject:type_name -> google.protobuf.StringValue
	27,  // 27: api.commons.OmniCampaignModuleConfig.sms_number:type_name -> api.commons.SmsNumber
	94,  // 28: api.commons.OmniCampaignModuleConfig.header:type_name -> api.commons.ChatHeader
	29,  // 29: api.commons.OmniCampaignModuleConfig.sla_timeouts:type_name -> api.commons.SLATimeouts
	95,  // 30: api.commons.OmniCampaignModuleConfig.sends_per_hour:type_name -> google.protobuf.Int64Value
	93,  // 31: api.commons.OmniCampaignModuleConfig.unsubscribe_link_sid:type_name -> api.commons.Int64Id
	93,  // 32: api.commons.OmniCampaignModuleConfig.verified_email_sid:type_name -> api.commons.Int64Id
	96,  // 33: api.commons.OmniCampaignModuleConfig.stop_on_task_deplete:type_name -> google.protobuf.BoolValue
	44,  // 34: api.commons.OmniCampaignModuleConfig.attachments:type_name -> api.commons.OmniAttachment
	91,  // 35: api.commons.OmniCampaignModuleConfig.compliance_rule_set_id:type_name -> google.protobuf.StringValue
	93,  // 36: api.commons.OmniCampaignModuleConfig.flow_id:type_name -> api.commons.Int64Id
	58,  // 37: api.commons.OmniCampaignModuleConfig.skills:type_name -> api.commons.OmniConversationSkills
	79,  // 38: api.commons.OmniCampaignModuleConfig.whatsapp_number:type_name -> api.commons.WhatsAppNumber
	81,  // 39: api.commons.OmniCampaignModuleConfig.provider_metadata:type_name -> api.commons.OmniCampaignModuleConfig.ProviderMetadataEntry
	26,  // 40: api.commons.OmniCampaignModuleConfig.timeout_message_config:type_name -> api.commons.ConversationTimeoutMessageConfig
	0,   // 41: api.commons.SmsNumber.type:type_name -> api.commons.SmsNumberType
	1,   // 42: api.commons.SmsNumber.provider:type_name -> api.commons.SmsNumberProvider
	31,  // 43: api.commons.ConversationCollectedData.items:type_name -> api.commons.ConversationCollectedData_Item
	89,  // 44: api.commons.ConversationCollectedData_Item.collection_time:type_name -> google.protobuf.Timestamp
	91,  // 45: api.commons.ConversationCollectedData_Item.user_id:type_name -> google.protobuf.StringValue
	91,  // 46: api.commons.OmniMessage.user_id:type_name -> google.protobuf.StringValue
	3,   // 47: api.commons.OmniMessage.channel_type:type_name -> api.commons.ChannelType
	91,  // 48: api.commons.OmniMessage.reference_id:type_name -> google.protobuf.StringValue
	35,  // 49: api.commons.OmniMessage.payload:type_name -> api.commons.OmniMessagePayload
	93,  // 50: api.commons.OmniMessage.conversation_sid:type_name -> api.commons.Int64Id
	12,  // 51: api.commons.OmniMessage.status:type_name -> api.commons.OmniMessageStatus
	89,  // 52: api.commons.OmniMessage.date_created:type_name -> google.protobuf.Timestamp
	89,  // 53: api.commons.OmniMessage.date_modified:type_name -> google.protobuf.Timestamp
	91,  // 54: api.commons.OmniMessage.subject:type_name -> google.protobuf.StringValue
	15,  // 55: api.commons.OmniMessage.sender_type:type_name -> api.commons.OmniSenderType
	91,  // 56: api.commons.OmniMessage.status_message:type_name -> google.protobuf.StringValue
	11,  // 57: api.commons.OmniMessage.message_format:type_name -> api.commons.MessageFormat
	35,  // 58: api.commons.CustomerChatWidgetMessage.payload:type_name -> api.commons.OmniMessagePayload
	89,  // 59: api.commons.CustomerChatWidgetMessage.date_created:type_name -> google.protobuf.Timestamp
	28,  // 60: api.commons.CustomerChatWidgetMessage.customer_information:type_name -> api.commons.ConversationCustomerInformation
	35,  // 61: api.commons.AgentChatWidgetMessage.payload:type_name -> api.commons.OmniMessagePayload
	89,  // 62: api.commons.AgentChatWidgetMessage.date_created:type_name -> google.protobuf.Timestamp
	53,  // 63: api.commons.AgentChatWidgetMessage.user_information:type_name -> api.commons.OmniConversationUserInformation
	15,  // 64: api.commons.AgentChatWidgetMessage.sender_type:type_name -> api.commons.OmniSenderType
	11,  // 65: api.commons.AgentChatWidgetMessage.message_format:type_name -> api.commons.MessageFormat
	36,  // 66: api.commons.OmniMessagePayload.text_message:type_name -> api.commons.OmniTextMessage
	38,  // 67: api.commons.OmniMessagePayload.typing_notification:type_name -> api.commons.OmniTypingNotification
	40,  // 68: api.commons.OmniMessagePayload.reassignment:type_name -> api.commons.OmniReassignmentNotification
	42,  // 69: api.commons.OmniMessagePayload.request_attachment_upload_url:type_name -> api.commons.OmniRequestAttachmentUploadURL
	43,  // 70: api.commons.OmniMessagePayload.attachment_upload_url:type_name -> api.commons.OmniAttachmentUploadURL
	44,  // 71: api.commons.OmniMessagePayload.attachment:type_name -> api.commons.OmniAttachment
	48,  // 72: api.commons.OmniMessagePayload.close_conversation:type_name -> api.commons.OmniCloseConversation
	39,  // 73: api.commons.OmniMessagePayload.assign_conversation:type_name -> api.commons.OmniAssignConversation
	41,  // 74: api.commons.OmniMessagePayload.unassign_conversation:type_name -> api.commons.OmniUnassignConversation
	46,  // 75: api.commons.OmniMessagePayload.finish_wrap_up:type_name -> api.commons.OmniFinishWrapUp
	47,  // 76: api.commons.OmniMessagePayload.suspend:type_name -> api.commons.OmniSuspend
	45,  // 77: api.commons.OmniMessagePayload.start_wrap_up:type_name -> api.commons.OmniStartWrapUp
	49,  // 78: api.commons.OmniMessagePayload.queue_information:type_name -> api.commons.OmniQueueInformation
	50,  // 79: api.commons.OmniMessagePayload.request_queue_information:type_name -> api.commons.OmniRequestQueueInformation
	37,  // 80: api.commons.OmniMessagePayload.off_loaded_text_message:type_name -> api.commons.OmniOffLoadedTextMessage
	51,  // 81: api.commons.OmniMessagePayload.canned_message:type_name -> api.commons.OmniCannedMessage
	52,  // 82: api.commons.OmniMessagePayload.data_message:type_name -> api.commons.OmniDataMessage
	44,  // 83: api.commons.OmniTextMessage.attachments:type_name -> api.commons.OmniAttachment
	95,  // 84: api.commons.OmniTextMessage.primary_asm_session_sid:type_name -> google.protobuf.Int64Value
	44,  // 85: api.commons.OmniOffLoadedTextMessage.attachments:type_name -> api.commons.OmniAttachment
	95,  // 86: api.commons.OmniReassignmentNotification.new_user_asm_session_sid:type_name -> google.protobuf.Int64Value
	91,  // 87: api.commons.OmniUnassignConversation.user_id:type_name -> google.protobuf.StringValue
	95,  // 88: api.commons.OmniUnassignConversation.primary_asm_session_sid:type_name -> google.protobuf.Int64Value
	91,  // 89: api.commons.OmniAttachment.temp_id:type_name -> google.protobuf.StringValue
	89,  // 90: api.commons.OmniAttachment.date_created:type_name -> google.protobuf.Timestamp
	89,  // 91: api.commons.OmniAttachment.date_modified:type_name -> google.protobuf.Timestamp
	91,  // 92: api.commons.OmniAttachment.content_id:type_name -> google.protobuf.StringValue
	91,  // 93: api.commons.OmniAttachment.width:type_name -> google.protobuf.StringValue
	91,  // 94: api.commons.OmniAttachment.height:type_name -> google.protobuf.StringValue
	95,  // 95: api.commons.OmniStartWrapUp.primary_asm_session_sid:type_name -> google.protobuf.Int64Value
	95,  // 96: api.commons.OmniFinishWrapUp.primary_asm_session_sid:type_name -> google.protobuf.Int64Value
	95,  // 97: api.commons.OmniSuspend.primary_asm_session_sid:type_name -> google.protobuf.Int64Value
	95,  // 98: api.commons.OmniCloseConversation.primary_asm_session_sid:type_name -> google.protobuf.Int64Value
	55,  // 99: api.commons.CustomerCollectedData.items:type_name -> api.commons.CustomerCollectedDataItem
	3,   // 100: api.commons.OmniConversation.channel_type:type_name -> api.commons.ChannelType
	58,  // 101: api.commons.OmniConversation.skills:type_name -> api.commons.OmniConversationSkills
	89,  // 102: api.commons.OmniConversation.date_created:type_name -> google.protobuf.Timestamp
	89,  // 103: api.commons.OmniConversation.date_modified:type_name -> google.protobuf.Timestamp
	7,   // 104: api.commons.OmniConversation.status:type_name -> api.commons.ConversationStatus
	91,  // 105: api.commons.OmniConversation.customer_email_address:type_name -> google.protobuf.StringValue
	91,  // 106: api.commons.OmniConversation.customer_phone_number:type_name -> google.protobuf.StringValue
	91,  // 107: api.commons.OmniConversation.customer_name:type_name -> google.protobuf.StringValue
	91,  // 108: api.commons.OmniConversation.reference_id:type_name -> google.protobuf.StringValue
	89,  // 109: api.commons.OmniConversation.last_message_time:type_name -> google.protobuf.Timestamp
	30,  // 110: api.commons.OmniConversation.conversation_collected_data:type_name -> api.commons.ConversationCollectedData
	29,  // 111: api.commons.OmniConversation.sla_timeouts:type_name -> api.commons.SLATimeouts
	57,  // 112: api.commons.OmniConversation.conversation_assignments:type_name -> api.commons.OmniConversationAssignment
	82,  // 113: api.commons.OmniConversation.metadata:type_name -> api.commons.OmniConversation.ConversationDetails
	89,  // 114: api.commons.OmniConversation.end_time:type_name -> google.protobuf.Timestamp
	89,  // 115: api.commons.OmniConversation.last_message_group_time:type_name -> google.protobuf.Timestamp
	15,  // 116: api.commons.OmniConversation.last_message_group_type:type_name -> api.commons.OmniSenderType
	13,  // 117: api.commons.OmniConversation.result:type_name -> api.commons.OmniConversationResult
	89,  // 118: api.commons.OmniConversation.last_state_changed_time:type_name -> google.protobuf.Timestamp
	10,  // 119: api.commons.OmniConversationAssignment.assignment_type:type_name -> api.commons.AgentConversationAssignmentType
	89,  // 120: api.commons.OmniConversationAssignment.date_created:type_name -> google.protobuf.Timestamp
	89,  // 121: api.commons.OmniConversationAssignment.date_modified:type_name -> google.protobuf.Timestamp
	83,  // 122: api.commons.OmniConversationAssignment.metadata:type_name -> api.commons.OmniConversationAssignment.ConversationAssignmentDetails
	84,  // 123: api.commons.OmniConversationSkills.skills:type_name -> api.commons.OmniConversationSkills.SkillsEntry
	60,  // 124: api.commons.WeekdayTimeRange.entries:type_name -> api.commons.WeekdayTimeRangeEntry
	97,  // 125: api.commons.WeekdayTimeRangeEntry.start_day:type_name -> api.commons.Weekday.Enum
	97,  // 126: api.commons.WeekdayTimeRangeEntry.end_day:type_name -> api.commons.Weekday.Enum
	89,  // 127: api.commons.Disposition.date_created:type_name -> google.protobuf.Timestamp
	89,  // 128: api.commons.Disposition.date_modified:type_name -> google.protobuf.Timestamp
	85,  // 129: api.commons.GetQueuesDetailsRes.queue_details:type_name -> api.commons.GetQueuesDetailsRes.QueueDetails
	89,  // 130: api.commons.OmniCustomUnsubscribeLink.date_created:type_name -> google.protobuf.Timestamp
	89,  // 131: api.commons.OmniCustomUnsubscribeLink.date_modified:type_name -> google.protobuf.Timestamp
	89,  // 132: api.commons.OmniCustomUnsubscribeLink.date_validated:type_name -> google.protobuf.Timestamp
	93,  // 133: api.commons.ContactList.project_sid:type_name -> api.commons.Int64Id
	89,  // 134: api.commons.ContactList.date_created:type_name -> google.protobuf.Timestamp
	89,  // 135: api.commons.ContactList.date_modified:type_name -> google.protobuf.Timestamp
	65,  // 136: api.commons.ContactList.contact_entries:type_name -> api.commons.ContactEntry
	86,  // 137: api.commons.ContactList.metadata:type_name -> api.commons.ContactList.Metadata
	89,  // 138: api.commons.ContactEntry.date_created:type_name -> google.protobuf.Timestamp
	89,  // 139: api.commons.ContactEntry.date_modified:type_name -> google.protobuf.Timestamp
	71,  // 140: api.commons.ContactEntry.data_fields:type_name -> api.commons.OmniDataField
	14,  // 141: api.commons.OmniTask.status:type_name -> api.commons.OmniTaskStatus
	89,  // 142: api.commons.OmniTask.date_created:type_name -> google.protobuf.Timestamp
	89,  // 143: api.commons.OmniTask.date_modified:type_name -> google.protobuf.Timestamp
	93,  // 144: api.commons.OmniTask.contact_entry_sid:type_name -> api.commons.Int64Id
	68,  // 145: api.commons.OmniTask.state:type_name -> api.commons.OmniTaskState
	71,  // 146: api.commons.OmniTask.data_fields:type_name -> api.commons.OmniDataField
	87,  // 147: api.commons.OmniTask.details:type_name -> api.commons.OmniTask.Details
	91,  // 148: api.commons.OmniTask.status_message:type_name -> google.protobuf.StringValue
	89,  // 149: api.commons.OmniTask.scheduled_time:type_name -> google.protobuf.Timestamp
	67,  // 150: api.commons.OmniTask.task_config:type_name -> api.commons.OmniTaskConfig
	58,  // 151: api.commons.OmniTaskConfig.skills:type_name -> api.commons.OmniConversationSkills
	98,  // 152: api.commons.OmniTaskConfig.absolute_timeout_duration:type_name -> google.protobuf.Duration
	98,  // 153: api.commons.OmniTaskConfig.agent_timeout_duration:type_name -> google.protobuf.Duration
	35,  // 154: api.commons.OmniTaskConfig.message:type_name -> api.commons.OmniMessagePayload
	88,  // 155: api.commons.OmniTaskState.destinations:type_name -> api.commons.OmniTaskState.Entry
	88,  // 156: api.commons.OmniTaskState.sources:type_name -> api.commons.OmniTaskState.Entry
	69,  // 157: api.commons.OmniTaskState.rule_set:type_name -> api.commons.ComplianceRuleSet
	91,  // 158: api.commons.OmniTaskState.scrub_list_id:type_name -> google.protobuf.StringValue
	70,  // 159: api.commons.ComplianceRuleSet.rules:type_name -> api.commons.ComplianceRule
	99,  // 160: api.commons.OmniDataField.type:type_name -> api.commons.FieldType
	89,  // 161: api.commons.ConnectedInbox.last_scheduled_time:type_name -> google.protobuf.Timestamp
	89,  // 162: api.commons.ConnectedInbox.last_checked:type_name -> google.protobuf.Timestamp
	91,  // 163: api.commons.ConnectedInbox.last_error:type_name -> google.protobuf.StringValue
	89,  // 164: api.commons.ConnectedInbox.standby_error_time:type_name -> google.protobuf.Timestamp
	89,  // 165: api.commons.ConnectedInbox.last_updated:type_name -> google.protobuf.Timestamp
	91,  // 166: api.commons.ConnectedInbox.google_xoauth2_refresh_token:type_name -> google.protobuf.StringValue
	91,  // 167: api.commons.ConnectedInbox.google_xoauth2_access_token:type_name -> google.protobuf.StringValue
	89,  // 168: api.commons.ConnectedInbox.google_xoauth2_access_token_expiration:type_name -> google.protobuf.Timestamp
	16,  // 169: api.commons.ConnectedInbox.authentication_type:type_name -> api.commons.ConnectedInboxAuthenticationType
	73,  // 170: api.commons.ConnectedInbox.oauth_reference_id:type_name -> api.commons.ConnectedInboxOAuthConfig
	89,  // 171: api.commons.VerifiedEmail.created_on:type_name -> google.protobuf.Timestamp
	89,  // 172: api.commons.VerifiedEmail.verified_on:type_name -> google.protobuf.Timestamp
	91,  // 173: api.commons.VerifiedEmail.description:type_name -> google.protobuf.StringValue
	89,  // 174: api.commons.Signature.date_created:type_name -> google.protobuf.Timestamp
	89,  // 175: api.commons.Signature.date_modified:type_name -> google.protobuf.Timestamp
	89,  // 176: api.commons.Signature.deleted_on:type_name -> google.protobuf.Timestamp
	78,  // 177: api.commons.OmniProjectComplianceConfig.email:type_name -> api.commons.OmniComplianceConfig
	78,  // 178: api.commons.OmniProjectComplianceConfig.sms:type_name -> api.commons.OmniComplianceConfig
	78,  // 179: api.commons.OmniProjectComplianceConfig.whatsapp:type_name -> api.commons.OmniComplianceConfig
	77,  // 180: api.commons.OmniComplianceConfig.opt_in:type_name -> api.commons.OmniComplianceAction
	77,  // 181: api.commons.OmniComplianceConfig.opt_out:type_name -> api.commons.OmniComplianceAction
	77,  // 182: api.commons.OmniComplianceConfig.help:type_name -> api.commons.OmniComplianceAction
	77,  // 183: api.commons.OmniComplianceConfig.information:type_name -> api.commons.OmniComplianceAction
	91,  // 184: api.commons.OmniComplianceConfig.rule_set_id:type_name -> google.protobuf.StringValue
	22,  // 185: api.commons.WhatsAppNumber.provider:type_name -> api.commons.WhatsAppNumberProvider
	89,  // 186: api.commons.WhatsAppNumber.date_created:type_name -> google.protobuf.Timestamp
	89,  // 187: api.commons.WhatsAppNumber.date_modified:type_name -> google.protobuf.Timestamp
	95,  // 188: api.commons.OmniCampaignModule.Details.total_task_count:type_name -> google.protobuf.Int64Value
	95,  // 189: api.commons.OmniCampaignModule.Details.completed_task_count:type_name -> google.protobuf.Int64Value
	91,  // 190: api.commons.OmniCampaignModule.Details.connected_inbox_address:type_name -> google.protobuf.StringValue
	91,  // 191: api.commons.OmniCampaignModule.Details.verified_email_address:type_name -> google.protobuf.StringValue
	95,  // 192: api.commons.OmniCampaignModule.Details.pending_task_count:type_name -> google.protobuf.Int64Value
	95,  // 193: api.commons.OmniCampaignModule.Details.failed_task_count:type_name -> google.protobuf.Int64Value
	95,  // 194: api.commons.OmniCampaignModule.Details.canceled_task_count:type_name -> google.protobuf.Int64Value
	3,   // 195: api.commons.GetQueuesDetailsRes.QueueDetails.channel_type:type_name -> api.commons.ChannelType
	91,  // 196: api.commons.OmniTask.Details.contact_list_name:type_name -> google.protobuf.StringValue
	89,  // 197: api.commons.OmniTaskState.Entry.last_used:type_name -> google.protobuf.Timestamp
	198, // [198:198] is the sub-list for method output_type
	198, // [198:198] is the sub-list for method input_type
	198, // [198:198] is the sub-list for extension type_name
	198, // [198:198] is the sub-list for extension extendee
	0,   // [0:198] is the sub-list for field type_name
}

func init() { file_api_commons_omnichannel_proto_init() }
func file_api_commons_omnichannel_proto_init() {
	if File_api_commons_omnichannel_proto != nil {
		return
	}
	file_api_commons_chat_proto_init()
	file_api_commons_enums_proto_init()
	file_api_commons_lms_proto_init()
	file_api_commons_org_proto_init()
	file_api_commons_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_commons_omnichannel_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*OmniCampaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*OmniCampaignModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*OmniCampaignModuleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationTimeoutMessageConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SmsNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationCustomerInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SLATimeouts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationCollectedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationCollectedData_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*OmniMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CustomerChatWidgetMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*AgentChatWidgetMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*OmniMessagePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*OmniTextMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*OmniOffLoadedTextMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*OmniTypingNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*OmniAssignConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*OmniReassignmentNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*OmniUnassignConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*OmniRequestAttachmentUploadURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*OmniAttachmentUploadURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*OmniAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*OmniStartWrapUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*OmniFinishWrapUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*OmniSuspend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*OmniCloseConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*OmniQueueInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*OmniRequestQueueInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*OmniCannedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*OmniDataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*OmniConversationUserInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CustomerCollectedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CustomerCollectedDataItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*OmniConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*OmniConversationAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*OmniConversationSkills); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*WeekdayTimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*WeekdayTimeRangeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*Disposition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*GetQueuesDetailsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*OmniCustomUnsubscribeLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*ContactList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*ContactEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*OmniTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*OmniTaskConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*OmniTaskState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceRuleSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*ComplianceRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*OmniDataField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*ConnectedInbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*ConnectedInboxOAuthConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*VerifiedEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*OmniProjectComplianceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*OmniComplianceAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*OmniComplianceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*WhatsAppNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*OmniCampaignModule_Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*OmniConversation_ConversationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*OmniConversationAssignment_ConversationAssignmentDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*GetQueuesDetailsRes_QueueDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*ContactList_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*OmniTask_Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_commons_omnichannel_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*OmniTaskState_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_commons_omnichannel_proto_msgTypes[12].OneofWrappers = []any{
		(*OmniMessagePayload_TextMessage)(nil),
		(*OmniMessagePayload_TypingNotification)(nil),
		(*OmniMessagePayload_Reassignment)(nil),
		(*OmniMessagePayload_RequestAttachmentUploadUrl)(nil),
		(*OmniMessagePayload_AttachmentUploadUrl)(nil),
		(*OmniMessagePayload_Attachment)(nil),
		(*OmniMessagePayload_CloseConversation)(nil),
		(*OmniMessagePayload_AssignConversation)(nil),
		(*OmniMessagePayload_UnassignConversation)(nil),
		(*OmniMessagePayload_FinishWrapUp)(nil),
		(*OmniMessagePayload_Suspend)(nil),
		(*OmniMessagePayload_StartWrapUp)(nil),
		(*OmniMessagePayload_QueueInformation)(nil),
		(*OmniMessagePayload_RequestQueueInformation)(nil),
		(*OmniMessagePayload_OffLoadedTextMessage)(nil),
		(*OmniMessagePayload_CannedMessage)(nil),
		(*OmniMessagePayload_DataMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_commons_omnichannel_proto_rawDesc,
			NumEnums:      23,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_commons_omnichannel_proto_goTypes,
		DependencyIndexes: file_api_commons_omnichannel_proto_depIdxs,
		EnumInfos:         file_api_commons_omnichannel_proto_enumTypes,
		MessageInfos:      file_api_commons_omnichannel_proto_msgTypes,
	}.Build()
	File_api_commons_omnichannel_proto = out.File
	file_api_commons_omnichannel_proto_rawDesc = nil
	file_api_commons_omnichannel_proto_goTypes = nil
	file_api_commons_omnichannel_proto_depIdxs = nil
}
