// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tcnapi/omni/projects/v1/service.proto

package projectsv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tcncloud/api-go/tcnapi/omni/projects/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProjectsName is the fully-qualified name of the Projects service.
	ProjectsName = "tcnapi.omni.projects.v1.Projects"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProjectsListProjectsProcedure is the fully-qualified name of the Projects's ListProjects RPC.
	ProjectsListProjectsProcedure = "/tcnapi.omni.projects.v1.Projects/ListProjects"
	// ProjectsGetProjectProcedure is the fully-qualified name of the Projects's GetProject RPC.
	ProjectsGetProjectProcedure = "/tcnapi.omni.projects.v1.Projects/GetProject"
	// ProjectsCreateProjectProcedure is the fully-qualified name of the Projects's CreateProject RPC.
	ProjectsCreateProjectProcedure = "/tcnapi.omni.projects.v1.Projects/CreateProject"
	// ProjectsUpdateProjectProcedure is the fully-qualified name of the Projects's UpdateProject RPC.
	ProjectsUpdateProjectProcedure = "/tcnapi.omni.projects.v1.Projects/UpdateProject"
	// ProjectsDeleteProjectProcedure is the fully-qualified name of the Projects's DeleteProject RPC.
	ProjectsDeleteProjectProcedure = "/tcnapi.omni.projects.v1.Projects/DeleteProject"
)

// ProjectsClient is a client for the tcnapi.omni.projects.v1.Projects service.
type ProjectsClient interface {
	// Method to list projects
	ListProjects(context.Context, *connect_go.Request[v1.ListProjectsRequest]) (*connect_go.Response[v1.ListProjectsResponse], error)
	// Method to get a rpoject
	GetProject(context.Context, *connect_go.Request[v1.GetProjectRequest]) (*connect_go.Response[v1.Project], error)
	// Method to create a project
	CreateProject(context.Context, *connect_go.Request[v1.CreateProjectRequest]) (*connect_go.Response[v1.Project], error)
	// Method to update a project
	UpdateProject(context.Context, *connect_go.Request[v1.UpdateProjectRequest]) (*connect_go.Response[v1.Project], error)
	// Method to delete a project
	DeleteProject(context.Context, *connect_go.Request[v1.DeleteProjectRequest]) (*connect_go.Response[v1.Project], error)
}

// NewProjectsClient constructs a client for the tcnapi.omni.projects.v1.Projects service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectsClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProjectsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &projectsClient{
		listProjects: connect_go.NewClient[v1.ListProjectsRequest, v1.ListProjectsResponse](
			httpClient,
			baseURL+ProjectsListProjectsProcedure,
			opts...,
		),
		getProject: connect_go.NewClient[v1.GetProjectRequest, v1.Project](
			httpClient,
			baseURL+ProjectsGetProjectProcedure,
			opts...,
		),
		createProject: connect_go.NewClient[v1.CreateProjectRequest, v1.Project](
			httpClient,
			baseURL+ProjectsCreateProjectProcedure,
			opts...,
		),
		updateProject: connect_go.NewClient[v1.UpdateProjectRequest, v1.Project](
			httpClient,
			baseURL+ProjectsUpdateProjectProcedure,
			opts...,
		),
		deleteProject: connect_go.NewClient[v1.DeleteProjectRequest, v1.Project](
			httpClient,
			baseURL+ProjectsDeleteProjectProcedure,
			opts...,
		),
	}
}

// projectsClient implements ProjectsClient.
type projectsClient struct {
	listProjects  *connect_go.Client[v1.ListProjectsRequest, v1.ListProjectsResponse]
	getProject    *connect_go.Client[v1.GetProjectRequest, v1.Project]
	createProject *connect_go.Client[v1.CreateProjectRequest, v1.Project]
	updateProject *connect_go.Client[v1.UpdateProjectRequest, v1.Project]
	deleteProject *connect_go.Client[v1.DeleteProjectRequest, v1.Project]
}

// ListProjects calls tcnapi.omni.projects.v1.Projects.ListProjects.
func (c *projectsClient) ListProjects(ctx context.Context, req *connect_go.Request[v1.ListProjectsRequest]) (*connect_go.Response[v1.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// GetProject calls tcnapi.omni.projects.v1.Projects.GetProject.
func (c *projectsClient) GetProject(ctx context.Context, req *connect_go.Request[v1.GetProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return c.getProject.CallUnary(ctx, req)
}

// CreateProject calls tcnapi.omni.projects.v1.Projects.CreateProject.
func (c *projectsClient) CreateProject(ctx context.Context, req *connect_go.Request[v1.CreateProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return c.createProject.CallUnary(ctx, req)
}

// UpdateProject calls tcnapi.omni.projects.v1.Projects.UpdateProject.
func (c *projectsClient) UpdateProject(ctx context.Context, req *connect_go.Request[v1.UpdateProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// DeleteProject calls tcnapi.omni.projects.v1.Projects.DeleteProject.
func (c *projectsClient) DeleteProject(ctx context.Context, req *connect_go.Request[v1.DeleteProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// ProjectsHandler is an implementation of the tcnapi.omni.projects.v1.Projects service.
type ProjectsHandler interface {
	// Method to list projects
	ListProjects(context.Context, *connect_go.Request[v1.ListProjectsRequest]) (*connect_go.Response[v1.ListProjectsResponse], error)
	// Method to get a rpoject
	GetProject(context.Context, *connect_go.Request[v1.GetProjectRequest]) (*connect_go.Response[v1.Project], error)
	// Method to create a project
	CreateProject(context.Context, *connect_go.Request[v1.CreateProjectRequest]) (*connect_go.Response[v1.Project], error)
	// Method to update a project
	UpdateProject(context.Context, *connect_go.Request[v1.UpdateProjectRequest]) (*connect_go.Response[v1.Project], error)
	// Method to delete a project
	DeleteProject(context.Context, *connect_go.Request[v1.DeleteProjectRequest]) (*connect_go.Response[v1.Project], error)
}

// NewProjectsHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectsHandler(svc ProjectsHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	projectsListProjectsHandler := connect_go.NewUnaryHandler(
		ProjectsListProjectsProcedure,
		svc.ListProjects,
		opts...,
	)
	projectsGetProjectHandler := connect_go.NewUnaryHandler(
		ProjectsGetProjectProcedure,
		svc.GetProject,
		opts...,
	)
	projectsCreateProjectHandler := connect_go.NewUnaryHandler(
		ProjectsCreateProjectProcedure,
		svc.CreateProject,
		opts...,
	)
	projectsUpdateProjectHandler := connect_go.NewUnaryHandler(
		ProjectsUpdateProjectProcedure,
		svc.UpdateProject,
		opts...,
	)
	projectsDeleteProjectHandler := connect_go.NewUnaryHandler(
		ProjectsDeleteProjectProcedure,
		svc.DeleteProject,
		opts...,
	)
	return "/tcnapi.omni.projects.v1.Projects/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProjectsListProjectsProcedure:
			projectsListProjectsHandler.ServeHTTP(w, r)
		case ProjectsGetProjectProcedure:
			projectsGetProjectHandler.ServeHTTP(w, r)
		case ProjectsCreateProjectProcedure:
			projectsCreateProjectHandler.ServeHTTP(w, r)
		case ProjectsUpdateProjectProcedure:
			projectsUpdateProjectHandler.ServeHTTP(w, r)
		case ProjectsDeleteProjectProcedure:
			projectsDeleteProjectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProjectsHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectsHandler struct{}

func (UnimplementedProjectsHandler) ListProjects(context.Context, *connect_go.Request[v1.ListProjectsRequest]) (*connect_go.Response[v1.ListProjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tcnapi.omni.projects.v1.Projects.ListProjects is not implemented"))
}

func (UnimplementedProjectsHandler) GetProject(context.Context, *connect_go.Request[v1.GetProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tcnapi.omni.projects.v1.Projects.GetProject is not implemented"))
}

func (UnimplementedProjectsHandler) CreateProject(context.Context, *connect_go.Request[v1.CreateProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tcnapi.omni.projects.v1.Projects.CreateProject is not implemented"))
}

func (UnimplementedProjectsHandler) UpdateProject(context.Context, *connect_go.Request[v1.UpdateProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tcnapi.omni.projects.v1.Projects.UpdateProject is not implemented"))
}

func (UnimplementedProjectsHandler) DeleteProject(context.Context, *connect_go.Request[v1.DeleteProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tcnapi.omni.projects.v1.Projects.DeleteProject is not implemented"))
}
